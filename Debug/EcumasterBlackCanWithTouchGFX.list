
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025c10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004338  08025de0  08025de0  00035de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003d16  0802a118  0802a118  0003a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802de30  0802de30  0003de30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000240  08061328  08061328  00071328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08061568  08061568  00080114  2**0
                  CONTENTS
  7 .ARM          00000008  08061568  08061568  00071568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08061570  08061570  00080114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08061570  08061570  00071570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08061584  08061584  00071584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000114  20000000  0806158c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cb1c  20000114  080616a0  00080114  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000cc30  080616a0  0008cc30  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080114  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005b33f  00000000  00000000  00080144  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ef69  00000000  00000000  000db483  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004148  00000000  00000000  000ea3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b28  00000000  00000000  000ee538  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af09  00000000  00000000  000f2060  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000417a7  00000000  00000000  0012cf69  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012f2df  00000000  00000000  0016e710  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0029d9ef  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011854  00000000  00000000  0029daec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000114 	.word	0x20000114
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025dc8 	.word	0x08025dc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000118 	.word	0x20000118
 800020c:	08025dc8 	.word	0x08025dc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000130 	.word	0x20000130
 8000b3c:	20000188 	.word	0x20000188

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09a      	sub	sp, #104	; 0x68
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4b83      	ldr	r3, [pc, #524]	; (8000d58 <SecondTask+0x218>)
 8000b4a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b7e      	ldr	r3, [pc, #504]	; (8000d5c <SecondTask+0x21c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00b fede 	bl	800c92c <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00b fbed 	bl	800c350 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <SecondTask+0x220>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8127 	beq.w	8000dce <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b78      	ldr	r3, [pc, #480]	; (8000d64 <SecondTask+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b76      	ldr	r3, [pc, #472]	; (8000d64 <SecondTask+0x224>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a73      	ldr	r2, [pc, #460]	; (8000d64 <SecondTask+0x224>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b73      	ldr	r3, [pc, #460]	; (8000d68 <SecondTask+0x228>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b71      	ldr	r3, [pc, #452]	; (8000d68 <SecondTask+0x228>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a6e      	ldr	r2, [pc, #440]	; (8000d68 <SecondTask+0x228>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <SecondTask+0x22c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <SecondTask+0x22c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a69      	ldr	r2, [pc, #420]	; (8000d6c <SecondTask+0x22c>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <SecondTask+0x230>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a359      	add	r3, pc, #356	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <SecondTask+0x234>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <SecondTask+0x230>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a353      	add	r3, pc, #332	; (adr r3, 8000d40 <SecondTask+0x200>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <SecondTask+0x230>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <SecondTask+0x238>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a348      	add	r3, pc, #288	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <SecondTask+0x23c>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <SecondTask+0x238>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a344      	add	r3, pc, #272	; (adr r3, 8000d48 <SecondTask+0x208>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	; (8000d78 <SecondTask+0x238>)
 8000c4e:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c50:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <SecondTask+0x240>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b9f      	cmp	r3, #159	; 0x9f
 8000c56:	dc03      	bgt.n	8000c60 <SecondTask+0x120>
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <SecondTask+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e000      	b.n	8000c62 <SecondTask+0x122>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a47      	ldr	r2, [pc, #284]	; (8000d80 <SecondTask+0x240>)
 8000c64:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <SecondTask+0x244>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	db01      	blt.n	8000c7e <SecondTask+0x13e>
 8000c7a:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <SecondTask+0x248>)
 8000c7c:	e010      	b.n	8000ca0 <SecondTask+0x160>
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <SecondTask+0x244>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc78 	bl	8000578 <__aeabi_f2d>
 8000c88:	a331      	add	r3, pc, #196	; (adr r3, 8000d50 <SecondTask+0x210>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fb15 	bl	80002bc <__adddf3>
 8000c92:	4603      	mov	r3, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	4618      	mov	r0, r3
 8000c98:	4621      	mov	r1, r4
 8000c9a:	f7ff fd4d 	bl	8000738 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <SecondTask+0x244>)
 8000ca2:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <SecondTask+0x24c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc03      	bgt.n	8000cb4 <SecondTask+0x174>
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <SecondTask+0x250>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	e000      	b.n	8000cb6 <SecondTask+0x176>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <SecondTask+0x24c>)
 8000cb8:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <SecondTask+0x250>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dc03      	bgt.n	8000cca <SecondTask+0x18a>
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SecondTask+0x250>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SecondTask+0x18c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <SecondTask+0x250>)
 8000cce:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <SecondTask+0x254>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd8:	da03      	bge.n	8000ce2 <SecondTask+0x1a2>
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SecondTask+0x254>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	e001      	b.n	8000ce6 <SecondTask+0x1a6>
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <SecondTask+0x254>)
 8000ce8:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <SecondTask+0x254>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cf2:	da03      	bge.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SecondTask+0x258>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	e001      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d00:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <SecondTask+0x258>)
 8000d02:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <SecondTask+0x25c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dc03      	bgt.n	8000d14 <SecondTask+0x1d4>
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <SecondTask+0x25c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	e000      	b.n	8000d16 <SecondTask+0x1d6>
 8000d14:	2300      	movs	r3, #0
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SecondTask+0x25c>)
 8000d18:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <SecondTask+0x260>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	db3c      	blt.n	8000da8 <SecondTask+0x268>
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <SecondTask+0x264>)
 8000d30:	e04b      	b.n	8000dca <SecondTask+0x28a>
 8000d32:	bf00      	nop
 8000d34:	f3af 8000 	nop.w
 8000d38:	66666666 	.word	0x66666666
 8000d3c:	3ff66666 	.word	0x3ff66666
 8000d40:	9999999a 	.word	0x9999999a
 8000d44:	3fa99999 	.word	0x3fa99999
 8000d48:	eb851eb8 	.word	0xeb851eb8
 8000d4c:	3faeb851 	.word	0x3faeb851
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fb99999 	.word	0x3fb99999
 8000d58:	08025de0 	.word	0x08025de0
 8000d5c:	200086fc 	.word	0x200086fc
 8000d60:	08026550 	.word	0x08026550
 8000d64:	20000004 	.word	0x20000004
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000010 	.word	0x20000010
 8000d74:	3f19999a 	.word	0x3f19999a
 8000d78:	20000014 	.word	0x20000014
 8000d7c:	3f266666 	.word	0x3f266666
 8000d80:	20000398 	.word	0x20000398
 8000d84:	2000039c 	.word	0x2000039c
 8000d88:	3dcccccd 	.word	0x3dcccccd
 8000d8c:	200003a0 	.word	0x200003a0
 8000d90:	200003a4 	.word	0x200003a4
 8000d94:	200003a8 	.word	0x200003a8
 8000d98:	200003ac 	.word	0x200003ac
 8000d9c:	200003b0 	.word	0x200003b0
 8000da0:	200003b4 	.word	0x200003b4
 8000da4:	41200000 	.word	0x41200000
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SecondTask+0x300>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fbe3 	bl	8000578 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	; (adr r3, 8000e38 <SecondTask+0x2f8>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fa80 	bl	80002bc <__adddf3>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	f7ff fcb8 	bl	8000738 <__aeabi_d2f>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <SecondTask+0x300>)
 8000dcc:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v};
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <SecondTask+0x304>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <SecondTask+0x308>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <SecondTask+0x30c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <SecondTask+0x310>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <SecondTask+0x314>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <SecondTask+0x318>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <SecondTask+0x31c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <SecondTask+0x320>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <SecondTask+0x324>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <SecondTask+0x328>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <SecondTask+0x32c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <SecondTask+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SecondTask+0x300>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SecondTask+0x334>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f107 010c 	add.w	r1, r7, #12
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	f00b fd80 	bl	800c92c <xQueueGenericSend>
		osDelay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f00b fa8f 	bl	800c350 <osDelay>
	{
 8000e32:	e6a0      	b.n	8000b76 <SecondTask+0x36>
 8000e34:	f3af 8000 	nop.w
 8000e38:	33333333 	.word	0x33333333
 8000e3c:	3fe33333 	.word	0x3fe33333
 8000e40:	200003b4 	.word	0x200003b4
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000014 	.word	0x20000014
 8000e58:	20000398 	.word	0x20000398
 8000e5c:	2000039c 	.word	0x2000039c
 8000e60:	200003a0 	.word	0x200003a0
 8000e64:	200003a4 	.word	0x200003a4
 8000e68:	200003a8 	.word	0x200003a8
 8000e6c:	200003ac 	.word	0x200003ac
 8000e70:	200003b0 	.word	0x200003b0
 8000e74:	200086f8 	.word	0x200086f8

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f002 fd02 	bl	8003886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f85f 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f001 f9d5 	bl	8002234 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e8a:	f000 f917 	bl	80010bc <MX_ADC3_Init>
  MX_CRC_Init();
 8000e8e:	f000 fb0d 	bl	80014ac <MX_CRC_Init>
  MX_DCMI_Init();
 8000e92:	f000 fb2d 	bl	80014f0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e96:	f000 fb5f 	bl	8001558 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e9a:	f001 f91f 	bl	80020dc <MX_FMC_Init>
  MX_LTDC_Init();
 8000e9e:	f000 fb8d 	bl	80015bc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000ea2:	f000 fc0d 	bl	80016c0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000ea6:	f000 fc37 	bl	8001718 <MX_RTC_Init>
  MX_SAI2_Init();
 8000eaa:	f000 fcdd 	bl	8001868 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000eae:	f000 fd83 	bl	80019b8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000eb2:	f000 fda1 	bl	80019f8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000eb6:	f000 fdcf 	bl	8001a58 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000eba:	f000 fe0b 	bl	8001ad4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ebe:	f000 feb5 	bl	8001c2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ec2:	f000 ff29 	bl	8001d18 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ec6:	f000 ff9d 	bl	8001e04 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000eca:	f001 f811 	bl	8001ef0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ece:	f001 f861 	bl	8001f94 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ed2:	f001 f8a3 	bl	800201c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ed6:	f001 f8d1 	bl	800207c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000eda:	f00a fef5 	bl	800bcc8 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000ede:	f000 f93f 	bl	8001160 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000ee2:	f00d ff67 	bl	800edb4 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <main+0xbc>)
 8000ee8:	f107 041c 	add.w	r4, r7, #28
 8000eec:	461d      	mov	r5, r3
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00b f9d9 	bl	800c2b8 <osThreadCreate>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <main+0xc0>)
 8000f0a:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <main+0xc4>)
 8000f0e:	463c      	mov	r4, r7
 8000f10:	461d      	mov	r5, r3
 8000f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00b f9c8 	bl	800c2b8 <osThreadCreate>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <main+0xc8>)
 8000f2c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f2e:	f00b f9a0 	bl	800c272 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0xba>
 8000f34:	08025e14 	.word	0x08025e14
 8000f38:	2000c0b0 	.word	0x2000c0b0
 8000f3c:	08025e38 	.word	0x08025e38
 8000f40:	2000c0ac 	.word	0x2000c0ac

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b4      	sub	sp, #208	; 0xd0
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f023 ffbb 	bl	8024ece <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2284      	movs	r2, #132	; 0x84
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f023 ffac 	bl	8024ece <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f76:	f005 f95b 	bl	8006230 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <SystemClock_Config+0x170>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <SystemClock_Config+0x170>)
 8000f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <SystemClock_Config+0x170>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000faa:	2309      	movs	r3, #9
 8000fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fcc:	2319      	movs	r3, #25
 8000fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fa42 	bl	8006474 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ff6:	f001 fb51 	bl	800269c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ffa:	f005 f929 	bl	8006250 <HAL_PWREx_EnableOverDrive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001004:	f001 fb4a 	bl	800269c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800102a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800102e:	2106      	movs	r1, #6
 8001030:	4618      	mov	r0, r3
 8001032:	f005 fcc3 	bl	80069bc <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800103c:	f001 fb2e 	bl	800269c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <SystemClock_Config+0x174>)
 8001042:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001054:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001058:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800106e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800107a:	2300      	movs	r3, #0
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107e:	2300      	movs	r3, #0
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001082:	2300      	movs	r3, #0
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800108a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f005 fe93 	bl	8006dc4 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010a4:	f001 fafa 	bl	800269c <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	37d0      	adds	r7, #208	; 0xd0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000
 80010b8:	01b00868 	.word	0x01b00868

080010bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC3_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC3_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC3_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_ADC3_Init+0x98>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC3_Init+0xa0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC3_Init+0x98>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC3_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC3_Init+0x98>)
 800111e:	f002 fc01 	bl	8003924 <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001128:	f001 fab8 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800112c:	2304      	movs	r3, #4
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC3_Init+0x98>)
 800113e:	f002 fc35 	bl	80039ac <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001148:	f001 faa8 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000c3f8 	.word	0x2000c3f8
 8001158:	40012200 	.word	0x40012200
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <MX_CAN1_Init+0xcc>)
 800116a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_CAN1_Init+0xc8>)
 800116e:	2214      	movs	r2, #20
 8001170:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_CAN1_Init+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001180:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001184:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_CAN1_Init+0xc8>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_CAN1_Init+0xc8>)
 800119a:	2200      	movs	r2, #0
 800119c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b0:	481d      	ldr	r0, [pc, #116]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011b2:	f002 fe3f 	bl	8003e34 <HAL_CAN_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011bc:	f001 fa6e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011e4:	230e      	movs	r3, #14
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ee:	f002 ff1d 	bl	800402c <HAL_CAN_ConfigFilter>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011f8:	f001 fa50 	bl	800269c <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011fe:	f002 fff5 	bl	80041ec <HAL_CAN_Start>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001208:	f001 fa48 	bl	800269c <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800120c:	2102      	movs	r1, #2
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001210:	f003 f942 	bl	8004498 <HAL_CAN_ActivateNotification>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800121a:	f001 fa3f 	bl	800269c <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000c678 	.word	0x2000c678
 800122c:	40006400 	.word	0x40006400

08001230 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001238:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800123a:	4a8a      	ldr	r2, [pc, #552]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800123c:	2100      	movs	r1, #0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f003 f818 	bl	8004274 <HAL_CAN_GetRxMessage>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800124a:	f001 fa27 	bl	800269c <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800124e:	4b85      	ldr	r3, [pc, #532]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001256:	d145      	bne.n	80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001258:	4b82      	ldr	r3, [pc, #520]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d141      	bne.n	80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001260:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d13d      	bne.n	80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8001268:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b21a      	sxth	r2, r3
 800126e:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 800127c:	4b78      	ldr	r3, [pc, #480]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 8001284:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[7] << 8);
 800128c:	4b74      	ldr	r3, [pc, #464]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	b21a      	sxth	r2, r3
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001294:	79db      	ldrb	r3, [r3, #7]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 80012a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012a2:	4a71      	ldr	r2, [pc, #452]	; (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80012a4:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 80012a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	4b6c      	ldr	r3, [pc, #432]	; (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80012ba:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 80012bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012c0:	4a6b      	ldr	r2, [pc, #428]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80012c2:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 80012c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 2a90 	vmov	r2, s15
 80012e0:	4b64      	ldr	r3, [pc, #400]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80012e2:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012e4:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f240 6202 	movw	r2, #1538	; 0x602
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d12d      	bne.n	800134c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 80012f0:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d129      	bne.n	800134c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 80012f8:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d125      	bne.n	800134c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
  {
	 uint8_t oil_tmp_in = RxData[3];
 8001300:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 uint8_t oil_press_in = RxData[4];
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	f887 3020 	strb.w	r3, [r7, #32]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001310:	4b53      	ldr	r3, [pc, #332]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001312:	799b      	ldrb	r3, [r3, #6]
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001318:	79db      	ldrb	r3, [r3, #7]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	83fb      	strh	r3, [r7, #30]

	 oil_tmp = ((int)oil_tmp_in) * 1;
 8001324:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001328:	4a53      	ldr	r2, [pc, #332]	; (8001478 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800132a:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 800132c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001338:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800147c <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 800133c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001342:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 8001346:	8bfb      	ldrh	r3, [r7, #30]
 8001348:	4a4e      	ldr	r2, [pc, #312]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800134a:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f240 6203 	movw	r2, #1539	; 0x603
 8001354:	4293      	cmp	r3, r2
 8001356:	d130      	bne.n	80013ba <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d12c      	bne.n	80013ba <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001360:	4b40      	ldr	r3, [pc, #256]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d128      	bne.n	80013ba <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
  {
	 uint8_t lambda_in = RxData[2];
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	777b      	strb	r3, [r7, #29]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001370:	791b      	ldrb	r3, [r3, #4]
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001376:	795b      	ldrb	r3, [r3, #5]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	837b      	strh	r3, [r7, #26]
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001384:	799b      	ldrb	r3, [r3, #6]
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800138a:	79db      	ldrb	r3, [r3, #7]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	833b      	strh	r3, [r7, #24]
	 lambda = ((float)lambda_in)*0.0078125f;
 8001396:	7f7b      	ldrb	r3, [r7, #29]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001488 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 80013ae:	8b7b      	ldrh	r3, [r7, #26]
 80013b0:	4a37      	ldr	r2, [pc, #220]	; (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 80013b2:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 80013b4:	8b3b      	ldrh	r3, [r7, #24]
 80013b6:	4a37      	ldr	r2, [pc, #220]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 80013b8:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f240 6204 	movw	r2, #1540	; 0x604
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d11f      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11b      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d117      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013d8:	789b      	ldrb	r3, [r3, #2]
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013de:	78db      	ldrb	r3, [r3, #3]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	82fb      	strh	r3, [r7, #22]
	 float battery_voltage = ((float)batt_in)*0.027f;
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
 80013f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fc:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800140e:	d123      	bne.n	8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d11f      	bne.n	8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d11b      	bne.n	8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	73fb      	strb	r3, [r7, #15]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	81bb      	strh	r3, [r7, #12]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001444:	eddf 6a16 	vldr	s13, [pc, #88]	; 80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>
 8001448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 8001452:	89bb      	ldrh	r3, [r7, #12]
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001456:	6013      	str	r3, [r2, #0]
    }
}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000c630 	.word	0x2000c630
 8001464:	2000c714 	.word	0x2000c714
 8001468:	20000004 	.word	0x20000004
 800146c:	20000008 	.word	0x20000008
 8001470:	200003a4 	.word	0x200003a4
 8001474:	200003b0 	.word	0x200003b0
 8001478:	20000398 	.word	0x20000398
 800147c:	3d800000 	.word	0x3d800000
 8001480:	2000039c 	.word	0x2000039c
 8001484:	2000000c 	.word	0x2000000c
 8001488:	3c000000 	.word	0x3c000000
 800148c:	20000010 	.word	0x20000010
 8001490:	200003a8 	.word	0x200003a8
 8001494:	200003ac 	.word	0x200003ac
 8001498:	3cdd2f1b 	.word	0x3cdd2f1b
 800149c:	200003b4 	.word	0x200003b4
 80014a0:	42c80000 	.word	0x42c80000
 80014a4:	20000014 	.word	0x20000014
 80014a8:	200003a0 	.word	0x200003a0

080014ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <MX_CRC_Init+0x40>)
 80014b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014d6:	f003 fb41 	bl	8004b5c <HAL_CRC_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014e0:	f001 f8dc 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000c228 	.word	0x2000c228
 80014ec:	40023000 	.word	0x40023000

080014f0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_DCMI_Init+0x60>)
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <MX_DCMI_Init+0x64>)
 80014f8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_DCMI_Init+0x60>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_DCMI_Init+0x60>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_DCMI_Init+0x60>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_DCMI_Init+0x60>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_DCMI_Init+0x60>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_DCMI_Init+0x60>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_DCMI_Init+0x60>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_DCMI_Init+0x60>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_DCMI_Init+0x60>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_DCMI_Init+0x60>)
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_DCMI_Init+0x60>)
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_DCMI_Init+0x60>)
 800153e:	f003 fbf7 	bl	8004d30 <HAL_DCMI_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001548:	f001 f8a8 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000c440 	.word	0x2000c440
 8001554:	50050000 	.word	0x50050000

08001558 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <MX_DMA2D_Init+0x60>)
 8001560:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001582:	2200      	movs	r2, #0
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001588:	2200      	movs	r2, #0
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800158e:	f003 fce3 	bl	8004f58 <HAL_DMA2D_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001598:	f001 f880 	bl	800269c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800159c:	2101      	movs	r1, #1
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 80015a0:	f003 ffa4 	bl	80054ec <HAL_DMA2D_ConfigLayer>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80015aa:	f001 f877 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000c5f0 	.word	0x2000c5f0
 80015b8:	4002b000 	.word	0x4002b000

080015bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2234      	movs	r2, #52	; 0x34
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f023 fc80 	bl	8024ece <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015d0:	4a3a      	ldr	r2, [pc, #232]	; (80016bc <MX_LTDC_Init+0x100>)
 80015d2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015d4:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015f4:	2209      	movs	r2, #9
 80015f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015fa:	2235      	movs	r2, #53	; 0x35
 80015fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001600:	220b      	movs	r2, #11
 8001602:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001606:	f240 2215 	movw	r2, #533	; 0x215
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800160e:	f240 121b 	movw	r2, #283	; 0x11b
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001616:	f240 2235 	movw	r2, #565	; 0x235
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800161e:	f240 121d 	movw	r2, #285	; 0x11d
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800163c:	481e      	ldr	r0, [pc, #120]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800163e:	f004 fa5f 	bl	8005b00 <HAL_LTDC_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001648:	f001 f828 	bl	800269c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001650:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001654:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800165a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800165e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001660:	2301      	movs	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001664:	23ff      	movs	r3, #255	; 0xff
 8001666:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800166c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001670:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001672:	2305      	movs	r3, #5
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001676:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800167c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001682:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80016a2:	f004 fbb5 	bl	8005e10 <HAL_LTDC_ConfigLayer>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80016ac:	f000 fff6 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3738      	adds	r7, #56	; 0x38
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2000c350 	.word	0x2000c350
 80016bc:	40016800 	.word	0x40016800

080016c0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_QUADSPI_Init+0x54>)
 80016c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016cc:	22ff      	movs	r2, #255	; 0xff
 80016ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016de:	2201      	movs	r2, #1
 80016e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016fc:	f004 fdf8 	bl	80062f0 <HAL_QSPI_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001706:	f000 ffc9 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000c730 	.word	0x2000c730
 8001714:	a0001000 	.word	0xa0001000

08001718 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b092      	sub	sp, #72	; 0x48
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800171e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	222c      	movs	r2, #44	; 0x2c
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f023 fbc7 	bl	8024ece <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <MX_RTC_Init+0x148>)
 8001742:	4a48      	ldr	r2, [pc, #288]	; (8001864 <MX_RTC_Init+0x14c>)
 8001744:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <MX_RTC_Init+0x148>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <MX_RTC_Init+0x148>)
 800174e:	227f      	movs	r2, #127	; 0x7f
 8001750:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <MX_RTC_Init+0x148>)
 8001754:	22ff      	movs	r2, #255	; 0xff
 8001756:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <MX_RTC_Init+0x148>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800175e:	4b40      	ldr	r3, [pc, #256]	; (8001860 <MX_RTC_Init+0x148>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001764:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <MX_RTC_Init+0x148>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800176a:	483d      	ldr	r0, [pc, #244]	; (8001860 <MX_RTC_Init+0x148>)
 800176c:	f006 f84c 	bl	8007808 <HAL_RTC_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001776:	f000 ff91 	bl	800269c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001798:	2201      	movs	r2, #1
 800179a:	4619      	mov	r1, r3
 800179c:	4830      	ldr	r0, [pc, #192]	; (8001860 <MX_RTC_Init+0x148>)
 800179e:	f006 f8af 	bl	8007900 <HAL_RTC_SetTime>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80017a8:	f000 ff78 	bl	800269c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c8:	2201      	movs	r2, #1
 80017ca:	4619      	mov	r1, r3
 80017cc:	4824      	ldr	r0, [pc, #144]	; (8001860 <MX_RTC_Init+0x148>)
 80017ce:	f006 f955 	bl	8007a7c <HAL_RTC_SetDate>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80017d8:	f000 ff60 	bl	800269c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017dc:	2300      	movs	r3, #0
 80017de:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	2201      	movs	r2, #1
 8001810:	4619      	mov	r1, r3
 8001812:	4813      	ldr	r0, [pc, #76]	; (8001860 <MX_RTC_Init+0x148>)
 8001814:	f006 f9da 	bl	8007bcc <HAL_RTC_SetAlarm>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800181e:	f000 ff3d 	bl	800269c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <MX_RTC_Init+0x148>)
 8001836:	f006 f9c9 	bl	8007bcc <HAL_RTC_SetAlarm>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001840:	f000 ff2c 	bl	800269c <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001844:	2202      	movs	r2, #2
 8001846:	2100      	movs	r1, #0
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_RTC_Init+0x148>)
 800184a:	f006 fb49 	bl	8007ee0 <HAL_RTCEx_SetTimeStamp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001854:	f000 ff22 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3748      	adds	r7, #72	; 0x48
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000c510 	.word	0x2000c510
 8001864:	40002800 	.word	0x40002800

08001868 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800186e:	4a4e      	ldr	r2, [pc, #312]	; (80019a8 <MX_SAI2_Init+0x140>)
 8001870:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001872:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800187e:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001880:	2240      	movs	r2, #64	; 0x40
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001886:	2200      	movs	r2, #0
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800188c:	2200      	movs	r2, #0
 800188e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001890:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018a2:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018a8:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <MX_SAI2_Init+0x144>)
 80018ac:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018c8:	2208      	movs	r2, #8
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80018fc:	4829      	ldr	r0, [pc, #164]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018fe:	f006 fb45 	bl	8007f8c <HAL_SAI_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001908:	f000 fec8 	bl	800269c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_SAI2_Init+0x148>)
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <MX_SAI2_Init+0x14c>)
 8001910:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_SAI2_Init+0x148>)
 800191a:	2203      	movs	r2, #3
 800191c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001926:	2200      	movs	r2, #0
 8001928:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_SAI2_Init+0x148>)
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001932:	2201      	movs	r2, #1
 8001934:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_SAI2_Init+0x148>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_SAI2_Init+0x148>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001956:	2200      	movs	r2, #0
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_SAI2_Init+0x148>)
 800195c:	2208      	movs	r2, #8
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001962:	2201      	movs	r2, #1
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001968:	2200      	movs	r2, #0
 800196a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_SAI2_Init+0x148>)
 800196e:	2200      	movs	r2, #0
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001974:	2200      	movs	r2, #0
 8001976:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_SAI2_Init+0x148>)
 800197a:	2200      	movs	r2, #0
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001980:	2200      	movs	r2, #0
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001986:	2201      	movs	r2, #1
 8001988:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_SAI2_Init+0x148>)
 800198c:	2200      	movs	r2, #0
 800198e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001992:	f006 fafb 	bl	8007f8c <HAL_SAI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800199c:	f000 fe7e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000c1a4 	.word	0x2000c1a4
 80019a8:	40015c04 	.word	0x40015c04
 80019ac:	0002ee00 	.word	0x0002ee00
 80019b0:	2000c028 	.word	0x2000c028
 80019b4:	40015c24 	.word	0x40015c24

080019b8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <MX_SDMMC1_SD_Init+0x3c>)
 80019c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	2000c24c 	.word	0x2000c24c
 80019f4:	40012c00 	.word	0x40012c00

080019f8 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 80019fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a02:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a42:	f007 fd37 	bl	80094b4 <HAL_SPDIFRX_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f000 fe26 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000c158 	.word	0x2000c158

08001a58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <MX_SPI2_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_SPI2_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_SPI2_Init+0x74>)
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_SPI2_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_SPI2_Init+0x74>)
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_SPI2_Init+0x74>)
 8001ab8:	f007 fd58 	bl	800956c <HAL_SPI_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 fdeb 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000c0b4 	.word	0x2000c0b4
 8001ad0:	40003800 	.word	0x40003800

08001ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b09a      	sub	sp, #104	; 0x68
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	222c      	movs	r2, #44	; 0x2c
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f023 f9dd 	bl	8024ece <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <MX_TIM1_Init+0x154>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b3e:	4839      	ldr	r0, [pc, #228]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b40:	f007 fda6 	bl	8009690 <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b4a:	f000 fda7 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4832      	ldr	r0, [pc, #200]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b5c:	f008 f850 	bl	8009c00 <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b66:	f000 fd99 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b6a:	482e      	ldr	r0, [pc, #184]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b6c:	f007 fde6 	bl	800973c <HAL_TIM_PWM_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b76:	f000 fd91 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4825      	ldr	r0, [pc, #148]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b8e:	f008 fcb1 	bl	800a4f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b98:	f000 fd80 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9c:	2360      	movs	r3, #96	; 0x60
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4818      	ldr	r0, [pc, #96]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001bc2:	f007 ff05 	bl	80099d0 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001bcc:	f000 fd66 	bl	800269c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001c06:	f008 fd03 	bl	800a610 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c10:	f000 fd44 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001c16:	f001 fa3b 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001c1a:	bf00      	nop
 8001c1c:	3768      	adds	r7, #104	; 0x68
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000c530 	.word	0x2000c530
 8001c28:	40010000 	.word	0x40010000

08001c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	; 0x38
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c84:	4823      	ldr	r0, [pc, #140]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c86:	f007 fd03 	bl	8009690 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c90:	f000 fd04 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481c      	ldr	r0, [pc, #112]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001ca2:	f007 ffad 	bl	8009c00 <HAL_TIM_ConfigClockSource>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cac:	f000 fcf6 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb0:	4818      	ldr	r0, [pc, #96]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001cb2:	f007 fd43 	bl	800973c <HAL_TIM_PWM_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cbc:	f000 fcee 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001cd0:	f008 fc10 	bl	800a4f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cda:	f000 fcdf 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cde:	2360      	movs	r3, #96	; 0x60
 8001ce0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4807      	ldr	r0, [pc, #28]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001cf6:	f007 fe6b 	bl	80099d0 <HAL_TIM_PWM_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d00:	f000 fccc 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001d06:	f001 f9c3 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001d0a:	bf00      	nop
 8001d0c:	3738      	adds	r7, #56	; 0x38
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000c638 	.word	0x2000c638

08001d18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <MX_TIM3_Init+0xe8>)
 8001d4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6e:	4823      	ldr	r0, [pc, #140]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d70:	f007 fc8e 	bl	8009690 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d7a:	f000 fc8f 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	481c      	ldr	r0, [pc, #112]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d8c:	f007 ff38 	bl	8009c00 <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d96:	f000 fc81 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d9a:	4818      	ldr	r0, [pc, #96]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d9c:	f007 fcce 	bl	800973c <HAL_TIM_PWM_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001da6:	f000 fc79 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4810      	ldr	r0, [pc, #64]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001dba:	f008 fb9b 	bl	800a4f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001dc4:	f000 fc6a 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4807      	ldr	r0, [pc, #28]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001de0:	f007 fdf6 	bl	80099d0 <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001dea:	f000 fc57 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001df0:	f001 f94e 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001df4:	bf00      	nop
 8001df6:	3738      	adds	r7, #56	; 0x38
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000c310 	.word	0x2000c310
 8001e00:	40000400 	.word	0x40000400

08001e04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <MX_TIM5_Init+0xe8>)
 8001e3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e5a:	4823      	ldr	r0, [pc, #140]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e5c:	f007 fc18 	bl	8009690 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001e66:	f000 fc19 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	4619      	mov	r1, r3
 8001e76:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e78:	f007 fec2 	bl	8009c00 <HAL_TIM_ConfigClockSource>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e82:	f000 fc0b 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e86:	4818      	ldr	r0, [pc, #96]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e88:	f007 fc58 	bl	800973c <HAL_TIM_PWM_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e92:	f000 fc03 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001ea6:	f008 fb25 	bl	800a4f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001eb0:	f000 fbf4 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb4:	2360      	movs	r3, #96	; 0x60
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001ecc:	f007 fd80 	bl	80099d0 <HAL_TIM_PWM_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001ed6:	f000 fbe1 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001edc:	f001 f8d8 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001ee0:	bf00      	nop
 8001ee2:	3738      	adds	r7, #56	; 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000c2d0 	.word	0x2000c2d0
 8001eec:	40000c00 	.word	0x40000c00

08001ef0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f10:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <MX_TIM8_Init+0xa0>)
 8001f12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f3a:	f007 fba9 	bl	8009690 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 fbaa 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f56:	f007 fe53 	bl	8009c00 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001f60:	f000 fb9c 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f76:	f008 fabd 	bl	800a4f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001f80:	f000 fb8c 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000c118 	.word	0x2000c118
 8001f90:	40010400 	.word	0x40010400

08001f94 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	615a      	str	r2, [r3, #20]
 8001faa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <MX_TIM12_Init+0x84>)
 8001fb0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001fd0:	4810      	ldr	r0, [pc, #64]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fd2:	f007 fbb3 	bl	800973c <HAL_TIM_PWM_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001fdc:	f000 fb5e 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <MX_TIM12_Init+0x80>)
 8001ff8:	f007 fcea 	bl	80099d0 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002002:	f000 fb4b 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002006:	4803      	ldr	r0, [pc, #12]	; (8002014 <MX_TIM12_Init+0x80>)
 8002008:	f001 f842 	bl	8003090 <HAL_TIM_MspPostInit>

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000c6a0 	.word	0x2000c6a0
 8002018:	40001800 	.word	0x40001800

0800201c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART1_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART1_UART_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART1_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002060:	f008 fb72 	bl	800a748 <HAL_UART_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800206a:	f000 fb17 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000c490 	.word	0x2000c490
 8002078:	40011000 	.word	0x40011000

0800207c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <MX_USART6_UART_Init+0x5c>)
 8002084:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020c0:	f008 fb42 	bl	800a748 <HAL_UART_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80020ca:	f000 fae7 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000c570 	.word	0x2000c570
 80020d8:	40011400 	.word	0x40011400

080020dc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <MX_FMC_Init+0x14c>)
 80020f6:	4a4d      	ldr	r2, [pc, #308]	; (800222c <MX_FMC_Init+0x150>)
 80020f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80020fa:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <MX_FMC_Init+0x14c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002100:	4b49      	ldr	r3, [pc, #292]	; (8002228 <MX_FMC_Init+0x14c>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002106:	4b48      	ldr	r3, [pc, #288]	; (8002228 <MX_FMC_Init+0x14c>)
 8002108:	2204      	movs	r2, #4
 800210a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800210c:	4b46      	ldr	r3, [pc, #280]	; (8002228 <MX_FMC_Init+0x14c>)
 800210e:	2210      	movs	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002112:	4b45      	ldr	r3, [pc, #276]	; (8002228 <MX_FMC_Init+0x14c>)
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002118:	4b43      	ldr	r3, [pc, #268]	; (8002228 <MX_FMC_Init+0x14c>)
 800211a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800211e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <MX_FMC_Init+0x14c>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <MX_FMC_Init+0x14c>)
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <MX_FMC_Init+0x14c>)
 8002130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <MX_FMC_Init+0x14c>)
 8002138:	2200      	movs	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800213c:	2302      	movs	r3, #2
 800213e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002140:	2307      	movs	r3, #7
 8002142:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002144:	2304      	movs	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002148:	2307      	movs	r3, #7
 800214a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800214c:	2303      	movs	r3, #3
 800214e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002154:	2302      	movs	r3, #2
 8002156:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4832      	ldr	r0, [pc, #200]	; (8002228 <MX_FMC_Init+0x14c>)
 800215e:	f007 f929 	bl	80093b4 <HAL_SDRAM_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002168:	f000 fa98 	bl	800269c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <MX_FMC_Init+0x154>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <MX_FMC_Init+0x154>)
 8002178:	2210      	movs	r2, #16
 800217a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <MX_FMC_Init+0x154>)
 800217e:	2201      	movs	r2, #1
 8002180:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <MX_FMC_Init+0x154>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218c:	4928      	ldr	r1, [pc, #160]	; (8002230 <MX_FMC_Init+0x154>)
 800218e:	4826      	ldr	r0, [pc, #152]	; (8002228 <MX_FMC_Init+0x14c>)
 8002190:	f007 f944 	bl	800941c <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002194:	2001      	movs	r0, #1
 8002196:	f001 fba3 	bl	80038e0 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <MX_FMC_Init+0x154>)
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <MX_FMC_Init+0x154>)
 80021a2:	2210      	movs	r2, #16
 80021a4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <MX_FMC_Init+0x154>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021ac:	4b20      	ldr	r3, [pc, #128]	; (8002230 <MX_FMC_Init+0x154>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b6:	491e      	ldr	r1, [pc, #120]	; (8002230 <MX_FMC_Init+0x154>)
 80021b8:	481b      	ldr	r0, [pc, #108]	; (8002228 <MX_FMC_Init+0x14c>)
 80021ba:	f007 f92f 	bl	800941c <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <MX_FMC_Init+0x154>)
 80021c0:	2203      	movs	r2, #3
 80021c2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_FMC_Init+0x154>)
 80021c6:	2210      	movs	r2, #16
 80021c8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <MX_FMC_Init+0x154>)
 80021cc:	2208      	movs	r2, #8
 80021ce:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_FMC_Init+0x154>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021da:	4915      	ldr	r1, [pc, #84]	; (8002230 <MX_FMC_Init+0x154>)
 80021dc:	4812      	ldr	r0, [pc, #72]	; (8002228 <MX_FMC_Init+0x14c>)
 80021de:	f007 f91d 	bl	800941c <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80021e2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80021e6:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_FMC_Init+0x154>)
 80021ea:	2204      	movs	r2, #4
 80021ec:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <MX_FMC_Init+0x154>)
 80021f0:	2210      	movs	r2, #16
 80021f2:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_FMC_Init+0x154>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <MX_FMC_Init+0x154>)
 80021fe:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	490a      	ldr	r1, [pc, #40]	; (8002230 <MX_FMC_Init+0x154>)
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <MX_FMC_Init+0x14c>)
 8002208:	f007 f908 	bl	800941c <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800220c:	f240 712b 	movw	r1, #1835	; 0x72b
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_FMC_Init+0x14c>)
 8002212:	f007 f92e 	bl	8009472 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8002216:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800221a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800221e:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000c6e0 	.word	0x2000c6e0
 800222c:	a0000140 	.word	0xa0000140
 8002230:	20000388 	.word	0x20000388

08002234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	; 0x40
 8002238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800224a:	4baf      	ldr	r3, [pc, #700]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4aae      	ldr	r2, [pc, #696]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4bac      	ldr	r3, [pc, #688]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002262:	4ba9      	ldr	r3, [pc, #676]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4aa8      	ldr	r2, [pc, #672]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4ba6      	ldr	r3, [pc, #664]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	4ba3      	ldr	r3, [pc, #652]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4aa2      	ldr	r2, [pc, #648]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4ba0      	ldr	r3, [pc, #640]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002292:	4b9d      	ldr	r3, [pc, #628]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a9c      	ldr	r2, [pc, #624]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b9a      	ldr	r3, [pc, #616]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	4b97      	ldr	r3, [pc, #604]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a96      	ldr	r2, [pc, #600]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b94      	ldr	r3, [pc, #592]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b91      	ldr	r3, [pc, #580]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a90      	ldr	r2, [pc, #576]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b8e      	ldr	r3, [pc, #568]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022da:	4b8b      	ldr	r3, [pc, #556]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a8a      	ldr	r2, [pc, #552]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80022f2:	4b85      	ldr	r3, [pc, #532]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a84      	ldr	r2, [pc, #528]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b82      	ldr	r3, [pc, #520]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800230a:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a7e      	ldr	r2, [pc, #504]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b7c      	ldr	r3, [pc, #496]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002322:	4b79      	ldr	r3, [pc, #484]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a78      	ldr	r2, [pc, #480]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b76      	ldr	r3, [pc, #472]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a72      	ldr	r2, [pc, #456]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b70      	ldr	r3, [pc, #448]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2120      	movs	r1, #32
 8002356:	486d      	ldr	r0, [pc, #436]	; (800250c <MX_GPIO_Init+0x2d8>)
 8002358:	f003 fbb8 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	210c      	movs	r1, #12
 8002360:	486b      	ldr	r0, [pc, #428]	; (8002510 <MX_GPIO_Init+0x2dc>)
 8002362:	f003 fbb3 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	2108      	movs	r1, #8
 800236a:	486a      	ldr	r0, [pc, #424]	; (8002514 <MX_GPIO_Init+0x2e0>)
 800236c:	f003 fbae 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002376:	4866      	ldr	r0, [pc, #408]	; (8002510 <MX_GPIO_Init+0x2dc>)
 8002378:	f003 fba8 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002382:	4865      	ldr	r0, [pc, #404]	; (8002518 <MX_GPIO_Init+0x2e4>)
 8002384:	f003 fba2 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	21c8      	movs	r1, #200	; 0xc8
 800238c:	4863      	ldr	r0, [pc, #396]	; (800251c <MX_GPIO_Init+0x2e8>)
 800238e:	f003 fb9d 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002392:	2308      	movs	r3, #8
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a2:	4619      	mov	r1, r3
 80023a4:	485e      	ldr	r0, [pc, #376]	; (8002520 <MX_GPIO_Init+0x2ec>)
 80023a6:	f003 f9cf 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80023aa:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023bc:	230b      	movs	r3, #11
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	4855      	ldr	r0, [pc, #340]	; (800251c <MX_GPIO_Init+0x2e8>)
 80023c8:	f003 f9be 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80023cc:	f643 4323 	movw	r3, #15395	; 0x3c23
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023de:	230a      	movs	r3, #10
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	484e      	ldr	r0, [pc, #312]	; (8002524 <MX_GPIO_Init+0x2f0>)
 80023ea:	f003 f9ad 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002400:	4619      	mov	r1, r3
 8002402:	4849      	ldr	r0, [pc, #292]	; (8002528 <MX_GPIO_Init+0x2f4>)
 8002404:	f003 f9a0 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002408:	2340      	movs	r3, #64	; 0x40
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <MX_GPIO_Init+0x2f8>)
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002418:	4619      	mov	r1, r3
 800241a:	483c      	ldr	r0, [pc, #240]	; (800250c <MX_GPIO_Init+0x2d8>)
 800241c:	f003 f994 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002420:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002432:	230a      	movs	r3, #10
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	483c      	ldr	r0, [pc, #240]	; (8002530 <MX_GPIO_Init+0x2fc>)
 800243e:	f003 f983 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002442:	2320      	movs	r3, #32
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002456:	4619      	mov	r1, r3
 8002458:	482c      	ldr	r0, [pc, #176]	; (800250c <MX_GPIO_Init+0x2d8>)
 800245a:	f003 f975 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800245e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002474:	4619      	mov	r1, r3
 8002476:	4826      	ldr	r0, [pc, #152]	; (8002510 <MX_GPIO_Init+0x2dc>)
 8002478:	f003 f966 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800247c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002482:	2300      	movs	r3, #0
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248e:	4619      	mov	r1, r3
 8002490:	4828      	ldr	r0, [pc, #160]	; (8002534 <MX_GPIO_Init+0x300>)
 8002492:	f003 f959 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002496:	2308      	movs	r3, #8
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	4819      	ldr	r0, [pc, #100]	; (8002514 <MX_GPIO_Init+0x2e0>)
 80024ae:	f003 f94b 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024b2:	2310      	movs	r3, #16
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c2:	4619      	mov	r1, r3
 80024c4:	4811      	ldr	r0, [pc, #68]	; (800250c <MX_GPIO_Init+0x2d8>)
 80024c6:	f003 f93f 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80024ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d0:	2300      	movs	r3, #0
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <MX_GPIO_Init+0x2e4>)
 80024e0:	f003 f932 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80024e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fa:	4619      	mov	r1, r3
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <MX_GPIO_Init+0x2e4>)
 80024fe:	f003 f923 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	e017      	b.n	8002538 <MX_GPIO_Init+0x304>
 8002508:	40023800 	.word	0x40023800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40022000 	.word	0x40022000
 8002514:	40022800 	.word	0x40022800
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40021800 	.word	0x40021800
 8002520:	40021000 	.word	0x40021000
 8002524:	40020400 	.word	0x40020400
 8002528:	40022400 	.word	0x40022400
 800252c:	10120000 	.word	0x10120000
 8002530:	40020000 	.word	0x40020000
 8002534:	40020800 	.word	0x40020800
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800253a:	4b44      	ldr	r3, [pc, #272]	; (800264c <MX_GPIO_Init+0x418>)
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	4841      	ldr	r0, [pc, #260]	; (8002650 <MX_GPIO_Init+0x41c>)
 800254a:	f003 f8fd 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800254e:	2310      	movs	r3, #16
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800255e:	230a      	movs	r3, #10
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	483a      	ldr	r0, [pc, #232]	; (8002654 <MX_GPIO_Init+0x420>)
 800256a:	f003 f8ed 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800256e:	23c8      	movs	r3, #200	; 0xc8
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	4834      	ldr	r0, [pc, #208]	; (8002658 <MX_GPIO_Init+0x424>)
 8002586:	f003 f8df 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800258a:	2305      	movs	r3, #5
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800259a:	230a      	movs	r3, #10
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a2:	4619      	mov	r1, r3
 80025a4:	482d      	ldr	r0, [pc, #180]	; (800265c <MX_GPIO_Init+0x428>)
 80025a6:	f003 f8cf 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025aa:	2332      	movs	r3, #50	; 0x32
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ba:	230b      	movs	r3, #11
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c2:	4619      	mov	r1, r3
 80025c4:	4825      	ldr	r0, [pc, #148]	; (800265c <MX_GPIO_Init+0x428>)
 80025c6:	f003 f8bf 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025ca:	2304      	movs	r3, #4
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	481e      	ldr	r0, [pc, #120]	; (8002658 <MX_GPIO_Init+0x424>)
 80025de:	f003 f8b3 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025e2:	2386      	movs	r3, #134	; 0x86
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025f2:	230b      	movs	r3, #11
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fa:	4619      	mov	r1, r3
 80025fc:	4818      	ldr	r0, [pc, #96]	; (8002660 <MX_GPIO_Init+0x42c>)
 80025fe:	f003 f8a3 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002602:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002608:	2312      	movs	r3, #18
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002614:	2304      	movs	r3, #4
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_GPIO_Init+0x420>)
 8002620:	f003 f892 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002624:	2328      	movs	r3, #40	; 0x28
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002634:	230a      	movs	r3, #10
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263c:	4619      	mov	r1, r3
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <MX_GPIO_Init+0x42c>)
 8002640:	f003 f882 	bl	8005748 <HAL_GPIO_Init>

}
 8002644:	bf00      	nop
 8002646:	3740      	adds	r7, #64	; 0x40
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	10120000 	.word	0x10120000
 8002650:	40022000 	.word	0x40022000
 8002654:	40021c00 	.word	0x40021c00
 8002658:	40021800 	.word	0x40021800
 800265c:	40020800 	.word	0x40020800
 8002660:	40020000 	.word	0x40020000

08002664 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 800266c:	f00c fba8 	bl	800edc0 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002670:	2001      	movs	r0, #1
 8002672:	f009 fe6d 	bl	800c350 <osDelay>
 8002676:	e7fb      	b.n	8002670 <StartDefaultTask+0xc>

08002678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800268a:	f001 f909 	bl	80038a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40001000 	.word	0x40001000

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_MspInit+0x4c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_MspInit+0x4c>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_MspInit+0x4c>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_MspInit+0x4c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	210f      	movs	r1, #15
 80026e6:	f06f 0001 	mvn.w	r0, #1
 80026ea:	f002 f9ff 	bl	8004aec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <HAL_ADC_MspInit+0xa4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d13c      	bne.n	8002798 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002766:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800276a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276c:	2303      	movs	r3, #3
 800276e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	480b      	ldr	r0, [pc, #44]	; (80027a8 <HAL_ADC_MspInit+0xac>)
 800277c:	f002 ffe4 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002780:	2301      	movs	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002784:	2303      	movs	r3, #3
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	4806      	ldr	r0, [pc, #24]	; (80027ac <HAL_ADC_MspInit+0xb0>)
 8002794:	f002 ffd8 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012200 	.word	0x40012200
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40020000 	.word	0x40020000

080027b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_CAN_MspInit+0x8c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d130      	bne.n	8002834 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a14      	ldr	r2, [pc, #80]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002814:	2309      	movs	r3, #9
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4809      	ldr	r0, [pc, #36]	; (8002844 <HAL_CAN_MspInit+0x94>)
 8002820:	f002 ff92 	bl	8005748 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2105      	movs	r1, #5
 8002828:	2014      	movs	r0, #20
 800282a:	f002 f95f 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800282e:	2014      	movs	r0, #20
 8002830:	f002 f978 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40006400 	.word	0x40006400
 8002840:	40023800 	.word	0x40023800
 8002844:	40020400 	.word	0x40020400

08002848 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_CRC_MspInit+0x38>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10b      	bne.n	8002872 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_CRC_MspInit+0x3c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_CRC_MspInit+0x3c>)
 8002860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_CRC_MspInit+0x3c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023000 	.word	0x40023000
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_DCMI_MspInit+0x160>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f040 809a 	bne.w	80029e0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6353      	str	r3, [r2, #52]	; 0x34
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c4:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ca:	f043 0310 	orr.w	r3, r3, #16
 80028ce:	6313      	str	r3, [r2, #48]	; 0x30
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6313      	str	r3, [r2, #48]	; 0x30
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f4:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a3c      	ldr	r2, [pc, #240]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800290c:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b31      	ldr	r3, [pc, #196]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a30      	ldr	r2, [pc, #192]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800293c:	2360      	movs	r3, #96	; 0x60
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800294c:	230d      	movs	r3, #13
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	4619      	mov	r1, r3
 8002956:	4826      	ldr	r0, [pc, #152]	; (80029f0 <HAL_DCMI_MspInit+0x168>)
 8002958:	f002 fef6 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800295c:	2308      	movs	r3, #8
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800296c:	230d      	movs	r3, #13
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	481f      	ldr	r0, [pc, #124]	; (80029f4 <HAL_DCMI_MspInit+0x16c>)
 8002978:	f002 fee6 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800297c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800298e:	230d      	movs	r3, #13
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	4817      	ldr	r0, [pc, #92]	; (80029f8 <HAL_DCMI_MspInit+0x170>)
 800299a:	f002 fed5 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800299e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029b0:	230d      	movs	r3, #13
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	4810      	ldr	r0, [pc, #64]	; (80029fc <HAL_DCMI_MspInit+0x174>)
 80029bc:	f002 fec4 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029c0:	2350      	movs	r3, #80	; 0x50
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029d0:	230d      	movs	r3, #13
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d8:	4619      	mov	r1, r3
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <HAL_DCMI_MspInit+0x178>)
 80029dc:	f002 feb4 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80029e0:	bf00      	nop
 80029e2:	3738      	adds	r7, #56	; 0x38
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	50050000 	.word	0x50050000
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40021c00 	.word	0x40021c00
 8002a00:	40020000 	.word	0x40020000

08002a04 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <HAL_DMA2D_MspInit+0x44>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d113      	bne.n	8002a3e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_DMA2D_MspInit+0x48>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <HAL_DMA2D_MspInit+0x48>)
 8002a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_DMA2D_MspInit+0x48>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2105      	movs	r1, #5
 8002a32:	205a      	movs	r0, #90	; 0x5a
 8002a34:	f002 f85a 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a38:	205a      	movs	r0, #90	; 0x5a
 8002a3a:	f002 f873 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	4002b000 	.word	0x4002b000
 8002a4c:	40023800 	.word	0x40023800

08002a50 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_DMA2D_MspDeInit+0x2c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_DMA2D_MspDeInit+0x30>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_DMA2D_MspDeInit+0x30>)
 8002a68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002a6e:	205a      	movs	r0, #90	; 0x5a
 8002a70:	f002 f866 	bl	8004b40 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	4002b000 	.word	0x4002b000
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_LTDC_MspInit+0x174>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f040 80a3 	bne.w	8002bee <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aa8:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	4a53      	ldr	r2, [pc, #332]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab4:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ac6:	f043 0310 	orr.w	r3, r3, #16
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b38:	2310      	movs	r3, #16
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b48:	230e      	movs	r3, #14
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	4619      	mov	r1, r3
 8002b52:	482b      	ldr	r0, [pc, #172]	; (8002c00 <HAL_LTDC_MspInit+0x17c>)
 8002b54:	f002 fdf8 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002b58:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b6a:	230e      	movs	r3, #14
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	4823      	ldr	r0, [pc, #140]	; (8002c04 <HAL_LTDC_MspInit+0x180>)
 8002b76:	f002 fde7 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002b7a:	23f7      	movs	r3, #247	; 0xf7
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b8a:	230e      	movs	r3, #14
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b92:	4619      	mov	r1, r3
 8002b94:	481c      	ldr	r0, [pc, #112]	; (8002c08 <HAL_LTDC_MspInit+0x184>)
 8002b96:	f002 fdd7 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bac:	2309      	movs	r3, #9
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4815      	ldr	r0, [pc, #84]	; (8002c0c <HAL_LTDC_MspInit+0x188>)
 8002bb8:	f002 fdc6 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bbc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bce:	230e      	movs	r3, #14
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <HAL_LTDC_MspInit+0x18c>)
 8002bda:	f002 fdb5 	bl	8005748 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2105      	movs	r1, #5
 8002be2:	2058      	movs	r0, #88	; 0x58
 8002be4:	f001 ff82 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002be8:	2058      	movs	r0, #88	; 0x58
 8002bea:	f001 ff9b 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002bee:	bf00      	nop
 8002bf0:	3738      	adds	r7, #56	; 0x38
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40016800 	.word	0x40016800
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40022400 	.word	0x40022400
 8002c08:	40022800 	.word	0x40022800
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40022000 	.word	0x40022000

08002c14 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_QSPI_MspInit+0x10c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d170      	bne.n	8002d18 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6393      	str	r3, [r2, #56]	; 0x38
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c4e:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c54:	f043 0310 	orr.w	r3, r3, #16
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c96:	2304      	movs	r3, #4
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ca6:	2309      	movs	r3, #9
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481d      	ldr	r0, [pc, #116]	; (8002d28 <HAL_QSPI_MspInit+0x114>)
 8002cb2:	f002 fd49 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4816      	ldr	r0, [pc, #88]	; (8002d2c <HAL_QSPI_MspInit+0x118>)
 8002cd2:	f002 fd39 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 031c 	add.w	r3, r7, #28
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480e      	ldr	r0, [pc, #56]	; (8002d2c <HAL_QSPI_MspInit+0x118>)
 8002cf2:	f002 fd29 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002cf6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d08:	2309      	movs	r3, #9
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4807      	ldr	r0, [pc, #28]	; (8002d30 <HAL_QSPI_MspInit+0x11c>)
 8002d14:	f002 fd18 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3730      	adds	r7, #48	; 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	a0001000 	.word	0xa0001000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020c00 	.word	0x40020c00

08002d34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_RTC_MspInit+0x2c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d105      	bne.n	8002d52 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RTC_MspInit+0x30>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_RTC_MspInit+0x30>)
 8002d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40002800 	.word	0x40002800
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <HAL_SD_MspInit+0xb4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d144      	bne.n	8002e14 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002dd2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002dd6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002de4:	230c      	movs	r3, #12
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4619      	mov	r1, r3
 8002dee:	480d      	ldr	r0, [pc, #52]	; (8002e24 <HAL_SD_MspInit+0xbc>)
 8002df0:	f002 fcaa 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002df4:	2304      	movs	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e00:	2303      	movs	r3, #3
 8002e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e04:	230c      	movs	r3, #12
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4806      	ldr	r0, [pc, #24]	; (8002e28 <HAL_SD_MspInit+0xc0>)
 8002e10:	f002 fc9a 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e14:	bf00      	nop
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020800 	.word	0x40020800
 8002e28:	40020c00 	.word	0x40020c00

08002e2c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002e4c:	d127      	bne.n	8002e9e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e8e:	2308      	movs	r3, #8
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e92:	f107 0314 	add.w	r3, r7, #20
 8002e96:	4619      	mov	r1, r3
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <HAL_SPDIFRX_MspInit+0x80>)
 8002e9a:	f002 fc55 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020c00 	.word	0x40020c00

08002eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <HAL_SPI_MspInit+0xb4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d144      	bne.n	8002f5c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed2:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	4619      	mov	r1, r3
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <HAL_SPI_MspInit+0xbc>)
 8002f36:	f002 fc07 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002f3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <HAL_SPI_MspInit+0xc0>)
 8002f58:	f002 fbf6 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40003800 	.word	0x40003800
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	40020400 	.word	0x40020400

08002f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_TIM_Base_MspInit+0xc8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10c      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f9e:	e046      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a24      	ldr	r2, [pc, #144]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
}
 8002fc2:	e034      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_TIM_Base_MspInit+0xd0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
}
 8002fe6:	e022      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_TIM_Base_MspInit+0xd4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
}
 800300a:	e010      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_TIM_Base_MspInit+0xd8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10b      	bne.n	800302e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
}
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40023800 	.word	0x40023800
 8003044:	40000400 	.word	0x40000400
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_TIM_PWM_MspInit+0x38>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10b      	bne.n	800307a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40001800 	.word	0x40001800
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_TIM_MspPostInit+0x178>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11d      	bne.n	80030ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a55      	ldr	r2, [pc, #340]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80030ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030dc:	2301      	movs	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	484a      	ldr	r0, [pc, #296]	; (8003210 <HAL_TIM_MspPostInit+0x180>)
 80030e8:	f002 fb2e 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030ec:	e087      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d11d      	bne.n	8003134 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a43      	ldr	r2, [pc, #268]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003122:	2301      	movs	r3, #1
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	4838      	ldr	r0, [pc, #224]	; (8003210 <HAL_TIM_MspPostInit+0x180>)
 800312e:	f002 fb0b 	bl	8005748 <HAL_GPIO_Init>
}
 8003132:	e064      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a36      	ldr	r2, [pc, #216]	; (8003214 <HAL_TIM_MspPostInit+0x184>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d11c      	bne.n	8003178 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313e:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a32      	ldr	r2, [pc, #200]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003156:	2310      	movs	r3, #16
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003166:	2302      	movs	r3, #2
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	4829      	ldr	r0, [pc, #164]	; (8003218 <HAL_TIM_MspPostInit+0x188>)
 8003172:	f002 fae9 	bl	8005748 <HAL_GPIO_Init>
}
 8003176:	e042      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_TIM_MspPostInit+0x18c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d11c      	bne.n	80031bc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a21      	ldr	r2, [pc, #132]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031aa:	2302      	movs	r3, #2
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	4619      	mov	r1, r3
 80031b4:	481a      	ldr	r0, [pc, #104]	; (8003220 <HAL_TIM_MspPostInit+0x190>)
 80031b6:	f002 fac7 	bl	8005748 <HAL_GPIO_Init>
}
 80031ba:	e020      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a18      	ldr	r2, [pc, #96]	; (8003224 <HAL_TIM_MspPostInit+0x194>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d11b      	bne.n	80031fe <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80031de:	2340      	movs	r3, #64	; 0x40
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80031ee:	2309      	movs	r3, #9
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	4619      	mov	r1, r3
 80031f8:	480b      	ldr	r0, [pc, #44]	; (8003228 <HAL_TIM_MspPostInit+0x198>)
 80031fa:	f002 faa5 	bl	8005748 <HAL_GPIO_Init>
}
 80031fe:	bf00      	nop
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40023800 	.word	0x40023800
 8003210:	40020000 	.word	0x40020000
 8003214:	40000400 	.word	0x40000400
 8003218:	40020400 	.word	0x40020400
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40022000 	.word	0x40022000
 8003224:	40001800 	.word	0x40001800
 8003228:	40021c00 	.word	0x40021c00

0800322c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3c      	ldr	r2, [pc, #240]	; (800333c <HAL_UART_MspInit+0x110>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d145      	bne.n	80032da <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800324e:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_UART_MspInit+0x114>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_UART_MspInit+0x114>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_UART_MspInit+0x114>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a6:	2307      	movs	r3, #7
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032aa:	f107 031c 	add.w	r3, r7, #28
 80032ae:	4619      	mov	r1, r3
 80032b0:	4824      	ldr	r0, [pc, #144]	; (8003344 <HAL_UART_MspInit+0x118>)
 80032b2:	f002 fa49 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80032b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c8:	2307      	movs	r3, #7
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4619      	mov	r1, r3
 80032d2:	481d      	ldr	r0, [pc, #116]	; (8003348 <HAL_UART_MspInit+0x11c>)
 80032d4:	f002 fa38 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032d8:	e02c      	b.n	8003334 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_UART_MspInit+0x120>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d127      	bne.n	8003334 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032ea:	f043 0320 	orr.w	r3, r3, #32
 80032ee:	6453      	str	r3, [r2, #68]	; 0x44
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_UART_MspInit+0x114>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003320:	2303      	movs	r3, #3
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003324:	2308      	movs	r3, #8
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	4619      	mov	r1, r3
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <HAL_UART_MspInit+0x124>)
 8003330:	f002 fa0a 	bl	8005748 <HAL_GPIO_Init>
}
 8003334:	bf00      	nop
 8003336:	3730      	adds	r7, #48	; 0x30
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40011000 	.word	0x40011000
 8003340:	40023800 	.word	0x40023800
 8003344:	40020400 	.word	0x40020400
 8003348:	40020000 	.word	0x40020000
 800334c:	40011400 	.word	0x40011400
 8003350:	40020800 	.word	0x40020800

08003354 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003368:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_FMC_MspInit+0x100>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d16d      	bne.n	800344c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003370:	4b38      	ldr	r3, [pc, #224]	; (8003454 <HAL_FMC_MspInit+0x100>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_FMC_MspInit+0x104>)
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4a37      	ldr	r2, [pc, #220]	; (8003458 <HAL_FMC_MspInit+0x104>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6393      	str	r3, [r2, #56]	; 0x38
 8003382:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_FMC_MspInit+0x104>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800338e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003392:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a0:	230c      	movs	r3, #12
 80033a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	482c      	ldr	r0, [pc, #176]	; (800345c <HAL_FMC_MspInit+0x108>)
 80033aa:	f002 f9cd 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80033ae:	f248 1333 	movw	r3, #33075	; 0x8133
 80033b2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033c0:	230c      	movs	r3, #12
 80033c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4825      	ldr	r0, [pc, #148]	; (8003460 <HAL_FMC_MspInit+0x10c>)
 80033ca:	f002 f9bd 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80033ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033d2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e0:	230c      	movs	r3, #12
 80033e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	481e      	ldr	r0, [pc, #120]	; (8003464 <HAL_FMC_MspInit+0x110>)
 80033ea:	f002 f9ad 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80033ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033f2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fc:	2303      	movs	r3, #3
 80033fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003400:	230c      	movs	r3, #12
 8003402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4817      	ldr	r0, [pc, #92]	; (8003468 <HAL_FMC_MspInit+0x114>)
 800340a:	f002 f99d 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800340e:	2328      	movs	r3, #40	; 0x28
 8003410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800341e:	230c      	movs	r3, #12
 8003420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4811      	ldr	r0, [pc, #68]	; (800346c <HAL_FMC_MspInit+0x118>)
 8003428:	f002 f98e 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800342c:	2308      	movs	r3, #8
 800342e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800343c:	230c      	movs	r3, #12
 800343e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	480a      	ldr	r0, [pc, #40]	; (8003470 <HAL_FMC_MspInit+0x11c>)
 8003446:	f002 f97f 	bl	8005748 <HAL_GPIO_Init>
 800344a:	e000      	b.n	800344e <HAL_FMC_MspInit+0xfa>
    return;
 800344c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200003b8 	.word	0x200003b8
 8003458:	40023800 	.word	0x40023800
 800345c:	40021000 	.word	0x40021000
 8003460:	40021800 	.word	0x40021800
 8003464:	40020c00 	.word	0x40020c00
 8003468:	40021400 	.word	0x40021400
 800346c:	40021c00 	.word	0x40021c00
 8003470:	40020800 	.word	0x40020800

08003474 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800347c:	f7ff ff6a 	bl	8003354 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <HAL_SAI_MspInit+0xbc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d124      	bne.n	80034e4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034a2:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a21      	ldr	r2, [pc, #132]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 80034c2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034c4:	23f0      	movs	r3, #240	; 0xf0
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034d4:	230a      	movs	r3, #10
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	481c      	ldr	r0, [pc, #112]	; (8003550 <HAL_SAI_MspInit+0xc8>)
 80034e0:	f002 f932 	bl	8005748 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <HAL_SAI_MspInit+0xcc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d125      	bne.n	800353a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4a14      	ldr	r2, [pc, #80]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003500:	6453      	str	r3, [r2, #68]	; 0x44
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_SAI_MspInit+0xc4>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 8003516:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800352a:	230a      	movs	r3, #10
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	4808      	ldr	r0, [pc, #32]	; (8003558 <HAL_SAI_MspInit+0xd0>)
 8003536:	f002 f907 	bl	8005748 <HAL_GPIO_Init>

    }
}
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	; 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40015c04 	.word	0x40015c04
 8003548:	200003bc 	.word	0x200003bc
 800354c:	40023800 	.word	0x40023800
 8003550:	40022000 	.word	0x40022000
 8003554:	40015c24 	.word	0x40015c24
 8003558:	40021800 	.word	0x40021800

0800355c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800356c:	2200      	movs	r2, #0
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	2036      	movs	r0, #54	; 0x36
 8003572:	f001 fabb 	bl	8004aec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003576:	2036      	movs	r0, #54	; 0x36
 8003578:	f001 fad4 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <HAL_InitTick+0xa0>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <HAL_InitTick+0xa0>)
 8003582:	f043 0310 	orr.w	r3, r3, #16
 8003586:	6413      	str	r3, [r2, #64]	; 0x40
 8003588:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_InitTick+0xa0>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003594:	f107 0210 	add.w	r2, r7, #16
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fbde 	bl	8006d60 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80035a4:	f003 fbb4 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 80035a8:	4603      	mov	r3, r0
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <HAL_InitTick+0xa4>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	3b01      	subs	r3, #1
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_InitTick+0xa8>)
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <HAL_InitTick+0xac>)
 80035c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_InitTick+0xa8>)
 80035c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_InitTick+0xa8>)
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_InitTick+0xa8>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_InitTick+0xa8>)
 80035d8:	2200      	movs	r2, #0
 80035da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80035dc:	4809      	ldr	r0, [pc, #36]	; (8003604 <HAL_InitTick+0xa8>)
 80035de:	f006 f857 	bl	8009690 <HAL_TIM_Base_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035e8:	4806      	ldr	r0, [pc, #24]	; (8003604 <HAL_InitTick+0xa8>)
 80035ea:	f006 f87d 	bl	80096e8 <HAL_TIM_Base_Start_IT>
 80035ee:	4603      	mov	r3, r0
 80035f0:	e000      	b.n	80035f4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3730      	adds	r7, #48	; 0x30
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	431bde83 	.word	0x431bde83
 8003604:	2000c77c 	.word	0x2000c77c
 8003608:	40001000 	.word	0x40001000

0800360c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800361e:	e7fe      	b.n	800361e <HardFault_Handler+0x4>

08003620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003624:	e7fe      	b.n	8003624 <MemManage_Handler+0x4>

08003626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362a:	e7fe      	b.n	800362a <BusFault_Handler+0x4>

0800362c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003630:	e7fe      	b.n	8003630 <UsageFault_Handler+0x4>

08003632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003644:	4802      	ldr	r0, [pc, #8]	; (8003650 <CAN1_RX0_IRQHandler+0x10>)
 8003646:	f000 ff4d 	bl	80044e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	2000c678 	.word	0x2000c678

08003654 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <TIM6_DAC_IRQHandler+0x10>)
 800365a:	f006 f89a 	bl	8009792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	2000c77c 	.word	0x2000c77c

08003668 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800366c:	4802      	ldr	r0, [pc, #8]	; (8003678 <LTDC_IRQHandler+0x10>)
 800366e:	f002 fb17 	bl	8005ca0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000c350 	.word	0x2000c350

0800367c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003680:	4802      	ldr	r0, [pc, #8]	; (800368c <DMA2D_IRQHandler+0x10>)
 8003682:	f001 fe22 	bl	80052ca <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000c5f0 	.word	0x2000c5f0

08003690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
	return 1;
 8003694:	2301      	movs	r3, #1
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_kill>:

int _kill(int pid, int sig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036aa:	f021 fbb9 	bl	8024e20 <__errno>
 80036ae:	4602      	mov	r2, r0
 80036b0:	2316      	movs	r3, #22
 80036b2:	6013      	str	r3, [r2, #0]
	return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_exit>:

void _exit (int status)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036c8:	f04f 31ff 	mov.w	r1, #4294967295
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffe7 	bl	80036a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036d2:	e7fe      	b.n	80036d2 <_exit+0x12>

080036d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e00a      	b.n	80036fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036e6:	f3af 8000 	nop.w
 80036ea:	4601      	mov	r1, r0
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	60ba      	str	r2, [r7, #8]
 80036f2:	b2ca      	uxtb	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	dbf0      	blt.n	80036e6 <_read+0x12>
	}

return len;
 8003704:	687b      	ldr	r3, [r7, #4]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e009      	b.n	8003734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	60ba      	str	r2, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf1      	blt.n	8003720 <_write+0x12>
	}
	return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_close>:

int _close(int file)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
	return -1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800376e:	605a      	str	r2, [r3, #4]
	return 0;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <_isatty>:

int _isatty(int file)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
	return 1;
 8003786:	2301      	movs	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	return 0;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <_sbrk+0x50>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <_sbrk+0x16>
		heap_end = &end;
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <_sbrk+0x50>)
 80037c2:	4a10      	ldr	r2, [pc, #64]	; (8003804 <_sbrk+0x54>)
 80037c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <_sbrk+0x50>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <_sbrk+0x50>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	466a      	mov	r2, sp
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d907      	bls.n	80037ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037da:	f021 fb21 	bl	8024e20 <__errno>
 80037de:	4602      	mov	r2, r0
 80037e0:	230c      	movs	r3, #12
 80037e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	e006      	b.n	80037f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <_sbrk+0x50>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	4a03      	ldr	r2, [pc, #12]	; (8003800 <_sbrk+0x50>)
 80037f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037f6:	68fb      	ldr	r3, [r7, #12]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200003c0 	.word	0x200003c0
 8003804:	2000cc30 	.word	0x2000cc30

08003808 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <SystemInit+0x28>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <SystemInit+0x28>)
 8003814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <SystemInit+0x28>)
 800381e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003822:	609a      	str	r2, [r3, #8]
#endif
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800386c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003838:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800383a:	e003      	b.n	8003844 <LoopCopyDataInit>

0800383c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800383e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003840:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003842:	3104      	adds	r1, #4

08003844 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003844:	480b      	ldr	r0, [pc, #44]	; (8003874 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003848:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800384a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800384c:	d3f6      	bcc.n	800383c <CopyDataInit>
  ldr  r2, =_sbss
 800384e:	4a0b      	ldr	r2, [pc, #44]	; (800387c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003850:	e002      	b.n	8003858 <LoopFillZerobss>

08003852 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003852:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003854:	f842 3b04 	str.w	r3, [r2], #4

08003858 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800385a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800385c:	d3f9      	bcc.n	8003852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800385e:	f7ff ffd3 	bl	8003808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003862:	f021 faf5 	bl	8024e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003866:	f7fd fb07 	bl	8000e78 <main>
  bx  lr    
 800386a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800386c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003870:	0806158c 	.word	0x0806158c
  ldr  r0, =_sdata
 8003874:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003878:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 800387c:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 8003880:	2000cc30 	.word	0x2000cc30

08003884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003884:	e7fe      	b.n	8003884 <ADC_IRQHandler>

08003886 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800388a:	2003      	movs	r0, #3
 800388c:	f001 f923 	bl	8004ad6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff fe63 	bl	800355c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003896:	f7fe ff09 	bl	80026ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_IncTick+0x20>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_IncTick+0x24>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_IncTick+0x24>)
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000020 	.word	0x20000020
 80038c4:	2000c7bc 	.word	0x2000c7bc

080038c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return uwTick;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_GetTick+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	2000c7bc 	.word	0x2000c7bc

080038e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e8:	f7ff ffee 	bl	80038c8 <HAL_GetTick>
 80038ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d005      	beq.n	8003906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_Delay+0x40>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003906:	bf00      	nop
 8003908:	f7ff ffde 	bl	80038c8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	d8f7      	bhi.n	8003908 <HAL_Delay+0x28>
  {
  }
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000020 	.word	0x20000020

08003924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e031      	b.n	800399e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe feda 	bl	80026fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_ADC_Init+0x84>)
 8003968:	4013      	ands	r3, r2
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f964 	bl	8003c40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
 800398e:	e001      	b.n	8003994 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	ffffeefd 	.word	0xffffeefd

080039ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e12a      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x272>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d93a      	bls.n	8003a4e <HAL_ADC_ConfigChannel+0xa2>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e0:	d035      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	3b1e      	subs	r3, #30
 80039f8:	2207      	movs	r2, #7
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	400a      	ands	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a87      	ldr	r2, [pc, #540]	; (8003c2c <HAL_ADC_ConfigChannel+0x280>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10a      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68d9      	ldr	r1, [r3, #12]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	061a      	lsls	r2, r3, #24
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a26:	e035      	b.n	8003a94 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68d9      	ldr	r1, [r3, #12]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4403      	add	r3, r0
 8003a40:	3b1e      	subs	r3, #30
 8003a42:	409a      	lsls	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a4c:	e022      	b.n	8003a94 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6919      	ldr	r1, [r3, #16]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	2207      	movs	r2, #7
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	400a      	ands	r2, r1
 8003a70:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6919      	ldr	r1, [r3, #16]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4403      	add	r3, r0
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b06      	cmp	r3, #6
 8003a9a:	d824      	bhi.n	8003ae6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b05      	subs	r3, #5
 8003aae:	221f      	movs	r2, #31
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	400a      	ands	r2, r1
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4618      	mov	r0, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b05      	subs	r3, #5
 8003ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ae4:	e04c      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d824      	bhi.n	8003b38 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	3b23      	subs	r3, #35	; 0x23
 8003b00:	221f      	movs	r2, #31
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	3b23      	subs	r3, #35	; 0x23
 8003b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
 8003b36:	e023      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	3b41      	subs	r3, #65	; 0x41
 8003b4a:	221f      	movs	r2, #31
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43da      	mvns	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	400a      	ands	r2, r1
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4618      	mov	r0, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	3b41      	subs	r3, #65	; 0x41
 8003b74:	fa00 f203 	lsl.w	r2, r0, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <HAL_ADC_ConfigChannel+0x284>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10a      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x1f4>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b92:	d105      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003b9a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b9e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <HAL_ADC_ConfigChannel+0x284>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d109      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x212>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b12      	cmp	r3, #18
 8003bb0:	d105      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bbc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_ADC_ConfigChannel+0x284>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d125      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x268>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_ADC_ConfigChannel+0x280>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x22e>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b11      	cmp	r3, #17
 8003bd8:	d11c      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003be0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003be4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_ADC_ConfigChannel+0x280>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_ADC_ConfigChannel+0x28c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <HAL_ADC_ConfigChannel+0x290>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9a      	lsrs	r2, r3, #18
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c06:	e002      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f9      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	10000012 	.word	0x10000012
 8003c30:	40012000 	.word	0x40012000
 8003c34:	40012300 	.word	0x40012300
 8003c38:	20000018 	.word	0x20000018
 8003c3c:	431bde83 	.word	0x431bde83

08003c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c48:	4b78      	ldr	r3, [pc, #480]	; (8003e2c <ADC_Init+0x1ec>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <ADC_Init+0x1ec>)
 8003c4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <ADC_Init+0x1ec>)
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4973      	ldr	r1, [pc, #460]	; (8003e2c <ADC_Init+0x1ec>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6899      	ldr	r1, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <ADC_Init+0x1f0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6899      	ldr	r1, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	e00f      	b.n	8003d3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0202 	bic.w	r2, r2, #2
 8003d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	005a      	lsls	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	3b01      	subs	r3, #1
 8003d94:	035a      	lsls	r2, r3, #13
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	e007      	b.n	8003db0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	051a      	lsls	r2, r3, #20
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003df2:	025a      	lsls	r2, r3, #9
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6899      	ldr	r1, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	029a      	lsls	r2, r3, #10
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40012300 	.word	0x40012300
 8003e30:	0f000001 	.word	0x0f000001

08003e34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0ed      	b.n	8004022 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fe fcac 	bl	80027b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0202 	bic.w	r2, r2, #2
 8003e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e68:	f7ff fd2e 	bl	80038c8 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e6e:	e012      	b.n	8003e96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e70:	f7ff fd2a 	bl	80038c8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b0a      	cmp	r3, #10
 8003e7c:	d90b      	bls.n	8003e96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0c5      	b.n	8004022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb4:	f7ff fd08 	bl	80038c8 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003eba:	e012      	b.n	8003ee2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ebc:	f7ff fd04 	bl	80038c8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b0a      	cmp	r3, #10
 8003ec8:	d90b      	bls.n	8003ee2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2205      	movs	r2, #5
 8003eda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e09f      	b.n	8004022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0e5      	beq.n	8003ebc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7e1b      	ldrb	r3, [r3, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d108      	bne.n	8003f0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e007      	b.n	8003f1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	7e5b      	ldrb	r3, [r3, #25]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d108      	bne.n	8003f34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e007      	b.n	8003f44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7e9b      	ldrb	r3, [r3, #26]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d108      	bne.n	8003f5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0220 	orr.w	r2, r2, #32
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e007      	b.n	8003f6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0220 	bic.w	r2, r2, #32
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	7edb      	ldrb	r3, [r3, #27]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d108      	bne.n	8003f88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0210 	bic.w	r2, r2, #16
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e007      	b.n	8003f98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0210 	orr.w	r2, r2, #16
 8003f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7f1b      	ldrb	r3, [r3, #28]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d108      	bne.n	8003fb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0208 	orr.w	r2, r2, #8
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e007      	b.n	8003fc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0208 	bic.w	r2, r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7f5b      	ldrb	r3, [r3, #29]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d108      	bne.n	8003fdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0204 	orr.w	r2, r2, #4
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e007      	b.n	8003fec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0204 	bic.w	r2, r2, #4
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	ea42 0103 	orr.w	r1, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	1e5a      	subs	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004042:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d003      	beq.n	8004052 <HAL_CAN_ConfigFilter+0x26>
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b02      	cmp	r3, #2
 800404e:	f040 80be 	bne.w	80041ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004052:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004054:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800406c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	431a      	orrs	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2201      	movs	r2, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	401a      	ands	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d123      	bne.n	80040fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3248      	adds	r2, #72	; 0x48
 80040dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	3348      	adds	r3, #72	; 0x48
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d122      	bne.n	800414a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	431a      	orrs	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004124:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	3248      	adds	r2, #72	; 0x48
 800412a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800413e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004140:	6979      	ldr	r1, [r7, #20]
 8004142:	3348      	adds	r3, #72	; 0x48
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	43db      	mvns	r3, r3
 800415c:	401a      	ands	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004164:	e007      	b.n	8004176 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	431a      	orrs	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43db      	mvns	r3, r3
 8004188:	401a      	ands	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004190:	e007      	b.n	80041a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	431a      	orrs	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041c0:	f023 0201 	bic.w	r2, r3, #1
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e006      	b.n	80041dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40006400 	.word	0x40006400

080041ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d12e      	bne.n	800425e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004218:	f7ff fb56 	bl	80038c8 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800421e:	e012      	b.n	8004246 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004220:	f7ff fb52 	bl	80038c8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b0a      	cmp	r3, #10
 800422c:	d90b      	bls.n	8004246 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2205      	movs	r2, #5
 800423e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e012      	b.n	800426c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e006      	b.n	800426c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004288:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d003      	beq.n	8004298 <HAL_CAN_GetRxMessage+0x24>
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b02      	cmp	r3, #2
 8004294:	f040 80f3 	bne.w	800447e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10e      	bne.n	80042bc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d116      	bne.n	80042da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0e7      	b.n	800448c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0d8      	b.n	800448c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	331b      	adds	r3, #27
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0204 	and.w	r2, r3, #4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10c      	bne.n	8004312 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	331b      	adds	r3, #27
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	0d5b      	lsrs	r3, r3, #21
 8004308:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e00b      	b.n	800432a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	331b      	adds	r3, #27
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	4413      	add	r3, r2
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	331b      	adds	r3, #27
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4413      	add	r3, r2
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0202 	and.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	331b      	adds	r3, #27
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 020f 	and.w	r2, r3, #15
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	331b      	adds	r3, #27
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	b2da      	uxtb	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	331b      	adds	r3, #27
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	4413      	add	r3, r2
 800437c:	3304      	adds	r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	4413      	add	r3, r2
 8004392:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0a1a      	lsrs	r2, r3, #8
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0c1a      	lsrs	r2, r3, #16
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3302      	adds	r3, #2
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	4413      	add	r3, r2
 80043dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0e1a      	lsrs	r2, r3, #24
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	3303      	adds	r3, #3
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	3304      	adds	r3, #4
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	4413      	add	r3, r2
 800440e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0a1a      	lsrs	r2, r3, #8
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	3305      	adds	r3, #5
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4413      	add	r3, r2
 8004428:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0c1a      	lsrs	r2, r3, #16
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	3306      	adds	r3, #6
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4413      	add	r3, r2
 8004442:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0e1a      	lsrs	r2, r3, #24
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	3307      	adds	r3, #7
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d108      	bne.n	800446a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0220 	orr.w	r2, r2, #32
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	e007      	b.n	800447a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0220 	orr.w	r2, r2, #32
 8004478:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e006      	b.n	800448c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
  }
}
 800448c:	4618      	mov	r0, r3
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d002      	beq.n	80044b6 <HAL_CAN_ActivateNotification+0x1e>
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d109      	bne.n	80044ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6959      	ldr	r1, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e006      	b.n	80044d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d07c      	beq.n	8004624 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d023      	beq.n	800457c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f97d 	bl	8004846 <HAL_CAN_TxMailbox0CompleteCallback>
 800454c:	e016      	b.n	800457c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
 8004560:	e00c      	b.n	800457c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	e002      	b.n	800457c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f983 	bl	8004882 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d024      	beq.n	80045d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800458e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f95d 	bl	800485a <HAL_CAN_TxMailbox1CompleteCallback>
 80045a0:	e016      	b.n	80045d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	e00c      	b.n	80045d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	e002      	b.n	80045d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f963 	bl	8004896 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d024      	beq.n	8004624 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f93d 	bl	800486e <HAL_CAN_TxMailbox2CompleteCallback>
 80045f4:	e016      	b.n	8004624 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	e00c      	b.n	8004624 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e002      	b.n	8004624 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f943 	bl	80048aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800463e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2210      	movs	r2, #16
 8004646:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f92a 	bl	80048be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fdd4 	bl	8001230 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2210      	movs	r2, #16
 80046aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2208      	movs	r2, #8
 80046c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f90c 	bl	80048e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8f3 	bl	80048d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2210      	movs	r2, #16
 8004706:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8f6 	bl	80048fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d006      	beq.n	8004730 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2208      	movs	r2, #8
 8004728:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8ef 	bl	800490e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d06c      	beq.n	800481e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f043 0304 	orr.w	r3, r3, #4
 8004796:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d03d      	beq.n	800481e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d038      	beq.n	800481e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b2:	2b30      	cmp	r3, #48	; 0x30
 80047b4:	d017      	beq.n	80047e6 <HAL_CAN_IRQHandler+0x302>
 80047b6:	2b30      	cmp	r3, #48	; 0x30
 80047b8:	d804      	bhi.n	80047c4 <HAL_CAN_IRQHandler+0x2e0>
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d009      	beq.n	80047d2 <HAL_CAN_IRQHandler+0x2ee>
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d00c      	beq.n	80047dc <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047c2:	e024      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80047c4:	2b50      	cmp	r3, #80	; 0x50
 80047c6:	d018      	beq.n	80047fa <HAL_CAN_IRQHandler+0x316>
 80047c8:	2b60      	cmp	r3, #96	; 0x60
 80047ca:	d01b      	beq.n	8004804 <HAL_CAN_IRQHandler+0x320>
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d00f      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x30c>
            break;
 80047d0:	e01d      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	f043 0308 	orr.w	r3, r3, #8
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047da:	e018      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f043 0310 	orr.w	r3, r3, #16
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047e4:	e013      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f043 0320 	orr.w	r3, r3, #32
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ee:	e00e      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047f8:	e009      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004802:	e004      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800480c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800481c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2204      	movs	r2, #4
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f872 	bl	8004922 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800483e:	bf00      	nop
 8004840:	3728      	adds	r7, #40	; 0x28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <__NVIC_SetPriorityGrouping+0x44>)
 8004962:	4313      	orrs	r3, r2
 8004964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004966:	4a04      	ldr	r2, [pc, #16]	; (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	60d3      	str	r3, [r2, #12]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000ed00 	.word	0xe000ed00
 800497c:	05fa0000 	.word	0x05fa0000

08004980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <__NVIC_GetPriorityGrouping+0x18>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	f003 0307 	and.w	r3, r3, #7
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db0b      	blt.n	80049c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	f003 021f 	and.w	r2, r3, #31
 80049b4:	4907      	ldr	r1, [pc, #28]	; (80049d4 <__NVIC_EnableIRQ+0x38>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2001      	movs	r0, #1
 80049be:	fa00 f202 	lsl.w	r2, r0, r2
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000e100 	.word	0xe000e100

080049d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db10      	blt.n	8004a0c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4909      	ldr	r1, [pc, #36]	; (8004a18 <__NVIC_DisableIRQ+0x40>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2001      	movs	r0, #1
 80049fa:	fa00 f202 	lsl.w	r2, r0, r2
 80049fe:	3320      	adds	r3, #32
 8004a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db0a      	blt.n	8004a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	490c      	ldr	r1, [pc, #48]	; (8004a68 <__NVIC_SetPriority+0x4c>)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a44:	e00a      	b.n	8004a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4908      	ldr	r1, [pc, #32]	; (8004a6c <__NVIC_SetPriority+0x50>)
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	3b04      	subs	r3, #4
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	440b      	add	r3, r1
 8004a5a:	761a      	strb	r2, [r3, #24]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000e100 	.word	0xe000e100
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f1c3 0307 	rsb	r3, r3, #7
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	bf28      	it	cs
 8004a8e:	2304      	movcs	r3, #4
 8004a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d902      	bls.n	8004aa0 <NVIC_EncodePriority+0x30>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3b03      	subs	r3, #3
 8004a9e:	e000      	b.n	8004aa2 <NVIC_EncodePriority+0x32>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac2:	43d9      	mvns	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	4313      	orrs	r3, r2
         );
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3724      	adds	r7, #36	; 0x24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ff2a 	bl	8004938 <__NVIC_SetPriorityGrouping>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004afe:	f7ff ff3f 	bl	8004980 <__NVIC_GetPriorityGrouping>
 8004b02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f7ff ffb1 	bl	8004a70 <NVIC_EncodePriority>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff ff80 	bl	8004a1c <__NVIC_SetPriority>
}
 8004b1c:	bf00      	nop
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff32 	bl	800499c <__NVIC_EnableIRQ>
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff42 	bl	80049d8 <__NVIC_DisableIRQ>
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e054      	b.n	8004c18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7f5b      	ldrb	r3, [r3, #29]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd fe62 	bl	8002848 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <HAL_CRC_Init+0xc4>)
 8004b98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0218 	bic.w	r2, r2, #24
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	e00c      	b.n	8004bc6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f834 	bl	8004c24 <HAL_CRCEx_Polynomial_Set>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e028      	b.n	8004c18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	795b      	ldrb	r3, [r3, #5]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	611a      	str	r2, [r3, #16]
 8004bd8:	e004      	b.n	8004be4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6912      	ldr	r2, [r2, #16]
 8004be2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	04c11db7 	.word	0x04c11db7

08004c24 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c34:	231f      	movs	r3, #31
 8004c36:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c38:	bf00      	nop
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1e5a      	subs	r2, r3, #1
 8004c3e:	613a      	str	r2, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <HAL_CRCEx_Polynomial_Set+0x34>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b18      	cmp	r3, #24
 8004c5c:	d846      	bhi.n	8004cec <HAL_CRCEx_Polynomial_Set+0xc8>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004cf3 	.word	0x08004cf3
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004ced 	.word	0x08004ced
 8004c70:	08004ced 	.word	0x08004ced
 8004c74:	08004ced 	.word	0x08004ced
 8004c78:	08004ced 	.word	0x08004ced
 8004c7c:	08004ced 	.word	0x08004ced
 8004c80:	08004ced 	.word	0x08004ced
 8004c84:	08004ce1 	.word	0x08004ce1
 8004c88:	08004ced 	.word	0x08004ced
 8004c8c:	08004ced 	.word	0x08004ced
 8004c90:	08004ced 	.word	0x08004ced
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004cd5 	.word	0x08004cd5
 8004ca8:	08004ced 	.word	0x08004ced
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004ced 	.word	0x08004ced
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004cc9 	.word	0x08004cc9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d913      	bls.n	8004cf6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cd2:	e010      	b.n	8004cf6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b07      	cmp	r3, #7
 8004cd8:	d90f      	bls.n	8004cfa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cde:	e00c      	b.n	8004cfa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d90b      	bls.n	8004cfe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cea:	e008      	b.n	8004cfe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf0:	e006      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cfe:	bf00      	nop
  }
  if (status == HAL_OK)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 0118 	bic.w	r1, r3, #24
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e069      	b.n	8004e16 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd fd9a 	bl	8002888 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <HAL_DCMI_Init+0xf0>)
 8004d76:	400b      	ands	r3, r1
 8004d78:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004da6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004db2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004dbe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d112      	bne.n	8004df6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7f1b      	ldrb	r3, [r3, #28]
 8004dd4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7f5b      	ldrb	r3, [r3, #29]
 8004dda:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ddc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7f9b      	ldrb	r3, [r3, #30]
 8004de2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004de4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7fdb      	ldrb	r3, [r3, #31]
 8004dec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004df2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004df4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 021e 	orr.w	r2, r2, #30
 8004e04:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	ffe0f007 	.word	0xffe0f007

08004e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_DMA_Start_IT+0x26>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e048      	b.n	8004edc <HAL_DMA_Start_IT+0xb8>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d137      	bne.n	8004ece <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f842 	bl	8004efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	223f      	movs	r2, #63	; 0x3f
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0216 	orr.w	r2, r2, #22
 8004e92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ea2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0208 	orr.w	r2, r2, #8
 8004eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e005      	b.n	8004eda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d108      	bne.n	8004f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f3a:	e007      	b.n	8004f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e039      	b.n	8004fde <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd fd40 	bl	8002a04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	f023 0107 	bic.w	r1, r3, #7
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <HAL_DMA2D_Init+0x90>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68d1      	ldr	r1, [r2, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	ffffc000 	.word	0xffffc000

08004fec <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e05f      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004ffe:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_DMA2D_DeInit+0xdc>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d02e      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8c1 	bl	80051a0 <HAL_DMA2D_Abort>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d021      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e04a      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d108      	bne.n	8005048 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8005036:	2100      	movs	r1, #0
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8f7 	bl	800522c <HAL_DMA2D_CLUTLoading_Abort>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d011      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e03a      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d108      	bne.n	8005068 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8005056:	2101      	movs	r1, #1
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8e7 	bl	800522c <HAL_DMA2D_CLUTLoading_Abort>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e02a      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	223f      	movs	r2, #63	; 0x3f
 8005076:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fd fcd5 	bl	8002a50 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_DMA2D_Start_IT+0x1c>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e020      	b.n	800512a <HAL_DMA2D_Start_IT+0x5e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fa84 	bl	8005610 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005116:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_DMA2D_BlendingStart_IT+0x1c>
 800514a:	2302      	movs	r3, #2
 800514c:	e024      	b.n	8005198 <HAL_DMA2D_BlendingStart_IT+0x66>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fa4d 	bl	8005610 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005184:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 0205 	bic.w	r2, r3, #5
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0204 	orr.w	r2, r2, #4
 80051ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051bc:	f7fe fb84 	bl	80038c8 <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051c2:	e017      	b.n	80051f4 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80051c4:	f7fe fb80 	bl	80038c8 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051d2:	d90f      	bls.n	80051f4 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2203      	movs	r2, #3
 80051e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e017      	b.n	8005224 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e0      	bne.n	80051c4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005210:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3324      	adds	r3, #36	; 0x24
 800523c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0204 	orr.w	r2, r2, #4
 800524c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d103      	bne.n	800525c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	331c      	adds	r3, #28
 800525a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800525c:	f7fe fb34 	bl	80038c8 <HAL_GetTick>
 8005260:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005262:	e017      	b.n	8005294 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005264:	f7fe fb30 	bl	80038c8 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005272:	d90f      	bls.n	8005294 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2203      	movs	r2, #3
 8005284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e016      	b.n	80052c2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e1      	bne.n	8005264 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80052ae:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d026      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005304:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	f043 0201 	orr.w	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2201      	movs	r2, #1
 8005318:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d026      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d021      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2220      	movs	r2, #32
 8005364:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	f043 0202 	orr.w	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2204      	movs	r2, #4
 8005376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d026      	beq.n	80053ea <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d021      	beq.n	80053ea <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2208      	movs	r2, #8
 80053bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	f043 0204 	orr.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d013      	beq.n	800541c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00e      	beq.n	800541c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2204      	movs	r2, #4
 8005414:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f853 	bl	80054c2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d024      	beq.n	8005470 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01f      	beq.n	8005470 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800543e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2202      	movs	r2, #2
 8005446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01f      	beq.n	80054ba <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01a      	beq.n	80054ba <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005492:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2210      	movs	r2, #16
 800549a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f80e 	bl	80054d6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_DMA2D_ConfigLayer+0x20>
 8005508:	2302      	movs	r3, #2
 800550a:	e079      	b.n	8005600 <HAL_DMA2D_ConfigLayer+0x114>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	3318      	adds	r3, #24
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005536:	4b35      	ldr	r3, [pc, #212]	; (800560c <HAL_DMA2D_ConfigLayer+0x120>)
 8005538:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b0a      	cmp	r3, #10
 8005540:	d003      	beq.n	800554a <HAL_DMA2D_ConfigLayer+0x5e>
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b09      	cmp	r3, #9
 8005548:	d107      	bne.n	800555a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e005      	b.n	8005566 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	061b      	lsls	r3, r3, #24
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d120      	bne.n	80055ae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	43db      	mvns	r3, r3
 8005576:	ea02 0103 	and.w	r1, r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	430a      	orrs	r2, r1
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b0a      	cmp	r3, #10
 8005594:	d003      	beq.n	800559e <HAL_DMA2D_ConfigLayer+0xb2>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b09      	cmp	r3, #9
 800559c:	d127      	bne.n	80055ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28
 80055ac:	e01f      	b.n	80055ee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	43db      	mvns	r3, r3
 80055b8:	ea02 0103 	and.w	r1, r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b0a      	cmp	r3, #10
 80055d6:	d003      	beq.n	80055e0 <HAL_DMA2D_ConfigLayer+0xf4>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b09      	cmp	r3, #9
 80055de:	d106      	bne.n	80055ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055ec:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	ff03000f 	.word	0xff03000f

08005610 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005610:	b480      	push	{r7}
 8005612:	b08b      	sub	sp, #44	; 0x2c
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	041a      	lsls	r2, r3, #16
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	431a      	orrs	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005648:	d174      	bne.n	8005734 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005650:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005658:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005660:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	431a      	orrs	r2, r3
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	4313      	orrs	r3, r2
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	e053      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d106      	bne.n	8005698 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4313      	orrs	r3, r2
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
 8005696:	e048      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d111      	bne.n	80056c4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	0cdb      	lsrs	r3, r3, #19
 80056a4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	0a9b      	lsrs	r3, r3, #10
 80056aa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	02db      	lsls	r3, r3, #11
 80056ba:	4313      	orrs	r3, r2
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	e032      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d117      	bne.n	80056fc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	0fdb      	lsrs	r3, r3, #31
 80056d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	0cdb      	lsrs	r3, r3, #19
 80056d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	0adb      	lsrs	r3, r3, #11
 80056dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	08db      	lsrs	r3, r3, #3
 80056e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	029b      	lsls	r3, r3, #10
 80056ec:	431a      	orrs	r2, r3
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	03db      	lsls	r3, r3, #15
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	e016      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	0f1b      	lsrs	r3, r3, #28
 8005700:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	0d1b      	lsrs	r3, r3, #20
 8005706:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	0b1b      	lsrs	r3, r3, #12
 800570c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	431a      	orrs	r2, r3
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	031b      	lsls	r3, r3, #12
 8005722:	4313      	orrs	r3, r2
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005732:	e003      	b.n	800573c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	60da      	str	r2, [r3, #12]
}
 800573c:	bf00      	nop
 800573e:	372c      	adds	r7, #44	; 0x2c
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e175      	b.n	8005a54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005768:	2201      	movs	r2, #1
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	429a      	cmp	r2, r3
 8005782:	f040 8164 	bne.w	8005a4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d00b      	beq.n	80057a6 <HAL_GPIO_Init+0x5e>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d007      	beq.n	80057a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800579a:	2b11      	cmp	r3, #17
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b12      	cmp	r3, #18
 80057a4:	d130      	bne.n	8005808 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	2203      	movs	r2, #3
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057dc:	2201      	movs	r2, #1
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4013      	ands	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 0201 	and.w	r2, r3, #1
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d003      	beq.n	8005848 <HAL_GPIO_Init+0x100>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b12      	cmp	r3, #18
 8005846:	d123      	bne.n	8005890 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	08da      	lsrs	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3208      	adds	r2, #8
 8005850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	220f      	movs	r2, #15
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4313      	orrs	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	08da      	lsrs	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3208      	adds	r2, #8
 800588a:	69b9      	ldr	r1, [r7, #24]
 800588c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	2203      	movs	r2, #3
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 0203 	and.w	r2, r3, #3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80be 	beq.w	8005a4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058d2:	4b65      	ldr	r3, [pc, #404]	; (8005a68 <HAL_GPIO_Init+0x320>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	4a64      	ldr	r2, [pc, #400]	; (8005a68 <HAL_GPIO_Init+0x320>)
 80058d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058dc:	6453      	str	r3, [r2, #68]	; 0x44
 80058de:	4b62      	ldr	r3, [pc, #392]	; (8005a68 <HAL_GPIO_Init+0x320>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80058ea:	4a60      	ldr	r2, [pc, #384]	; (8005a6c <HAL_GPIO_Init+0x324>)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	3302      	adds	r3, #2
 80058f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	220f      	movs	r2, #15
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a57      	ldr	r2, [pc, #348]	; (8005a70 <HAL_GPIO_Init+0x328>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d037      	beq.n	8005986 <HAL_GPIO_Init+0x23e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a56      	ldr	r2, [pc, #344]	; (8005a74 <HAL_GPIO_Init+0x32c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d031      	beq.n	8005982 <HAL_GPIO_Init+0x23a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a55      	ldr	r2, [pc, #340]	; (8005a78 <HAL_GPIO_Init+0x330>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d02b      	beq.n	800597e <HAL_GPIO_Init+0x236>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a54      	ldr	r2, [pc, #336]	; (8005a7c <HAL_GPIO_Init+0x334>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d025      	beq.n	800597a <HAL_GPIO_Init+0x232>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a53      	ldr	r2, [pc, #332]	; (8005a80 <HAL_GPIO_Init+0x338>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01f      	beq.n	8005976 <HAL_GPIO_Init+0x22e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a52      	ldr	r2, [pc, #328]	; (8005a84 <HAL_GPIO_Init+0x33c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d019      	beq.n	8005972 <HAL_GPIO_Init+0x22a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a51      	ldr	r2, [pc, #324]	; (8005a88 <HAL_GPIO_Init+0x340>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_GPIO_Init+0x226>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a50      	ldr	r2, [pc, #320]	; (8005a8c <HAL_GPIO_Init+0x344>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00d      	beq.n	800596a <HAL_GPIO_Init+0x222>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a4f      	ldr	r2, [pc, #316]	; (8005a90 <HAL_GPIO_Init+0x348>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <HAL_GPIO_Init+0x21e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a4e      	ldr	r2, [pc, #312]	; (8005a94 <HAL_GPIO_Init+0x34c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_GPIO_Init+0x21a>
 800595e:	2309      	movs	r3, #9
 8005960:	e012      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005962:	230a      	movs	r3, #10
 8005964:	e010      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005966:	2308      	movs	r3, #8
 8005968:	e00e      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800596a:	2307      	movs	r3, #7
 800596c:	e00c      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800596e:	2306      	movs	r3, #6
 8005970:	e00a      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005972:	2305      	movs	r3, #5
 8005974:	e008      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005976:	2304      	movs	r3, #4
 8005978:	e006      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800597a:	2303      	movs	r3, #3
 800597c:	e004      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800597e:	2302      	movs	r3, #2
 8005980:	e002      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005986:	2300      	movs	r3, #0
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	f002 0203 	and.w	r2, r2, #3
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	4093      	lsls	r3, r2
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4313      	orrs	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005998:	4934      	ldr	r1, [pc, #208]	; (8005a6c <HAL_GPIO_Init+0x324>)
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	089b      	lsrs	r3, r3, #2
 800599e:	3302      	adds	r3, #2
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059a6:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059ca:	4a33      	ldr	r2, [pc, #204]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059d0:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059fa:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <HAL_GPIO_Init+0x350>)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_GPIO_Init+0x350>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a48:	4a13      	ldr	r2, [pc, #76]	; (8005a98 <HAL_GPIO_Init+0x350>)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	f67f ae86 	bls.w	8005768 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3724      	adds	r7, #36	; 0x24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	40013800 	.word	0x40013800
 8005a70:	40020000 	.word	0x40020000
 8005a74:	40020400 	.word	0x40020400
 8005a78:	40020800 	.word	0x40020800
 8005a7c:	40020c00 	.word	0x40020c00
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40021400 	.word	0x40021400
 8005a88:	40021800 	.word	0x40021800
 8005a8c:	40021c00 	.word	0x40021c00
 8005a90:	40022000 	.word	0x40022000
 8005a94:	40022400 	.word	0x40022400
 8005a98:	40013c00 	.word	0x40013c00

08005a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	887b      	ldrh	r3, [r7, #2]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
 8005ab8:	e001      	b.n	8005abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	807b      	strh	r3, [r7, #2]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005adc:	787b      	ldrb	r3, [r7, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ae8:	e003      	b.n	8005af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005aea:	887b      	ldrh	r3, [r7, #2]
 8005aec:	041a      	lsls	r2, r3, #16
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	619a      	str	r2, [r3, #24]
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e0bf      	b.n	8005c92 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fc ffac 	bl	8002a84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b42:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6999      	ldr	r1, [r3, #24]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b58:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6899      	ldr	r1, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b4a      	ldr	r3, [pc, #296]	; (8005c9c <HAL_LTDC_Init+0x19c>)
 8005b74:	400b      	ands	r3, r1
 8005b76:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6899      	ldr	r1, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68d9      	ldr	r1, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <HAL_LTDC_Init+0x19c>)
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68d9      	ldr	r1, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6919      	ldr	r1, [r3, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b33      	ldr	r3, [pc, #204]	; (8005c9c <HAL_LTDC_Init+0x19c>)
 8005bd0:	400b      	ands	r3, r1
 8005bd2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6919      	ldr	r1, [r3, #16]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6959      	ldr	r1, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <HAL_LTDC_Init+0x19c>)
 8005bfe:	400b      	ands	r3, r1
 8005c00:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6959      	ldr	r1, [r3, #20]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0206 	orr.w	r2, r2, #6
 8005c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	f000f800 	.word	0xf000f800

08005ca0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d023      	beq.n	8005d0a <HAL_LTDC_IRQHandler+0x6a>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01e      	beq.n	8005d0a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0204 	bic.w	r2, r2, #4
 8005cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cea:	f043 0201 	orr.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f86f 	bl	8005de8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d023      	beq.n	8005d5c <HAL_LTDC_IRQHandler+0xbc>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01e      	beq.n	8005d5c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0202 	bic.w	r2, r2, #2
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2202      	movs	r2, #2
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d3c:	f043 0202 	orr.w	r2, r3, #2
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f846 	bl	8005de8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01b      	beq.n	8005d9e <HAL_LTDC_IRQHandler+0xfe>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d016      	beq.n	8005d9e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2201      	movs	r2, #1
 8005d86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f00f f9a9 	bl	80150f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01b      	beq.n	8005de0 <HAL_LTDC_IRQHandler+0x140>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0208 	bic.w	r2, r2, #8
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f80e 	bl	8005dfc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e10:	b5b0      	push	{r4, r5, r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_LTDC_ConfigLayer+0x1a>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e02c      	b.n	8005e84 <HAL_LTDC_ConfigLayer+0x74>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2134      	movs	r1, #52	; 0x34
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461d      	mov	r5, r3
 8005e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f849 	bl	8005efc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bdb0      	pop	{r4, r5, r7, pc}

08005e8c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_LTDC_ProgramLineEvent+0x18>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e023      	b.n	8005eec <HAL_LTDC_ProgramLineEvent+0x60>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	40016800 	.word	0x40016800

08005efc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	0c1b      	lsrs	r3, r3, #16
 8005f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f18:	4413      	add	r3, r2
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	01db      	lsls	r3, r3, #7
 8005f28:	4413      	add	r3, r2
 8005f2a:	3384      	adds	r3, #132	; 0x84
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	4611      	mov	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	01d2      	lsls	r2, r2, #7
 8005f38:	440a      	add	r2, r1
 8005f3a:	3284      	adds	r2, #132	; 0x84
 8005f3c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f40:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f52:	4413      	add	r3, r2
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	440b      	add	r3, r1
 8005f62:	3384      	adds	r3, #132	; 0x84
 8005f64:	4619      	mov	r1, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7a:	4413      	add	r3, r2
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	01db      	lsls	r3, r3, #7
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3384      	adds	r3, #132	; 0x84
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	4611      	mov	r1, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	01d2      	lsls	r2, r2, #7
 8005f9a:	440a      	add	r2, r1
 8005f9c:	3284      	adds	r2, #132	; 0x84
 8005f9e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005fa2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb2:	4413      	add	r3, r2
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	01db      	lsls	r3, r3, #7
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3384      	adds	r3, #132	; 0x84
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	01db      	lsls	r3, r3, #7
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3384      	adds	r3, #132	; 0x84
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	01d2      	lsls	r2, r2, #7
 8005fe6:	440a      	add	r2, r1
 8005fe8:	3284      	adds	r2, #132	; 0x84
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	01db      	lsls	r3, r3, #7
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3384      	adds	r3, #132	; 0x84
 8005ffe:	461a      	mov	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	061b      	lsls	r3, r3, #24
 8006020:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	01db      	lsls	r3, r3, #7
 800602c:	4413      	add	r3, r2
 800602e:	3384      	adds	r3, #132	; 0x84
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	01db      	lsls	r3, r3, #7
 800603c:	4413      	add	r3, r2
 800603e:	3384      	adds	r3, #132	; 0x84
 8006040:	461a      	mov	r2, r3
 8006042:	2300      	movs	r3, #0
 8006044:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800604c:	461a      	mov	r2, r3
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	431a      	orrs	r2, r3
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	431a      	orrs	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4619      	mov	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	01db      	lsls	r3, r3, #7
 8006060:	440b      	add	r3, r1
 8006062:	3384      	adds	r3, #132	; 0x84
 8006064:	4619      	mov	r1, r3
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	01db      	lsls	r3, r3, #7
 8006076:	4413      	add	r3, r2
 8006078:	3384      	adds	r3, #132	; 0x84
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	4611      	mov	r1, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	01d2      	lsls	r2, r2, #7
 8006086:	440a      	add	r2, r1
 8006088:	3284      	adds	r2, #132	; 0x84
 800608a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800608e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	4413      	add	r3, r2
 800609c:	3384      	adds	r3, #132	; 0x84
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	01db      	lsls	r3, r3, #7
 80060b0:	4413      	add	r3, r2
 80060b2:	3384      	adds	r3, #132	; 0x84
 80060b4:	69da      	ldr	r2, [r3, #28]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4619      	mov	r1, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	01db      	lsls	r3, r3, #7
 80060c0:	440b      	add	r3, r1
 80060c2:	3384      	adds	r3, #132	; 0x84
 80060c4:	4619      	mov	r1, r3
 80060c6:	4b58      	ldr	r3, [pc, #352]	; (8006228 <LTDC_SetConfig+0x32c>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	6809      	ldr	r1, [r1, #0]
 80060d8:	4608      	mov	r0, r1
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	01c9      	lsls	r1, r1, #7
 80060de:	4401      	add	r1, r0
 80060e0:	3184      	adds	r1, #132	; 0x84
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	01db      	lsls	r3, r3, #7
 80060f0:	4413      	add	r3, r2
 80060f2:	3384      	adds	r3, #132	; 0x84
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	01db      	lsls	r3, r3, #7
 8006100:	4413      	add	r3, r2
 8006102:	3384      	adds	r3, #132	; 0x84
 8006104:	461a      	mov	r2, r3
 8006106:	2300      	movs	r3, #0
 8006108:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	4413      	add	r3, r2
 8006116:	3384      	adds	r3, #132	; 0x84
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006128:	2304      	movs	r3, #4
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	e01b      	b.n	8006166 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d102      	bne.n	800613c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006136:	2303      	movs	r3, #3
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	e014      	b.n	8006166 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b04      	cmp	r3, #4
 8006142:	d00b      	beq.n	800615c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006148:	2b02      	cmp	r3, #2
 800614a:	d007      	beq.n	800615c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006150:	2b03      	cmp	r3, #3
 8006152:	d003      	beq.n	800615c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006158:	2b07      	cmp	r3, #7
 800615a:	d102      	bne.n	8006162 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800615c:	2302      	movs	r3, #2
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e001      	b.n	8006166 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006162:	2301      	movs	r3, #1
 8006164:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	01db      	lsls	r3, r3, #7
 8006170:	4413      	add	r3, r2
 8006172:	3384      	adds	r3, #132	; 0x84
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	4611      	mov	r1, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	01d2      	lsls	r2, r2, #7
 8006180:	440a      	add	r2, r1
 8006182:	3284      	adds	r2, #132	; 0x84
 8006184:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006188:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	fb02 f303 	mul.w	r3, r2, r3
 8006194:	041a      	lsls	r2, r3, #16
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6859      	ldr	r1, [r3, #4]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	1acb      	subs	r3, r1, r3
 80061a0:	69f9      	ldr	r1, [r7, #28]
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	3303      	adds	r3, #3
 80061a8:	68f9      	ldr	r1, [r7, #12]
 80061aa:	6809      	ldr	r1, [r1, #0]
 80061ac:	4608      	mov	r0, r1
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	01c9      	lsls	r1, r1, #7
 80061b2:	4401      	add	r1, r0
 80061b4:	3184      	adds	r1, #132	; 0x84
 80061b6:	4313      	orrs	r3, r2
 80061b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	01db      	lsls	r3, r3, #7
 80061c4:	4413      	add	r3, r2
 80061c6:	3384      	adds	r3, #132	; 0x84
 80061c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	01db      	lsls	r3, r3, #7
 80061d4:	440b      	add	r3, r1
 80061d6:	3384      	adds	r3, #132	; 0x84
 80061d8:	4619      	mov	r1, r3
 80061da:	4b14      	ldr	r3, [pc, #80]	; (800622c <LTDC_SetConfig+0x330>)
 80061dc:	4013      	ands	r3, r2
 80061de:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	01db      	lsls	r3, r3, #7
 80061ea:	4413      	add	r3, r2
 80061ec:	3384      	adds	r3, #132	; 0x84
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	01db      	lsls	r3, r3, #7
 8006200:	4413      	add	r3, r2
 8006202:	3384      	adds	r3, #132	; 0x84
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	4611      	mov	r1, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	01d2      	lsls	r2, r2, #7
 8006210:	440a      	add	r2, r1
 8006212:	3284      	adds	r2, #132	; 0x84
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	6013      	str	r3, [r2, #0]
}
 800621a:	bf00      	nop
 800621c:	3724      	adds	r7, #36	; 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	fffff8f8 	.word	0xfffff8f8
 800622c:	fffff800 	.word	0xfffff800

08006230 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a04      	ldr	r2, [pc, #16]	; (800624c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800623a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623e:	6013      	str	r3, [r2, #0]
}
 8006240:	bf00      	nop
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40007000 	.word	0x40007000

08006250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800625a:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006264:	6413      	str	r3, [r2, #64]	; 0x40
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006272:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800627c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800627e:	f7fd fb23 	bl	80038c8 <HAL_GetTick>
 8006282:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006284:	e009      	b.n	800629a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006286:	f7fd fb1f 	bl	80038c8 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006294:	d901      	bls.n	800629a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e022      	b.n	80062e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a6:	d1ee      	bne.n	8006286 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062a8:	4b10      	ldr	r3, [pc, #64]	; (80062ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a0f      	ldr	r2, [pc, #60]	; (80062ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062b4:	f7fd fb08 	bl	80038c8 <HAL_GetTick>
 80062b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062ba:	e009      	b.n	80062d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062bc:	f7fd fb04 	bl	80038c8 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ca:	d901      	bls.n	80062d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e007      	b.n	80062e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062dc:	d1ee      	bne.n	80062bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40007000 	.word	0x40007000

080062f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80062f8:	f7fd fae6 	bl	80038c8 <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e067      	b.n	80063d8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7fc fc79 	bl	8002c14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006322:	f241 3188 	movw	r1, #5000	; 0x1388
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f85e 	bl	80063e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	3b01      	subs	r3, #1
 800633c:	021a      	lsls	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	2120      	movs	r1, #32
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f856 	bl	8006404 <QSPI_WaitFlagStateUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d135      	bne.n	80063ce <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <HAL_QSPI_Init+0xf0>)
 800636a:	4013      	ands	r3, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6852      	ldr	r2, [r2, #4]
 8006370:	0611      	lsls	r1, r2, #24
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68d2      	ldr	r2, [r2, #12]
 8006376:	4311      	orrs	r1, r2
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	69d2      	ldr	r2, [r2, #28]
 800637c:	4311      	orrs	r1, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6a12      	ldr	r2, [r2, #32]
 8006382:	4311      	orrs	r1, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	430b      	orrs	r3, r1
 800638a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <HAL_QSPI_Init+0xf4>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6912      	ldr	r2, [r2, #16]
 800639a:	0411      	lsls	r1, r2, #16
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6952      	ldr	r2, [r2, #20]
 80063a0:	4311      	orrs	r1, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6992      	ldr	r2, [r2, #24]
 80063a6:	4311      	orrs	r1, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80063d6:	7afb      	ldrb	r3, [r7, #11]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	00ffff2f 	.word	0x00ffff2f
 80063e4:	ffe0f8fe 	.word	0xffe0f8fe

080063e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006414:	e01a      	b.n	800644c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d016      	beq.n	800644c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fd fa53 	bl	80038c8 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006440:	f043 0201 	orr.w	r2, r3, #1
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e00e      	b.n	800646a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4013      	ands	r3, r2
 8006456:	2b00      	cmp	r3, #0
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	429a      	cmp	r2, r3
 8006466:	d1d6      	bne.n	8006416 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800647c:	2300      	movs	r3, #0
 800647e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e291      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8087 	beq.w	80065a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006498:	4b96      	ldr	r3, [pc, #600]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d00c      	beq.n	80064be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064a4:	4b93      	ldr	r3, [pc, #588]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d112      	bne.n	80064d6 <HAL_RCC_OscConfig+0x62>
 80064b0:	4b90      	ldr	r3, [pc, #576]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064bc:	d10b      	bne.n	80064d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064be:	4b8d      	ldr	r3, [pc, #564]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d06c      	beq.n	80065a4 <HAL_RCC_OscConfig+0x130>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d168      	bne.n	80065a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e26b      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x7a>
 80064e0:	4b84      	ldr	r3, [pc, #528]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a83      	ldr	r2, [pc, #524]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	e02e      	b.n	800654c <HAL_RCC_OscConfig+0xd8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0x9c>
 80064f6:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a7e      	ldr	r2, [pc, #504]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80064fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	4b7c      	ldr	r3, [pc, #496]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a7b      	ldr	r2, [pc, #492]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e01d      	b.n	800654c <HAL_RCC_OscConfig+0xd8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0xc0>
 800651a:	4b76      	ldr	r3, [pc, #472]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a75      	ldr	r2, [pc, #468]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b73      	ldr	r3, [pc, #460]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a72      	ldr	r2, [pc, #456]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e00b      	b.n	800654c <HAL_RCC_OscConfig+0xd8>
 8006534:	4b6f      	ldr	r3, [pc, #444]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a6e      	ldr	r2, [pc, #440]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b6c      	ldr	r3, [pc, #432]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a6b      	ldr	r2, [pc, #428]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800654a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d013      	beq.n	800657c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fd f9b8 	bl	80038c8 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800655c:	f7fd f9b4 	bl	80038c8 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e21f      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0xe8>
 800657a:	e014      	b.n	80065a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fd f9a4 	bl	80038c8 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006584:	f7fd f9a0 	bl	80038c8 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e20b      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006596:	4b57      	ldr	r3, [pc, #348]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0x110>
 80065a2:	e000      	b.n	80065a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d069      	beq.n	8006686 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065b2:	4b50      	ldr	r3, [pc, #320]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065be:	4b4d      	ldr	r3, [pc, #308]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d11c      	bne.n	8006604 <HAL_RCC_OscConfig+0x190>
 80065ca:	4b4a      	ldr	r3, [pc, #296]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d116      	bne.n	8006604 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d6:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_RCC_OscConfig+0x17a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d001      	beq.n	80065ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e1df      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ee:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	493d      	ldr	r1, [pc, #244]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006602:	e040      	b.n	8006686 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d023      	beq.n	8006654 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800660c:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006618:	f7fd f956 	bl	80038c8 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006620:	f7fd f952 	bl	80038c8 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e1bd      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800663e:	4b2d      	ldr	r3, [pc, #180]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4929      	ldr	r1, [pc, #164]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]
 8006652:	e018      	b.n	8006686 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fd f932 	bl	80038c8 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006668:	f7fd f92e 	bl	80038c8 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e199      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800667a:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d038      	beq.n	8006704 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d019      	beq.n	80066ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800669a:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 800669c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669e:	4a15      	ldr	r2, [pc, #84]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a6:	f7fd f90f 	bl	80038c8 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ae:	f7fd f90b 	bl	80038c8 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e176      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f0      	beq.n	80066ae <HAL_RCC_OscConfig+0x23a>
 80066cc:	e01a      	b.n	8006704 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d2:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <HAL_RCC_OscConfig+0x280>)
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066da:	f7fd f8f5 	bl	80038c8 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e2:	f7fd f8f1 	bl	80038c8 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d903      	bls.n	80066f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e15c      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
 80066f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f8:	4b91      	ldr	r3, [pc, #580]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80066fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ee      	bne.n	80066e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a4 	beq.w	800685a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006712:	4b8b      	ldr	r3, [pc, #556]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10d      	bne.n	800673a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800671e:	4b88      	ldr	r3, [pc, #544]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	4a87      	ldr	r2, [pc, #540]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006728:	6413      	str	r3, [r2, #64]	; 0x40
 800672a:	4b85      	ldr	r3, [pc, #532]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006732:	60bb      	str	r3, [r7, #8]
 8006734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800673a:	4b82      	ldr	r3, [pc, #520]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d118      	bne.n	8006778 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006746:	4b7f      	ldr	r3, [pc, #508]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7e      	ldr	r2, [pc, #504]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800674c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006752:	f7fd f8b9 	bl	80038c8 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675a:	f7fd f8b5 	bl	80038c8 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b64      	cmp	r3, #100	; 0x64
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e120      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800676c:	4b75      	ldr	r3, [pc, #468]	; (8006944 <HAL_RCC_OscConfig+0x4d0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d106      	bne.n	800678e <HAL_RCC_OscConfig+0x31a>
 8006780:	4b6f      	ldr	r3, [pc, #444]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	4a6e      	ldr	r2, [pc, #440]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	6713      	str	r3, [r2, #112]	; 0x70
 800678c:	e02d      	b.n	80067ea <HAL_RCC_OscConfig+0x376>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10c      	bne.n	80067b0 <HAL_RCC_OscConfig+0x33c>
 8006796:	4b6a      	ldr	r3, [pc, #424]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4a69      	ldr	r2, [pc, #420]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	6713      	str	r3, [r2, #112]	; 0x70
 80067a2:	4b67      	ldr	r3, [pc, #412]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4a66      	ldr	r2, [pc, #408]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067a8:	f023 0304 	bic.w	r3, r3, #4
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70
 80067ae:	e01c      	b.n	80067ea <HAL_RCC_OscConfig+0x376>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b05      	cmp	r3, #5
 80067b6:	d10c      	bne.n	80067d2 <HAL_RCC_OscConfig+0x35e>
 80067b8:	4b61      	ldr	r3, [pc, #388]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	4a60      	ldr	r2, [pc, #384]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067be:	f043 0304 	orr.w	r3, r3, #4
 80067c2:	6713      	str	r3, [r2, #112]	; 0x70
 80067c4:	4b5e      	ldr	r3, [pc, #376]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	4a5d      	ldr	r2, [pc, #372]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	6713      	str	r3, [r2, #112]	; 0x70
 80067d0:	e00b      	b.n	80067ea <HAL_RCC_OscConfig+0x376>
 80067d2:	4b5b      	ldr	r3, [pc, #364]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4a5a      	ldr	r2, [pc, #360]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70
 80067de:	4b58      	ldr	r3, [pc, #352]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a57      	ldr	r2, [pc, #348]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80067e4:	f023 0304 	bic.w	r3, r3, #4
 80067e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d015      	beq.n	800681e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fd f869 	bl	80038c8 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fa:	f7fd f865 	bl	80038c8 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f241 3288 	movw	r2, #5000	; 0x1388
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e0ce      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006810:	4b4b      	ldr	r3, [pc, #300]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0ee      	beq.n	80067fa <HAL_RCC_OscConfig+0x386>
 800681c:	e014      	b.n	8006848 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681e:	f7fd f853 	bl	80038c8 <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006824:	e00a      	b.n	800683c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006826:	f7fd f84f 	bl	80038c8 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	f241 3288 	movw	r2, #5000	; 0x1388
 8006834:	4293      	cmp	r3, r2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e0b8      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800683c:	4b40      	ldr	r3, [pc, #256]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ee      	bne.n	8006826 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d105      	bne.n	800685a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800684e:	4b3c      	ldr	r3, [pc, #240]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	4a3b      	ldr	r2, [pc, #236]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006858:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a4 	beq.w	80069ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006864:	4b36      	ldr	r3, [pc, #216]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b08      	cmp	r3, #8
 800686e:	d06b      	beq.n	8006948 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d149      	bne.n	800690c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006878:	4b31      	ldr	r3, [pc, #196]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a30      	ldr	r2, [pc, #192]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 800687e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fd f820 	bl	80038c8 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688c:	f7fd f81c 	bl	80038c8 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e087      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689e:	4b28      	ldr	r3, [pc, #160]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	019b      	lsls	r3, r3, #6
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	3b01      	subs	r3, #1
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	061b      	lsls	r3, r3, #24
 80068ce:	4313      	orrs	r3, r2
 80068d0:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80068d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a18      	ldr	r2, [pc, #96]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 80068de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fc fff0 	bl	80038c8 <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ec:	f7fc ffec 	bl	80038c8 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e057      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fe:	4b10      	ldr	r3, [pc, #64]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f0      	beq.n	80068ec <HAL_RCC_OscConfig+0x478>
 800690a:	e04f      	b.n	80069ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690c:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0b      	ldr	r2, [pc, #44]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006918:	f7fc ffd6 	bl	80038c8 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006920:	f7fc ffd2 	bl	80038c8 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e03d      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006932:	4b03      	ldr	r3, [pc, #12]	; (8006940 <HAL_RCC_OscConfig+0x4cc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f0      	bne.n	8006920 <HAL_RCC_OscConfig+0x4ac>
 800693e:	e035      	b.n	80069ac <HAL_RCC_OscConfig+0x538>
 8006940:	40023800 	.word	0x40023800
 8006944:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <HAL_RCC_OscConfig+0x544>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d028      	beq.n	80069a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d121      	bne.n	80069a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696e:	429a      	cmp	r2, r3
 8006970:	d11a      	bne.n	80069a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006978:	4013      	ands	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800697e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006980:	4293      	cmp	r3, r2
 8006982:	d111      	bne.n	80069a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	3b01      	subs	r3, #1
 8006992:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006994:	429a      	cmp	r2, r3
 8006996:	d107      	bne.n	80069a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40023800 	.word	0x40023800

080069bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0d0      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069d4:	4b6a      	ldr	r3, [pc, #424]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d910      	bls.n	8006a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	4b67      	ldr	r3, [pc, #412]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 020f 	bic.w	r2, r3, #15
 80069ea:	4965      	ldr	r1, [pc, #404]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f2:	4b63      	ldr	r3, [pc, #396]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d001      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0b8      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d020      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a1c:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4a58      	ldr	r2, [pc, #352]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a34:	4b53      	ldr	r3, [pc, #332]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4a52      	ldr	r2, [pc, #328]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a40:	4b50      	ldr	r3, [pc, #320]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	494d      	ldr	r1, [pc, #308]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d040      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d107      	bne.n	8006a76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a66:	4b47      	ldr	r3, [pc, #284]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d115      	bne.n	8006a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e07f      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7e:	4b41      	ldr	r3, [pc, #260]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e073      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a8e:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e06b      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a9e:	4b39      	ldr	r3, [pc, #228]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f023 0203 	bic.w	r2, r3, #3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	4936      	ldr	r1, [pc, #216]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab0:	f7fc ff0a 	bl	80038c8 <HAL_GetTick>
 8006ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ab6:	e00a      	b.n	8006ace <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ab8:	f7fc ff06 	bl	80038c8 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e053      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ace:	4b2d      	ldr	r3, [pc, #180]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 020c 	and.w	r2, r3, #12
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d1eb      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae0:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d210      	bcs.n	8006b10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aee:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 020f 	bic.w	r2, r3, #15
 8006af6:	4922      	ldr	r1, [pc, #136]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_RCC_ClockConfig+0x1c4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e032      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b1c:	4b19      	ldr	r3, [pc, #100]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4916      	ldr	r1, [pc, #88]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	490e      	ldr	r1, [pc, #56]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b4e:	f000 f821 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 8006b52:	4601      	mov	r1, r0
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <HAL_RCC_ClockConfig+0x1c8>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <HAL_RCC_ClockConfig+0x1cc>)
 8006b60:	5cd3      	ldrb	r3, [r2, r3]
 8006b62:	fa21 f303 	lsr.w	r3, r1, r3
 8006b66:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <HAL_RCC_ClockConfig+0x1d0>)
 8006b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_RCC_ClockConfig+0x1d4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fc fcf4 	bl	800355c <HAL_InitTick>

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023c00 	.word	0x40023c00
 8006b84:	40023800 	.word	0x40023800
 8006b88:	08026554 	.word	0x08026554
 8006b8c:	20000018 	.word	0x20000018
 8006b90:	2000001c 	.word	0x2000001c

08006b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006baa:	4b50      	ldr	r3, [pc, #320]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 030c 	and.w	r3, r3, #12
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d007      	beq.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x32>
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d008      	beq.n	8006bcc <HAL_RCC_GetSysClockFreq+0x38>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f040 808d 	bne.w	8006cda <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006bc2:	60bb      	str	r3, [r7, #8]
      break;
 8006bc4:	e08c      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bc6:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bc8:	60bb      	str	r3, [r7, #8]
      break;
 8006bca:	e089      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bcc:	4b47      	ldr	r3, [pc, #284]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bd4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006bd6:	4b45      	ldr	r3, [pc, #276]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d023      	beq.n	8006c2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be2:	4b42      	ldr	r3, [pc, #264]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	f04f 0400 	mov.w	r4, #0
 8006bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	ea03 0501 	and.w	r5, r3, r1
 8006bf8:	ea04 0602 	and.w	r6, r4, r2
 8006bfc:	4a3d      	ldr	r2, [pc, #244]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bfe:	fb02 f106 	mul.w	r1, r2, r6
 8006c02:	2200      	movs	r2, #0
 8006c04:	fb02 f205 	mul.w	r2, r2, r5
 8006c08:	440a      	add	r2, r1
 8006c0a:	493a      	ldr	r1, [pc, #232]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c0c:	fba5 0101 	umull	r0, r1, r5, r1
 8006c10:	1853      	adds	r3, r2, r1
 8006c12:	4619      	mov	r1, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f04f 0400 	mov.w	r4, #0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	f7f9 fddb 	bl	80007d8 <__aeabi_uldivmod>
 8006c22:	4603      	mov	r3, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	e049      	b.n	8006cbe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2a:	4b30      	ldr	r3, [pc, #192]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	099b      	lsrs	r3, r3, #6
 8006c30:	f04f 0400 	mov.w	r4, #0
 8006c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	ea03 0501 	and.w	r5, r3, r1
 8006c40:	ea04 0602 	and.w	r6, r4, r2
 8006c44:	4629      	mov	r1, r5
 8006c46:	4632      	mov	r2, r6
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	f04f 0400 	mov.w	r4, #0
 8006c50:	0154      	lsls	r4, r2, #5
 8006c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c56:	014b      	lsls	r3, r1, #5
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	1b49      	subs	r1, r1, r5
 8006c5e:	eb62 0206 	sbc.w	r2, r2, r6
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	f04f 0400 	mov.w	r4, #0
 8006c6a:	0194      	lsls	r4, r2, #6
 8006c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c70:	018b      	lsls	r3, r1, #6
 8006c72:	1a5b      	subs	r3, r3, r1
 8006c74:	eb64 0402 	sbc.w	r4, r4, r2
 8006c78:	f04f 0100 	mov.w	r1, #0
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	00e2      	lsls	r2, r4, #3
 8006c82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c86:	00d9      	lsls	r1, r3, #3
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	195b      	adds	r3, r3, r5
 8006c8e:	eb44 0406 	adc.w	r4, r4, r6
 8006c92:	f04f 0100 	mov.w	r1, #0
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	02a2      	lsls	r2, r4, #10
 8006c9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ca0:	0299      	lsls	r1, r3, #10
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	4621      	mov	r1, r4
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f04f 0400 	mov.w	r4, #0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	f7f9 fd90 	bl	80007d8 <__aeabi_uldivmod>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	0c1b      	lsrs	r3, r3, #16
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	3301      	adds	r3, #1
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	60bb      	str	r3, [r7, #8]
      break;
 8006cd8:	e002      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006cdc:	60bb      	str	r3, [r7, #8]
      break;
 8006cde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	00f42400 	.word	0x00f42400
 8006cf4:	017d7840 	.word	0x017d7840

08006cf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cfc:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000018 	.word	0x20000018

08006d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d14:	f7ff fff0 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	0a9b      	lsrs	r3, r3, #10
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	4a03      	ldr	r2, [pc, #12]	; (8006d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d26:	5cd3      	ldrb	r3, [r2, r3]
 8006d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40023800 	.word	0x40023800
 8006d34:	08026564 	.word	0x08026564

08006d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d3c:	f7ff ffdc 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d40:	4601      	mov	r1, r0
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	0b5b      	lsrs	r3, r3, #13
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	4a03      	ldr	r2, [pc, #12]	; (8006d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d4e:	5cd3      	ldrb	r3, [r2, r3]
 8006d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	08026564 	.word	0x08026564

08006d60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	220f      	movs	r2, #15
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <HAL_RCC_GetClockConfig+0x5c>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0203 	and.w	r2, r3, #3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d7c:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <HAL_RCC_GetClockConfig+0x5c>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d88:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <HAL_RCC_GetClockConfig+0x5c>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006d94:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <HAL_RCC_GetClockConfig+0x5c>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <HAL_RCC_GetClockConfig+0x60>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	601a      	str	r2, [r3, #0]
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	40023c00 	.word	0x40023c00

08006dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d012      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dec:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4a68      	ldr	r2, [pc, #416]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006df6:	6093      	str	r3, [r2, #8]
 8006df8:	4b66      	ldr	r3, [pc, #408]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	4964      	ldr	r1, [pc, #400]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d017      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e1e:	4b5d      	ldr	r3, [pc, #372]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2c:	4959      	ldr	r1, [pc, #356]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3c:	d101      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d017      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e5a:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	494a      	ldr	r1, [pc, #296]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e78:	d101      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e86:	2301      	movs	r3, #1
 8006e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 808b 	beq.w	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ea8:	4b3a      	ldr	r3, [pc, #232]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	4a39      	ldr	r2, [pc, #228]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb4:	4b37      	ldr	r3, [pc, #220]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a34      	ldr	r2, [pc, #208]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ecc:	f7fc fcfc 	bl	80038c8 <HAL_GetTick>
 8006ed0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed4:	f7fc fcf8 	bl	80038c8 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b64      	cmp	r3, #100	; 0x64
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e355      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ee6:	4b2c      	ldr	r3, [pc, #176]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0f0      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ef2:	4b28      	ldr	r3, [pc, #160]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d035      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d02e      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f26:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f32:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d114      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fc fcc0 	bl	80038c8 <HAL_GetTick>
 8006f48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f4c:	f7fc fcbc 	bl	80038c8 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e317      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0ee      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7a:	d111      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f8a:	400b      	ands	r3, r1
 8006f8c:	4901      	ldr	r1, [pc, #4]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	608b      	str	r3, [r1, #8]
 8006f92:	e00b      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40007000 	.word	0x40007000
 8006f9c:	0ffffcff 	.word	0x0ffffcff
 8006fa0:	4bb0      	ldr	r3, [pc, #704]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4aaf      	ldr	r2, [pc, #700]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006faa:	6093      	str	r3, [r2, #8]
 8006fac:	4bad      	ldr	r3, [pc, #692]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb8:	49aa      	ldr	r1, [pc, #680]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d010      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fca:	4ba6      	ldr	r3, [pc, #664]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd0:	4aa4      	ldr	r2, [pc, #656]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fda:	4ba2      	ldr	r3, [pc, #648]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	499f      	ldr	r1, [pc, #636]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ff8:	4b9a      	ldr	r3, [pc, #616]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007006:	4997      	ldr	r1, [pc, #604]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800701a:	4b92      	ldr	r3, [pc, #584]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007028:	498e      	ldr	r1, [pc, #568]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800703c:	4b89      	ldr	r3, [pc, #548]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704a:	4986      	ldr	r1, [pc, #536]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800705e:	4b81      	ldr	r3, [pc, #516]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007064:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	497d      	ldr	r1, [pc, #500]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007080:	4b78      	ldr	r3, [pc, #480]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007086:	f023 0203 	bic.w	r2, r3, #3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	4975      	ldr	r1, [pc, #468]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070a2:	4b70      	ldr	r3, [pc, #448]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a8:	f023 020c 	bic.w	r2, r3, #12
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b0:	496c      	ldr	r1, [pc, #432]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070c4:	4b67      	ldr	r3, [pc, #412]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	4964      	ldr	r1, [pc, #400]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070e6:	4b5f      	ldr	r3, [pc, #380]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	495b      	ldr	r1, [pc, #364]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007108:	4b56      	ldr	r3, [pc, #344]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	4953      	ldr	r1, [pc, #332]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800712a:	4b4e      	ldr	r3, [pc, #312]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	494a      	ldr	r1, [pc, #296]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800714c:	4b45      	ldr	r3, [pc, #276]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715a:	4942      	ldr	r1, [pc, #264]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800716e:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007174:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717c:	4939      	ldr	r1, [pc, #228]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007190:	4b34      	ldr	r3, [pc, #208]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800719e:	4931      	ldr	r1, [pc, #196]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d011      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071b2:	4b2c      	ldr	r3, [pc, #176]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c0:	4928      	ldr	r1, [pc, #160]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d0:	d101      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071d2:	2301      	movs	r3, #1
 80071d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007200:	4918      	ldr	r1, [pc, #96]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007214:	4b13      	ldr	r3, [pc, #76]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007224:	490f      	ldr	r1, [pc, #60]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d005      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800723a:	f040 80d8 	bne.w	80073ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a08      	ldr	r2, [pc, #32]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800724a:	f7fc fb3d 	bl	80038c8 <HAL_GetTick>
 800724e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007250:	e00a      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007252:	f7fc fb39 	bl	80038c8 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b64      	cmp	r3, #100	; 0x64
 800725e:	d903      	bls.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e196      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007264:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007268:	4b6c      	ldr	r3, [pc, #432]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1ee      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d021      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11d      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007288:	4b64      	ldr	r3, [pc, #400]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800728a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728e:	0c1b      	lsrs	r3, r3, #16
 8007290:	f003 0303 	and.w	r3, r3, #3
 8007294:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007296:	4b61      	ldr	r3, [pc, #388]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	019a      	lsls	r2, r3, #6
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	041b      	lsls	r3, r3, #16
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	061b      	lsls	r3, r3, #24
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	071b      	lsls	r3, r3, #28
 80072bc:	4957      	ldr	r1, [pc, #348]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x516>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d02e      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ee:	d129      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072f0:	4b4a      	ldr	r3, [pc, #296]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f6:	0c1b      	lsrs	r3, r3, #16
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072fe:	4b47      	ldr	r3, [pc, #284]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007304:	0f1b      	lsrs	r3, r3, #28
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	019a      	lsls	r2, r3, #6
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	431a      	orrs	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	071b      	lsls	r3, r3, #28
 8007324:	493d      	ldr	r1, [pc, #244]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800732c:	4b3b      	ldr	r3, [pc, #236]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800732e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007332:	f023 021f 	bic.w	r2, r3, #31
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	3b01      	subs	r3, #1
 800733c:	4937      	ldr	r1, [pc, #220]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01d      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007350:	4b32      	ldr	r3, [pc, #200]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007356:	0e1b      	lsrs	r3, r3, #24
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800735e:	4b2f      	ldr	r3, [pc, #188]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007364:	0f1b      	lsrs	r3, r3, #28
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	019a      	lsls	r2, r3, #6
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	431a      	orrs	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	061b      	lsls	r3, r3, #24
 800737e:	431a      	orrs	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	071b      	lsls	r3, r3, #28
 8007384:	4925      	ldr	r1, [pc, #148]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d011      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	019a      	lsls	r2, r3, #6
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	041b      	lsls	r3, r3, #16
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	061b      	lsls	r3, r3, #24
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	071b      	lsls	r3, r3, #28
 80073b4:	4919      	ldr	r1, [pc, #100]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073bc:	4b17      	ldr	r3, [pc, #92]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a16      	ldr	r2, [pc, #88]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c8:	f7fc fa7e 	bl	80038c8 <HAL_GetTick>
 80073cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073d0:	f7fc fa7a 	bl	80038c8 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b64      	cmp	r3, #100	; 0x64
 80073dc:	d901      	bls.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e0d7      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073e2:	4b0e      	ldr	r3, [pc, #56]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	f040 80cd 	bne.w	8007590 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a08      	ldr	r2, [pc, #32]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007402:	f7fc fa61 	bl	80038c8 <HAL_GetTick>
 8007406:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007408:	e00a      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800740a:	f7fc fa5d 	bl	80038c8 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b64      	cmp	r3, #100	; 0x64
 8007416:	d903      	bls.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e0ba      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800741c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007420:	4b5e      	ldr	r3, [pc, #376]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742c:	d0ed      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800744a:	2b00      	cmp	r3, #0
 800744c:	d02e      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d12a      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007456:	4b51      	ldr	r3, [pc, #324]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007464:	4b4d      	ldr	r3, [pc, #308]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746a:	0f1b      	lsrs	r3, r3, #28
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	019a      	lsls	r2, r3, #6
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	061b      	lsls	r3, r3, #24
 8007484:	431a      	orrs	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	071b      	lsls	r3, r3, #28
 800748a:	4944      	ldr	r1, [pc, #272]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007492:	4b42      	ldr	r3, [pc, #264]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007498:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	3b01      	subs	r3, #1
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	493d      	ldr	r1, [pc, #244]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d022      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c0:	d11d      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074c2:	4b36      	ldr	r3, [pc, #216]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c8:	0e1b      	lsrs	r3, r3, #24
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074d0:	4b32      	ldr	r3, [pc, #200]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d6:	0f1b      	lsrs	r3, r3, #28
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	019a      	lsls	r2, r3, #6
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	431a      	orrs	r2, r3
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	061b      	lsls	r3, r3, #24
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	071b      	lsls	r3, r3, #28
 80074f6:	4929      	ldr	r1, [pc, #164]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d028      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800750a:	4b24      	ldr	r3, [pc, #144]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007510:	0e1b      	lsrs	r3, r3, #24
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007518:	4b20      	ldr	r3, [pc, #128]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751e:	0c1b      	lsrs	r3, r3, #16
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	019a      	lsls	r2, r3, #6
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	431a      	orrs	r2, r3
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	061b      	lsls	r3, r3, #24
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	071b      	lsls	r3, r3, #28
 800753e:	4917      	ldr	r1, [pc, #92]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007546:	4b15      	ldr	r3, [pc, #84]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800754c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	4911      	ldr	r1, [pc, #68]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0e      	ldr	r2, [pc, #56]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007568:	f7fc f9ae 	bl	80038c8 <HAL_GetTick>
 800756c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007570:	f7fc f9aa 	bl	80038c8 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b64      	cmp	r3, #100	; 0x64
 800757c:	d901      	bls.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e007      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007582:	4b06      	ldr	r3, [pc, #24]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758e:	d1ef      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800

080075a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075be:	f040 8086 	bne.w	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80075c2:	4b8d      	ldr	r3, [pc, #564]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80075d0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d8:	d03e      	beq.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80075da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075de:	d073      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d000      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80075e4:	e074      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075e6:	4b84      	ldr	r3, [pc, #528]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d108      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075f2:	4b81      	ldr	r3, [pc, #516]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075fa:	4a80      	ldr	r2, [pc, #512]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80075fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	e007      	b.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007604:	4b7c      	ldr	r3, [pc, #496]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800760c:	4a7c      	ldr	r2, [pc, #496]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800760e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007612:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007614:	4b78      	ldr	r3, [pc, #480]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761a:	0e1b      	lsrs	r3, r3, #24
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007622:	4b75      	ldr	r3, [pc, #468]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007628:	099b      	lsrs	r3, r3, #6
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	fb02 f203 	mul.w	r2, r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	fbb2 f3f3 	udiv	r3, r2, r3
 800763a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800763c:	4b6e      	ldr	r3, [pc, #440]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800763e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	fbb2 f3f3 	udiv	r3, r2, r3
 8007654:	617b      	str	r3, [r7, #20]
        break;
 8007656:	e03b      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007658:	4b67      	ldr	r3, [pc, #412]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d108      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007664:	4b64      	ldr	r3, [pc, #400]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800766c:	4a63      	ldr	r2, [pc, #396]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	e007      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007676:	4b60      	ldr	r3, [pc, #384]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800767e:	4a60      	ldr	r2, [pc, #384]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007686:	4b5c      	ldr	r3, [pc, #368]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768c:	0e1b      	lsrs	r3, r3, #24
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007694:	4b58      	ldr	r3, [pc, #352]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769a:	099b      	lsrs	r3, r3, #6
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	fb02 f203 	mul.w	r2, r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80076ae:	4b52      	ldr	r3, [pc, #328]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]
        break;
 80076c6:	e003      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80076c8:	4b4e      	ldr	r3, [pc, #312]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80076ca:	617b      	str	r3, [r7, #20]
        break;
 80076cc:	e000      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80076ce:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d6:	f040 8086 	bne.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80076da:	4b47      	ldr	r3, [pc, #284]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80076e8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f0:	d03e      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80076f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076f6:	d073      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d000      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80076fc:	e074      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076fe:	4b3e      	ldr	r3, [pc, #248]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d108      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800770a:	4b3b      	ldr	r3, [pc, #236]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007712:	4a3a      	ldr	r2, [pc, #232]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	e007      	b.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800771c:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007724:	4a36      	ldr	r2, [pc, #216]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800772c:	4b32      	ldr	r3, [pc, #200]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007732:	0e1b      	lsrs	r3, r3, #24
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800773a:	4b2f      	ldr	r3, [pc, #188]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800773c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007740:	099b      	lsrs	r3, r3, #6
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	fb02 f203 	mul.w	r2, r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007754:	4b28      	ldr	r3, [pc, #160]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	617b      	str	r3, [r7, #20]
        break;
 800776e:	e03b      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007770:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d108      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800777c:	4b1e      	ldr	r3, [pc, #120]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007784:	4a1d      	ldr	r2, [pc, #116]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	e007      	b.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800778e:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007796:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007798:	fbb2 f3f3 	udiv	r3, r2, r3
 800779c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800779e:	4b16      	ldr	r3, [pc, #88]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a4:	0e1b      	lsrs	r3, r3, #24
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80077ac:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b2:	099b      	lsrs	r3, r3, #6
 80077b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	fb02 f203 	mul.w	r2, r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	617b      	str	r3, [r7, #20]
        break;
 80077de:	e003      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80077e0:	4b08      	ldr	r3, [pc, #32]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80077e2:	617b      	str	r3, [r7, #20]
        break;
 80077e4:	e000      	b.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80077e6:	bf00      	nop

  return frequency;
 80077e8:	697b      	ldr	r3, [r7, #20]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40023800 	.word	0x40023800
 80077fc:	00f42400 	.word	0x00f42400
 8007800:	017d7840 	.word	0x017d7840
 8007804:	00bb8000 	.word	0x00bb8000

08007808 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e06b      	b.n	80078f2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7f5b      	ldrb	r3, [r3, #29]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fb fa82 	bl	8002d34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	22ca      	movs	r2, #202	; 0xca
 800783c:	625a      	str	r2, [r3, #36]	; 0x24
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2253      	movs	r2, #83	; 0x53
 8007844:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fb00 	bl	8007e4c <RTC_EnterInitMode>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	22ff      	movs	r2, #255	; 0xff
 8007858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2204      	movs	r2, #4
 800785e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e046      	b.n	80078f2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6899      	ldr	r1, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b23      	ldr	r3, [pc, #140]	; (80078fc <HAL_RTC_Init+0xf4>)
 8007870:	400b      	ands	r3, r1
 8007872:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6899      	ldr	r1, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	68d2      	ldr	r2, [r2, #12]
 800789a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6919      	ldr	r1, [r3, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	041a      	lsls	r2, r3, #16
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078be:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0208 	bic.w	r2, r2, #8
 80078ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	22ff      	movs	r2, #255	; 0xff
 80078e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80078f0:	2300      	movs	r3, #0
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	ff8fffbf 	.word	0xff8fffbf

08007900 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007900:	b590      	push	{r4, r7, lr}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	7f1b      	ldrb	r3, [r3, #28]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_RTC_SetTime+0x1c>
 8007918:	2302      	movs	r3, #2
 800791a:	e0a8      	b.n	8007a6e <HAL_RTC_SetTime+0x16e>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d126      	bne.n	800797c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 faac 	bl	8007ea4 <RTC_ByteToBcd2>
 800794c:	4603      	mov	r3, r0
 800794e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	785b      	ldrb	r3, [r3, #1]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 faa5 	bl	8007ea4 <RTC_ByteToBcd2>
 800795a:	4603      	mov	r3, r0
 800795c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800795e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	789b      	ldrb	r3, [r3, #2]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fa9d 	bl	8007ea4 <RTC_ByteToBcd2>
 800796a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800796c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	7b1b      	ldrb	r3, [r3, #12]
 8007974:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e018      	b.n	80079ae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2200      	movs	r2, #0
 800798e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800799c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80079a2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	7b1b      	ldrb	r3, [r3, #12]
 80079a8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	22ca      	movs	r2, #202	; 0xca
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2253      	movs	r2, #83	; 0x53
 80079bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fa44 	bl	8007e4c <RTC_EnterInitMode>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	22ff      	movs	r2, #255	; 0xff
 80079d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2204      	movs	r2, #4
 80079d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e045      	b.n	8007a6e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	6979      	ldr	r1, [r7, #20]
 80079e8:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <HAL_RTC_SetTime+0x178>)
 80079ea:	400b      	ands	r3, r1
 80079ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6899      	ldr	r1, [r3, #8]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a24:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d111      	bne.n	8007a58 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f9e1 	bl	8007dfc <HAL_RTC_WaitForSynchro>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e00a      	b.n	8007a6e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	22ff      	movs	r2, #255	; 0xff
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2201      	movs	r2, #1
 8007a64:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd90      	pop	{r4, r7, pc}
 8007a76:	bf00      	nop
 8007a78:	007f7f7f 	.word	0x007f7f7f

08007a7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	7f1b      	ldrb	r3, [r3, #28]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_RTC_SetDate+0x1c>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e092      	b.n	8007bbe <HAL_RTC_SetDate+0x142>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10e      	bne.n	8007ac8 <HAL_RTC_SetDate+0x4c>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d008      	beq.n	8007ac8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	f023 0310 	bic.w	r3, r3, #16
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	330a      	adds	r3, #10
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d11c      	bne.n	8007b08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	78db      	ldrb	r3, [r3, #3]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f9e6 	bl	8007ea4 <RTC_ByteToBcd2>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 f9df 	bl	8007ea4 <RTC_ByteToBcd2>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007aea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	789b      	ldrb	r3, [r3, #2]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f9d7 	bl	8007ea4 <RTC_ByteToBcd2>
 8007af6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007af8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	e00e      	b.n	8007b26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	78db      	ldrb	r3, [r3, #3]
 8007b0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007b14:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007b1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	22ca      	movs	r2, #202	; 0xca
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2253      	movs	r2, #83	; 0x53
 8007b34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 f988 	bl	8007e4c <RTC_EnterInitMode>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	22ff      	movs	r2, #255	; 0xff
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e031      	b.n	8007bbe <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <HAL_RTC_SetDate+0x14c>)
 8007b62:	400b      	ands	r3, r1
 8007b64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b74:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d111      	bne.n	8007ba8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f939 	bl	8007dfc <HAL_RTC_WaitForSynchro>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e00a      	b.n	8007bbe <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	22ff      	movs	r2, #255	; 0xff
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
  }
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd90      	pop	{r4, r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	00ffff3f 	.word	0x00ffff3f

08007bcc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007bcc:	b590      	push	{r4, r7, lr}
 8007bce:	b089      	sub	sp, #36	; 0x24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61fb      	str	r3, [r7, #28]
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	7f1b      	ldrb	r3, [r3, #28]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_RTC_SetAlarm+0x24>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e101      	b.n	8007df4 <HAL_RTC_SetAlarm+0x228>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d137      	bne.n	8007c72 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f942 	bl	8007ea4 <RTC_ByteToBcd2>
 8007c20:	4603      	mov	r3, r0
 8007c22:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	785b      	ldrb	r3, [r3, #1]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f93b 	bl	8007ea4 <RTC_ByteToBcd2>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c32:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	789b      	ldrb	r3, [r3, #2]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f933 	bl	8007ea4 <RTC_ByteToBcd2>
 8007c3e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c40:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	7b1b      	ldrb	r3, [r3, #12]
 8007c48:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007c4a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f925 	bl	8007ea4 <RTC_ByteToBcd2>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e023      	b.n	8007cba <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2200      	movs	r2, #0
 8007c84:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c92:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c98:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	7b1b      	ldrb	r3, [r3, #12]
 8007c9e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007ca0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ca8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007caa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007cb0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	22ca      	movs	r2, #202	; 0xca
 8007ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2253      	movs	r2, #83	; 0x53
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cde:	d13f      	bne.n	8007d60 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cfe:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d00:	f7fb fde2 	bl	80038c8 <HAL_GetTick>
 8007d04:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007d06:	e013      	b.n	8007d30 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d08:	f7fb fdde 	bl	80038c8 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d16:	d90b      	bls.n	8007d30 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	22ff      	movs	r2, #255	; 0xff
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2203      	movs	r2, #3
 8007d24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e061      	b.n	8007df4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0e4      	beq.n	8007d08 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d5c:	609a      	str	r2, [r3, #8]
 8007d5e:	e03e      	b.n	8007dde <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d6e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d7e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d80:	f7fb fda2 	bl	80038c8 <HAL_GetTick>
 8007d84:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d86:	e013      	b.n	8007db0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d88:	f7fb fd9e 	bl	80038c8 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d96:	d90b      	bls.n	8007db0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	22ff      	movs	r2, #255	; 0xff
 8007d9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2203      	movs	r2, #3
 8007da4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e021      	b.n	8007df4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0e4      	beq.n	8007d88 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ddc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	22ff      	movs	r2, #255	; 0xff
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2201      	movs	r2, #1
 8007dea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3724      	adds	r7, #36	; 0x24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd90      	pop	{r4, r7, pc}

08007dfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e18:	f7fb fd56 	bl	80038c8 <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e1e:	e009      	b.n	8007e34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e20:	f7fb fd52 	bl	80038c8 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2e:	d901      	bls.n	8007e34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e007      	b.n	8007e44 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0ee      	beq.n	8007e20 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d119      	bne.n	8007e9a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e70:	f7fb fd2a 	bl	80038c8 <HAL_GetTick>
 8007e74:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e76:	e009      	b.n	8007e8c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e78:	f7fb fd26 	bl	80038c8 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e86:	d901      	bls.n	8007e8c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e007      	b.n	8007e9c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0ee      	beq.n	8007e78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007eb2:	e005      	b.n	8007ec0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	3b0a      	subs	r3, #10
 8007ebe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	2b09      	cmp	r3, #9
 8007ec4:	d8f6      	bhi.n	8007eb4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	011b      	lsls	r3, r3, #4
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b2db      	uxtb	r3, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	7f1b      	ldrb	r3, [r3, #28]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_RTCEx_SetTimeStamp+0x1c>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e03e      	b.n	8007f7a <HAL_RTCEx_SetTimeStamp+0x9a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2201      	movs	r2, #1
 8007f00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2202      	movs	r2, #2
 8007f06:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689a      	ldr	r2, [r3, #8]
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	22ca      	movs	r2, #202	; 0xca
 8007f22:	625a      	str	r2, [r3, #36]	; 0x24
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2253      	movs	r2, #83	; 0x53
 8007f2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0206 	bic.w	r2, r2, #6
 8007f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f62:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	22ff      	movs	r2, #255	; 0xff
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	fffff7f7 	.word	0xfffff7f7

08007f8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e149      	b.n	800823e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fb fa62 	bl	8003488 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f94f 	bl	8008270 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d007      	beq.n	8007fea <HAL_SAI_Init+0x5e>
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d302      	bcc.n	8007fe4 <HAL_SAI_Init+0x58>
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d006      	beq.n	8007ff0 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007fe2:	e008      	b.n	8007ff6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
      break;
 8007fe8:	e005      	b.n	8007ff6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007fea:	2310      	movs	r3, #16
 8007fec:	61fb      	str	r3, [r7, #28]
      break;
 8007fee:	e002      	b.n	8007ff6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	61fb      	str	r3, [r7, #28]
      break;
 8007ff4:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d81d      	bhi.n	800803a <HAL_SAI_Init+0xae>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <HAL_SAI_Init+0x78>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008015 	.word	0x08008015
 8008008:	0800801b 	.word	0x0800801b
 800800c:	08008023 	.word	0x08008023
 8008010:	0800802b 	.word	0x0800802b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
      }
      break;
 8008018:	e010      	b.n	800803c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800801a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800801e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008020:	e00c      	b.n	800803c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008026:	617b      	str	r3, [r7, #20]
      }
      break;
 8008028:	e008      	b.n	800803c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800802a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800802e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008038:	e000      	b.n	800803c <HAL_SAI_Init+0xb0>
  default:
    break;
 800803a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a81      	ldr	r2, [pc, #516]	; (8008248 <HAL_SAI_Init+0x2bc>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_SAI_Init+0xc4>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a80      	ldr	r2, [pc, #512]	; (800824c <HAL_SAI_Init+0x2c0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d103      	bne.n	8008058 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008050:	4a7f      	ldr	r2, [pc, #508]	; (8008250 <HAL_SAI_Init+0x2c4>)
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e002      	b.n	800805e <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008058:	4a7e      	ldr	r2, [pc, #504]	; (8008254 <HAL_SAI_Init+0x2c8>)
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d043      	beq.n	80080ee <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a76      	ldr	r2, [pc, #472]	; (8008248 <HAL_SAI_Init+0x2bc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <HAL_SAI_Init+0xf2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a74      	ldr	r2, [pc, #464]	; (800824c <HAL_SAI_Init+0x2c0>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d104      	bne.n	8008088 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800807e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008082:	f7ff fa8d 	bl	80075a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008086:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a72      	ldr	r2, [pc, #456]	; (8008258 <HAL_SAI_Init+0x2cc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d004      	beq.n	800809c <HAL_SAI_Init+0x110>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a71      	ldr	r2, [pc, #452]	; (800825c <HAL_SAI_Init+0x2d0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d104      	bne.n	80080a6 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800809c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80080a0:	f7ff fa7e 	bl	80075a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80080a4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	025b      	lsls	r3, r3, #9
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4a67      	ldr	r2, [pc, #412]	; (8008260 <HAL_SAI_Init+0x2d4>)
 80080c2:	fba2 2303 	umull	r2, r3, r2, r3
 80080c6:	08da      	lsrs	r2, r3, #3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80080cc:	68f9      	ldr	r1, [r7, #12]
 80080ce:	4b64      	ldr	r3, [pc, #400]	; (8008260 <HAL_SAI_Init+0x2d4>)
 80080d0:	fba3 2301 	umull	r2, r3, r3, r1
 80080d4:	08da      	lsrs	r2, r3, #3
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	1aca      	subs	r2, r1, r3
 80080e0:	2a08      	cmp	r2, #8
 80080e2:	d904      	bls.n	80080ee <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <HAL_SAI_Init+0x172>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d109      	bne.n	8008112 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_SAI_Init+0x17e>
 8008106:	2300      	movs	r3, #0
 8008108:	e001      	b.n	800810e <HAL_SAI_Init+0x182>
 800810a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	e008      	b.n	8008124 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	2b01      	cmp	r3, #1
 8008118:	d102      	bne.n	8008120 <HAL_SAI_Init+0x194>
 800811a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811e:	e000      	b.n	8008122 <HAL_SAI_Init+0x196>
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b4d      	ldr	r3, [pc, #308]	; (8008264 <HAL_SAI_Init+0x2d8>)
 8008130:	400b      	ands	r3, r1
 8008132:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6819      	ldr	r1, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008142:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008148:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814e:	431a      	orrs	r2, r3
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800815c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008168:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	051b      	lsls	r3, r3, #20
 8008170:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6859      	ldr	r1, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4b38      	ldr	r3, [pc, #224]	; (8008268 <HAL_SAI_Init+0x2dc>)
 8008186:	400b      	ands	r3, r1
 8008188:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6859      	ldr	r1, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699a      	ldr	r2, [r3, #24]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6899      	ldr	r1, [r3, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4b2e      	ldr	r3, [pc, #184]	; (800826c <HAL_SAI_Init+0x2e0>)
 80081b4:	400b      	ands	r3, r1
 80081b6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6899      	ldr	r1, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80081c8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80081ce:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80081d4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	3b01      	subs	r3, #1
 80081dc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80081de:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	430a      	orrs	r2, r1
 80081e6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68d9      	ldr	r1, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	f24f 0320 	movw	r3, #61472	; 0xf020
 80081f6:	400b      	ands	r3, r1
 80081f8:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68d9      	ldr	r1, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	431a      	orrs	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008216:	3b01      	subs	r3, #1
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	40015804 	.word	0x40015804
 800824c:	40015824 	.word	0x40015824
 8008250:	40015800 	.word	0x40015800
 8008254:	40015c00 	.word	0x40015c00
 8008258:	40015c04 	.word	0x40015c04
 800825c:	40015c24 	.word	0x40015c24
 8008260:	cccccccd 	.word	0xcccccccd
 8008264:	ff05c010 	.word	0xff05c010
 8008268:	ffff1ff0 	.word	0xffff1ff0
 800826c:	fff88000 	.word	0xfff88000

08008270 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008270:	b490      	push	{r4, r7}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008278:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <SAI_Disable+0x64>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a16      	ldr	r2, [pc, #88]	; (80082d8 <SAI_Disable+0x68>)
 800827e:	fba2 2303 	umull	r2, r3, r2, r3
 8008282:	0b1b      	lsrs	r3, r3, #12
 8008284:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008298:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800829a:	4623      	mov	r3, r4
 800829c:	1e5c      	subs	r4, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	73fb      	strb	r3, [r7, #15]
      break;
 80082b6:	e006      	b.n	80082c6 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e9      	bne.n	800829a <SAI_Disable+0x2a>

  return status;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc90      	pop	{r4, r7}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000018 	.word	0x20000018
 80082d8:	95cbec1b 	.word	0x95cbec1b

080082dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e022      	b.n	8008334 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7fa fd31 	bl	8002d68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2203      	movs	r2, #3
 800830a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f814 	bl	800833c <HAL_SD_InitCard>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e00a      	b.n	8008334 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800833c:	b5b0      	push	{r4, r5, r7, lr}
 800833e:	b08e      	sub	sp, #56	; 0x38
 8008340:	af04      	add	r7, sp, #16
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008344:	2300      	movs	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800834c:	2300      	movs	r3, #0
 800834e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008354:	2300      	movs	r3, #0
 8008356:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008358:	2376      	movs	r3, #118	; 0x76
 800835a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681d      	ldr	r5, [r3, #0]
 8008360:	466c      	mov	r4, sp
 8008362:	f107 0314 	add.w	r3, r7, #20
 8008366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800836a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800836e:	f107 0308 	add.w	r3, r7, #8
 8008372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008374:	4628      	mov	r0, r5
 8008376:	f002 ff51 	bl	800b21c <SDMMC_Init>
 800837a:	4603      	mov	r3, r0
 800837c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e03b      	b.n	8008404 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800839a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f002 ff74 	bl	800b28e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083b4:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fde6 	bl	8008f88 <SD_PowerON>
 80083bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e013      	b.n	8008404 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fd05 	bl	8008dec <SD_InitCard>
 80083e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3728      	adds	r7, #40	; 0x28
 8008408:	46bd      	mov	sp, r7
 800840a:	bdb0      	pop	{r4, r5, r7, pc}

0800840c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	; 0x30
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d107      	bne.n	8008434 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e0cc      	b.n	80085ce <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b01      	cmp	r3, #1
 800843e:	f040 80c5 	bne.w	80085cc <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	441a      	add	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008452:	429a      	cmp	r2, r3
 8008454:	d907      	bls.n	8008466 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e0b3      	b.n	80085ce <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2203      	movs	r2, #3
 800846a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	4a53      	ldr	r2, [pc, #332]	; (80085d8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800848c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	4a52      	ldr	r2, [pc, #328]	; (80085dc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008494:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	2200      	movs	r2, #0
 800849c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3380      	adds	r3, #128	; 0x80
 80084a8:	4619      	mov	r1, r3
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	025b      	lsls	r3, r3, #9
 80084b0:	089b      	lsrs	r3, r3, #2
 80084b2:	f7fc fcb7 	bl	8004e24 <HAL_DMA_Start_IT>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d017      	beq.n	80084ec <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80084ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a43      	ldr	r2, [pc, #268]	; (80085e0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80084d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e070      	b.n	80085ce <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0208 	orr.w	r2, r2, #8
 80084fa:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008500:	2b01      	cmp	r3, #1
 8008502:	d002      	beq.n	800850a <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	025b      	lsls	r3, r3, #9
 8008508:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008512:	4618      	mov	r0, r3
 8008514:	f002 ff4e 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8008518:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00f      	beq.n	8008540 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a2e      	ldr	r2, [pc, #184]	; (80085e0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008526:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	431a      	orrs	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e046      	b.n	80085ce <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008540:	f04f 33ff 	mov.w	r3, #4294967295
 8008544:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	025b      	lsls	r3, r3, #9
 800854a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800854c:	2390      	movs	r3, #144	; 0x90
 800854e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008550:	2302      	movs	r3, #2
 8008552:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008554:	2300      	movs	r3, #0
 8008556:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008558:	2301      	movs	r3, #1
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f107 0210 	add.w	r2, r7, #16
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f002 fef8 	bl	800b35c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d90a      	bls.n	8008588 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2282      	movs	r2, #130	; 0x82
 8008576:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800857e:	4618      	mov	r0, r3
 8008580:	f002 ff5c 	bl	800b43c <SDMMC_CmdReadMultiBlock>
 8008584:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008586:	e009      	b.n	800859c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2281      	movs	r2, #129	; 0x81
 800858c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008594:	4618      	mov	r0, r3
 8008596:	f002 ff2f 	bl	800b3f8 <SDMMC_CmdReadSingleBlock>
 800859a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d012      	beq.n	80085c8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a0e      	ldr	r2, [pc, #56]	; (80085e0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	431a      	orrs	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e002      	b.n	80085ce <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e000      	b.n	80085ce <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80085cc:	2302      	movs	r3, #2
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3730      	adds	r7, #48	; 0x30
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	08008cd7 	.word	0x08008cd7
 80085dc:	08008d49 	.word	0x08008d49
 80085e0:	004005ff 	.word	0x004005ff

080085e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08c      	sub	sp, #48	; 0x30
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d107      	bne.n	800860c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e0cf      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	f040 80c8 	bne.w	80087aa <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	441a      	add	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862a:	429a      	cmp	r2, r3
 800862c:	d907      	bls.n	800863e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e0b6      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2203      	movs	r2, #3
 8008642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f042 021a 	orr.w	r2, r2, #26
 800865c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	4a54      	ldr	r2, [pc, #336]	; (80087b4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	4a53      	ldr	r2, [pc, #332]	; (80087b8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800866c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	2200      	movs	r2, #0
 8008674:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867a:	2b01      	cmp	r3, #1
 800867c:	d002      	beq.n	8008684 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	025b      	lsls	r3, r3, #9
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800868c:	4618      	mov	r0, r3
 800868e:	f002 fe91 	bl	800b3b4 <SDMMC_CmdBlockLength>
 8008692:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00f      	beq.n	80086ba <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a47      	ldr	r2, [pc, #284]	; (80087bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	431a      	orrs	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e078      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d90a      	bls.n	80086d6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	22a0      	movs	r2, #160	; 0xa0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086cc:	4618      	mov	r0, r3
 80086ce:	f002 fef9 	bl	800b4c4 <SDMMC_CmdWriteMultiBlock>
 80086d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80086d4:	e009      	b.n	80086ea <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2290      	movs	r2, #144	; 0x90
 80086da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086e2:	4618      	mov	r0, r3
 80086e4:	f002 fecc 	bl	800b480 <SDMMC_CmdWriteSingleBlock>
 80086e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d012      	beq.n	8008716 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a31      	ldr	r2, [pc, #196]	; (80087bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	431a      	orrs	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e04a      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 0208 	orr.w	r2, r2, #8
 8008724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3380      	adds	r3, #128	; 0x80
 8008732:	461a      	mov	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	025b      	lsls	r3, r3, #9
 8008738:	089b      	lsrs	r3, r3, #2
 800873a:	f7fc fb73 	bl	8004e24 <HAL_DMA_Start_IT>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01a      	beq.n	800877a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 021a 	bic.w	r2, r2, #26
 8008752:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a18      	ldr	r2, [pc, #96]	; (80087bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e018      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800877a:	f04f 33ff 	mov.w	r3, #4294967295
 800877e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	025b      	lsls	r3, r3, #9
 8008784:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008786:	2390      	movs	r3, #144	; 0x90
 8008788:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008792:	2301      	movs	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f107 0210 	add.w	r2, r7, #16
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 fddb 	bl	800b35c <SDMMC_ConfigData>

      return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e000      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80087aa:	2302      	movs	r3, #2
  }
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3730      	adds	r7, #48	; 0x30
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	08008cad 	.word	0x08008cad
 80087b8:	08008d49 	.word	0x08008d49
 80087bc:	004005ff 	.word	0x004005ff

080087c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e2:	0f9b      	lsrs	r3, r3, #30
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ee:	0e9b      	lsrs	r3, r3, #26
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008800:	0e1b      	lsrs	r3, r3, #24
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	b2da      	uxtb	r2, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008812:	0c1b      	lsrs	r3, r3, #16
 8008814:	b2da      	uxtb	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881e:	0a1b      	lsrs	r3, r3, #8
 8008820:	b2da      	uxtb	r2, r3
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882a:	b2da      	uxtb	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008834:	0d1b      	lsrs	r3, r3, #20
 8008836:	b29a      	uxth	r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	b2da      	uxtb	r2, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008852:	0bdb      	lsrs	r3, r3, #15
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008864:	0b9b      	lsrs	r3, r3, #14
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	b2da      	uxtb	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008876:	0b5b      	lsrs	r3, r3, #13
 8008878:	b2db      	uxtb	r3, r3
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008888:	0b1b      	lsrs	r3, r3, #12
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	b2da      	uxtb	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2200      	movs	r2, #0
 800889a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d163      	bne.n	800896c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088a8:	009a      	lsls	r2, r3, #2
 80088aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80088ae:	4013      	ands	r3, r2
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80088b4:	0f92      	lsrs	r2, r2, #30
 80088b6:	431a      	orrs	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c0:	0edb      	lsrs	r3, r3, #27
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d2:	0e1b      	lsrs	r3, r3, #24
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e4:	0d5b      	lsrs	r3, r3, #21
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f6:	0c9b      	lsrs	r3, r3, #18
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008908:	0bdb      	lsrs	r3, r3, #15
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	b2da      	uxtb	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	7e1b      	ldrb	r3, [r3, #24]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	3302      	adds	r3, #2
 800892c:	2201      	movs	r2, #1
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008936:	fb02 f203 	mul.w	r2, r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	7a1b      	ldrb	r3, [r3, #8]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	2201      	movs	r2, #1
 800894a:	409a      	lsls	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008958:	0a52      	lsrs	r2, r2, #9
 800895a:	fb02 f203 	mul.w	r2, r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008968:	661a      	str	r2, [r3, #96]	; 0x60
 800896a:	e031      	b.n	80089d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	2b01      	cmp	r3, #1
 8008972:	d11d      	bne.n	80089b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008982:	0c1b      	lsrs	r3, r3, #16
 8008984:	431a      	orrs	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	3301      	adds	r3, #1
 8008990:	029a      	lsls	r2, r3, #10
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	661a      	str	r2, [r3, #96]	; 0x60
 80089ae:	e00f      	b.n	80089d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a58      	ldr	r2, [pc, #352]	; (8008b18 <HAL_SD_GetCardCSD+0x344>)
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e09d      	b.n	8008b0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d4:	0b9b      	lsrs	r3, r3, #14
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e6:	09db      	lsrs	r3, r3, #7
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a08:	0fdb      	lsrs	r3, r3, #31
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a14:	0f5b      	lsrs	r3, r3, #29
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	0e9b      	lsrs	r3, r3, #26
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a38:	0d9b      	lsrs	r3, r3, #22
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4a:	0d5b      	lsrs	r3, r3, #21
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a66:	0c1b      	lsrs	r3, r3, #16
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7a:	0bdb      	lsrs	r3, r3, #15
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8e:	0b9b      	lsrs	r3, r3, #14
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa2:	0b5b      	lsrs	r3, r3, #13
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab6:	0b1b      	lsrs	r3, r3, #12
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aca:	0a9b      	lsrs	r3, r3, #10
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	0a1b      	lsrs	r3, r3, #8
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af2:	085b      	lsrs	r3, r3, #1
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	004005ff 	.word	0x004005ff

08008b1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b74:	b5b0      	push	{r4, r5, r7, lr}
 8008b76:	b08e      	sub	sp, #56	; 0x38
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2203      	movs	r2, #3
 8008b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d02e      	beq.n	8008bec <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b94:	d106      	bne.n	8008ba4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ba2:	e029      	b.n	8008bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008baa:	d10a      	bne.n	8008bc2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 faa1 	bl	80090f4 <SD_WideBus_Enable>
 8008bb2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8008bc0:	e01a      	b.n	8008bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fade 	bl	800918a <SD_WideBus_Disable>
 8008bce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38
 8008bdc:	e00c      	b.n	8008bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
 8008bea:	e005      	b.n	8008bf8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e024      	b.n	8008c5e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681d      	ldr	r5, [r3, #0]
 8008c3a:	466c      	mov	r4, sp
 8008c3c:	f107 0318 	add.w	r3, r7, #24
 8008c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f002 fae4 	bl	800b21c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3728      	adds	r7, #40	; 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bdb0      	pop	{r4, r5, r7, pc}
 8008c66:	bf00      	nop
 8008c68:	004005ff 	.word	0x004005ff

08008c6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c78:	f107 030c 	add.w	r3, r7, #12
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa10 	bl	80090a4 <SD_SendStatus>
 8008c84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	0a5b      	lsrs	r3, r3, #9
 8008c9c:	f003 030f 	and.w	r3, r3, #15
 8008ca0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ca2:	693b      	ldr	r3, [r7, #16]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	2b82      	cmp	r3, #130	; 0x82
 8008cea:	d111      	bne.n	8008d10 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 fc09 	bl	800b508 <SDMMC_CmdStopTransfer>
 8008cf6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d008      	beq.n	8008d10 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff fd58 	bl	80087c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0208 	bic.w	r2, r2, #8
 8008d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f003 f84f 	bl	800bddc <HAL_SD_RxCpltCallback>
#endif
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7fc f8c4 	bl	8004ee4 <HAL_DMA_GetError>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d03e      	beq.n	8008de0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d68:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d70:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d002      	beq.n	8008d7e <SD_DMAError+0x36>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d12d      	bne.n	8008dda <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a19      	ldr	r2, [pc, #100]	; (8008de8 <SD_DMAError+0xa0>)
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d94:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008da2:	6978      	ldr	r0, [r7, #20]
 8008da4:	f7ff ff62 	bl	8008c6c <HAL_SD_GetCardState>
 8008da8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b06      	cmp	r3, #6
 8008dae:	d002      	beq.n	8008db6 <SD_DMAError+0x6e>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b05      	cmp	r3, #5
 8008db4:	d10a      	bne.n	8008dcc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 fba4 	bl	800b508 <SDMMC_CmdStopTransfer>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008dda:	6978      	ldr	r0, [r7, #20]
 8008ddc:	f7ff fcf0 	bl	80087c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008de0:	bf00      	nop
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	004005ff 	.word	0x004005ff

08008dec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dec:	b5b0      	push	{r4, r5, r7, lr}
 8008dee:	b094      	sub	sp, #80	; 0x50
 8008df0:	af04      	add	r7, sp, #16
 8008df2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008df4:	2301      	movs	r3, #1
 8008df6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f002 fa55 	bl	800b2ac <SDMMC_GetPowerState>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d102      	bne.n	8008e0e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e0c:	e0b7      	b.n	8008f7e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d02f      	beq.n	8008e76 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f002 fc7f 	bl	800b71e <SDMMC_CmdSendCID>
 8008e20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <SD_InitCard+0x40>
    {
      return errorstate;
 8008e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2a:	e0a8      	b.n	8008f7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2100      	movs	r1, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f002 fa7f 	bl	800b336 <SDMMC_GetResponse>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2104      	movs	r1, #4
 8008e44:	4618      	mov	r0, r3
 8008e46:	f002 fa76 	bl	800b336 <SDMMC_GetResponse>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2108      	movs	r1, #8
 8008e56:	4618      	mov	r0, r3
 8008e58:	f002 fa6d 	bl	800b336 <SDMMC_GetResponse>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	210c      	movs	r1, #12
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f002 fa64 	bl	800b336 <SDMMC_GetResponse>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d00d      	beq.n	8008e9a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f107 020e 	add.w	r2, r7, #14
 8008e86:	4611      	mov	r1, r2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f002 fc85 	bl	800b798 <SDMMC_CmdSetRelAdd>
 8008e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <SD_InitCard+0xae>
    {
      return errorstate;
 8008e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e98:	e071      	b.n	8008f7e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d036      	beq.n	8008f10 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008ea2:	89fb      	ldrh	r3, [r7, #14]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb2:	041b      	lsls	r3, r3, #16
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f002 fc4f 	bl	800b75a <SDMMC_CmdSendCSD>
 8008ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec6:	e05a      	b.n	8008f7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f002 fa31 	bl	800b336 <SDMMC_GetResponse>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2104      	movs	r1, #4
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f002 fa28 	bl	800b336 <SDMMC_GetResponse>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2108      	movs	r1, #8
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f002 fa1f 	bl	800b336 <SDMMC_GetResponse>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	210c      	movs	r1, #12
 8008f04:	4618      	mov	r0, r3
 8008f06:	f002 fa16 	bl	800b336 <SDMMC_GetResponse>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2104      	movs	r1, #4
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 fa0d 	bl	800b336 <SDMMC_GetResponse>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	0d1a      	lsrs	r2, r3, #20
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f24:	f107 0310 	add.w	r3, r7, #16
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff fc52 	bl	80087d4 <HAL_SD_GetCardCSD>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f3a:	e020      	b.n	8008f7e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f44:	041b      	lsls	r3, r3, #16
 8008f46:	f04f 0400 	mov.w	r4, #0
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	4608      	mov	r0, r1
 8008f50:	f002 fafc 	bl	800b54c <SDMMC_CmdSelDesel>
 8008f54:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <SD_InitCard+0x174>
  {
    return errorstate;
 8008f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5e:	e00e      	b.n	8008f7e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681d      	ldr	r5, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	466c      	mov	r4, sp
 8008f68:	f103 0210 	add.w	r2, r3, #16
 8008f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f72:	3304      	adds	r3, #4
 8008f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f76:	4628      	mov	r0, r5
 8008f78:	f002 f950 	bl	800b21c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3740      	adds	r7, #64	; 0x40
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 faf6 	bl	800b592 <SDMMC_CmdGoIdleState>
 8008fa6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	e072      	b.n	8009098 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 fb09 	bl	800b5ce <SDMMC_CmdOperCond>
 8008fbc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00d      	beq.n	8008fe0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 fadf 	bl	800b592 <SDMMC_CmdGoIdleState>
 8008fd4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	e05b      	b.n	8009098 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d137      	bne.n	800905e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f002 fb09 	bl	800b60c <SDMMC_CmdAppCommand>
 8008ffa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d02d      	beq.n	800905e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009002:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009006:	e047      	b.n	8009098 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2100      	movs	r1, #0
 800900e:	4618      	mov	r0, r3
 8009010:	f002 fafc 	bl	800b60c <SDMMC_CmdAppCommand>
 8009014:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <SD_PowerON+0x98>
    {
      return errorstate;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	e03b      	b.n	8009098 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	491e      	ldr	r1, [pc, #120]	; (80090a0 <SD_PowerON+0x118>)
 8009026:	4618      	mov	r0, r3
 8009028:	f002 fb12 	bl	800b650 <SDMMC_CmdAppOperCommand>
 800902c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009034:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009038:	e02e      	b.n	8009098 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2100      	movs	r1, #0
 8009040:	4618      	mov	r0, r3
 8009042:	f002 f978 	bl	800b336 <SDMMC_GetResponse>
 8009046:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	0fdb      	lsrs	r3, r3, #31
 800904c:	2b01      	cmp	r3, #1
 800904e:	d101      	bne.n	8009054 <SD_PowerON+0xcc>
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <SD_PowerON+0xce>
 8009054:	2300      	movs	r3, #0
 8009056:	613b      	str	r3, [r7, #16]

    count++;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	3301      	adds	r3, #1
 800905c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009064:	4293      	cmp	r3, r2
 8009066:	d802      	bhi.n	800906e <SD_PowerON+0xe6>
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0cc      	beq.n	8009008 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009074:	4293      	cmp	r3, r2
 8009076:	d902      	bls.n	800907e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800907c:	e00c      	b.n	8009098 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	645a      	str	r2, [r3, #68]	; 0x44
 800908e:	e002      	b.n	8009096 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	c1100000 	.word	0xc1100000

080090a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80090b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090b8:	e018      	b.n	80090ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c2:	041b      	lsls	r3, r3, #16
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f002 fb87 	bl	800b7da <SDMMC_CmdSendStatus>
 80090cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	e009      	b.n	80090ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2100      	movs	r1, #0
 80090de:	4618      	mov	r0, r3
 80090e0:	f002 f929 	bl	800b336 <SDMMC_GetResponse>
 80090e4:	4602      	mov	r2, r0
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	2300      	movs	r3, #0
 8009102:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2100      	movs	r1, #0
 800910a:	4618      	mov	r0, r3
 800910c:	f002 f913 	bl	800b336 <SDMMC_GetResponse>
 8009110:	4603      	mov	r3, r0
 8009112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800911a:	d102      	bne.n	8009122 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800911c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009120:	e02f      	b.n	8009182 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f879 	bl	8009220 <SD_FindSCR>
 800912e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	e023      	b.n	8009182 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01c      	beq.n	800917e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914c:	041b      	lsls	r3, r3, #16
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f002 fa5b 	bl	800b60c <SDMMC_CmdAppCommand>
 8009156:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	e00f      	b.n	8009182 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2102      	movs	r1, #2
 8009168:	4618      	mov	r0, r3
 800916a:	f002 fa95 	bl	800b698 <SDMMC_CmdBusWidth>
 800916e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	e003      	b.n	8009182 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800917a:	2300      	movs	r3, #0
 800917c:	e001      	b.n	8009182 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800917e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	2300      	movs	r3, #0
 8009198:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f002 f8c8 	bl	800b336 <SDMMC_GetResponse>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b0:	d102      	bne.n	80091b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b6:	e02f      	b.n	8009218 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091b8:	f107 030c 	add.w	r3, r7, #12
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f82e 	bl	8009220 <SD_FindSCR>
 80091c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	e023      	b.n	8009218 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01c      	beq.n	8009214 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	4619      	mov	r1, r3
 80091e6:	4610      	mov	r0, r2
 80091e8:	f002 fa10 	bl	800b60c <SDMMC_CmdAppCommand>
 80091ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	e00f      	b.n	8009218 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f002 fa4a 	bl	800b698 <SDMMC_CmdBusWidth>
 8009204:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	e003      	b.n	8009218 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009210:	2300      	movs	r3, #0
 8009212:	e001      	b.n	8009218 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009214:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b08f      	sub	sp, #60	; 0x3c
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800922a:	f7fa fb4d 	bl	80038c8 <HAL_GetTick>
 800922e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009234:	2300      	movs	r3, #0
 8009236:	60bb      	str	r3, [r7, #8]
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2108      	movs	r1, #8
 8009246:	4618      	mov	r0, r3
 8009248:	f002 f8b4 	bl	800b3b4 <SDMMC_CmdBlockLength>
 800924c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	e0a9      	b.n	80093ac <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f002 f9d1 	bl	800b60c <SDMMC_CmdAppCommand>
 800926a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	e09a      	b.n	80093ac <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009276:	f04f 33ff 	mov.w	r3, #4294967295
 800927a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800927c:	2308      	movs	r3, #8
 800927e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009280:	2330      	movs	r3, #48	; 0x30
 8009282:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009284:	2302      	movs	r3, #2
 8009286:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009288:	2300      	movs	r3, #0
 800928a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800928c:	2301      	movs	r3, #1
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f107 0210 	add.w	r2, r7, #16
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f002 f85e 	bl	800b35c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f002 fa19 	bl	800b6dc <SDMMC_CmdSendSCR>
 80092aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d022      	beq.n	80092f8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	e07a      	b.n	80093ac <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00e      	beq.n	80092e2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6819      	ldr	r1, [r3, #0]
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	f107 0208 	add.w	r2, r7, #8
 80092d0:	18d4      	adds	r4, r2, r3
 80092d2:	4608      	mov	r0, r1
 80092d4:	f001 ffce 	bl	800b274 <SDMMC_ReadFIFO>
 80092d8:	4603      	mov	r3, r0
 80092da:	6023      	str	r3, [r4, #0]
      index++;
 80092dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092de:	3301      	adds	r3, #1
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092e2:	f7fa faf1 	bl	80038c8 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f0:	d102      	bne.n	80092f8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092f6:	e059      	b.n	80093ac <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092fe:	f240 432a 	movw	r3, #1066	; 0x42a
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0d6      	beq.n	80092b6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2208      	movs	r2, #8
 800931c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800931e:	2308      	movs	r3, #8
 8009320:	e044      	b.n	80093ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2202      	movs	r2, #2
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009338:	2302      	movs	r3, #2
 800933a:	e037      	b.n	80093ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2220      	movs	r2, #32
 8009350:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009352:	2320      	movs	r3, #32
 8009354:	e02a      	b.n	80093ac <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f240 523a 	movw	r2, #1338	; 0x53a
 800935e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	061a      	lsls	r2, r3, #24
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800936c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	0a1b      	lsrs	r3, r3, #8
 8009372:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009376:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	0e1b      	lsrs	r3, r3, #24
 800937c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	601a      	str	r2, [r3, #0]
    scr++;
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	3304      	adds	r3, #4
 8009386:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	061a      	lsls	r2, r3, #24
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009394:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	0a1b      	lsrs	r3, r3, #8
 800939a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800939e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	0e1b      	lsrs	r3, r3, #24
 80093a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	373c      	adds	r7, #60	; 0x3c
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd90      	pop	{r4, r7, pc}

080093b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e025      	b.n	8009414 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fa f849 	bl	8003474 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2202      	movs	r2, #2
 80093e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f001 fdeb 	bl	800afd0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	461a      	mov	r2, r3
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	f001 fe55 	bl	800b0b4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	d101      	bne.n	8009438 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009434:	2302      	movs	r3, #2
 8009436:	e018      	b.n	800946a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	4618      	mov	r0, r3
 800944a:	f001 feb3 	bl	800b1b4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b02      	cmp	r3, #2
 8009454:	d104      	bne.n	8009460 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2205      	movs	r2, #5
 800945a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800945e:	e003      	b.n	8009468 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d101      	bne.n	800948c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009488:	2302      	movs	r3, #2
 800948a:	e00e      	b.n	80094aa <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f001 feab 	bl	800b1f6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e04c      	b.n	8009560 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7f9 fca6 	bl	8002e2c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0203 	bic.w	r2, r2, #3
 80094f6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4b19      	ldr	r3, [pc, #100]	; (8009568 <HAL_SPDIFRX_Init+0xb4>)
 8009504:	4013      	ands	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009510:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009516:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800951c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009522:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009528:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800952e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009534:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800953a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009540:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	4313      	orrs	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	fff88407 	.word	0xfff88407

0800956c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e084      	b.n	8009688 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7f9 fc89 	bl	8002eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095be:	d902      	bls.n	80095c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	e002      	b.n	80095cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80095d4:	d007      	beq.n	80095e6 <HAL_SPI_Init+0x7a>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095de:	d002      	beq.n	80095e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10b      	bne.n	8009606 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095f6:	d903      	bls.n	8009600 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	631a      	str	r2, [r3, #48]	; 0x30
 80095fe:	e002      	b.n	8009606 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	431a      	orrs	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	ea42 0103 	orr.w	r1, r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	0c1b      	lsrs	r3, r3, #16
 8009646:	f003 0204 	and.w	r2, r3, #4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	ea42 0103 	orr.w	r1, r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	430a      	orrs	r2, r1
 8009666:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	69da      	ldr	r2, [r3, #28]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009676:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e01d      	b.n	80096de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d106      	bne.n	80096bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7f9 fc5c 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f000 fb78 	bl	8009dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689a      	ldr	r2, [r3, #8]
 8009706:	4b0c      	ldr	r3, [pc, #48]	; (8009738 <HAL_TIM_Base_Start_IT+0x50>)
 8009708:	4013      	ands	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b06      	cmp	r3, #6
 8009710:	d00b      	beq.n	800972a <HAL_TIM_Base_Start_IT+0x42>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009718:	d007      	beq.n	800972a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0201 	orr.w	r2, r2, #1
 8009728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	00010007 	.word	0x00010007

0800973c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e01d      	b.n	800978a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7f9 fc74 	bl	8003050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f000 fb22 	bl	8009dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d122      	bne.n	80097ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f003 0302 	and.w	r3, r3, #2
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d11b      	bne.n	80097ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f06f 0202 	mvn.w	r2, #2
 80097be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fad7 	bl	8009d88 <HAL_TIM_IC_CaptureCallback>
 80097da:	e005      	b.n	80097e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fac9 	bl	8009d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fada 	bl	8009d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d122      	bne.n	8009842 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f003 0304 	and.w	r3, r3, #4
 8009806:	2b04      	cmp	r3, #4
 8009808:	d11b      	bne.n	8009842 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f06f 0204 	mvn.w	r2, #4
 8009812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 faad 	bl	8009d88 <HAL_TIM_IC_CaptureCallback>
 800982e:	e005      	b.n	800983c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fa9f 	bl	8009d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fab0 	bl	8009d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	f003 0308 	and.w	r3, r3, #8
 800984c:	2b08      	cmp	r3, #8
 800984e:	d122      	bne.n	8009896 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f003 0308 	and.w	r3, r3, #8
 800985a:	2b08      	cmp	r3, #8
 800985c:	d11b      	bne.n	8009896 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f06f 0208 	mvn.w	r2, #8
 8009866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2204      	movs	r2, #4
 800986c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fa83 	bl	8009d88 <HAL_TIM_IC_CaptureCallback>
 8009882:	e005      	b.n	8009890 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fa75 	bl	8009d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa86 	bl	8009d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f003 0310 	and.w	r3, r3, #16
 80098a0:	2b10      	cmp	r3, #16
 80098a2:	d122      	bne.n	80098ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f003 0310 	and.w	r3, r3, #16
 80098ae:	2b10      	cmp	r3, #16
 80098b0:	d11b      	bne.n	80098ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f06f 0210 	mvn.w	r2, #16
 80098ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2208      	movs	r2, #8
 80098c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fa59 	bl	8009d88 <HAL_TIM_IC_CaptureCallback>
 80098d6:	e005      	b.n	80098e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fa4b 	bl	8009d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fa5c 	bl	8009d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d10e      	bne.n	8009916 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b01      	cmp	r3, #1
 8009904:	d107      	bne.n	8009916 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f06f 0201 	mvn.w	r2, #1
 800990e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7f8 feb1 	bl	8002678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009920:	2b80      	cmp	r3, #128	; 0x80
 8009922:	d10e      	bne.n	8009942 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992e:	2b80      	cmp	r3, #128	; 0x80
 8009930:	d107      	bne.n	8009942 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800993a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 feef 	bl	800a720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009950:	d10e      	bne.n	8009970 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995c:	2b80      	cmp	r3, #128	; 0x80
 800995e:	d107      	bne.n	8009970 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fee2 	bl	800a734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d10e      	bne.n	800999c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	2b40      	cmp	r3, #64	; 0x40
 800998a:	d107      	bne.n	800999c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fa0a 	bl	8009db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d10e      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d107      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f06f 0220 	mvn.w	r2, #32
 80099c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fea2 	bl	800a70c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e105      	b.n	8009bf6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2202      	movs	r2, #2
 80099f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b14      	cmp	r3, #20
 80099fe:	f200 80f0 	bhi.w	8009be2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a5d 	.word	0x08009a5d
 8009a0c:	08009be3 	.word	0x08009be3
 8009a10:	08009be3 	.word	0x08009be3
 8009a14:	08009be3 	.word	0x08009be3
 8009a18:	08009a9d 	.word	0x08009a9d
 8009a1c:	08009be3 	.word	0x08009be3
 8009a20:	08009be3 	.word	0x08009be3
 8009a24:	08009be3 	.word	0x08009be3
 8009a28:	08009adf 	.word	0x08009adf
 8009a2c:	08009be3 	.word	0x08009be3
 8009a30:	08009be3 	.word	0x08009be3
 8009a34:	08009be3 	.word	0x08009be3
 8009a38:	08009b1f 	.word	0x08009b1f
 8009a3c:	08009be3 	.word	0x08009be3
 8009a40:	08009be3 	.word	0x08009be3
 8009a44:	08009be3 	.word	0x08009be3
 8009a48:	08009b61 	.word	0x08009b61
 8009a4c:	08009be3 	.word	0x08009be3
 8009a50:	08009be3 	.word	0x08009be3
 8009a54:	08009be3 	.word	0x08009be3
 8009a58:	08009ba1 	.word	0x08009ba1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fa4e 	bl	8009f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	699a      	ldr	r2, [r3, #24]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f042 0208 	orr.w	r2, r2, #8
 8009a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	699a      	ldr	r2, [r3, #24]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f022 0204 	bic.w	r2, r2, #4
 8009a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6999      	ldr	r1, [r3, #24]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	691a      	ldr	r2, [r3, #16]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	619a      	str	r2, [r3, #24]
      break;
 8009a9a:	e0a3      	b.n	8009be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68b9      	ldr	r1, [r7, #8]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 faa0 	bl	8009fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	699a      	ldr	r2, [r3, #24]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6999      	ldr	r1, [r3, #24]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	021a      	lsls	r2, r3, #8
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	619a      	str	r2, [r3, #24]
      break;
 8009adc:	e082      	b.n	8009be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 faf7 	bl	800a0d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69da      	ldr	r2, [r3, #28]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f042 0208 	orr.w	r2, r2, #8
 8009af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69da      	ldr	r2, [r3, #28]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0204 	bic.w	r2, r2, #4
 8009b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69d9      	ldr	r1, [r3, #28]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	61da      	str	r2, [r3, #28]
      break;
 8009b1c:	e062      	b.n	8009be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fb4d 	bl	800a1c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69da      	ldr	r2, [r3, #28]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69d9      	ldr	r1, [r3, #28]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	021a      	lsls	r2, r3, #8
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	61da      	str	r2, [r3, #28]
      break;
 8009b5e:	e041      	b.n	8009be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fb84 	bl	800a274 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0208 	orr.w	r2, r2, #8
 8009b7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0204 	bic.w	r2, r2, #4
 8009b8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b9e:	e021      	b.n	8009be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fbb6 	bl	800a318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	021a      	lsls	r2, r3, #8
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009be0:	e000      	b.n	8009be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009be2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop

08009c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_TIM_ConfigClockSource+0x18>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e0a6      	b.n	8009d66 <HAL_TIM_ConfigClockSource+0x166>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4b4f      	ldr	r3, [pc, #316]	; (8009d70 <HAL_TIM_ConfigClockSource+0x170>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b40      	cmp	r3, #64	; 0x40
 8009c4e:	d067      	beq.n	8009d20 <HAL_TIM_ConfigClockSource+0x120>
 8009c50:	2b40      	cmp	r3, #64	; 0x40
 8009c52:	d80b      	bhi.n	8009c6c <HAL_TIM_ConfigClockSource+0x6c>
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d073      	beq.n	8009d40 <HAL_TIM_ConfigClockSource+0x140>
 8009c58:	2b10      	cmp	r3, #16
 8009c5a:	d802      	bhi.n	8009c62 <HAL_TIM_ConfigClockSource+0x62>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d06f      	beq.n	8009d40 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c60:	e078      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	d06c      	beq.n	8009d40 <HAL_TIM_ConfigClockSource+0x140>
 8009c66:	2b30      	cmp	r3, #48	; 0x30
 8009c68:	d06a      	beq.n	8009d40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009c6a:	e073      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c6c:	2b70      	cmp	r3, #112	; 0x70
 8009c6e:	d00d      	beq.n	8009c8c <HAL_TIM_ConfigClockSource+0x8c>
 8009c70:	2b70      	cmp	r3, #112	; 0x70
 8009c72:	d804      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x7e>
 8009c74:	2b50      	cmp	r3, #80	; 0x50
 8009c76:	d033      	beq.n	8009ce0 <HAL_TIM_ConfigClockSource+0xe0>
 8009c78:	2b60      	cmp	r3, #96	; 0x60
 8009c7a:	d041      	beq.n	8009d00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009c7c:	e06a      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c82:	d066      	beq.n	8009d52 <HAL_TIM_ConfigClockSource+0x152>
 8009c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c88:	d017      	beq.n	8009cba <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009c8a:	e063      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	6899      	ldr	r1, [r3, #8]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f000 fc0a 	bl	800a4b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	609a      	str	r2, [r3, #8]
      break;
 8009cb8:	e04c      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	6899      	ldr	r1, [r3, #8]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f000 fbf3 	bl	800a4b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cdc:	609a      	str	r2, [r3, #8]
      break;
 8009cde:	e039      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	6859      	ldr	r1, [r3, #4]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	461a      	mov	r2, r3
 8009cee:	f000 fb67 	bl	800a3c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2150      	movs	r1, #80	; 0x50
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fbc0 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009cfe:	e029      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	6859      	ldr	r1, [r3, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f000 fb86 	bl	800a41e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2160      	movs	r1, #96	; 0x60
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 fbb0 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009d1e:	e019      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	6859      	ldr	r1, [r3, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f000 fb47 	bl	800a3c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2140      	movs	r1, #64	; 0x40
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fba0 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009d3e:	e009      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f000 fb97 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009d50:	e000      	b.n	8009d54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	fffeff88 	.word	0xfffeff88

08009d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a40      	ldr	r2, [pc, #256]	; (8009ed8 <TIM_Base_SetConfig+0x114>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d013      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de2:	d00f      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a3d      	ldr	r2, [pc, #244]	; (8009edc <TIM_Base_SetConfig+0x118>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d00b      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a3c      	ldr	r2, [pc, #240]	; (8009ee0 <TIM_Base_SetConfig+0x11c>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d007      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a3b      	ldr	r2, [pc, #236]	; (8009ee4 <TIM_Base_SetConfig+0x120>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a3a      	ldr	r2, [pc, #232]	; (8009ee8 <TIM_Base_SetConfig+0x124>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d108      	bne.n	8009e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a2f      	ldr	r2, [pc, #188]	; (8009ed8 <TIM_Base_SetConfig+0x114>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d02b      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e24:	d027      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a2c      	ldr	r2, [pc, #176]	; (8009edc <TIM_Base_SetConfig+0x118>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d023      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a2b      	ldr	r2, [pc, #172]	; (8009ee0 <TIM_Base_SetConfig+0x11c>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d01f      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a2a      	ldr	r2, [pc, #168]	; (8009ee4 <TIM_Base_SetConfig+0x120>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d01b      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a29      	ldr	r2, [pc, #164]	; (8009ee8 <TIM_Base_SetConfig+0x124>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d017      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a28      	ldr	r2, [pc, #160]	; (8009eec <TIM_Base_SetConfig+0x128>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d013      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a27      	ldr	r2, [pc, #156]	; (8009ef0 <TIM_Base_SetConfig+0x12c>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00f      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a26      	ldr	r2, [pc, #152]	; (8009ef4 <TIM_Base_SetConfig+0x130>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00b      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a25      	ldr	r2, [pc, #148]	; (8009ef8 <TIM_Base_SetConfig+0x134>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d007      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a24      	ldr	r2, [pc, #144]	; (8009efc <TIM_Base_SetConfig+0x138>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d003      	beq.n	8009e76 <TIM_Base_SetConfig+0xb2>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a23      	ldr	r2, [pc, #140]	; (8009f00 <TIM_Base_SetConfig+0x13c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d108      	bne.n	8009e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a0a      	ldr	r2, [pc, #40]	; (8009ed8 <TIM_Base_SetConfig+0x114>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_Base_SetConfig+0xf8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a0c      	ldr	r2, [pc, #48]	; (8009ee8 <TIM_Base_SetConfig+0x124>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d103      	bne.n	8009ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	615a      	str	r2, [r3, #20]
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	40000c00 	.word	0x40000c00
 8009ee8:	40010400 	.word	0x40010400
 8009eec:	40014000 	.word	0x40014000
 8009ef0:	40014400 	.word	0x40014400
 8009ef4:	40014800 	.word	0x40014800
 8009ef8:	40001800 	.word	0x40001800
 8009efc:	40001c00 	.word	0x40001c00
 8009f00:	40002000 	.word	0x40002000

08009f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f023 0201 	bic.w	r2, r3, #1
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4b2b      	ldr	r3, [pc, #172]	; (8009fdc <TIM_OC1_SetConfig+0xd8>)
 8009f30:	4013      	ands	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 0303 	bic.w	r3, r3, #3
 8009f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f023 0302 	bic.w	r3, r3, #2
 8009f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a21      	ldr	r2, [pc, #132]	; (8009fe0 <TIM_OC1_SetConfig+0xdc>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_OC1_SetConfig+0x64>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a20      	ldr	r2, [pc, #128]	; (8009fe4 <TIM_OC1_SetConfig+0xe0>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d10c      	bne.n	8009f82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f023 0308 	bic.w	r3, r3, #8
 8009f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f023 0304 	bic.w	r3, r3, #4
 8009f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <TIM_OC1_SetConfig+0xdc>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d003      	beq.n	8009f92 <TIM_OC1_SetConfig+0x8e>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <TIM_OC1_SetConfig+0xe0>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d111      	bne.n	8009fb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	621a      	str	r2, [r3, #32]
}
 8009fd0:	bf00      	nop
 8009fd2:	371c      	adds	r7, #28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	fffeff8f 	.word	0xfffeff8f
 8009fe0:	40010000 	.word	0x40010000
 8009fe4:	40010400 	.word	0x40010400

08009fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f023 0210 	bic.w	r2, r3, #16
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4b2e      	ldr	r3, [pc, #184]	; (800a0cc <TIM_OC2_SetConfig+0xe4>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	f023 0320 	bic.w	r3, r3, #32
 800a032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	011b      	lsls	r3, r3, #4
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a23      	ldr	r2, [pc, #140]	; (800a0d0 <TIM_OC2_SetConfig+0xe8>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d003      	beq.n	800a050 <TIM_OC2_SetConfig+0x68>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a22      	ldr	r2, [pc, #136]	; (800a0d4 <TIM_OC2_SetConfig+0xec>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10d      	bne.n	800a06c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a06a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a18      	ldr	r2, [pc, #96]	; (800a0d0 <TIM_OC2_SetConfig+0xe8>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d003      	beq.n	800a07c <TIM_OC2_SetConfig+0x94>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a17      	ldr	r2, [pc, #92]	; (800a0d4 <TIM_OC2_SetConfig+0xec>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d113      	bne.n	800a0a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a08a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	621a      	str	r2, [r3, #32]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	feff8fff 	.word	0xfeff8fff
 800a0d0:	40010000 	.word	0x40010000
 800a0d4:	40010400 	.word	0x40010400

0800a0d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4b2d      	ldr	r3, [pc, #180]	; (800a1b8 <TIM_OC3_SetConfig+0xe0>)
 800a104:	4013      	ands	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f023 0303 	bic.w	r3, r3, #3
 800a10e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a22      	ldr	r2, [pc, #136]	; (800a1bc <TIM_OC3_SetConfig+0xe4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d003      	beq.n	800a13e <TIM_OC3_SetConfig+0x66>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a21      	ldr	r2, [pc, #132]	; (800a1c0 <TIM_OC3_SetConfig+0xe8>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d10d      	bne.n	800a15a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a144:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	021b      	lsls	r3, r3, #8
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a17      	ldr	r2, [pc, #92]	; (800a1bc <TIM_OC3_SetConfig+0xe4>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d003      	beq.n	800a16a <TIM_OC3_SetConfig+0x92>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a16      	ldr	r2, [pc, #88]	; (800a1c0 <TIM_OC3_SetConfig+0xe8>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d113      	bne.n	800a192 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4313      	orrs	r3, r2
 800a184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	011b      	lsls	r3, r3, #4
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	621a      	str	r2, [r3, #32]
}
 800a1ac:	bf00      	nop
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	fffeff8f 	.word	0xfffeff8f
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40010400 	.word	0x40010400

0800a1c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4b1e      	ldr	r3, [pc, #120]	; (800a268 <TIM_OC4_SetConfig+0xa4>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	021b      	lsls	r3, r3, #8
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a20e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	031b      	lsls	r3, r3, #12
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	4313      	orrs	r3, r2
 800a21a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a13      	ldr	r2, [pc, #76]	; (800a26c <TIM_OC4_SetConfig+0xa8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d003      	beq.n	800a22c <TIM_OC4_SetConfig+0x68>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a12      	ldr	r2, [pc, #72]	; (800a270 <TIM_OC4_SetConfig+0xac>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d109      	bne.n	800a240 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	019b      	lsls	r3, r3, #6
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	621a      	str	r2, [r3, #32]
}
 800a25a:	bf00      	nop
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	feff8fff 	.word	0xfeff8fff
 800a26c:	40010000 	.word	0x40010000
 800a270:	40010400 	.word	0x40010400

0800a274 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	4b1b      	ldr	r3, [pc, #108]	; (800a30c <TIM_OC5_SetConfig+0x98>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	041b      	lsls	r3, r3, #16
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a12      	ldr	r2, [pc, #72]	; (800a310 <TIM_OC5_SetConfig+0x9c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d003      	beq.n	800a2d2 <TIM_OC5_SetConfig+0x5e>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a11      	ldr	r2, [pc, #68]	; (800a314 <TIM_OC5_SetConfig+0xa0>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d109      	bne.n	800a2e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	021b      	lsls	r3, r3, #8
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	621a      	str	r2, [r3, #32]
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	fffeff8f 	.word	0xfffeff8f
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400

0800a318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4b1c      	ldr	r3, [pc, #112]	; (800a3b4 <TIM_OC6_SetConfig+0x9c>)
 800a344:	4013      	ands	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	021b      	lsls	r3, r3, #8
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4313      	orrs	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a35a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	051b      	lsls	r3, r3, #20
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4313      	orrs	r3, r2
 800a366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a13      	ldr	r2, [pc, #76]	; (800a3b8 <TIM_OC6_SetConfig+0xa0>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d003      	beq.n	800a378 <TIM_OC6_SetConfig+0x60>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a12      	ldr	r2, [pc, #72]	; (800a3bc <TIM_OC6_SetConfig+0xa4>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d109      	bne.n	800a38c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a37e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	695b      	ldr	r3, [r3, #20]
 800a384:	029b      	lsls	r3, r3, #10
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	4313      	orrs	r3, r2
 800a38a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	621a      	str	r2, [r3, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	feff8fff 	.word	0xfeff8fff
 800a3b8:	40010000 	.word	0x40010000
 800a3bc:	40010400 	.word	0x40010400

0800a3c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	f023 0201 	bic.w	r2, r3, #1
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f023 030a 	bic.w	r3, r3, #10
 800a3fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4313      	orrs	r3, r2
 800a404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	621a      	str	r2, [r3, #32]
}
 800a412:	bf00      	nop
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a41e:	b480      	push	{r7}
 800a420:	b087      	sub	sp, #28
 800a422:	af00      	add	r7, sp, #0
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f023 0210 	bic.w	r2, r3, #16
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	031b      	lsls	r3, r3, #12
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	4313      	orrs	r3, r2
 800a452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a45a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	621a      	str	r2, [r3, #32]
}
 800a472:	bf00      	nop
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f043 0307 	orr.w	r3, r3, #7
 800a4a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	609a      	str	r2, [r3, #8]
}
 800a4a8:	bf00      	nop
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	021a      	lsls	r2, r3, #8
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	609a      	str	r2, [r3, #8]
}
 800a4e8:	bf00      	nop
 800a4ea:	371c      	adds	r7, #28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a504:	2b01      	cmp	r3, #1
 800a506:	d101      	bne.n	800a50c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a508:	2302      	movs	r3, #2
 800a50a:	e06d      	b.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a30      	ldr	r2, [pc, #192]	; (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d004      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a2f      	ldr	r2, [pc, #188]	; (800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d108      	bne.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a546:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a558:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4313      	orrs	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a20      	ldr	r2, [pc, #128]	; (800a5f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d022      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a57e:	d01d      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a1d      	ldr	r2, [pc, #116]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d018      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1c      	ldr	r2, [pc, #112]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d013      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00e      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d009      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a16      	ldr	r2, [pc, #88]	; (800a608 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d004      	beq.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a15      	ldr	r2, [pc, #84]	; (800a60c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d10c      	bne.n	800a5d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	40010000 	.word	0x40010000
 800a5f8:	40010400 	.word	0x40010400
 800a5fc:	40000400 	.word	0x40000400
 800a600:	40000800 	.word	0x40000800
 800a604:	40000c00 	.word	0x40000c00
 800a608:	40014000 	.word	0x40014000
 800a60c:	40001800 	.word	0x40001800

0800a610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a628:	2302      	movs	r3, #2
 800a62a:	e065      	b.n	800a6f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a692:	4313      	orrs	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	041b      	lsls	r3, r3, #16
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a16      	ldr	r2, [pc, #88]	; (800a704 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d004      	beq.n	800a6ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a14      	ldr	r2, [pc, #80]	; (800a708 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d115      	bne.n	800a6e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	051b      	lsls	r3, r3, #20
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	40010000 	.word	0x40010000
 800a708:	40010400 	.word	0x40010400

0800a70c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e040      	b.n	800a7dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7f8 fd5e 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2224      	movs	r2, #36	; 0x24
 800a774:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f022 0201 	bic.w	r2, r2, #1
 800a784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f82c 	bl	800a7e4 <UART_SetConfig>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e022      	b.n	800a7dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 faca 	bl	800ad38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f042 0201 	orr.w	r2, r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fb51 	bl	800ae7c <UART_CheckIdleState>
 800a7da:	4603      	mov	r3, r0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	431a      	orrs	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	4313      	orrs	r3, r2
 800a80a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	4bb1      	ldr	r3, [pc, #708]	; (800aad8 <UART_SetConfig+0x2f4>)
 800a814:	4013      	ands	r3, r2
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	6939      	ldr	r1, [r7, #16]
 800a81c:	430b      	orrs	r3, r1
 800a81e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4313      	orrs	r3, r2
 800a844:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	430a      	orrs	r2, r1
 800a858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a9f      	ldr	r2, [pc, #636]	; (800aadc <UART_SetConfig+0x2f8>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d121      	bne.n	800a8a8 <UART_SetConfig+0xc4>
 800a864:	4b9e      	ldr	r3, [pc, #632]	; (800aae0 <UART_SetConfig+0x2fc>)
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d816      	bhi.n	800a8a0 <UART_SetConfig+0xbc>
 800a872:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <UART_SetConfig+0x94>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a889 	.word	0x0800a889
 800a87c:	0800a895 	.word	0x0800a895
 800a880:	0800a88f 	.word	0x0800a88f
 800a884:	0800a89b 	.word	0x0800a89b
 800a888:	2301      	movs	r3, #1
 800a88a:	77fb      	strb	r3, [r7, #31]
 800a88c:	e151      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a88e:	2302      	movs	r3, #2
 800a890:	77fb      	strb	r3, [r7, #31]
 800a892:	e14e      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a894:	2304      	movs	r3, #4
 800a896:	77fb      	strb	r3, [r7, #31]
 800a898:	e14b      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a89a:	2308      	movs	r3, #8
 800a89c:	77fb      	strb	r3, [r7, #31]
 800a89e:	e148      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a8a0:	2310      	movs	r3, #16
 800a8a2:	77fb      	strb	r3, [r7, #31]
 800a8a4:	bf00      	nop
 800a8a6:	e144      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a8d      	ldr	r2, [pc, #564]	; (800aae4 <UART_SetConfig+0x300>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d134      	bne.n	800a91c <UART_SetConfig+0x138>
 800a8b2:	4b8b      	ldr	r3, [pc, #556]	; (800aae0 <UART_SetConfig+0x2fc>)
 800a8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b8:	f003 030c 	and.w	r3, r3, #12
 800a8bc:	2b0c      	cmp	r3, #12
 800a8be:	d829      	bhi.n	800a914 <UART_SetConfig+0x130>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <UART_SetConfig+0xe4>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a8fd 	.word	0x0800a8fd
 800a8cc:	0800a915 	.word	0x0800a915
 800a8d0:	0800a915 	.word	0x0800a915
 800a8d4:	0800a915 	.word	0x0800a915
 800a8d8:	0800a909 	.word	0x0800a909
 800a8dc:	0800a915 	.word	0x0800a915
 800a8e0:	0800a915 	.word	0x0800a915
 800a8e4:	0800a915 	.word	0x0800a915
 800a8e8:	0800a903 	.word	0x0800a903
 800a8ec:	0800a915 	.word	0x0800a915
 800a8f0:	0800a915 	.word	0x0800a915
 800a8f4:	0800a915 	.word	0x0800a915
 800a8f8:	0800a90f 	.word	0x0800a90f
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	e117      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a902:	2302      	movs	r3, #2
 800a904:	77fb      	strb	r3, [r7, #31]
 800a906:	e114      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a908:	2304      	movs	r3, #4
 800a90a:	77fb      	strb	r3, [r7, #31]
 800a90c:	e111      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a90e:	2308      	movs	r3, #8
 800a910:	77fb      	strb	r3, [r7, #31]
 800a912:	e10e      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a914:	2310      	movs	r3, #16
 800a916:	77fb      	strb	r3, [r7, #31]
 800a918:	bf00      	nop
 800a91a:	e10a      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a71      	ldr	r2, [pc, #452]	; (800aae8 <UART_SetConfig+0x304>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d120      	bne.n	800a968 <UART_SetConfig+0x184>
 800a926:	4b6e      	ldr	r3, [pc, #440]	; (800aae0 <UART_SetConfig+0x2fc>)
 800a928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a92c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a930:	2b10      	cmp	r3, #16
 800a932:	d00f      	beq.n	800a954 <UART_SetConfig+0x170>
 800a934:	2b10      	cmp	r3, #16
 800a936:	d802      	bhi.n	800a93e <UART_SetConfig+0x15a>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d005      	beq.n	800a948 <UART_SetConfig+0x164>
 800a93c:	e010      	b.n	800a960 <UART_SetConfig+0x17c>
 800a93e:	2b20      	cmp	r3, #32
 800a940:	d005      	beq.n	800a94e <UART_SetConfig+0x16a>
 800a942:	2b30      	cmp	r3, #48	; 0x30
 800a944:	d009      	beq.n	800a95a <UART_SetConfig+0x176>
 800a946:	e00b      	b.n	800a960 <UART_SetConfig+0x17c>
 800a948:	2300      	movs	r3, #0
 800a94a:	77fb      	strb	r3, [r7, #31]
 800a94c:	e0f1      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a94e:	2302      	movs	r3, #2
 800a950:	77fb      	strb	r3, [r7, #31]
 800a952:	e0ee      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a954:	2304      	movs	r3, #4
 800a956:	77fb      	strb	r3, [r7, #31]
 800a958:	e0eb      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a95a:	2308      	movs	r3, #8
 800a95c:	77fb      	strb	r3, [r7, #31]
 800a95e:	e0e8      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a960:	2310      	movs	r3, #16
 800a962:	77fb      	strb	r3, [r7, #31]
 800a964:	bf00      	nop
 800a966:	e0e4      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a5f      	ldr	r2, [pc, #380]	; (800aaec <UART_SetConfig+0x308>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d120      	bne.n	800a9b4 <UART_SetConfig+0x1d0>
 800a972:	4b5b      	ldr	r3, [pc, #364]	; (800aae0 <UART_SetConfig+0x2fc>)
 800a974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a978:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a97c:	2b40      	cmp	r3, #64	; 0x40
 800a97e:	d00f      	beq.n	800a9a0 <UART_SetConfig+0x1bc>
 800a980:	2b40      	cmp	r3, #64	; 0x40
 800a982:	d802      	bhi.n	800a98a <UART_SetConfig+0x1a6>
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <UART_SetConfig+0x1b0>
 800a988:	e010      	b.n	800a9ac <UART_SetConfig+0x1c8>
 800a98a:	2b80      	cmp	r3, #128	; 0x80
 800a98c:	d005      	beq.n	800a99a <UART_SetConfig+0x1b6>
 800a98e:	2bc0      	cmp	r3, #192	; 0xc0
 800a990:	d009      	beq.n	800a9a6 <UART_SetConfig+0x1c2>
 800a992:	e00b      	b.n	800a9ac <UART_SetConfig+0x1c8>
 800a994:	2300      	movs	r3, #0
 800a996:	77fb      	strb	r3, [r7, #31]
 800a998:	e0cb      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a99a:	2302      	movs	r3, #2
 800a99c:	77fb      	strb	r3, [r7, #31]
 800a99e:	e0c8      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	77fb      	strb	r3, [r7, #31]
 800a9a4:	e0c5      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a9a6:	2308      	movs	r3, #8
 800a9a8:	77fb      	strb	r3, [r7, #31]
 800a9aa:	e0c2      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a9ac:	2310      	movs	r3, #16
 800a9ae:	77fb      	strb	r3, [r7, #31]
 800a9b0:	bf00      	nop
 800a9b2:	e0be      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a4d      	ldr	r2, [pc, #308]	; (800aaf0 <UART_SetConfig+0x30c>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d124      	bne.n	800aa08 <UART_SetConfig+0x224>
 800a9be:	4b48      	ldr	r3, [pc, #288]	; (800aae0 <UART_SetConfig+0x2fc>)
 800a9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9cc:	d012      	beq.n	800a9f4 <UART_SetConfig+0x210>
 800a9ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9d2:	d802      	bhi.n	800a9da <UART_SetConfig+0x1f6>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d007      	beq.n	800a9e8 <UART_SetConfig+0x204>
 800a9d8:	e012      	b.n	800aa00 <UART_SetConfig+0x21c>
 800a9da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9de:	d006      	beq.n	800a9ee <UART_SetConfig+0x20a>
 800a9e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9e4:	d009      	beq.n	800a9fa <UART_SetConfig+0x216>
 800a9e6:	e00b      	b.n	800aa00 <UART_SetConfig+0x21c>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	77fb      	strb	r3, [r7, #31]
 800a9ec:	e0a1      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	77fb      	strb	r3, [r7, #31]
 800a9f2:	e09e      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a9f4:	2304      	movs	r3, #4
 800a9f6:	77fb      	strb	r3, [r7, #31]
 800a9f8:	e09b      	b.n	800ab32 <UART_SetConfig+0x34e>
 800a9fa:	2308      	movs	r3, #8
 800a9fc:	77fb      	strb	r3, [r7, #31]
 800a9fe:	e098      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa00:	2310      	movs	r3, #16
 800aa02:	77fb      	strb	r3, [r7, #31]
 800aa04:	bf00      	nop
 800aa06:	e094      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a39      	ldr	r2, [pc, #228]	; (800aaf4 <UART_SetConfig+0x310>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d124      	bne.n	800aa5c <UART_SetConfig+0x278>
 800aa12:	4b33      	ldr	r3, [pc, #204]	; (800aae0 <UART_SetConfig+0x2fc>)
 800aa14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa20:	d012      	beq.n	800aa48 <UART_SetConfig+0x264>
 800aa22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa26:	d802      	bhi.n	800aa2e <UART_SetConfig+0x24a>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d007      	beq.n	800aa3c <UART_SetConfig+0x258>
 800aa2c:	e012      	b.n	800aa54 <UART_SetConfig+0x270>
 800aa2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa32:	d006      	beq.n	800aa42 <UART_SetConfig+0x25e>
 800aa34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa38:	d009      	beq.n	800aa4e <UART_SetConfig+0x26a>
 800aa3a:	e00b      	b.n	800aa54 <UART_SetConfig+0x270>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	e077      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa42:	2302      	movs	r3, #2
 800aa44:	77fb      	strb	r3, [r7, #31]
 800aa46:	e074      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa48:	2304      	movs	r3, #4
 800aa4a:	77fb      	strb	r3, [r7, #31]
 800aa4c:	e071      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa4e:	2308      	movs	r3, #8
 800aa50:	77fb      	strb	r3, [r7, #31]
 800aa52:	e06e      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa54:	2310      	movs	r3, #16
 800aa56:	77fb      	strb	r3, [r7, #31]
 800aa58:	bf00      	nop
 800aa5a:	e06a      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a25      	ldr	r2, [pc, #148]	; (800aaf8 <UART_SetConfig+0x314>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d124      	bne.n	800aab0 <UART_SetConfig+0x2cc>
 800aa66:	4b1e      	ldr	r3, [pc, #120]	; (800aae0 <UART_SetConfig+0x2fc>)
 800aa68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa74:	d012      	beq.n	800aa9c <UART_SetConfig+0x2b8>
 800aa76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa7a:	d802      	bhi.n	800aa82 <UART_SetConfig+0x29e>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d007      	beq.n	800aa90 <UART_SetConfig+0x2ac>
 800aa80:	e012      	b.n	800aaa8 <UART_SetConfig+0x2c4>
 800aa82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa86:	d006      	beq.n	800aa96 <UART_SetConfig+0x2b2>
 800aa88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa8c:	d009      	beq.n	800aaa2 <UART_SetConfig+0x2be>
 800aa8e:	e00b      	b.n	800aaa8 <UART_SetConfig+0x2c4>
 800aa90:	2300      	movs	r3, #0
 800aa92:	77fb      	strb	r3, [r7, #31]
 800aa94:	e04d      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa96:	2302      	movs	r3, #2
 800aa98:	77fb      	strb	r3, [r7, #31]
 800aa9a:	e04a      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	77fb      	strb	r3, [r7, #31]
 800aaa0:	e047      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aaa2:	2308      	movs	r3, #8
 800aaa4:	77fb      	strb	r3, [r7, #31]
 800aaa6:	e044      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	77fb      	strb	r3, [r7, #31]
 800aaac:	bf00      	nop
 800aaae:	e040      	b.n	800ab32 <UART_SetConfig+0x34e>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a11      	ldr	r2, [pc, #68]	; (800aafc <UART_SetConfig+0x318>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d139      	bne.n	800ab2e <UART_SetConfig+0x34a>
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <UART_SetConfig+0x2fc>)
 800aabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aac8:	d027      	beq.n	800ab1a <UART_SetConfig+0x336>
 800aaca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aace:	d817      	bhi.n	800ab00 <UART_SetConfig+0x31c>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d01c      	beq.n	800ab0e <UART_SetConfig+0x32a>
 800aad4:	e027      	b.n	800ab26 <UART_SetConfig+0x342>
 800aad6:	bf00      	nop
 800aad8:	efff69f3 	.word	0xefff69f3
 800aadc:	40011000 	.word	0x40011000
 800aae0:	40023800 	.word	0x40023800
 800aae4:	40004400 	.word	0x40004400
 800aae8:	40004800 	.word	0x40004800
 800aaec:	40004c00 	.word	0x40004c00
 800aaf0:	40005000 	.word	0x40005000
 800aaf4:	40011400 	.word	0x40011400
 800aaf8:	40007800 	.word	0x40007800
 800aafc:	40007c00 	.word	0x40007c00
 800ab00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab04:	d006      	beq.n	800ab14 <UART_SetConfig+0x330>
 800ab06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab0a:	d009      	beq.n	800ab20 <UART_SetConfig+0x33c>
 800ab0c:	e00b      	b.n	800ab26 <UART_SetConfig+0x342>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	77fb      	strb	r3, [r7, #31]
 800ab12:	e00e      	b.n	800ab32 <UART_SetConfig+0x34e>
 800ab14:	2302      	movs	r3, #2
 800ab16:	77fb      	strb	r3, [r7, #31]
 800ab18:	e00b      	b.n	800ab32 <UART_SetConfig+0x34e>
 800ab1a:	2304      	movs	r3, #4
 800ab1c:	77fb      	strb	r3, [r7, #31]
 800ab1e:	e008      	b.n	800ab32 <UART_SetConfig+0x34e>
 800ab20:	2308      	movs	r3, #8
 800ab22:	77fb      	strb	r3, [r7, #31]
 800ab24:	e005      	b.n	800ab32 <UART_SetConfig+0x34e>
 800ab26:	2310      	movs	r3, #16
 800ab28:	77fb      	strb	r3, [r7, #31]
 800ab2a:	bf00      	nop
 800ab2c:	e001      	b.n	800ab32 <UART_SetConfig+0x34e>
 800ab2e:	2310      	movs	r3, #16
 800ab30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab3a:	d17f      	bne.n	800ac3c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ab3c:	7ffb      	ldrb	r3, [r7, #31]
 800ab3e:	2b08      	cmp	r3, #8
 800ab40:	d85c      	bhi.n	800abfc <UART_SetConfig+0x418>
 800ab42:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <UART_SetConfig+0x364>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ab6d 	.word	0x0800ab6d
 800ab4c:	0800ab8d 	.word	0x0800ab8d
 800ab50:	0800abad 	.word	0x0800abad
 800ab54:	0800abfd 	.word	0x0800abfd
 800ab58:	0800abc5 	.word	0x0800abc5
 800ab5c:	0800abfd 	.word	0x0800abfd
 800ab60:	0800abfd 	.word	0x0800abfd
 800ab64:	0800abfd 	.word	0x0800abfd
 800ab68:	0800abe5 	.word	0x0800abe5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab6c:	f7fc f8d0 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 800ab70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	005a      	lsls	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	085b      	lsrs	r3, r3, #1
 800ab7c:	441a      	add	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	61bb      	str	r3, [r7, #24]
        break;
 800ab8a:	e03a      	b.n	800ac02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab8c:	f7fc f8d4 	bl	8006d38 <HAL_RCC_GetPCLK2Freq>
 800ab90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	005a      	lsls	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	085b      	lsrs	r3, r3, #1
 800ab9c:	441a      	add	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	61bb      	str	r3, [r7, #24]
        break;
 800abaa:	e02a      	b.n	800ac02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	085a      	lsrs	r2, r3, #1
 800abb2:	4b5f      	ldr	r3, [pc, #380]	; (800ad30 <UART_SetConfig+0x54c>)
 800abb4:	4413      	add	r3, r2
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	6852      	ldr	r2, [r2, #4]
 800abba:	fbb3 f3f2 	udiv	r3, r3, r2
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	61bb      	str	r3, [r7, #24]
        break;
 800abc2:	e01e      	b.n	800ac02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abc4:	f7fb ffe6 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 800abc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	005a      	lsls	r2, r3, #1
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	085b      	lsrs	r3, r3, #1
 800abd4:	441a      	add	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	fbb2 f3f3 	udiv	r3, r2, r3
 800abde:	b29b      	uxth	r3, r3
 800abe0:	61bb      	str	r3, [r7, #24]
        break;
 800abe2:	e00e      	b.n	800ac02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	61bb      	str	r3, [r7, #24]
        break;
 800abfa:	e002      	b.n	800ac02 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	75fb      	strb	r3, [r7, #23]
        break;
 800ac00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b0f      	cmp	r3, #15
 800ac06:	d916      	bls.n	800ac36 <UART_SetConfig+0x452>
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac0e:	d212      	bcs.n	800ac36 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	f023 030f 	bic.w	r3, r3, #15
 800ac18:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	f003 0307 	and.w	r3, r3, #7
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	897b      	ldrh	r3, [r7, #10]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	897a      	ldrh	r2, [r7, #10]
 800ac32:	60da      	str	r2, [r3, #12]
 800ac34:	e070      	b.n	800ad18 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	75fb      	strb	r3, [r7, #23]
 800ac3a:	e06d      	b.n	800ad18 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ac3c:	7ffb      	ldrb	r3, [r7, #31]
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	d859      	bhi.n	800acf6 <UART_SetConfig+0x512>
 800ac42:	a201      	add	r2, pc, #4	; (adr r2, 800ac48 <UART_SetConfig+0x464>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac8b 	.word	0x0800ac8b
 800ac50:	0800aca9 	.word	0x0800aca9
 800ac54:	0800acf7 	.word	0x0800acf7
 800ac58:	0800acc1 	.word	0x0800acc1
 800ac5c:	0800acf7 	.word	0x0800acf7
 800ac60:	0800acf7 	.word	0x0800acf7
 800ac64:	0800acf7 	.word	0x0800acf7
 800ac68:	0800acdf 	.word	0x0800acdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac6c:	f7fc f850 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 800ac70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	085a      	lsrs	r2, r3, #1
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	441a      	add	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	61bb      	str	r3, [r7, #24]
        break;
 800ac88:	e038      	b.n	800acfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac8a:	f7fc f855 	bl	8006d38 <HAL_RCC_GetPCLK2Freq>
 800ac8e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	085a      	lsrs	r2, r3, #1
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	441a      	add	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	61bb      	str	r3, [r7, #24]
        break;
 800aca6:	e029      	b.n	800acfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	085a      	lsrs	r2, r3, #1
 800acae:	4b21      	ldr	r3, [pc, #132]	; (800ad34 <UART_SetConfig+0x550>)
 800acb0:	4413      	add	r3, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	6852      	ldr	r2, [r2, #4]
 800acb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800acba:	b29b      	uxth	r3, r3
 800acbc:	61bb      	str	r3, [r7, #24]
        break;
 800acbe:	e01d      	b.n	800acfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acc0:	f7fb ff68 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 800acc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	085a      	lsrs	r2, r3, #1
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	441a      	add	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd8:	b29b      	uxth	r3, r3
 800acda:	61bb      	str	r3, [r7, #24]
        break;
 800acdc:	e00e      	b.n	800acfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	085b      	lsrs	r3, r3, #1
 800ace4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	61bb      	str	r3, [r7, #24]
        break;
 800acf4:	e002      	b.n	800acfc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
        break;
 800acfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	2b0f      	cmp	r3, #15
 800ad00:	d908      	bls.n	800ad14 <UART_SetConfig+0x530>
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad08:	d204      	bcs.n	800ad14 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	60da      	str	r2, [r3, #12]
 800ad12:	e001      	b.n	800ad18 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	01e84800 	.word	0x01e84800
 800ad34:	00f42400 	.word	0x00f42400

0800ad38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	430a      	orrs	r2, r1
 800ad82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adaa:	f003 0308 	and.w	r3, r3, #8
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	430a      	orrs	r2, r1
 800adc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	f003 0310 	and.w	r3, r3, #16
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	f003 0320 	and.w	r3, r3, #32
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	430a      	orrs	r2, r1
 800ae0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01a      	beq.n	800ae4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae36:	d10a      	bne.n	800ae4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	605a      	str	r2, [r3, #4]
  }
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae8a:	f7f8 fd1d 	bl	80038c8 <HAL_GetTick>
 800ae8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d10e      	bne.n	800aebc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f814 	bl	800aeda <UART_WaitOnFlagUntilTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e00a      	b.n	800aed2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2220      	movs	r2, #32
 800aec6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	603b      	str	r3, [r7, #0]
 800aee6:	4613      	mov	r3, r2
 800aee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeea:	e05d      	b.n	800afa8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef2:	d059      	beq.n	800afa8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aef4:	f7f8 fce8 	bl	80038c8 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	429a      	cmp	r2, r3
 800af02:	d302      	bcc.n	800af0a <UART_WaitOnFlagUntilTimeout+0x30>
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d11b      	bne.n	800af42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0201 	bic.w	r2, r2, #1
 800af28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2220      	movs	r2, #32
 800af2e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2220      	movs	r2, #32
 800af34:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e042      	b.n	800afc8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d02b      	beq.n	800afa8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af5e:	d123      	bne.n	800afa8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af68:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 0201 	bic.w	r2, r2, #1
 800af88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2220      	movs	r2, #32
 800af8e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2220      	movs	r2, #32
 800af94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2220      	movs	r2, #32
 800af9a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e00f      	b.n	800afc8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	69da      	ldr	r2, [r3, #28]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	4013      	ands	r3, r2
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	bf0c      	ite	eq
 800afb8:	2301      	moveq	r3, #1
 800afba:	2300      	movne	r3, #0
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	461a      	mov	r2, r3
 800afc0:	79fb      	ldrb	r3, [r7, #7]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d092      	beq.n	800aeec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d027      	beq.n	800b03a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	4b2f      	ldr	r3, [pc, #188]	; (800b0b0 <FMC_SDRAM_Init+0xe0>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b000:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b006:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b00c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b012:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b018:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b01e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b024:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b02a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	e032      	b.n	800b0a0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b046:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b050:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b056:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <FMC_SDRAM_Init+0xe0>)
 800b068:	4013      	ands	r3, r2
 800b06a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b074:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b07a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b080:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b086:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b08c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	4313      	orrs	r3, r2
 800b092:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	ffff8000 	.word	0xffff8000

0800b0b4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d02e      	beq.n	800b12c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0da:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0ea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b0f4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b0fe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	3b01      	subs	r3, #1
 800b106:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b108:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	3b01      	subs	r3, #1
 800b110:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b112:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	3b01      	subs	r3, #1
 800b11a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b11c:	4313      	orrs	r3, r2
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	609a      	str	r2, [r3, #8]
 800b12a:	e039      	b.n	800b1a0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	4b1e      	ldr	r3, [pc, #120]	; (800b1b0 <FMC_SDRAM_Timing_Init+0xfc>)
 800b136:	4013      	ands	r3, r2
 800b138:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	3b01      	subs	r3, #1
 800b140:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	3b01      	subs	r3, #1
 800b148:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b14a:	4313      	orrs	r3, r2
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	4313      	orrs	r3, r2
 800b150:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b15e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b16e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	3b01      	subs	r3, #1
 800b176:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b178:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	3b01      	subs	r3, #1
 800b180:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b182:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	3b01      	subs	r3, #1
 800b18a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b18c:	4313      	orrs	r3, r2
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	4313      	orrs	r3, r2
 800b192:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	ff0f0fff 	.word	0xff0f0fff

0800b1b4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b1cc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b1d6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	371c      	adds	r7, #28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b083      	sub	sp, #12
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	695a      	ldr	r2, [r3, #20]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b21c:	b084      	sub	sp, #16
 800b21e:	b480      	push	{r7}
 800b220:	b085      	sub	sp, #20
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	f107 001c 	add.w	r0, r7, #28
 800b22a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b232:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b234:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b236:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b23a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b23e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b242:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b246:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	4b07      	ldr	r3, [pc, #28]	; (800b270 <SDMMC_Init+0x54>)
 800b254:	4013      	ands	r3, r2
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	431a      	orrs	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	b004      	add	sp, #16
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	ffff8100 	.word	0xffff8100

0800b274 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2203      	movs	r2, #3
 800b29a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b29c:	2002      	movs	r0, #2
 800b29e:	f7f8 fb1f 	bl	80038e0 <HAL_Delay>
  
  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0303 	and.w	r3, r3, #3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b2ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b2f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	4b06      	ldr	r3, [pc, #24]	; (800b318 <SDMMC_SendCommand+0x50>)
 800b300:	4013      	ands	r3, r2
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	431a      	orrs	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	fffff000 	.word	0xfffff000

0800b31c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	b2db      	uxtb	r3, r3
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3314      	adds	r3, #20
 800b344:	461a      	mov	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	4413      	add	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
}  
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b382:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b388:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b38e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0

}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b3c2:	2310      	movs	r3, #16
 800b3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c6:	2340      	movs	r3, #64	; 0x40
 800b3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d4:	f107 0308 	add.w	r3, r7, #8
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff ff74 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e4:	2110      	movs	r1, #16
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fa42 	bl	800b870 <SDMMC_GetCmdResp1>
 800b3ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ee:	69fb      	ldr	r3, [r7, #28]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3720      	adds	r7, #32
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b406:	2311      	movs	r3, #17
 800b408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b40a:	2340      	movs	r3, #64	; 0x40
 800b40c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b418:	f107 0308 	add.w	r3, r7, #8
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7ff ff52 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b424:	f241 3288 	movw	r2, #5000	; 0x1388
 800b428:	2111      	movs	r1, #17
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fa20 	bl	800b870 <SDMMC_GetCmdResp1>
 800b430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b432:	69fb      	ldr	r3, [r7, #28]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3720      	adds	r7, #32
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b088      	sub	sp, #32
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b44a:	2312      	movs	r3, #18
 800b44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b44e:	2340      	movs	r3, #64	; 0x40
 800b450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b452:	2300      	movs	r3, #0
 800b454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b45a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b45c:	f107 0308 	add.w	r3, r7, #8
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff ff30 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b468:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46c:	2112      	movs	r1, #18
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f9fe 	bl	800b870 <SDMMC_GetCmdResp1>
 800b474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b476:	69fb      	ldr	r3, [r7, #28]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b48e:	2318      	movs	r3, #24
 800b490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b492:	2340      	movs	r3, #64	; 0x40
 800b494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b496:	2300      	movs	r3, #0
 800b498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b49e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a0:	f107 0308 	add.w	r3, r7, #8
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff ff0e 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b0:	2118      	movs	r1, #24
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f9dc 	bl	800b870 <SDMMC_GetCmdResp1>
 800b4b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ba:	69fb      	ldr	r3, [r7, #28]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3720      	adds	r7, #32
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b4d2:	2319      	movs	r3, #25
 800b4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4d6:	2340      	movs	r3, #64	; 0x40
 800b4d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4e4:	f107 0308 	add.w	r3, r7, #8
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7ff feec 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f4:	2119      	movs	r1, #25
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f9ba 	bl	800b870 <SDMMC_GetCmdResp1>
 800b4fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fe:	69fb      	ldr	r3, [r7, #28]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b088      	sub	sp, #32
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b514:	230c      	movs	r3, #12
 800b516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b518:	2340      	movs	r3, #64	; 0x40
 800b51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b51c:	2300      	movs	r3, #0
 800b51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b526:	f107 0308 	add.w	r3, r7, #8
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fecb 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b532:	4a05      	ldr	r2, [pc, #20]	; (800b548 <SDMMC_CmdStopTransfer+0x40>)
 800b534:	210c      	movs	r1, #12
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f99a 	bl	800b870 <SDMMC_GetCmdResp1>
 800b53c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53e:	69fb      	ldr	r3, [r7, #28]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	05f5e100 	.word	0x05f5e100

0800b54c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	; 0x28
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b55c:	2307      	movs	r3, #7
 800b55e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b560:	2340      	movs	r3, #64	; 0x40
 800b562:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b564:	2300      	movs	r3, #0
 800b566:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b56c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b56e:	f107 0310 	add.w	r3, r7, #16
 800b572:	4619      	mov	r1, r3
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f7ff fea7 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b57a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b57e:	2107      	movs	r1, #7
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 f975 	bl	800b870 <SDMMC_GetCmdResp1>
 800b586:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3728      	adds	r7, #40	; 0x28
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b088      	sub	sp, #32
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5b0:	f107 0308 	add.w	r3, r7, #8
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7ff fe86 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f92f 	bl	800b820 <SDMMC_GetCmdError>
 800b5c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3720      	adds	r7, #32
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b088      	sub	sp, #32
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b5da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5dc:	2308      	movs	r3, #8
 800b5de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5e0:	2340      	movs	r3, #64	; 0x40
 800b5e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ee:	f107 0308 	add.w	r3, r7, #8
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff fe67 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fb18 	bl	800bc30 <SDMMC_GetCmdResp7>
 800b600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b602:	69fb      	ldr	r3, [r7, #28]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3720      	adds	r7, #32
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b088      	sub	sp, #32
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b61a:	2337      	movs	r3, #55	; 0x37
 800b61c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b61e:	2340      	movs	r3, #64	; 0x40
 800b620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b62a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b62c:	f107 0308 	add.w	r3, r7, #8
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff fe48 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b638:	f241 3288 	movw	r2, #5000	; 0x1388
 800b63c:	2137      	movs	r1, #55	; 0x37
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f916 	bl	800b870 <SDMMC_GetCmdResp1>
 800b644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b646:	69fb      	ldr	r3, [r7, #28]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b088      	sub	sp, #32
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	4b0d      	ldr	r3, [pc, #52]	; (800b694 <SDMMC_CmdAppOperCommand+0x44>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b662:	2329      	movs	r3, #41	; 0x29
 800b664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b666:	2340      	movs	r3, #64	; 0x40
 800b668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b674:	f107 0308 	add.w	r3, r7, #8
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fe24 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fa27 	bl	800bad4 <SDMMC_GetCmdResp3>
 800b686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b688:	69fb      	ldr	r3, [r7, #28]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	80100000 	.word	0x80100000

0800b698 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b6a6:	2306      	movs	r3, #6
 800b6a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6aa:	2340      	movs	r3, #64	; 0x40
 800b6ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b8:	f107 0308 	add.w	r3, r7, #8
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7ff fe02 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c8:	2106      	movs	r1, #6
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f8d0 	bl	800b870 <SDMMC_GetCmdResp1>
 800b6d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3720      	adds	r7, #32
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6e8:	2333      	movs	r3, #51	; 0x33
 800b6ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ec:	2340      	movs	r3, #64	; 0x40
 800b6ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6fa:	f107 0308 	add.w	r3, r7, #8
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff fde1 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b706:	f241 3288 	movw	r2, #5000	; 0x1388
 800b70a:	2133      	movs	r1, #51	; 0x33
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f8af 	bl	800b870 <SDMMC_GetCmdResp1>
 800b712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b714:	69fb      	ldr	r3, [r7, #28]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3720      	adds	r7, #32
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b088      	sub	sp, #32
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b72a:	2302      	movs	r3, #2
 800b72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b72e:	23c0      	movs	r3, #192	; 0xc0
 800b730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b732:	2300      	movs	r3, #0
 800b734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b73c:	f107 0308 	add.w	r3, r7, #8
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff fdc0 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f97d 	bl	800ba48 <SDMMC_GetCmdResp2>
 800b74e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b750:	69fb      	ldr	r3, [r7, #28]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3720      	adds	r7, #32
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b088      	sub	sp, #32
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b768:	2309      	movs	r3, #9
 800b76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b76c:	23c0      	movs	r3, #192	; 0xc0
 800b76e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b770:	2300      	movs	r3, #0
 800b772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b778:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b77a:	f107 0308 	add.w	r3, r7, #8
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fda1 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f95e 	bl	800ba48 <SDMMC_GetCmdResp2>
 800b78c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b78e:	69fb      	ldr	r3, [r7, #28]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7aa:	2340      	movs	r3, #64	; 0x40
 800b7ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7b8:	f107 0308 	add.w	r3, r7, #8
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff fd82 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	2103      	movs	r1, #3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f9bd 	bl	800bb48 <SDMMC_GetCmdResp6>
 800b7ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7d0:	69fb      	ldr	r3, [r7, #28]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3720      	adds	r7, #32
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b088      	sub	sp, #32
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b7e8:	230d      	movs	r3, #13
 800b7ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ec:	2340      	movs	r3, #64	; 0x40
 800b7ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7fa:	f107 0308 	add.w	r3, r7, #8
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fd61 	bl	800b2c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b806:	f241 3288 	movw	r2, #5000	; 0x1388
 800b80a:	210d      	movs	r1, #13
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f82f 	bl	800b870 <SDMMC_GetCmdResp1>
 800b812:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b814:	69fb      	ldr	r3, [r7, #28]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3720      	adds	r7, #32
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b820:	b490      	push	{r4, r7}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <SDMMC_GetCmdError+0x48>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a0f      	ldr	r2, [pc, #60]	; (800b86c <SDMMC_GetCmdError+0x4c>)
 800b82e:	fba2 2303 	umull	r2, r3, r2, r3
 800b832:	0a5b      	lsrs	r3, r3, #9
 800b834:	f241 3288 	movw	r2, #5000	; 0x1388
 800b838:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b83c:	4623      	mov	r3, r4
 800b83e:	1e5c      	subs	r4, r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b848:	e009      	b.n	800b85e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0f2      	beq.n	800b83c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	22c5      	movs	r2, #197	; 0xc5
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bc90      	pop	{r4, r7}
 800b866:	4770      	bx	lr
 800b868:	20000018 	.word	0x20000018
 800b86c:	10624dd3 	.word	0x10624dd3

0800b870 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b870:	b590      	push	{r4, r7, lr}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	460b      	mov	r3, r1
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b87e:	4b6f      	ldr	r3, [pc, #444]	; (800ba3c <SDMMC_GetCmdResp1+0x1cc>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a6f      	ldr	r2, [pc, #444]	; (800ba40 <SDMMC_GetCmdResp1+0x1d0>)
 800b884:	fba2 2303 	umull	r2, r3, r2, r3
 800b888:	0a5b      	lsrs	r3, r3, #9
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b890:	4623      	mov	r3, r4
 800b892:	1e5c      	subs	r4, r3, #1
 800b894:	2b00      	cmp	r3, #0
 800b896:	d102      	bne.n	800b89e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b89c:	e0c9      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d0f0      	beq.n	800b890 <SDMMC_GetCmdResp1+0x20>
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1eb      	bne.n	800b890 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8bc:	f003 0304 	and.w	r3, r3, #4
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d004      	beq.n	800b8ce <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2204      	movs	r2, #4
 800b8c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8ca:	2304      	movs	r3, #4
 800b8cc:	e0b1      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d004      	beq.n	800b8e4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e0a6      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	22c5      	movs	r2, #197	; 0xc5
 800b8e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f7ff fd16 	bl	800b31c <SDMMC_GetCommandResponse>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	7afb      	ldrb	r3, [r7, #11]
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d001      	beq.n	800b8fe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e099      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8fe:	2100      	movs	r1, #0
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f7ff fd18 	bl	800b336 <SDMMC_GetResponse>
 800b906:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	4b4e      	ldr	r3, [pc, #312]	; (800ba44 <SDMMC_GetCmdResp1+0x1d4>)
 800b90c:	4013      	ands	r3, r2
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b912:	2300      	movs	r3, #0
 800b914:	e08d      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	da02      	bge.n	800b922 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b91c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b920:	e087      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	e080      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b93a:	2380      	movs	r3, #128	; 0x80
 800b93c:	e079      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b94c:	e071      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b95c:	e069      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b96c:	e061      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b97c:	e059      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b98c:	e051      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b99c:	e049      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b9a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9ac:	e041      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9bc:	e039      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b9cc:	e031      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9dc:	e029      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b9ec:	e021      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9fc:	e019      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba0c:	e011      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba1c:	e009      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f003 0308 	and.w	r3, r3, #8
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba2c:	e001      	b.n	800ba32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	371c      	adds	r7, #28
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd90      	pop	{r4, r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000018 	.word	0x20000018
 800ba40:	10624dd3 	.word	0x10624dd3
 800ba44:	fdffe008 	.word	0xfdffe008

0800ba48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba48:	b490      	push	{r4, r7}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba50:	4b1e      	ldr	r3, [pc, #120]	; (800bacc <SDMMC_GetCmdResp2+0x84>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a1e      	ldr	r2, [pc, #120]	; (800bad0 <SDMMC_GetCmdResp2+0x88>)
 800ba56:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5a:	0a5b      	lsrs	r3, r3, #9
 800ba5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba64:	4623      	mov	r3, r4
 800ba66:	1e5c      	subs	r4, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d102      	bne.n	800ba72 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba70:	e026      	b.n	800bac0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba76:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d0f0      	beq.n	800ba64 <SDMMC_GetCmdResp2+0x1c>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1eb      	bne.n	800ba64 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d004      	beq.n	800baa2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2204      	movs	r2, #4
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba9e:	2304      	movs	r3, #4
 800baa0:	e00e      	b.n	800bac0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d004      	beq.n	800bab8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2201      	movs	r2, #1
 800bab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e003      	b.n	800bac0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	22c5      	movs	r2, #197	; 0xc5
 800babc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bc90      	pop	{r4, r7}
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	20000018 	.word	0x20000018
 800bad0:	10624dd3 	.word	0x10624dd3

0800bad4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bad4:	b490      	push	{r4, r7}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800badc:	4b18      	ldr	r3, [pc, #96]	; (800bb40 <SDMMC_GetCmdResp3+0x6c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a18      	ldr	r2, [pc, #96]	; (800bb44 <SDMMC_GetCmdResp3+0x70>)
 800bae2:	fba2 2303 	umull	r2, r3, r2, r3
 800bae6:	0a5b      	lsrs	r3, r3, #9
 800bae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800baec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800baf0:	4623      	mov	r3, r4
 800baf2:	1e5c      	subs	r4, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bafc:	e01b      	b.n	800bb36 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0f0      	beq.n	800baf0 <SDMMC_GetCmdResp3+0x1c>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1eb      	bne.n	800baf0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1c:	f003 0304 	and.w	r3, r3, #4
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d004      	beq.n	800bb2e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2204      	movs	r2, #4
 800bb28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb2a:	2304      	movs	r3, #4
 800bb2c:	e003      	b.n	800bb36 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	22c5      	movs	r2, #197	; 0xc5
 800bb32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bc90      	pop	{r4, r7}
 800bb3e:	4770      	bx	lr
 800bb40:	20000018 	.word	0x20000018
 800bb44:	10624dd3 	.word	0x10624dd3

0800bb48 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb48:	b590      	push	{r4, r7, lr}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	460b      	mov	r3, r1
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb56:	4b34      	ldr	r3, [pc, #208]	; (800bc28 <SDMMC_GetCmdResp6+0xe0>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a34      	ldr	r2, [pc, #208]	; (800bc2c <SDMMC_GetCmdResp6+0xe4>)
 800bb5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb60:	0a5b      	lsrs	r3, r3, #9
 800bb62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb66:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb6a:	4623      	mov	r3, r4
 800bb6c:	1e5c      	subs	r4, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d102      	bne.n	800bb78 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb76:	e052      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0f0      	beq.n	800bb6a <SDMMC_GetCmdResp6+0x22>
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1eb      	bne.n	800bb6a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb96:	f003 0304 	and.w	r3, r3, #4
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d004      	beq.n	800bba8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2204      	movs	r2, #4
 800bba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bba4:	2304      	movs	r3, #4
 800bba6:	e03a      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e02f      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7ff fbac 	bl	800b31c <SDMMC_GetCommandResponse>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d001      	beq.n	800bbd2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e025      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	22c5      	movs	r2, #197	; 0xc5
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbd8:	2100      	movs	r1, #0
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff fbab 	bl	800b336 <SDMMC_GetResponse>
 800bbe0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d106      	bne.n	800bbfa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	0c1b      	lsrs	r3, r3, #16
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e011      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc08:	e009      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc18:	e001      	b.n	800bc1e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd90      	pop	{r4, r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20000018 	.word	0x20000018
 800bc2c:	10624dd3 	.word	0x10624dd3

0800bc30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc30:	b490      	push	{r4, r7}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc38:	4b21      	ldr	r3, [pc, #132]	; (800bcc0 <SDMMC_GetCmdResp7+0x90>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a21      	ldr	r2, [pc, #132]	; (800bcc4 <SDMMC_GetCmdResp7+0x94>)
 800bc3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc42:	0a5b      	lsrs	r3, r3, #9
 800bc44:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc4c:	4623      	mov	r3, r4
 800bc4e:	1e5c      	subs	r4, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc58:	e02c      	b.n	800bcb4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0f0      	beq.n	800bc4c <SDMMC_GetCmdResp7+0x1c>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1eb      	bne.n	800bc4c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc78:	f003 0304 	and.w	r3, r3, #4
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d004      	beq.n	800bc8a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2204      	movs	r2, #4
 800bc84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc86:	2304      	movs	r3, #4
 800bc88:	e014      	b.n	800bcb4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d004      	beq.n	800bca0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e009      	b.n	800bcb4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2240      	movs	r2, #64	; 0x40
 800bcb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bcb2:	2300      	movs	r3, #0
  
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bc90      	pop	{r4, r7}
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	20000018 	.word	0x20000018
 800bcc4:	10624dd3 	.word	0x10624dd3

0800bcc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bccc:	4904      	ldr	r1, [pc, #16]	; (800bce0 <MX_FATFS_Init+0x18>)
 800bcce:	4805      	ldr	r0, [pc, #20]	; (800bce4 <MX_FATFS_Init+0x1c>)
 800bcd0:	f000 fa96 	bl	800c200 <FATFS_LinkDriver>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	4b03      	ldr	r3, [pc, #12]	; (800bce8 <MX_FATFS_Init+0x20>)
 800bcda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bcdc:	bf00      	nop
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	2000c7c4 	.word	0x2000c7c4
 800bce4:	0802656c 	.word	0x0802656c
 800bce8:	2000c7c0 	.word	0x2000c7c0

0800bcec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bcf6:	f000 f87b 	bl	800bdf0 <BSP_SD_IsDetected>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d001      	beq.n	800bd04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bd00:	2302      	movs	r3, #2
 800bd02:	e012      	b.n	800bd2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bd04:	480b      	ldr	r0, [pc, #44]	; (800bd34 <BSP_SD_Init+0x48>)
 800bd06:	f7fc fae9 	bl	80082dc <HAL_SD_Init>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d109      	bne.n	800bd28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bd14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd18:	4806      	ldr	r0, [pc, #24]	; (800bd34 <BSP_SD_Init+0x48>)
 800bd1a:	f7fc ff2b 	bl	8008b74 <HAL_SD_ConfigWideBusOperation>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bd28:	79fb      	ldrb	r3, [r7, #7]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	2000c24c 	.word	0x2000c24c

0800bd38 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	68f9      	ldr	r1, [r7, #12]
 800bd4e:	4806      	ldr	r0, [pc, #24]	; (800bd68 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bd50:	f7fc fb5c 	bl	800840c <HAL_SD_ReadBlocks_DMA>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	2000c24c 	.word	0x2000c24c

0800bd6c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	68f9      	ldr	r1, [r7, #12]
 800bd82:	4806      	ldr	r0, [pc, #24]	; (800bd9c <BSP_SD_WriteBlocks_DMA+0x30>)
 800bd84:	f7fc fc2e 	bl	80085e4 <HAL_SD_WriteBlocks_DMA>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3718      	adds	r7, #24
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	2000c24c 	.word	0x2000c24c

0800bda0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bda4:	4805      	ldr	r0, [pc, #20]	; (800bdbc <BSP_SD_GetCardState+0x1c>)
 800bda6:	f7fc ff61 	bl	8008c6c <HAL_SD_GetCardState>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	bf14      	ite	ne
 800bdb0:	2301      	movne	r3, #1
 800bdb2:	2300      	moveq	r3, #0
 800bdb4:	b2db      	uxtb	r3, r3
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	2000c24c 	.word	0x2000c24c

0800bdc0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bdc8:	6879      	ldr	r1, [r7, #4]
 800bdca:	4803      	ldr	r0, [pc, #12]	; (800bdd8 <BSP_SD_GetCardInfo+0x18>)
 800bdcc:	f7fc fea6 	bl	8008b1c <HAL_SD_GetCardInfo>
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	2000c24c 	.word	0x2000c24c

0800bddc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bde4:	f000 f9b2 	bl	800c14c <BSP_SD_ReadCpltCallback>
}
 800bde8:	bf00      	nop
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bdfa:	f000 f80b 	bl	800be14 <BSP_PlatformIsDetected>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be04:	2300      	movs	r3, #0
 800be06:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	b2db      	uxtb	r3, r3
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800be1a:	2301      	movs	r3, #1
 800be1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800be1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be22:	4806      	ldr	r0, [pc, #24]	; (800be3c <BSP_PlatformIsDetected+0x28>)
 800be24:	f7f9 fe3a 	bl	8005a9c <HAL_GPIO_ReadPin>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800be2e:	2300      	movs	r3, #0
 800be30:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800be32:	79fb      	ldrb	r3, [r7, #7]
}  
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	40020800 	.word	0x40020800

0800be40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800be48:	f000 fa26 	bl	800c298 <osKernelSysTick>
 800be4c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800be4e:	e006      	b.n	800be5e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be50:	f7ff ffa6 	bl	800bda0 <BSP_SD_GetCardState>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	e009      	b.n	800be72 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800be5e:	f000 fa1b 	bl	800c298 <osKernelSysTick>
 800be62:	4602      	mov	r2, r0
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d8f0      	bhi.n	800be50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800be6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	4603      	mov	r3, r0
 800be84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be86:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <SD_CheckStatus+0x38>)
 800be88:	2201      	movs	r2, #1
 800be8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be8c:	f7ff ff88 	bl	800bda0 <BSP_SD_GetCardState>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d107      	bne.n	800bea6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be96:	4b07      	ldr	r3, [pc, #28]	; (800beb4 <SD_CheckStatus+0x38>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f023 0301 	bic.w	r3, r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	4b04      	ldr	r3, [pc, #16]	; (800beb4 <SD_CheckStatus+0x38>)
 800bea4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bea6:	4b03      	ldr	r3, [pc, #12]	; (800beb4 <SD_CheckStatus+0x38>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	b2db      	uxtb	r3, r3
}
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	20000021 	.word	0x20000021

0800beb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800beb8:	b590      	push	{r4, r7, lr}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	4603      	mov	r3, r0
 800bec0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800bec2:	4b20      	ldr	r3, [pc, #128]	; (800bf44 <SD_initialize+0x8c>)
 800bec4:	2201      	movs	r2, #1
 800bec6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800bec8:	f000 f9da 	bl	800c280 <osKernelRunning>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d030      	beq.n	800bf34 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bed2:	f7ff ff0b 	bl	800bcec <BSP_SD_Init>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d107      	bne.n	800beec <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	4618      	mov	r0, r3
 800bee0:	f7ff ffcc 	bl	800be7c <SD_CheckStatus>
 800bee4:	4603      	mov	r3, r0
 800bee6:	461a      	mov	r2, r3
 800bee8:	4b16      	ldr	r3, [pc, #88]	; (800bf44 <SD_initialize+0x8c>)
 800beea:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800beec:	4b15      	ldr	r3, [pc, #84]	; (800bf44 <SD_initialize+0x8c>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d01e      	beq.n	800bf34 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800bef6:	4b14      	ldr	r3, [pc, #80]	; (800bf48 <SD_initialize+0x90>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10e      	bne.n	800bf1c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800befe:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <SD_initialize+0x94>)
 800bf00:	f107 0408 	add.w	r4, r7, #8
 800bf04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800bf0a:	f107 0308 	add.w	r3, r7, #8
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f000 fa31 	bl	800c378 <osMessageCreate>
 800bf16:	4602      	mov	r2, r0
 800bf18:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <SD_initialize+0x90>)
 800bf1a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800bf1c:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <SD_initialize+0x90>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d107      	bne.n	800bf34 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800bf24:	4b07      	ldr	r3, [pc, #28]	; (800bf44 <SD_initialize+0x8c>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	f043 0301 	orr.w	r3, r3, #1
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <SD_initialize+0x8c>)
 800bf32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bf34:	4b03      	ldr	r3, [pc, #12]	; (800bf44 <SD_initialize+0x8c>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	b2db      	uxtb	r3, r3
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd90      	pop	{r4, r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000021 	.word	0x20000021
 800bf48:	200003c4 	.word	0x200003c4
 800bf4c:	08025e54 	.word	0x08025e54

0800bf50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf5a:	79fb      	ldrb	r3, [r7, #7]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7ff ff8d 	bl	800be7c <SD_CheckStatus>
 800bf62:	4603      	mov	r3, r0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08a      	sub	sp, #40	; 0x28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	607a      	str	r2, [r7, #4]
 800bf76:	603b      	str	r3, [r7, #0]
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf82:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf86:	f7ff ff5b 	bl	800be40 <SD_CheckStatusWithTimeout>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	da02      	bge.n	800bf96 <SD_read+0x2a>
  {
    return res;
 800bf90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf94:	e032      	b.n	800bffc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	68b8      	ldr	r0, [r7, #8]
 800bf9c:	f7ff fecc 	bl	800bd38 <BSP_SD_ReadBlocks_DMA>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bfa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d124      	bne.n	800bff8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bfae:	4b15      	ldr	r3, [pc, #84]	; (800c004 <SD_read+0x98>)
 800bfb0:	6819      	ldr	r1, [r3, #0]
 800bfb2:	f107 0314 	add.w	r3, r7, #20
 800bfb6:	f247 5230 	movw	r2, #30000	; 0x7530
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 fa46 	bl	800c44c <osMessageGet>

    if (event.status == osEventMessage)
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2b10      	cmp	r3, #16
 800bfc4:	d118      	bne.n	800bff8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d115      	bne.n	800bff8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bfcc:	f000 f964 	bl	800c298 <osKernelSysTick>
 800bfd0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bfd2:	e008      	b.n	800bfe6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bfd4:	f7ff fee4 	bl	800bda0 <BSP_SD_GetCardState>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d103      	bne.n	800bfe6 <SD_read+0x7a>
              {
                res = RES_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bfe4:	e008      	b.n	800bff8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bfe6:	f000 f957 	bl	800c298 <osKernelSysTick>
 800bfea:	4602      	mov	r2, r0
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d9ed      	bls.n	800bfd4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3728      	adds	r7, #40	; 0x28
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	200003c4 	.word	0x200003c4

0800c008 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60b9      	str	r1, [r7, #8]
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c01e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c022:	f7ff ff0d 	bl	800be40 <SD_CheckStatusWithTimeout>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	da02      	bge.n	800c032 <SD_write+0x2a>
  {
    return res;
 800c02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c030:	e02e      	b.n	800c090 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	6879      	ldr	r1, [r7, #4]
 800c036:	68b8      	ldr	r0, [r7, #8]
 800c038:	f7ff fe98 	bl	800bd6c <BSP_SD_WriteBlocks_DMA>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d124      	bne.n	800c08c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c042:	4b15      	ldr	r3, [pc, #84]	; (800c098 <SD_write+0x90>)
 800c044:	6819      	ldr	r1, [r3, #0]
 800c046:	f107 0314 	add.w	r3, r7, #20
 800c04a:	f247 5230 	movw	r2, #30000	; 0x7530
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f9fc 	bl	800c44c <osMessageGet>

    if (event.status == osEventMessage)
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2b10      	cmp	r3, #16
 800c058:	d118      	bne.n	800c08c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d115      	bne.n	800c08c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c060:	f000 f91a 	bl	800c298 <osKernelSysTick>
 800c064:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c066:	e008      	b.n	800c07a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c068:	f7ff fe9a 	bl	800bda0 <BSP_SD_GetCardState>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d103      	bne.n	800c07a <SD_write+0x72>
          {
            res = RES_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c078:	e008      	b.n	800c08c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c07a:	f000 f90d 	bl	800c298 <osKernelSysTick>
 800c07e:	4602      	mov	r2, r0
 800c080:	6a3b      	ldr	r3, [r7, #32]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	f247 522f 	movw	r2, #29999	; 0x752f
 800c088:	4293      	cmp	r3, r2
 800c08a:	d9ed      	bls.n	800c068 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c090:	4618      	mov	r0, r3
 800c092:	3728      	adds	r7, #40	; 0x28
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	200003c4 	.word	0x200003c4

0800c09c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08c      	sub	sp, #48	; 0x30
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	603a      	str	r2, [r7, #0]
 800c0a6:	71fb      	strb	r3, [r7, #7]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c0b2:	4b25      	ldr	r3, [pc, #148]	; (800c148 <SD_ioctl+0xac>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <SD_ioctl+0x28>
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e03c      	b.n	800c13e <SD_ioctl+0xa2>

  switch (cmd)
 800c0c4:	79bb      	ldrb	r3, [r7, #6]
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d834      	bhi.n	800c134 <SD_ioctl+0x98>
 800c0ca:	a201      	add	r2, pc, #4	; (adr r2, 800c0d0 <SD_ioctl+0x34>)
 800c0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d0:	0800c0e1 	.word	0x0800c0e1
 800c0d4:	0800c0e9 	.word	0x0800c0e9
 800c0d8:	0800c101 	.word	0x0800c101
 800c0dc:	0800c11b 	.word	0x0800c11b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0e6:	e028      	b.n	800c13a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0e8:	f107 030c 	add.w	r3, r7, #12
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff fe67 	bl	800bdc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0fe:	e01c      	b.n	800c13a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c100:	f107 030c 	add.w	r3, r7, #12
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff fe5b 	bl	800bdc0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c118:	e00f      	b.n	800c13a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c11a:	f107 030c 	add.w	r3, r7, #12
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff fe4e 	bl	800bdc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c126:	0a5a      	lsrs	r2, r3, #9
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c132:	e002      	b.n	800c13a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c134:	2304      	movs	r3, #4
 800c136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3730      	adds	r7, #48	; 0x30
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	20000021 	.word	0x20000021

0800c14c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c150:	4b04      	ldr	r3, [pc, #16]	; (800c164 <BSP_SD_ReadCpltCallback+0x18>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2200      	movs	r2, #0
 800c156:	2101      	movs	r1, #1
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 f937 	bl	800c3cc <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c15e:	bf00      	nop
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	200003c4 	.word	0x200003c4

0800c168 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	4613      	mov	r3, r2
 800c174:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c176:	2301      	movs	r3, #1
 800c178:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c17e:	4b1f      	ldr	r3, [pc, #124]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c180:	7a5b      	ldrb	r3, [r3, #9]
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d131      	bne.n	800c1ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c188:	4b1c      	ldr	r3, [pc, #112]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c18a:	7a5b      	ldrb	r3, [r3, #9]
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	461a      	mov	r2, r3
 800c190:	4b1a      	ldr	r3, [pc, #104]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c192:	2100      	movs	r1, #0
 800c194:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c196:	4b19      	ldr	r3, [pc, #100]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c198:	7a5b      	ldrb	r3, [r3, #9]
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	4a17      	ldr	r2, [pc, #92]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c1a6:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c1a8:	7a5b      	ldrb	r3, [r3, #9]
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c1b0:	4413      	add	r3, r2
 800c1b2:	79fa      	ldrb	r2, [r7, #7]
 800c1b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c1b6:	4b11      	ldr	r3, [pc, #68]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c1b8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	b2d1      	uxtb	r1, r2
 800c1c0:	4a0e      	ldr	r2, [pc, #56]	; (800c1fc <FATFS_LinkDriverEx+0x94>)
 800c1c2:	7251      	strb	r1, [r2, #9]
 800c1c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c1c6:	7dbb      	ldrb	r3, [r7, #22]
 800c1c8:	3330      	adds	r3, #48	; 0x30
 800c1ca:	b2da      	uxtb	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	223a      	movs	r2, #58	; 0x3a
 800c1d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	3302      	adds	r3, #2
 800c1dc:	222f      	movs	r2, #47	; 0x2f
 800c1de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	3303      	adds	r3, #3
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	371c      	adds	r7, #28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	200003c8 	.word	0x200003c8

0800c200 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c20a:	2200      	movs	r2, #0
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff ffaa 	bl	800c168 <FATFS_LinkDriverEx>
 800c214:	4603      	mov	r3, r0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c21e:	b480      	push	{r7}
 800c220:	b085      	sub	sp, #20
 800c222:	af00      	add	r7, sp, #0
 800c224:	4603      	mov	r3, r0
 800c226:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c228:	2300      	movs	r3, #0
 800c22a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c22c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c230:	2b84      	cmp	r3, #132	; 0x84
 800c232:	d005      	beq.n	800c240 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c234:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	4413      	add	r3, r2
 800c23c:	3303      	adds	r3, #3
 800c23e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c240:	68fb      	ldr	r3, [r7, #12]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3714      	adds	r7, #20
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c254:	f3ef 8305 	mrs	r3, IPSR
 800c258:	607b      	str	r3, [r7, #4]
  return(result);
 800c25a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bf14      	ite	ne
 800c260:	2301      	movne	r3, #1
 800c262:	2300      	moveq	r3, #0
 800c264:	b2db      	uxtb	r3, r3
}
 800c266:	4618      	mov	r0, r3
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c276:	f001 faff 	bl	800d878 <vTaskStartScheduler>
  
  return osOK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c284:	f001 ff4a 	bl	800e11c <xTaskGetSchedulerState>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <osKernelRunning+0x12>
    return 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	e000      	b.n	800c294 <osKernelRunning+0x14>
  else
    return 1;
 800c292:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c294:	4618      	mov	r0, r3
 800c296:	bd80      	pop	{r7, pc}

0800c298 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c29c:	f7ff ffd7 	bl	800c24e <inHandlerMode>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c2a6:	f001 fc05 	bl	800dab4 <xTaskGetTickCountFromISR>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	e002      	b.n	800c2b4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c2ae:	f001 fbf1 	bl	800da94 <xTaskGetTickCount>
 800c2b2:	4603      	mov	r3, r0
  }
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ba:	b089      	sub	sp, #36	; 0x24
 800c2bc:	af04      	add	r7, sp, #16
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d020      	beq.n	800c30c <osThreadCreate+0x54>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d01c      	beq.n	800c30c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685c      	ldr	r4, [r3, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681d      	ldr	r5, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691e      	ldr	r6, [r3, #16]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff ff9a 	bl	800c21e <makeFreeRtosPriority>
 800c2ea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c2f4:	9202      	str	r2, [sp, #8]
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	9100      	str	r1, [sp, #0]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	4629      	mov	r1, r5
 800c300:	4620      	mov	r0, r4
 800c302:	f001 f8e0 	bl	800d4c6 <xTaskCreateStatic>
 800c306:	4603      	mov	r3, r0
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	e01c      	b.n	800c346 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685c      	ldr	r4, [r3, #4]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c318:	b29e      	uxth	r6, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff ff7c 	bl	800c21e <makeFreeRtosPriority>
 800c326:	4602      	mov	r2, r0
 800c328:	f107 030c 	add.w	r3, r7, #12
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	9200      	str	r2, [sp, #0]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	4632      	mov	r2, r6
 800c334:	4629      	mov	r1, r5
 800c336:	4620      	mov	r0, r4
 800c338:	f001 f925 	bl	800d586 <xTaskCreate>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d001      	beq.n	800c346 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	e000      	b.n	800c348 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c346:	68fb      	ldr	r3, [r7, #12]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c350 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <osDelay+0x16>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	e000      	b.n	800c368 <osDelay+0x18>
 800c366:	2301      	movs	r3, #1
 800c368:	4618      	mov	r0, r3
 800c36a:	f001 fa4f 	bl	800d80c <vTaskDelay>
  
  return osOK;
 800c36e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c378:	b590      	push	{r4, r7, lr}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af02      	add	r7, sp, #8
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d012      	beq.n	800c3b0 <osMessageCreate+0x38>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00e      	beq.n	800c3b0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6859      	ldr	r1, [r3, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	689a      	ldr	r2, [r3, #8]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68dc      	ldr	r4, [r3, #12]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	4623      	mov	r3, r4
 800c3a8:	f000 f9e2 	bl	800c770 <xQueueGenericCreateStatic>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	e008      	b.n	800c3c2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6818      	ldr	r0, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	f000 fa55 	bl	800c86a <xQueueGenericCreate>
 800c3c0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd90      	pop	{r4, r7, pc}
	...

0800c3cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <osMessagePut+0x1e>
    ticks = 1;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c3ea:	f7ff ff30 	bl	800c24e <inHandlerMode>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d018      	beq.n	800c426 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c3f4:	f107 0210 	add.w	r2, r7, #16
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 fb96 	bl	800cb30 <xQueueGenericSendFromISR>
 800c404:	4603      	mov	r3, r0
 800c406:	2b01      	cmp	r3, #1
 800c408:	d001      	beq.n	800c40e <osMessagePut+0x42>
      return osErrorOS;
 800c40a:	23ff      	movs	r3, #255	; 0xff
 800c40c:	e018      	b.n	800c440 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d014      	beq.n	800c43e <osMessagePut+0x72>
 800c414:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <osMessagePut+0x7c>)
 800c416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	e00b      	b.n	800c43e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c426:	f107 0108 	add.w	r1, r7, #8
 800c42a:	2300      	movs	r3, #0
 800c42c:	697a      	ldr	r2, [r7, #20]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f000 fa7c 	bl	800c92c <xQueueGenericSend>
 800c434:	4603      	mov	r3, r0
 800c436:	2b01      	cmp	r3, #1
 800c438:	d001      	beq.n	800c43e <osMessagePut+0x72>
      return osErrorOS;
 800c43a:	23ff      	movs	r3, #255	; 0xff
 800c43c:	e000      	b.n	800c440 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	e000ed04 	.word	0xe000ed04

0800c44c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c44c:	b590      	push	{r4, r7, lr}
 800c44e:	b08b      	sub	sp, #44	; 0x2c
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10a      	bne.n	800c47c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c466:	2380      	movs	r3, #128	; 0x80
 800c468:	617b      	str	r3, [r7, #20]
    return event;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	461c      	mov	r4, r3
 800c46e:	f107 0314 	add.w	r3, r7, #20
 800c472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c47a:	e054      	b.n	800c526 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c47c:	2300      	movs	r3, #0
 800c47e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48a:	d103      	bne.n	800c494 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c48c:	f04f 33ff 	mov.w	r3, #4294967295
 800c490:	627b      	str	r3, [r7, #36]	; 0x24
 800c492:	e009      	b.n	800c4a8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d006      	beq.n	800c4a8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d101      	bne.n	800c4a8 <osMessageGet+0x5c>
      ticks = 1;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c4a8:	f7ff fed1 	bl	800c24e <inHandlerMode>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d01c      	beq.n	800c4ec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c4b2:	f107 0220 	add.w	r2, r7, #32
 800c4b6:	f107 0314 	add.w	r3, r7, #20
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	4619      	mov	r1, r3
 800c4be:	68b8      	ldr	r0, [r7, #8]
 800c4c0:	f000 fe56 	bl	800d170 <xQueueReceiveFromISR>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d102      	bne.n	800c4d0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c4ca:	2310      	movs	r3, #16
 800c4cc:	617b      	str	r3, [r7, #20]
 800c4ce:	e001      	b.n	800c4d4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d01d      	beq.n	800c516 <osMessageGet+0xca>
 800c4da:	4b15      	ldr	r3, [pc, #84]	; (800c530 <osMessageGet+0xe4>)
 800c4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	e014      	b.n	800c516 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c4ec:	f107 0314 	add.w	r3, r7, #20
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	68b8      	ldr	r0, [r7, #8]
 800c4f8:	f000 fc48 	bl	800cd8c <xQueueReceive>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d102      	bne.n	800c508 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c502:	2310      	movs	r3, #16
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e006      	b.n	800c516 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <osMessageGet+0xc6>
 800c50e:	2300      	movs	r3, #0
 800c510:	e000      	b.n	800c514 <osMessageGet+0xc8>
 800c512:	2340      	movs	r3, #64	; 0x40
 800c514:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	461c      	mov	r4, r3
 800c51a:	f107 0314 	add.w	r3, r7, #20
 800c51e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	372c      	adds	r7, #44	; 0x2c
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd90      	pop	{r4, r7, pc}
 800c52e:	bf00      	nop
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f103 0208 	add.w	r2, r3, #8
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f04f 32ff 	mov.w	r2, #4294967295
 800c54c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f103 0208 	add.w	r2, r3, #8
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f103 0208 	add.w	r2, r3, #8
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c568:	bf00      	nop
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c582:	bf00      	nop
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	689a      	ldr	r2, [r3, #8]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	601a      	str	r2, [r3, #0]
}
 800c5ca:	bf00      	nop
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b085      	sub	sp, #20
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ec:	d103      	bne.n	800c5f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	e00c      	b.n	800c610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3308      	adds	r3, #8
 800c5fa:	60fb      	str	r3, [r7, #12]
 800c5fc:	e002      	b.n	800c604 <vListInsert+0x2e>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d2f6      	bcs.n	800c5fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	601a      	str	r2, [r3, #0]
}
 800c63c:	bf00      	nop
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	6892      	ldr	r2, [r2, #8]
 800c65e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	6852      	ldr	r2, [r2, #4]
 800c668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d103      	bne.n	800c67c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	1e5a      	subs	r2, r3, #1
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10b      	bne.n	800c6c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	b672      	cpsid	i
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	b662      	cpsie	i
 800c6c4:	60bb      	str	r3, [r7, #8]
 800c6c6:	e7fe      	b.n	800c6c6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c6c8:	f002 f86e 	bl	800e7a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d4:	68f9      	ldr	r1, [r7, #12]
 800c6d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6d8:	fb01 f303 	mul.w	r3, r1, r3
 800c6dc:	441a      	add	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	68f9      	ldr	r1, [r7, #12]
 800c6fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6fe:	fb01 f303 	mul.w	r3, r1, r3
 800c702:	441a      	add	r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	22ff      	movs	r2, #255	; 0xff
 800c70c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	22ff      	movs	r2, #255	; 0xff
 800c714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d114      	bne.n	800c748 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d01a      	beq.n	800c75c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	3310      	adds	r3, #16
 800c72a:	4618      	mov	r0, r3
 800c72c:	f001 fb36 	bl	800dd9c <xTaskRemoveFromEventList>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d012      	beq.n	800c75c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c736:	4b0d      	ldr	r3, [pc, #52]	; (800c76c <xQueueGenericReset+0xd0>)
 800c738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	e009      	b.n	800c75c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3310      	adds	r3, #16
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff fef1 	bl	800c534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	3324      	adds	r3, #36	; 0x24
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff feec 	bl	800c534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c75c:	f002 f856 	bl	800e80c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c760:	2301      	movs	r3, #1
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	e000ed04 	.word	0xe000ed04

0800c770 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08e      	sub	sp, #56	; 0x38
 800c774:	af02      	add	r7, sp, #8
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
 800c77c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10b      	bne.n	800c79c <xQueueGenericCreateStatic+0x2c>
 800c784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c788:	b672      	cpsid	i
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	b662      	cpsie	i
 800c798:	62bb      	str	r3, [r7, #40]	; 0x28
 800c79a:	e7fe      	b.n	800c79a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10b      	bne.n	800c7ba <xQueueGenericCreateStatic+0x4a>
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	b672      	cpsid	i
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	b662      	cpsie	i
 800c7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c7b8:	e7fe      	b.n	800c7b8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <xQueueGenericCreateStatic+0x56>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <xQueueGenericCreateStatic+0x5a>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e000      	b.n	800c7cc <xQueueGenericCreateStatic+0x5c>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10b      	bne.n	800c7e8 <xQueueGenericCreateStatic+0x78>
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	b672      	cpsid	i
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	b662      	cpsie	i
 800c7e4:	623b      	str	r3, [r7, #32]
 800c7e6:	e7fe      	b.n	800c7e6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d102      	bne.n	800c7f4 <xQueueGenericCreateStatic+0x84>
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <xQueueGenericCreateStatic+0x88>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e000      	b.n	800c7fa <xQueueGenericCreateStatic+0x8a>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10b      	bne.n	800c816 <xQueueGenericCreateStatic+0xa6>
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	b672      	cpsid	i
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	b662      	cpsie	i
 800c812:	61fb      	str	r3, [r7, #28]
 800c814:	e7fe      	b.n	800c814 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c816:	2348      	movs	r3, #72	; 0x48
 800c818:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b48      	cmp	r3, #72	; 0x48
 800c81e:	d00b      	beq.n	800c838 <xQueueGenericCreateStatic+0xc8>
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	b672      	cpsid	i
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	b662      	cpsie	i
 800c834:	61bb      	str	r3, [r7, #24]
 800c836:	e7fe      	b.n	800c836 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c838:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00d      	beq.n	800c860 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c84c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	4613      	mov	r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	68b9      	ldr	r1, [r7, #8]
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f000 f846 	bl	800c8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c862:	4618      	mov	r0, r3
 800c864:	3730      	adds	r7, #48	; 0x30
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b08a      	sub	sp, #40	; 0x28
 800c86e:	af02      	add	r7, sp, #8
 800c870:	60f8      	str	r0, [r7, #12]
 800c872:	60b9      	str	r1, [r7, #8]
 800c874:	4613      	mov	r3, r2
 800c876:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10b      	bne.n	800c896 <xQueueGenericCreate+0x2c>
 800c87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c882:	b672      	cpsid	i
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	b662      	cpsie	i
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	e7fe      	b.n	800c894 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d102      	bne.n	800c8a2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	61fb      	str	r3, [r7, #28]
 800c8a0:	e004      	b.n	800c8ac <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	fb02 f303 	mul.w	r3, r2, r3
 800c8aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	3348      	adds	r3, #72	; 0x48
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f002 f89b 	bl	800e9ec <pvPortMalloc>
 800c8b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d011      	beq.n	800c8e2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	3348      	adds	r3, #72	; 0x48
 800c8c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8d0:	79fa      	ldrb	r2, [r7, #7]
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	697a      	ldr	r2, [r7, #20]
 800c8da:	68b9      	ldr	r1, [r7, #8]
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f000 f805 	bl	800c8ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8e2:	69bb      	ldr	r3, [r7, #24]
	}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3720      	adds	r7, #32
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d103      	bne.n	800c908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	e002      	b.n	800c90e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c91a:	2101      	movs	r1, #1
 800c91c:	69b8      	ldr	r0, [r7, #24]
 800c91e:	f7ff febd 	bl	800c69c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c922:	bf00      	nop
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
	...

0800c92c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08e      	sub	sp, #56	; 0x38
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c93a:	2300      	movs	r3, #0
 800c93c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10b      	bne.n	800c960 <xQueueGenericSend+0x34>
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	b672      	cpsid	i
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	b662      	cpsie	i
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c95e:	e7fe      	b.n	800c95e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d103      	bne.n	800c96e <xQueueGenericSend+0x42>
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <xQueueGenericSend+0x46>
 800c96e:	2301      	movs	r3, #1
 800c970:	e000      	b.n	800c974 <xQueueGenericSend+0x48>
 800c972:	2300      	movs	r3, #0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10b      	bne.n	800c990 <xQueueGenericSend+0x64>
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	b672      	cpsid	i
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	b662      	cpsie	i
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
 800c98e:	e7fe      	b.n	800c98e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2b02      	cmp	r3, #2
 800c994:	d103      	bne.n	800c99e <xQueueGenericSend+0x72>
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d101      	bne.n	800c9a2 <xQueueGenericSend+0x76>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e000      	b.n	800c9a4 <xQueueGenericSend+0x78>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10b      	bne.n	800c9c0 <xQueueGenericSend+0x94>
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	b672      	cpsid	i
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	b662      	cpsie	i
 800c9bc:	623b      	str	r3, [r7, #32]
 800c9be:	e7fe      	b.n	800c9be <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9c0:	f001 fbac 	bl	800e11c <xTaskGetSchedulerState>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <xQueueGenericSend+0xa4>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d101      	bne.n	800c9d4 <xQueueGenericSend+0xa8>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e000      	b.n	800c9d6 <xQueueGenericSend+0xaa>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10b      	bne.n	800c9f2 <xQueueGenericSend+0xc6>
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	b672      	cpsid	i
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	b662      	cpsie	i
 800c9ee:	61fb      	str	r3, [r7, #28]
 800c9f0:	e7fe      	b.n	800c9f0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9f2:	f001 fed9 	bl	800e7a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d302      	bcc.n	800ca08 <xQueueGenericSend+0xdc>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d129      	bne.n	800ca5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	68b9      	ldr	r1, [r7, #8]
 800ca0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca0e:	f000 fc4a 	bl	800d2a6 <prvCopyDataToQueue>
 800ca12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d010      	beq.n	800ca3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1e:	3324      	adds	r3, #36	; 0x24
 800ca20:	4618      	mov	r0, r3
 800ca22:	f001 f9bb 	bl	800dd9c <xTaskRemoveFromEventList>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d013      	beq.n	800ca54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca2c:	4b3f      	ldr	r3, [pc, #252]	; (800cb2c <xQueueGenericSend+0x200>)
 800ca2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca32:	601a      	str	r2, [r3, #0]
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	e00a      	b.n	800ca54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d007      	beq.n	800ca54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca44:	4b39      	ldr	r3, [pc, #228]	; (800cb2c <xQueueGenericSend+0x200>)
 800ca46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ca54:	f001 feda 	bl	800e80c <vPortExitCritical>
				return pdPASS;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e063      	b.n	800cb24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca62:	f001 fed3 	bl	800e80c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ca66:	2300      	movs	r3, #0
 800ca68:	e05c      	b.n	800cb24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d106      	bne.n	800ca7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca70:	f107 0314 	add.w	r3, r7, #20
 800ca74:	4618      	mov	r0, r3
 800ca76:	f001 f9f5 	bl	800de64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca7e:	f001 fec5 	bl	800e80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca82:	f000 ff5b 	bl	800d93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca86:	f001 fe8f 	bl	800e7a8 <vPortEnterCritical>
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca90:	b25b      	sxtb	r3, r3
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca96:	d103      	bne.n	800caa0 <xQueueGenericSend+0x174>
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800caa6:	b25b      	sxtb	r3, r3
 800caa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caac:	d103      	bne.n	800cab6 <xQueueGenericSend+0x18a>
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cab6:	f001 fea9 	bl	800e80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caba:	1d3a      	adds	r2, r7, #4
 800cabc:	f107 0314 	add.w	r3, r7, #20
 800cac0:	4611      	mov	r1, r2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f001 f9e4 	bl	800de90 <xTaskCheckForTimeOut>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d124      	bne.n	800cb18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cad0:	f000 fce1 	bl	800d496 <prvIsQueueFull>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d018      	beq.n	800cb0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	3310      	adds	r3, #16
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f001 f934 	bl	800dd50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caea:	f000 fc6c 	bl	800d3c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800caee:	f000 ff33 	bl	800d958 <xTaskResumeAll>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f47f af7c 	bne.w	800c9f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cafa:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <xQueueGenericSend+0x200>)
 800cafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	e772      	b.n	800c9f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb0e:	f000 fc5a 	bl	800d3c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb12:	f000 ff21 	bl	800d958 <xTaskResumeAll>
 800cb16:	e76c      	b.n	800c9f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb1a:	f000 fc54 	bl	800d3c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb1e:	f000 ff1b 	bl	800d958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3738      	adds	r7, #56	; 0x38
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	e000ed04 	.word	0xe000ed04

0800cb30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08e      	sub	sp, #56	; 0x38
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10b      	bne.n	800cb60 <xQueueGenericSendFromISR+0x30>
 800cb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4c:	b672      	cpsid	i
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	b662      	cpsie	i
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb5e:	e7fe      	b.n	800cb5e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d103      	bne.n	800cb6e <xQueueGenericSendFromISR+0x3e>
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <xQueueGenericSendFromISR+0x42>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e000      	b.n	800cb74 <xQueueGenericSendFromISR+0x44>
 800cb72:	2300      	movs	r3, #0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10b      	bne.n	800cb90 <xQueueGenericSendFromISR+0x60>
 800cb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7c:	b672      	cpsid	i
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	b662      	cpsie	i
 800cb8c:	623b      	str	r3, [r7, #32]
 800cb8e:	e7fe      	b.n	800cb8e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d103      	bne.n	800cb9e <xQueueGenericSendFromISR+0x6e>
 800cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d101      	bne.n	800cba2 <xQueueGenericSendFromISR+0x72>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e000      	b.n	800cba4 <xQueueGenericSendFromISR+0x74>
 800cba2:	2300      	movs	r3, #0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10b      	bne.n	800cbc0 <xQueueGenericSendFromISR+0x90>
 800cba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbac:	b672      	cpsid	i
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	b662      	cpsie	i
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	e7fe      	b.n	800cbbe <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbc0:	f001 fed2 	bl	800e968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cbc4:	f3ef 8211 	mrs	r2, BASEPRI
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	b672      	cpsid	i
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	b662      	cpsie	i
 800cbdc:	61ba      	str	r2, [r7, #24]
 800cbde:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cbe0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d302      	bcc.n	800cbf6 <xQueueGenericSendFromISR+0xc6>
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d12c      	bne.n	800cc50 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	68b9      	ldr	r1, [r7, #8]
 800cc04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc06:	f000 fb4e 	bl	800d2a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc12:	d112      	bne.n	800cc3a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d016      	beq.n	800cc4a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	3324      	adds	r3, #36	; 0x24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f001 f8bb 	bl	800dd9c <xTaskRemoveFromEventList>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00e      	beq.n	800cc4a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00b      	beq.n	800cc4a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	e007      	b.n	800cc4a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc3e:	3301      	adds	r3, #1
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	b25a      	sxtb	r2, r3
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cc4e:	e001      	b.n	800cc54 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc50:	2300      	movs	r3, #0
 800cc52:	637b      	str	r3, [r7, #52]	; 0x34
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3738      	adds	r7, #56	; 0x38
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08e      	sub	sp, #56	; 0x38
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10b      	bne.n	800cc94 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	b672      	cpsid	i
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	b662      	cpsie	i
 800cc90:	623b      	str	r3, [r7, #32]
 800cc92:	e7fe      	b.n	800cc92 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00b      	beq.n	800ccb4 <xQueueGiveFromISR+0x4c>
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	b672      	cpsid	i
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	b662      	cpsie	i
 800ccb0:	61fb      	str	r3, [r7, #28]
 800ccb2:	e7fe      	b.n	800ccb2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d103      	bne.n	800ccc4 <xQueueGiveFromISR+0x5c>
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <xQueueGiveFromISR+0x60>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e000      	b.n	800ccca <xQueueGiveFromISR+0x62>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10b      	bne.n	800cce6 <xQueueGiveFromISR+0x7e>
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	b672      	cpsid	i
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	b662      	cpsie	i
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	e7fe      	b.n	800cce4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cce6:	f001 fe3f 	bl	800e968 <vPortValidateInterruptPriority>
	__asm volatile
 800ccea:	f3ef 8211 	mrs	r2, BASEPRI
 800ccee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf2:	b672      	cpsid	i
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	b662      	cpsie	i
 800cd02:	617a      	str	r2, [r7, #20]
 800cd04:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cd06:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d22b      	bcs.n	800cd72 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd34:	d112      	bne.n	800cd5c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d016      	beq.n	800cd6c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd40:	3324      	adds	r3, #36	; 0x24
 800cd42:	4618      	mov	r0, r3
 800cd44:	f001 f82a 	bl	800dd9c <xTaskRemoveFromEventList>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00e      	beq.n	800cd6c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00b      	beq.n	800cd6c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2201      	movs	r2, #1
 800cd58:	601a      	str	r2, [r3, #0]
 800cd5a:	e007      	b.n	800cd6c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd60:	3301      	adds	r3, #1
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	b25a      	sxtb	r2, r3
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd70:	e001      	b.n	800cd76 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	637b      	str	r3, [r7, #52]	; 0x34
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3738      	adds	r7, #56	; 0x38
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
	...

0800cd8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08c      	sub	sp, #48	; 0x30
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10b      	bne.n	800cdbe <xQueueReceive+0x32>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	b672      	cpsid	i
 800cdac:	f383 8811 	msr	BASEPRI, r3
 800cdb0:	f3bf 8f6f 	isb	sy
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	b662      	cpsie	i
 800cdba:	623b      	str	r3, [r7, #32]
 800cdbc:	e7fe      	b.n	800cdbc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d103      	bne.n	800cdcc <xQueueReceive+0x40>
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <xQueueReceive+0x44>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e000      	b.n	800cdd2 <xQueueReceive+0x46>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <xQueueReceive+0x62>
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	b672      	cpsid	i
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	b662      	cpsie	i
 800cdea:	61fb      	str	r3, [r7, #28]
 800cdec:	e7fe      	b.n	800cdec <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdee:	f001 f995 	bl	800e11c <xTaskGetSchedulerState>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d102      	bne.n	800cdfe <xQueueReceive+0x72>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d101      	bne.n	800ce02 <xQueueReceive+0x76>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e000      	b.n	800ce04 <xQueueReceive+0x78>
 800ce02:	2300      	movs	r3, #0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10b      	bne.n	800ce20 <xQueueReceive+0x94>
 800ce08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0c:	b672      	cpsid	i
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	b662      	cpsie	i
 800ce1c:	61bb      	str	r3, [r7, #24]
 800ce1e:	e7fe      	b.n	800ce1e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce20:	f001 fcc2 	bl	800e7a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce28:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d01f      	beq.n	800ce70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce30:	68b9      	ldr	r1, [r7, #8]
 800ce32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce34:	f000 faa1 	bl	800d37a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	1e5a      	subs	r2, r3, #1
 800ce3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00f      	beq.n	800ce68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	3310      	adds	r3, #16
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 ffa5 	bl	800dd9c <xTaskRemoveFromEventList>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d007      	beq.n	800ce68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce58:	4b3c      	ldr	r3, [pc, #240]	; (800cf4c <xQueueReceive+0x1c0>)
 800ce5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce68:	f001 fcd0 	bl	800e80c <vPortExitCritical>
				return pdPASS;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e069      	b.n	800cf44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d103      	bne.n	800ce7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce76:	f001 fcc9 	bl	800e80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	e062      	b.n	800cf44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d106      	bne.n	800ce92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce84:	f107 0310 	add.w	r3, r7, #16
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 ffeb 	bl	800de64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce92:	f001 fcbb 	bl	800e80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce96:	f000 fd51 	bl	800d93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce9a:	f001 fc85 	bl	800e7a8 <vPortEnterCritical>
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cea4:	b25b      	sxtb	r3, r3
 800cea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceaa:	d103      	bne.n	800ceb4 <xQueueReceive+0x128>
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceba:	b25b      	sxtb	r3, r3
 800cebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec0:	d103      	bne.n	800ceca <xQueueReceive+0x13e>
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ceca:	f001 fc9f 	bl	800e80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cece:	1d3a      	adds	r2, r7, #4
 800ced0:	f107 0310 	add.w	r3, r7, #16
 800ced4:	4611      	mov	r1, r2
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 ffda 	bl	800de90 <xTaskCheckForTimeOut>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d123      	bne.n	800cf2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cee4:	f000 fac1 	bl	800d46a <prvIsQueueEmpty>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d017      	beq.n	800cf1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ceee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef0:	3324      	adds	r3, #36	; 0x24
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	4611      	mov	r1, r2
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 ff2a 	bl	800dd50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cefc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cefe:	f000 fa62 	bl	800d3c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf02:	f000 fd29 	bl	800d958 <xTaskResumeAll>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d189      	bne.n	800ce20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cf0c:	4b0f      	ldr	r3, [pc, #60]	; (800cf4c <xQueueReceive+0x1c0>)
 800cf0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	e780      	b.n	800ce20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cf1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf20:	f000 fa51 	bl	800d3c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf24:	f000 fd18 	bl	800d958 <xTaskResumeAll>
 800cf28:	e77a      	b.n	800ce20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cf2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf2c:	f000 fa4b 	bl	800d3c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf30:	f000 fd12 	bl	800d958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf36:	f000 fa98 	bl	800d46a <prvIsQueueEmpty>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f43f af6f 	beq.w	800ce20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3730      	adds	r7, #48	; 0x30
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	e000ed04 	.word	0xe000ed04

0800cf50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b08e      	sub	sp, #56	; 0x38
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10b      	bne.n	800cf84 <xQueueSemaphoreTake+0x34>
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	b672      	cpsid	i
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	b662      	cpsie	i
 800cf80:	623b      	str	r3, [r7, #32]
 800cf82:	e7fe      	b.n	800cf82 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00b      	beq.n	800cfa4 <xQueueSemaphoreTake+0x54>
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	b672      	cpsid	i
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	b662      	cpsie	i
 800cfa0:	61fb      	str	r3, [r7, #28]
 800cfa2:	e7fe      	b.n	800cfa2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfa4:	f001 f8ba 	bl	800e11c <xTaskGetSchedulerState>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d102      	bne.n	800cfb4 <xQueueSemaphoreTake+0x64>
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <xQueueSemaphoreTake+0x68>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e000      	b.n	800cfba <xQueueSemaphoreTake+0x6a>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <xQueueSemaphoreTake+0x86>
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	b672      	cpsid	i
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	b662      	cpsie	i
 800cfd2:	61bb      	str	r3, [r7, #24]
 800cfd4:	e7fe      	b.n	800cfd4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfd6:	f001 fbe7 	bl	800e7a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfde:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d024      	beq.n	800d030 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe8:	1e5a      	subs	r2, r3, #1
 800cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfec:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d104      	bne.n	800d000 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cff6:	f001 fa53 	bl	800e4a0 <pvTaskIncrementMutexHeldCount>
 800cffa:	4602      	mov	r2, r0
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00f      	beq.n	800d028 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00a:	3310      	adds	r3, #16
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fec5 	bl	800dd9c <xTaskRemoveFromEventList>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d007      	beq.n	800d028 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d018:	4b54      	ldr	r3, [pc, #336]	; (800d16c <xQueueSemaphoreTake+0x21c>)
 800d01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d01e:	601a      	str	r2, [r3, #0]
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d028:	f001 fbf0 	bl	800e80c <vPortExitCritical>
				return pdPASS;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e098      	b.n	800d162 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d112      	bne.n	800d05c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <xQueueSemaphoreTake+0x104>
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	b672      	cpsid	i
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	b662      	cpsie	i
 800d050:	617b      	str	r3, [r7, #20]
 800d052:	e7fe      	b.n	800d052 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d054:	f001 fbda 	bl	800e80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d058:	2300      	movs	r3, #0
 800d05a:	e082      	b.n	800d162 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d062:	f107 030c 	add.w	r3, r7, #12
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fefc 	bl	800de64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d06c:	2301      	movs	r3, #1
 800d06e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d070:	f001 fbcc 	bl	800e80c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d074:	f000 fc62 	bl	800d93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d078:	f001 fb96 	bl	800e7a8 <vPortEnterCritical>
 800d07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d082:	b25b      	sxtb	r3, r3
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d088:	d103      	bne.n	800d092 <xQueueSemaphoreTake+0x142>
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d098:	b25b      	sxtb	r3, r3
 800d09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09e:	d103      	bne.n	800d0a8 <xQueueSemaphoreTake+0x158>
 800d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0a8:	f001 fbb0 	bl	800e80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0ac:	463a      	mov	r2, r7
 800d0ae:	f107 030c 	add.w	r3, r7, #12
 800d0b2:	4611      	mov	r1, r2
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 feeb 	bl	800de90 <xTaskCheckForTimeOut>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d132      	bne.n	800d126 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0c2:	f000 f9d2 	bl	800d46a <prvIsQueueEmpty>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d026      	beq.n	800d11a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d109      	bne.n	800d0e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d0d4:	f001 fb68 	bl	800e7a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f001 f83b 	bl	800e158 <xTaskPriorityInherit>
 800d0e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d0e4:	f001 fb92 	bl	800e80c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	3324      	adds	r3, #36	; 0x24
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f000 fe2d 	bl	800dd50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0f8:	f000 f965 	bl	800d3c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0fc:	f000 fc2c 	bl	800d958 <xTaskResumeAll>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	f47f af67 	bne.w	800cfd6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d108:	4b18      	ldr	r3, [pc, #96]	; (800d16c <xQueueSemaphoreTake+0x21c>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	e75d      	b.n	800cfd6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d11a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d11c:	f000 f953 	bl	800d3c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d120:	f000 fc1a 	bl	800d958 <xTaskResumeAll>
 800d124:	e757      	b.n	800cfd6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d128:	f000 f94d 	bl	800d3c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d12c:	f000 fc14 	bl	800d958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d132:	f000 f99a 	bl	800d46a <prvIsQueueEmpty>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f43f af4c 	beq.w	800cfd6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00d      	beq.n	800d160 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d144:	f001 fb30 	bl	800e7a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d14a:	f000 f894 	bl	800d276 <prvGetDisinheritPriorityAfterTimeout>
 800d14e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d156:	4618      	mov	r0, r3
 800d158:	f001 f906 	bl	800e368 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d15c:	f001 fb56 	bl	800e80c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d162:	4618      	mov	r0, r3
 800d164:	3738      	adds	r7, #56	; 0x38
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	e000ed04 	.word	0xe000ed04

0800d170 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08e      	sub	sp, #56	; 0x38
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10b      	bne.n	800d19e <xQueueReceiveFromISR+0x2e>
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	b672      	cpsid	i
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	b662      	cpsie	i
 800d19a:	623b      	str	r3, [r7, #32]
 800d19c:	e7fe      	b.n	800d19c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d103      	bne.n	800d1ac <xQueueReceiveFromISR+0x3c>
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <xQueueReceiveFromISR+0x40>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e000      	b.n	800d1b2 <xQueueReceiveFromISR+0x42>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10b      	bne.n	800d1ce <xQueueReceiveFromISR+0x5e>
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	b672      	cpsid	i
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	b662      	cpsie	i
 800d1ca:	61fb      	str	r3, [r7, #28]
 800d1cc:	e7fe      	b.n	800d1cc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1ce:	f001 fbcb 	bl	800e968 <vPortValidateInterruptPriority>
	__asm volatile
 800d1d2:	f3ef 8211 	mrs	r2, BASEPRI
 800d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1da:	b672      	cpsid	i
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	b662      	cpsie	i
 800d1ea:	61ba      	str	r2, [r7, #24]
 800d1ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d1ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d02f      	beq.n	800d25e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d208:	68b9      	ldr	r1, [r7, #8]
 800d20a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d20c:	f000 f8b5 	bl	800d37a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	1e5a      	subs	r2, r3, #1
 800d214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d216:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d218:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d220:	d112      	bne.n	800d248 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	691b      	ldr	r3, [r3, #16]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d016      	beq.n	800d258 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22c:	3310      	adds	r3, #16
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 fdb4 	bl	800dd9c <xTaskRemoveFromEventList>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00e      	beq.n	800d258 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00b      	beq.n	800d258 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	e007      	b.n	800d258 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d24c:	3301      	adds	r3, #1
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	b25a      	sxtb	r2, r3
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d258:	2301      	movs	r3, #1
 800d25a:	637b      	str	r3, [r7, #52]	; 0x34
 800d25c:	e001      	b.n	800d262 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d25e:	2300      	movs	r3, #0
 800d260:	637b      	str	r3, [r7, #52]	; 0x34
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3738      	adds	r7, #56	; 0x38
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d276:	b480      	push	{r7}
 800d278:	b085      	sub	sp, #20
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	2b00      	cmp	r3, #0
 800d284:	d006      	beq.n	800d294 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f1c3 0307 	rsb	r3, r3, #7
 800d290:	60fb      	str	r3, [r7, #12]
 800d292:	e001      	b.n	800d298 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d294:	2300      	movs	r3, #0
 800d296:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d298:	68fb      	ldr	r3, [r7, #12]
	}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3714      	adds	r7, #20
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b086      	sub	sp, #24
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10d      	bne.n	800d2e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d14d      	bne.n	800d368 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 ffc1 	bl	800e258 <xTaskPriorityDisinherit>
 800d2d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	609a      	str	r2, [r3, #8]
 800d2de:	e043      	b.n	800d368 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d119      	bne.n	800d31a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6858      	ldr	r0, [r3, #4]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	68b9      	ldr	r1, [r7, #8]
 800d2f2:	f017 fde1 	bl	8024eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fe:	441a      	add	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	685a      	ldr	r2, [r3, #4]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d32b      	bcc.n	800d368 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	605a      	str	r2, [r3, #4]
 800d318:	e026      	b.n	800d368 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	68d8      	ldr	r0, [r3, #12]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d322:	461a      	mov	r2, r3
 800d324:	68b9      	ldr	r1, [r7, #8]
 800d326:	f017 fdc7 	bl	8024eb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	68da      	ldr	r2, [r3, #12]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d332:	425b      	negs	r3, r3
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	68da      	ldr	r2, [r3, #12]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	d207      	bcs.n	800d356 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34e:	425b      	negs	r3, r3
 800d350:	441a      	add	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d105      	bne.n	800d368 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d002      	beq.n	800d368 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	3b01      	subs	r3, #1
 800d366:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d370:	697b      	ldr	r3, [r7, #20]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3718      	adds	r7, #24
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b082      	sub	sp, #8
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d018      	beq.n	800d3be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68da      	ldr	r2, [r3, #12]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d394:	441a      	add	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68da      	ldr	r2, [r3, #12]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d303      	bcc.n	800d3ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	68d9      	ldr	r1, [r3, #12]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	6838      	ldr	r0, [r7, #0]
 800d3ba:	f017 fd7d 	bl	8024eb8 <memcpy>
	}
}
 800d3be:	bf00      	nop
 800d3c0:	3708      	adds	r7, #8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b084      	sub	sp, #16
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3ce:	f001 f9eb 	bl	800e7a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3da:	e011      	b.n	800d400 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d012      	beq.n	800d40a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	3324      	adds	r3, #36	; 0x24
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 fcd7 	bl	800dd9c <xTaskRemoveFromEventList>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3f4:	f000 fdb0 	bl	800df58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3f8:	7bfb      	ldrb	r3, [r7, #15]
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d404:	2b00      	cmp	r3, #0
 800d406:	dce9      	bgt.n	800d3dc <prvUnlockQueue+0x16>
 800d408:	e000      	b.n	800d40c <prvUnlockQueue+0x46>
					break;
 800d40a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	22ff      	movs	r2, #255	; 0xff
 800d410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d414:	f001 f9fa 	bl	800e80c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d418:	f001 f9c6 	bl	800e7a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d422:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d424:	e011      	b.n	800d44a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	691b      	ldr	r3, [r3, #16]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d012      	beq.n	800d454 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	3310      	adds	r3, #16
 800d432:	4618      	mov	r0, r3
 800d434:	f000 fcb2 	bl	800dd9c <xTaskRemoveFromEventList>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d43e:	f000 fd8b 	bl	800df58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d442:	7bbb      	ldrb	r3, [r7, #14]
 800d444:	3b01      	subs	r3, #1
 800d446:	b2db      	uxtb	r3, r3
 800d448:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d44a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	dce9      	bgt.n	800d426 <prvUnlockQueue+0x60>
 800d452:	e000      	b.n	800d456 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d454:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	22ff      	movs	r2, #255	; 0xff
 800d45a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d45e:	f001 f9d5 	bl	800e80c <vPortExitCritical>
}
 800d462:	bf00      	nop
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b084      	sub	sp, #16
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d472:	f001 f999 	bl	800e7a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d102      	bne.n	800d484 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d47e:	2301      	movs	r3, #1
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	e001      	b.n	800d488 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d484:	2300      	movs	r3, #0
 800d486:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d488:	f001 f9c0 	bl	800e80c <vPortExitCritical>

	return xReturn;
 800d48c:	68fb      	ldr	r3, [r7, #12]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b084      	sub	sp, #16
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d49e:	f001 f983 	bl	800e7a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d102      	bne.n	800d4b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	e001      	b.n	800d4b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4b8:	f001 f9a8 	bl	800e80c <vPortExitCritical>

	return xReturn;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b08e      	sub	sp, #56	; 0x38
 800d4ca:	af04      	add	r7, sp, #16
 800d4cc:	60f8      	str	r0, [r7, #12]
 800d4ce:	60b9      	str	r1, [r7, #8]
 800d4d0:	607a      	str	r2, [r7, #4]
 800d4d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10b      	bne.n	800d4f2 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	b672      	cpsid	i
 800d4e0:	f383 8811 	msr	BASEPRI, r3
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	f3bf 8f4f 	dsb	sy
 800d4ec:	b662      	cpsie	i
 800d4ee:	623b      	str	r3, [r7, #32]
 800d4f0:	e7fe      	b.n	800d4f0 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10b      	bne.n	800d510 <xTaskCreateStatic+0x4a>
 800d4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fc:	b672      	cpsid	i
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	b662      	cpsie	i
 800d50c:	61fb      	str	r3, [r7, #28]
 800d50e:	e7fe      	b.n	800d50e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d510:	2358      	movs	r3, #88	; 0x58
 800d512:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2b58      	cmp	r3, #88	; 0x58
 800d518:	d00b      	beq.n	800d532 <xTaskCreateStatic+0x6c>
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	b672      	cpsid	i
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	b662      	cpsie	i
 800d52e:	61bb      	str	r3, [r7, #24]
 800d530:	e7fe      	b.n	800d530 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d532:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	2b00      	cmp	r3, #0
 800d538:	d01e      	beq.n	800d578 <xTaskCreateStatic+0xb2>
 800d53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d01b      	beq.n	800d578 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d548:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	2202      	movs	r2, #2
 800d54e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d552:	2300      	movs	r3, #0
 800d554:	9303      	str	r3, [sp, #12]
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	9302      	str	r3, [sp, #8]
 800d55a:	f107 0314 	add.w	r3, r7, #20
 800d55e:	9301      	str	r3, [sp, #4]
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	68b9      	ldr	r1, [r7, #8]
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f000 f850 	bl	800d610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d572:	f000 f8e1 	bl	800d738 <prvAddNewTaskToReadyList>
 800d576:	e001      	b.n	800d57c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d57c:	697b      	ldr	r3, [r7, #20]
	}
 800d57e:	4618      	mov	r0, r3
 800d580:	3728      	adds	r7, #40	; 0x28
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d586:	b580      	push	{r7, lr}
 800d588:	b08c      	sub	sp, #48	; 0x30
 800d58a:	af04      	add	r7, sp, #16
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	603b      	str	r3, [r7, #0]
 800d592:	4613      	mov	r3, r2
 800d594:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d596:	88fb      	ldrh	r3, [r7, #6]
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f001 fa26 	bl	800e9ec <pvPortMalloc>
 800d5a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00e      	beq.n	800d5c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5a8:	2058      	movs	r0, #88	; 0x58
 800d5aa:	f001 fa1f 	bl	800e9ec <pvPortMalloc>
 800d5ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	631a      	str	r2, [r3, #48]	; 0x30
 800d5bc:	e005      	b.n	800d5ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d5be:	6978      	ldr	r0, [r7, #20]
 800d5c0:	f001 fae0 	bl	800eb84 <vPortFree>
 800d5c4:	e001      	b.n	800d5ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d017      	beq.n	800d600 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d5d8:	88fa      	ldrh	r2, [r7, #6]
 800d5da:	2300      	movs	r3, #0
 800d5dc:	9303      	str	r3, [sp, #12]
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	9302      	str	r3, [sp, #8]
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f000 f80e 	bl	800d610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5f4:	69f8      	ldr	r0, [r7, #28]
 800d5f6:	f000 f89f 	bl	800d738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	61bb      	str	r3, [r7, #24]
 800d5fe:	e002      	b.n	800d606 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d600:	f04f 33ff 	mov.w	r3, #4294967295
 800d604:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d606:	69bb      	ldr	r3, [r7, #24]
	}
 800d608:	4618      	mov	r0, r3
 800d60a:	3720      	adds	r7, #32
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	461a      	mov	r2, r3
 800d628:	21a5      	movs	r1, #165	; 0xa5
 800d62a:	f017 fc50 	bl	8024ece <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d632:	6879      	ldr	r1, [r7, #4]
 800d634:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d638:	440b      	add	r3, r1
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	f023 0307 	bic.w	r3, r3, #7
 800d646:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00b      	beq.n	800d66a <prvInitialiseNewTask+0x5a>
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	b672      	cpsid	i
 800d658:	f383 8811 	msr	BASEPRI, r3
 800d65c:	f3bf 8f6f 	isb	sy
 800d660:	f3bf 8f4f 	dsb	sy
 800d664:	b662      	cpsie	i
 800d666:	617b      	str	r3, [r7, #20]
 800d668:	e7fe      	b.n	800d668 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d01f      	beq.n	800d6b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d670:	2300      	movs	r3, #0
 800d672:	61fb      	str	r3, [r7, #28]
 800d674:	e012      	b.n	800d69c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	4413      	add	r3, r2
 800d67c:	7819      	ldrb	r1, [r3, #0]
 800d67e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	4413      	add	r3, r2
 800d684:	3334      	adds	r3, #52	; 0x34
 800d686:	460a      	mov	r2, r1
 800d688:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	4413      	add	r3, r2
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d006      	beq.n	800d6a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	3301      	adds	r3, #1
 800d69a:	61fb      	str	r3, [r7, #28]
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	2b0f      	cmp	r3, #15
 800d6a0:	d9e9      	bls.n	800d676 <prvInitialiseNewTask+0x66>
 800d6a2:	e000      	b.n	800d6a6 <prvInitialiseNewTask+0x96>
			{
				break;
 800d6a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6ae:	e003      	b.n	800d6b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	2b06      	cmp	r3, #6
 800d6bc:	d901      	bls.n	800d6c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6be:	2306      	movs	r3, #6
 800d6c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fe ff4b 	bl	800c574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e0:	3318      	adds	r3, #24
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe ff46 	bl	800c574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	f1c3 0207 	rsb	r2, r3, #7
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	2200      	movs	r2, #0
 800d702:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	2200      	movs	r2, #0
 800d708:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d712:	683a      	ldr	r2, [r7, #0]
 800d714:	68f9      	ldr	r1, [r7, #12]
 800d716:	69b8      	ldr	r0, [r7, #24]
 800d718:	f000 ff3c 	bl	800e594 <pxPortInitialiseStack>
 800d71c:	4602      	mov	r2, r0
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d72c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d72e:	bf00      	nop
 800d730:	3720      	adds	r7, #32
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
	...

0800d738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d740:	f001 f832 	bl	800e7a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d744:	4b2a      	ldr	r3, [pc, #168]	; (800d7f0 <prvAddNewTaskToReadyList+0xb8>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	3301      	adds	r3, #1
 800d74a:	4a29      	ldr	r2, [pc, #164]	; (800d7f0 <prvAddNewTaskToReadyList+0xb8>)
 800d74c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d74e:	4b29      	ldr	r3, [pc, #164]	; (800d7f4 <prvAddNewTaskToReadyList+0xbc>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d109      	bne.n	800d76a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d756:	4a27      	ldr	r2, [pc, #156]	; (800d7f4 <prvAddNewTaskToReadyList+0xbc>)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d75c:	4b24      	ldr	r3, [pc, #144]	; (800d7f0 <prvAddNewTaskToReadyList+0xb8>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d110      	bne.n	800d786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d764:	f000 fc1e 	bl	800dfa4 <prvInitialiseTaskLists>
 800d768:	e00d      	b.n	800d786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d76a:	4b23      	ldr	r3, [pc, #140]	; (800d7f8 <prvAddNewTaskToReadyList+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d109      	bne.n	800d786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d772:	4b20      	ldr	r3, [pc, #128]	; (800d7f4 <prvAddNewTaskToReadyList+0xbc>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d802      	bhi.n	800d786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d780:	4a1c      	ldr	r2, [pc, #112]	; (800d7f4 <prvAddNewTaskToReadyList+0xbc>)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d786:	4b1d      	ldr	r3, [pc, #116]	; (800d7fc <prvAddNewTaskToReadyList+0xc4>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3301      	adds	r3, #1
 800d78c:	4a1b      	ldr	r2, [pc, #108]	; (800d7fc <prvAddNewTaskToReadyList+0xc4>)
 800d78e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d794:	2201      	movs	r2, #1
 800d796:	409a      	lsls	r2, r3
 800d798:	4b19      	ldr	r3, [pc, #100]	; (800d800 <prvAddNewTaskToReadyList+0xc8>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	4a18      	ldr	r2, [pc, #96]	; (800d800 <prvAddNewTaskToReadyList+0xc8>)
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4a15      	ldr	r2, [pc, #84]	; (800d804 <prvAddNewTaskToReadyList+0xcc>)
 800d7b0:	441a      	add	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	f7fe fee8 	bl	800c58e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d7be:	f001 f825 	bl	800e80c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d7c2:	4b0d      	ldr	r3, [pc, #52]	; (800d7f8 <prvAddNewTaskToReadyList+0xc0>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00e      	beq.n	800d7e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d7ca:	4b0a      	ldr	r3, [pc, #40]	; (800d7f4 <prvAddNewTaskToReadyList+0xbc>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d207      	bcs.n	800d7e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d7d8:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <prvAddNewTaskToReadyList+0xd0>)
 800d7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7de:	601a      	str	r2, [r3, #0]
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7e8:	bf00      	nop
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	200004d4 	.word	0x200004d4
 800d7f4:	200003d4 	.word	0x200003d4
 800d7f8:	200004e0 	.word	0x200004e0
 800d7fc:	200004f0 	.word	0x200004f0
 800d800:	200004dc 	.word	0x200004dc
 800d804:	200003d8 	.word	0x200003d8
 800d808:	e000ed04 	.word	0xe000ed04

0800d80c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d814:	2300      	movs	r3, #0
 800d816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d018      	beq.n	800d850 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d81e:	4b14      	ldr	r3, [pc, #80]	; (800d870 <vTaskDelay+0x64>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00b      	beq.n	800d83e <vTaskDelay+0x32>
 800d826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82a:	b672      	cpsid	i
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	b662      	cpsie	i
 800d83a:	60bb      	str	r3, [r7, #8]
 800d83c:	e7fe      	b.n	800d83c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d83e:	f000 f87d 	bl	800d93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d842:	2100      	movs	r1, #0
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fe3f 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d84a:	f000 f885 	bl	800d958 <xTaskResumeAll>
 800d84e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d107      	bne.n	800d866 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d856:	4b07      	ldr	r3, [pc, #28]	; (800d874 <vTaskDelay+0x68>)
 800d858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	200004fc 	.word	0x200004fc
 800d874:	e000ed04 	.word	0xe000ed04

0800d878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b08a      	sub	sp, #40	; 0x28
 800d87c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d87e:	2300      	movs	r3, #0
 800d880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d882:	2300      	movs	r3, #0
 800d884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d886:	463a      	mov	r2, r7
 800d888:	1d39      	adds	r1, r7, #4
 800d88a:	f107 0308 	add.w	r3, r7, #8
 800d88e:	4618      	mov	r0, r3
 800d890:	f7f3 f93c 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	9202      	str	r2, [sp, #8]
 800d89c:	9301      	str	r3, [sp, #4]
 800d89e:	2300      	movs	r3, #0
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	460a      	mov	r2, r1
 800d8a6:	491f      	ldr	r1, [pc, #124]	; (800d924 <vTaskStartScheduler+0xac>)
 800d8a8:	481f      	ldr	r0, [pc, #124]	; (800d928 <vTaskStartScheduler+0xb0>)
 800d8aa:	f7ff fe0c 	bl	800d4c6 <xTaskCreateStatic>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	4b1e      	ldr	r3, [pc, #120]	; (800d92c <vTaskStartScheduler+0xb4>)
 800d8b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d8b4:	4b1d      	ldr	r3, [pc, #116]	; (800d92c <vTaskStartScheduler+0xb4>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	617b      	str	r3, [r7, #20]
 800d8c0:	e001      	b.n	800d8c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d117      	bne.n	800d8fc <vTaskStartScheduler+0x84>
 800d8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d0:	b672      	cpsid	i
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	b662      	cpsie	i
 800d8e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d8e2:	4b13      	ldr	r3, [pc, #76]	; (800d930 <vTaskStartScheduler+0xb8>)
 800d8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d8ea:	4b12      	ldr	r3, [pc, #72]	; (800d934 <vTaskStartScheduler+0xbc>)
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d8f0:	4b11      	ldr	r3, [pc, #68]	; (800d938 <vTaskStartScheduler+0xc0>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d8f6:	f000 fedb 	bl	800e6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d8fa:	e00f      	b.n	800d91c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d902:	d10b      	bne.n	800d91c <vTaskStartScheduler+0xa4>
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	b672      	cpsid	i
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	b662      	cpsie	i
 800d918:	60fb      	str	r3, [r7, #12]
 800d91a:	e7fe      	b.n	800d91a <vTaskStartScheduler+0xa2>
}
 800d91c:	bf00      	nop
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	08025e64 	.word	0x08025e64
 800d928:	0800df71 	.word	0x0800df71
 800d92c:	200004f8 	.word	0x200004f8
 800d930:	200004f4 	.word	0x200004f4
 800d934:	200004e0 	.word	0x200004e0
 800d938:	200004d8 	.word	0x200004d8

0800d93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d940:	4b04      	ldr	r3, [pc, #16]	; (800d954 <vTaskSuspendAll+0x18>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3301      	adds	r3, #1
 800d946:	4a03      	ldr	r2, [pc, #12]	; (800d954 <vTaskSuspendAll+0x18>)
 800d948:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d94a:	bf00      	nop
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	200004fc 	.word	0x200004fc

0800d958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d962:	2300      	movs	r3, #0
 800d964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d966:	4b42      	ldr	r3, [pc, #264]	; (800da70 <xTaskResumeAll+0x118>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10b      	bne.n	800d986 <xTaskResumeAll+0x2e>
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	b672      	cpsid	i
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	b662      	cpsie	i
 800d982:	603b      	str	r3, [r7, #0]
 800d984:	e7fe      	b.n	800d984 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d986:	f000 ff0f 	bl	800e7a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d98a:	4b39      	ldr	r3, [pc, #228]	; (800da70 <xTaskResumeAll+0x118>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	3b01      	subs	r3, #1
 800d990:	4a37      	ldr	r2, [pc, #220]	; (800da70 <xTaskResumeAll+0x118>)
 800d992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d994:	4b36      	ldr	r3, [pc, #216]	; (800da70 <xTaskResumeAll+0x118>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d161      	bne.n	800da60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d99c:	4b35      	ldr	r3, [pc, #212]	; (800da74 <xTaskResumeAll+0x11c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d05d      	beq.n	800da60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9a4:	e02e      	b.n	800da04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9a6:	4b34      	ldr	r3, [pc, #208]	; (800da78 <xTaskResumeAll+0x120>)
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	3318      	adds	r3, #24
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe fe48 	bl	800c648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fe fe43 	bl	800c648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	409a      	lsls	r2, r3
 800d9ca:	4b2c      	ldr	r3, [pc, #176]	; (800da7c <xTaskResumeAll+0x124>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	4a2a      	ldr	r2, [pc, #168]	; (800da7c <xTaskResumeAll+0x124>)
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4a27      	ldr	r2, [pc, #156]	; (800da80 <xTaskResumeAll+0x128>)
 800d9e2:	441a      	add	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fe fdcf 	bl	800c58e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f4:	4b23      	ldr	r3, [pc, #140]	; (800da84 <xTaskResumeAll+0x12c>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d302      	bcc.n	800da04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d9fe:	4b22      	ldr	r3, [pc, #136]	; (800da88 <xTaskResumeAll+0x130>)
 800da00:	2201      	movs	r2, #1
 800da02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da04:	4b1c      	ldr	r3, [pc, #112]	; (800da78 <xTaskResumeAll+0x120>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1cc      	bne.n	800d9a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d001      	beq.n	800da16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da12:	f000 fb63 	bl	800e0dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800da16:	4b1d      	ldr	r3, [pc, #116]	; (800da8c <xTaskResumeAll+0x134>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d010      	beq.n	800da44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da22:	f000 f859 	bl	800dad8 <xTaskIncrementTick>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800da2c:	4b16      	ldr	r3, [pc, #88]	; (800da88 <xTaskResumeAll+0x130>)
 800da2e:	2201      	movs	r2, #1
 800da30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	3b01      	subs	r3, #1
 800da36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1f1      	bne.n	800da22 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800da3e:	4b13      	ldr	r3, [pc, #76]	; (800da8c <xTaskResumeAll+0x134>)
 800da40:	2200      	movs	r2, #0
 800da42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da44:	4b10      	ldr	r3, [pc, #64]	; (800da88 <xTaskResumeAll+0x130>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d009      	beq.n	800da60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da50:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <xTaskResumeAll+0x138>)
 800da52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da60:	f000 fed4 	bl	800e80c <vPortExitCritical>

	return xAlreadyYielded;
 800da64:	68bb      	ldr	r3, [r7, #8]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	200004fc 	.word	0x200004fc
 800da74:	200004d4 	.word	0x200004d4
 800da78:	20000494 	.word	0x20000494
 800da7c:	200004dc 	.word	0x200004dc
 800da80:	200003d8 	.word	0x200003d8
 800da84:	200003d4 	.word	0x200003d4
 800da88:	200004e8 	.word	0x200004e8
 800da8c:	200004e4 	.word	0x200004e4
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800da9a:	4b05      	ldr	r3, [pc, #20]	; (800dab0 <xTaskGetTickCount+0x1c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800daa0:	687b      	ldr	r3, [r7, #4]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	200004d8 	.word	0x200004d8

0800dab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daba:	f000 ff55 	bl	800e968 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dabe:	2300      	movs	r3, #0
 800dac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dac2:	4b04      	ldr	r3, [pc, #16]	; (800dad4 <xTaskGetTickCountFromISR+0x20>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dac8:	683b      	ldr	r3, [r7, #0]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	200004d8 	.word	0x200004d8

0800dad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b086      	sub	sp, #24
 800dadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dae2:	4b4f      	ldr	r3, [pc, #316]	; (800dc20 <xTaskIncrementTick+0x148>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f040 8089 	bne.w	800dbfe <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800daec:	4b4d      	ldr	r3, [pc, #308]	; (800dc24 <xTaskIncrementTick+0x14c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3301      	adds	r3, #1
 800daf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800daf4:	4a4b      	ldr	r2, [pc, #300]	; (800dc24 <xTaskIncrementTick+0x14c>)
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d121      	bne.n	800db44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800db00:	4b49      	ldr	r3, [pc, #292]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00b      	beq.n	800db22 <xTaskIncrementTick+0x4a>
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	b672      	cpsid	i
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	b662      	cpsie	i
 800db1e:	603b      	str	r3, [r7, #0]
 800db20:	e7fe      	b.n	800db20 <xTaskIncrementTick+0x48>
 800db22:	4b41      	ldr	r3, [pc, #260]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	60fb      	str	r3, [r7, #12]
 800db28:	4b40      	ldr	r3, [pc, #256]	; (800dc2c <xTaskIncrementTick+0x154>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a3e      	ldr	r2, [pc, #248]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db2e:	6013      	str	r3, [r2, #0]
 800db30:	4a3e      	ldr	r2, [pc, #248]	; (800dc2c <xTaskIncrementTick+0x154>)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6013      	str	r3, [r2, #0]
 800db36:	4b3e      	ldr	r3, [pc, #248]	; (800dc30 <xTaskIncrementTick+0x158>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	3301      	adds	r3, #1
 800db3c:	4a3c      	ldr	r2, [pc, #240]	; (800dc30 <xTaskIncrementTick+0x158>)
 800db3e:	6013      	str	r3, [r2, #0]
 800db40:	f000 facc 	bl	800e0dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db44:	4b3b      	ldr	r3, [pc, #236]	; (800dc34 <xTaskIncrementTick+0x15c>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d348      	bcc.n	800dbe0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db4e:	4b36      	ldr	r3, [pc, #216]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d104      	bne.n	800db62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db58:	4b36      	ldr	r3, [pc, #216]	; (800dc34 <xTaskIncrementTick+0x15c>)
 800db5a:	f04f 32ff 	mov.w	r2, #4294967295
 800db5e:	601a      	str	r2, [r3, #0]
					break;
 800db60:	e03e      	b.n	800dbe0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db62:	4b31      	ldr	r3, [pc, #196]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db72:	693a      	ldr	r2, [r7, #16]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	429a      	cmp	r2, r3
 800db78:	d203      	bcs.n	800db82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db7a:	4a2e      	ldr	r2, [pc, #184]	; (800dc34 <xTaskIncrementTick+0x15c>)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db80:	e02e      	b.n	800dbe0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	3304      	adds	r3, #4
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe fd5e 	bl	800c648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db90:	2b00      	cmp	r3, #0
 800db92:	d004      	beq.n	800db9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	3318      	adds	r3, #24
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe fd55 	bl	800c648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba2:	2201      	movs	r2, #1
 800dba4:	409a      	lsls	r2, r3
 800dba6:	4b24      	ldr	r3, [pc, #144]	; (800dc38 <xTaskIncrementTick+0x160>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	4a22      	ldr	r2, [pc, #136]	; (800dc38 <xTaskIncrementTick+0x160>)
 800dbae:	6013      	str	r3, [r2, #0]
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4413      	add	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4a1f      	ldr	r2, [pc, #124]	; (800dc3c <xTaskIncrementTick+0x164>)
 800dbbe:	441a      	add	r2, r3
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	f7fe fce1 	bl	800c58e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd0:	4b1b      	ldr	r3, [pc, #108]	; (800dc40 <xTaskIncrementTick+0x168>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d3b9      	bcc.n	800db4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbde:	e7b6      	b.n	800db4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dbe0:	4b17      	ldr	r3, [pc, #92]	; (800dc40 <xTaskIncrementTick+0x168>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe6:	4915      	ldr	r1, [pc, #84]	; (800dc3c <xTaskIncrementTick+0x164>)
 800dbe8:	4613      	mov	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	440b      	add	r3, r1
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d907      	bls.n	800dc08 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	e004      	b.n	800dc08 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dbfe:	4b11      	ldr	r3, [pc, #68]	; (800dc44 <xTaskIncrementTick+0x16c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	3301      	adds	r3, #1
 800dc04:	4a0f      	ldr	r2, [pc, #60]	; (800dc44 <xTaskIncrementTick+0x16c>)
 800dc06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dc08:	4b0f      	ldr	r3, [pc, #60]	; (800dc48 <xTaskIncrementTick+0x170>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800dc10:	2301      	movs	r3, #1
 800dc12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dc14:	697b      	ldr	r3, [r7, #20]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3718      	adds	r7, #24
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	200004fc 	.word	0x200004fc
 800dc24:	200004d8 	.word	0x200004d8
 800dc28:	2000048c 	.word	0x2000048c
 800dc2c:	20000490 	.word	0x20000490
 800dc30:	200004ec 	.word	0x200004ec
 800dc34:	200004f4 	.word	0x200004f4
 800dc38:	200004dc 	.word	0x200004dc
 800dc3c:	200003d8 	.word	0x200003d8
 800dc40:	200003d4 	.word	0x200003d4
 800dc44:	200004e4 	.word	0x200004e4
 800dc48:	200004e8 	.word	0x200004e8

0800dc4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc52:	4b3a      	ldr	r3, [pc, #232]	; (800dd3c <vTaskSwitchContext+0xf0>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc5a:	4b39      	ldr	r3, [pc, #228]	; (800dd40 <vTaskSwitchContext+0xf4>)
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc60:	e067      	b.n	800dd32 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800dc62:	4b37      	ldr	r3, [pc, #220]	; (800dd40 <vTaskSwitchContext+0xf4>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dc68:	4b36      	ldr	r3, [pc, #216]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc6e:	61fb      	str	r3, [r7, #28]
 800dc70:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dc74:	61bb      	str	r3, [r7, #24]
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	69ba      	ldr	r2, [r7, #24]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d111      	bne.n	800dca4 <vTaskSwitchContext+0x58>
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	3304      	adds	r3, #4
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d10b      	bne.n	800dca4 <vTaskSwitchContext+0x58>
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	3308      	adds	r3, #8
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	69ba      	ldr	r2, [r7, #24]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d105      	bne.n	800dca4 <vTaskSwitchContext+0x58>
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	330c      	adds	r3, #12
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	69ba      	ldr	r2, [r7, #24]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d008      	beq.n	800dcb6 <vTaskSwitchContext+0x6a>
 800dca4:	4b27      	ldr	r3, [pc, #156]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	4b26      	ldr	r3, [pc, #152]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3334      	adds	r3, #52	; 0x34
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	f7f2 ff18 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb6:	4b24      	ldr	r3, [pc, #144]	; (800dd48 <vTaskSwitchContext+0xfc>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	fab3 f383 	clz	r3, r3
 800dcc2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dcc4:	7afb      	ldrb	r3, [r7, #11]
 800dcc6:	f1c3 031f 	rsb	r3, r3, #31
 800dcca:	617b      	str	r3, [r7, #20]
 800dccc:	491f      	ldr	r1, [pc, #124]	; (800dd4c <vTaskSwitchContext+0x100>)
 800dcce:	697a      	ldr	r2, [r7, #20]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4413      	add	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	440b      	add	r3, r1
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10b      	bne.n	800dcf8 <vTaskSwitchContext+0xac>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce4:	b672      	cpsid	i
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	b662      	cpsie	i
 800dcf4:	607b      	str	r3, [r7, #4]
 800dcf6:	e7fe      	b.n	800dcf6 <vTaskSwitchContext+0xaa>
 800dcf8:	697a      	ldr	r2, [r7, #20]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4a12      	ldr	r2, [pc, #72]	; (800dd4c <vTaskSwitchContext+0x100>)
 800dd04:	4413      	add	r3, r2
 800dd06:	613b      	str	r3, [r7, #16]
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	605a      	str	r2, [r3, #4]
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	685a      	ldr	r2, [r3, #4]
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	3308      	adds	r3, #8
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d104      	bne.n	800dd28 <vTaskSwitchContext+0xdc>
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	605a      	str	r2, [r3, #4]
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	4a05      	ldr	r2, [pc, #20]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dd30:	6013      	str	r3, [r2, #0]
}
 800dd32:	bf00      	nop
 800dd34:	3720      	adds	r7, #32
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	200004fc 	.word	0x200004fc
 800dd40:	200004e8 	.word	0x200004e8
 800dd44:	200003d4 	.word	0x200003d4
 800dd48:	200004dc 	.word	0x200004dc
 800dd4c:	200003d8 	.word	0x200003d8

0800dd50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10b      	bne.n	800dd78 <vTaskPlaceOnEventList+0x28>
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	b672      	cpsid	i
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	b662      	cpsie	i
 800dd74:	60fb      	str	r3, [r7, #12]
 800dd76:	e7fe      	b.n	800dd76 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd78:	4b07      	ldr	r3, [pc, #28]	; (800dd98 <vTaskPlaceOnEventList+0x48>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3318      	adds	r3, #24
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7fe fc28 	bl	800c5d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd86:	2101      	movs	r1, #1
 800dd88:	6838      	ldr	r0, [r7, #0]
 800dd8a:	f000 fb9d 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
}
 800dd8e:	bf00      	nop
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	200003d4 	.word	0x200003d4

0800dd9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10b      	bne.n	800ddca <xTaskRemoveFromEventList+0x2e>
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	b672      	cpsid	i
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	b662      	cpsie	i
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	e7fe      	b.n	800ddc8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	3318      	adds	r3, #24
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fe fc3a 	bl	800c648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddd4:	4b1d      	ldr	r3, [pc, #116]	; (800de4c <xTaskRemoveFromEventList+0xb0>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d11c      	bne.n	800de16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fe fc31 	bl	800c648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddea:	2201      	movs	r2, #1
 800ddec:	409a      	lsls	r2, r3
 800ddee:	4b18      	ldr	r3, [pc, #96]	; (800de50 <xTaskRemoveFromEventList+0xb4>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	4a16      	ldr	r2, [pc, #88]	; (800de50 <xTaskRemoveFromEventList+0xb4>)
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	4a13      	ldr	r2, [pc, #76]	; (800de54 <xTaskRemoveFromEventList+0xb8>)
 800de06:	441a      	add	r2, r3
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7fe fbbd 	bl	800c58e <vListInsertEnd>
 800de14:	e005      	b.n	800de22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	3318      	adds	r3, #24
 800de1a:	4619      	mov	r1, r3
 800de1c:	480e      	ldr	r0, [pc, #56]	; (800de58 <xTaskRemoveFromEventList+0xbc>)
 800de1e:	f7fe fbb6 	bl	800c58e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de26:	4b0d      	ldr	r3, [pc, #52]	; (800de5c <xTaskRemoveFromEventList+0xc0>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d905      	bls.n	800de3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de30:	2301      	movs	r3, #1
 800de32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de34:	4b0a      	ldr	r3, [pc, #40]	; (800de60 <xTaskRemoveFromEventList+0xc4>)
 800de36:	2201      	movs	r2, #1
 800de38:	601a      	str	r2, [r3, #0]
 800de3a:	e001      	b.n	800de40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800de3c:	2300      	movs	r3, #0
 800de3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de40:	697b      	ldr	r3, [r7, #20]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	200004fc 	.word	0x200004fc
 800de50:	200004dc 	.word	0x200004dc
 800de54:	200003d8 	.word	0x200003d8
 800de58:	20000494 	.word	0x20000494
 800de5c:	200003d4 	.word	0x200003d4
 800de60:	200004e8 	.word	0x200004e8

0800de64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de6c:	4b06      	ldr	r3, [pc, #24]	; (800de88 <vTaskInternalSetTimeOutState+0x24>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800de74:	4b05      	ldr	r3, [pc, #20]	; (800de8c <vTaskInternalSetTimeOutState+0x28>)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	605a      	str	r2, [r3, #4]
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	200004ec 	.word	0x200004ec
 800de8c:	200004d8 	.word	0x200004d8

0800de90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <xTaskCheckForTimeOut+0x28>
 800dea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea4:	b672      	cpsid	i
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	b662      	cpsie	i
 800deb4:	613b      	str	r3, [r7, #16]
 800deb6:	e7fe      	b.n	800deb6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10b      	bne.n	800ded6 <xTaskCheckForTimeOut+0x46>
 800debe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec2:	b672      	cpsid	i
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	b662      	cpsie	i
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	e7fe      	b.n	800ded4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ded6:	f000 fc67 	bl	800e7a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800deda:	4b1d      	ldr	r3, [pc, #116]	; (800df50 <xTaskCheckForTimeOut+0xc0>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	69ba      	ldr	r2, [r7, #24]
 800dee6:	1ad3      	subs	r3, r2, r3
 800dee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def2:	d102      	bne.n	800defa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800def4:	2300      	movs	r3, #0
 800def6:	61fb      	str	r3, [r7, #28]
 800def8:	e023      	b.n	800df42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	4b15      	ldr	r3, [pc, #84]	; (800df54 <xTaskCheckForTimeOut+0xc4>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	429a      	cmp	r2, r3
 800df04:	d007      	beq.n	800df16 <xTaskCheckForTimeOut+0x86>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	69ba      	ldr	r2, [r7, #24]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d302      	bcc.n	800df16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df10:	2301      	movs	r3, #1
 800df12:	61fb      	str	r3, [r7, #28]
 800df14:	e015      	b.n	800df42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d20b      	bcs.n	800df38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	1ad2      	subs	r2, r2, r3
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff ff99 	bl	800de64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df32:	2300      	movs	r3, #0
 800df34:	61fb      	str	r3, [r7, #28]
 800df36:	e004      	b.n	800df42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2200      	movs	r2, #0
 800df3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df3e:	2301      	movs	r3, #1
 800df40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df42:	f000 fc63 	bl	800e80c <vPortExitCritical>

	return xReturn;
 800df46:	69fb      	ldr	r3, [r7, #28]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3720      	adds	r7, #32
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	200004d8 	.word	0x200004d8
 800df54:	200004ec 	.word	0x200004ec

0800df58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df58:	b480      	push	{r7}
 800df5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df5c:	4b03      	ldr	r3, [pc, #12]	; (800df6c <vTaskMissedYield+0x14>)
 800df5e:	2201      	movs	r2, #1
 800df60:	601a      	str	r2, [r3, #0]
}
 800df62:	bf00      	nop
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr
 800df6c:	200004e8 	.word	0x200004e8

0800df70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800df78:	f000 f854 	bl	800e024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df7c:	4b07      	ldr	r3, [pc, #28]	; (800df9c <prvIdleTask+0x2c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d907      	bls.n	800df94 <prvIdleTask+0x24>
			{
				taskYIELD();
 800df84:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <prvIdleTask+0x30>)
 800df86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df8a:	601a      	str	r2, [r3, #0]
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800df94:	f7f2 fda0 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800df98:	e7ee      	b.n	800df78 <prvIdleTask+0x8>
 800df9a:	bf00      	nop
 800df9c:	200003d8 	.word	0x200003d8
 800dfa0:	e000ed04 	.word	0xe000ed04

0800dfa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfaa:	2300      	movs	r3, #0
 800dfac:	607b      	str	r3, [r7, #4]
 800dfae:	e00c      	b.n	800dfca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4a12      	ldr	r2, [pc, #72]	; (800e004 <prvInitialiseTaskLists+0x60>)
 800dfbc:	4413      	add	r3, r2
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fe fab8 	bl	800c534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	607b      	str	r3, [r7, #4]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b06      	cmp	r3, #6
 800dfce:	d9ef      	bls.n	800dfb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dfd0:	480d      	ldr	r0, [pc, #52]	; (800e008 <prvInitialiseTaskLists+0x64>)
 800dfd2:	f7fe faaf 	bl	800c534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dfd6:	480d      	ldr	r0, [pc, #52]	; (800e00c <prvInitialiseTaskLists+0x68>)
 800dfd8:	f7fe faac 	bl	800c534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dfdc:	480c      	ldr	r0, [pc, #48]	; (800e010 <prvInitialiseTaskLists+0x6c>)
 800dfde:	f7fe faa9 	bl	800c534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dfe2:	480c      	ldr	r0, [pc, #48]	; (800e014 <prvInitialiseTaskLists+0x70>)
 800dfe4:	f7fe faa6 	bl	800c534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dfe8:	480b      	ldr	r0, [pc, #44]	; (800e018 <prvInitialiseTaskLists+0x74>)
 800dfea:	f7fe faa3 	bl	800c534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dfee:	4b0b      	ldr	r3, [pc, #44]	; (800e01c <prvInitialiseTaskLists+0x78>)
 800dff0:	4a05      	ldr	r2, [pc, #20]	; (800e008 <prvInitialiseTaskLists+0x64>)
 800dff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dff4:	4b0a      	ldr	r3, [pc, #40]	; (800e020 <prvInitialiseTaskLists+0x7c>)
 800dff6:	4a05      	ldr	r2, [pc, #20]	; (800e00c <prvInitialiseTaskLists+0x68>)
 800dff8:	601a      	str	r2, [r3, #0]
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	200003d8 	.word	0x200003d8
 800e008:	20000464 	.word	0x20000464
 800e00c:	20000478 	.word	0x20000478
 800e010:	20000494 	.word	0x20000494
 800e014:	200004a8 	.word	0x200004a8
 800e018:	200004c0 	.word	0x200004c0
 800e01c:	2000048c 	.word	0x2000048c
 800e020:	20000490 	.word	0x20000490

0800e024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e02a:	e019      	b.n	800e060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e02c:	f000 fbbc 	bl	800e7a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e030:	4b0f      	ldr	r3, [pc, #60]	; (800e070 <prvCheckTasksWaitingTermination+0x4c>)
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	3304      	adds	r3, #4
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7fe fb03 	bl	800c648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e042:	4b0c      	ldr	r3, [pc, #48]	; (800e074 <prvCheckTasksWaitingTermination+0x50>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	3b01      	subs	r3, #1
 800e048:	4a0a      	ldr	r2, [pc, #40]	; (800e074 <prvCheckTasksWaitingTermination+0x50>)
 800e04a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e04c:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <prvCheckTasksWaitingTermination+0x54>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3b01      	subs	r3, #1
 800e052:	4a09      	ldr	r2, [pc, #36]	; (800e078 <prvCheckTasksWaitingTermination+0x54>)
 800e054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e056:	f000 fbd9 	bl	800e80c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f80e 	bl	800e07c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e060:	4b05      	ldr	r3, [pc, #20]	; (800e078 <prvCheckTasksWaitingTermination+0x54>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1e1      	bne.n	800e02c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	200004a8 	.word	0x200004a8
 800e074:	200004d4 	.word	0x200004d4
 800e078:	200004bc 	.word	0x200004bc

0800e07c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d108      	bne.n	800e0a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e092:	4618      	mov	r0, r3
 800e094:	f000 fd76 	bl	800eb84 <vPortFree>
				vPortFree( pxTCB );
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fd73 	bl	800eb84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e09e:	e019      	b.n	800e0d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d103      	bne.n	800e0b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fd6a 	bl	800eb84 <vPortFree>
	}
 800e0b0:	e010      	b.n	800e0d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d00b      	beq.n	800e0d4 <prvDeleteTCB+0x58>
 800e0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c0:	b672      	cpsid	i
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	b662      	cpsie	i
 800e0d0:	60fb      	str	r3, [r7, #12]
 800e0d2:	e7fe      	b.n	800e0d2 <prvDeleteTCB+0x56>
	}
 800e0d4:	bf00      	nop
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0e2:	4b0c      	ldr	r3, [pc, #48]	; (800e114 <prvResetNextTaskUnblockTime+0x38>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d104      	bne.n	800e0f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e0ec:	4b0a      	ldr	r3, [pc, #40]	; (800e118 <prvResetNextTaskUnblockTime+0x3c>)
 800e0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e0f4:	e008      	b.n	800e108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f6:	4b07      	ldr	r3, [pc, #28]	; (800e114 <prvResetNextTaskUnblockTime+0x38>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	4a04      	ldr	r2, [pc, #16]	; (800e118 <prvResetNextTaskUnblockTime+0x3c>)
 800e106:	6013      	str	r3, [r2, #0]
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	2000048c 	.word	0x2000048c
 800e118:	200004f4 	.word	0x200004f4

0800e11c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e122:	4b0b      	ldr	r3, [pc, #44]	; (800e150 <xTaskGetSchedulerState+0x34>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d102      	bne.n	800e130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e12a:	2301      	movs	r3, #1
 800e12c:	607b      	str	r3, [r7, #4]
 800e12e:	e008      	b.n	800e142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e130:	4b08      	ldr	r3, [pc, #32]	; (800e154 <xTaskGetSchedulerState+0x38>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d102      	bne.n	800e13e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e138:	2302      	movs	r3, #2
 800e13a:	607b      	str	r3, [r7, #4]
 800e13c:	e001      	b.n	800e142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e13e:	2300      	movs	r3, #0
 800e140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e142:	687b      	ldr	r3, [r7, #4]
	}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	200004e0 	.word	0x200004e0
 800e154:	200004fc 	.word	0x200004fc

0800e158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e164:	2300      	movs	r3, #0
 800e166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d069      	beq.n	800e242 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e172:	4b36      	ldr	r3, [pc, #216]	; (800e24c <xTaskPriorityInherit+0xf4>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e178:	429a      	cmp	r2, r3
 800e17a:	d259      	bcs.n	800e230 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	db06      	blt.n	800e192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e184:	4b31      	ldr	r3, [pc, #196]	; (800e24c <xTaskPriorityInherit+0xf4>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18a:	f1c3 0207 	rsb	r2, r3, #7
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	6959      	ldr	r1, [r3, #20]
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19a:	4613      	mov	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4a2b      	ldr	r2, [pc, #172]	; (800e250 <xTaskPriorityInherit+0xf8>)
 800e1a4:	4413      	add	r3, r2
 800e1a6:	4299      	cmp	r1, r3
 800e1a8:	d13a      	bne.n	800e220 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe fa4a 	bl	800c648 <uxListRemove>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d115      	bne.n	800e1e6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1be:	4924      	ldr	r1, [pc, #144]	; (800e250 <xTaskPriorityInherit+0xf8>)
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4413      	add	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	440b      	add	r3, r1
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10a      	bne.n	800e1e6 <xTaskPriorityInherit+0x8e>
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e1da:	43da      	mvns	r2, r3
 800e1dc:	4b1d      	ldr	r3, [pc, #116]	; (800e254 <xTaskPriorityInherit+0xfc>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4013      	ands	r3, r2
 800e1e2:	4a1c      	ldr	r2, [pc, #112]	; (800e254 <xTaskPriorityInherit+0xfc>)
 800e1e4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e1e6:	4b19      	ldr	r3, [pc, #100]	; (800e24c <xTaskPriorityInherit+0xf4>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	409a      	lsls	r2, r3
 800e1f8:	4b16      	ldr	r3, [pc, #88]	; (800e254 <xTaskPriorityInherit+0xfc>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	4a15      	ldr	r2, [pc, #84]	; (800e254 <xTaskPriorityInherit+0xfc>)
 800e200:	6013      	str	r3, [r2, #0]
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e206:	4613      	mov	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4a10      	ldr	r2, [pc, #64]	; (800e250 <xTaskPriorityInherit+0xf8>)
 800e210:	441a      	add	r2, r3
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	3304      	adds	r3, #4
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f7fe f9b8 	bl	800c58e <vListInsertEnd>
 800e21e:	e004      	b.n	800e22a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e220:	4b0a      	ldr	r3, [pc, #40]	; (800e24c <xTaskPriorityInherit+0xf4>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e22a:	2301      	movs	r3, #1
 800e22c:	60fb      	str	r3, [r7, #12]
 800e22e:	e008      	b.n	800e242 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e234:	4b05      	ldr	r3, [pc, #20]	; (800e24c <xTaskPriorityInherit+0xf4>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d201      	bcs.n	800e242 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e23e:	2301      	movs	r3, #1
 800e240:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e242:	68fb      	ldr	r3, [r7, #12]
	}
 800e244:	4618      	mov	r0, r3
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	200003d4 	.word	0x200003d4
 800e250:	200003d8 	.word	0x200003d8
 800e254:	200004dc 	.word	0x200004dc

0800e258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e264:	2300      	movs	r3, #0
 800e266:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d070      	beq.n	800e350 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e26e:	4b3b      	ldr	r3, [pc, #236]	; (800e35c <xTaskPriorityDisinherit+0x104>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	429a      	cmp	r2, r3
 800e276:	d00b      	beq.n	800e290 <xTaskPriorityDisinherit+0x38>
 800e278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27c:	b672      	cpsid	i
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	b662      	cpsie	i
 800e28c:	60fb      	str	r3, [r7, #12]
 800e28e:	e7fe      	b.n	800e28e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10b      	bne.n	800e2b0 <xTaskPriorityDisinherit+0x58>
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	b672      	cpsid	i
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	b662      	cpsie	i
 800e2ac:	60bb      	str	r3, [r7, #8]
 800e2ae:	e7fe      	b.n	800e2ae <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2b4:	1e5a      	subs	r2, r3, #1
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d044      	beq.n	800e350 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d140      	bne.n	800e350 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fe f9b8 	bl	800c648 <uxListRemove>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d115      	bne.n	800e30a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e2:	491f      	ldr	r1, [pc, #124]	; (800e360 <xTaskPriorityDisinherit+0x108>)
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	440b      	add	r3, r1
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10a      	bne.n	800e30a <xTaskPriorityDisinherit+0xb2>
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e2fe:	43da      	mvns	r2, r3
 800e300:	4b18      	ldr	r3, [pc, #96]	; (800e364 <xTaskPriorityDisinherit+0x10c>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4013      	ands	r3, r2
 800e306:	4a17      	ldr	r2, [pc, #92]	; (800e364 <xTaskPriorityDisinherit+0x10c>)
 800e308:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e316:	f1c3 0207 	rsb	r2, r3, #7
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e322:	2201      	movs	r2, #1
 800e324:	409a      	lsls	r2, r3
 800e326:	4b0f      	ldr	r3, [pc, #60]	; (800e364 <xTaskPriorityDisinherit+0x10c>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4313      	orrs	r3, r2
 800e32c:	4a0d      	ldr	r2, [pc, #52]	; (800e364 <xTaskPriorityDisinherit+0x10c>)
 800e32e:	6013      	str	r3, [r2, #0]
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e334:	4613      	mov	r3, r2
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	4413      	add	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4a08      	ldr	r2, [pc, #32]	; (800e360 <xTaskPriorityDisinherit+0x108>)
 800e33e:	441a      	add	r2, r3
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	3304      	adds	r3, #4
 800e344:	4619      	mov	r1, r3
 800e346:	4610      	mov	r0, r2
 800e348:	f7fe f921 	bl	800c58e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e34c:	2301      	movs	r3, #1
 800e34e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e350:	697b      	ldr	r3, [r7, #20]
	}
 800e352:	4618      	mov	r0, r3
 800e354:	3718      	adds	r7, #24
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	200003d4 	.word	0x200003d4
 800e360:	200003d8 	.word	0x200003d8
 800e364:	200004dc 	.word	0x200004dc

0800e368 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b088      	sub	sp, #32
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e376:	2301      	movs	r3, #1
 800e378:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 8085 	beq.w	800e48c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10b      	bne.n	800e3a2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38e:	b672      	cpsid	i
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	b662      	cpsie	i
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	e7fe      	b.n	800e3a0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d902      	bls.n	800e3b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	61fb      	str	r3, [r7, #28]
 800e3b0:	e002      	b.n	800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3bc:	69fa      	ldr	r2, [r7, #28]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d064      	beq.n	800e48c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3c6:	697a      	ldr	r2, [r7, #20]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d15f      	bne.n	800e48c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e3cc:	4b31      	ldr	r3, [pc, #196]	; (800e494 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	69ba      	ldr	r2, [r7, #24]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d10b      	bne.n	800e3ee <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3da:	b672      	cpsid	i
 800e3dc:	f383 8811 	msr	BASEPRI, r3
 800e3e0:	f3bf 8f6f 	isb	sy
 800e3e4:	f3bf 8f4f 	dsb	sy
 800e3e8:	b662      	cpsie	i
 800e3ea:	60bb      	str	r3, [r7, #8]
 800e3ec:	e7fe      	b.n	800e3ec <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	69fa      	ldr	r2, [r7, #28]
 800e3f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	db04      	blt.n	800e40c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	f1c3 0207 	rsb	r2, r3, #7
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	6959      	ldr	r1, [r3, #20]
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	4613      	mov	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4a1f      	ldr	r2, [pc, #124]	; (800e498 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e41c:	4413      	add	r3, r2
 800e41e:	4299      	cmp	r1, r3
 800e420:	d134      	bne.n	800e48c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	3304      	adds	r3, #4
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe f90e 	bl	800c648 <uxListRemove>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d115      	bne.n	800e45e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e436:	4918      	ldr	r1, [pc, #96]	; (800e498 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e438:	4613      	mov	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	440b      	add	r3, r1
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10a      	bne.n	800e45e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44c:	2201      	movs	r2, #1
 800e44e:	fa02 f303 	lsl.w	r3, r2, r3
 800e452:	43da      	mvns	r2, r3
 800e454:	4b11      	ldr	r3, [pc, #68]	; (800e49c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4013      	ands	r3, r2
 800e45a:	4a10      	ldr	r2, [pc, #64]	; (800e49c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e45c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e462:	2201      	movs	r2, #1
 800e464:	409a      	lsls	r2, r3
 800e466:	4b0d      	ldr	r3, [pc, #52]	; (800e49c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	4a0b      	ldr	r2, [pc, #44]	; (800e49c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e474:	4613      	mov	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4413      	add	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	4a06      	ldr	r2, [pc, #24]	; (800e498 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e47e:	441a      	add	r2, r3
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	3304      	adds	r3, #4
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f7fe f881 	bl	800c58e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e48c:	bf00      	nop
 800e48e:	3720      	adds	r7, #32
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	200003d4 	.word	0x200003d4
 800e498:	200003d8 	.word	0x200003d8
 800e49c:	200004dc 	.word	0x200004dc

0800e4a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e4a0:	b480      	push	{r7}
 800e4a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e4a4:	4b07      	ldr	r3, [pc, #28]	; (800e4c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d004      	beq.n	800e4b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e4ac:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4b2:	3201      	adds	r2, #1
 800e4b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e4b6:	4b03      	ldr	r3, [pc, #12]	; (800e4c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
	}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	200003d4 	.word	0x200003d4

0800e4c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4d2:	4b29      	ldr	r3, [pc, #164]	; (800e578 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4d8:	4b28      	ldr	r3, [pc, #160]	; (800e57c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe f8b2 	bl	800c648 <uxListRemove>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10b      	bne.n	800e502 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e4ea:	4b24      	ldr	r3, [pc, #144]	; (800e57c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f6:	43da      	mvns	r2, r3
 800e4f8:	4b21      	ldr	r3, [pc, #132]	; (800e580 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	4a20      	ldr	r2, [pc, #128]	; (800e580 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e500:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e508:	d10a      	bne.n	800e520 <prvAddCurrentTaskToDelayedList+0x58>
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d007      	beq.n	800e520 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e510:	4b1a      	ldr	r3, [pc, #104]	; (800e57c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3304      	adds	r3, #4
 800e516:	4619      	mov	r1, r3
 800e518:	481a      	ldr	r0, [pc, #104]	; (800e584 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e51a:	f7fe f838 	bl	800c58e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e51e:	e026      	b.n	800e56e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4413      	add	r3, r2
 800e526:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e528:	4b14      	ldr	r3, [pc, #80]	; (800e57c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	429a      	cmp	r2, r3
 800e536:	d209      	bcs.n	800e54c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e538:	4b13      	ldr	r3, [pc, #76]	; (800e588 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3304      	adds	r3, #4
 800e542:	4619      	mov	r1, r3
 800e544:	4610      	mov	r0, r2
 800e546:	f7fe f846 	bl	800c5d6 <vListInsert>
}
 800e54a:	e010      	b.n	800e56e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	4b0a      	ldr	r3, [pc, #40]	; (800e57c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3304      	adds	r3, #4
 800e556:	4619      	mov	r1, r3
 800e558:	4610      	mov	r0, r2
 800e55a:	f7fe f83c 	bl	800c5d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e55e:	4b0c      	ldr	r3, [pc, #48]	; (800e590 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	429a      	cmp	r2, r3
 800e566:	d202      	bcs.n	800e56e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e568:	4a09      	ldr	r2, [pc, #36]	; (800e590 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	6013      	str	r3, [r2, #0]
}
 800e56e:	bf00      	nop
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	200004d8 	.word	0x200004d8
 800e57c:	200003d4 	.word	0x200003d4
 800e580:	200004dc 	.word	0x200004dc
 800e584:	200004c0 	.word	0x200004c0
 800e588:	20000490 	.word	0x20000490
 800e58c:	2000048c 	.word	0x2000048c
 800e590:	200004f4 	.word	0x200004f4

0800e594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	3b04      	subs	r3, #4
 800e5a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e5ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	3b04      	subs	r3, #4
 800e5b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f023 0201 	bic.w	r2, r3, #1
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3b04      	subs	r3, #4
 800e5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5c4:	4a0c      	ldr	r2, [pc, #48]	; (800e5f8 <pxPortInitialiseStack+0x64>)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	3b14      	subs	r3, #20
 800e5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	3b04      	subs	r3, #4
 800e5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f06f 0202 	mvn.w	r2, #2
 800e5e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	3b20      	subs	r3, #32
 800e5e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3714      	adds	r7, #20
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	0800e5fd 	.word	0x0800e5fd

0800e5fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b085      	sub	sp, #20
 800e600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e606:	4b13      	ldr	r3, [pc, #76]	; (800e654 <prvTaskExitError+0x58>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e60e:	d00b      	beq.n	800e628 <prvTaskExitError+0x2c>
 800e610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e614:	b672      	cpsid	i
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	b662      	cpsie	i
 800e624:	60fb      	str	r3, [r7, #12]
 800e626:	e7fe      	b.n	800e626 <prvTaskExitError+0x2a>
 800e628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62c:	b672      	cpsid	i
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	b662      	cpsie	i
 800e63c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e63e:	bf00      	nop
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0fc      	beq.n	800e640 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e646:	bf00      	nop
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	20000024 	.word	0x20000024
	...

0800e660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e660:	4b07      	ldr	r3, [pc, #28]	; (800e680 <pxCurrentTCBConst2>)
 800e662:	6819      	ldr	r1, [r3, #0]
 800e664:	6808      	ldr	r0, [r1, #0]
 800e666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66a:	f380 8809 	msr	PSP, r0
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f04f 0000 	mov.w	r0, #0
 800e676:	f380 8811 	msr	BASEPRI, r0
 800e67a:	4770      	bx	lr
 800e67c:	f3af 8000 	nop.w

0800e680 <pxCurrentTCBConst2>:
 800e680:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop

0800e688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e688:	4808      	ldr	r0, [pc, #32]	; (800e6ac <prvPortStartFirstTask+0x24>)
 800e68a:	6800      	ldr	r0, [r0, #0]
 800e68c:	6800      	ldr	r0, [r0, #0]
 800e68e:	f380 8808 	msr	MSP, r0
 800e692:	f04f 0000 	mov.w	r0, #0
 800e696:	f380 8814 	msr	CONTROL, r0
 800e69a:	b662      	cpsie	i
 800e69c:	b661      	cpsie	f
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	df00      	svc	0
 800e6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e6aa:	bf00      	nop
 800e6ac:	e000ed08 	.word	0xe000ed08

0800e6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e6b6:	4b36      	ldr	r3, [pc, #216]	; (800e790 <xPortStartScheduler+0xe0>)
 800e6b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	22ff      	movs	r2, #255	; 0xff
 800e6c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e6d8:	b2da      	uxtb	r2, r3
 800e6da:	4b2e      	ldr	r3, [pc, #184]	; (800e794 <xPortStartScheduler+0xe4>)
 800e6dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e6de:	4b2e      	ldr	r3, [pc, #184]	; (800e798 <xPortStartScheduler+0xe8>)
 800e6e0:	2207      	movs	r2, #7
 800e6e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6e4:	e009      	b.n	800e6fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e6e6:	4b2c      	ldr	r3, [pc, #176]	; (800e798 <xPortStartScheduler+0xe8>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	4a2a      	ldr	r2, [pc, #168]	; (800e798 <xPortStartScheduler+0xe8>)
 800e6ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6f0:	78fb      	ldrb	r3, [r7, #3]
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	005b      	lsls	r3, r3, #1
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6fa:	78fb      	ldrb	r3, [r7, #3]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e702:	2b80      	cmp	r3, #128	; 0x80
 800e704:	d0ef      	beq.n	800e6e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e706:	4b24      	ldr	r3, [pc, #144]	; (800e798 <xPortStartScheduler+0xe8>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f1c3 0307 	rsb	r3, r3, #7
 800e70e:	2b04      	cmp	r3, #4
 800e710:	d00b      	beq.n	800e72a <xPortStartScheduler+0x7a>
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	b672      	cpsid	i
 800e718:	f383 8811 	msr	BASEPRI, r3
 800e71c:	f3bf 8f6f 	isb	sy
 800e720:	f3bf 8f4f 	dsb	sy
 800e724:	b662      	cpsie	i
 800e726:	60bb      	str	r3, [r7, #8]
 800e728:	e7fe      	b.n	800e728 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e72a:	4b1b      	ldr	r3, [pc, #108]	; (800e798 <xPortStartScheduler+0xe8>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	021b      	lsls	r3, r3, #8
 800e730:	4a19      	ldr	r2, [pc, #100]	; (800e798 <xPortStartScheduler+0xe8>)
 800e732:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e734:	4b18      	ldr	r3, [pc, #96]	; (800e798 <xPortStartScheduler+0xe8>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e73c:	4a16      	ldr	r2, [pc, #88]	; (800e798 <xPortStartScheduler+0xe8>)
 800e73e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	b2da      	uxtb	r2, r3
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e748:	4b14      	ldr	r3, [pc, #80]	; (800e79c <xPortStartScheduler+0xec>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a13      	ldr	r2, [pc, #76]	; (800e79c <xPortStartScheduler+0xec>)
 800e74e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e752:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e754:	4b11      	ldr	r3, [pc, #68]	; (800e79c <xPortStartScheduler+0xec>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a10      	ldr	r2, [pc, #64]	; (800e79c <xPortStartScheduler+0xec>)
 800e75a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e75e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e760:	f000 f8d4 	bl	800e90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e764:	4b0e      	ldr	r3, [pc, #56]	; (800e7a0 <xPortStartScheduler+0xf0>)
 800e766:	2200      	movs	r2, #0
 800e768:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e76a:	f000 f8f3 	bl	800e954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e76e:	4b0d      	ldr	r3, [pc, #52]	; (800e7a4 <xPortStartScheduler+0xf4>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a0c      	ldr	r2, [pc, #48]	; (800e7a4 <xPortStartScheduler+0xf4>)
 800e774:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e778:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e77a:	f7ff ff85 	bl	800e688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e77e:	f7ff fa65 	bl	800dc4c <vTaskSwitchContext>
	prvTaskExitError();
 800e782:	f7ff ff3b 	bl	800e5fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	e000e400 	.word	0xe000e400
 800e794:	20000500 	.word	0x20000500
 800e798:	20000504 	.word	0x20000504
 800e79c:	e000ed20 	.word	0xe000ed20
 800e7a0:	20000024 	.word	0x20000024
 800e7a4:	e000ef34 	.word	0xe000ef34

0800e7a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	b672      	cpsid	i
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	b662      	cpsie	i
 800e7c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e7c4:	4b0f      	ldr	r3, [pc, #60]	; (800e804 <vPortEnterCritical+0x5c>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	4a0e      	ldr	r2, [pc, #56]	; (800e804 <vPortEnterCritical+0x5c>)
 800e7cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e7ce:	4b0d      	ldr	r3, [pc, #52]	; (800e804 <vPortEnterCritical+0x5c>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d110      	bne.n	800e7f8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e7d6:	4b0c      	ldr	r3, [pc, #48]	; (800e808 <vPortEnterCritical+0x60>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00b      	beq.n	800e7f8 <vPortEnterCritical+0x50>
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	b672      	cpsid	i
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	b662      	cpsie	i
 800e7f4:	603b      	str	r3, [r7, #0]
 800e7f6:	e7fe      	b.n	800e7f6 <vPortEnterCritical+0x4e>
	}
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr
 800e804:	20000024 	.word	0x20000024
 800e808:	e000ed04 	.word	0xe000ed04

0800e80c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e812:	4b12      	ldr	r3, [pc, #72]	; (800e85c <vPortExitCritical+0x50>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10b      	bne.n	800e832 <vPortExitCritical+0x26>
 800e81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81e:	b672      	cpsid	i
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	b662      	cpsie	i
 800e82e:	607b      	str	r3, [r7, #4]
 800e830:	e7fe      	b.n	800e830 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e832:	4b0a      	ldr	r3, [pc, #40]	; (800e85c <vPortExitCritical+0x50>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	3b01      	subs	r3, #1
 800e838:	4a08      	ldr	r2, [pc, #32]	; (800e85c <vPortExitCritical+0x50>)
 800e83a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e83c:	4b07      	ldr	r3, [pc, #28]	; (800e85c <vPortExitCritical+0x50>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d104      	bne.n	800e84e <vPortExitCritical+0x42>
 800e844:	2300      	movs	r3, #0
 800e846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e84e:	bf00      	nop
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	20000024 	.word	0x20000024

0800e860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e860:	f3ef 8009 	mrs	r0, PSP
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	4b15      	ldr	r3, [pc, #84]	; (800e8c0 <pxCurrentTCBConst>)
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	f01e 0f10 	tst.w	lr, #16
 800e870:	bf08      	it	eq
 800e872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87a:	6010      	str	r0, [r2, #0]
 800e87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e884:	b672      	cpsid	i
 800e886:	f380 8811 	msr	BASEPRI, r0
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	b662      	cpsie	i
 800e894:	f7ff f9da 	bl	800dc4c <vTaskSwitchContext>
 800e898:	f04f 0000 	mov.w	r0, #0
 800e89c:	f380 8811 	msr	BASEPRI, r0
 800e8a0:	bc09      	pop	{r0, r3}
 800e8a2:	6819      	ldr	r1, [r3, #0]
 800e8a4:	6808      	ldr	r0, [r1, #0]
 800e8a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8aa:	f01e 0f10 	tst.w	lr, #16
 800e8ae:	bf08      	it	eq
 800e8b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e8b4:	f380 8809 	msr	PSP, r0
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop

0800e8c0 <pxCurrentTCBConst>:
 800e8c0:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop

0800e8c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d2:	b672      	cpsid	i
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	b662      	cpsie	i
 800e8e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8e4:	f7ff f8f8 	bl	800dad8 <xTaskIncrementTick>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8ee:	4b06      	ldr	r3, [pc, #24]	; (800e908 <SysTick_Handler+0x40>)
 800e8f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	e000ed04 	.word	0xe000ed04

0800e90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e90c:	b480      	push	{r7}
 800e90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e910:	4b0b      	ldr	r3, [pc, #44]	; (800e940 <vPortSetupTimerInterrupt+0x34>)
 800e912:	2200      	movs	r2, #0
 800e914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e916:	4b0b      	ldr	r3, [pc, #44]	; (800e944 <vPortSetupTimerInterrupt+0x38>)
 800e918:	2200      	movs	r2, #0
 800e91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e91c:	4b0a      	ldr	r3, [pc, #40]	; (800e948 <vPortSetupTimerInterrupt+0x3c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a0a      	ldr	r2, [pc, #40]	; (800e94c <vPortSetupTimerInterrupt+0x40>)
 800e922:	fba2 2303 	umull	r2, r3, r2, r3
 800e926:	099b      	lsrs	r3, r3, #6
 800e928:	4a09      	ldr	r2, [pc, #36]	; (800e950 <vPortSetupTimerInterrupt+0x44>)
 800e92a:	3b01      	subs	r3, #1
 800e92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e92e:	4b04      	ldr	r3, [pc, #16]	; (800e940 <vPortSetupTimerInterrupt+0x34>)
 800e930:	2207      	movs	r2, #7
 800e932:	601a      	str	r2, [r3, #0]
}
 800e934:	bf00      	nop
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	e000e010 	.word	0xe000e010
 800e944:	e000e018 	.word	0xe000e018
 800e948:	20000018 	.word	0x20000018
 800e94c:	10624dd3 	.word	0x10624dd3
 800e950:	e000e014 	.word	0xe000e014

0800e954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e964 <vPortEnableVFP+0x10>
 800e958:	6801      	ldr	r1, [r0, #0]
 800e95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e95e:	6001      	str	r1, [r0, #0]
 800e960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e962:	bf00      	nop
 800e964:	e000ed88 	.word	0xe000ed88

0800e968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e96e:	f3ef 8305 	mrs	r3, IPSR
 800e972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2b0f      	cmp	r3, #15
 800e978:	d915      	bls.n	800e9a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e97a:	4a18      	ldr	r2, [pc, #96]	; (800e9dc <vPortValidateInterruptPriority+0x74>)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	4413      	add	r3, r2
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e984:	4b16      	ldr	r3, [pc, #88]	; (800e9e0 <vPortValidateInterruptPriority+0x78>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	7afa      	ldrb	r2, [r7, #11]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d20b      	bcs.n	800e9a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e992:	b672      	cpsid	i
 800e994:	f383 8811 	msr	BASEPRI, r3
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	b662      	cpsie	i
 800e9a2:	607b      	str	r3, [r7, #4]
 800e9a4:	e7fe      	b.n	800e9a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9a6:	4b0f      	ldr	r3, [pc, #60]	; (800e9e4 <vPortValidateInterruptPriority+0x7c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e9ae:	4b0e      	ldr	r3, [pc, #56]	; (800e9e8 <vPortValidateInterruptPriority+0x80>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d90b      	bls.n	800e9ce <vPortValidateInterruptPriority+0x66>
 800e9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ba:	b672      	cpsid	i
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	b662      	cpsie	i
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	e7fe      	b.n	800e9cc <vPortValidateInterruptPriority+0x64>
	}
 800e9ce:	bf00      	nop
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	e000e3f0 	.word	0xe000e3f0
 800e9e0:	20000500 	.word	0x20000500
 800e9e4:	e000ed0c 	.word	0xe000ed0c
 800e9e8:	20000504 	.word	0x20000504

0800e9ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b08a      	sub	sp, #40	; 0x28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9f8:	f7fe ffa0 	bl	800d93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9fc:	4b5c      	ldr	r3, [pc, #368]	; (800eb70 <pvPortMalloc+0x184>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea04:	f000 f91a 	bl	800ec3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea08:	4b5a      	ldr	r3, [pc, #360]	; (800eb74 <pvPortMalloc+0x188>)
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	4013      	ands	r3, r2
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f040 8090 	bne.w	800eb36 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d01e      	beq.n	800ea5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ea1c:	2208      	movs	r2, #8
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4413      	add	r3, r2
 800ea22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f003 0307 	and.w	r3, r3, #7
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d015      	beq.n	800ea5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f023 0307 	bic.w	r3, r3, #7
 800ea34:	3308      	adds	r3, #8
 800ea36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f003 0307 	and.w	r3, r3, #7
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00b      	beq.n	800ea5a <pvPortMalloc+0x6e>
 800ea42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea46:	b672      	cpsid	i
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	b662      	cpsie	i
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	e7fe      	b.n	800ea58 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d06a      	beq.n	800eb36 <pvPortMalloc+0x14a>
 800ea60:	4b45      	ldr	r3, [pc, #276]	; (800eb78 <pvPortMalloc+0x18c>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d865      	bhi.n	800eb36 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea6a:	4b44      	ldr	r3, [pc, #272]	; (800eb7c <pvPortMalloc+0x190>)
 800ea6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea6e:	4b43      	ldr	r3, [pc, #268]	; (800eb7c <pvPortMalloc+0x190>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea74:	e004      	b.n	800ea80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d903      	bls.n	800ea92 <pvPortMalloc+0xa6>
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1f1      	bne.n	800ea76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea92:	4b37      	ldr	r3, [pc, #220]	; (800eb70 <pvPortMalloc+0x184>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d04c      	beq.n	800eb36 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2208      	movs	r2, #8
 800eaa2:	4413      	add	r3, r2
 800eaa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	1ad2      	subs	r2, r2, r3
 800eab6:	2308      	movs	r3, #8
 800eab8:	005b      	lsls	r3, r3, #1
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d920      	bls.n	800eb00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	4413      	add	r3, r2
 800eac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	f003 0307 	and.w	r3, r3, #7
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <pvPortMalloc+0xfc>
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	b672      	cpsid	i
 800ead6:	f383 8811 	msr	BASEPRI, r3
 800eada:	f3bf 8f6f 	isb	sy
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	b662      	cpsie	i
 800eae4:	613b      	str	r3, [r7, #16]
 800eae6:	e7fe      	b.n	800eae6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	685a      	ldr	r2, [r3, #4]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	1ad2      	subs	r2, r2, r3
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eafa:	69b8      	ldr	r0, [r7, #24]
 800eafc:	f000 f900 	bl	800ed00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb00:	4b1d      	ldr	r3, [pc, #116]	; (800eb78 <pvPortMalloc+0x18c>)
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	4a1b      	ldr	r2, [pc, #108]	; (800eb78 <pvPortMalloc+0x18c>)
 800eb0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb0e:	4b1a      	ldr	r3, [pc, #104]	; (800eb78 <pvPortMalloc+0x18c>)
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	4b1b      	ldr	r3, [pc, #108]	; (800eb80 <pvPortMalloc+0x194>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d203      	bcs.n	800eb22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb1a:	4b17      	ldr	r3, [pc, #92]	; (800eb78 <pvPortMalloc+0x18c>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4a18      	ldr	r2, [pc, #96]	; (800eb80 <pvPortMalloc+0x194>)
 800eb20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	4b13      	ldr	r3, [pc, #76]	; (800eb74 <pvPortMalloc+0x188>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	431a      	orrs	r2, r3
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb36:	f7fe ff0f 	bl	800d958 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800eb40:	f7f1 ffdc 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	f003 0307 	and.w	r3, r3, #7
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00b      	beq.n	800eb66 <pvPortMalloc+0x17a>
 800eb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb52:	b672      	cpsid	i
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	b662      	cpsie	i
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	e7fe      	b.n	800eb64 <pvPortMalloc+0x178>
	return pvReturn;
 800eb66:	69fb      	ldr	r3, [r7, #28]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3728      	adds	r7, #40	; 0x28
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20008510 	.word	0x20008510
 800eb74:	2000851c 	.word	0x2000851c
 800eb78:	20008514 	.word	0x20008514
 800eb7c:	20008508 	.word	0x20008508
 800eb80:	20008518 	.word	0x20008518

0800eb84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d04a      	beq.n	800ec2c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb96:	2308      	movs	r3, #8
 800eb98:	425b      	negs	r3, r3
 800eb9a:	697a      	ldr	r2, [r7, #20]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	685a      	ldr	r2, [r3, #4]
 800eba8:	4b22      	ldr	r3, [pc, #136]	; (800ec34 <vPortFree+0xb0>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4013      	ands	r3, r2
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d10b      	bne.n	800ebca <vPortFree+0x46>
 800ebb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb6:	b672      	cpsid	i
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	b662      	cpsie	i
 800ebc6:	60fb      	str	r3, [r7, #12]
 800ebc8:	e7fe      	b.n	800ebc8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00b      	beq.n	800ebea <vPortFree+0x66>
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	b672      	cpsid	i
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	b662      	cpsie	i
 800ebe6:	60bb      	str	r3, [r7, #8]
 800ebe8:	e7fe      	b.n	800ebe8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	4b11      	ldr	r3, [pc, #68]	; (800ec34 <vPortFree+0xb0>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4013      	ands	r3, r2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d019      	beq.n	800ec2c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d115      	bne.n	800ec2c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	4b0b      	ldr	r3, [pc, #44]	; (800ec34 <vPortFree+0xb0>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	43db      	mvns	r3, r3
 800ec0a:	401a      	ands	r2, r3
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec10:	f7fe fe94 	bl	800d93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	685a      	ldr	r2, [r3, #4]
 800ec18:	4b07      	ldr	r3, [pc, #28]	; (800ec38 <vPortFree+0xb4>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	4a06      	ldr	r2, [pc, #24]	; (800ec38 <vPortFree+0xb4>)
 800ec20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec22:	6938      	ldr	r0, [r7, #16]
 800ec24:	f000 f86c 	bl	800ed00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ec28:	f7fe fe96 	bl	800d958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec2c:	bf00      	nop
 800ec2e:	3718      	adds	r7, #24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	2000851c 	.word	0x2000851c
 800ec38:	20008514 	.word	0x20008514

0800ec3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec48:	4b27      	ldr	r3, [pc, #156]	; (800ece8 <prvHeapInit+0xac>)
 800ec4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f003 0307 	and.w	r3, r3, #7
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00c      	beq.n	800ec70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3307      	adds	r3, #7
 800ec5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f023 0307 	bic.w	r3, r3, #7
 800ec62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	4a1f      	ldr	r2, [pc, #124]	; (800ece8 <prvHeapInit+0xac>)
 800ec6c:	4413      	add	r3, r2
 800ec6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec74:	4a1d      	ldr	r2, [pc, #116]	; (800ecec <prvHeapInit+0xb0>)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec7a:	4b1c      	ldr	r3, [pc, #112]	; (800ecec <prvHeapInit+0xb0>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	4413      	add	r3, r2
 800ec86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec88:	2208      	movs	r2, #8
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	1a9b      	subs	r3, r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f023 0307 	bic.w	r3, r3, #7
 800ec96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	4a15      	ldr	r2, [pc, #84]	; (800ecf0 <prvHeapInit+0xb4>)
 800ec9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec9e:	4b14      	ldr	r3, [pc, #80]	; (800ecf0 <prvHeapInit+0xb4>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2200      	movs	r2, #0
 800eca4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eca6:	4b12      	ldr	r3, [pc, #72]	; (800ecf0 <prvHeapInit+0xb4>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	1ad2      	subs	r2, r2, r3
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ecbc:	4b0c      	ldr	r3, [pc, #48]	; (800ecf0 <prvHeapInit+0xb4>)
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	4a0a      	ldr	r2, [pc, #40]	; (800ecf4 <prvHeapInit+0xb8>)
 800ecca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	4a09      	ldr	r2, [pc, #36]	; (800ecf8 <prvHeapInit+0xbc>)
 800ecd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecd4:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <prvHeapInit+0xc0>)
 800ecd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ecda:	601a      	str	r2, [r3, #0]
}
 800ecdc:	bf00      	nop
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	20000508 	.word	0x20000508
 800ecec:	20008508 	.word	0x20008508
 800ecf0:	20008510 	.word	0x20008510
 800ecf4:	20008518 	.word	0x20008518
 800ecf8:	20008514 	.word	0x20008514
 800ecfc:	2000851c 	.word	0x2000851c

0800ed00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed08:	4b28      	ldr	r3, [pc, #160]	; (800edac <prvInsertBlockIntoFreeList+0xac>)
 800ed0a:	60fb      	str	r3, [r7, #12]
 800ed0c:	e002      	b.n	800ed14 <prvInsertBlockIntoFreeList+0x14>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d8f7      	bhi.n	800ed0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	4413      	add	r3, r2
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d108      	bne.n	800ed42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	685a      	ldr	r2, [r3, #4]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	441a      	add	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	441a      	add	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d118      	bne.n	800ed88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	4b15      	ldr	r3, [pc, #84]	; (800edb0 <prvInsertBlockIntoFreeList+0xb0>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d00d      	beq.n	800ed7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	685a      	ldr	r2, [r3, #4]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	441a      	add	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	601a      	str	r2, [r3, #0]
 800ed7c:	e008      	b.n	800ed90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed7e:	4b0c      	ldr	r3, [pc, #48]	; (800edb0 <prvInsertBlockIntoFreeList+0xb0>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	e003      	b.n	800ed90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d002      	beq.n	800ed9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed9e:	bf00      	nop
 800eda0:	3714      	adds	r7, #20
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	20008508 	.word	0x20008508
 800edb0:	20008510 	.word	0x20008510

0800edb4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800edb8:	f005 fdae 	bl	8014918 <touchgfx_init>
}
 800edbc:	bf00      	nop
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800edc4:	f005 fdd2 	bl	801496c <touchgfx_taskEntry>
}
 800edc8:	bf00      	nop
 800edca:	bd80      	pop	{r7, pc}

0800edcc <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
    {
 800edd4:	4a04      	ldr	r2, [pc, #16]	; (800ede8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	601a      	str	r2, [r3, #0]
    }
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4618      	mov	r0, r3
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	0802659c 	.word	0x0802659c

0800edec <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
    }
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7ff ffe9 	bl	800edcc <_ZN8touchgfx12FontProviderD1Ev>
 800edfa:	2104      	movs	r1, #4
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f015 ffb2 	bl	8024d66 <_ZdlPvj>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4618      	mov	r0, r3
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	460b      	mov	r3, r1
 800ee16:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800ee18:	887b      	ldrh	r3, [r7, #2]
 800ee1a:	2b07      	cmp	r3, #7
 800ee1c:	d83a      	bhi.n	800ee94 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800ee1e:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800ee20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee24:	0800ee45 	.word	0x0800ee45
 800ee28:	0800ee4f 	.word	0x0800ee4f
 800ee2c:	0800ee59 	.word	0x0800ee59
 800ee30:	0800ee63 	.word	0x0800ee63
 800ee34:	0800ee6d 	.word	0x0800ee6d
 800ee38:	0800ee77 	.word	0x0800ee77
 800ee3c:	0800ee81 	.word	0x0800ee81
 800ee40:	0800ee8b 	.word	0x0800ee8b
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ee44:	f003 fd24 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	e023      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800ee4e:	f003 fd1f 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee52:	4603      	mov	r3, r0
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	e01e      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ee58:	f003 fd1a 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	e019      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ee62:	f003 fd15 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee66:	4603      	mov	r3, r0
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	e014      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800ee6c:	f003 fd10 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee70:	4603      	mov	r3, r0
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	e00f      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800ee76:	f003 fd0b 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	691b      	ldr	r3, [r3, #16]
 800ee7e:	e00a      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800ee80:	f003 fd06 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee84:	4603      	mov	r3, r0
 800ee86:	695b      	ldr	r3, [r3, #20]
 800ee88:	e005      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800ee8a:	f003 fd01 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	699b      	ldr	r3, [r3, #24]
 800ee92:	e000      	b.n	800ee96 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800ee94:	2300      	movs	r3, #0
    }
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop

0800eea0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	4a05      	ldr	r2, [pc, #20]	; (800eec0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff ff8b 	bl	800edcc <_ZN8touchgfx12FontProviderD1Ev>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	08026588 	.word	0x08026588

0800eec4 <_ZN23ApplicationFontProviderD0Ev>:
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7ff ffe7 	bl	800eea0 <_ZN23ApplicationFontProviderD1Ev>
 800eed2:	2104      	movs	r1, #4
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f015 ff46 	bl	8024d66 <_ZdlPvj>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4618      	mov	r0, r3
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	4a04      	ldr	r2, [pc, #16]	; (800ef00 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	08028828 	.word	0x08028828

0800ef04 <_ZN8touchgfx4FontD0Ev>:
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f7ff ffe9 	bl	800eee4 <_ZN8touchgfx4FontD1Ev>
 800ef12:	2110      	movs	r1, #16
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f015 ff26 	bl	8024d66 <_ZdlPvj>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800ef24:	b590      	push	{r4, r7, lr}
 800ef26:	b087      	sub	sp, #28
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800ef34:	2300      	movs	r3, #0
 800ef36:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	681c      	ldr	r4, [r3, #0]
 800ef40:	f107 030f 	add.w	r3, r7, #15
 800ef44:	f107 0210 	add.w	r2, r7, #16
 800ef48:	8879      	ldrh	r1, [r7, #2]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	47a0      	blx	r4
 800ef4e:	6178      	str	r0, [r7, #20]
        return glyph;
 800ef50:	697b      	ldr	r3, [r7, #20]
    }
 800ef52:	4618      	mov	r0, r3
 800ef54:	371c      	adds	r7, #28
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd90      	pop	{r4, r7, pc}

0800ef5a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800ef5a:	b480      	push	{r7}
 800ef5c:	b083      	sub	sp, #12
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	895b      	ldrh	r3, [r3, #10]
    }
 800ef66:	4618      	mov	r0, r3
 800ef68:	370c      	adds	r7, #12
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr

0800ef72 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800ef72:	b480      	push	{r7}
 800ef74:	b083      	sub	sp, #12
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	899b      	ldrh	r3, [r3, #12]
    }
 800ef7e:	4618      	mov	r0, r3
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr

0800ef8a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800ef8a:	b480      	push	{r7}
 800ef8c:	b083      	sub	sp, #12
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	889b      	ldrh	r3, [r3, #4]
    }
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800efa2:	b480      	push	{r7}
 800efa4:	b083      	sub	sp, #12
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	889a      	ldrh	r2, [r3, #4]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	799b      	ldrb	r3, [r3, #6]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	4413      	add	r3, r2
 800efb6:	b29b      	uxth	r3, r3
    }
 800efb8:	4618      	mov	r0, r3
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	79db      	ldrb	r3, [r3, #7]
 800efd0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800efd4:	b2db      	uxtb	r3, r3
    }
 800efd6:	4618      	mov	r0, r3
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800efe2:	b480      	push	{r7}
 800efe4:	b083      	sub	sp, #12
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	79db      	ldrb	r3, [r3, #7]
 800efee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800eff2:	b2db      	uxtb	r3, r3
    }
 800eff4:	4618      	mov	r0, r3
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	4a05      	ldr	r2, [pc, #20]	; (800f020 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff ff67 	bl	800eee4 <_ZN8touchgfx4FontD1Ev>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	080288e0 	.word	0x080288e0

0800f024 <_ZN8touchgfx9ConstFontD0Ev>:
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7ff ffe7 	bl	800f000 <_ZN8touchgfx9ConstFontD1Ev>
 800f032:	2118      	movs	r1, #24
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f015 fe96 	bl	8024d66 <_ZdlPvj>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	4a05      	ldr	r2, [pc, #20]	; (800f064 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff ffd3 	bl	800f000 <_ZN8touchgfx9ConstFontD1Ev>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	080265e0 	.word	0x080265e0

0800f068 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff ffe7 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f076:	2124      	movs	r1, #36	; 0x24
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f015 fe74 	bl	8024d66 <_ZdlPvj>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4618      	mov	r0, r3
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 f82d 	bl	800f0f0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f096:	4b08      	ldr	r3, [pc, #32]	; (800f0b8 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	4b08      	ldr	r3, [pc, #32]	; (800f0bc <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f09c:	6819      	ldr	r1, [r3, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	440b      	add	r3, r1
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	009b      	lsls	r3, r3, #2
 800f0aa:	4413      	add	r3, r2
 800f0ac:	681b      	ldr	r3, [r3, #0]
    }
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	2000be04 	.word	0x2000be04
 800f0bc:	2000bdfc 	.word	0x2000bdfc

0800f0c0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 f811 	bl	800f0f0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f0ce:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	881b      	ldrh	r3, [r3, #0]
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	4413      	add	r3, r2
 800f0da:	785b      	ldrb	r3, [r3, #1]
 800f0dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f0e0:	b2db      	uxtb	r3, r3
    }
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	2000bdfc 	.word	0x2000bdfc

0800f0f0 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f0f8:	4b0c      	ldr	r3, [pc, #48]	; (800f12c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d105      	bne.n	800f10c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f100:	4b0b      	ldr	r3, [pc, #44]	; (800f130 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f102:	4a0c      	ldr	r2, [pc, #48]	; (800f134 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f104:	21de      	movs	r1, #222	; 0xde
 800f106:	480c      	ldr	r0, [pc, #48]	; (800f138 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f108:	f015 fe58 	bl	8024dbc <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	881a      	ldrh	r2, [r3, #0]
 800f110:	4b0a      	ldr	r3, [pc, #40]	; (800f13c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	429a      	cmp	r2, r3
 800f116:	d305      	bcc.n	800f124 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f118:	4b09      	ldr	r3, [pc, #36]	; (800f140 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f11a:	4a06      	ldr	r2, [pc, #24]	; (800f134 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f11c:	21df      	movs	r1, #223	; 0xdf
 800f11e:	4806      	ldr	r0, [pc, #24]	; (800f138 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f120:	f015 fe4c 	bl	8024dbc <__assert_func>
    }
 800f124:	bf00      	nop
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	2000bdfc 	.word	0x2000bdfc
 800f130:	08025e6c 	.word	0x08025e6c
 800f134:	080265a8 	.word	0x080265a8
 800f138:	08025eb0 	.word	0x08025eb0
 800f13c:	2000be00 	.word	0x2000be00
 800f140:	08025ef4 	.word	0x08025ef4

0800f144 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	7b5b      	ldrb	r3, [r3, #13]
 800f150:	021b      	lsls	r3, r3, #8
 800f152:	b21b      	sxth	r3, r3
 800f154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f158:	b21a      	sxth	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	7adb      	ldrb	r3, [r3, #11]
 800f15e:	b21b      	sxth	r3, r3
 800f160:	4313      	orrs	r3, r2
 800f162:	b21b      	sxth	r3, r3
 800f164:	b29b      	uxth	r3, r3
    }
 800f166:	4618      	mov	r0, r3
 800f168:	370c      	adds	r7, #12
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr

0800f172 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f172:	b480      	push	{r7}
 800f174:	b083      	sub	sp, #12
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a1b      	ldr	r3, [r3, #32]
    }
 800f17e:	4618      	mov	r0, r3
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
	...

0800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b08c      	sub	sp, #48	; 0x30
 800f190:	af08      	add	r7, sp, #32
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	4611      	mov	r1, r2
 800f198:	461a      	mov	r2, r3
 800f19a:	460b      	mov	r3, r1
 800f19c:	80fb      	strh	r3, [r7, #6]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	88b9      	ldrh	r1, [r7, #4]
 800f1a6:	88fa      	ldrh	r2, [r7, #6]
 800f1a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f1aa:	9306      	str	r3, [sp, #24]
 800f1ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f1ae:	9305      	str	r3, [sp, #20]
 800f1b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f1b4:	9304      	str	r3, [sp, #16]
 800f1b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f1ba:	9303      	str	r3, [sp, #12]
 800f1bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1c0:	9302      	str	r3, [sp, #8]
 800f1c2:	7f3b      	ldrb	r3, [r7, #28]
 800f1c4:	9301      	str	r3, [sp, #4]
 800f1c6:	7e3b      	ldrb	r3, [r7, #24]
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	68b9      	ldr	r1, [r7, #8]
 800f1ce:	f00a fae9 	bl	80197a4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f1d2:	4a08      	ldr	r2, [pc, #32]	; (800f1f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	601a      	str	r2, [r3, #0]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1dc:	619a      	str	r2, [r3, #24]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1e2:	61da      	str	r2, [r3, #28]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f1e8:	621a      	str	r2, [r3, #32]
{
}
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	080265e0 	.word	0x080265e0

0800f1f8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	889b      	ldrh	r3, [r3, #4]
 800f20c:	0adb      	lsrs	r3, r3, #11
 800f20e:	b29b      	uxth	r3, r3
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	4413      	add	r3, r2
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4413      	add	r3, r2
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3714      	adds	r7, #20
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b086      	sub	sp, #24
 800f22e:	af00      	add	r7, sp, #0
 800f230:	60f8      	str	r0, [r7, #12]
 800f232:	460b      	mov	r3, r1
 800f234:	607a      	str	r2, [r7, #4]
 800f236:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d003      	beq.n	800f246 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	7b1b      	ldrb	r3, [r3, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f246:	2300      	movs	r3, #0
 800f248:	e023      	b.n	800f292 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff ff7a 	bl	800f144 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f250:	4603      	mov	r3, r0
 800f252:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f254:	8abb      	ldrh	r3, [r7, #20]
 800f256:	82fb      	strh	r3, [r7, #22]
 800f258:	8afa      	ldrh	r2, [r7, #22]
 800f25a:	8abb      	ldrh	r3, [r7, #20]
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	7b09      	ldrb	r1, [r1, #12]
 800f260:	440b      	add	r3, r1
 800f262:	429a      	cmp	r2, r3
 800f264:	da14      	bge.n	800f290 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	69da      	ldr	r2, [r3, #28]
 800f26a:	8afb      	ldrh	r3, [r7, #22]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4413      	add	r3, r2
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	897a      	ldrh	r2, [r7, #10]
 800f274:	429a      	cmp	r2, r3
 800f276:	d107      	bne.n	800f288 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	69da      	ldr	r2, [r3, #28]
 800f27c:	8afb      	ldrh	r3, [r7, #22]
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	4413      	add	r3, r2
 800f282:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f286:	e004      	b.n	800f292 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f288:	8afb      	ldrh	r3, [r7, #22]
 800f28a:	3301      	adds	r3, #1
 800f28c:	82fb      	strh	r3, [r7, #22]
 800f28e:	e7e3      	b.n	800f258 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3718      	adds	r7, #24
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
	...

0800f29c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f29c:	b580      	push	{r7, lr}
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	4801      	ldr	r0, [pc, #4]	; (800f2a8 <__tcf_0+0xc>)
 800f2a2:	f7ff fecf 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	20008520 	.word	0x20008520

0800f2ac <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b08a      	sub	sp, #40	; 0x28
 800f2b0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f2b2:	4b15      	ldr	r3, [pc, #84]	; (800f308 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f003 0301 	and.w	r3, r3, #1
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d11f      	bne.n	800f2fe <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9308      	str	r3, [sp, #32]
 800f2c6:	233f      	movs	r3, #63	; 0x3f
 800f2c8:	9307      	str	r3, [sp, #28]
 800f2ca:	4b10      	ldr	r3, [pc, #64]	; (800f30c <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f2cc:	9306      	str	r3, [sp, #24]
 800f2ce:	4b10      	ldr	r3, [pc, #64]	; (800f310 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f2d0:	9305      	str	r3, [sp, #20]
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	9304      	str	r3, [sp, #16]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9303      	str	r3, [sp, #12]
 800f2da:	2301      	movs	r3, #1
 800f2dc:	9302      	str	r3, [sp, #8]
 800f2de:	2304      	movs	r3, #4
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	230a      	movs	r3, #10
 800f2e8:	2204      	movs	r2, #4
 800f2ea:	490a      	ldr	r1, [pc, #40]	; (800f314 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f2ec:	480a      	ldr	r0, [pc, #40]	; (800f318 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f2ee:	f7ff ff4d 	bl	800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f2f2:	4b05      	ldr	r3, [pc, #20]	; (800f308 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	601a      	str	r2, [r3, #0]
 800f2f8:	4808      	ldr	r0, [pc, #32]	; (800f31c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f2fa:	f015 fd7d 	bl	8024df8 <atexit>
    return Asap_Bold_10_4bpp;
 800f2fe:	4b06      	ldr	r3, [pc, #24]	; (800f318 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f300:	4618      	mov	r0, r3
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	20008544 	.word	0x20008544
 800f30c:	0802d8d8 	.word	0x0802d8d8
 800f310:	0802662c 	.word	0x0802662c
 800f314:	0802d8f4 	.word	0x0802d8f4
 800f318:	20008520 	.word	0x20008520
 800f31c:	0800f29d 	.word	0x0800f29d

0800f320 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f320:	b580      	push	{r7, lr}
 800f322:	af00      	add	r7, sp, #0
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__tcf_0+0xc>)
 800f326:	f7ff fe8d 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	20008548 	.word	0x20008548

0800f330 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b08a      	sub	sp, #40	; 0x28
 800f334:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f336:	4b15      	ldr	r3, [pc, #84]	; (800f38c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d11f      	bne.n	800f382 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f342:	2300      	movs	r3, #0
 800f344:	9309      	str	r3, [sp, #36]	; 0x24
 800f346:	2300      	movs	r3, #0
 800f348:	9308      	str	r3, [sp, #32]
 800f34a:	233f      	movs	r3, #63	; 0x3f
 800f34c:	9307      	str	r3, [sp, #28]
 800f34e:	4b10      	ldr	r3, [pc, #64]	; (800f390 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f350:	9306      	str	r3, [sp, #24]
 800f352:	4b10      	ldr	r3, [pc, #64]	; (800f394 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	2301      	movs	r3, #1
 800f358:	9304      	str	r3, [sp, #16]
 800f35a:	2300      	movs	r3, #0
 800f35c:	9303      	str	r3, [sp, #12]
 800f35e:	2301      	movs	r3, #1
 800f360:	9302      	str	r3, [sp, #8]
 800f362:	2304      	movs	r3, #4
 800f364:	9301      	str	r3, [sp, #4]
 800f366:	2300      	movs	r3, #0
 800f368:	9300      	str	r3, [sp, #0]
 800f36a:	230c      	movs	r3, #12
 800f36c:	221b      	movs	r2, #27
 800f36e:	490a      	ldr	r1, [pc, #40]	; (800f398 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f370:	480a      	ldr	r0, [pc, #40]	; (800f39c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f372:	f7ff ff0b 	bl	800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f376:	4b05      	ldr	r3, [pc, #20]	; (800f38c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f378:	2201      	movs	r2, #1
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	4808      	ldr	r0, [pc, #32]	; (800f3a0 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f37e:	f015 fd3b 	bl	8024df8 <atexit>
    return Asap_Bold_12_4bpp;
 800f382:	4b06      	ldr	r3, [pc, #24]	; (800f39c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f384:	4618      	mov	r0, r3
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	2000856c 	.word	0x2000856c
 800f390:	0802d8dc 	.word	0x0802d8dc
 800f394:	08026630 	.word	0x08026630
 800f398:	0802d92c 	.word	0x0802d92c
 800f39c:	20008548 	.word	0x20008548
 800f3a0:	0800f321 	.word	0x0800f321

0800f3a4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	4801      	ldr	r0, [pc, #4]	; (800f3b0 <__tcf_0+0xc>)
 800f3aa:	f7ff fe4b 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	20008570 	.word	0x20008570

0800f3b4 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b08a      	sub	sp, #40	; 0x28
 800f3b8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f3ba:	4b15      	ldr	r3, [pc, #84]	; (800f410 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f003 0301 	and.w	r3, r3, #1
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d11f      	bne.n	800f406 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	9308      	str	r3, [sp, #32]
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	9307      	str	r3, [sp, #28]
 800f3d2:	4b10      	ldr	r3, [pc, #64]	; (800f414 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f3d4:	9306      	str	r3, [sp, #24]
 800f3d6:	4b10      	ldr	r3, [pc, #64]	; (800f418 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f3d8:	9305      	str	r3, [sp, #20]
 800f3da:	2300      	movs	r3, #0
 800f3dc:	9304      	str	r3, [sp, #16]
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9303      	str	r3, [sp, #12]
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	9302      	str	r3, [sp, #8]
 800f3e6:	2304      	movs	r3, #4
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	2312      	movs	r3, #18
 800f3f0:	220d      	movs	r2, #13
 800f3f2:	490a      	ldr	r1, [pc, #40]	; (800f41c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f3f4:	480a      	ldr	r0, [pc, #40]	; (800f420 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f3f6:	f7ff fec9 	bl	800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f3fa:	4b05      	ldr	r3, [pc, #20]	; (800f410 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	4808      	ldr	r0, [pc, #32]	; (800f424 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f402:	f015 fcf9 	bl	8024df8 <atexit>
    return Asap_Bold_18_4bpp;
 800f406:	4b06      	ldr	r3, [pc, #24]	; (800f420 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f408:	4618      	mov	r0, r3
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	20008594 	.word	0x20008594
 800f414:	0802d8e0 	.word	0x0802d8e0
 800f418:	08026634 	.word	0x08026634
 800f41c:	0802daa8 	.word	0x0802daa8
 800f420:	20008570 	.word	0x20008570
 800f424:	0800f3a5 	.word	0x0800f3a5

0800f428 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f428:	b580      	push	{r7, lr}
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	4801      	ldr	r0, [pc, #4]	; (800f434 <__tcf_0+0xc>)
 800f42e:	f7ff fe09 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f432:	bd80      	pop	{r7, pc}
 800f434:	20008598 	.word	0x20008598

0800f438 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b08a      	sub	sp, #40	; 0x28
 800f43c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f43e:	4b15      	ldr	r3, [pc, #84]	; (800f494 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f003 0301 	and.w	r3, r3, #1
 800f446:	2b00      	cmp	r3, #0
 800f448:	d11f      	bne.n	800f48a <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f44a:	2300      	movs	r3, #0
 800f44c:	9309      	str	r3, [sp, #36]	; 0x24
 800f44e:	2300      	movs	r3, #0
 800f450:	9308      	str	r3, [sp, #32]
 800f452:	233f      	movs	r3, #63	; 0x3f
 800f454:	9307      	str	r3, [sp, #28]
 800f456:	4b10      	ldr	r3, [pc, #64]	; (800f498 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f458:	9306      	str	r3, [sp, #24]
 800f45a:	4b10      	ldr	r3, [pc, #64]	; (800f49c <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f45c:	9305      	str	r3, [sp, #20]
 800f45e:	2301      	movs	r3, #1
 800f460:	9304      	str	r3, [sp, #16]
 800f462:	2300      	movs	r3, #0
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	2301      	movs	r3, #1
 800f468:	9302      	str	r3, [sp, #8]
 800f46a:	2304      	movs	r3, #4
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	2300      	movs	r3, #0
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	2315      	movs	r3, #21
 800f474:	220d      	movs	r2, #13
 800f476:	490a      	ldr	r1, [pc, #40]	; (800f4a0 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f478:	480a      	ldr	r0, [pc, #40]	; (800f4a4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f47a:	f7ff fe87 	bl	800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f47e:	4b05      	ldr	r3, [pc, #20]	; (800f494 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f480:	2201      	movs	r2, #1
 800f482:	601a      	str	r2, [r3, #0]
 800f484:	4808      	ldr	r0, [pc, #32]	; (800f4a8 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f486:	f015 fcb7 	bl	8024df8 <atexit>
    return Asap_Bold_21_4bpp;
 800f48a:	4b06      	ldr	r3, [pc, #24]	; (800f4a4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	200085bc 	.word	0x200085bc
 800f498:	0802d8e4 	.word	0x0802d8e4
 800f49c:	08026638 	.word	0x08026638
 800f4a0:	0802db60 	.word	0x0802db60
 800f4a4:	20008598 	.word	0x20008598
 800f4a8:	0800f429 	.word	0x0800f429

0800f4ac <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	4801      	ldr	r0, [pc, #4]	; (800f4b8 <__tcf_0+0xc>)
 800f4b2:	f7ff fdc7 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	200085c0 	.word	0x200085c0

0800f4bc <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b08a      	sub	sp, #40	; 0x28
 800f4c0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f4c2:	4b15      	ldr	r3, [pc, #84]	; (800f518 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f003 0301 	and.w	r3, r3, #1
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d11f      	bne.n	800f50e <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	9308      	str	r3, [sp, #32]
 800f4d6:	233f      	movs	r3, #63	; 0x3f
 800f4d8:	9307      	str	r3, [sp, #28]
 800f4da:	4b10      	ldr	r3, [pc, #64]	; (800f51c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f4dc:	9306      	str	r3, [sp, #24]
 800f4de:	4b10      	ldr	r3, [pc, #64]	; (800f520 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f4e0:	9305      	str	r3, [sp, #20]
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	9304      	str	r3, [sp, #16]
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	9303      	str	r3, [sp, #12]
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	9302      	str	r3, [sp, #8]
 800f4ee:	2304      	movs	r3, #4
 800f4f0:	9301      	str	r3, [sp, #4]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	231e      	movs	r3, #30
 800f4f8:	220d      	movs	r2, #13
 800f4fa:	490a      	ldr	r1, [pc, #40]	; (800f524 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f4fc:	480a      	ldr	r0, [pc, #40]	; (800f528 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f4fe:	f7ff fe45 	bl	800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f502:	4b05      	ldr	r3, [pc, #20]	; (800f518 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f504:	2201      	movs	r2, #1
 800f506:	601a      	str	r2, [r3, #0]
 800f508:	4808      	ldr	r0, [pc, #32]	; (800f52c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f50a:	f015 fc75 	bl	8024df8 <atexit>
    return Asap_Bold_30_4bpp;
 800f50e:	4b06      	ldr	r3, [pc, #24]	; (800f528 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f510:	4618      	mov	r0, r3
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	200085e4 	.word	0x200085e4
 800f51c:	0802d8e8 	.word	0x0802d8e8
 800f520:	0802663c 	.word	0x0802663c
 800f524:	0802dc18 	.word	0x0802dc18
 800f528:	200085c0 	.word	0x200085c0
 800f52c:	0800f4ad 	.word	0x0800f4ad

0800f530 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
 800f534:	4801      	ldr	r0, [pc, #4]	; (800f53c <__tcf_0+0xc>)
 800f536:	f7ff fd85 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	200085e8 	.word	0x200085e8

0800f540 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b08a      	sub	sp, #40	; 0x28
 800f544:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f546:	4b15      	ldr	r3, [pc, #84]	; (800f59c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f003 0301 	and.w	r3, r3, #1
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d11f      	bne.n	800f592 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f552:	2300      	movs	r3, #0
 800f554:	9309      	str	r3, [sp, #36]	; 0x24
 800f556:	2300      	movs	r3, #0
 800f558:	9308      	str	r3, [sp, #32]
 800f55a:	233f      	movs	r3, #63	; 0x3f
 800f55c:	9307      	str	r3, [sp, #28]
 800f55e:	4b10      	ldr	r3, [pc, #64]	; (800f5a0 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f560:	9306      	str	r3, [sp, #24]
 800f562:	4b10      	ldr	r3, [pc, #64]	; (800f5a4 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f564:	9305      	str	r3, [sp, #20]
 800f566:	2301      	movs	r3, #1
 800f568:	9304      	str	r3, [sp, #16]
 800f56a:	2300      	movs	r3, #0
 800f56c:	9303      	str	r3, [sp, #12]
 800f56e:	2301      	movs	r3, #1
 800f570:	9302      	str	r3, [sp, #8]
 800f572:	2304      	movs	r3, #4
 800f574:	9301      	str	r3, [sp, #4]
 800f576:	2300      	movs	r3, #0
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	2328      	movs	r3, #40	; 0x28
 800f57c:	220c      	movs	r2, #12
 800f57e:	490a      	ldr	r1, [pc, #40]	; (800f5a8 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f580:	480a      	ldr	r0, [pc, #40]	; (800f5ac <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f582:	f7ff fe03 	bl	800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f586:	4b05      	ldr	r3, [pc, #20]	; (800f59c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f588:	2201      	movs	r2, #1
 800f58a:	601a      	str	r2, [r3, #0]
 800f58c:	4808      	ldr	r0, [pc, #32]	; (800f5b0 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f58e:	f015 fc33 	bl	8024df8 <atexit>
    return Asap_Bold_40_4bpp;
 800f592:	4b06      	ldr	r3, [pc, #24]	; (800f5ac <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f594:	4618      	mov	r0, r3
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	2000860c 	.word	0x2000860c
 800f5a0:	0802d8ec 	.word	0x0802d8ec
 800f5a4:	08026640 	.word	0x08026640
 800f5a8:	0802dcd0 	.word	0x0802dcd0
 800f5ac:	200085e8 	.word	0x200085e8
 800f5b0:	0800f531 	.word	0x0800f531

0800f5b4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	4801      	ldr	r0, [pc, #4]	; (800f5c0 <__tcf_0+0xc>)
 800f5ba:	f7ff fd43 	bl	800f044 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	20008610 	.word	0x20008610

0800f5c4 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b08a      	sub	sp, #40	; 0x28
 800f5c8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f5ca:	4b15      	ldr	r3, [pc, #84]	; (800f620 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f003 0301 	and.w	r3, r3, #1
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d11f      	bne.n	800f616 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5da:	2300      	movs	r3, #0
 800f5dc:	9308      	str	r3, [sp, #32]
 800f5de:	233f      	movs	r3, #63	; 0x3f
 800f5e0:	9307      	str	r3, [sp, #28]
 800f5e2:	4b10      	ldr	r3, [pc, #64]	; (800f624 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f5e4:	9306      	str	r3, [sp, #24]
 800f5e6:	4b10      	ldr	r3, [pc, #64]	; (800f628 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f5e8:	9305      	str	r3, [sp, #20]
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	9304      	str	r3, [sp, #16]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	9303      	str	r3, [sp, #12]
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	9302      	str	r3, [sp, #8]
 800f5f6:	2304      	movs	r3, #4
 800f5f8:	9301      	str	r3, [sp, #4]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	233c      	movs	r3, #60	; 0x3c
 800f600:	220d      	movs	r2, #13
 800f602:	490a      	ldr	r1, [pc, #40]	; (800f62c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f604:	480a      	ldr	r0, [pc, #40]	; (800f630 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f606:	f7ff fdc1 	bl	800f18c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f60a:	4b05      	ldr	r3, [pc, #20]	; (800f620 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f60c:	2201      	movs	r2, #1
 800f60e:	601a      	str	r2, [r3, #0]
 800f610:	4808      	ldr	r0, [pc, #32]	; (800f634 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f612:	f015 fbf1 	bl	8024df8 <atexit>
    return Asap_Bold_60_4bpp;
 800f616:	4b06      	ldr	r3, [pc, #24]	; (800f630 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f618:	4618      	mov	r0, r3
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	20008634 	.word	0x20008634
 800f624:	0802d8f0 	.word	0x0802d8f0
 800f628:	08026644 	.word	0x08026644
 800f62c:	0802dd78 	.word	0x0802dd78
 800f630:	20008610 	.word	0x20008610
 800f634:	0800f5b5 	.word	0x0800f5b5

0800f638 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	4618      	mov	r0, r3
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
    {
    }
 800f65a:	bf00      	nop
 800f65c:	370c      	adds	r7, #12
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f666:	b480      	push	{r7}
 800f668:	b083      	sub	sp, #12
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	6039      	str	r1, [r7, #0]
    {
    }
 800f670:	bf00      	nop
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
    {
    }
 800f686:	bf00      	nop
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f692:	b480      	push	{r7}
 800f694:	b083      	sub	sp, #12
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
 800f69a:	460b      	mov	r3, r1
 800f69c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f69e:	bf00      	nop
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f6aa:	b480      	push	{r7}
 800f6ac:	b083      	sub	sp, #12
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
    {
    }
 800f6b2:	bf00      	nop
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f6be:	b480      	push	{r7}
 800f6c0:	b083      	sub	sp, #12
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
    {
    }
 800f6c6:	bf00      	nop
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
	...

0800f6d4 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
    {
 800f6dc:	4a04      	ldr	r2, [pc, #16]	; (800f6f0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	601a      	str	r2, [r3, #0]
    }
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	08026738 	.word	0x08026738

0800f6f4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
    }
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7ff ffe9 	bl	800f6d4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f702:	2104      	movs	r1, #4
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f015 fb2e 	bl	8024d66 <_ZdlPvj>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4618      	mov	r0, r3
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f71c:	4a07      	ldr	r2, [pc, #28]	; (800f73c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	605a      	str	r2, [r3, #4]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	08026718 	.word	0x08026718

0800f740 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
    {
 800f748:	4a04      	ldr	r2, [pc, #16]	; (800f75c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	601a      	str	r2, [r3, #0]
    }
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4618      	mov	r0, r3
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	08026718 	.word	0x08026718

0800f760 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
    }
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7ff ffe9 	bl	800f740 <_ZN8touchgfx10TransitionD1Ev>
 800f76e:	210c      	movs	r1, #12
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f015 faf8 	bl	8024d66 <_ZdlPvj>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4618      	mov	r0, r3
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	bf00      	nop
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	bf00      	nop
 800f79e:	370c      	adds	r7, #12
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	bf00      	nop
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	683a      	ldr	r2, [r7, #0]
 800f7ca:	605a      	str	r2, [r3, #4]
    }
 800f7cc:	bf00      	nop
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
    {
 800f7f8:	4a04      	ldr	r2, [pc, #16]	; (800f80c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]
    }
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	08026700 	.word	0x08026700

0800f810 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
    }
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff ffe9 	bl	800f7f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f81e:	2104      	movs	r1, #4
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f015 faa0 	bl	8024d66 <_ZdlPvj>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f830:	b480      	push	{r7}
 800f832:	af00      	add	r7, sp, #0
    {
        return instance;
 800f834:	4b03      	ldr	r3, [pc, #12]	; (800f844 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f836:	681b      	ldr	r3, [r3, #0]
    }
 800f838:	4618      	mov	r0, r3
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	2000bd6c 	.word	0x2000bd6c

0800f848 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f848:	b480      	push	{r7}
 800f84a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f84c:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f854:	2b00      	cmp	r3, #0
 800f856:	d008      	beq.n	800f86a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f858:	4b08      	ldr	r3, [pc, #32]	; (800f87c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f862:	4b06      	ldr	r3, [pc, #24]	; (800f87c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f868:	e002      	b.n	800f870 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f86a:	4b04      	ldr	r3, [pc, #16]	; (800f87c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f870:	4618      	mov	r0, r3
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	2000bd6c 	.word	0x2000bd6c

0800f880 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	4a05      	ldr	r2, [pc, #20]	; (800f8a0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	601a      	str	r2, [r3, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4618      	mov	r0, r3
 800f892:	f7ff ff1f 	bl	800f6d4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4618      	mov	r0, r3
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	08028740 	.word	0x08028740

0800f8a4 <_ZN8touchgfx11ApplicationD0Ev>:
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff ffe7 	bl	800f880 <_ZN8touchgfx11ApplicationD1Ev>
 800f8b2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f015 fa55 	bl	8024d66 <_ZdlPvj>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
	...

0800f8c8 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f009 faa0 	bl	8018e18 <_ZN8touchgfx11ApplicationC1Ev>
 800f8d8:	4a09      	ldr	r2, [pc, #36]	; (800f900 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a04      	ldr	r2, [pc, #16]	; (800f904 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f8f2:	6013      	str	r3, [r2, #0]
    }
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	080266c4 	.word	0x080266c4
 800f904:	2000bdf8 	.word	0x2000bdf8

0800f908 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	4a05      	ldr	r2, [pc, #20]	; (800f928 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	601a      	str	r2, [r3, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4618      	mov	r0, r3
 800f91a:	f7ff ffb1 	bl	800f880 <_ZN8touchgfx11ApplicationD1Ev>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4618      	mov	r0, r3
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	080266c4 	.word	0x080266c4

0800f92c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff ffe7 	bl	800f908 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f93a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f015 fa11 	bl	8024d66 <_ZdlPvj>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4618      	mov	r0, r3
 800f948:	3708      	adds	r7, #8
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f94e:	b580      	push	{r7, lr}
 800f950:	b082      	sub	sp, #8
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f804 	bl	800f964 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00f      	beq.n	800f996 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	330c      	adds	r3, #12
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4610      	mov	r0, r2
 800f98a:	4798      	blx	r3
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f992:	2301      	movs	r3, #1
 800f994:	e000      	b.n	800f998 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f996:	2300      	movs	r3, #0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00e      	beq.n	800f9ba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3308      	adds	r3, #8
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4610      	mov	r0, r2
 800f9b0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800f9ba:	bf00      	nop
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	60f8      	str	r0, [r7, #12]
 800f9ca:	60b9      	str	r1, [r7, #8]
 800f9cc:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800f9ce:	f009 fa01 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f009 fa03 	bl	8018de0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d008      	beq.n	800f9f4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	330c      	adds	r3, #12
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	4798      	blx	r3
    }
    if (*currentTrans)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d007      	beq.n	800fa0c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4610      	mov	r0, r2
 800fa0a:	4798      	blx	r3
    }
    if (*currentScreen)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d008      	beq.n	800fa26 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	3314      	adds	r3, #20
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4610      	mov	r0, r2
 800fa24:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d008      	beq.n	800fa40 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4798      	blx	r3
    }
    if (*currentScreen)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d007      	beq.n	800fa58 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4610      	mov	r0, r2
 800fa56:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d008      	beq.n	800fa72 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	3308      	adds	r3, #8
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4610      	mov	r0, r2
 800fa70:	4798      	blx	r3
    }
}
 800fa72:	bf00      	nop
 800fa74:	3710      	adds	r7, #16
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}

0800fa7a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800fa7a:	b580      	push	{r7, lr}
 800fa7c:	b084      	sub	sp, #16
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	60f8      	str	r0, [r7, #12]
 800fa82:	60b9      	str	r1, [r7, #8]
 800fa84:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	330c      	adds	r3, #12
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	4798      	blx	r3
    newPresenter->activate();
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68b8      	ldr	r0, [r7, #8]
 800fa9a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fa9c:	6879      	ldr	r1, [r7, #4]
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f00a faa8 	bl	8019ff4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	3310      	adds	r3, #16
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	4798      	blx	r3

    Application::getInstance()->draw();
 800fab0:	f009 f990 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 800fab4:	4602      	mov	r2, r0
 800fab6:	6813      	ldr	r3, [r2, #0]
 800fab8:	3328      	adds	r3, #40	; 0x28
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4610      	mov	r0, r2
 800fabe:	4798      	blx	r3
}
 800fac0:	bf00      	nop
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	683a      	ldr	r2, [r7, #0]
 800fad6:	601a      	str	r2, [r3, #0]
    }
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	4a08      	ldr	r2, [pc, #32]	; (800fb10 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800faf8:	4618      	mov	r0, r3
 800fafa:	f000 fa5f 	bl	800ffbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7ff ff01 	bl	800f908 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	08026670 	.word	0x08026670

0800fb14 <_ZN23FrontendApplicationBaseD0Ev>:
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7ff ffe1 	bl	800fae4 <_ZN23FrontendApplicationBaseD1Ev>
 800fb22:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f015 f91d 	bl	8024d66 <_ZdlPvj>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3708      	adds	r7, #8
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
	...

0800fb38 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7ff fde6 	bl	800f714 <_ZN8touchgfx10TransitionC1Ev>
 800fb48:	4a03      	ldr	r2, [pc, #12]	; (800fb58 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	601a      	str	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4618      	mov	r0, r3
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	08026650 	.word	0x08026650

0800fb5c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	4a05      	ldr	r2, [pc, #20]	; (800fb7c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	601a      	str	r2, [r3, #0]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7ff fde7 	bl	800f740 <_ZN8touchgfx10TransitionD1Ev>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4618      	mov	r0, r3
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	08026650 	.word	0x08026650

0800fb80 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f7ff ffe7 	bl	800fb5c <_ZN8touchgfx12NoTransitionD1Ev>
 800fb8e:	210c      	movs	r1, #12
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f015 f8e8 	bl	8024d66 <_ZdlPvj>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	721a      	strb	r2, [r3, #8]
    }
 800fbae:	bf00      	nop
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
 800fbc2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	683a      	ldr	r2, [r7, #0]
 800fbc8:	605a      	str	r2, [r3, #4]
    }
 800fbca:	bf00      	nop
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
	...

0800fbd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff fe6e 	bl	800f8c8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fbec:	4a13      	ldr	r2, [pc, #76]	; (800fc3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f000 f89f 	bl	800fd3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	68ba      	ldr	r2, [r7, #8]
 800fc0a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fc0e:	f7ff fe0f 	bl	800f830 <_ZN8touchgfx3HAL11getInstanceEv>
 800fc12:	4602      	mov	r2, r0
 800fc14:	6813      	ldr	r3, [r2, #0]
 800fc16:	3308      	adds	r3, #8
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fc20:	2000      	movs	r0, #0
 800fc22:	f002 fdbd 	bl	80127a0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fc26:	f7ff fe0f 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f00e fda8 	bl	801e782 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4618      	mov	r0, r3
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	08026670 	.word	0x08026670

0800fc40 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	4611      	mov	r1, r2
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7ff ffe9 	bl	800fc40 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	685a      	ldr	r2, [r3, #4]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	605a      	str	r2, [r3, #4]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	3308      	adds	r3, #8
 800fc7c:	3208      	adds	r2, #8
 800fc7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc82:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800fc90:	b590      	push	{r4, r7, lr}
 800fc92:	b089      	sub	sp, #36	; 0x24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fc9e:	4b10      	ldr	r3, [pc, #64]	; (800fce0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fca0:	61bb      	str	r3, [r7, #24]
 800fca2:	2300      	movs	r3, #0
 800fca4:	61fb      	str	r3, [r7, #28]
 800fca6:	f107 0008 	add.w	r0, r7, #8
 800fcaa:	f107 0318 	add.w	r3, r7, #24
 800fcae:	cb0c      	ldmia	r3, {r2, r3}
 800fcb0:	6879      	ldr	r1, [r7, #4]
 800fcb2:	f000 f85f 	bl	800fd74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fcb6:	f107 0308 	add.w	r3, r7, #8
 800fcba:	4619      	mov	r1, r3
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f7ff ffcb 	bl	800fc58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fcc2:	f107 0308 	add.w	r3, r7, #8
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f000 f978 	bl	800ffbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fcd8:	bf00      	nop
 800fcda:	3724      	adds	r7, #36	; 0x24
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd90      	pop	{r4, r7, pc}
 800fce0:	0800fce5 	.word	0x0800fce5

0800fce4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af02      	add	r7, sp, #8
 800fcea:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	4b04      	ldr	r3, [pc, #16]	; (800fd14 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800fd04:	4804      	ldr	r0, [pc, #16]	; (800fd18 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800fd06:	f000 f855 	bl	800fdb4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fd0a:	bf00      	nop
 800fd0c:	3708      	adds	r7, #8
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	2000bdec 	.word	0x2000bdec
 800fd18:	2000bde8 	.word	0x2000bde8

0800fd1c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	4a04      	ldr	r2, [pc, #16]	; (800fd38 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	601a      	str	r2, [r3, #0]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	08026700 	.word	0x08026700

0800fd3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff ffe8 	bl	800fd1c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fd4c:	4a08      	ldr	r2, [pc, #32]	; (800fd70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	605a      	str	r2, [r3, #4]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	609a      	str	r2, [r3, #8]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	60da      	str	r2, [r3, #12]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4618      	mov	r0, r3
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	080266ac 	.word	0x080266ac

0800fd74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	4639      	mov	r1, r7
 800fd80:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7ff ffc8 	bl	800fd1c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fd8c:	4a08      	ldr	r2, [pc, #32]	; (800fdb0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	463a      	mov	r2, r7
 800fd9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fda2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	080266ac 	.word	0x080266ac

0800fdb4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fdb4:	b590      	push	{r4, r7, lr}
 800fdb6:	b089      	sub	sp, #36	; 0x24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
 800fdc0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	689a      	ldr	r2, [r3, #8]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3320      	adds	r3, #32
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	4798      	blx	r3
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	f242 73bb 	movw	r3, #10171	; 0x27bb
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d805      	bhi.n	800fdea <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800fdde:	4b4e      	ldr	r3, [pc, #312]	; (800ff18 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800fde0:	4a4e      	ldr	r2, [pc, #312]	; (800ff1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fde2:	21c2      	movs	r1, #194	; 0xc2
 800fde4:	484e      	ldr	r0, [pc, #312]	; (800ff20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fde6:	f014 ffe9 	bl	8024dbc <__assert_func>
 800fdea:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	685a      	ldr	r2, [r3, #4]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	3320      	adds	r3, #32
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	4798      	blx	r3
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b0f      	cmp	r3, #15
 800fe02:	d805      	bhi.n	800fe10 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800fe04:	4b47      	ldr	r3, [pc, #284]	; (800ff24 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800fe06:	4a45      	ldr	r2, [pc, #276]	; (800ff1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fe08:	21c3      	movs	r1, #195	; 0xc3
 800fe0a:	4845      	ldr	r0, [pc, #276]	; (800ff20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fe0c:	f014 ffd6 	bl	8024dbc <__assert_func>
 800fe10:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	68da      	ldr	r2, [r3, #12]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	3320      	adds	r3, #32
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4610      	mov	r0, r2
 800fe22:	4798      	blx	r3
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b0b      	cmp	r3, #11
 800fe28:	d805      	bhi.n	800fe36 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800fe2a:	4b3f      	ldr	r3, [pc, #252]	; (800ff28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800fe2c:	4a3b      	ldr	r2, [pc, #236]	; (800ff1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fe2e:	21c4      	movs	r1, #196	; 0xc4
 800fe30:	483b      	ldr	r0, [pc, #236]	; (800ff20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fe32:	f014 ffc3 	bl	8024dbc <__assert_func>
 800fe36:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800fe38:	683a      	ldr	r2, [r7, #0]
 800fe3a:	68b9      	ldr	r1, [r7, #8]
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f7ff fdc0 	bl	800f9c2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	2100      	movs	r1, #0
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f000 f86f 	bl	800ff2c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	4619      	mov	r1, r3
 800fe52:	200c      	movs	r0, #12
 800fe54:	f7ff fbf0 	bl	800f638 <_ZnwjPv>
 800fe58:	4604      	mov	r4, r0
 800fe5a:	2c00      	cmp	r4, #0
 800fe5c:	d004      	beq.n	800fe68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f7ff fe6a 	bl	800fb38 <_ZN8touchgfx12NoTransitionC1Ev>
 800fe64:	4623      	mov	r3, r4
 800fe66:	e000      	b.n	800fe6a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800fe68:	4623      	mov	r3, r4
 800fe6a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	2100      	movs	r1, #0
 800fe72:	4618      	mov	r0, r3
 800fe74:	f000 f86d 	bl	800ff52 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	f242 70bc 	movw	r0, #10172	; 0x27bc
 800fe80:	f7ff fbda 	bl	800f638 <_ZnwjPv>
 800fe84:	4604      	mov	r4, r0
 800fe86:	2c00      	cmp	r4, #0
 800fe88:	d004      	beq.n	800fe94 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f002 ff10 	bl	8012cb0 <_ZN8MainViewC1Ev>
 800fe90:	4623      	mov	r3, r4
 800fe92:	e000      	b.n	800fe96 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800fe94:	4623      	mov	r3, r4
 800fe96:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f000 f86a 	bl	800ff78 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800fea4:	4603      	mov	r3, r0
 800fea6:	4619      	mov	r1, r3
 800fea8:	2010      	movs	r0, #16
 800feaa:	f7ff fbc5 	bl	800f638 <_ZnwjPv>
 800feae:	4604      	mov	r4, r0
 800feb0:	2c00      	cmp	r4, #0
 800feb2:	d005      	beq.n	800fec0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800feb4:	69b9      	ldr	r1, [r7, #24]
 800feb6:	4620      	mov	r0, r4
 800feb8:	f002 fe40 	bl	8012b3c <_ZN13MainPresenterC1ER8MainView>
 800febc:	4623      	mov	r3, r4
 800febe:	e000      	b.n	800fec2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800fec0:	4623      	mov	r3, r4
 800fec2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	69fa      	ldr	r2, [r7, #28]
 800fec8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	3304      	adds	r3, #4
 800fee0:	e000      	b.n	800fee4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800fee2:	2300      	movs	r3, #0
 800fee4:	4619      	mov	r1, r3
 800fee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fee8:	f7ff fdee 	bl	800fac8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	3304      	adds	r3, #4
 800fef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7ff fe61 	bl	800fbba <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	6979      	ldr	r1, [r7, #20]
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 f84e 	bl	800ff9e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800ff02:	69fa      	ldr	r2, [r7, #28]
 800ff04:	6979      	ldr	r1, [r7, #20]
 800ff06:	69b8      	ldr	r0, [r7, #24]
 800ff08:	f7ff fdb7 	bl	800fa7a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800ff0c:	697b      	ldr	r3, [r7, #20]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3724      	adds	r7, #36	; 0x24
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd90      	pop	{r4, r7, pc}
 800ff16:	bf00      	nop
 800ff18:	08025f48 	.word	0x08025f48
 800ff1c:	08026758 	.word	0x08026758
 800ff20:	08025fd8 	.word	0x08025fd8
 800ff24:	0802601c 	.word	0x0802601c
 800ff28:	080260c0 	.word	0x080260c0

0800ff2c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	460b      	mov	r3, r1
 800ff36:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3324      	adds	r3, #36	; 0x24
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	887a      	ldrh	r2, [r7, #2]
 800ff42:	4611      	mov	r1, r2
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	4798      	blx	r3
 800ff48:	4603      	mov	r3, r0
    }
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b082      	sub	sp, #8
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	3324      	adds	r3, #36	; 0x24
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	887a      	ldrh	r2, [r7, #2]
 800ff68:	4611      	mov	r1, r2
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	4798      	blx	r3
 800ff6e:	4603      	mov	r3, r0
    }
 800ff70:	4618      	mov	r0, r3
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	460b      	mov	r3, r1
 800ff82:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	3324      	adds	r3, #36	; 0x24
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	887a      	ldrh	r2, [r7, #2]
 800ff8e:	4611      	mov	r1, r2
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	4798      	blx	r3
 800ff94:	4603      	mov	r3, r0
    }
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800ff9e:	b480      	push	{r7}
 800ffa0:	b083      	sub	sp, #12
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	683a      	ldr	r2, [r7, #0]
 800ffac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ffae:	bf00      	nop
 800ffb0:	370c      	adds	r7, #12
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
	...

0800ffbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	4a05      	ldr	r2, [pc, #20]	; (800ffdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7ff fc0f 	bl	800f7f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	080266ac 	.word	0x080266ac

0800ffe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7ff ffe7 	bl	800ffbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ffee:	2110      	movs	r1, #16
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f014 feb8 	bl	8024d66 <_ZdlPvj>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4618      	mov	r0, r3
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	68d2      	ldr	r2, [r2, #12]
 8010010:	1052      	asrs	r2, r2, #1
 8010012:	1899      	adds	r1, r3, r2
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	f003 0301 	and.w	r3, r3, #1
 801001c:	2b00      	cmp	r3, #0
 801001e:	d102      	bne.n	8010026 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	e00a      	b.n	801003c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	68d2      	ldr	r2, [r2, #12]
 801002e:	1052      	asrs	r2, r2, #1
 8010030:	4413      	add	r3, r2
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	6892      	ldr	r2, [r2, #8]
 8010038:	4413      	add	r3, r2
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4608      	mov	r0, r1
 801003e:	4798      	blx	r3
    }
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d010      	beq.n	801007a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d107      	bne.n	8010070 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	f003 0301 	and.w	r3, r3, #1
 8010068:	2b00      	cmp	r3, #0
 801006a:	d101      	bne.n	8010070 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801006c:	2301      	movs	r3, #1
 801006e:	e000      	b.n	8010072 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010070:	2300      	movs	r3, #0
 8010072:	2b01      	cmp	r3, #1
 8010074:	d001      	beq.n	801007a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010076:	2301      	movs	r3, #1
 8010078:	e000      	b.n	801007c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801007a:	2300      	movs	r3, #0
    }
 801007c:	4618      	mov	r0, r3
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	683a      	ldr	r2, [r7, #0]
 8010096:	601a      	str	r2, [r3, #0]
    }
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	370c      	adds	r7, #12
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr

080100a6 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 80100a6:	b480      	push	{r7}
 80100a8:	b083      	sub	sp, #12
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2200      	movs	r2, #0
 80100b2:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2200      	movs	r2, #0
 80100b8:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	80da      	strh	r2, [r3, #6]
    }
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80100d4:	b480      	push	{r7}
 80100d6:	b085      	sub	sp, #20
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	4608      	mov	r0, r1
 80100de:	4611      	mov	r1, r2
 80100e0:	461a      	mov	r2, r3
 80100e2:	4603      	mov	r3, r0
 80100e4:	817b      	strh	r3, [r7, #10]
 80100e6:	460b      	mov	r3, r1
 80100e8:	813b      	strh	r3, [r7, #8]
 80100ea:	4613      	mov	r3, r2
 80100ec:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	897a      	ldrh	r2, [r7, #10]
 80100f2:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	893a      	ldrh	r2, [r7, #8]
 80100f8:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	88fa      	ldrh	r2, [r7, #6]
 80100fe:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	8b3a      	ldrh	r2, [r7, #24]
 8010104:	80da      	strh	r2, [r3, #6]
    }
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	4618      	mov	r0, r3
 801010a:	3714      	adds	r7, #20
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	887a      	ldrh	r2, [r7, #2]
 8010124:	801a      	strh	r2, [r3, #0]
    {
    }
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af02      	add	r7, sp, #8
 801013a:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 801013c:	4a13      	ldr	r2, [pc, #76]	; (801018c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	601a      	str	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	1d18      	adds	r0, r3, #4
 8010146:	2300      	movs	r3, #0
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	2300      	movs	r3, #0
 801014c:	2200      	movs	r2, #0
 801014e:	2100      	movs	r1, #0
 8010150:	f7ff ffc0 	bl	80100d4 <_ZN8touchgfx4RectC1Essss>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	330c      	adds	r3, #12
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff ffa4 	bl	80100a6 <_ZN8touchgfx4RectC1Ev>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	615a      	str	r2, [r3, #20]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	619a      	str	r2, [r3, #24]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2200      	movs	r2, #0
 801016e:	61da      	str	r2, [r3, #28]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2201      	movs	r2, #1
 801017c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	08028878 	.word	0x08028878

08010190 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	4a04      	ldr	r2, [pc, #16]	; (80101ac <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	601a      	str	r2, [r3, #0]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	08028878 	.word	0x08028878

080101b0 <_ZN8touchgfx8DrawableD0Ev>:
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff ffe9 	bl	8010190 <_ZN8touchgfx8DrawableD1Ev>
 80101be:	2128      	movs	r1, #40	; 0x28
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f014 fdd0 	bl	8024d66 <_ZdlPvj>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	4608      	mov	r0, r1
 80101da:	4611      	mov	r1, r2
 80101dc:	461a      	mov	r2, r3
 80101de:	4603      	mov	r3, r0
 80101e0:	817b      	strh	r3, [r7, #10]
 80101e2:	460b      	mov	r3, r1
 80101e4:	813b      	strh	r3, [r7, #8]
 80101e6:	4613      	mov	r3, r2
 80101e8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	3334      	adds	r3, #52	; 0x34
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80101f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	4798      	blx	r3
        setWidth(width);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3338      	adds	r3, #56	; 0x38
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801020a:	4611      	mov	r1, r2
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	4798      	blx	r3
        setHeight(height);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	333c      	adds	r3, #60	; 0x3c
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801021c:	4611      	mov	r1, r2
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	4798      	blx	r3
    }
 8010222:	bf00      	nop
 8010224:	3710      	adds	r7, #16
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 801022a:	b480      	push	{r7}
 801022c:	b083      	sub	sp, #12
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
 8010232:	460b      	mov	r3, r1
 8010234:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	887a      	ldrh	r2, [r7, #2]
 801023a:	809a      	strh	r2, [r3, #4]
    }
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	460b      	mov	r3, r1
 8010252:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	887a      	ldrh	r2, [r7, #2]
 8010258:	80da      	strh	r2, [r3, #6]
    }
 801025a:	bf00      	nop
 801025c:	370c      	adds	r7, #12
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr

08010266 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010266:	b580      	push	{r7, lr}
 8010268:	b082      	sub	sp, #8
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	460b      	mov	r3, r1
 8010270:	807b      	strh	r3, [r7, #2]
 8010272:	4613      	mov	r3, r2
 8010274:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	332c      	adds	r3, #44	; 0x2c
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010282:	4611      	mov	r1, r2
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	4798      	blx	r3
        setY(y);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	3330      	adds	r3, #48	; 0x30
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010294:	4611      	mov	r1, r2
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	4798      	blx	r3
    }
 801029a:	bf00      	nop
 801029c:	3708      	adds	r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80102a2:	b480      	push	{r7}
 80102a4:	b083      	sub	sp, #12
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	460b      	mov	r3, r1
 80102ac:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	887a      	ldrh	r2, [r7, #2]
 80102b2:	811a      	strh	r2, [r3, #8]
    }
 80102b4:	bf00      	nop
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	460b      	mov	r3, r1
 80102ca:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	887a      	ldrh	r2, [r7, #2]
 80102d0:	815a      	strh	r2, [r3, #10]
    }
 80102d2:	bf00      	nop
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80102de:	b480      	push	{r7}
 80102e0:	b083      	sub	sp, #12
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	bf00      	nop
 80102e8:	370c      	adds	r7, #12
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 80102f2:	b480      	push	{r7}
 80102f4:	b083      	sub	sp, #12
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
 80102fa:	6039      	str	r1, [r7, #0]
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
 8010312:	bf00      	nop
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801031e:	b480      	push	{r7}
 8010320:	b083      	sub	sp, #12
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
 8010326:	6039      	str	r1, [r7, #0]
 8010328:	bf00      	nop
 801032a:	370c      	adds	r7, #12
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	bf00      	nop
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	460b      	mov	r3, r1
 8010352:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	78fa      	ldrb	r2, [r7, #3]
 8010358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801035c:	bf00      	nop
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010376:	4618      	mov	r0, r3
 8010378:	370c      	adds	r7, #12
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr

08010382 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010382:	b480      	push	{r7}
 8010384:	b083      	sub	sp, #12
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010390:	4618      	mov	r0, r3
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	460b      	mov	r3, r1
 80103a6:	807b      	strh	r3, [r7, #2]
 80103a8:	4613      	mov	r3, r2
 80103aa:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	3354      	adds	r3, #84	; 0x54
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	8879      	ldrh	r1, [r7, #2]
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80103bc:	b292      	uxth	r2, r2
 80103be:	1a8a      	subs	r2, r1, r2
 80103c0:	b292      	uxth	r2, r2
 80103c2:	b210      	sxth	r0, r2
 80103c4:	8839      	ldrh	r1, [r7, #0]
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80103cc:	b292      	uxth	r2, r2
 80103ce:	1a8a      	subs	r2, r1, r2
 80103d0:	b292      	uxth	r2, r2
 80103d2:	b212      	sxth	r2, r2
 80103d4:	4601      	mov	r1, r0
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	4798      	blx	r3
    }
 80103da:	bf00      	nop
 80103dc:	3708      	adds	r7, #8
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}

080103e2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80103e2:	b480      	push	{r7}
 80103e4:	b083      	sub	sp, #12
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103f0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103f8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010400:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010402:	bf00      	nop
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr

0801040e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801040e:	b580      	push	{r7, lr}
 8010410:	b084      	sub	sp, #16
 8010412:	af00      	add	r7, sp, #0
 8010414:	60f8      	str	r0, [r7, #12]
 8010416:	60b9      	str	r1, [r7, #8]
 8010418:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f7ff ffe1 	bl	80103e2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	601a      	str	r2, [r3, #0]
    }
 801042e:	bf00      	nop
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
	...

08010438 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	4a05      	ldr	r2, [pc, #20]	; (8010458 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	601a      	str	r2, [r3, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4618      	mov	r0, r3
 801044a:	f7ff fea1 	bl	8010190 <_ZN8touchgfx8DrawableD1Ev>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4618      	mov	r0, r3
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	08027644 	.word	0x08027644

0801045c <_ZN8touchgfx9ContainerD0Ev>:
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7ff ffe7 	bl	8010438 <_ZN8touchgfx9ContainerD1Ev>
 801046a:	212c      	movs	r1, #44	; 0x2c
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f014 fc7a 	bl	8024d66 <_ZdlPvj>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4618      	mov	r0, r3
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	4a06      	ldr	r2, [pc, #24]	; (80104a0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	3304      	adds	r3, #4
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff ffd2 	bl	8010438 <_ZN8touchgfx9ContainerD1Ev>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	08028970 	.word	0x08028970

080104a4 <_ZN8touchgfx6ScreenD0Ev>:
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f7ff ffe5 	bl	801047c <_ZN8touchgfx6ScreenD1Ev>
 80104b2:	213c      	movs	r1, #60	; 0x3c
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f014 fc56 	bl	8024d66 <_ZdlPvj>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4618      	mov	r0, r3
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80104c4:	b480      	push	{r7}
 80104c6:	b083      	sub	sp, #12
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	bf00      	nop
 80104ce:	370c      	adds	r7, #12
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr

080104d8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	bf00      	nop
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	bf00      	nop
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
    {
    }
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010514:	b480      	push	{r7}
 8010516:	b083      	sub	sp, #12
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	460b      	mov	r3, r1
 801051e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010520:	bf00      	nop
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	3304      	adds	r3, #4
 801053a:	6839      	ldr	r1, [r7, #0]
 801053c:	4618      	mov	r0, r3
 801053e:	f005 faad 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff fdec 	bl	8010134 <_ZN8touchgfx8DrawableC1Ev>
 801055c:	4a03      	ldr	r2, [pc, #12]	; (801056c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	601a      	str	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	08026944 	.word	0x08026944

08010570 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	4a05      	ldr	r2, [pc, #20]	; (8010590 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	601a      	str	r2, [r3, #0]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff fe05 	bl	8010190 <_ZN8touchgfx8DrawableD1Ev>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4618      	mov	r0, r3
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	08026944 	.word	0x08026944

08010594 <_ZN8touchgfx6WidgetD0Ev>:
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7ff ffe7 	bl	8010570 <_ZN8touchgfx6WidgetD1Ev>
 80105a2:	2128      	movs	r1, #40	; 0x28
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f014 fbde 	bl	8024d66 <_ZdlPvj>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4618      	mov	r0, r3
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	607b      	str	r3, [r7, #4]
 80105be:	460b      	mov	r3, r1
 80105c0:	817b      	strh	r3, [r7, #10]
 80105c2:	4613      	mov	r3, r2
 80105c4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff fecd 	bl	8010368 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d008      	beq.n	80105e6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7ff fed3 	bl	8010382 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d001      	beq.n	80105e6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80105e2:	2301      	movs	r3, #1
 80105e4:	e000      	b.n	80105e8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80105e6:	2300      	movs	r3, #0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d002      	beq.n	80105f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	601a      	str	r2, [r3, #0]
        }
    }
 80105f2:	bf00      	nop
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
	...

080105fc <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff ffa0 	bl	801054c <_ZN8touchgfx6WidgetC1Ev>
 801060c:	4a0a      	ldr	r2, [pc, #40]	; (8010638 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	601a      	str	r2, [r3, #0]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	22ff      	movs	r2, #255	; 0xff
 8010616:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	3328      	adds	r3, #40	; 0x28
 801061e:	2100      	movs	r1, #0
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff fd31 	bl	8010088 <_ZN8touchgfx9colortypeC1Em>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	0802837c 	.word	0x0802837c

0801063c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	4a05      	ldr	r2, [pc, #20]	; (801065c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	601a      	str	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	f7ff ff8f 	bl	8010570 <_ZN8touchgfx6WidgetD1Ev>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	0802837c 	.word	0x0802837c

08010660 <_ZN8touchgfx3BoxD0Ev>:
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff ffe7 	bl	801063c <_ZN8touchgfx3BoxD1Ev>
 801066e:	2130      	movs	r1, #48	; 0x30
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f014 fb78 	bl	8024d66 <_ZdlPvj>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	683a      	ldr	r2, [r7, #0]
 801068e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	460b      	mov	r3, r1
 80106a6:	807b      	strh	r3, [r7, #2]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	887a      	ldrh	r2, [r7, #2]
 80106ac:	801a      	strh	r2, [r3, #0]
    }
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4618      	mov	r0, r3
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
        assertValid();
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7fe fd13 	bl	800f0f0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 80106ca:	4b06      	ldr	r3, [pc, #24]	; (80106e4 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	881b      	ldrh	r3, [r3, #0]
 80106d2:	4619      	mov	r1, r3
 80106d4:	4610      	mov	r0, r2
 80106d6:	f002 f8b9 	bl	801284c <_ZNK8touchgfx5Texts7getTextEt>
 80106da:	4603      	mov	r3, r0
    }
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	2000be08 	.word	0x2000be08

080106e8 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff ff2a 	bl	801054c <_ZN8touchgfx6WidgetC1Ev>
 80106f8:	4a13      	ldr	r2, [pc, #76]	; (8010748 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	601a      	str	r2, [r3, #0]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	3326      	adds	r3, #38	; 0x26
 8010702:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010706:	4618      	mov	r0, r3
 8010708:	f7ff ffc8 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	3328      	adds	r3, #40	; 0x28
 8010710:	2100      	movs	r1, #0
 8010712:	4618      	mov	r0, r3
 8010714:	f7ff fcb8 	bl	8010088 <_ZN8touchgfx9colortypeC1Em>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	22ff      	movs	r2, #255	; 0xff
 8010722:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	3708      	adds	r7, #8
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	08028300 	.word	0x08028300

0801074c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af02      	add	r7, sp, #8
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010756:	2300      	movs	r3, #0
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	2300      	movs	r3, #0
 801075c:	2200      	movs	r2, #0
 801075e:	2100      	movs	r1, #0
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7ff fcb7 	bl	80100d4 <_ZN8touchgfx4RectC1Essss>
    }
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 801076e:	b480      	push	{r7}
 8010770:	b083      	sub	sp, #12
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801077e:	bf00      	nop
 8010780:	370c      	adds	r7, #12
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 801078a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801078c:	b085      	sub	sp, #20
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	460b      	mov	r3, r1
 8010794:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010796:	687e      	ldr	r6, [r7, #4]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3330      	adds	r3, #48	; 0x30
 801079e:	681c      	ldr	r4, [r3, #0]
 80107a0:	887d      	ldrh	r5, [r7, #2]
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 f845 	bl	8010832 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80107a8:	4603      	mov	r3, r0
 80107aa:	81bb      	strh	r3, [r7, #12]
 80107ac:	f107 030c 	add.w	r3, r7, #12
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fe fc69 	bl	800f088 <_ZNK8touchgfx9TypedText7getFontEv>
 80107b6:	4602      	mov	r2, r0
 80107b8:	6813      	ldr	r3, [r2, #0]
 80107ba:	332c      	adds	r3, #44	; 0x2c
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4610      	mov	r0, r2
 80107c0:	4798      	blx	r3
 80107c2:	4603      	mov	r3, r0
 80107c4:	1aeb      	subs	r3, r5, r3
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	b21b      	sxth	r3, r3
 80107ca:	4619      	mov	r1, r3
 80107cc:	4630      	mov	r0, r6
 80107ce:	47a0      	blx	r4
    }
 80107d0:	bf00      	nop
 80107d2:	3714      	adds	r7, #20
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107d8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	460b      	mov	r3, r1
 80107e2:	807b      	strh	r3, [r7, #2]
 80107e4:	4613      	mov	r3, r2
 80107e6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	332c      	adds	r3, #44	; 0x2c
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80107f6:	4610      	mov	r0, r2
 80107f8:	4798      	blx	r3
        setBaselineY(baselineY);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	3360      	adds	r3, #96	; 0x60
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010806:	4611      	mov	r1, r2
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	4798      	blx	r3
    }
 801080c:	bf00      	nop
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	460b      	mov	r3, r1
 801081e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	887a      	ldrh	r2, [r7, #2]
 8010824:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010826:	bf00      	nop
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr

08010832 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010832:	b480      	push	{r7}
 8010834:	b083      	sub	sp, #12
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 801083e:	4618      	mov	r0, r3
 8010840:	370c      	adds	r7, #12
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr
	...

0801084c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	4a05      	ldr	r2, [pc, #20]	; (801086c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4618      	mov	r0, r3
 801085e:	f7ff fe87 	bl	8010570 <_ZN8touchgfx6WidgetD1Ev>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4618      	mov	r0, r3
 8010866:	3708      	adds	r7, #8
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	08028300 	.word	0x08028300

08010870 <_ZN8touchgfx8TextAreaD0Ev>:
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7ff ffe7 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 801087e:	2134      	movs	r1, #52	; 0x34
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f014 fa70 	bl	8024d66 <_ZdlPvj>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	4618      	mov	r0, r3
 801089c:	f7ff ff24 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 80108a0:	4a03      	ldr	r2, [pc, #12]	; (80108b0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	601a      	str	r2, [r3, #0]
    {
    }
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	4618      	mov	r0, r3
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	080268c8 	.word	0x080268c8

080108b4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	4a05      	ldr	r2, [pc, #20]	; (80108d4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	601a      	str	r2, [r3, #0]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7ff ffc1 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	080268c8 	.word	0x080268c8

080108d8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7ff ffe7 	bl	80108b4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80108e6:	2134      	movs	r1, #52	; 0x34
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f014 fa3c 	bl	8024d66 <_ZdlPvj>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4618      	mov	r0, r3
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff ffc4 	bl	8010890 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010908:	4a05      	ldr	r2, [pc, #20]	; (8010920 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2200      	movs	r2, #0
 8010912:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	3708      	adds	r7, #8
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	08028468 	.word	0x08028468

08010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010934:	bf00      	nop
 8010936:	370c      	adds	r7, #12
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff fdfd 	bl	801054c <_ZN8touchgfx6WidgetC1Ev>
 8010952:	4a0b      	ldr	r2, [pc, #44]	; (8010980 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	601a      	str	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	3326      	adds	r3, #38	; 0x26
 801095c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010960:	4618      	mov	r0, r3
 8010962:	f7ff fbd7 	bl	8010114 <_ZN8touchgfx6BitmapC1Et>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	22ff      	movs	r2, #255	; 0xff
 801096a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 801096e:	6839      	ldr	r1, [r7, #0]
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f007 f981 	bl	8017c78 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	4618      	mov	r0, r3
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	080284e4 	.word	0x080284e4

08010984 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80109a2:	b480      	push	{r7}
 80109a4:	b083      	sub	sp, #12
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
        {
            return v;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
        }
 80109ae:	4618      	mov	r0, r3
 80109b0:	370c      	adds	r7, #12
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr

080109ba <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80109ba:	b590      	push	{r4, r7, lr}
 80109bc:	b083      	sub	sp, #12
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
 80109c2:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	3340      	adds	r3, #64	; 0x40
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7ff ffea 	bl	80109a2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80109ce:	4604      	mov	r4, r0
 80109d0:	463b      	mov	r3, r7
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7ff ffe5 	bl	80109a2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80109d8:	4603      	mov	r3, r0
 80109da:	429c      	cmp	r4, r3
 80109dc:	bf0c      	ite	eq
 80109de:	2301      	moveq	r3, #1
 80109e0:	2300      	movne	r3, #0
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d106      	bne.n	80109f6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f006 fbbc 	bl	801716c <_ZN8touchgfx4Line17updateCachedShapeEv>
 80109f4:	e000      	b.n	80109f8 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 80109f6:	bf00      	nop
    }
 80109f8:	370c      	adds	r7, #12
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd90      	pop	{r4, r7, pc}
	...

08010a00 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	4a05      	ldr	r2, [pc, #20]	; (8010a20 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	601a      	str	r2, [r3, #0]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	f006 f9bf 	bl	8016d94 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	08027e54 	.word	0x08027e54

08010a24 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7ff ffe7 	bl	8010a00 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010a32:	2114      	movs	r1, #20
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f014 f996 	bl	8024d66 <_ZdlPvj>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	4a05      	ldr	r2, [pc, #20]	; (8010a64 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff fd8b 	bl	8010570 <_ZN8touchgfx6WidgetD1Ev>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	080284e4 	.word	0x080284e4

08010a68 <_ZN8touchgfx5ImageD0Ev>:
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff ffe7 	bl	8010a44 <_ZN8touchgfx5ImageD1Ev>
 8010a76:	212c      	movs	r1, #44	; 0x2c
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f014 f974 	bl	8024d66 <_ZdlPvj>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	4a05      	ldr	r2, [pc, #20]	; (8010aa8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	601a      	str	r2, [r3, #0]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7ff fcef 	bl	801047c <_ZN8touchgfx6ScreenD1Ev>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	08026894 	.word	0x08026894

08010aac <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7ff ffe7 	bl	8010a88 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010aba:	2140      	movs	r1, #64	; 0x40
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f014 f952 	bl	8024d66 <_ZdlPvj>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	4a84      	ldr	r2, [pc, #528]	; (8010ce8 <_ZN12MainViewBaseD1Ev+0x21c>)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	601a      	str	r2, [r3, #0]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f001 fdc9 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff fead 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8010af8:	4618      	mov	r0, r3
 8010afa:	f001 fdbd 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff fea1 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8010b10:	4618      	mov	r0, r3
 8010b12:	f001 fdb1 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f001 fdab 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f001 fda5 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7ff fe89 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8010b40:	4618      	mov	r0, r3
 8010b42:	f001 fd99 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f004 fca9 	bl	80154a4 <_ZN8touchgfx13ImageProgressD1Ev>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f001 fd8d 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8010b64:	4618      	mov	r0, r3
 8010b66:	f001 fdcb 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010b70:	4618      	mov	r0, r3
 8010b72:	f001 fda3 	bl	80126bc <_ZN8touchgfx4LineD1Ev>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f001 fdbf 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f001 fd97 	bl	80126bc <_ZN8touchgfx4LineD1Ev>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8010b94:	4618      	mov	r0, r3
 8010b96:	f004 fb85 	bl	80152a4 <_ZN8touchgfx11BoxProgressD1Ev>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7ff fe53 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8010bac:	4618      	mov	r0, r3
 8010bae:	f001 fd63 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f001 fd5d 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7ff fe41 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7ff fe3b 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f001 fd4b 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8010be8:	4618      	mov	r0, r3
 8010bea:	f001 fd45 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7ff fe29 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff fe23 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f001 fd77 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f001 fd4f 	bl	80126bc <_ZN8touchgfx4LineD1Ev>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010c24:	4618      	mov	r0, r3
 8010c26:	f001 fd27 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010c30:	4618      	mov	r0, r3
 8010c32:	f001 fd21 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f001 fd1b 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f001 fd15 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010c54:	4618      	mov	r0, r3
 8010c56:	f001 fd0f 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010c60:	4618      	mov	r0, r3
 8010c62:	f001 fd09 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f001 fd03 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f001 fcfd 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7ff fedd 	bl	8010a44 <_ZN8touchgfx5ImageD1Ev>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010c90:	4618      	mov	r0, r3
 8010c92:	f001 fcf1 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f001 fceb 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff fdcf 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	33d8      	adds	r3, #216	; 0xd8
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7ff fdca 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	33a4      	adds	r3, #164	; 0xa4
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7ff fdc5 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	3370      	adds	r3, #112	; 0x70
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7ff fdc0 	bl	801084c <_ZN8touchgfx8TextAreaD1Ev>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	3340      	adds	r3, #64	; 0x40
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7ff fcb3 	bl	801063c <_ZN8touchgfx3BoxD1Ev>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7ff fed5 	bl	8010a88 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	08026860 	.word	0x08026860

08010cec <_ZN12MainViewBaseD0Ev>:
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7ff fee9 	bl	8010acc <_ZN12MainViewBaseD1Ev>
 8010cfa:	f242 71bc 	movw	r1, #10172	; 0x27bc
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f014 f831 	bl	8024d66 <_ZdlPvj>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
	...

08010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010d10:	b590      	push	{r4, r7, lr}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	4603      	mov	r3, r0
 8010d18:	71fb      	strb	r3, [r7, #7]
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	71bb      	strb	r3, [r7, #6]
 8010d1e:	4613      	mov	r3, r2
 8010d20:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010d22:	f7fe fd85 	bl	800f830 <_ZN8touchgfx3HAL11getInstanceEv>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d105      	bne.n	8010d38 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010d2c:	4b0a      	ldr	r3, [pc, #40]	; (8010d58 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010d2e:	4a0b      	ldr	r2, [pc, #44]	; (8010d5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010d30:	2138      	movs	r1, #56	; 0x38
 8010d32:	480b      	ldr	r0, [pc, #44]	; (8010d60 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010d34:	f014 f842 	bl	8024dbc <__assert_func>
 8010d38:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010d3a:	f7fe fd85 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8010d3e:	6803      	ldr	r3, [r0, #0]
 8010d40:	332c      	adds	r3, #44	; 0x2c
 8010d42:	681c      	ldr	r4, [r3, #0]
 8010d44:	797b      	ldrb	r3, [r7, #5]
 8010d46:	79ba      	ldrb	r2, [r7, #6]
 8010d48:	79f9      	ldrb	r1, [r7, #7]
 8010d4a:	47a0      	blx	r4
 8010d4c:	4603      	mov	r3, r0
    }
 8010d4e:	4618      	mov	r0, r3
 8010d50:	370c      	adds	r7, #12
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd90      	pop	{r4, r7, pc}
 8010d56:	bf00      	nop
 8010d58:	08026240 	.word	0x08026240
 8010d5c:	080269a4 	.word	0x080269a4
 8010d60:	08026284 	.word	0x08026284

08010d64 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010d64:	b590      	push	{r4, r7, lr}
 8010d66:	b0c1      	sub	sp, #260	; 0x104
 8010d68:	af02      	add	r7, sp, #8
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f001 fc08 	bl	8012584 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010d74:	4adc      	ldr	r2, [pc, #880]	; (80110e8 <_ZN12MainViewBaseC1Ev+0x384>)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	601a      	str	r2, [r3, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	3340      	adds	r3, #64	; 0x40
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ff fc3c 	bl	80105fc <_ZN8touchgfx3BoxC1Ev>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	3370      	adds	r3, #112	; 0x70
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7ff fcad 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	33a4      	adds	r3, #164	; 0xa4
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7ff fca8 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	33d8      	adds	r3, #216	; 0xd8
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff fca3 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff fc9d 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fd9f 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ff fd99 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8010dcc:	f107 030c 	add.w	r3, r7, #12
 8010dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7ff f99d 	bl	8010114 <_ZN8touchgfx6BitmapC1Et>
 8010dda:	f107 030c 	add.w	r3, r7, #12
 8010dde:	4619      	mov	r1, r3
 8010de0:	4620      	mov	r0, r4
 8010de2:	f7ff fdad 	bl	8010940 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7ff fd83 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7ff fd7d 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff fd77 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7ff fd71 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7ff fd6b 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7ff fd65 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7ff fd5f 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7ff fd59 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f006 f96d 	bl	801712c <_ZN8touchgfx4LineC1Ev>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8010e58:	f107 0310 	add.w	r3, r7, #16
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7ff f912 	bl	8010088 <_ZN8touchgfx9colortypeC1Em>
 8010e64:	22ff      	movs	r2, #255	; 0xff
 8010e66:	6939      	ldr	r1, [r7, #16]
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f005 ff51 	bl	8016d10 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff fc37 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff fc31 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7ff fd33 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ff fd2d 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ff fc1f 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7ff fc19 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff fd1b 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7ff fd15 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff fc07 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f004 f9f3 	bl	80152cc <_ZN8touchgfx11BoxProgressC1Ev>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8010eec:	4618      	mov	r0, r3
 8010eee:	f006 f91d 	bl	801712c <_ZN8touchgfx4LineC1Ev>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8010ef8:	f107 0314 	add.w	r3, r7, #20
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff f8c2 	bl	8010088 <_ZN8touchgfx9colortypeC1Em>
 8010f04:	22ff      	movs	r2, #255	; 0xff
 8010f06:	6979      	ldr	r1, [r7, #20]
 8010f08:	4620      	mov	r0, r4
 8010f0a:	f005 ff01 	bl	8016d10 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010f14:	4618      	mov	r0, r3
 8010f16:	f006 f909 	bl	801712c <_ZN8touchgfx4LineC1Ev>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8010f20:	f107 0318 	add.w	r3, r7, #24
 8010f24:	2100      	movs	r1, #0
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff f8ae 	bl	8010088 <_ZN8touchgfx9colortypeC1Em>
 8010f2c:	22ff      	movs	r2, #255	; 0xff
 8010f2e:	69b9      	ldr	r1, [r7, #24]
 8010f30:	4620      	mov	r0, r4
 8010f32:	f005 feed 	bl	8016d10 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7ff fcdb 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f004 fad5 	bl	80154f8 <_ZN8touchgfx13ImageProgressC1Ev>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff fccf 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7ff fbc1 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ff fcc3 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7ff fcbd 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7ff fcb7 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7ff fba9 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7ff fcab 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7ff fb9d 	bl	80106e8 <_ZN8touchgfx8TextAreaC1Ev>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7ff fc9f 	bl	80108f8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f603 339a 	addw	r3, r3, #2970	; 0xb9a
 8010fc0:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f006 fec5 	bl	8017d54 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010fd0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010fda:	2200      	movs	r2, #0
 8010fdc:	2100      	movs	r1, #0
 8010fde:	f7ff f8f7 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010fe8:	2200      	movs	r2, #0
 8010fea:	2100      	movs	r1, #0
 8010fec:	2000      	movs	r0, #0
 8010fee:	f7ff fe8f 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f7ff fb42 	bl	8010680 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(231, 219);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	3370      	adds	r3, #112	; 0x70
 8011000:	22db      	movs	r2, #219	; 0xdb
 8011002:	21e7      	movs	r1, #231	; 0xe7
 8011004:	4618      	mov	r0, r3
 8011006:	f7ff f92e 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011010:	2200      	movs	r2, #0
 8011012:	21dc      	movs	r1, #220	; 0xdc
 8011014:	20ff      	movs	r0, #255	; 0xff
 8011016:	f7ff fe7b 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801101a:	4603      	mov	r3, r0
 801101c:	4619      	mov	r1, r3
 801101e:	4620      	mov	r0, r4
 8011020:	f7ff fba5 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3370      	adds	r3, #112	; 0x70
 8011028:	2100      	movs	r1, #0
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff fbf2 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011036:	f107 031c 	add.w	r3, r7, #28
 801103a:	211a      	movs	r1, #26
 801103c:	4618      	mov	r0, r3
 801103e:	f7ff fb2d 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011042:	8bb9      	ldrh	r1, [r7, #28]
 8011044:	4620      	mov	r0, r4
 8011046:	f006 fb77 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 126);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	33a4      	adds	r3, #164	; 0xa4
 801104e:	227e      	movs	r2, #126	; 0x7e
 8011050:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8011054:	4618      	mov	r0, r3
 8011056:	f7ff f906 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011060:	2200      	movs	r2, #0
 8011062:	21dc      	movs	r1, #220	; 0xdc
 8011064:	20ff      	movs	r0, #255	; 0xff
 8011066:	f7ff fe53 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801106a:	4603      	mov	r3, r0
 801106c:	4619      	mov	r1, r3
 801106e:	4620      	mov	r0, r4
 8011070:	f7ff fb7d 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	33a4      	adds	r3, #164	; 0xa4
 8011078:	2100      	movs	r1, #0
 801107a:	4618      	mov	r0, r3
 801107c:	f7ff fbca 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011086:	f107 0320 	add.w	r3, r7, #32
 801108a:	2119      	movs	r1, #25
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff fb05 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011092:	8c39      	ldrh	r1, [r7, #32]
 8011094:	4620      	mov	r0, r4
 8011096:	f006 fb4f 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(223, 144);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	33d8      	adds	r3, #216	; 0xd8
 801109e:	2290      	movs	r2, #144	; 0x90
 80110a0:	21df      	movs	r1, #223	; 0xdf
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7ff f8df 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80110ae:	2200      	movs	r2, #0
 80110b0:	21dc      	movs	r1, #220	; 0xdc
 80110b2:	20ff      	movs	r0, #255	; 0xff
 80110b4:	f7ff fe2c 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110b8:	4603      	mov	r3, r0
 80110ba:	4619      	mov	r1, r3
 80110bc:	4620      	mov	r0, r4
 80110be:	f7ff fb56 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	33d8      	adds	r3, #216	; 0xd8
 80110c6:	2100      	movs	r1, #0
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7ff fba3 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80110d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110d8:	2113      	movs	r1, #19
 80110da:	4618      	mov	r0, r3
 80110dc:	f7ff fade 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80110e0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80110e2:	4620      	mov	r0, r4
 80110e4:	e002      	b.n	80110ec <_ZN12MainViewBaseC1Ev+0x388>
 80110e6:	bf00      	nop
 80110e8:	08026860 	.word	0x08026860
 80110ec:	f006 fb24 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 126);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80110f6:	227e      	movs	r2, #126	; 0x7e
 80110f8:	2177      	movs	r1, #119	; 0x77
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7ff f8b3 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011106:	2200      	movs	r2, #0
 8011108:	21dc      	movs	r1, #220	; 0xdc
 801110a:	20ff      	movs	r0, #255	; 0xff
 801110c:	f7ff fe00 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011110:	4603      	mov	r3, r0
 8011112:	4619      	mov	r1, r3
 8011114:	4620      	mov	r0, r4
 8011116:	f7ff fb2a 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011120:	2100      	movs	r1, #0
 8011122:	4618      	mov	r0, r3
 8011124:	f7ff fb76 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801112e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011132:	2112      	movs	r1, #18
 8011134:	4618      	mov	r0, r3
 8011136:	f7ff fab1 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801113a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 801113c:	4620      	mov	r0, r4
 801113e:	f006 fafb 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(182, 78, 114, 62);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8011148:	233e      	movs	r3, #62	; 0x3e
 801114a:	9300      	str	r3, [sp, #0]
 801114c:	2372      	movs	r3, #114	; 0x72
 801114e:	224e      	movs	r2, #78	; 0x4e
 8011150:	21b6      	movs	r1, #182	; 0xb6
 8011152:	f7ff f83d 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801115c:	22ff      	movs	r2, #255	; 0xff
 801115e:	21ff      	movs	r1, #255	; 0xff
 8011160:	20ff      	movs	r0, #255	; 0xff
 8011162:	f7ff fdd5 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011166:	4603      	mov	r3, r0
 8011168:	4619      	mov	r1, r3
 801116a:	4620      	mov	r0, r4
 801116c:	f7ff faff 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011176:	2100      	movs	r1, #0
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff fb4b 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8011184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011188:	2103      	movs	r1, #3
 801118a:	4618      	mov	r0, r3
 801118c:	f7ff fa86 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fa91 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 801119a:	4603      	mov	r3, r0
 801119c:	4ae1      	ldr	r2, [pc, #900]	; (8011524 <_ZN12MainViewBaseC1Ev+0x7c0>)
 801119e:	2105      	movs	r1, #5
 80111a0:	4620      	mov	r0, r4
 80111a2:	f009 fe73 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80111b2:	4619      	mov	r1, r3
 80111b4:	4610      	mov	r0, r2
 80111b6:	f7ff fbb5 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80111c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80111c4:	2102      	movs	r1, #2
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7ff fa68 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80111cc:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80111ce:	4620      	mov	r0, r4
 80111d0:	f006 fab2 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(104, 91, 60, 35);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 80111da:	2323      	movs	r3, #35	; 0x23
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	233c      	movs	r3, #60	; 0x3c
 80111e0:	225b      	movs	r2, #91	; 0x5b
 80111e2:	2168      	movs	r1, #104	; 0x68
 80111e4:	f7fe fff4 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80111ee:	22ff      	movs	r2, #255	; 0xff
 80111f0:	21ff      	movs	r1, #255	; 0xff
 80111f2:	20ff      	movs	r0, #255	; 0xff
 80111f4:	f7ff fd8c 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111f8:	4603      	mov	r3, r0
 80111fa:	4619      	mov	r1, r3
 80111fc:	4620      	mov	r0, r4
 80111fe:	f7ff fab6 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011208:	2100      	movs	r1, #0
 801120a:	4618      	mov	r0, r3
 801120c:	f7ff fb02 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f603 3402 	addw	r4, r3, #2818	; 0xb02
 8011216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801121a:	2101      	movs	r1, #1
 801121c:	4618      	mov	r0, r3
 801121e:	f7ff fa3d 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011222:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011226:	4618      	mov	r0, r3
 8011228:	f7ff fa48 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 801122c:	4603      	mov	r3, r0
 801122e:	4abd      	ldr	r2, [pc, #756]	; (8011524 <_ZN12MainViewBaseC1Ev+0x7c0>)
 8011230:	2105      	movs	r1, #5
 8011232:	4620      	mov	r0, r4
 8011234:	f009 fe2a 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f603 3302 	addw	r3, r3, #2818	; 0xb02
 8011244:	4619      	mov	r1, r3
 8011246:	4610      	mov	r0, r2
 8011248:	f7ff fb6c 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8011252:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011256:	2100      	movs	r1, #0
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff fa1f 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801125e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8011260:	4620      	mov	r0, r4
 8011262:	f006 fa69 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801126c:	223f      	movs	r2, #63	; 0x3f
 801126e:	21b3      	movs	r1, #179	; 0xb3
 8011270:	4618      	mov	r0, r3
 8011272:	f7fe fff8 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801127c:	2100      	movs	r1, #0
 801127e:	4618      	mov	r0, r3
 8011280:	f7ff f862 	bl	8010348 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 801128a:	230e      	movs	r3, #14
 801128c:	9300      	str	r3, [sp, #0]
 801128e:	2312      	movs	r3, #18
 8011290:	223f      	movs	r2, #63	; 0x3f
 8011292:	2136      	movs	r1, #54	; 0x36
 8011294:	f7fe ff9c 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 801129e:	22ff      	movs	r2, #255	; 0xff
 80112a0:	21ff      	movs	r1, #255	; 0xff
 80112a2:	20ff      	movs	r0, #255	; 0xff
 80112a4:	f7ff fd34 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112a8:	4603      	mov	r3, r0
 80112aa:	4619      	mov	r1, r3
 80112ac:	4620      	mov	r0, r4
 80112ae:	f7ff fa5e 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80112b8:	2100      	movs	r1, #0
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7ff faaa 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f603 340c 	addw	r4, r3, #2828	; 0xb0c
 80112c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80112ca:	2126      	movs	r1, #38	; 0x26
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff f9e5 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80112d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7ff f9f0 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80112dc:	4603      	mov	r3, r0
 80112de:	4a91      	ldr	r2, [pc, #580]	; (8011524 <_ZN12MainViewBaseC1Ev+0x7c0>)
 80112e0:	2102      	movs	r1, #2
 80112e2:	4620      	mov	r0, r4
 80112e4:	f009 fdd2 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f603 330c 	addw	r3, r3, #2828	; 0xb0c
 80112f4:	4619      	mov	r1, r3
 80112f6:	4610      	mov	r0, r2
 80112f8:	f7ff fb14 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8011302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011306:	2104      	movs	r1, #4
 8011308:	4618      	mov	r0, r3
 801130a:	f7ff f9c7 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801130e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011312:	4620      	mov	r0, r4
 8011314:	f006 fa10 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f503 7005 	add.w	r0, r3, #532	; 0x214
 801131e:	230e      	movs	r3, #14
 8011320:	9300      	str	r3, [sp, #0]
 8011322:	2312      	movs	r3, #18
 8011324:	223f      	movs	r2, #63	; 0x3f
 8011326:	2173      	movs	r1, #115	; 0x73
 8011328:	f7fe ff52 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8011332:	22ff      	movs	r2, #255	; 0xff
 8011334:	21ff      	movs	r1, #255	; 0xff
 8011336:	20ff      	movs	r0, #255	; 0xff
 8011338:	f7ff fcea 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801133c:	4603      	mov	r3, r0
 801133e:	4619      	mov	r1, r3
 8011340:	4620      	mov	r0, r4
 8011342:	f7ff fa14 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801134c:	2100      	movs	r1, #0
 801134e:	4618      	mov	r0, r3
 8011350:	f7ff fa60 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f503 6431 	add.w	r4, r3, #2832	; 0xb10
 801135a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801135e:	2127      	movs	r1, #39	; 0x27
 8011360:	4618      	mov	r0, r3
 8011362:	f7ff f99b 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011366:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801136a:	4618      	mov	r0, r3
 801136c:	f7ff f9a6 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011370:	4603      	mov	r3, r0
 8011372:	4a6c      	ldr	r2, [pc, #432]	; (8011524 <_ZN12MainViewBaseC1Ev+0x7c0>)
 8011374:	2102      	movs	r1, #2
 8011376:	4620      	mov	r0, r4
 8011378:	f009 fd88 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8011388:	4619      	mov	r1, r3
 801138a:	4610      	mov	r0, r2
 801138c:	f7ff faca 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8011396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801139a:	2105      	movs	r1, #5
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff f97d 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80113a2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80113a6:	4620      	mov	r0, r4
 80113a8:	f006 f9c6 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 80113b2:	230e      	movs	r3, #14
 80113b4:	9300      	str	r3, [sp, #0]
 80113b6:	2312      	movs	r3, #18
 80113b8:	223e      	movs	r2, #62	; 0x3e
 80113ba:	21ad      	movs	r1, #173	; 0xad
 80113bc:	f7fe ff08 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 80113c6:	22ff      	movs	r2, #255	; 0xff
 80113c8:	21ff      	movs	r1, #255	; 0xff
 80113ca:	20ff      	movs	r0, #255	; 0xff
 80113cc:	f7ff fca0 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113d0:	4603      	mov	r3, r0
 80113d2:	4619      	mov	r1, r3
 80113d4:	4620      	mov	r0, r4
 80113d6:	f7ff f9ca 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80113e0:	2100      	movs	r1, #0
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7ff fa16 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f603 3414 	addw	r4, r3, #2836	; 0xb14
 80113ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113f2:	2128      	movs	r1, #40	; 0x28
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7ff f951 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80113fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff f95c 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011404:	4603      	mov	r3, r0
 8011406:	4a47      	ldr	r2, [pc, #284]	; (8011524 <_ZN12MainViewBaseC1Ev+0x7c0>)
 8011408:	2102      	movs	r1, #2
 801140a:	4620      	mov	r0, r4
 801140c:	f009 fd3e 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 801141c:	4619      	mov	r1, r3
 801141e:	4610      	mov	r0, r2
 8011420:	f7ff fa80 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 801142a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801142e:	2106      	movs	r1, #6
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff f933 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011436:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 801143a:	4620      	mov	r0, r4
 801143c:	f006 f97c 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8011446:	230e      	movs	r3, #14
 8011448:	9300      	str	r3, [sp, #0]
 801144a:	2312      	movs	r3, #18
 801144c:	223e      	movs	r2, #62	; 0x3e
 801144e:	21e7      	movs	r1, #231	; 0xe7
 8011450:	f7fe febe 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f503 7421 	add.w	r4, r3, #644	; 0x284
 801145a:	22ff      	movs	r2, #255	; 0xff
 801145c:	21ff      	movs	r1, #255	; 0xff
 801145e:	20ff      	movs	r0, #255	; 0xff
 8011460:	f7ff fc56 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011464:	4603      	mov	r3, r0
 8011466:	4619      	mov	r1, r3
 8011468:	4620      	mov	r0, r4
 801146a:	f7ff f980 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8011474:	2100      	movs	r1, #0
 8011476:	4618      	mov	r0, r3
 8011478:	f7ff f9cc 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f603 3418 	addw	r4, r3, #2840	; 0xb18
 8011482:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011486:	2129      	movs	r1, #41	; 0x29
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff f907 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801148e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff f912 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011498:	4603      	mov	r3, r0
 801149a:	4a22      	ldr	r2, [pc, #136]	; (8011524 <_ZN12MainViewBaseC1Ev+0x7c0>)
 801149c:	2102      	movs	r1, #2
 801149e:	4620      	mov	r0, r4
 80114a0:	f009 fcf4 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f503 7221 	add.w	r2, r3, #644	; 0x284
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 80114b0:	4619      	mov	r1, r3
 80114b2:	4610      	mov	r0, r2
 80114b4:	f7ff fa36 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f503 7421 	add.w	r4, r3, #644	; 0x284
 80114be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114c2:	2107      	movs	r1, #7
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7ff f8e9 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80114ca:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80114ce:	4620      	mov	r0, r4
 80114d0:	f006 f932 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 80114da:	230e      	movs	r3, #14
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	2312      	movs	r3, #18
 80114e0:	223f      	movs	r2, #63	; 0x3f
 80114e2:	f44f 7192 	mov.w	r1, #292	; 0x124
 80114e6:	f7fe fe73 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80114f0:	22ff      	movs	r2, #255	; 0xff
 80114f2:	21ff      	movs	r1, #255	; 0xff
 80114f4:	20ff      	movs	r0, #255	; 0xff
 80114f6:	f7ff fc0b 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114fa:	4603      	mov	r3, r0
 80114fc:	4619      	mov	r1, r3
 80114fe:	4620      	mov	r0, r4
 8011500:	f7ff f935 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801150a:	2100      	movs	r1, #0
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff f981 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f603 341c 	addw	r4, r3, #2844	; 0xb1c
 8011518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801151c:	212a      	movs	r1, #42	; 0x2a
 801151e:	4618      	mov	r0, r3
 8011520:	e002      	b.n	8011528 <_ZN12MainViewBaseC1Ev+0x7c4>
 8011522:	bf00      	nop
 8011524:	080262c4 	.word	0x080262c4
 8011528:	f7ff f8b8 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801152c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011530:	4618      	mov	r0, r3
 8011532:	f7ff f8c3 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011536:	4603      	mov	r3, r0
 8011538:	4ae2      	ldr	r2, [pc, #904]	; (80118c4 <_ZN12MainViewBaseC1Ev+0xb60>)
 801153a:	2102      	movs	r1, #2
 801153c:	4620      	mov	r0, r4
 801153e:	f009 fca5 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 801154e:	4619      	mov	r1, r3
 8011550:	4610      	mov	r0, r2
 8011552:	f7ff f9e7 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 801155c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011560:	2108      	movs	r1, #8
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff f89a 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011568:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 801156c:	4620      	mov	r0, r4
 801156e:	f006 f8e3 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8011578:	230e      	movs	r3, #14
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	2312      	movs	r3, #18
 801157e:	223f      	movs	r2, #63	; 0x3f
 8011580:	f240 115d 	movw	r1, #349	; 0x15d
 8011584:	f7fe fe24 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 801158e:	22ff      	movs	r2, #255	; 0xff
 8011590:	21ff      	movs	r1, #255	; 0xff
 8011592:	20ff      	movs	r0, #255	; 0xff
 8011594:	f7ff fbbc 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011598:	4603      	mov	r3, r0
 801159a:	4619      	mov	r1, r3
 801159c:	4620      	mov	r0, r4
 801159e:	f7ff f8e6 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80115a8:	2100      	movs	r1, #0
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7ff f932 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
 80115b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80115ba:	212b      	movs	r1, #43	; 0x2b
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff f86d 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80115c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7ff f878 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80115cc:	4603      	mov	r3, r0
 80115ce:	4abd      	ldr	r2, [pc, #756]	; (80118c4 <_ZN12MainViewBaseC1Ev+0xb60>)
 80115d0:	2102      	movs	r1, #2
 80115d2:	4620      	mov	r0, r4
 80115d4:	f009 fc5a 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80115e4:	4619      	mov	r1, r3
 80115e6:	4610      	mov	r0, r2
 80115e8:	f7ff f99c 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80115f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80115f6:	2109      	movs	r1, #9
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff f84f 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80115fe:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8011602:	4620      	mov	r0, r4
 8011604:	f006 f898 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 801160e:	230f      	movs	r3, #15
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	2312      	movs	r3, #18
 8011614:	223e      	movs	r2, #62	; 0x3e
 8011616:	f240 119b 	movw	r1, #411	; 0x19b
 801161a:	f7fe fdd9 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8011624:	22ff      	movs	r2, #255	; 0xff
 8011626:	21ff      	movs	r1, #255	; 0xff
 8011628:	20ff      	movs	r0, #255	; 0xff
 801162a:	f7ff fb71 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801162e:	4603      	mov	r3, r0
 8011630:	4619      	mov	r1, r3
 8011632:	4620      	mov	r0, r4
 8011634:	f7ff f89b 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 801163e:	2100      	movs	r1, #0
 8011640:	4618      	mov	r0, r3
 8011642:	f7ff f8e7 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f603 3424 	addw	r4, r3, #2852	; 0xb24
 801164c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011650:	212c      	movs	r1, #44	; 0x2c
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff f822 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011658:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801165c:	4618      	mov	r0, r3
 801165e:	f7ff f82d 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011662:	4603      	mov	r3, r0
 8011664:	4a97      	ldr	r2, [pc, #604]	; (80118c4 <_ZN12MainViewBaseC1Ev+0xb60>)
 8011666:	2102      	movs	r1, #2
 8011668:	4620      	mov	r0, r4
 801166a:	f009 fc0f 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 801167a:	4619      	mov	r1, r3
 801167c:	4610      	mov	r0, r2
 801167e:	f7ff f951 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8011688:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801168c:	210a      	movs	r1, #10
 801168e:	4618      	mov	r0, r3
 8011690:	f7ff f804 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011694:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8011698:	4620      	mov	r0, r4
 801169a:	f006 f84d 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80116a4:	230e      	movs	r3, #14
 80116a6:	9300      	str	r3, [sp, #0]
 80116a8:	2312      	movs	r3, #18
 80116aa:	223e      	movs	r2, #62	; 0x3e
 80116ac:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80116b0:	f7fe fd8e 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f503 7459 	add.w	r4, r3, #868	; 0x364
 80116ba:	22ff      	movs	r2, #255	; 0xff
 80116bc:	21ff      	movs	r1, #255	; 0xff
 80116be:	20ff      	movs	r0, #255	; 0xff
 80116c0:	f7ff fb26 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116c4:	4603      	mov	r3, r0
 80116c6:	4619      	mov	r1, r3
 80116c8:	4620      	mov	r0, r4
 80116ca:	f7ff f850 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80116d4:	2100      	movs	r1, #0
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7ff f89c 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f603 3428 	addw	r4, r3, #2856	; 0xb28
 80116e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80116e6:	212d      	movs	r1, #45	; 0x2d
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fe ffd7 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80116ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fe ffe2 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80116f8:	4603      	mov	r3, r0
 80116fa:	4a72      	ldr	r2, [pc, #456]	; (80118c4 <_ZN12MainViewBaseC1Ev+0xb60>)
 80116fc:	2102      	movs	r1, #2
 80116fe:	4620      	mov	r0, r4
 8011700:	f009 fbc4 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f503 7259 	add.w	r2, r3, #868	; 0x364
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8011710:	4619      	mov	r1, r3
 8011712:	4610      	mov	r0, r2
 8011714:	f7ff f906 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f503 7459 	add.w	r4, r3, #868	; 0x364
 801171e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011722:	210b      	movs	r1, #11
 8011724:	4618      	mov	r0, r3
 8011726:	f7fe ffb9 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801172a:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 801172e:	4620      	mov	r0, r4
 8011730:	f006 f802 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 801173a:	2305      	movs	r3, #5
 801173c:	9300      	str	r3, [sp, #0]
 801173e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8011742:	223a      	movs	r2, #58	; 0x3a
 8011744:	f06f 0101 	mvn.w	r1, #1
 8011748:	f7fe fd42 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8011752:	22ff      	movs	r2, #255	; 0xff
 8011754:	21ff      	movs	r1, #255	; 0xff
 8011756:	20ff      	movs	r0, #255	; 0xff
 8011758:	f7ff fada 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801175c:	4603      	mov	r3, r0
 801175e:	22ff      	movs	r2, #255	; 0xff
 8011760:	4619      	mov	r1, r3
 8011762:	4620      	mov	r0, r4
 8011764:	f005 fab9 	bl	8016cda <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8011774:	4619      	mov	r1, r3
 8011776:	4610      	mov	r0, r2
 8011778:	f005 fb18 	bl	8016dac <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011782:	2203      	movs	r2, #3
 8011784:	2100      	movs	r1, #0
 8011786:	4618      	mov	r0, r3
 8011788:	f000 ff12 	bl	80125b0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011792:	2203      	movs	r2, #3
 8011794:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8011798:	4618      	mov	r0, r3
 801179a:	f000 ff2f 	bl	80125fc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80117a4:	2102      	movs	r1, #2
 80117a6:	4618      	mov	r0, r3
 80117a8:	f000 ff4e 	bl	8012648 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80117b2:	2101      	movs	r1, #1
 80117b4:	4618      	mov	r0, r3
 80117b6:	f005 fe13 	bl	80173e0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(47, 126);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80117c0:	227e      	movs	r2, #126	; 0x7e
 80117c2:	212f      	movs	r1, #47	; 0x2f
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fe fd4e 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80117d0:	2200      	movs	r2, #0
 80117d2:	21dc      	movs	r1, #220	; 0xdc
 80117d4:	20ff      	movs	r0, #255	; 0xff
 80117d6:	f7ff fa9b 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117da:	4603      	mov	r3, r0
 80117dc:	4619      	mov	r1, r3
 80117de:	4620      	mov	r0, r4
 80117e0:	f7fe ffc5 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80117ea:	2100      	movs	r1, #0
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7ff f811 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80117f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80117fc:	2110      	movs	r1, #16
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fe ff4c 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011804:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8011808:	4620      	mov	r0, r4
 801180a:	f005 ff95 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(47, 188);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8011814:	22bc      	movs	r2, #188	; 0xbc
 8011816:	212f      	movs	r1, #47	; 0x2f
 8011818:	4618      	mov	r0, r3
 801181a:	f7fe fd24 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011824:	2200      	movs	r2, #0
 8011826:	21dc      	movs	r1, #220	; 0xdc
 8011828:	20ff      	movs	r0, #255	; 0xff
 801182a:	f7ff fa71 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801182e:	4603      	mov	r3, r0
 8011830:	4619      	mov	r1, r3
 8011832:	4620      	mov	r0, r4
 8011834:	f7fe ff9b 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801183e:	2100      	movs	r1, #0
 8011840:	4618      	mov	r0, r3
 8011842:	f7fe ffe7 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 801184c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011850:	2111      	movs	r1, #17
 8011852:	4618      	mov	r0, r3
 8011854:	f7fe ff22 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011858:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801185c:	4620      	mov	r0, r4
 801185e:	f005 ff6b 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 92, 60, 35);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 8011868:	2323      	movs	r3, #35	; 0x23
 801186a:	9300      	str	r3, [sp, #0]
 801186c:	233c      	movs	r3, #60	; 0x3c
 801186e:	225c      	movs	r2, #92	; 0x5c
 8011870:	2119      	movs	r1, #25
 8011872:	f7fe fcad 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 801187c:	22ff      	movs	r2, #255	; 0xff
 801187e:	21ff      	movs	r1, #255	; 0xff
 8011880:	20ff      	movs	r0, #255	; 0xff
 8011882:	f7ff fa45 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011886:	4603      	mov	r3, r0
 8011888:	4619      	mov	r1, r3
 801188a:	4620      	mov	r0, r4
 801188c:	f7fe ff6f 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8011896:	2100      	movs	r1, #0
 8011898:	4618      	mov	r0, r3
 801189a:	f7fe ffbb 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f603 342c 	addw	r4, r3, #2860	; 0xb2c
 80118a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80118a8:	210d      	movs	r1, #13
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fe fef6 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80118b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7fe ff01 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80118ba:	4603      	mov	r3, r0
 80118bc:	4a01      	ldr	r2, [pc, #4]	; (80118c4 <_ZN12MainViewBaseC1Ev+0xb60>)
 80118be:	2105      	movs	r1, #5
 80118c0:	4620      	mov	r0, r4
 80118c2:	e001      	b.n	80118c8 <_ZN12MainViewBaseC1Ev+0xb64>
 80118c4:	080262c4 	.word	0x080262c4
 80118c8:	f009 fae0 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 80118d8:	4619      	mov	r1, r3
 80118da:	4610      	mov	r0, r2
 80118dc:	f7ff f822 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 80118e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80118ea:	210c      	movs	r1, #12
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fe fed5 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80118f2:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80118f6:	4620      	mov	r0, r4
 80118f8:	f005 ff1e 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 60, 35);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 8011902:	2323      	movs	r3, #35	; 0x23
 8011904:	9300      	str	r3, [sp, #0]
 8011906:	233c      	movs	r3, #60	; 0x3c
 8011908:	2299      	movs	r2, #153	; 0x99
 801190a:	2119      	movs	r1, #25
 801190c:	f7fe fc60 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011916:	22ff      	movs	r2, #255	; 0xff
 8011918:	21ff      	movs	r1, #255	; 0xff
 801191a:	20ff      	movs	r0, #255	; 0xff
 801191c:	f7ff f9f8 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011920:	4603      	mov	r3, r0
 8011922:	4619      	mov	r1, r3
 8011924:	4620      	mov	r0, r4
 8011926:	f7fe ff22 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011930:	2100      	movs	r1, #0
 8011932:	4618      	mov	r0, r3
 8011934:	f7fe ff6e 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f603 3436 	addw	r4, r3, #2870	; 0xb36
 801193e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011942:	210f      	movs	r1, #15
 8011944:	4618      	mov	r0, r3
 8011946:	f7fe fea9 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801194a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801194e:	4618      	mov	r0, r3
 8011950:	f7fe feb4 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011954:	4603      	mov	r3, r0
 8011956:	4ae3      	ldr	r2, [pc, #908]	; (8011ce4 <_ZN12MainViewBaseC1Ev+0xf80>)
 8011958:	2105      	movs	r1, #5
 801195a:	4620      	mov	r0, r4
 801195c:	f009 fa96 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f603 3336 	addw	r3, r3, #2870	; 0xb36
 801196c:	4619      	mov	r1, r3
 801196e:	4610      	mov	r0, r2
 8011970:	f7fe ffd8 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801197a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801197e:	210e      	movs	r1, #14
 8011980:	4618      	mov	r0, r3
 8011982:	f7fe fe8b 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011986:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 801198a:	4620      	mov	r0, r4
 801198c:	f005 fed4 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 188);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011996:	22bc      	movs	r2, #188	; 0xbc
 8011998:	f240 1157 	movw	r1, #343	; 0x157
 801199c:	4618      	mov	r0, r3
 801199e:	f7fe fc62 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80119a8:	2200      	movs	r2, #0
 80119aa:	21dc      	movs	r1, #220	; 0xdc
 80119ac:	20ff      	movs	r0, #255	; 0xff
 80119ae:	f7ff f9af 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119b2:	4603      	mov	r3, r0
 80119b4:	4619      	mov	r1, r3
 80119b6:	4620      	mov	r0, r4
 80119b8:	f7fe fed9 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119c2:	2100      	movs	r1, #0
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7fe ff25 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80119d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80119d4:	2114      	movs	r1, #20
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fe fe60 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80119dc:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80119e0:	4620      	mov	r0, r4
 80119e2:	f005 fea9 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 188);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80119ec:	22bc      	movs	r2, #188	; 0xbc
 80119ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fe fc37 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f203 5434 	addw	r4, r3, #1332	; 0x534
 80119fe:	2200      	movs	r2, #0
 8011a00:	21dc      	movs	r1, #220	; 0xdc
 8011a02:	20ff      	movs	r0, #255	; 0xff
 8011a04:	f7ff f984 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f7fe feae 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011a18:	2100      	movs	r1, #0
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fe fefa 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011a26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011a2a:	2115      	movs	r1, #21
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fe fe35 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011a32:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8011a36:	4620      	mov	r0, r4
 8011a38:	f005 fe7e 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(328, 153, 60, 35);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 8011a42:	2323      	movs	r3, #35	; 0x23
 8011a44:	9300      	str	r3, [sp, #0]
 8011a46:	233c      	movs	r3, #60	; 0x3c
 8011a48:	2299      	movs	r2, #153	; 0x99
 8011a4a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011a4e:	f7fe fbbf 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8011a58:	22ff      	movs	r2, #255	; 0xff
 8011a5a:	21ff      	movs	r1, #255	; 0xff
 8011a5c:	20ff      	movs	r0, #255	; 0xff
 8011a5e:	f7ff f957 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a62:	4603      	mov	r3, r0
 8011a64:	4619      	mov	r1, r3
 8011a66:	4620      	mov	r0, r4
 8011a68:	f7fe fe81 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011a72:	2100      	movs	r1, #0
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe fecd 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f503 6434 	add.w	r4, r3, #2880	; 0xb40
 8011a80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011a84:	2117      	movs	r1, #23
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fe fe08 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011a8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7fe fe13 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011a96:	4603      	mov	r3, r0
 8011a98:	4a92      	ldr	r2, [pc, #584]	; (8011ce4 <_ZN12MainViewBaseC1Ev+0xf80>)
 8011a9a:	2105      	movs	r1, #5
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f009 f9f5 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8011aae:	4619      	mov	r1, r3
 8011ab0:	4610      	mov	r0, r2
 8011ab2:	f7fe ff37 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8011abc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011ac0:	2116      	movs	r1, #22
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fe fdea 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011ac8:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8011acc:	4620      	mov	r0, r4
 8011ace:	f005 fe33 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(411, 153, 60, 35);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8011ad8:	2323      	movs	r3, #35	; 0x23
 8011ada:	9300      	str	r3, [sp, #0]
 8011adc:	233c      	movs	r3, #60	; 0x3c
 8011ade:	2299      	movs	r2, #153	; 0x99
 8011ae0:	f240 119b 	movw	r1, #411	; 0x19b
 8011ae4:	f7fe fb74 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011aee:	22ff      	movs	r2, #255	; 0xff
 8011af0:	21ff      	movs	r1, #255	; 0xff
 8011af2:	20ff      	movs	r0, #255	; 0xff
 8011af4:	f7ff f90c 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011af8:	4603      	mov	r3, r0
 8011afa:	4619      	mov	r1, r3
 8011afc:	4620      	mov	r0, r4
 8011afe:	f7fe fe36 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011b08:	2100      	movs	r1, #0
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fe fe82 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f603 344a 	addw	r4, r3, #2890	; 0xb4a
 8011b16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011b1a:	2125      	movs	r1, #37	; 0x25
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fe fdbd 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011b22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fe fdc8 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	4a6d      	ldr	r2, [pc, #436]	; (8011ce4 <_ZN12MainViewBaseC1Ev+0xf80>)
 8011b30:	2105      	movs	r1, #5
 8011b32:	4620      	mov	r0, r4
 8011b34:	f009 f9aa 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f603 334a 	addw	r3, r3, #2890	; 0xb4a
 8011b44:	4619      	mov	r1, r3
 8011b46:	4610      	mov	r0, r2
 8011b48:	f7fe feec 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011b52:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011b56:	2118      	movs	r1, #24
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fe fd9f 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011b5e:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011b62:	4620      	mov	r0, r4
 8011b64:	f005 fde8 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8011b6e:	22f0      	movs	r2, #240	; 0xf0
 8011b70:	f240 1197 	movw	r1, #407	; 0x197
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fe fb76 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8011b80:	2200      	movs	r2, #0
 8011b82:	21dc      	movs	r1, #220	; 0xdc
 8011b84:	20ff      	movs	r0, #255	; 0xff
 8011b86:	f7ff f8c3 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f7fe fded 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8011b9a:	2100      	movs	r1, #0
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7fe fe39 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8011ba8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011bac:	211b      	movs	r1, #27
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fe fd74 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011bb4:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f005 fdbd 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011bc4:	22e2      	movs	r2, #226	; 0xe2
 8011bc6:	f240 116d 	movw	r1, #365	; 0x16d
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fe fb4b 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8011bd6:	230a      	movs	r3, #10
 8011bd8:	9300      	str	r3, [sp, #0]
 8011bda:	2364      	movs	r3, #100	; 0x64
 8011bdc:	2202      	movs	r2, #2
 8011bde:	2102      	movs	r1, #2
 8011be0:	f003 fbaa 	bl	8015338 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8011bea:	2300      	movs	r3, #0
 8011bec:	9300      	str	r3, [sp, #0]
 8011bee:	2300      	movs	r3, #0
 8011bf0:	2264      	movs	r2, #100	; 0x64
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	f003 fe1e 	bl	8015834 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011bfe:	2100      	movs	r1, #0
 8011c00:	4618      	mov	r0, r3
 8011c02:	f003 fbf9 	bl	80153f8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011c0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011c10:	2100      	movs	r1, #0
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fe fa7e 	bl	8010114 <_ZN8touchgfx6BitmapC1Et>
 8011c18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f003 fdfd 	bl	801581e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	21dc      	movs	r1, #220	; 0xdc
 8011c2e:	20ff      	movs	r0, #255	; 0xff
 8011c30:	f7ff f86e 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c34:	4603      	mov	r3, r0
 8011c36:	4619      	mov	r1, r3
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f003 fb27 	bl	801528c <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011c44:	213c      	movs	r1, #60	; 0x3c
 8011c46:	4618      	mov	r0, r3
 8011c48:	f003 fb8e 	bl	8015368 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 8011c52:	230a      	movs	r3, #10
 8011c54:	9300      	str	r3, [sp, #0]
 8011c56:	23b4      	movs	r3, #180	; 0xb4
 8011c58:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011c5c:	210e      	movs	r1, #14
 8011c5e:	f7fe fab7 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8011c68:	22ff      	movs	r2, #255	; 0xff
 8011c6a:	21ff      	movs	r1, #255	; 0xff
 8011c6c:	20ff      	movs	r0, #255	; 0xff
 8011c6e:	f7ff f84f 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c72:	4603      	mov	r3, r0
 8011c74:	22ff      	movs	r2, #255	; 0xff
 8011c76:	4619      	mov	r1, r3
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f005 f82e 	bl	8016cda <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	f005 f88d 	bl	8016dac <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011c98:	2205      	movs	r2, #5
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f000 fc87 	bl	80125b0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011ca8:	2205      	movs	r2, #5
 8011caa:	21b4      	movs	r1, #180	; 0xb4
 8011cac:	4618      	mov	r0, r3
 8011cae:	f000 fca5 	bl	80125fc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011cb8:	2102      	movs	r1, #2
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f000 fcc4 	bl	8012648 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8011cc6:	2100      	movs	r1, #0
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f005 fb89 	bl	80173e0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 8011cd4:	230a      	movs	r3, #10
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	23b4      	movs	r3, #180	; 0xb4
 8011cda:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011cde:	f240 111f 	movw	r1, #287	; 0x11f
 8011ce2:	e001      	b.n	8011ce8 <_ZN12MainViewBaseC1Ev+0xf84>
 8011ce4:	080262c4 	.word	0x080262c4
 8011ce8:	f7fe fa72 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8011cf2:	22ff      	movs	r2, #255	; 0xff
 8011cf4:	21ff      	movs	r1, #255	; 0xff
 8011cf6:	20ff      	movs	r0, #255	; 0xff
 8011cf8:	f7ff f80a 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	22ff      	movs	r2, #255	; 0xff
 8011d00:	4619      	mov	r1, r3
 8011d02:	4620      	mov	r0, r4
 8011d04:	f004 ffe9 	bl	8016cda <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8011d14:	4619      	mov	r1, r3
 8011d16:	4610      	mov	r0, r2
 8011d18:	f005 f848 	bl	8016dac <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011d22:	2205      	movs	r2, #5
 8011d24:	2100      	movs	r1, #0
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 fc42 	bl	80125b0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011d32:	2205      	movs	r2, #5
 8011d34:	21b4      	movs	r1, #180	; 0xb4
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 fc60 	bl	80125fc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011d42:	2102      	movs	r1, #2
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 fc7f 	bl	8012648 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011d50:	2100      	movs	r1, #0
 8011d52:	4618      	mov	r0, r3
 8011d54:	f005 fb44 	bl	80173e0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 8011d5e:	2315      	movs	r3, #21
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	233c      	movs	r3, #60	; 0x3c
 8011d64:	22f7      	movs	r2, #247	; 0xf7
 8011d66:	21d2      	movs	r1, #210	; 0xd2
 8011d68:	f7fe fa32 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8011d72:	22ff      	movs	r2, #255	; 0xff
 8011d74:	21ff      	movs	r1, #255	; 0xff
 8011d76:	20ff      	movs	r0, #255	; 0xff
 8011d78:	f7fe ffca 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	4619      	mov	r1, r3
 8011d80:	4620      	mov	r0, r4
 8011d82:	f7fe fcf4 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8011d8c:	2100      	movs	r1, #0
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7fe fd40 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f603 3454 	addw	r4, r3, #2900	; 0xb54
 8011d9a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011d9e:	211d      	movs	r1, #29
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fe fc7b 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011da6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7fe fc86 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011db0:	4603      	mov	r3, r0
 8011db2:	4ae2      	ldr	r2, [pc, #904]	; (801213c <_ZN12MainViewBaseC1Ev+0x13d8>)
 8011db4:	2105      	movs	r1, #5
 8011db6:	4620      	mov	r0, r4
 8011db8:	f009 f868 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8011dc8:	4619      	mov	r1, r3
 8011dca:	4610      	mov	r0, r2
 8011dcc:	f7fe fdaa 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8011dd6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011dda:	211c      	movs	r1, #28
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7fe fc5d 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011de2:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8011de6:	4620      	mov	r0, r4
 8011de8:	f005 fca6 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011df2:	2201      	movs	r2, #1
 8011df4:	2101      	movs	r1, #1
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fe fa35 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8011e02:	2337      	movs	r3, #55	; 0x37
 8011e04:	9300      	str	r3, [sp, #0]
 8011e06:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011e0a:	2202      	movs	r2, #2
 8011e0c:	2102      	movs	r1, #2
 8011e0e:	f003 fbe3 	bl	80155d8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8011e18:	2300      	movs	r3, #0
 8011e1a:	9300      	str	r3, [sp, #0]
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011e22:	2100      	movs	r1, #0
 8011e24:	f003 fd06 	bl	8015834 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011e2e:	2100      	movs	r1, #0
 8011e30:	4618      	mov	r0, r3
 8011e32:	f003 fae1 	bl	80153f8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f003 fb25 	bl	801548e <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011e4a:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f003 fbda 	bl	8015608 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8011e5a:	2101      	movs	r1, #1
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f003 faff 	bl	8015460 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8011e68:	2316      	movs	r3, #22
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	2337      	movs	r3, #55	; 0x37
 8011e6e:	2204      	movs	r2, #4
 8011e70:	2119      	movs	r1, #25
 8011e72:	f7fe f9ad 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8011e7c:	22ff      	movs	r2, #255	; 0xff
 8011e7e:	21ff      	movs	r1, #255	; 0xff
 8011e80:	20ff      	movs	r0, #255	; 0xff
 8011e82:	f7fe ff45 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e86:	4603      	mov	r3, r0
 8011e88:	4619      	mov	r1, r3
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f7fe fc6f 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8011e96:	2100      	movs	r1, #0
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fe fcbb 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f603 345e 	addw	r4, r3, #2910	; 0xb5e
 8011ea4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011ea8:	211f      	movs	r1, #31
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7fe fbf6 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011eb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7fe fc01 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	4a9f      	ldr	r2, [pc, #636]	; (801213c <_ZN12MainViewBaseC1Ev+0x13d8>)
 8011ebe:	2105      	movs	r1, #5
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f008 ffe3 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f603 335e 	addw	r3, r3, #2910	; 0xb5e
 8011ed2:	4619      	mov	r1, r3
 8011ed4:	4610      	mov	r0, r2
 8011ed6:	f7fe fd25 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8011ee0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011ee4:	211e      	movs	r1, #30
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe fbd8 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011eec:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	f005 fc21 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8011efc:	220f      	movs	r2, #15
 8011efe:	2152      	movs	r1, #82	; 0x52
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe f9b0 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8011f0c:	22ff      	movs	r2, #255	; 0xff
 8011f0e:	21ff      	movs	r1, #255	; 0xff
 8011f10:	20ff      	movs	r0, #255	; 0xff
 8011f12:	f7fe fefd 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f16:	4603      	mov	r3, r0
 8011f18:	4619      	mov	r1, r3
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f7fe fc27 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8011f26:	2100      	movs	r1, #0
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7fe fc73 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8011f34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011f38:	2120      	movs	r1, #32
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fe fbae 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011f40:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8011f44:	4620      	mov	r0, r4
 8011f46:	f005 fbf7 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(328, 91, 60, 35);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f603 1078 	addw	r0, r3, #2424	; 0x978
 8011f50:	2323      	movs	r3, #35	; 0x23
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	233c      	movs	r3, #60	; 0x3c
 8011f56:	225b      	movs	r2, #91	; 0x5b
 8011f58:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011f5c:	f7fe f938 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8011f66:	22ff      	movs	r2, #255	; 0xff
 8011f68:	21ff      	movs	r1, #255	; 0xff
 8011f6a:	20ff      	movs	r0, #255	; 0xff
 8011f6c:	f7fe fed0 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f70:	4603      	mov	r3, r0
 8011f72:	4619      	mov	r1, r3
 8011f74:	4620      	mov	r0, r4
 8011f76:	f7fe fbfa 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8011f80:	2100      	movs	r1, #0
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe fc46 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f603 3468 	addw	r4, r3, #2920	; 0xb68
 8011f8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011f92:	2122      	movs	r1, #34	; 0x22
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7fe fb81 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011f9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7fe fb8c 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	4a65      	ldr	r2, [pc, #404]	; (801213c <_ZN12MainViewBaseC1Ev+0x13d8>)
 8011fa8:	2105      	movs	r1, #5
 8011faa:	4620      	mov	r0, r4
 8011fac:	f008 ff6e 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f603 1278 	addw	r2, r3, #2424	; 0x978
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	f7fe fcb0 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8011fca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011fce:	2121      	movs	r1, #33	; 0x21
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fe fb63 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8011fd6:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8011fda:	4620      	mov	r0, r4
 8011fdc:	f005 fbac 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(191, 158, 96, 60);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8011fe6:	233c      	movs	r3, #60	; 0x3c
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	2360      	movs	r3, #96	; 0x60
 8011fec:	229e      	movs	r2, #158	; 0x9e
 8011fee:	21bf      	movs	r1, #191	; 0xbf
 8011ff0:	f7fe f8ee 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8011ffa:	22ff      	movs	r2, #255	; 0xff
 8011ffc:	21ff      	movs	r1, #255	; 0xff
 8011ffe:	20ff      	movs	r0, #255	; 0xff
 8012000:	f7fe fe86 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012004:	4603      	mov	r3, r0
 8012006:	4619      	mov	r1, r3
 8012008:	4620      	mov	r0, r4
 801200a:	f7fe fbb0 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8012014:	2100      	movs	r1, #0
 8012016:	4618      	mov	r0, r3
 8012018:	f7fe fbfc 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f603 3472 	addw	r4, r3, #2930	; 0xb72
 8012022:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012026:	2124      	movs	r1, #36	; 0x24
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe fb37 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801202e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012032:	4618      	mov	r0, r3
 8012034:	f7fe fb42 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8012038:	4603      	mov	r3, r0
 801203a:	4a40      	ldr	r2, [pc, #256]	; (801213c <_ZN12MainViewBaseC1Ev+0x13d8>)
 801203c:	2105      	movs	r1, #5
 801203e:	4620      	mov	r0, r4
 8012040:	f008 ff24 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f603 3372 	addw	r3, r3, #2930	; 0xb72
 8012050:	4619      	mov	r1, r3
 8012052:	4610      	mov	r0, r2
 8012054:	f7fe fc66 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 801205e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012062:	2123      	movs	r1, #35	; 0x23
 8012064:	4618      	mov	r0, r3
 8012066:	f7fe fb19 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801206a:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 801206e:	4620      	mov	r0, r4
 8012070:	f005 fb62 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(104, 153, 60, 35);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 801207a:	2323      	movs	r3, #35	; 0x23
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	233c      	movs	r3, #60	; 0x3c
 8012080:	2299      	movs	r2, #153	; 0x99
 8012082:	2168      	movs	r1, #104	; 0x68
 8012084:	f7fe f8a4 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 801208e:	22ff      	movs	r2, #255	; 0xff
 8012090:	21ff      	movs	r1, #255	; 0xff
 8012092:	20ff      	movs	r0, #255	; 0xff
 8012094:	f7fe fe3c 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012098:	4603      	mov	r3, r0
 801209a:	4619      	mov	r1, r3
 801209c:	4620      	mov	r0, r4
 801209e:	f7fe fb66 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80120a8:	2100      	movs	r1, #0
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fe fbb2 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f603 347c 	addw	r4, r3, #2940	; 0xb7c
 80120b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80120ba:	212f      	movs	r1, #47	; 0x2f
 80120bc:	4618      	mov	r0, r3
 80120be:	f7fe faed 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80120c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fe faf8 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80120cc:	4603      	mov	r3, r0
 80120ce:	4a1b      	ldr	r2, [pc, #108]	; (801213c <_ZN12MainViewBaseC1Ev+0x13d8>)
 80120d0:	2105      	movs	r1, #5
 80120d2:	4620      	mov	r0, r4
 80120d4:	f008 feda 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80120e4:	4619      	mov	r1, r3
 80120e6:	4610      	mov	r0, r2
 80120e8:	f7fe fc1c 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 80120f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80120f6:	212e      	movs	r1, #46	; 0x2e
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fe facf 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80120fe:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8012102:	4620      	mov	r0, r4
 8012104:	f005 fb18 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(118, 188);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801210e:	22bc      	movs	r2, #188	; 0xbc
 8012110:	2176      	movs	r1, #118	; 0x76
 8012112:	4618      	mov	r0, r3
 8012114:	f7fe f8a7 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 801211e:	2200      	movs	r2, #0
 8012120:	21dc      	movs	r1, #220	; 0xdc
 8012122:	20ff      	movs	r0, #255	; 0xff
 8012124:	f7fe fdf4 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012128:	4603      	mov	r3, r0
 801212a:	4619      	mov	r1, r3
 801212c:	4620      	mov	r0, r4
 801212e:	f7fe fb1e 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012138:	2100      	movs	r1, #0
 801213a:	e001      	b.n	8012140 <_ZN12MainViewBaseC1Ev+0x13dc>
 801213c:	080262c4 	.word	0x080262c4
 8012140:	4618      	mov	r0, r3
 8012142:	f7fe fb67 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 801214c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012150:	2130      	movs	r1, #48	; 0x30
 8012152:	4618      	mov	r0, r3
 8012154:	f7fe faa2 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8012158:	f8b7 10e0 	ldrh.w	r1, [r7, #224]	; 0xe0
 801215c:	4620      	mov	r0, r4
 801215e:	f005 faeb 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(411, 92, 60, 35);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8012168:	2323      	movs	r3, #35	; 0x23
 801216a:	9300      	str	r3, [sp, #0]
 801216c:	233c      	movs	r3, #60	; 0x3c
 801216e:	225c      	movs	r2, #92	; 0x5c
 8012170:	f240 119b 	movw	r1, #411	; 0x19b
 8012174:	f7fe f82c 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 801217e:	22ff      	movs	r2, #255	; 0xff
 8012180:	21ff      	movs	r1, #255	; 0xff
 8012182:	20ff      	movs	r0, #255	; 0xff
 8012184:	f7fe fdc4 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012188:	4603      	mov	r3, r0
 801218a:	4619      	mov	r1, r3
 801218c:	4620      	mov	r0, r4
 801218e:	f7fe faee 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8012198:	2100      	movs	r1, #0
 801219a:	4618      	mov	r0, r3
 801219c:	f7fe fb3a 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f603 3486 	addw	r4, r3, #2950	; 0xb86
 80121a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80121aa:	2132      	movs	r1, #50	; 0x32
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fe fa75 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80121b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fe fa80 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80121bc:	4603      	mov	r3, r0
 80121be:	4ad3      	ldr	r2, [pc, #844]	; (801250c <_ZN12MainViewBaseC1Ev+0x17a8>)
 80121c0:	2105      	movs	r1, #5
 80121c2:	4620      	mov	r0, r4
 80121c4:	f008 fe62 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f603 3386 	addw	r3, r3, #2950	; 0xb86
 80121d4:	4619      	mov	r1, r3
 80121d6:	4610      	mov	r0, r2
 80121d8:	f7fe fba4 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 80121e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80121e6:	2131      	movs	r1, #49	; 0x31
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fe fa57 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80121ee:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 80121f2:	4620      	mov	r0, r4
 80121f4:	f005 faa0 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(423, 126);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80121fe:	227e      	movs	r2, #126	; 0x7e
 8012200:	f240 11a7 	movw	r1, #423	; 0x1a7
 8012204:	4618      	mov	r0, r3
 8012206:	f7fe f82e 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8012210:	2200      	movs	r2, #0
 8012212:	21dc      	movs	r1, #220	; 0xdc
 8012214:	20ff      	movs	r0, #255	; 0xff
 8012216:	f7fe fd7b 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801221a:	4603      	mov	r3, r0
 801221c:	4619      	mov	r1, r3
 801221e:	4620      	mov	r0, r4
 8012220:	f7fe faa5 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801222a:	2100      	movs	r1, #0
 801222c:	4618      	mov	r0, r3
 801222e:	f7fe faf1 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8012238:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801223c:	2133      	movs	r1, #51	; 0x33
 801223e:	4618      	mov	r0, r3
 8012240:	f7fe fa2c 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 8012244:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 8012248:	4620      	mov	r0, r4
 801224a:	f005 fa75 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 8012254:	2311      	movs	r3, #17
 8012256:	9300      	str	r3, [sp, #0]
 8012258:	2313      	movs	r3, #19
 801225a:	22e2      	movs	r2, #226	; 0xe2
 801225c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8012260:	f7fd ffb6 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 801226a:	220d      	movs	r2, #13
 801226c:	210d      	movs	r1, #13
 801226e:	200d      	movs	r0, #13
 8012270:	f7fe fd4e 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012274:	4603      	mov	r3, r0
 8012276:	4619      	mov	r1, r3
 8012278:	4620      	mov	r0, r4
 801227a:	f7fe fa78 	bl	801076e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8012284:	2100      	movs	r1, #0
 8012286:	4618      	mov	r0, r3
 8012288:	f7fe fac4 	bl	8010814 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 8012292:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012296:	2135      	movs	r1, #53	; 0x35
 8012298:	4618      	mov	r0, r3
 801229a:	f7fe f9ff 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 801229e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fe fa0a 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80122a8:	4603      	mov	r3, r0
 80122aa:	4a98      	ldr	r2, [pc, #608]	; (801250c <_ZN12MainViewBaseC1Ev+0x17a8>)
 80122ac:	2105      	movs	r1, #5
 80122ae:	4620      	mov	r0, r4
 80122b0:	f008 fdec 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 80122c0:	4619      	mov	r1, r3
 80122c2:	4610      	mov	r0, r2
 80122c4:	f7fe fb2e 	bl	8010924 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 80122ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80122d2:	2134      	movs	r1, #52	; 0x34
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7fe f9e1 	bl	801069c <_ZN8touchgfx9TypedTextC1Et>
 80122da:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 80122de:	4620      	mov	r0, r4
 80122e0:	f005 fa2a 	bl	8017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	3340      	adds	r3, #64	; 0x40
 80122ea:	4619      	mov	r1, r3
 80122ec:	4610      	mov	r0, r2
 80122ee:	f7fe f91d 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	3370      	adds	r3, #112	; 0x70
 80122f8:	4619      	mov	r1, r3
 80122fa:	4610      	mov	r0, r2
 80122fc:	f7fe f916 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	33a4      	adds	r3, #164	; 0xa4
 8012306:	4619      	mov	r1, r3
 8012308:	4610      	mov	r0, r2
 801230a:	f7fe f90f 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	33d8      	adds	r3, #216	; 0xd8
 8012314:	4619      	mov	r1, r3
 8012316:	4610      	mov	r0, r2
 8012318:	f7fe f908 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012324:	4619      	mov	r1, r3
 8012326:	4610      	mov	r0, r2
 8012328:	f7fe f900 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012334:	4619      	mov	r1, r3
 8012336:	4610      	mov	r0, r2
 8012338:	f7fe f8f8 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 801233c:	687a      	ldr	r2, [r7, #4]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012344:	4619      	mov	r1, r3
 8012346:	4610      	mov	r0, r2
 8012348:	f7fe f8f0 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012354:	4619      	mov	r1, r3
 8012356:	4610      	mov	r0, r2
 8012358:	f7fe f8e8 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012364:	4619      	mov	r1, r3
 8012366:	4610      	mov	r0, r2
 8012368:	f7fe f8e0 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012374:	4619      	mov	r1, r3
 8012376:	4610      	mov	r0, r2
 8012378:	f7fe f8d8 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012384:	4619      	mov	r1, r3
 8012386:	4610      	mov	r0, r2
 8012388:	f7fe f8d0 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012394:	4619      	mov	r1, r3
 8012396:	4610      	mov	r0, r2
 8012398:	f7fe f8c8 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80123a4:	4619      	mov	r1, r3
 80123a6:	4610      	mov	r0, r2
 80123a8:	f7fe f8c0 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80123b4:	4619      	mov	r1, r3
 80123b6:	4610      	mov	r0, r2
 80123b8:	f7fe f8b8 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80123c4:	4619      	mov	r1, r3
 80123c6:	4610      	mov	r0, r2
 80123c8:	f7fe f8b0 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80123cc:	687a      	ldr	r2, [r7, #4]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80123d4:	4619      	mov	r1, r3
 80123d6:	4610      	mov	r0, r2
 80123d8:	f7fe f8a8 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80123e4:	4619      	mov	r1, r3
 80123e6:	4610      	mov	r0, r2
 80123e8:	f7fe f8a0 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80123f4:	4619      	mov	r1, r3
 80123f6:	4610      	mov	r0, r2
 80123f8:	f7fe f898 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012404:	4619      	mov	r1, r3
 8012406:	4610      	mov	r0, r2
 8012408:	f7fe f890 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012414:	4619      	mov	r1, r3
 8012416:	4610      	mov	r0, r2
 8012418:	f7fe f888 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8012424:	4619      	mov	r1, r3
 8012426:	4610      	mov	r0, r2
 8012428:	f7fe f880 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012434:	4619      	mov	r1, r3
 8012436:	4610      	mov	r0, r2
 8012438:	f7fe f878 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012444:	4619      	mov	r1, r3
 8012446:	4610      	mov	r0, r2
 8012448:	f7fe f870 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8012454:	4619      	mov	r1, r3
 8012456:	4610      	mov	r0, r2
 8012458:	f7fe f868 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 801245c:	687a      	ldr	r2, [r7, #4]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8012464:	4619      	mov	r1, r3
 8012466:	4610      	mov	r0, r2
 8012468:	f7fe f860 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8012474:	4619      	mov	r1, r3
 8012476:	4610      	mov	r0, r2
 8012478:	f7fe f858 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 801247c:	687a      	ldr	r2, [r7, #4]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8012484:	4619      	mov	r1, r3
 8012486:	4610      	mov	r0, r2
 8012488:	f7fe f850 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8012494:	4619      	mov	r1, r3
 8012496:	4610      	mov	r0, r2
 8012498:	f7fe f848 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80124a4:	4619      	mov	r1, r3
 80124a6:	4610      	mov	r0, r2
 80124a8:	f7fe f840 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80124b4:	4619      	mov	r1, r3
 80124b6:	4610      	mov	r0, r2
 80124b8:	f7fe f838 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80124c4:	4619      	mov	r1, r3
 80124c6:	4610      	mov	r0, r2
 80124c8:	f7fe f830 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80124d4:	4619      	mov	r1, r3
 80124d6:	4610      	mov	r0, r2
 80124d8:	f7fe f828 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80124e4:	4619      	mov	r1, r3
 80124e6:	4610      	mov	r0, r2
 80124e8:	f7fe f820 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80124f4:	4619      	mov	r1, r3
 80124f6:	4610      	mov	r0, r2
 80124f8:	f7fe f818 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8012504:	4619      	mov	r1, r3
 8012506:	4610      	mov	r0, r2
 8012508:	e002      	b.n	8012510 <_ZN12MainViewBaseC1Ev+0x17ac>
 801250a:	bf00      	nop
 801250c:	080262c4 	.word	0x080262c4
 8012510:	f7fe f80c 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 801251c:	4619      	mov	r1, r3
 801251e:	4610      	mov	r0, r2
 8012520:	f7fe f804 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801252c:	4619      	mov	r1, r3
 801252e:	4610      	mov	r0, r2
 8012530:	f7fd fffc 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801253c:	4619      	mov	r1, r3
 801253e:	4610      	mov	r0, r2
 8012540:	f7fd fff4 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801254c:	4619      	mov	r1, r3
 801254e:	4610      	mov	r0, r2
 8012550:	f7fd ffec 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801255c:	4619      	mov	r1, r3
 801255e:	4610      	mov	r0, r2
 8012560:	f7fd ffe4 	bl	801052c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4618      	mov	r0, r3
 8012568:	37fc      	adds	r7, #252	; 0xfc
 801256a:	46bd      	mov	sp, r7
 801256c:	bd90      	pop	{r4, r7, pc}
 801256e:	bf00      	nop

08012570 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8012570:	b480      	push	{r7}
 8012572:	b083      	sub	sp, #12
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]

}
 8012578:	bf00      	nop
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	4618      	mov	r0, r3
 8012590:	f007 fbb6 	bl	8019d00 <_ZN8touchgfx6ScreenC1Ev>
 8012594:	4a05      	ldr	r2, [pc, #20]	; (80125ac <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	601a      	str	r2, [r3, #0]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2200      	movs	r2, #0
 801259e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4618      	mov	r0, r3
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	08026894 	.word	0x08026894

080125b0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80125b0:	b590      	push	{r4, r7, lr}
 80125b2:	b089      	sub	sp, #36	; 0x24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	607a      	str	r2, [r7, #4]
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	015a      	lsls	r2, r3, #5
 80125c4:	f107 0314 	add.w	r3, r7, #20
 80125c8:	4611      	mov	r1, r2
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fe f9da 	bl	8010984 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	461c      	mov	r4, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	61fb      	str	r3, [r7, #28]
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	015a      	lsls	r2, r3, #5
 80125dc:	f107 0310 	add.w	r3, r7, #16
 80125e0:	4611      	mov	r1, r2
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fe f9ce 	bl	8010984 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80125e8:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80125ea:	461a      	mov	r2, r3
 80125ec:	4621      	mov	r1, r4
 80125ee:	68f8      	ldr	r0, [r7, #12]
 80125f0:	f004 fee0 	bl	80173b4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80125f4:	bf00      	nop
 80125f6:	3724      	adds	r7, #36	; 0x24
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd90      	pop	{r4, r7, pc}

080125fc <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80125fc:	b590      	push	{r4, r7, lr}
 80125fe:	b089      	sub	sp, #36	; 0x24
 8012600:	af00      	add	r7, sp, #0
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	60b9      	str	r1, [r7, #8]
 8012606:	607a      	str	r2, [r7, #4]
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	61bb      	str	r3, [r7, #24]
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	015a      	lsls	r2, r3, #5
 8012610:	f107 0314 	add.w	r3, r7, #20
 8012614:	4611      	mov	r1, r2
 8012616:	4618      	mov	r0, r3
 8012618:	f7fe f9b4 	bl	8010984 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	461c      	mov	r4, r3
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	61fb      	str	r3, [r7, #28]
 8012624:	69fb      	ldr	r3, [r7, #28]
 8012626:	015a      	lsls	r2, r3, #5
 8012628:	f107 0310 	add.w	r3, r7, #16
 801262c:	4611      	mov	r1, r2
 801262e:	4618      	mov	r0, r3
 8012630:	f7fe f9a8 	bl	8010984 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012634:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012636:	461a      	mov	r2, r3
 8012638:	4621      	mov	r1, r4
 801263a:	68f8      	ldr	r0, [r7, #12]
 801263c:	f004 fec5 	bl	80173ca <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8012640:	bf00      	nop
 8012642:	3724      	adds	r7, #36	; 0x24
 8012644:	46bd      	mov	sp, r7
 8012646:	bd90      	pop	{r4, r7, pc}

08012648 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6039      	str	r1, [r7, #0]
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	60fb      	str	r3, [r7, #12]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	015a      	lsls	r2, r3, #5
 801265a:	f107 0308 	add.w	r3, r7, #8
 801265e:	4611      	mov	r1, r2
 8012660:	4618      	mov	r0, r3
 8012662:	f7fe f98f 	bl	8010984 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012666:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012668:	4619      	mov	r1, r3
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7fe f9a5 	bl	80109ba <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8012670:	bf00      	nop
 8012672:	3710      	adds	r7, #16
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	4a05      	ldr	r2, [pc, #20]	; (8012698 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	4618      	mov	r0, r3
 801268a:	f7fe f913 	bl	80108b4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	08028468 	.word	0x08028468

0801269c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f7ff ffe7 	bl	8012678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80126aa:	2138      	movs	r1, #56	; 0x38
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f012 fb5a 	bl	8024d66 <_ZdlPvj>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4618      	mov	r0, r3
 80126b6:	3708      	adds	r7, #8
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	4a05      	ldr	r2, [pc, #20]	; (80126dc <_ZN8touchgfx4LineD1Ev+0x20>)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	601a      	str	r2, [r3, #0]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f004 fc4b 	bl	8016f68 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4618      	mov	r0, r3
 80126d6:	3708      	adds	r7, #8
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}
 80126dc:	08028214 	.word	0x08028214

080126e0 <_ZN8touchgfx4LineD0Ev>:
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f7ff ffe7 	bl	80126bc <_ZN8touchgfx4LineD1Ev>
 80126ee:	2174      	movs	r1, #116	; 0x74
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f012 fb38 	bl	8024d66 <_ZdlPvj>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	4a05      	ldr	r2, [pc, #20]	; (8012720 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4618      	mov	r0, r3
 8012712:	f7fe f975 	bl	8010a00 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	08027f18 	.word	0x08027f18

08012724 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff ffe7 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012732:	2118      	movs	r1, #24
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f012 fb16 	bl	8024d66 <_ZdlPvj>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012744:	b480      	push	{r7}
 8012746:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012748:	4b02      	ldr	r3, [pc, #8]	; (8012754 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801274a:	4618      	mov	r0, r3
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr
 8012754:	08026a00 	.word	0x08026a00

08012758 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012758:	b480      	push	{r7}
 801275a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801275c:	2303      	movs	r3, #3
}
 801275e:	4618      	mov	r0, r3
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012768:	b480      	push	{r7}
 801276a:	b085      	sub	sp, #20
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	4613      	mov	r3, r2
 8012774:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012776:	4a07      	ldr	r2, [pc, #28]	; (8012794 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801277c:	4a06      	ldr	r2, [pc, #24]	; (8012798 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012782:	4a06      	ldr	r2, [pc, #24]	; (801279c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012784:	88fb      	ldrh	r3, [r7, #6]
 8012786:	8013      	strh	r3, [r2, #0]
    }
 8012788:	bf00      	nop
 801278a:	3714      	adds	r7, #20
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	2000bdfc 	.word	0x2000bdfc
 8012798:	2000be04 	.word	0x2000be04
 801279c:	2000be00 	.word	0x2000be00

080127a0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80127a0:	b590      	push	{r4, r7, lr}
 80127a2:	b085      	sub	sp, #20
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	4603      	mov	r3, r0
 80127a8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80127aa:	2300      	movs	r3, #0
 80127ac:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80127ae:	88fb      	ldrh	r3, [r7, #6]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d127      	bne.n	8012804 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80127b4:	88fb      	ldrh	r3, [r7, #6]
 80127b6:	4a1e      	ldr	r2, [pc, #120]	; (8012830 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80127b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d016      	beq.n	80127ee <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80127c0:	88fb      	ldrh	r3, [r7, #6]
 80127c2:	4a1b      	ldr	r2, [pc, #108]	; (8012830 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80127c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127c8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	68ba      	ldr	r2, [r7, #8]
 80127d0:	4413      	add	r3, r2
 80127d2:	4a18      	ldr	r2, [pc, #96]	; (8012834 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80127d4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	68ba      	ldr	r2, [r7, #8]
 80127dc:	4413      	add	r3, r2
 80127de:	4a16      	ldr	r2, [pc, #88]	; (8012838 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80127e0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	68ba      	ldr	r2, [r7, #8]
 80127e8:	4413      	add	r3, r2
 80127ea:	60fb      	str	r3, [r7, #12]
 80127ec:	e00a      	b.n	8012804 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80127ee:	4b11      	ldr	r3, [pc, #68]	; (8012834 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80127f0:	4a12      	ldr	r2, [pc, #72]	; (801283c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80127f2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80127f4:	4a12      	ldr	r2, [pc, #72]	; (8012840 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80127f6:	4b10      	ldr	r3, [pc, #64]	; (8012838 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80127f8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80127fa:	88fb      	ldrh	r3, [r7, #6]
 80127fc:	4a11      	ldr	r2, [pc, #68]	; (8012844 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80127fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012802:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00d      	beq.n	8012826 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801280a:	4a0f      	ldr	r2, [pc, #60]	; (8012848 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801280c:	88fb      	ldrh	r3, [r7, #6]
 801280e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012810:	f000 f83e 	bl	8012890 <_ZN17TypedTextDatabase8getFontsEv>
 8012814:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012816:	f000 f833 	bl	8012880 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801281a:	4603      	mov	r3, r0
 801281c:	461a      	mov	r2, r3
 801281e:	4621      	mov	r1, r4
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f7ff ffa1 	bl	8012768 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012826:	bf00      	nop
 8012828:	3714      	adds	r7, #20
 801282a:	46bd      	mov	sp, r7
 801282c:	bd90      	pop	{r4, r7, pc}
 801282e:	bf00      	nop
 8012830:	20008648 	.word	0x20008648
 8012834:	20008650 	.word	0x20008650
 8012838:	20008654 	.word	0x20008654
 801283c:	08061400 	.word	0x08061400
 8012840:	08061328 	.word	0x08061328
 8012844:	08061564 	.word	0x08061564
 8012848:	2000864c 	.word	0x2000864c

0801284c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	460b      	mov	r3, r1
 8012856:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012858:	4b07      	ldr	r3, [pc, #28]	; (8012878 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	4b07      	ldr	r3, [pc, #28]	; (801287c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801285e:	6819      	ldr	r1, [r3, #0]
 8012860:	887b      	ldrh	r3, [r7, #2]
 8012862:	009b      	lsls	r3, r3, #2
 8012864:	440b      	add	r3, r1
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	005b      	lsls	r3, r3, #1
 801286a:	4413      	add	r3, r2
}
 801286c:	4618      	mov	r0, r3
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr
 8012878:	20008650 	.word	0x20008650
 801287c:	20008654 	.word	0x20008654

08012880 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012880:	b480      	push	{r7}
 8012882:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012884:	2336      	movs	r3, #54	; 0x36
}
 8012886:	4618      	mov	r0, r3
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr

08012890 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012890:	b480      	push	{r7}
 8012892:	af00      	add	r7, sp, #0
    return _fonts;
 8012894:	4b02      	ldr	r3, [pc, #8]	; (80128a0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012896:	4618      	mov	r0, r3
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr
 80128a0:	20008658 	.word	0x20008658

080128a4 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	d127      	bne.n	8012904 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128ba:	4293      	cmp	r3, r2
 80128bc:	d122      	bne.n	8012904 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80128be:	f7fc fd79 	bl	800f3b4 <_Z25getFont_Asap_Bold_18_4bppv>
 80128c2:	4602      	mov	r2, r0
};
 80128c4:	4b11      	ldr	r3, [pc, #68]	; (801290c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128c6:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 80128c8:	f7fc fe3a 	bl	800f540 <_Z25getFont_Asap_Bold_40_4bppv>
 80128cc:	4602      	mov	r2, r0
};
 80128ce:	4b0f      	ldr	r3, [pc, #60]	; (801290c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128d0:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 80128d2:	f7fc fdf3 	bl	800f4bc <_Z25getFont_Asap_Bold_30_4bppv>
 80128d6:	4602      	mov	r2, r0
};
 80128d8:	4b0c      	ldr	r3, [pc, #48]	; (801290c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128da:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 80128dc:	f7fc fd28 	bl	800f330 <_Z25getFont_Asap_Bold_12_4bppv>
 80128e0:	4602      	mov	r2, r0
};
 80128e2:	4b0a      	ldr	r3, [pc, #40]	; (801290c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128e4:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 80128e6:	f7fc fe6d 	bl	800f5c4 <_Z25getFont_Asap_Bold_60_4bppv>
 80128ea:	4602      	mov	r2, r0
};
 80128ec:	4b07      	ldr	r3, [pc, #28]	; (801290c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128ee:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 80128f0:	f7fc fda2 	bl	800f438 <_Z25getFont_Asap_Bold_21_4bppv>
 80128f4:	4602      	mov	r2, r0
};
 80128f6:	4b05      	ldr	r3, [pc, #20]	; (801290c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128f8:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 80128fa:	f7fc fcd7 	bl	800f2ac <_Z25getFont_Asap_Bold_10_4bppv>
 80128fe:	4602      	mov	r2, r0
};
 8012900:	4b02      	ldr	r3, [pc, #8]	; (801290c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012902:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8012904:	bf00      	nop
 8012906:	3708      	adds	r7, #8
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	20008658 	.word	0x20008658

08012910 <_GLOBAL__sub_I__fonts>:
 8012910:	b580      	push	{r7, lr}
 8012912:	af00      	add	r7, sp, #0
 8012914:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012918:	2001      	movs	r0, #1
 801291a:	f7ff ffc3 	bl	80128a4 <_Z41__static_initialization_and_destruction_0ii>
 801291e:	bd80      	pop	{r7, pc}

08012920 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	4a05      	ldr	r2, [pc, #20]	; (8012940 <_ZN19FrontendApplicationD1Ev+0x20>)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4618      	mov	r0, r3
 8012932:	f7fd f8d7 	bl	800fae4 <_ZN23FrontendApplicationBaseD1Ev>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	08026a44 	.word	0x08026a44

08012944 <_ZN19FrontendApplicationD0Ev>:
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f7ff ffe7 	bl	8012920 <_ZN19FrontendApplicationD1Ev>
 8012952:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f012 fa05 	bl	8024d66 <_ZdlPvj>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	4618      	mov	r0, r3
 8012960:	3708      	adds	r7, #8
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012966:	b580      	push	{r7, lr}
 8012968:	b082      	sub	sp, #8
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012974:	4618      	mov	r0, r3
 8012976:	f000 fd2b 	bl	80133d0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4618      	mov	r0, r3
 801297e:	f006 f943 	bl	8018c08 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012982:	bf00      	nop
 8012984:	3708      	adds	r7, #8
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
	...

0801298c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801298c:	b580      	push	{r7, lr}
 801298e:	b084      	sub	sp, #16
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	60b9      	str	r1, [r7, #8]
 8012996:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	68b9      	ldr	r1, [r7, #8]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fd f91a 	bl	800fbd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80129a4:	4a03      	ldr	r2, [pc, #12]	; (80129b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	601a      	str	r2, [r3, #0]
{
}
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	4618      	mov	r0, r3
 80129ae:	3710      	adds	r7, #16
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	08026a44 	.word	0x08026a44

080129b8 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
    {
    }
 80129c0:	bf00      	nop
 80129c2:	370c      	adds	r7, #12
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr

080129cc <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80129cc:	b480      	push	{r7}
 80129ce:	b083      	sub	sp, #12
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
    {
    }
 80129d4:	bf00      	nop
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
    {
 80129e8:	4a04      	ldr	r2, [pc, #16]	; (80129fc <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	601a      	str	r2, [r3, #0]
    }
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	4618      	mov	r0, r3
 80129f2:	370c      	adds	r7, #12
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr
 80129fc:	08026ad0 	.word	0x08026ad0

08012a00 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
    }
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff ffe9 	bl	80129e0 <_ZN8touchgfx9PresenterD1Ev>
 8012a0e:	2104      	movs	r1, #4
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f012 f9a8 	bl	8024d66 <_ZdlPvj>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8012a20:	b480      	push	{r7}
 8012a22:	b083      	sub	sp, #12
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
    {
 8012a28:	4a04      	ldr	r2, [pc, #16]	; (8012a3c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	601a      	str	r2, [r3, #0]
    }
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	4618      	mov	r0, r3
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr
 8012a3c:	08026ad0 	.word	0x08026ad0

08012a40 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	4a06      	ldr	r2, [pc, #24]	; (8012a64 <_ZN13ModelListenerC1Ev+0x24>)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	601a      	str	r2, [r3, #0]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2200      	movs	r2, #0
 8012a52:	605a      	str	r2, [r3, #4]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop
 8012a64:	08026ab8 	.word	0x08026ab8

08012a68 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012a68:	b480      	push	{r7}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	4a04      	ldr	r2, [pc, #16]	; (8012a84 <_ZN13ModelListenerD1Ev+0x1c>)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	370c      	adds	r7, #12
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr
 8012a84:	08026ab8 	.word	0x08026ab8

08012a88 <_ZN13ModelListenerD0Ev>:
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff ffe9 	bl	8012a68 <_ZN13ModelListenerD1Ev>
 8012a96:	2108      	movs	r1, #8
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f012 f964 	bl	8024d66 <_ZdlPvj>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
 8012ab2:	bf00      	nop
 8012ab4:	370c      	adds	r7, #12
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr

08012abe <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8012abe:	b480      	push	{r7}
 8012ac0:	b083      	sub	sp, #12
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
 8012ac6:	6039      	str	r1, [r7, #0]
 8012ac8:	bf00      	nop
 8012aca:	370c      	adds	r7, #12
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr

08012ad4 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	4a09      	ldr	r2, [pc, #36]	; (8012b04 <_ZN13MainPresenterD1Ev+0x30>)
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	601a      	str	r2, [r3, #0]
 8012ae2:	4a09      	ldr	r2, [pc, #36]	; (8012b08 <_ZN13MainPresenterD1Ev+0x34>)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	605a      	str	r2, [r3, #4]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	3304      	adds	r3, #4
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7ff ffbb 	bl	8012a68 <_ZN13ModelListenerD1Ev>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7ff ff73 	bl	80129e0 <_ZN8touchgfx9PresenterD1Ev>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	08026a80 	.word	0x08026a80
 8012b08:	08026aa0 	.word	0x08026aa0

08012b0c <_ZThn4_N13MainPresenterD1Ev>:
 8012b0c:	f1a0 0004 	sub.w	r0, r0, #4
 8012b10:	e7e0      	b.n	8012ad4 <_ZN13MainPresenterD1Ev>
 8012b12:	bf00      	nop

08012b14 <_ZN13MainPresenterD0Ev>:
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f7ff ffd9 	bl	8012ad4 <_ZN13MainPresenterD1Ev>
 8012b22:	2110      	movs	r1, #16
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f012 f91e 	bl	8024d66 <_ZdlPvj>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3708      	adds	r7, #8
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <_ZThn4_N13MainPresenterD0Ev>:
 8012b34:	f1a0 0004 	sub.w	r0, r0, #4
 8012b38:	e7ec      	b.n	8012b14 <_ZN13MainPresenterD0Ev>
	...

08012b3c <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
    : view(v)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7ff ff69 	bl	8012a20 <_ZN8touchgfx9PresenterC1Ev>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	3304      	adds	r3, #4
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ff ff74 	bl	8012a40 <_ZN13ModelListenerC1Ev>
 8012b58:	4a06      	ldr	r2, [pc, #24]	; (8012b74 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	4a06      	ldr	r2, [pc, #24]	; (8012b78 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	605a      	str	r2, [r3, #4]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	683a      	ldr	r2, [r7, #0]
 8012b68:	60da      	str	r2, [r3, #12]
{
}
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3708      	adds	r7, #8
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	08026a80 	.word	0x08026a80
 8012b78:	08026aa0 	.word	0x08026aa0

08012b7c <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
}
 8012b84:	bf00      	nop
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
}
 8012b98:	bf00      	nop
 8012b9a:	370c      	adds	r7, #12
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	68db      	ldr	r3, [r3, #12]
 8012bb2:	6839      	ldr	r1, [r7, #0]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f000 f9f7 	bl	8012fa8 <_ZN8MainView9updateValEPh>
}
 8012bba:	bf00      	nop
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}

08012bc2 <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8012bc2:	f1a0 0004 	sub.w	r0, r0, #4
 8012bc6:	f7ff bfed 	b.w	8012ba4 <_ZN13MainPresenter11setNewValueEPh>

08012bca <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8012bca:	b580      	push	{r7, lr}
 8012bcc:	b082      	sub	sp, #8
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
 8012bd2:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	6839      	ldr	r1, [r7, #0]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f000 f908 	bl	8012df0 <_ZN8MainView14updateSettingsEPh>
}
 8012be0:	bf00      	nop
 8012be2:	3708      	adds	r7, #8
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012be8:	f1a0 0004 	sub.w	r0, r0, #4
 8012bec:	f7ff bfed 	b.w	8012bca <_ZN13MainPresenter21updateDisplaySettingsEPh>

08012bf0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012bf0:	b480      	push	{r7}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	601a      	str	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	4618      	mov	r0, r3
 8012c02:	370c      	adds	r7, #12
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr

08012c0c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b084      	sub	sp, #16
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	460b      	mov	r3, r1
 8012c16:	607a      	str	r2, [r7, #4]
 8012c18:	ed87 0a00 	vstr	s0, [r7]
 8012c1c:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012c1e:	463b      	mov	r3, r7
 8012c20:	8979      	ldrh	r1, [r7, #10]
 8012c22:	687a      	ldr	r2, [r7, #4]
 8012c24:	68f8      	ldr	r0, [r7, #12]
 8012c26:	f008 fa8b 	bl	801b140 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012c2a:	4603      	mov	r3, r0
    }
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012c42:	4618      	mov	r0, r3
 8012c44:	370c      	adds	r7, #12
 8012c46:	46bd      	mov	sp, r7
 8012c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4c:	4770      	bx	lr

08012c4e <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012c4e:	b480      	push	{r7}
 8012c50:	b083      	sub	sp, #12
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
        return rect.height;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	4a05      	ldr	r2, [pc, #20]	; (8012c88 <_ZN8MainViewD1Ev+0x20>)
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fd ff27 	bl	8010acc <_ZN12MainViewBaseD1Ev>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	4618      	mov	r0, r3
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	08026ae8 	.word	0x08026ae8

08012c8c <_ZN8MainViewD0Ev>:
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7ff ffe7 	bl	8012c68 <_ZN8MainViewD1Ev>
 8012c9a:	f242 71bc 	movw	r1, #10172	; 0x27bc
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f012 f861 	bl	8024d66 <_ZdlPvj>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3708      	adds	r7, #8
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
	...

08012cb0 <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 8012cb0:	b590      	push	{r4, r7, lr}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7fe f852 	bl	8010d64 <_ZN12MainViewBaseC1Ev>
 8012cc0:	4a15      	ldr	r2, [pc, #84]	; (8012d18 <_ZN8MainViewC1Ev+0x68>)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012cc6:	4b15      	ldr	r3, [pc, #84]	; (8012d1c <_ZN8MainViewC1Ev+0x6c>)
 8012cc8:	881b      	ldrh	r3, [r3, #0]
 8012cca:	461c      	mov	r4, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7ff ffae 	bl	8012c34 <_ZNK8touchgfx8Drawable8getWidthEv>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	429c      	cmp	r4, r3
 8012cdc:	dc0b      	bgt.n	8012cf6 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012cde:	4b10      	ldr	r3, [pc, #64]	; (8012d20 <_ZN8MainViewC1Ev+0x70>)
 8012ce0:	881b      	ldrh	r3, [r3, #0]
 8012ce2:	461c      	mov	r4, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ff ffaf 	bl	8012c4e <_ZNK8touchgfx8Drawable9getHeightEv>
 8012cf0:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012cf2:	429c      	cmp	r4, r3
 8012cf4:	dd01      	ble.n	8012cfa <_ZN8MainViewC1Ev+0x4a>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e000      	b.n	8012cfc <_ZN8MainViewC1Ev+0x4c>
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d005      	beq.n	8012d0c <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	3340      	adds	r3, #64	; 0x40
 8012d04:	2101      	movs	r1, #1
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fd fb1e 	bl	8010348 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	370c      	adds	r7, #12
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd90      	pop	{r4, r7, pc}
 8012d16:	bf00      	nop
 8012d18:	08026ae8 	.word	0x08026ae8
 8012d1c:	2000bd60 	.word	0x2000bd60
 8012d20:	2000bd62 	.word	0x2000bd62

08012d24 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
}
 8012d2c:	bf00      	nop
 8012d2e:	370c      	adds	r7, #12
 8012d30:	46bd      	mov	sp, r7
 8012d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d36:	4770      	bx	lr

08012d38 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
}
 8012d40:	bf00      	nop
 8012d42:	370c      	adds	r7, #12
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr

08012d4c <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012d52:	2200      	movs	r2, #0
 8012d54:	2100      	movs	r1, #0
 8012d56:	2000      	movs	r0, #0
 8012d58:	f7fd ffda 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	607b      	str	r3, [r7, #4]
}
 8012d60:	bf00      	nop
 8012d62:	4618      	mov	r0, r3
 8012d64:	3708      	adds	r7, #8
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0

	color_index ++;
 8012d72:	4b1e      	ldr	r3, [pc, #120]	; (8012dec <_ZL20getColorFromRevLimitv+0x80>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	3301      	adds	r3, #1
 8012d78:	4a1c      	ldr	r2, [pc, #112]	; (8012dec <_ZL20getColorFromRevLimitv+0x80>)
 8012d7a:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8012d7c:	4b1b      	ldr	r3, [pc, #108]	; (8012dec <_ZL20getColorFromRevLimitv+0x80>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2b02      	cmp	r3, #2
 8012d82:	dd02      	ble.n	8012d8a <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8012d84:	4b19      	ldr	r3, [pc, #100]	; (8012dec <_ZL20getColorFromRevLimitv+0x80>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	20ff      	movs	r0, #255	; 0xff
 8012d90:	f7fd ffbe 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d94:	4603      	mov	r3, r0
 8012d96:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012d98:	2200      	movs	r2, #0
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	f7fd ffb7 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012da2:	4603      	mov	r3, r0
 8012da4:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8012da6:	22ff      	movs	r2, #255	; 0xff
 8012da8:	21ff      	movs	r1, #255	; 0xff
 8012daa:	20ff      	movs	r0, #255	; 0xff
 8012dac:	f7fd ffb0 	bl	8010d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012db0:	4603      	mov	r3, r0
 8012db2:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8012db4:	463b      	mov	r3, r7
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7ff ff1a 	bl	8012bf0 <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8012dbc:	4b0b      	ldr	r3, [pc, #44]	; (8012dec <_ZL20getColorFromRevLimitv+0x80>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d101      	bne.n	8012dc8 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8012dc8:	4b08      	ldr	r3, [pc, #32]	; (8012dec <_ZL20getColorFromRevLimitv+0x80>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	d101      	bne.n	8012dd4 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8012dd4:	4b05      	ldr	r3, [pc, #20]	; (8012dec <_ZL20getColorFromRevLimitv+0x80>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d101      	bne.n	8012de0 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8012de0:	683b      	ldr	r3, [r7, #0]
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3710      	adds	r7, #16
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	20008674 	.word	0x20008674

08012df0 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af02      	add	r7, sp, #8
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4a66      	ldr	r2, [pc, #408]	; (8012f9c <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8012e04:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	6a1b      	ldr	r3, [r3, #32]
 8012e10:	ee07 3a90 	vmov	s15, r3
 8012e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e18:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8012fa0 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8012e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e24:	ee17 3a90 	vmov	r3, s15
 8012e28:	b21a      	sxth	r2, r3
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	9300      	str	r3, [sp, #0]
 8012e2e:	2300      	movs	r3, #0
 8012e30:	2100      	movs	r1, #0
 8012e32:	f002 fcff 	bl	8015834 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f006 fbf7 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f603 300c 	addw	r0, r3, #2828	; 0xb0c
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	685b      	ldr	r3, [r3, #4]
 8012e4c:	4a55      	ldr	r2, [pc, #340]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012e4e:	2102      	movs	r1, #2
 8012e50:	f008 f81c 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f004 fc42 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012e66:	4618      	mov	r0, r3
 8012e68:	f006 fbe2 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f503 6031 	add.w	r0, r3, #2832	; 0xb10
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	689b      	ldr	r3, [r3, #8]
 8012e76:	4a4b      	ldr	r2, [pc, #300]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012e78:	2102      	movs	r1, #2
 8012e7a:	f008 f807 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012e84:	4618      	mov	r0, r3
 8012e86:	f004 fc2d 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012e90:	4618      	mov	r0, r3
 8012e92:	f006 fbcd 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f603 3014 	addw	r0, r3, #2836	; 0xb14
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	68db      	ldr	r3, [r3, #12]
 8012ea0:	4a40      	ldr	r2, [pc, #256]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012ea2:	2102      	movs	r1, #2
 8012ea4:	f007 fff2 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f004 fc18 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f006 fbb8 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f603 3018 	addw	r0, r3, #2840	; 0xb18
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	691b      	ldr	r3, [r3, #16]
 8012eca:	4a36      	ldr	r2, [pc, #216]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012ecc:	2102      	movs	r1, #2
 8012ece:	f007 ffdd 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f004 fc03 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f006 fba3 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f603 301c 	addw	r0, r3, #2844	; 0xb1c
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	695b      	ldr	r3, [r3, #20]
 8012ef4:	4a2b      	ldr	r2, [pc, #172]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012ef6:	2102      	movs	r1, #2
 8012ef8:	f007 ffc8 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012f02:	4618      	mov	r0, r3
 8012f04:	f004 fbee 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f006 fb8e 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f503 6032 	add.w	r0, r3, #2848	; 0xb20
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	699b      	ldr	r3, [r3, #24]
 8012f1e:	4a21      	ldr	r2, [pc, #132]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012f20:	2102      	movs	r1, #2
 8012f22:	f007 ffb3 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f004 fbd9 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f006 fb79 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f603 3024 	addw	r0, r3, #2852	; 0xb24
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	69db      	ldr	r3, [r3, #28]
 8012f48:	4a16      	ldr	r2, [pc, #88]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012f4a:	2102      	movs	r1, #2
 8012f4c:	f007 ff9e 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012f56:	4618      	mov	r0, r3
 8012f58:	f004 fbc4 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012f62:	4618      	mov	r0, r3
 8012f64:	f006 fb64 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f603 3028 	addw	r0, r3, #2856	; 0xb28
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	6a1b      	ldr	r3, [r3, #32]
 8012f72:	4a0c      	ldr	r2, [pc, #48]	; (8012fa4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012f74:	2102      	movs	r1, #2
 8012f76:	f007 ff89 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012f80:	4618      	mov	r0, r3
 8012f82:	f004 fbaf 	bl	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f006 fb4f 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8012f92:	bf00      	nop
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	20000038 	.word	0x20000038
 8012fa0:	447a0000 	.word	0x447a0000
 8012fa4:	08026428 	.word	0x08026428

08012fa8 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8012fa8:	b590      	push	{r4, r7, lr}
 8012faa:	b085      	sub	sp, #20
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	4b0e      	ldr	r3, [pc, #56]	; (8012ff4 <_ZN8MainView9updateValEPh+0x4c>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	bfac      	ite	ge
 8012fc2:	2301      	movge	r3, #1
 8012fc4:	2300      	movlt	r3, #0
 8012fc6:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8012fc8:	7afb      	ldrb	r3, [r7, #11]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d016      	beq.n	8012ffc <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 8012fce:	4b0a      	ldr	r3, [pc, #40]	; (8012ff8 <_ZN8MainView9updateValEPh+0x50>)
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012fda:	f7ff fec7 	bl	8012d6c <_ZL20getColorFromRevLimitv>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	f7fd fb4c 	bl	8010680 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	3340      	adds	r3, #64	; 0x40
 8012fec:	4618      	mov	r0, r3
 8012fee:	f006 fb1f 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012ff2:	e01c      	b.n	801302e <_ZN8MainView9updateValEPh+0x86>
 8012ff4:	20000038 	.word	0x20000038
 8012ff8:	20008698 	.word	0x20008698
	}
	else if(!background_is_black){
 8012ffc:	4bac      	ldr	r3, [pc, #688]	; (80132b0 <_ZN8MainView9updateValEPh+0x308>)
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	f083 0301 	eor.w	r3, r3, #1
 8013004:	b2db      	uxtb	r3, r3
 8013006:	2b00      	cmp	r3, #0
 8013008:	d011      	beq.n	801302e <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013010:	f7ff fe9c 	bl	8012d4c <_ZL13getBlackColorv>
 8013014:	4603      	mov	r3, r0
 8013016:	4619      	mov	r1, r3
 8013018:	4620      	mov	r0, r4
 801301a:	f7fd fb31 	bl	8010680 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	3340      	adds	r3, #64	; 0x40
 8013022:	4618      	mov	r0, r3
 8013024:	f006 fb04 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8013028:	4ba1      	ldr	r3, [pc, #644]	; (80132b0 <_ZN8MainView9updateValEPh+0x308>)
 801302a:	2201      	movs	r2, #1
 801302c:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	4ba0      	ldr	r3, [pc, #640]	; (80132b4 <_ZN8MainView9updateValEPh+0x30c>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	429a      	cmp	r2, r3
 8013038:	d021      	beq.n	801307e <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4a9d      	ldr	r2, [pc, #628]	; (80132b4 <_ZN8MainView9updateValEPh+0x30c>)
 8013040:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f002 fada 	bl	8015608 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801305a:	4618      	mov	r0, r3
 801305c:	f006 fae8 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f603 305e 	addw	r0, r3, #2910	; 0xb5e
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4a93      	ldr	r2, [pc, #588]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 801306c:	2105      	movs	r1, #5
 801306e:	f007 ff0d 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013078:	4618      	mov	r0, r3
 801307a:	f006 fad9 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->map != prev_map) {
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	689a      	ldr	r2, [r3, #8]
 8013082:	4b8e      	ldr	r3, [pc, #568]	; (80132bc <_ZN8MainView9updateValEPh+0x314>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	429a      	cmp	r2, r3
 8013088:	d012      	beq.n	80130b0 <_ZN8MainView9updateValEPh+0x108>
		prev_map = values->map;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	689b      	ldr	r3, [r3, #8]
 801308e:	4a8b      	ldr	r2, [pc, #556]	; (80132bc <_ZN8MainView9updateValEPh+0x314>)
 8013090:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f603 3072 	addw	r0, r3, #2930	; 0xb72
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	689b      	ldr	r3, [r3, #8]
 801309c:	4a86      	ldr	r2, [pc, #536]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 801309e:	2105      	movs	r1, #5
 80130a0:	f007 fef4 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80130aa:	4618      	mov	r0, r3
 80130ac:	f006 fac0 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	685a      	ldr	r2, [r3, #4]
 80130b4:	4b82      	ldr	r3, [pc, #520]	; (80132c0 <_ZN8MainView9updateValEPh+0x318>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d012      	beq.n	80130e2 <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	4a7f      	ldr	r2, [pc, #508]	; (80132c0 <_ZN8MainView9updateValEPh+0x318>)
 80130c2:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f603 3068 	addw	r0, r3, #2920	; 0xb68
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	4a7a      	ldr	r2, [pc, #488]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 80130d0:	2105      	movs	r1, #5
 80130d2:	f007 fedb 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80130dc:	4618      	mov	r0, r3
 80130de:	f006 faa7 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80130e8:	4b76      	ldr	r3, [pc, #472]	; (80132c4 <_ZN8MainView9updateValEPh+0x31c>)
 80130ea:	edd3 7a00 	vldr	s15, [r3]
 80130ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80130f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f6:	d015      	beq.n	8013124 <_ZN8MainView9updateValEPh+0x17c>
		prev_lambda = values->lambda;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	4a71      	ldr	r2, [pc, #452]	; (80132c4 <_ZN8MainView9updateValEPh+0x31c>)
 80130fe:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	edd3 7a03 	vldr	s15, [r3, #12]
 801310c:	eeb0 0a67 	vmov.f32	s0, s15
 8013110:	4a6d      	ldr	r2, [pc, #436]	; (80132c8 <_ZN8MainView9updateValEPh+0x320>)
 8013112:	2105      	movs	r1, #5
 8013114:	f7ff fd7a 	bl	8012c0c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801311e:	4618      	mov	r0, r3
 8013120:	f006 fa86 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda_trgt != prev_lambda_targ) {
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	ed93 7a04 	vldr	s14, [r3, #16]
 801312a:	4b68      	ldr	r3, [pc, #416]	; (80132cc <_ZN8MainView9updateValEPh+0x324>)
 801312c:	edd3 7a00 	vldr	s15, [r3]
 8013130:	eeb4 7a67 	vcmp.f32	s14, s15
 8013134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013138:	d015      	beq.n	8013166 <_ZN8MainView9updateValEPh+0x1be>
		prev_lambda_targ = values->lambda_trgt;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	4a63      	ldr	r2, [pc, #396]	; (80132cc <_ZN8MainView9updateValEPh+0x324>)
 8013140:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f603 3002 	addw	r0, r3, #2818	; 0xb02
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	edd3 7a04 	vldr	s15, [r3, #16]
 801314e:	eeb0 0a67 	vmov.f32	s0, s15
 8013152:	4a5d      	ldr	r2, [pc, #372]	; (80132c8 <_ZN8MainView9updateValEPh+0x320>)
 8013154:	2105      	movs	r1, #5
 8013156:	f7ff fd59 	bl	8012c0c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TrgtValue.invalidate();
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013160:	4618      	mov	r0, r3
 8013162:	f006 fa65 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	ed93 7a06 	vldr	s14, [r3, #24]
 801316c:	4b58      	ldr	r3, [pc, #352]	; (80132d0 <_ZN8MainView9updateValEPh+0x328>)
 801316e:	edd3 7a00 	vldr	s15, [r3]
 8013172:	eeb4 7a67 	vcmp.f32	s14, s15
 8013176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801317a:	d015      	beq.n	80131a8 <_ZN8MainView9updateValEPh+0x200>
		prev_oil_press = values->oil_press;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	699b      	ldr	r3, [r3, #24]
 8013180:	4a53      	ldr	r2, [pc, #332]	; (80132d0 <_ZN8MainView9updateValEPh+0x328>)
 8013182:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f603 304a 	addw	r0, r3, #2890	; 0xb4a
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	edd3 7a06 	vldr	s15, [r3, #24]
 8013190:	eeb0 0a67 	vmov.f32	s0, s15
 8013194:	4a4f      	ldr	r2, [pc, #316]	; (80132d4 <_ZN8MainView9updateValEPh+0x32c>)
 8013196:	2105      	movs	r1, #5
 8013198:	f7ff fd38 	bl	8012c0c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80131a2:	4618      	mov	r0, r3
 80131a4:	f006 fa44 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	69da      	ldr	r2, [r3, #28]
 80131ac:	4b4a      	ldr	r3, [pc, #296]	; (80132d8 <_ZN8MainView9updateValEPh+0x330>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d012      	beq.n	80131da <_ZN8MainView9updateValEPh+0x232>
		prev_fuel_press = values->fuel_press;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	69db      	ldr	r3, [r3, #28]
 80131b8:	4a47      	ldr	r2, [pc, #284]	; (80132d8 <_ZN8MainView9updateValEPh+0x330>)
 80131ba:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f603 3086 	addw	r0, r3, #2950	; 0xb86
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	69db      	ldr	r3, [r3, #28]
 80131c6:	4a3c      	ldr	r2, [pc, #240]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 80131c8:	2105      	movs	r1, #5
 80131ca:	f007 fe5f 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80131d4:	4618      	mov	r0, r3
 80131d6:	f006 fa2b 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	695a      	ldr	r2, [r3, #20]
 80131de:	4b3f      	ldr	r3, [pc, #252]	; (80132dc <_ZN8MainView9updateValEPh+0x334>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d012      	beq.n	801320c <_ZN8MainView9updateValEPh+0x264>
		prev_oil_tmp = values->oil_tmp;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	695b      	ldr	r3, [r3, #20]
 80131ea:	4a3c      	ldr	r2, [pc, #240]	; (80132dc <_ZN8MainView9updateValEPh+0x334>)
 80131ec:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f503 6034 	add.w	r0, r3, #2880	; 0xb40
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	695b      	ldr	r3, [r3, #20]
 80131f8:	4a2f      	ldr	r2, [pc, #188]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 80131fa:	2105      	movs	r1, #5
 80131fc:	f007 fe46 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8013206:	4618      	mov	r0, r3
 8013208:	f006 fa12 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6a1a      	ldr	r2, [r3, #32]
 8013210:	4b33      	ldr	r3, [pc, #204]	; (80132e0 <_ZN8MainView9updateValEPh+0x338>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	d012      	beq.n	801323e <_ZN8MainView9updateValEPh+0x296>
		prev_iat = values->iat;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6a1b      	ldr	r3, [r3, #32]
 801321c:	4a30      	ldr	r2, [pc, #192]	; (80132e0 <_ZN8MainView9updateValEPh+0x338>)
 801321e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f603 302c 	addw	r0, r3, #2860	; 0xb2c
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	6a1b      	ldr	r3, [r3, #32]
 801322a:	4a23      	ldr	r2, [pc, #140]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 801322c:	2105      	movs	r1, #5
 801322e:	f007 fe2d 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013238:	4618      	mov	r0, r3
 801323a:	f006 f9f9 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt != prev_egt) {
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013242:	4b28      	ldr	r3, [pc, #160]	; (80132e4 <_ZN8MainView9updateValEPh+0x33c>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	429a      	cmp	r2, r3
 8013248:	d012      	beq.n	8013270 <_ZN8MainView9updateValEPh+0x2c8>
		prev_egt = values->egt;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801324e:	4a25      	ldr	r2, [pc, #148]	; (80132e4 <_ZN8MainView9updateValEPh+0x33c>)
 8013250:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f603 3036 	addw	r0, r3, #2870	; 0xb36
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801325c:	4a16      	ldr	r2, [pc, #88]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 801325e:	2105      	movs	r1, #5
 8013260:	f007 fe14 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801326a:	4618      	mov	r0, r3
 801326c:	f006 f9e0 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt_2 != prev_egt_2) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013274:	4b1c      	ldr	r3, [pc, #112]	; (80132e8 <_ZN8MainView9updateValEPh+0x340>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	429a      	cmp	r2, r3
 801327a:	d012      	beq.n	80132a2 <_ZN8MainView9updateValEPh+0x2fa>
		prev_egt_2 = values->egt_2;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013280:	4a19      	ldr	r2, [pc, #100]	; (80132e8 <_ZN8MainView9updateValEPh+0x340>)
 8013282:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d",values->egt_2);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f603 307c 	addw	r0, r3, #2940	; 0xb7c
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801328e:	4a0a      	ldr	r2, [pc, #40]	; (80132b8 <_ZN8MainView9updateValEPh+0x310>)
 8013290:	2105      	movs	r1, #5
 8013292:	f007 fdfb 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 801329c:	4618      	mov	r0, r3
 801329e:	f006 f9c7 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132a6:	4b11      	ldr	r3, [pc, #68]	; (80132ec <_ZN8MainView9updateValEPh+0x344>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d042      	beq.n	8013334 <_ZN8MainView9updateValEPh+0x38c>
 80132ae:	e01f      	b.n	80132f0 <_ZN8MainView9updateValEPh+0x348>
 80132b0:	20008698 	.word	0x20008698
 80132b4:	2000003c 	.word	0x2000003c
 80132b8:	08026428 	.word	0x08026428
 80132bc:	20000040 	.word	0x20000040
 80132c0:	20000044 	.word	0x20000044
 80132c4:	20000048 	.word	0x20000048
 80132c8:	0802642c 	.word	0x0802642c
 80132cc:	2000004c 	.word	0x2000004c
 80132d0:	2000867c 	.word	0x2000867c
 80132d4:	08026434 	.word	0x08026434
 80132d8:	20008680 	.word	0x20008680
 80132dc:	20008678 	.word	0x20008678
 80132e0:	20008684 	.word	0x20008684
 80132e4:	20008688 	.word	0x20008688
 80132e8:	2000868c 	.word	0x2000868c
 80132ec:	20008690 	.word	0x20008690
		prev_tps = values->tps;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132f4:	4a22      	ldr	r2, [pc, #136]	; (8013380 <_ZN8MainView9updateValEPh+0x3d8>)
 80132f6:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013302:	4619      	mov	r1, r3
 8013304:	4610      	mov	r0, r2
 8013306:	f002 f82f 	bl	8015368 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013310:	4618      	mov	r0, r3
 8013312:	f006 f98d 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013320:	4a18      	ldr	r2, [pc, #96]	; (8013384 <_ZN8MainView9updateValEPh+0x3dc>)
 8013322:	2105      	movs	r1, #5
 8013324:	f007 fdb2 	bl	801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801332e:	4618      	mov	r0, r3
 8013330:	f006 f97e 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801333a:	4b13      	ldr	r3, [pc, #76]	; (8013388 <_ZN8MainView9updateValEPh+0x3e0>)
 801333c:	edd3 7a00 	vldr	s15, [r3]
 8013340:	eeb4 7a67 	vcmp.f32	s14, s15
 8013344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013348:	d015      	beq.n	8013376 <_ZN8MainView9updateValEPh+0x3ce>
		prev_batt_v = values->batt_v;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801334e:	4a0e      	ldr	r2, [pc, #56]	; (8013388 <_ZN8MainView9updateValEPh+0x3e0>)
 8013350:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f603 3054 	addw	r0, r3, #2900	; 0xb54
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801335e:	eeb0 0a67 	vmov.f32	s0, s15
 8013362:	4a0a      	ldr	r2, [pc, #40]	; (801338c <_ZN8MainView9updateValEPh+0x3e4>)
 8013364:	2105      	movs	r1, #5
 8013366:	f7ff fc51 	bl	8012c0c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8013370:	4618      	mov	r0, r3
 8013372:	f006 f95d 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 8013376:	bf00      	nop
 8013378:	3714      	adds	r7, #20
 801337a:	46bd      	mov	sp, r7
 801337c:	bd90      	pop	{r4, r7, pc}
 801337e:	bf00      	nop
 8013380:	20008690 	.word	0x20008690
 8013384:	08026428 	.word	0x08026428
 8013388:	20008694 	.word	0x20008694
 801338c:	0802642c 	.word	0x0802642c

08013390 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2200      	movs	r2, #0
 801339c:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 801339e:	2200      	movs	r2, #0
 80133a0:	2134      	movs	r1, #52	; 0x34
 80133a2:	2001      	movs	r0, #1
 80133a4:	f7f9 fa61 	bl	800c86a <xQueueGenericCreate>
 80133a8:	4602      	mov	r2, r0
 80133aa:	4b07      	ldr	r3, [pc, #28]	; (80133c8 <_ZN5ModelC1Ev+0x38>)
 80133ac:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 80133ae:	2200      	movs	r2, #0
 80133b0:	2128      	movs	r1, #40	; 0x28
 80133b2:	2001      	movs	r0, #1
 80133b4:	f7f9 fa59 	bl	800c86a <xQueueGenericCreate>
 80133b8:	4602      	mov	r2, r0
 80133ba:	4b04      	ldr	r3, [pc, #16]	; (80133cc <_ZN5ModelC1Ev+0x3c>)
 80133bc:	601a      	str	r2, [r3, #0]
}
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	200086f8 	.word	0x200086f8
 80133cc:	200086fc 	.word	0x200086fc

080133d0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 80133d8:	4b1a      	ldr	r3, [pc, #104]	; (8013444 <_ZN5Model4tickEv+0x74>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	2200      	movs	r2, #0
 80133de:	491a      	ldr	r1, [pc, #104]	; (8013448 <_ZN5Model4tickEv+0x78>)
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7f9 fcd3 	bl	800cd8c <xQueueReceive>
 80133e6:	4603      	mov	r3, r0
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	bf0c      	ite	eq
 80133ec:	2301      	moveq	r3, #1
 80133ee:	2300      	movne	r3, #0
 80133f0:	b2db      	uxtb	r3, r3
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d009      	beq.n	801340a <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	3308      	adds	r3, #8
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4910      	ldr	r1, [pc, #64]	; (8013448 <_ZN5Model4tickEv+0x78>)
 8013406:	4610      	mov	r0, r2
 8013408:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 801340a:	4b10      	ldr	r3, [pc, #64]	; (801344c <_ZN5Model4tickEv+0x7c>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	2200      	movs	r2, #0
 8013410:	490f      	ldr	r1, [pc, #60]	; (8013450 <_ZN5Model4tickEv+0x80>)
 8013412:	4618      	mov	r0, r3
 8013414:	f7f9 fcba 	bl	800cd8c <xQueueReceive>
 8013418:	4603      	mov	r3, r0
 801341a:	2b01      	cmp	r3, #1
 801341c:	bf0c      	ite	eq
 801341e:	2301      	moveq	r3, #1
 8013420:	2300      	movne	r3, #0
 8013422:	b2db      	uxtb	r3, r3
 8013424:	2b00      	cmp	r3, #0
 8013426:	d009      	beq.n	801343c <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	330c      	adds	r3, #12
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4906      	ldr	r1, [pc, #24]	; (8013450 <_ZN5Model4tickEv+0x80>)
 8013438:	4610      	mov	r0, r2
 801343a:	4798      	blx	r3
	}
}
 801343c:	bf00      	nop
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	200086f8 	.word	0x200086f8
 8013448:	2000869c 	.word	0x2000869c
 801344c:	200086fc 	.word	0x200086fc
 8013450:	200086d0 	.word	0x200086d0

08013454 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8013454:	b480      	push	{r7}
 8013456:	b083      	sub	sp, #12
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
    {
 801345c:	4a04      	ldr	r2, [pc, #16]	; (8013470 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	601a      	str	r2, [r3, #0]
    }
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	4618      	mov	r0, r3
 8013466:	370c      	adds	r7, #12
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr
 8013470:	08026b34 	.word	0x08026b34

08013474 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
    }
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7ff ffe9 	bl	8013454 <_ZN8touchgfx15TouchControllerD1Ev>
 8013482:	2104      	movs	r1, #4
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f011 fc6e 	bl	8024d66 <_ZdlPvj>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}

08013494 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013494:	b480      	push	{r7}
 8013496:	b083      	sub	sp, #12
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 801349c:	bf00      	nop
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr

080134a8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80134b4:	2300      	movs	r3, #0
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3714      	adds	r7, #20
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr
	...

080134c4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	4a05      	ldr	r2, [pc, #20]	; (80134e4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	601a      	str	r2, [r3, #0]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7ff ffbd 	bl	8013454 <_ZN8touchgfx15TouchControllerD1Ev>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	4618      	mov	r0, r3
 80134de:	3708      	adds	r7, #8
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	08026b1c 	.word	0x08026b1c

080134e8 <_ZN20STM32TouchControllerD0Ev>:
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7ff ffe7 	bl	80134c4 <_ZN20STM32TouchControllerD1Ev>
 80134f6:	2104      	movs	r1, #4
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f011 fc34 	bl	8024d66 <_ZdlPvj>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	4618      	mov	r0, r3
 8013502:	3708      	adds	r7, #8
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	4603      	mov	r3, r0
 8013510:	71fb      	strb	r3, [r7, #7]

}
 8013512:	bf00      	nop
 8013514:	370c      	adds	r7, #12
 8013516:	46bd      	mov	sp, r7
 8013518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351c:	4770      	bx	lr

0801351e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801351e:	b480      	push	{r7}
 8013520:	b083      	sub	sp, #12
 8013522:	af00      	add	r7, sp, #0
 8013524:	4603      	mov	r3, r0
 8013526:	71fb      	strb	r3, [r7, #7]

}
 8013528:	bf00      	nop
 801352a:	370c      	adds	r7, #12
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr

08013534 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	4603      	mov	r3, r0
 801353c:	71fb      	strb	r3, [r7, #7]

}
 801353e:	bf00      	nop
 8013540:	370c      	adds	r7, #12
 8013542:	46bd      	mov	sp, r7
 8013544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013548:	4770      	bx	lr
	...

0801354c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
    {
 8013554:	4a04      	ldr	r2, [pc, #16]	; (8013568 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	601a      	str	r2, [r3, #0]
    }
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	370c      	adds	r7, #12
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr
 8013568:	080278ec 	.word	0x080278ec

0801356c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
    }
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f7ff ffe9 	bl	801354c <_ZN8touchgfx3HALD1Ev>
 801357a:	2178      	movs	r1, #120	; 0x78
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f011 fbf2 	bl	8024d66 <_ZdlPvj>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	4618      	mov	r0, r3
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	460b      	mov	r3, r1
 8013596:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	78fa      	ldrb	r2, [r7, #3]
 801359c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2201      	movs	r2, #1
 80135a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80135a8:	bf00      	nop
 80135aa:	370c      	adds	r7, #12
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr

080135b4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	685a      	ldr	r2, [r3, #4]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	4610      	mov	r0, r2
 80135ca:	4798      	blx	r3
 80135cc:	4603      	mov	r3, r0
    }
 80135ce:	4618      	mov	r0, r3
 80135d0:	3708      	adds	r7, #8
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}

080135d6 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b082      	sub	sp, #8
 80135da:	af00      	add	r7, sp, #0
 80135dc:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f003 f91c 	bl	801681c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	3390      	adds	r3, #144	; 0x90
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	4798      	blx	r3
    }
 80135f0:	bf00      	nop
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013602:	2300      	movs	r3, #0
    }
 8013604:	4618      	mov	r0, r3
 8013606:	370c      	adds	r7, #12
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8013610:	b590      	push	{r4, r7, lr}
 8013612:	b08b      	sub	sp, #44	; 0x2c
 8013614:	af00      	add	r7, sp, #0
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	4611      	mov	r1, r2
 801361c:	461a      	mov	r2, r3
 801361e:	460b      	mov	r3, r1
 8013620:	80fb      	strh	r3, [r7, #6]
 8013622:	4613      	mov	r3, r2
 8013624:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8013626:	f7fc f90f 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 801362a:	4602      	mov	r2, r0
 801362c:	6813      	ldr	r3, [r2, #0]
 801362e:	3328      	adds	r3, #40	; 0x28
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	4610      	mov	r0, r2
 8013634:	4798      	blx	r3
 8013636:	4603      	mov	r3, r0
 8013638:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 801363a:	8b7b      	ldrh	r3, [r7, #26]
 801363c:	4a3d      	ldr	r2, [pc, #244]	; (8013734 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 801363e:	8812      	ldrh	r2, [r2, #0]
 8013640:	fb02 f303 	mul.w	r3, r2, r3
 8013644:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 801364a:	2300      	movs	r3, #0
 801364c:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013652:	797b      	ldrb	r3, [r7, #5]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d005      	beq.n	8013664 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8013658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	4413      	add	r3, r2
 801365e:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8013660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013662:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8013664:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013668:	2b00      	cmp	r3, #0
 801366a:	d005      	beq.n	8013678 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 801366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	4413      	add	r3, r2
 8013672:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8013674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013676:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8013678:	88fb      	ldrh	r3, [r7, #6]
 801367a:	3b01      	subs	r3, #1
 801367c:	2b1f      	cmp	r3, #31
 801367e:	d84d      	bhi.n	801371c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8013680:	a201      	add	r2, pc, #4	; (adr r2, 8013688 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8013682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013686:	bf00      	nop
 8013688:	08013709 	.word	0x08013709
 801368c:	08013709 	.word	0x08013709
 8013690:	0801371d 	.word	0x0801371d
 8013694:	08013709 	.word	0x08013709
 8013698:	0801371d 	.word	0x0801371d
 801369c:	0801371d 	.word	0x0801371d
 80136a0:	0801371d 	.word	0x0801371d
 80136a4:	08013709 	.word	0x08013709
 80136a8:	0801371d 	.word	0x0801371d
 80136ac:	0801371d 	.word	0x0801371d
 80136b0:	0801371d 	.word	0x0801371d
 80136b4:	0801371d 	.word	0x0801371d
 80136b8:	0801371d 	.word	0x0801371d
 80136bc:	0801371d 	.word	0x0801371d
 80136c0:	0801371d 	.word	0x0801371d
 80136c4:	08013709 	.word	0x08013709
 80136c8:	0801371d 	.word	0x0801371d
 80136cc:	0801371d 	.word	0x0801371d
 80136d0:	0801371d 	.word	0x0801371d
 80136d4:	0801371d 	.word	0x0801371d
 80136d8:	0801371d 	.word	0x0801371d
 80136dc:	0801371d 	.word	0x0801371d
 80136e0:	0801371d 	.word	0x0801371d
 80136e4:	08013709 	.word	0x08013709
 80136e8:	0801371d 	.word	0x0801371d
 80136ec:	0801371d 	.word	0x0801371d
 80136f0:	0801371d 	.word	0x0801371d
 80136f4:	0801371d 	.word	0x0801371d
 80136f8:	0801371d 	.word	0x0801371d
 80136fc:	0801371d 	.word	0x0801371d
 8013700:	0801371d 	.word	0x0801371d
 8013704:	08013709 	.word	0x08013709
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	3374      	adds	r3, #116	; 0x74
 801370e:	681c      	ldr	r4, [r3, #0]
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	6a3a      	ldr	r2, [r7, #32]
 8013714:	68b9      	ldr	r1, [r7, #8]
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	47a0      	blx	r4
            break;
 801371a:	e006      	b.n	801372a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 801371c:	4b06      	ldr	r3, [pc, #24]	; (8013738 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 801371e:	4a07      	ldr	r2, [pc, #28]	; (801373c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8013720:	f240 3125 	movw	r1, #805	; 0x325
 8013724:	4806      	ldr	r0, [pc, #24]	; (8013740 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8013726:	f011 fb49 	bl	8024dbc <__assert_func>
            break;
        }
    }
 801372a:	bf00      	nop
 801372c:	372c      	adds	r7, #44	; 0x2c
 801372e:	46bd      	mov	sp, r7
 8013730:	bd90      	pop	{r4, r7, pc}
 8013732:	bf00      	nop
 8013734:	2000bd68 	.word	0x2000bd68
 8013738:	0802643c 	.word	0x0802643c
 801373c:	08026c48 	.word	0x08026c48
 8013740:	0802645c 	.word	0x0802645c

08013744 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	60f8      	str	r0, [r7, #12]
 801374c:	60b9      	str	r1, [r7, #8]
 801374e:	607a      	str	r2, [r7, #4]
 8013750:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d106      	bne.n	8013766 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013758:	4b11      	ldr	r3, [pc, #68]	; (80137a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801375a:	4a12      	ldr	r2, [pc, #72]	; (80137a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801375c:	f240 3137 	movw	r1, #823	; 0x337
 8013760:	4811      	ldr	r0, [pc, #68]	; (80137a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013762:	f011 fb2b 	bl	8024dbc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	68ba      	ldr	r2, [r7, #8]
 801376a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2b00      	cmp	r3, #0
 801377c:	bf14      	ite	ne
 801377e:	2301      	movne	r3, #1
 8013780:	2300      	moveq	r3, #0
 8013782:	b2da      	uxtb	r2, r3
 8013784:	4b09      	ldr	r3, [pc, #36]	; (80137ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013786:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	bf14      	ite	ne
 801378e:	2301      	movne	r3, #1
 8013790:	2300      	moveq	r3, #0
 8013792:	b2da      	uxtb	r2, r3
 8013794:	4b06      	ldr	r3, [pc, #24]	; (80137b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013796:	701a      	strb	r2, [r3, #0]
    }
 8013798:	bf00      	nop
 801379a:	3710      	adds	r7, #16
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}
 80137a0:	080264a0 	.word	0x080264a0
 80137a4:	08026bf8 	.word	0x08026bf8
 80137a8:	0802645c 	.word	0x0802645c
 80137ac:	2000bd6a 	.word	0x2000bd6a
 80137b0:	2000bd6b 	.word	0x2000bd6b

080137b4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	460b      	mov	r3, r1
 80137be:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d004      	beq.n	80137d2 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137cc:	887a      	ldrh	r2, [r7, #2]
 80137ce:	4610      	mov	r0, r2
 80137d0:	4798      	blx	r3
        }
    }
 80137d2:	bf00      	nop
 80137d4:	3708      	adds	r7, #8
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}

080137da <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80137da:	b580      	push	{r7, lr}
 80137dc:	b082      	sub	sp, #8
 80137de:	af00      	add	r7, sp, #0
 80137e0:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	685a      	ldr	r2, [r3, #4]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	3318      	adds	r3, #24
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4610      	mov	r0, r2
 80137f2:	4798      	blx	r3
 80137f4:	4603      	mov	r3, r0
    }
 80137f6:	4618      	mov	r0, r3
 80137f8:	3708      	adds	r7, #8
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
	...

08013800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013814:	429a      	cmp	r2, r3
 8013816:	d017      	beq.n	8013848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013818:	4b1a      	ldr	r3, [pc, #104]	; (8013884 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d12a      	bne.n	8013876 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013820:	4b19      	ldr	r3, [pc, #100]	; (8013888 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013822:	881a      	ldrh	r2, [r3, #0]
 8013824:	4b19      	ldr	r3, [pc, #100]	; (801388c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013826:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013828:	4b19      	ldr	r3, [pc, #100]	; (8013890 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801382a:	881a      	ldrh	r2, [r3, #0]
 801382c:	4b19      	ldr	r3, [pc, #100]	; (8013894 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801382e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013830:	4b16      	ldr	r3, [pc, #88]	; (801388c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013832:	881a      	ldrh	r2, [r3, #0]
 8013834:	4b16      	ldr	r3, [pc, #88]	; (8013890 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013836:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013838:	4b16      	ldr	r3, [pc, #88]	; (8013894 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801383a:	881a      	ldrh	r2, [r3, #0]
 801383c:	4b12      	ldr	r3, [pc, #72]	; (8013888 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801383e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013840:	4b10      	ldr	r3, [pc, #64]	; (8013884 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013842:	2201      	movs	r2, #1
 8013844:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013846:	e016      	b.n	8013876 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013848:	4b0e      	ldr	r3, [pc, #56]	; (8013884 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d012      	beq.n	8013876 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013850:	4b0f      	ldr	r3, [pc, #60]	; (8013890 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013852:	881a      	ldrh	r2, [r3, #0]
 8013854:	4b0d      	ldr	r3, [pc, #52]	; (801388c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013856:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013858:	4b0b      	ldr	r3, [pc, #44]	; (8013888 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801385a:	881a      	ldrh	r2, [r3, #0]
 801385c:	4b0d      	ldr	r3, [pc, #52]	; (8013894 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801385e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013860:	4b0c      	ldr	r3, [pc, #48]	; (8013894 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013862:	881a      	ldrh	r2, [r3, #0]
 8013864:	4b0a      	ldr	r3, [pc, #40]	; (8013890 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013866:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013868:	4b08      	ldr	r3, [pc, #32]	; (801388c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801386a:	881a      	ldrh	r2, [r3, #0]
 801386c:	4b06      	ldr	r3, [pc, #24]	; (8013888 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801386e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013870:	4b04      	ldr	r3, [pc, #16]	; (8013884 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013872:	2200      	movs	r2, #0
 8013874:	701a      	strb	r2, [r3, #0]
    }
 8013876:	bf00      	nop
 8013878:	370c      	adds	r7, #12
 801387a:	46bd      	mov	sp, r7
 801387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013880:	4770      	bx	lr
 8013882:	bf00      	nop
 8013884:	2000bd64 	.word	0x2000bd64
 8013888:	2000bd60 	.word	0x2000bd60
 801388c:	2000bd66 	.word	0x2000bd66
 8013890:	2000bd62 	.word	0x2000bd62
 8013894:	2000bd68 	.word	0x2000bd68

08013898 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	4618      	mov	r0, r3
 80138a4:	f002 fa3c 	bl	8015d20 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80138a8:	bf00      	nop
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	4a05      	ldr	r2, [pc, #20]	; (80138d0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	601a      	str	r2, [r3, #0]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff fe43 	bl	801354c <_ZN8touchgfx3HALD1Ev>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	3708      	adds	r7, #8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}
 80138d0:	08026e20 	.word	0x08026e20

080138d4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f7ff ffe7 	bl	80138b0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80138e2:	2178      	movs	r1, #120	; 0x78
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f011 fa3e 	bl	8024d66 <_ZdlPvj>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	4618      	mov	r0, r3
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4618      	mov	r0, r3
 8013900:	f7ff ffca 	bl	8013898 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013904:	bf00      	nop
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	4618      	mov	r0, r3
 8013918:	f001 fb0a 	bl	8014f30 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801391c:	bf00      	nop
 801391e:	3708      	adds	r7, #8
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	4618      	mov	r0, r3
 8013930:	f001 fb8a 	bl	8015048 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013934:	4603      	mov	r3, r0
}
 8013936:	4618      	mov	r0, r3
 8013938:	3708      	adds	r7, #8
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}

0801393e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801393e:	b580      	push	{r7, lr}
 8013940:	b082      	sub	sp, #8
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
 8013946:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6839      	ldr	r1, [r7, #0]
 801394c:	4618      	mov	r0, r3
 801394e:	f001 fb89 	bl	8015064 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013952:	bf00      	nop
 8013954:	3708      	adds	r7, #8
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}

0801395a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801395a:	b580      	push	{r7, lr}
 801395c:	b082      	sub	sp, #8
 801395e:	af00      	add	r7, sp, #0
 8013960:	6078      	str	r0, [r7, #4]
 8013962:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6839      	ldr	r1, [r7, #0]
 8013968:	4618      	mov	r0, r3
 801396a:	f001 fb91 	bl	8015090 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801396e:	bf00      	nop
 8013970:	3708      	adds	r7, #8
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}

08013976 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8013976:	b580      	push	{r7, lr}
 8013978:	b082      	sub	sp, #8
 801397a:	af00      	add	r7, sp, #0
 801397c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4618      	mov	r0, r3
 8013982:	f001 fb07 	bl	8014f94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8013986:	bf00      	nop
 8013988:	3708      	adds	r7, #8
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}

0801398e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801398e:	b580      	push	{r7, lr}
 8013990:	b082      	sub	sp, #8
 8013992:	af00      	add	r7, sp, #0
 8013994:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4618      	mov	r0, r3
 801399a:	f001 fb0b 	bl	8014fb4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801399e:	bf00      	nop
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f001 fb0d 	bl	8014fd0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80139b6:	bf00      	nop
 80139b8:	3708      	adds	r7, #8
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80139be:	b580      	push	{r7, lr}
 80139c0:	b082      	sub	sp, #8
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f001 fb0f 	bl	8014fec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80139ce:	bf00      	nop
 80139d0:	3708      	adds	r7, #8
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
	...

080139d8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	4a05      	ldr	r2, [pc, #20]	; (80139f8 <_ZN11TouchGFXHALD1Ev+0x20>)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	601a      	str	r2, [r3, #0]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7ff ff61 	bl	80138b0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	4618      	mov	r0, r3
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	08026b4c 	.word	0x08026b4c

080139fc <_ZN11TouchGFXHALD0Ev>:
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f7ff ffe7 	bl	80139d8 <_ZN11TouchGFXHALD1Ev>
 8013a0a:	2178      	movs	r1, #120	; 0x78
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f011 f9aa 	bl	8024d66 <_ZdlPvj>
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	4618      	mov	r0, r3
 8013a16:	3708      	adds	r7, #8
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8013a20:	2203      	movs	r2, #3
 8013a22:	2100      	movs	r1, #0
 8013a24:	2001      	movs	r0, #1
 8013a26:	f7f8 ff20 	bl	800c86a <xQueueGenericCreate>
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	4b0b      	ldr	r3, [pc, #44]	; (8013a5c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013a2e:	601a      	str	r2, [r3, #0]
 8013a30:	4b0a      	ldr	r3, [pc, #40]	; (8013a5c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d006      	beq.n	8013a46 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8013a38:	4b08      	ldr	r3, [pc, #32]	; (8013a5c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013a3a:	6818      	ldr	r0, [r3, #0]
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	2200      	movs	r2, #0
 8013a40:	2100      	movs	r1, #0
 8013a42:	f7f8 ff73 	bl	800c92c <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8013a46:	2200      	movs	r2, #0
 8013a48:	2101      	movs	r1, #1
 8013a4a:	2001      	movs	r0, #1
 8013a4c:	f7f8 ff0d 	bl	800c86a <xQueueGenericCreate>
 8013a50:	4602      	mov	r2, r0
 8013a52:	4b03      	ldr	r3, [pc, #12]	; (8013a60 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8013a54:	601a      	str	r2, [r3, #0]
}
 8013a56:	bf00      	nop
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	20008700 	.word	0x20008700
 8013a60:	20008704 	.word	0x20008704

08013a64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8013a68:	4b04      	ldr	r3, [pc, #16]	; (8013a7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f9 fa6d 	bl	800cf50 <xQueueSemaphoreTake>
}
 8013a76:	bf00      	nop
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	20008700 	.word	0x20008700

08013a80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8013a84:	4b04      	ldr	r3, [pc, #16]	; (8013a98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8013a86:	6818      	ldr	r0, [r3, #0]
 8013a88:	2300      	movs	r3, #0
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	f7f8 ff4d 	bl	800c92c <xQueueGenericSend>
}
 8013a92:	bf00      	nop
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	20008700 	.word	0x20008700

08013a9c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8013aa0:	4b03      	ldr	r3, [pc, #12]	; (8013ab0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	2100      	movs	r1, #0
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7f9 fa52 	bl	800cf50 <xQueueSemaphoreTake>
}
 8013aac:	bf00      	nop
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	20008700 	.word	0x20008700

08013ab4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8013aba:	2300      	movs	r3, #0
 8013abc:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8013abe:	4b0b      	ldr	r3, [pc, #44]	; (8013aec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	1d3a      	adds	r2, r7, #4
 8013ac4:	4611      	mov	r1, r2
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7f9 f8ce 	bl	800cc68 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d007      	beq.n	8013ae2 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8013ad2:	4b07      	ldr	r3, [pc, #28]	; (8013af0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ad8:	601a      	str	r2, [r3, #0]
 8013ada:	f3bf 8f4f 	dsb	sy
 8013ade:	f3bf 8f6f 	isb	sy
}
 8013ae2:	bf00      	nop
 8013ae4:	3708      	adds	r7, #8
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	20008700 	.word	0x20008700
 8013af0:	e000ed04 	.word	0xe000ed04

08013af4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
    if (vsync_q)
 8013afa:	4b0e      	ldr	r3, [pc, #56]	; (8013b34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d013      	beq.n	8013b2a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8013b02:	2300      	movs	r3, #0
 8013b04:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8013b06:	4b0b      	ldr	r3, [pc, #44]	; (8013b34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013b08:	6818      	ldr	r0, [r3, #0]
 8013b0a:	1d3a      	adds	r2, r7, #4
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	490a      	ldr	r1, [pc, #40]	; (8013b38 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8013b10:	f7f9 f80e 	bl	800cb30 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d007      	beq.n	8013b2a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8013b1a:	4b08      	ldr	r3, [pc, #32]	; (8013b3c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8013b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b20:	601a      	str	r2, [r3, #0]
 8013b22:	f3bf 8f4f 	dsb	sy
 8013b26:	f3bf 8f6f 	isb	sy
    }
}
 8013b2a:	bf00      	nop
 8013b2c:	3708      	adds	r7, #8
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	20008704 	.word	0x20008704
 8013b38:	20000050 	.word	0x20000050
 8013b3c:	e000ed04 	.word	0xe000ed04

08013b40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8013b44:	4b08      	ldr	r3, [pc, #32]	; (8013b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	4908      	ldr	r1, [pc, #32]	; (8013b6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f9 f91d 	bl	800cd8c <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8013b52:	4b05      	ldr	r3, [pc, #20]	; (8013b68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f04f 32ff 	mov.w	r2, #4294967295
 8013b5a:	4904      	ldr	r1, [pc, #16]	; (8013b6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7f9 f915 	bl	800cd8c <xQueueReceive>
}
 8013b62:	bf00      	nop
 8013b64:	bd80      	pop	{r7, pc}
 8013b66:	bf00      	nop
 8013b68:	20008704 	.word	0x20008704
 8013b6c:	20000050 	.word	0x20000050

08013b70 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b082      	sub	sp, #8
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	4603      	mov	r3, r0
 8013b78:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8013b7a:	88fb      	ldrh	r3, [r7, #6]
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7f9 fe45 	bl	800d80c <vTaskDelay>
}
 8013b82:	bf00      	nop
 8013b84:	3708      	adds	r7, #8
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
	...

08013b8c <__NVIC_EnableIRQ>:
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	4603      	mov	r3, r0
 8013b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	db0d      	blt.n	8013bba <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	f003 021f 	and.w	r2, r3, #31
 8013ba8:	4907      	ldr	r1, [pc, #28]	; (8013bc8 <__NVIC_EnableIRQ+0x3c>)
 8013baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bae:	095b      	lsrs	r3, r3, #5
 8013bb0:	2001      	movs	r0, #1
 8013bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8013bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013bba:	bf00      	nop
 8013bbc:	370c      	adds	r7, #12
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr
 8013bc6:	bf00      	nop
 8013bc8:	e000e100 	.word	0xe000e100

08013bcc <__NVIC_DisableIRQ>:
{
 8013bcc:	b480      	push	{r7}
 8013bce:	b083      	sub	sp, #12
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	db12      	blt.n	8013c04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	f003 021f 	and.w	r2, r3, #31
 8013be8:	4909      	ldr	r1, [pc, #36]	; (8013c10 <__NVIC_DisableIRQ+0x44>)
 8013bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bee:	095b      	lsrs	r3, r3, #5
 8013bf0:	2001      	movs	r0, #1
 8013bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8013bf6:	3320      	adds	r3, #32
 8013bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013bfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013c00:	f3bf 8f6f 	isb	sy
}
 8013c04:	bf00      	nop
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr
 8013c10:	e000e100 	.word	0xe000e100

08013c14 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
        return color;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
    }
 8013c20:	4618      	mov	r0, r3
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr

08013c2c <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	b29b      	uxth	r3, r3
    }
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	370c      	adds	r7, #12
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c44:	4770      	bx	lr
	...

08013c48 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
    {
 8013c50:	4a04      	ldr	r2, [pc, #16]	; (8013c64 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	601a      	str	r2, [r3, #0]
    }
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	370c      	adds	r7, #12
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr
 8013c64:	08026cf4 	.word	0x08026cf4

08013c68 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
    }
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f7ff ffe9 	bl	8013c48 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013c76:	2104      	movs	r1, #4
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f011 f874 	bl	8024d66 <_ZdlPvj>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	4618      	mov	r0, r3
 8013c82:	3708      	adds	r7, #8
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}

08013c88 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3344      	adds	r3, #68	; 0x44
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	4798      	blx	r3
    }
 8013c9c:	bf00      	nop
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8013cac:	2300      	movs	r3, #0
    }
 8013cae:	4618      	mov	r0, r3
 8013cb0:	370c      	adds	r7, #12
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr
	...

08013cbc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
    {
 8013cc4:	4a04      	ldr	r2, [pc, #16]	; (8013cd8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	601a      	str	r2, [r3, #0]
    }
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	370c      	adds	r7, #12
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr
 8013cd8:	08027d30 	.word	0x08027d30

08013cdc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
    }
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f7ff ffe9 	bl	8013cbc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013cea:	210c      	movs	r1, #12
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f011 f83a 	bl	8024d66 <_ZdlPvj>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013cfc:	b480      	push	{r7}
 8013cfe:	b083      	sub	sp, #12
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013d06:	4a09      	ldr	r2, [pc, #36]	; (8013d2c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	601a      	str	r2, [r3, #0]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	683a      	ldr	r2, [r7, #0]
 8013d10:	605a      	str	r2, [r3, #4]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2200      	movs	r2, #0
 8013d16:	721a      	strb	r2, [r3, #8]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	725a      	strb	r2, [r3, #9]
    {
    }
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4618      	mov	r0, r3
 8013d22:	370c      	adds	r7, #12
 8013d24:	46bd      	mov	sp, r7
 8013d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2a:	4770      	bx	lr
 8013d2c:	08027d30 	.word	0x08027d30

08013d30 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	685a      	ldr	r2, [r3, #4]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	3314      	adds	r3, #20
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	4610      	mov	r0, r2
 8013d48:	4798      	blx	r3
    }
 8013d4a:	bf00      	nop
 8013d4c:	3708      	adds	r7, #8
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}

08013d52 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013d52:	b580      	push	{r7, lr}
 8013d54:	b082      	sub	sp, #8
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	3328      	adds	r3, #40	; 0x28
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	4610      	mov	r0, r2
 8013d66:	4798      	blx	r3
    }
 8013d68:	bf00      	nop
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8013d70:	b480      	push	{r7}
 8013d72:	b085      	sub	sp, #20
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	60f8      	str	r0, [r7, #12]
 8013d78:	60b9      	str	r1, [r7, #8]
 8013d7a:	607a      	str	r2, [r7, #4]
 8013d7c:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	430a      	orrs	r2, r1
 8013d90:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d98:	f023 0107 	bic.w	r1, r3, #7
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	430a      	orrs	r2, r1
 8013da4:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013dac:	4b06      	ldr	r3, [pc, #24]	; (8013dc8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8013dae:	4013      	ands	r3, r2
 8013db0:	6839      	ldr	r1, [r7, #0]
 8013db2:	68fa      	ldr	r2, [r7, #12]
 8013db4:	6812      	ldr	r2, [r2, #0]
 8013db6:	430b      	orrs	r3, r1
 8013db8:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8013dba:	2300      	movs	r3, #0
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3714      	adds	r7, #20
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr
 8013dc8:	ffffc000 	.word	0xffffc000

08013dcc <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013dd4:	f7fb fd2c 	bl	800f830 <_ZN8touchgfx3HAL11getInstanceEv>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7ff ffa8 	bl	8013d30 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013de0:	bf00      	nop
 8013de2:	3708      	adds	r7, #8
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
    assert(0);
 8013df0:	4b02      	ldr	r3, [pc, #8]	; (8013dfc <DMA2D_XferErrorCallback+0x14>)
 8013df2:	4a03      	ldr	r2, [pc, #12]	; (8013e00 <DMA2D_XferErrorCallback+0x18>)
 8013df4:	213e      	movs	r1, #62	; 0x3e
 8013df6:	4803      	ldr	r0, [pc, #12]	; (8013e04 <DMA2D_XferErrorCallback+0x1c>)
 8013df8:	f010 ffe0 	bl	8024dbc <__assert_func>
 8013dfc:	080264d8 	.word	0x080264d8
 8013e00:	08026d10 	.word	0x08026d10
 8013e04:	080264dc 	.word	0x080264dc

08013e08 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	3318      	adds	r3, #24
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7fe feeb 	bl	8012bf0 <_ZN8touchgfx9colortypeC1Ev>
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3708      	adds	r7, #8
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8013e24:	b5b0      	push	{r4, r5, r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	330c      	adds	r3, #12
 8013e32:	4619      	mov	r1, r3
 8013e34:	4610      	mov	r0, r2
 8013e36:	f7ff ff61 	bl	8013cfc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013e3a:	4a0e      	ldr	r2, [pc, #56]	; (8013e74 <_ZN10STM32F7DMAC1Ev+0x50>)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	601a      	str	r2, [r3, #0]
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f103 000c 	add.w	r0, r3, #12
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	3320      	adds	r3, #32
 8013e4a:	2260      	movs	r2, #96	; 0x60
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	f002 fe0b 	bl	8016a68 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	3320      	adds	r3, #32
 8013e56:	245f      	movs	r4, #95	; 0x5f
 8013e58:	461d      	mov	r5, r3
 8013e5a:	2c00      	cmp	r4, #0
 8013e5c:	db05      	blt.n	8013e6a <_ZN10STM32F7DMAC1Ev+0x46>
 8013e5e:	4628      	mov	r0, r5
 8013e60:	f7ff ffd2 	bl	8013e08 <_ZN8touchgfx6BlitOpC1Ev>
 8013e64:	3520      	adds	r5, #32
 8013e66:	3c01      	subs	r4, #1
 8013e68:	e7f7      	b.n	8013e5a <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bdb0      	pop	{r4, r5, r7, pc}
 8013e74:	08026ca4 	.word	0x08026ca4

08013e78 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	4a0b      	ldr	r2, [pc, #44]	; (8013eb0 <_ZN10STM32F7DMAD1Ev+0x38>)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8013e86:	480b      	ldr	r0, [pc, #44]	; (8013eb4 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8013e88:	f7f1 f8b0 	bl	8004fec <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013e8c:	205a      	movs	r0, #90	; 0x5a
 8013e8e:	f7ff fe9d 	bl	8013bcc <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	330c      	adds	r3, #12
 8013e96:	4618      	mov	r0, r3
 8013e98:	f000 faa0 	bl	80143dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7ff ff0c 	bl	8013cbc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3708      	adds	r7, #8
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	08026ca4 	.word	0x08026ca4
 8013eb4:	2000c5f0 	.word	0x2000c5f0

08013eb8 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
}
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f7ff ffd9 	bl	8013e78 <_ZN10STM32F7DMAD1Ev>
 8013ec6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f010 ff4b 	bl	8024d66 <_ZdlPvj>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3708      	adds	r7, #8
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
	...

08013edc <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013ee4:	4b09      	ldr	r3, [pc, #36]	; (8013f0c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013ee6:	4a0a      	ldr	r2, [pc, #40]	; (8013f10 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013ee8:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8013eea:	4808      	ldr	r0, [pc, #32]	; (8013f0c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013eec:	f7f1 f834 	bl	8004f58 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013ef0:	4b06      	ldr	r3, [pc, #24]	; (8013f0c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013ef2:	4a08      	ldr	r2, [pc, #32]	; (8013f14 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013ef4:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013ef6:	4b05      	ldr	r3, [pc, #20]	; (8013f0c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013ef8:	4a07      	ldr	r2, [pc, #28]	; (8013f18 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8013efa:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013efc:	205a      	movs	r0, #90	; 0x5a
 8013efe:	f7ff fe45 	bl	8013b8c <__NVIC_EnableIRQ>
}
 8013f02:	bf00      	nop
 8013f04:	3708      	adds	r7, #8
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	2000c5f0 	.word	0x2000c5f0
 8013f10:	4002b000 	.word	0x4002b000
 8013f14:	08013dcd 	.word	0x08013dcd
 8013f18:	08013de9 	.word	0x08013de9

08013f1c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013f24:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	370c      	adds	r7, #12
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013f34:	b590      	push	{r4, r7, lr}
 8013f36:	b08d      	sub	sp, #52	; 0x34
 8013f38:	af02      	add	r7, sp, #8
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8013f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013f42:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013f44:	2300      	movs	r3, #0
 8013f46:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013f4c:	2b20      	cmp	r3, #32
 8013f4e:	d007      	beq.n	8013f60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	2b40      	cmp	r3, #64	; 0x40
 8013f56:	d003      	beq.n	8013f60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b04      	cmp	r3, #4
 8013f5e:	d101      	bne.n	8013f64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8013f60:	2301      	movs	r3, #1
 8013f62:	e000      	b.n	8013f66 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8013f64:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013f66:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8013f6c:	2b80      	cmp	r3, #128	; 0x80
 8013f6e:	d004      	beq.n	8013f7a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f78:	d101      	bne.n	8013f7e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e000      	b.n	8013f80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8013f7e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013f80:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013f82:	f7fb fc61 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8013f86:	4602      	mov	r2, r0
 8013f88:	6813      	ldr	r3, [r2, #0]
 8013f8a:	3320      	adds	r3, #32
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	4610      	mov	r0, r2
 8013f90:	4798      	blx	r3
 8013f92:	4603      	mov	r3, r0
 8013f94:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	2b40      	cmp	r3, #64	; 0x40
 8013f9c:	d01d      	beq.n	8013fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013f9e:	2b40      	cmp	r3, #64	; 0x40
 8013fa0:	d804      	bhi.n	8013fac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8013fa2:	2b04      	cmp	r3, #4
 8013fa4:	d00e      	beq.n	8013fc4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8013fa6:	2b20      	cmp	r3, #32
 8013fa8:	d017      	beq.n	8013fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013faa:	e019      	b.n	8013fe0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8013fac:	2b80      	cmp	r3, #128	; 0x80
 8013fae:	d003      	beq.n	8013fb8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8013fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013fb4:	d003      	beq.n	8013fbe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013fb6:	e013      	b.n	8013fe0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013fb8:	230a      	movs	r3, #10
 8013fba:	623b      	str	r3, [r7, #32]
        break;
 8013fbc:	e01a      	b.n	8013ff4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8013fbe:	2309      	movs	r3, #9
 8013fc0:	623b      	str	r3, [r7, #32]
        break;
 8013fc2:	e017      	b.n	8013ff4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013fc8:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013fca:	7f7b      	ldrb	r3, [r7, #29]
 8013fcc:	2b10      	cmp	r3, #16
 8013fce:	d101      	bne.n	8013fd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013fd0:	2302      	movs	r3, #2
 8013fd2:	e000      	b.n	8013fd6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	623b      	str	r3, [r7, #32]
        break;
 8013fd8:	e00c      	b.n	8013ff4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	623b      	str	r3, [r7, #32]
        break;
 8013fde:	e009      	b.n	8013ff4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013fe4:	7f7b      	ldrb	r3, [r7, #29]
 8013fe6:	2b10      	cmp	r3, #16
 8013fe8:	d101      	bne.n	8013fee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8013fea:	2302      	movs	r3, #2
 8013fec:	e000      	b.n	8013ff0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	623b      	str	r3, [r7, #32]
        break;
 8013ff2:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013ff4:	4a76      	ldr	r2, [pc, #472]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff8:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013ffa:	7f7b      	ldrb	r3, [r7, #29]
 8013ffc:	2b10      	cmp	r3, #16
 8013ffe:	d101      	bne.n	8014004 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8014000:	2302      	movs	r3, #2
 8014002:	e000      	b.n	8014006 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8014004:	2301      	movs	r3, #1
 8014006:	4a72      	ldr	r2, [pc, #456]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014008:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	8adb      	ldrh	r3, [r3, #22]
 801400e:	461a      	mov	r2, r3
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	8a1b      	ldrh	r3, [r3, #16]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	461a      	mov	r2, r3
 8014018:	4b6d      	ldr	r3, [pc, #436]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801401a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801401c:	7f7b      	ldrb	r3, [r7, #29]
 801401e:	2b10      	cmp	r3, #16
 8014020:	d101      	bne.n	8014026 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8014022:	2202      	movs	r2, #2
 8014024:	e000      	b.n	8014028 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8014026:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	8adb      	ldrh	r3, [r3, #22]
 801402c:	4619      	mov	r1, r3
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	8a1b      	ldrh	r3, [r3, #16]
 8014032:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014036:	4866      	ldr	r0, [pc, #408]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014038:	f7ff fe9a 	bl	8013d70 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801403c:	4a64      	ldr	r2, [pc, #400]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801403e:	6a3b      	ldr	r3, [r7, #32]
 8014040:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	8a9b      	ldrh	r3, [r3, #20]
 8014046:	461a      	mov	r2, r3
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	8a1b      	ldrh	r3, [r3, #16]
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	461a      	mov	r2, r3
 8014050:	4b5f      	ldr	r3, [pc, #380]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014052:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8014054:	7ffb      	ldrb	r3, [r7, #31]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d103      	bne.n	8014062 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801405a:	7fbb      	ldrb	r3, [r7, #30]
 801405c:	2b00      	cmp	r3, #0
 801405e:	f000 8082 	beq.w	8014166 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	7f1b      	ldrb	r3, [r3, #28]
 8014066:	2bff      	cmp	r3, #255	; 0xff
 8014068:	d008      	beq.n	801407c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801406a:	4b59      	ldr	r3, [pc, #356]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801406c:	2202      	movs	r2, #2
 801406e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	7f1b      	ldrb	r3, [r3, #28]
 8014074:	461a      	mov	r2, r3
 8014076:	4b56      	ldr	r3, [pc, #344]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014078:	635a      	str	r2, [r3, #52]	; 0x34
 801407a:	e002      	b.n	8014082 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801407c:	4b54      	ldr	r3, [pc, #336]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801407e:	2200      	movs	r2, #0
 8014080:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8014082:	7fbb      	ldrb	r3, [r7, #30]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d059      	beq.n	801413c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8014088:	7f7b      	ldrb	r3, [r7, #29]
 801408a:	2b10      	cmp	r3, #16
 801408c:	d14a      	bne.n	8014124 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	3318      	adds	r3, #24
 8014092:	4618      	mov	r0, r3
 8014094:	f7ff fdca 	bl	8013c2c <_ZNK8touchgfx9colortypecvtEv>
 8014098:	4603      	mov	r3, r0
 801409a:	12db      	asrs	r3, r3, #11
 801409c:	f003 021f 	and.w	r2, r3, #31
 80140a0:	4613      	mov	r3, r2
 80140a2:	021b      	lsls	r3, r3, #8
 80140a4:	1a9b      	subs	r3, r3, r2
 80140a6:	4a4b      	ldr	r2, [pc, #300]	; (80141d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80140a8:	fb82 1203 	smull	r1, r2, r2, r3
 80140ac:	441a      	add	r2, r3
 80140ae:	1112      	asrs	r2, r2, #4
 80140b0:	17db      	asrs	r3, r3, #31
 80140b2:	1ad3      	subs	r3, r2, r3
 80140b4:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	3318      	adds	r3, #24
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7ff fdb6 	bl	8013c2c <_ZNK8touchgfx9colortypecvtEv>
 80140c0:	4603      	mov	r3, r0
 80140c2:	115b      	asrs	r3, r3, #5
 80140c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80140c8:	4613      	mov	r3, r2
 80140ca:	021b      	lsls	r3, r3, #8
 80140cc:	1a9b      	subs	r3, r3, r2
 80140ce:	4a42      	ldr	r2, [pc, #264]	; (80141d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80140d0:	fb82 1203 	smull	r1, r2, r2, r3
 80140d4:	441a      	add	r2, r3
 80140d6:	1152      	asrs	r2, r2, #5
 80140d8:	17db      	asrs	r3, r3, #31
 80140da:	1ad3      	subs	r3, r2, r3
 80140dc:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	3318      	adds	r3, #24
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7ff fda2 	bl	8013c2c <_ZNK8touchgfx9colortypecvtEv>
 80140e8:	4603      	mov	r3, r0
 80140ea:	f003 021f 	and.w	r2, r3, #31
 80140ee:	4613      	mov	r3, r2
 80140f0:	021b      	lsls	r3, r3, #8
 80140f2:	1a9b      	subs	r3, r3, r2
 80140f4:	4a37      	ldr	r2, [pc, #220]	; (80141d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80140f6:	fb82 1203 	smull	r1, r2, r2, r3
 80140fa:	441a      	add	r2, r3
 80140fc:	1112      	asrs	r2, r2, #4
 80140fe:	17db      	asrs	r3, r3, #31
 8014100:	1ad3      	subs	r3, r2, r3
 8014102:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	7f1b      	ldrb	r3, [r3, #28]
 8014108:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	061a      	lsls	r2, r3, #24
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	041b      	lsls	r3, r3, #16
 8014112:	431a      	orrs	r2, r3
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	021b      	lsls	r3, r3, #8
 8014118:	431a      	orrs	r2, r3
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	4313      	orrs	r3, r2
 801411e:	4a2c      	ldr	r2, [pc, #176]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014120:	6353      	str	r3, [r2, #52]	; 0x34
 8014122:	e00b      	b.n	801413c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	3318      	adds	r3, #24
 8014128:	4618      	mov	r0, r3
 801412a:	f7ff fd73 	bl	8013c14 <_ZNK8touchgfx9colortype10getColor32Ev>
 801412e:	4602      	mov	r2, r0
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	7f1b      	ldrb	r3, [r3, #28]
 8014134:	061b      	lsls	r3, r3, #24
 8014136:	4313      	orrs	r3, r2
 8014138:	4a25      	ldr	r2, [pc, #148]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801413a:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	8adb      	ldrh	r3, [r3, #22]
 8014140:	461a      	mov	r2, r3
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	8a1b      	ldrh	r3, [r3, #16]
 8014146:	1ad3      	subs	r3, r2, r3
 8014148:	461a      	mov	r2, r3
 801414a:	4b21      	ldr	r3, [pc, #132]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801414c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801414e:	7f7b      	ldrb	r3, [r7, #29]
 8014150:	2b10      	cmp	r3, #16
 8014152:	d101      	bne.n	8014158 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8014154:	2302      	movs	r3, #2
 8014156:	e000      	b.n	801415a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8014158:	2301      	movs	r3, #1
 801415a:	4a1d      	ldr	r2, [pc, #116]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801415c:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801415e:	2100      	movs	r1, #0
 8014160:	481b      	ldr	r0, [pc, #108]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014162:	f7f1 f9c3 	bl	80054ec <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014166:	2101      	movs	r1, #1
 8014168:	4819      	ldr	r0, [pc, #100]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801416a:	f7f1 f9bf 	bl	80054ec <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801416e:	7ffb      	ldrb	r3, [r7, #31]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d102      	bne.n	801417a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8014174:	7fbb      	ldrb	r3, [r7, #30]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d015      	beq.n	80141a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801417e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014184:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801418a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014190:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014196:	9301      	str	r3, [sp, #4]
 8014198:	9200      	str	r2, [sp, #0]
 801419a:	4623      	mov	r3, r4
 801419c:	4602      	mov	r2, r0
 801419e:	480c      	ldr	r0, [pc, #48]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80141a0:	f7f0 ffc7 	bl	8005132 <HAL_DMA2D_BlendingStart_IT>
 80141a4:	e00f      	b.n	80141c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80141aa:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80141b0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80141b6:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	4603      	mov	r3, r0
 80141c0:	4803      	ldr	r0, [pc, #12]	; (80141d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80141c2:	f7f0 ff83 	bl	80050cc <HAL_DMA2D_Start_IT>
    }
}
 80141c6:	bf00      	nop
 80141c8:	372c      	adds	r7, #44	; 0x2c
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd90      	pop	{r4, r7, pc}
 80141ce:	bf00      	nop
 80141d0:	2000c5f0 	.word	0x2000c5f0
 80141d4:	84210843 	.word	0x84210843
 80141d8:	82082083 	.word	0x82082083

080141dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80141dc:	b590      	push	{r4, r7, lr}
 80141de:	b08d      	sub	sp, #52	; 0x34
 80141e0:	af02      	add	r7, sp, #8
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80141e6:	f7fb fb2f 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 80141ea:	4602      	mov	r2, r0
 80141ec:	6813      	ldr	r3, [r2, #0]
 80141ee:	3320      	adds	r3, #32
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4610      	mov	r0, r2
 80141f4:	4798      	blx	r3
 80141f6:	4603      	mov	r3, r0
 80141f8:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80141fa:	7ffb      	ldrb	r3, [r7, #31]
 80141fc:	2b10      	cmp	r3, #16
 80141fe:	d101      	bne.n	8014204 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8014200:	2302      	movs	r3, #2
 8014202:	e000      	b.n	8014206 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8014204:	2301      	movs	r3, #1
 8014206:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8014208:	2300      	movs	r3, #0
 801420a:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 801420c:	7ffb      	ldrb	r3, [r7, #31]
 801420e:	2b10      	cmp	r3, #16
 8014210:	d149      	bne.n	80142a6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	3318      	adds	r3, #24
 8014216:	4618      	mov	r0, r3
 8014218:	f7ff fd08 	bl	8013c2c <_ZNK8touchgfx9colortypecvtEv>
 801421c:	4603      	mov	r3, r0
 801421e:	12db      	asrs	r3, r3, #11
 8014220:	f003 021f 	and.w	r2, r3, #31
 8014224:	4613      	mov	r3, r2
 8014226:	021b      	lsls	r3, r3, #8
 8014228:	1a9b      	subs	r3, r3, r2
 801422a:	4a69      	ldr	r2, [pc, #420]	; (80143d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801422c:	fb82 1203 	smull	r1, r2, r2, r3
 8014230:	441a      	add	r2, r3
 8014232:	1112      	asrs	r2, r2, #4
 8014234:	17db      	asrs	r3, r3, #31
 8014236:	1ad3      	subs	r3, r2, r3
 8014238:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	3318      	adds	r3, #24
 801423e:	4618      	mov	r0, r3
 8014240:	f7ff fcf4 	bl	8013c2c <_ZNK8touchgfx9colortypecvtEv>
 8014244:	4603      	mov	r3, r0
 8014246:	115b      	asrs	r3, r3, #5
 8014248:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801424c:	4613      	mov	r3, r2
 801424e:	021b      	lsls	r3, r3, #8
 8014250:	1a9b      	subs	r3, r3, r2
 8014252:	4a60      	ldr	r2, [pc, #384]	; (80143d4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8014254:	fb82 1203 	smull	r1, r2, r2, r3
 8014258:	441a      	add	r2, r3
 801425a:	1152      	asrs	r2, r2, #5
 801425c:	17db      	asrs	r3, r3, #31
 801425e:	1ad3      	subs	r3, r2, r3
 8014260:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	3318      	adds	r3, #24
 8014266:	4618      	mov	r0, r3
 8014268:	f7ff fce0 	bl	8013c2c <_ZNK8touchgfx9colortypecvtEv>
 801426c:	4603      	mov	r3, r0
 801426e:	f003 021f 	and.w	r2, r3, #31
 8014272:	4613      	mov	r3, r2
 8014274:	021b      	lsls	r3, r3, #8
 8014276:	1a9b      	subs	r3, r3, r2
 8014278:	4a55      	ldr	r2, [pc, #340]	; (80143d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801427a:	fb82 1203 	smull	r1, r2, r2, r3
 801427e:	441a      	add	r2, r3
 8014280:	1112      	asrs	r2, r2, #4
 8014282:	17db      	asrs	r3, r3, #31
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	7f1b      	ldrb	r3, [r3, #28]
 801428c:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	061a      	lsls	r2, r3, #24
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	041b      	lsls	r3, r3, #16
 8014296:	431a      	orrs	r2, r3
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	021b      	lsls	r3, r3, #8
 801429c:	4313      	orrs	r3, r2
 801429e:	68fa      	ldr	r2, [r7, #12]
 80142a0:	4313      	orrs	r3, r2
 80142a2:	623b      	str	r3, [r7, #32]
 80142a4:	e00b      	b.n	80142be <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	7f1b      	ldrb	r3, [r3, #28]
 80142aa:	061b      	lsls	r3, r3, #24
 80142ac:	461c      	mov	r4, r3
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	3318      	adds	r3, #24
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ff fcae 	bl	8013c14 <_ZNK8touchgfx9colortype10getColor32Ev>
 80142b8:	4603      	mov	r3, r0
 80142ba:	4323      	orrs	r3, r4
 80142bc:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2b08      	cmp	r3, #8
 80142c4:	d103      	bne.n	80142ce <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80142c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80142ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80142cc:	e003      	b.n	80142d6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80142ce:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80142d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80142d4:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80142d6:	4a40      	ldr	r2, [pc, #256]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80142d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142da:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80142dc:	7ffb      	ldrb	r3, [r7, #31]
 80142de:	2b10      	cmp	r3, #16
 80142e0:	d101      	bne.n	80142e6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80142e2:	2302      	movs	r3, #2
 80142e4:	e000      	b.n	80142e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80142e6:	2301      	movs	r3, #1
 80142e8:	4a3b      	ldr	r2, [pc, #236]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80142ea:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	8adb      	ldrh	r3, [r3, #22]
 80142f0:	461a      	mov	r2, r3
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	8a1b      	ldrh	r3, [r3, #16]
 80142f6:	1ad3      	subs	r3, r2, r3
 80142f8:	461a      	mov	r2, r3
 80142fa:	4b37      	ldr	r3, [pc, #220]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80142fc:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80142fe:	7ffb      	ldrb	r3, [r7, #31]
 8014300:	2b10      	cmp	r3, #16
 8014302:	d101      	bne.n	8014308 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8014304:	2202      	movs	r2, #2
 8014306:	e000      	b.n	801430a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8014308:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	8adb      	ldrh	r3, [r3, #22]
 801430e:	4619      	mov	r1, r3
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	8a1b      	ldrh	r3, [r3, #16]
 8014314:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014318:	482f      	ldr	r0, [pc, #188]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801431a:	f7ff fd29 	bl	8013d70 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014324:	d11e      	bne.n	8014364 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014326:	4b2c      	ldr	r3, [pc, #176]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014328:	2201      	movs	r2, #1
 801432a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 801432c:	4a2a      	ldr	r2, [pc, #168]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801432e:	6a3b      	ldr	r3, [r7, #32]
 8014330:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014332:	4b29      	ldr	r3, [pc, #164]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014334:	2209      	movs	r2, #9
 8014336:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	8adb      	ldrh	r3, [r3, #22]
 801433c:	461a      	mov	r2, r3
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	8a1b      	ldrh	r3, [r3, #16]
 8014342:	1ad3      	subs	r3, r2, r3
 8014344:	461a      	mov	r2, r3
 8014346:	4b24      	ldr	r3, [pc, #144]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014348:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801434a:	7ffb      	ldrb	r3, [r7, #31]
 801434c:	2b10      	cmp	r3, #16
 801434e:	d101      	bne.n	8014354 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8014350:	2302      	movs	r3, #2
 8014352:	e000      	b.n	8014356 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8014354:	2301      	movs	r3, #1
 8014356:	4a20      	ldr	r2, [pc, #128]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014358:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801435a:	2100      	movs	r1, #0
 801435c:	481e      	ldr	r0, [pc, #120]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801435e:	f7f1 f8c5 	bl	80054ec <HAL_DMA2D_ConfigLayer>
 8014362:	e005      	b.n	8014370 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014364:	4a1c      	ldr	r2, [pc, #112]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014366:	69bb      	ldr	r3, [r7, #24]
 8014368:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801436a:	4b1b      	ldr	r3, [pc, #108]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801436c:	2200      	movs	r2, #0
 801436e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014370:	2101      	movs	r1, #1
 8014372:	4819      	ldr	r0, [pc, #100]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014374:	f7f1 f8ba 	bl	80054ec <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801437e:	d115      	bne.n	80143ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014384:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801438a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014390:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014396:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801439c:	9301      	str	r3, [sp, #4]
 801439e:	9200      	str	r2, [sp, #0]
 80143a0:	4623      	mov	r3, r4
 80143a2:	4602      	mov	r2, r0
 80143a4:	480c      	ldr	r0, [pc, #48]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80143a6:	f7f0 fec4 	bl	8005132 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80143aa:	e00d      	b.n	80143c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	68db      	ldr	r3, [r3, #12]
 80143b0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80143b6:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80143bc:	9300      	str	r3, [sp, #0]
 80143be:	460b      	mov	r3, r1
 80143c0:	6a39      	ldr	r1, [r7, #32]
 80143c2:	4805      	ldr	r0, [pc, #20]	; (80143d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80143c4:	f7f0 fe82 	bl	80050cc <HAL_DMA2D_Start_IT>
}
 80143c8:	bf00      	nop
 80143ca:	372c      	adds	r7, #44	; 0x2c
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd90      	pop	{r4, r7, pc}
 80143d0:	84210843 	.word	0x84210843
 80143d4:	82082083 	.word	0x82082083
 80143d8:	2000c5f0 	.word	0x2000c5f0

080143dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80143dc:	b580      	push	{r7, lr}
 80143de:	b082      	sub	sp, #8
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	4a05      	ldr	r2, [pc, #20]	; (80143fc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	601a      	str	r2, [r3, #0]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7ff fc2b 	bl	8013c48 <_ZN8touchgfx9DMA_QueueD1Ev>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	4618      	mov	r0, r3
 80143f6:	3708      	adds	r7, #8
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}
 80143fc:	08027d80 	.word	0x08027d80

08014400 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ff ffe7 	bl	80143dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801440e:	2114      	movs	r1, #20
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f010 fca8 	bl	8024d66 <_ZdlPvj>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	4618      	mov	r0, r3
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
        texts = t;
 8014428:	4a04      	ldr	r2, [pc, #16]	; (801443c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6013      	str	r3, [r2, #0]
    }
 801442e:	bf00      	nop
 8014430:	370c      	adds	r7, #12
 8014432:	46bd      	mov	sp, r7
 8014434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014438:	4770      	bx	lr
 801443a:	bf00      	nop
 801443c:	2000be08 	.word	0x2000be08

08014440 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014440:	b480      	push	{r7}
 8014442:	b085      	sub	sp, #20
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801444e:	4a0b      	ldr	r2, [pc, #44]	; (801447c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	601a      	str	r2, [r3, #0]
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	68ba      	ldr	r2, [r7, #8]
 8014458:	605a      	str	r2, [r3, #4]
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	609a      	str	r2, [r3, #8]
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	60da      	str	r2, [r3, #12]
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	69ba      	ldr	r2, [r7, #24]
 801446a:	611a      	str	r2, [r3, #16]
    {
    }
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	4618      	mov	r0, r3
 8014470:	3714      	adds	r7, #20
 8014472:	46bd      	mov	sp, r7
 8014474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014478:	4770      	bx	lr
 801447a:	bf00      	nop
 801447c:	08026e10 	.word	0x08026e10

08014480 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8014480:	b480      	push	{r7}
 8014482:	b083      	sub	sp, #12
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
    {
 8014488:	4a04      	ldr	r2, [pc, #16]	; (801449c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	601a      	str	r2, [r3, #0]
    }
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr
 801449c:	08026e10 	.word	0x08026e10

080144a0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
    }
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff ffe9 	bl	8014480 <_ZN8touchgfx7MVPHeapD1Ev>
 80144ae:	2114      	movs	r1, #20
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f010 fc58 	bl	8024d66 <_ZdlPvj>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	4618      	mov	r0, r3
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 80144c0:	b480      	push	{r7}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
    {
 80144c8:	4a04      	ldr	r2, [pc, #16]	; (80144dc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	601a      	str	r2, [r3, #0]
    }
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	4618      	mov	r0, r3
 80144d2:	370c      	adds	r7, #12
 80144d4:	46bd      	mov	sp, r7
 80144d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144da:	4770      	bx	lr
 80144dc:	08028664 	.word	0x08028664

080144e0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
    }
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f7ff ffe9 	bl	80144c0 <_ZN8touchgfx3LCDD1Ev>
 80144ee:	2108      	movs	r1, #8
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f010 fc38 	bl	8024d66 <_ZdlPvj>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8014500:	b480      	push	{r7}
 8014502:	b083      	sub	sp, #12
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2200      	movs	r2, #0
 801450c:	801a      	strh	r2, [r3, #0]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2200      	movs	r2, #0
 8014512:	805a      	strh	r2, [r3, #2]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2200      	movs	r2, #0
 8014518:	809a      	strh	r2, [r3, #4]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2200      	movs	r2, #0
 801451e:	80da      	strh	r2, [r3, #6]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	811a      	strh	r2, [r3, #8]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2200      	movs	r2, #0
 801452a:	815a      	strh	r2, [r3, #10]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2200      	movs	r2, #0
 8014530:	819a      	strh	r2, [r3, #12]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2200      	movs	r2, #0
 8014536:	739a      	strb	r2, [r3, #14]
        {
        }
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	4618      	mov	r0, r3
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr

08014546 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8014546:	b580      	push	{r7, lr}
 8014548:	b082      	sub	sp, #8
 801454a:	af00      	add	r7, sp, #0
 801454c:	6078      	str	r0, [r7, #4]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	4618      	mov	r0, r3
 8014552:	f7ff ffd5 	bl	8014500 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2200      	movs	r2, #0
 801455a:	611a      	str	r2, [r3, #16]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2200      	movs	r2, #0
 8014560:	829a      	strh	r2, [r3, #20]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	4618      	mov	r0, r3
 8014566:	3708      	adds	r7, #8
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801456c:	b580      	push	{r7, lr}
 801456e:	b084      	sub	sp, #16
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
 8014578:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801457a:	4a44      	ldr	r2, [pc, #272]	; (801468c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	601a      	str	r2, [r3, #0]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	68ba      	ldr	r2, [r7, #8]
 8014584:	605a      	str	r2, [r3, #4]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	687a      	ldr	r2, [r7, #4]
 801458a:	609a      	str	r2, [r3, #8]
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	683a      	ldr	r2, [r7, #0]
 8014590:	60da      	str	r2, [r3, #12]
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2200      	movs	r2, #0
 8014596:	611a      	str	r2, [r3, #16]
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2200      	movs	r2, #0
 801459c:	615a      	str	r2, [r3, #20]
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2200      	movs	r2, #0
 80145a2:	619a      	str	r2, [r3, #24]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	331c      	adds	r3, #28
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7ff ffcc 	bl	8014546 <_ZN8touchgfx8GesturesC1Ev>
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	2200      	movs	r2, #0
 80145b2:	639a      	str	r2, [r3, #56]	; 0x38
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2200      	movs	r2, #0
 80145b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	2200      	movs	r2, #0
 80145be:	641a      	str	r2, [r3, #64]	; 0x40
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	2200      	movs	r2, #0
 80145c4:	645a      	str	r2, [r3, #68]	; 0x44
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	2200      	movs	r2, #0
 80145ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	2201      	movs	r2, #1
 80145d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	2201      	movs	r2, #1
 80145da:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2200      	movs	r2, #0
 80145e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	3350      	adds	r3, #80	; 0x50
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7fb fd5c 	bl	80100a6 <_ZN8touchgfx4RectC1Ev>
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	2201      	movs	r2, #1
 80145f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	2200      	movs	r2, #0
 80145fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	2200      	movs	r2, #0
 8014602:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	2201      	movs	r2, #1
 801460a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2200      	movs	r2, #0
 8014612:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	2200      	movs	r2, #0
 801461a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2200      	movs	r2, #0
 8014622:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	2200      	movs	r2, #0
 801462a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	2200      	movs	r2, #0
 8014632:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	2200      	movs	r2, #0
 801463a:	671a      	str	r2, [r3, #112]	; 0x70
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2200      	movs	r2, #0
 8014640:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014644:	4a12      	ldr	r2, [pc, #72]	; (8014690 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801464a:	4a12      	ldr	r2, [pc, #72]	; (8014694 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801464c:	8b3b      	ldrh	r3, [r7, #24]
 801464e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014650:	4a11      	ldr	r2, [pc, #68]	; (8014698 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014652:	8bbb      	ldrh	r3, [r7, #28]
 8014654:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014656:	4b11      	ldr	r3, [pc, #68]	; (801469c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8014658:	2200      	movs	r2, #0
 801465a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801465c:	4b0d      	ldr	r3, [pc, #52]	; (8014694 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801465e:	881a      	ldrh	r2, [r3, #0]
 8014660:	4b0f      	ldr	r3, [pc, #60]	; (80146a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014662:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014664:	4b0c      	ldr	r3, [pc, #48]	; (8014698 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014666:	881a      	ldrh	r2, [r3, #0]
 8014668:	4b0e      	ldr	r3, [pc, #56]	; (80146a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801466a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801466c:	8b3a      	ldrh	r2, [r7, #24]
 801466e:	8bbb      	ldrh	r3, [r7, #28]
 8014670:	429a      	cmp	r2, r3
 8014672:	d301      	bcc.n	8014678 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8014674:	2200      	movs	r2, #0
 8014676:	e000      	b.n	801467a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8014678:	2201      	movs	r2, #1
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	4618      	mov	r0, r3
 8014684:	3710      	adds	r7, #16
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
 801468a:	bf00      	nop
 801468c:	080278ec 	.word	0x080278ec
 8014690:	2000bd6c 	.word	0x2000bd6c
 8014694:	2000bd60 	.word	0x2000bd60
 8014698:	2000bd62 	.word	0x2000bd62
 801469c:	2000bd64 	.word	0x2000bd64
 80146a0:	2000bd66 	.word	0x2000bd66
 80146a4:	2000bd68 	.word	0x2000bd68

080146a8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7fb faeb 	bl	800fc90 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80146ba:	bf00      	nop
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
	...

080146c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b086      	sub	sp, #24
 80146c8:	af02      	add	r7, sp, #8
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	607a      	str	r2, [r7, #4]
 80146d0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	687a      	ldr	r2, [r7, #4]
 80146dc:	68b9      	ldr	r1, [r7, #8]
 80146de:	f7ff feaf 	bl	8014440 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80146e2:	4a04      	ldr	r2, [pc, #16]	; (80146f4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	601a      	str	r2, [r3, #0]
    {

    }
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	4618      	mov	r0, r3
 80146ec:	3710      	adds	r7, #16
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	08026dfc 	.word	0x08026dfc

080146f8 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80146f8:	b580      	push	{r7, lr}
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	4801      	ldr	r0, [pc, #4]	; (8014704 <__tcf_0+0xc>)
 80146fe:	f000 f9dd 	bl	8014abc <_ZN12FrontendHeapD1Ev>
 8014702:	bd80      	pop	{r7, pc}
 8014704:	20008708 	.word	0x20008708

08014708 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014708:	b580      	push	{r7, lr}
 801470a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801470c:	4b08      	ldr	r3, [pc, #32]	; (8014730 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	f003 0301 	and.w	r3, r3, #1
 8014714:	2b00      	cmp	r3, #0
 8014716:	d108      	bne.n	801472a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8014718:	4806      	ldr	r0, [pc, #24]	; (8014734 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801471a:	f000 f831 	bl	8014780 <_ZN12FrontendHeapC1Ev>
 801471e:	4b04      	ldr	r3, [pc, #16]	; (8014730 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014720:	2201      	movs	r2, #1
 8014722:	601a      	str	r2, [r3, #0]
 8014724:	4804      	ldr	r0, [pc, #16]	; (8014738 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8014726:	f010 fb67 	bl	8024df8 <atexit>
        return instance;
 801472a:	4b02      	ldr	r3, [pc, #8]	; (8014734 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 801472c:	4618      	mov	r0, r3
 801472e:	bd80      	pop	{r7, pc}
 8014730:	2000b060 	.word	0x2000b060
 8014734:	20008708 	.word	0x20008708
 8014738:	080146f9 	.word	0x080146f9

0801473c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	4a05      	ldr	r2, [pc, #20]	; (801475c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	601a      	str	r2, [r3, #0]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	f7ff fe97 	bl	8014480 <_ZN8touchgfx7MVPHeapD1Ev>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	4618      	mov	r0, r3
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	08026dfc 	.word	0x08026dfc

08014760 <_ZN16FrontendHeapBaseD0Ev>:
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f7ff ffe7 	bl	801473c <_ZN16FrontendHeapBaseD1Ev>
 801476e:	2114      	movs	r1, #20
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f010 faf8 	bl	8024d66 <_ZdlPvj>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	4618      	mov	r0, r3
 801477a:	3708      	adds	r7, #8
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014780:	b5b0      	push	{r4, r5, r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af02      	add	r7, sp, #8
 8014786:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f103 0414 	add.w	r4, r3, #20
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f242 72f0 	movw	r2, #10224	; 0x27f0
 801479c:	441a      	add	r2, r3
 801479e:	6879      	ldr	r1, [r7, #4]
 80147a0:	f642 0304 	movw	r3, #10244	; 0x2804
 80147a4:	440b      	add	r3, r1
 80147a6:	9300      	str	r3, [sp, #0]
 80147a8:	4613      	mov	r3, r2
 80147aa:	462a      	mov	r2, r5
 80147ac:	4621      	mov	r1, r4
 80147ae:	f7ff ff89 	bl	80146c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80147b2:	4a1a      	ldr	r2, [pc, #104]	; (801481c <_ZN12FrontendHeapC1Ev+0x9c>)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	601a      	str	r2, [r3, #0]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	3314      	adds	r3, #20
 80147bc:	4618      	mov	r0, r3
 80147be:	f000 f8df 	bl	8014980 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	332c      	adds	r3, #44	; 0x2c
 80147c6:	4618      	mov	r0, r3
 80147c8:	f000 f90e 	bl	80149e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	f242 73f0 	movw	r3, #10224	; 0x27f0
 80147d2:	4413      	add	r3, r2
 80147d4:	4618      	mov	r0, r3
 80147d6:	f000 f93d 	bl	8014a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	f642 0304 	movw	r3, #10244	; 0x2804
 80147e0:	4413      	add	r3, r2
 80147e2:	687a      	ldr	r2, [r7, #4]
 80147e4:	f642 1154 	movw	r1, #10580	; 0x2954
 80147e8:	4411      	add	r1, r2
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7fe f8cd 	bl	801298c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	f642 1354 	movw	r3, #10580	; 0x2954
 80147f8:	4413      	add	r3, r2
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fe fdc8 	bl	8013390 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	f642 0304 	movw	r3, #10244	; 0x2804
 8014808:	4413      	add	r3, r2
 801480a:	4619      	mov	r1, r3
 801480c:	f7ff ff4c 	bl	80146a8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	4618      	mov	r0, r3
 8014814:	3708      	adds	r7, #8
 8014816:	46bd      	mov	sp, r7
 8014818:	bdb0      	pop	{r4, r5, r7, pc}
 801481a:	bf00      	nop
 801481c:	08026d4c 	.word	0x08026d4c

08014820 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
    {
 8014828:	4a05      	ldr	r2, [pc, #20]	; (8014840 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	601a      	str	r2, [r3, #0]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	4618      	mov	r0, r3
 8014832:	f7ff fe45 	bl	80144c0 <_ZN8touchgfx3LCDD1Ev>
    }
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	4618      	mov	r0, r3
 801483a:	3708      	adds	r7, #8
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	08029a40 	.word	0x08029a40

08014844 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
    }
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7ff ffe7 	bl	8014820 <_ZN8touchgfx8LCD24bppD1Ev>
 8014852:	2158      	movs	r1, #88	; 0x58
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f010 fa86 	bl	8024d66 <_ZdlPvj>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4618      	mov	r0, r3
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014864:	b580      	push	{r7, lr}
 8014866:	b086      	sub	sp, #24
 8014868:	af02      	add	r7, sp, #8
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	607a      	str	r2, [r7, #4]
 8014870:	603b      	str	r3, [r7, #0]
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	8bbb      	ldrh	r3, [r7, #28]
 8014876:	9301      	str	r3, [sp, #4]
 8014878:	8b3b      	ldrh	r3, [r7, #24]
 801487a:	9300      	str	r3, [sp, #0]
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	68b9      	ldr	r1, [r7, #8]
 8014882:	f7ff fe73 	bl	801456c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014886:	4a04      	ldr	r2, [pc, #16]	; (8014898 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	601a      	str	r2, [r3, #0]
    }
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	4618      	mov	r0, r3
 8014890:	3710      	adds	r7, #16
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	08026e20 	.word	0x08026e20

0801489c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801489c:	b580      	push	{r7, lr}
 801489e:	b086      	sub	sp, #24
 80148a0:	af02      	add	r7, sp, #8
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
 80148a8:	603b      	str	r3, [r7, #0]
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	8bbb      	ldrh	r3, [r7, #28]
 80148ae:	9301      	str	r3, [sp, #4]
 80148b0:	8b3b      	ldrh	r3, [r7, #24]
 80148b2:	9300      	str	r3, [sp, #0]
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	68b9      	ldr	r1, [r7, #8]
 80148ba:	f7ff ffd3 	bl	8014864 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80148be:	4a04      	ldr	r2, [pc, #16]	; (80148d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	601a      	str	r2, [r3, #0]
    }
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	4618      	mov	r0, r3
 80148c8:	3710      	adds	r7, #16
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	08026b4c 	.word	0x08026b4c

080148d4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80148d4:	b480      	push	{r7}
 80148d6:	b083      	sub	sp, #12
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	4a04      	ldr	r2, [pc, #16]	; (80148f0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	601a      	str	r2, [r3, #0]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	4618      	mov	r0, r3
 80148e6:	370c      	adds	r7, #12
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr
 80148f0:	08026b34 	.word	0x08026b34

080148f4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	4618      	mov	r0, r3
 8014900:	f7ff ffe8 	bl	80148d4 <_ZN8touchgfx15TouchControllerC1Ev>
 8014904:	4a03      	ldr	r2, [pc, #12]	; (8014914 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	4618      	mov	r0, r3
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	08026b1c 	.word	0x08026b1c

08014918 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8014918:	b590      	push	{r4, r7, lr}
 801491a:	b085      	sub	sp, #20
 801491c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801491e:	f7fd ff11 	bl	8012744 <_ZN14BitmapDatabase11getInstanceEv>
 8014922:	4604      	mov	r4, r0
 8014924:	f7fd ff18 	bl	8012758 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014928:	4603      	mov	r3, r0
 801492a:	4619      	mov	r1, r3
 801492c:	2300      	movs	r3, #0
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	2300      	movs	r3, #0
 8014932:	2200      	movs	r2, #0
 8014934:	4620      	mov	r0, r4
 8014936:	f006 fcdb 	bl	801b2f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801493a:	4809      	ldr	r0, [pc, #36]	; (8014960 <touchgfx_init+0x48>)
 801493c:	f7ff fd70 	bl	8014420 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014940:	2000      	movs	r0, #0
 8014942:	f7fd ff2d 	bl	80127a0 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014946:	4807      	ldr	r0, [pc, #28]	; (8014964 <touchgfx_init+0x4c>)
 8014948:	f006 fc20 	bl	801b18c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 801494c:	f7ff fedc 	bl	8014708 <_ZN12FrontendHeap11getInstanceEv>
 8014950:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014952:	4805      	ldr	r0, [pc, #20]	; (8014968 <touchgfx_init+0x50>)
 8014954:	f7fe ffda 	bl	801390c <_ZN11TouchGFXHAL10initializeEv>
}
 8014958:	bf00      	nop
 801495a:	370c      	adds	r7, #12
 801495c:	46bd      	mov	sp, r7
 801495e:	bd90      	pop	{r4, r7, pc}
 8014960:	2000bce0 	.word	0x2000bce0
 8014964:	20000054 	.word	0x20000054
 8014968:	2000bce4 	.word	0x2000bce4

0801496c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 801496c:	b580      	push	{r7, lr}
 801496e:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014970:	4802      	ldr	r0, [pc, #8]	; (801497c <touchgfx_taskEntry+0x10>)
 8014972:	f001 fa06 	bl	8015d82 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8014976:	bf00      	nop
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	2000bce4 	.word	0x2000bce4

08014980 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	4618      	mov	r0, r3
 801498c:	f000 fc76 	bl	801527c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014990:	4a03      	ldr	r2, [pc, #12]	; (80149a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	601a      	str	r2, [r3, #0]
    {
    }
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	4618      	mov	r0, r3
 801499a:	3708      	adds	r7, #8
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	08026dc8 	.word	0x08026dc8

080149a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
    {
    }
 80149ac:	4a05      	ldr	r2, [pc, #20]	; (80149c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	601a      	str	r2, [r3, #0]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4618      	mov	r0, r3
 80149b6:	f000 fc5f 	bl	8015278 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	4618      	mov	r0, r3
 80149be:	3708      	adds	r7, #8
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	08026dc8 	.word	0x08026dc8

080149c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b082      	sub	sp, #8
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
    }
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f7ff ffe7 	bl	80149a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80149d6:	2118      	movs	r1, #24
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f010 f9c4 	bl	8024d66 <_ZdlPvj>
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	4618      	mov	r0, r3
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	4618      	mov	r0, r3
 80149f4:	f000 fc42 	bl	801527c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80149f8:	4a03      	ldr	r2, [pc, #12]	; (8014a08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	601a      	str	r2, [r3, #0]
    }
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	4618      	mov	r0, r3
 8014a02:	3708      	adds	r7, #8
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}
 8014a08:	08026d94 	.word	0x08026d94

08014a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
    }
 8014a14:	4a05      	ldr	r2, [pc, #20]	; (8014a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	601a      	str	r2, [r3, #0]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f000 fc2b 	bl	8015278 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	4618      	mov	r0, r3
 8014a26:	3708      	adds	r7, #8
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	08026d94 	.word	0x08026d94

08014a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
    }
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7ff ffe7 	bl	8014a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014a3e:	f242 71c4 	movw	r1, #10180	; 0x27c4
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f010 f98f 	bl	8024d66 <_ZdlPvj>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3708      	adds	r7, #8
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}
	...

08014a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f000 fc0c 	bl	801527c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014a64:	4a03      	ldr	r2, [pc, #12]	; (8014a74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	601a      	str	r2, [r3, #0]
    }
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3708      	adds	r7, #8
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}
 8014a74:	08026d60 	.word	0x08026d60

08014a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b082      	sub	sp, #8
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
    }
 8014a80:	4a05      	ldr	r2, [pc, #20]	; (8014a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	601a      	str	r2, [r3, #0]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f000 fbf5 	bl	8015278 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	4618      	mov	r0, r3
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	08026d60 	.word	0x08026d60

08014a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
    }
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f7ff ffe7 	bl	8014a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014aaa:	2114      	movs	r1, #20
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f010 f95a 	bl	8024d66 <_ZdlPvj>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	4a11      	ldr	r2, [pc, #68]	; (8014b0c <_ZN12FrontendHeapD1Ev+0x50>)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	601a      	str	r2, [r3, #0]
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	f642 0304 	movw	r3, #10244	; 0x2804
 8014ad0:	4413      	add	r3, r2
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fd ff24 	bl	8012920 <_ZN19FrontendApplicationD1Ev>
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	f242 73f0 	movw	r3, #10224	; 0x27f0
 8014ade:	4413      	add	r3, r2
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7ff ffc9 	bl	8014a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	332c      	adds	r3, #44	; 0x2c
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7ff ff8e 	bl	8014a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	3314      	adds	r3, #20
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7ff ff55 	bl	80149a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7ff fe1d 	bl	801473c <_ZN16FrontendHeapBaseD1Ev>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	4618      	mov	r0, r3
 8014b06:	3708      	adds	r7, #8
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	08026d4c 	.word	0x08026d4c

08014b10 <_ZN12FrontendHeapD0Ev>:
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f7ff ffcf 	bl	8014abc <_ZN12FrontendHeapD1Ev>
 8014b1e:	f642 1158 	movw	r1, #10584	; 0x2958
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f010 f91f 	bl	8024d66 <_ZdlPvj>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3708      	adds	r7, #8
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
	...

08014b34 <_Z41__static_initialization_and_destruction_0ii>:
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af02      	add	r7, sp, #8
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d119      	bne.n	8014b78 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	d114      	bne.n	8014b78 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014b4e:	4818      	ldr	r0, [pc, #96]	; (8014bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014b50:	f7ff fed0 	bl	80148f4 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8014b54:	4817      	ldr	r0, [pc, #92]	; (8014bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014b56:	f7ff f965 	bl	8013e24 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8014b5a:	4817      	ldr	r0, [pc, #92]	; (8014bb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014b5c:	f008 fdee 	bl	801d73c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8014b60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b64:	9301      	str	r3, [sp, #4]
 8014b66:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	4b10      	ldr	r3, [pc, #64]	; (8014bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014b6e:	4a12      	ldr	r2, [pc, #72]	; (8014bb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014b70:	4910      	ldr	r1, [pc, #64]	; (8014bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014b72:	4812      	ldr	r0, [pc, #72]	; (8014bbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014b74:	f7ff fe92 	bl	801489c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d113      	bne.n	8014ba6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b84:	4293      	cmp	r3, r2
 8014b86:	d10e      	bne.n	8014ba6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014b88:	480c      	ldr	r0, [pc, #48]	; (8014bbc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014b8a:	f7fe ff25 	bl	80139d8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014b8e:	480c      	ldr	r0, [pc, #48]	; (8014bc0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014b90:	f7fa f986 	bl	800eea0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014b94:	4808      	ldr	r0, [pc, #32]	; (8014bb8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014b96:	f7ff fe43 	bl	8014820 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8014b9a:	4806      	ldr	r0, [pc, #24]	; (8014bb4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014b9c:	f7ff f96c 	bl	8013e78 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8014ba0:	4803      	ldr	r0, [pc, #12]	; (8014bb0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014ba2:	f7fe fc8f 	bl	80134c4 <_ZN20STM32TouchControllerD1Ev>
}
 8014ba6:	bf00      	nop
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	2000b064 	.word	0x2000b064
 8014bb4:	2000b068 	.word	0x2000b068
 8014bb8:	2000bc88 	.word	0x2000bc88
 8014bbc:	2000bce4 	.word	0x2000bce4
 8014bc0:	20000054 	.word	0x20000054

08014bc4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014bcc:	2301      	movs	r3, #1
    }
 8014bce:	4618      	mov	r0, r3
 8014bd0:	370c      	adds	r7, #12
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd8:	4770      	bx	lr

08014bda <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8014bda:	b480      	push	{r7}
 8014bdc:	b083      	sub	sp, #12
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014be2:	230c      	movs	r3, #12
    }
 8014be4:	4618      	mov	r0, r3
 8014be6:	370c      	adds	r7, #12
 8014be8:	46bd      	mov	sp, r7
 8014bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bee:	4770      	bx	lr

08014bf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014bf0:	b480      	push	{r7}
 8014bf2:	b083      	sub	sp, #12
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014bfc:	887a      	ldrh	r2, [r7, #2]
 8014bfe:	4613      	mov	r3, r2
 8014c00:	005b      	lsls	r3, r3, #1
 8014c02:	4413      	add	r3, r2
 8014c04:	009b      	lsls	r3, r3, #2
 8014c06:	3308      	adds	r3, #8
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	4413      	add	r3, r2
    }
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	370c      	adds	r7, #12
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr

08014c18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	460b      	mov	r3, r1
 8014c22:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014c24:	887a      	ldrh	r2, [r7, #2]
 8014c26:	4613      	mov	r3, r2
 8014c28:	005b      	lsls	r3, r3, #1
 8014c2a:	4413      	add	r3, r2
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	3308      	adds	r3, #8
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	4413      	add	r3, r2
    }
 8014c34:	4618      	mov	r0, r3
 8014c36:	370c      	adds	r7, #12
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr

08014c40 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014c40:	b480      	push	{r7}
 8014c42:	b083      	sub	sp, #12
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014c48:	2301      	movs	r3, #1
    }
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	370c      	adds	r7, #12
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr

08014c56 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014c56:	b480      	push	{r7}
 8014c58:	b083      	sub	sp, #12
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014c5e:	f242 73bc 	movw	r3, #10172	; 0x27bc
    }
 8014c62:	4618      	mov	r0, r3
 8014c64:	370c      	adds	r7, #12
 8014c66:	46bd      	mov	sp, r7
 8014c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6c:	4770      	bx	lr

08014c6e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014c6e:	b480      	push	{r7}
 8014c70:	b083      	sub	sp, #12
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	6078      	str	r0, [r7, #4]
 8014c76:	460b      	mov	r3, r1
 8014c78:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014c7a:	887b      	ldrh	r3, [r7, #2]
 8014c7c:	f242 72bc 	movw	r2, #10172	; 0x27bc
 8014c80:	fb02 f303 	mul.w	r3, r2, r3
 8014c84:	3308      	adds	r3, #8
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	4413      	add	r3, r2
    }
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	370c      	adds	r7, #12
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr

08014c96 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014c96:	b480      	push	{r7}
 8014c98:	b083      	sub	sp, #12
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014ca2:	887b      	ldrh	r3, [r7, #2]
 8014ca4:	f242 72bc 	movw	r2, #10172	; 0x27bc
 8014ca8:	fb02 f303 	mul.w	r3, r2, r3
 8014cac:	3308      	adds	r3, #8
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	4413      	add	r3, r2
    }
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	370c      	adds	r7, #12
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbc:	4770      	bx	lr

08014cbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014cbe:	b480      	push	{r7}
 8014cc0:	b083      	sub	sp, #12
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014cc6:	2301      	movs	r3, #1
    }
 8014cc8:	4618      	mov	r0, r3
 8014cca:	370c      	adds	r7, #12
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr

08014cd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014cdc:	2310      	movs	r3, #16
    }
 8014cde:	4618      	mov	r0, r3
 8014ce0:	370c      	adds	r7, #12
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr

08014cea <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014cea:	b480      	push	{r7}
 8014cec:	b083      	sub	sp, #12
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014cf6:	887b      	ldrh	r3, [r7, #2]
 8014cf8:	011b      	lsls	r3, r3, #4
 8014cfa:	3308      	adds	r3, #8
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	4413      	add	r3, r2
    }
 8014d00:	4618      	mov	r0, r3
 8014d02:	370c      	adds	r7, #12
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	460b      	mov	r3, r1
 8014d16:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014d18:	887b      	ldrh	r3, [r7, #2]
 8014d1a:	011b      	lsls	r3, r3, #4
 8014d1c:	3308      	adds	r3, #8
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	4413      	add	r3, r2
    }
 8014d22:	4618      	mov	r0, r3
 8014d24:	370c      	adds	r7, #12
 8014d26:	46bd      	mov	sp, r7
 8014d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2c:	4770      	bx	lr

08014d2e <_GLOBAL__sub_I_touchgfx_init>:
 8014d2e:	b580      	push	{r7, lr}
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d36:	2001      	movs	r0, #1
 8014d38:	f7ff fefc 	bl	8014b34 <_Z41__static_initialization_and_destruction_0ii>
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <_GLOBAL__sub_D_touchgfx_init>:
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d46:	2000      	movs	r0, #0
 8014d48:	f7ff fef4 	bl	8014b34 <_Z41__static_initialization_and_destruction_0ii>
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014d4e:	b580      	push	{r7, lr}
 8014d50:	b082      	sub	sp, #8
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	3318      	adds	r3, #24
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	4798      	blx	r3
    }
 8014d62:	bf00      	nop
 8014d64:	3708      	adds	r7, #8
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}

08014d6a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8014d6a:	b480      	push	{r7}
 8014d6c:	b083      	sub	sp, #12
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
 8014d72:	460b      	mov	r3, r1
 8014d74:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	78fa      	ldrb	r2, [r7, #3]
 8014d7a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014d7e:	bf00      	nop
 8014d80:	370c      	adds	r7, #12
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr

08014d8a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014d8a:	b480      	push	{r7}
 8014d8c:	b083      	sub	sp, #12
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014d98:	3301      	adds	r3, #1
 8014d9a:	b2da      	uxtb	r2, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014da2:	bf00      	nop
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr
	...

08014db0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014dbc:	78fb      	ldrb	r3, [r7, #3]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d002      	beq.n	8014dc8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014dc2:	78fb      	ldrb	r3, [r7, #3]
 8014dc4:	2b02      	cmp	r3, #2
 8014dc6:	d105      	bne.n	8014dd4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	78fa      	ldrb	r2, [r7, #3]
 8014dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	e027      	b.n	8014e24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014dd4:	78fb      	ldrb	r3, [r7, #3]
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d123      	bne.n	8014e22 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d014      	beq.n	8014e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	3380      	adds	r3, #128	; 0x80
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	4798      	blx	r3
 8014dee:	4603      	mov	r3, r0
 8014df0:	461a      	mov	r2, r3
 8014df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d008      	beq.n	8014e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014dfa:	4b0c      	ldr	r3, [pc, #48]	; (8014e2c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014dfc:	781b      	ldrb	r3, [r3, #0]
 8014dfe:	f083 0301 	eor.w	r3, r3, #1
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d001      	beq.n	8014e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014e08:	2301      	movs	r3, #1
 8014e0a:	e000      	b.n	8014e0e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d005      	beq.n	8014e1e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	78fa      	ldrb	r2, [r7, #3]
 8014e16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	e002      	b.n	8014e24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	e000      	b.n	8014e24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014e22:	2300      	movs	r3, #0
    }
 8014e24:	4618      	mov	r0, r3
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	2000bd6a 	.word	0x2000bd6a

08014e30 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	683a      	ldr	r2, [r7, #0]
 8014e3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014e40:	bf00      	nop
 8014e42:	370c      	adds	r7, #12
 8014e44:	46bd      	mov	sp, r7
 8014e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4a:	4770      	bx	lr

08014e4c <__NVIC_EnableIRQ>:
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b083      	sub	sp, #12
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	4603      	mov	r3, r0
 8014e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	db0d      	blt.n	8014e7a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	f003 021f 	and.w	r2, r3, #31
 8014e68:	4907      	ldr	r1, [pc, #28]	; (8014e88 <__NVIC_EnableIRQ+0x3c>)
 8014e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e6e:	095b      	lsrs	r3, r3, #5
 8014e70:	2001      	movs	r0, #1
 8014e72:	fa00 f202 	lsl.w	r2, r0, r2
 8014e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014e7a:	bf00      	nop
 8014e7c:	370c      	adds	r7, #12
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop
 8014e88:	e000e100 	.word	0xe000e100

08014e8c <__NVIC_DisableIRQ>:
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	4603      	mov	r3, r0
 8014e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	db12      	blt.n	8014ec4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ea2:	b2db      	uxtb	r3, r3
 8014ea4:	f003 021f 	and.w	r2, r3, #31
 8014ea8:	4909      	ldr	r1, [pc, #36]	; (8014ed0 <__NVIC_DisableIRQ+0x44>)
 8014eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eae:	095b      	lsrs	r3, r3, #5
 8014eb0:	2001      	movs	r0, #1
 8014eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8014eb6:	3320      	adds	r3, #32
 8014eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014ec0:	f3bf 8f6f 	isb	sy
}
 8014ec4:	bf00      	nop
 8014ec6:	370c      	adds	r7, #12
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ece:	4770      	bx	lr
 8014ed0:	e000e100 	.word	0xe000e100

08014ed4 <__NVIC_SetPriority>:
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	4603      	mov	r3, r0
 8014edc:	6039      	str	r1, [r7, #0]
 8014ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	db0c      	blt.n	8014f02 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	b2db      	uxtb	r3, r3
 8014eec:	4a0e      	ldr	r2, [pc, #56]	; (8014f28 <__NVIC_SetPriority+0x54>)
 8014eee:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014ef2:	4608      	mov	r0, r1
 8014ef4:	011b      	lsls	r3, r3, #4
 8014ef6:	b2d9      	uxtb	r1, r3
 8014ef8:	1813      	adds	r3, r2, r0
 8014efa:	460a      	mov	r2, r1
 8014efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014f00:	e00c      	b.n	8014f1c <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	b2da      	uxtb	r2, r3
 8014f06:	4909      	ldr	r1, [pc, #36]	; (8014f2c <__NVIC_SetPriority+0x58>)
 8014f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f0c:	b2db      	uxtb	r3, r3
 8014f0e:	f003 030f 	and.w	r3, r3, #15
 8014f12:	3b04      	subs	r3, #4
 8014f14:	0112      	lsls	r2, r2, #4
 8014f16:	b2d2      	uxtb	r2, r2
 8014f18:	440b      	add	r3, r1
 8014f1a:	761a      	strb	r2, [r3, #24]
}
 8014f1c:	bf00      	nop
 8014f1e:	370c      	adds	r7, #12
 8014f20:	46bd      	mov	sp, r7
 8014f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f26:	4770      	bx	lr
 8014f28:	e000e100 	.word	0xe000e100
 8014f2c:	e000ed00 	.word	0xe000ed00

08014f30 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014f30:	b5b0      	push	{r4, r5, r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f001 f9e6 	bl	801630c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014f40:	687d      	ldr	r5, [r7, #4]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	334c      	adds	r3, #76	; 0x4c
 8014f48:	681c      	ldr	r4, [r3, #0]
 8014f4a:	f003 ff43 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	4619      	mov	r1, r3
 8014f52:	4628      	mov	r0, r5
 8014f54:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	490d      	ldr	r1, [pc, #52]	; (8014f90 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7ff ff68 	bl	8014e30 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2101      	movs	r1, #1
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7ff ff23 	bl	8014db0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	3374      	adds	r3, #116	; 0x74
 8014f72:	681c      	ldr	r4, [r3, #0]
 8014f74:	2300      	movs	r3, #0
 8014f76:	2200      	movs	r2, #0
 8014f78:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014f7c:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2101      	movs	r1, #1
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7ff fef1 	bl	8014d6a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014f88:	bf00      	nop
 8014f8a:	3708      	adds	r7, #8
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8014f90:	08013b71 	.word	0x08013b71

08014f94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014f9c:	2109      	movs	r1, #9
 8014f9e:	205a      	movs	r0, #90	; 0x5a
 8014fa0:	f7ff ff98 	bl	8014ed4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014fa4:	2109      	movs	r1, #9
 8014fa6:	2058      	movs	r0, #88	; 0x58
 8014fa8:	f7ff ff94 	bl	8014ed4 <__NVIC_SetPriority>
}
 8014fac:	bf00      	nop
 8014fae:	3708      	adds	r7, #8
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014fbc:	205a      	movs	r0, #90	; 0x5a
 8014fbe:	f7ff ff45 	bl	8014e4c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014fc2:	2058      	movs	r0, #88	; 0x58
 8014fc4:	f7ff ff42 	bl	8014e4c <__NVIC_EnableIRQ>
}
 8014fc8:	bf00      	nop
 8014fca:	3708      	adds	r7, #8
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}

08014fd0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014fd8:	205a      	movs	r0, #90	; 0x5a
 8014fda:	f7ff ff57 	bl	8014e8c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014fde:	2058      	movs	r0, #88	; 0x58
 8014fe0:	f7ff ff54 	bl	8014e8c <__NVIC_DisableIRQ>
}
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014fec:	b480      	push	{r7}
 8014fee:	b083      	sub	sp, #12
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014ff4:	4b11      	ldr	r3, [pc, #68]	; (801503c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014ff6:	68db      	ldr	r3, [r3, #12]
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	3b01      	subs	r3, #1
 8015002:	b29a      	uxth	r2, r3
 8015004:	4b0e      	ldr	r3, [pc, #56]	; (8015040 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015006:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015008:	4b0c      	ldr	r3, [pc, #48]	; (801503c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801500a:	691b      	ldr	r3, [r3, #16]
 801500c:	b29b      	uxth	r3, r3
 801500e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015012:	b29b      	uxth	r3, r3
 8015014:	3b01      	subs	r3, #1
 8015016:	b29a      	uxth	r2, r3
 8015018:	4b0a      	ldr	r3, [pc, #40]	; (8015044 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801501a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801501c:	4b08      	ldr	r3, [pc, #32]	; (8015040 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801501e:	881a      	ldrh	r2, [r3, #0]
 8015020:	4b06      	ldr	r3, [pc, #24]	; (801503c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015022:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015024:	4b05      	ldr	r3, [pc, #20]	; (801503c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015028:	4a04      	ldr	r2, [pc, #16]	; (801503c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801502a:	f043 0301 	orr.w	r3, r3, #1
 801502e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015030:	bf00      	nop
 8015032:	370c      	adds	r7, #12
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr
 801503c:	40016800 	.word	0x40016800
 8015040:	2000bd5c 	.word	0x2000bd5c
 8015044:	2000bd5e 	.word	0x2000bd5e

08015048 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015050:	4b03      	ldr	r3, [pc, #12]	; (8015060 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015054:	4618      	mov	r0, r3
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr
 8015060:	40016884 	.word	0x40016884

08015064 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801506e:	4a06      	ldr	r2, [pc, #24]	; (8015088 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015074:	4b05      	ldr	r3, [pc, #20]	; (801508c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8015076:	2201      	movs	r2, #1
 8015078:	625a      	str	r2, [r3, #36]	; 0x24
}
 801507a:	bf00      	nop
 801507c:	370c      	adds	r7, #12
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop
 8015088:	40016884 	.word	0x40016884
 801508c:	40016800 	.word	0x40016800

08015090 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6839      	ldr	r1, [r7, #0]
 801509e:	4618      	mov	r0, r3
 80150a0:	f000 fe44 	bl	8015d2c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80150a4:	bf00      	nop
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80150ac:	b480      	push	{r7}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80150b4:	4b0d      	ldr	r3, [pc, #52]	; (80150ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80150b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150b8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80150ba:	4b0c      	ldr	r3, [pc, #48]	; (80150ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	3301      	adds	r3, #1
 80150c8:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80150ca:	89fa      	ldrh	r2, [r7, #14]
 80150cc:	89bb      	ldrh	r3, [r7, #12]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d201      	bcs.n	80150d6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80150d2:	2300      	movs	r3, #0
 80150d4:	e003      	b.n	80150de <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80150d6:	89fa      	ldrh	r2, [r7, #14]
 80150d8:	89bb      	ldrh	r3, [r7, #12]
 80150da:	1ad3      	subs	r3, r2, r3
 80150dc:	b29b      	uxth	r3, r3
    }
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3714      	adds	r7, #20
 80150e2:	46bd      	mov	sp, r7
 80150e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	40016800 	.word	0x40016800

080150f0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80150f8:	4b1a      	ldr	r3, [pc, #104]	; (8015164 <HAL_LTDC_LineEventCallback+0x74>)
 80150fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150fc:	4a1a      	ldr	r2, [pc, #104]	; (8015168 <HAL_LTDC_LineEventCallback+0x78>)
 80150fe:	8812      	ldrh	r2, [r2, #0]
 8015100:	4293      	cmp	r3, r2
 8015102:	bf0c      	ite	eq
 8015104:	2301      	moveq	r3, #1
 8015106:	2300      	movne	r3, #0
 8015108:	b2db      	uxtb	r3, r3
 801510a:	2b00      	cmp	r3, #0
 801510c:	d017      	beq.n	801513e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801510e:	4b17      	ldr	r3, [pc, #92]	; (801516c <HAL_LTDC_LineEventCallback+0x7c>)
 8015110:	881b      	ldrh	r3, [r3, #0]
 8015112:	4619      	mov	r1, r3
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f7f0 feb9 	bl	8005e8c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801511a:	f7fa fb89 	bl	800f830 <_ZN8touchgfx3HAL11getInstanceEv>
 801511e:	4603      	mov	r3, r0
 8015120:	4618      	mov	r0, r3
 8015122:	f7ff fe32 	bl	8014d8a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015126:	f7fe fce5 	bl	8013af4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801512a:	f7fa fb81 	bl	800f830 <_ZN8touchgfx3HAL11getInstanceEv>
 801512e:	4603      	mov	r3, r0
 8015130:	4618      	mov	r0, r3
 8015132:	f001 fb73 	bl	801681c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015136:	2000      	movs	r0, #0
 8015138:	f7fe f9e6 	bl	8013508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801513c:	e00e      	b.n	801515c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801513e:	4b0a      	ldr	r3, [pc, #40]	; (8015168 <HAL_LTDC_LineEventCallback+0x78>)
 8015140:	881b      	ldrh	r3, [r3, #0]
 8015142:	4619      	mov	r1, r3
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7f0 fea1 	bl	8005e8c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801514a:	2000      	movs	r0, #0
 801514c:	f7fe f9e7 	bl	801351e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015150:	f7fa fb6e 	bl	800f830 <_ZN8touchgfx3HAL11getInstanceEv>
 8015154:	4603      	mov	r3, r0
 8015156:	4618      	mov	r0, r3
 8015158:	f7ff fdf9 	bl	8014d4e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801515c:	bf00      	nop
 801515e:	3708      	adds	r7, #8
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	40016800 	.word	0x40016800
 8015168:	2000bd5c 	.word	0x2000bd5c
 801516c:	2000bd5e 	.word	0x2000bd5e

08015170 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015170:	8880      	ldrh	r0, [r0, #4]
 8015172:	4770      	bx	lr

08015174 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015174:	2300      	movs	r3, #0
 8015176:	8083      	strh	r3, [r0, #4]
 8015178:	4770      	bx	lr
	...

0801517c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801517e:	6803      	ldr	r3, [r0, #0]
 8015180:	460e      	mov	r6, r1
 8015182:	2100      	movs	r1, #0
 8015184:	4605      	mov	r5, r0
 8015186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015188:	4798      	blx	r3
 801518a:	4604      	mov	r4, r0
 801518c:	682b      	ldr	r3, [r5, #0]
 801518e:	4628      	mov	r0, r5
 8015190:	1b34      	subs	r4, r6, r4
 8015192:	6a1b      	ldr	r3, [r3, #32]
 8015194:	b2a4      	uxth	r4, r4
 8015196:	4798      	blx	r3
 8015198:	88ab      	ldrh	r3, [r5, #4]
 801519a:	fbb4 f4f0 	udiv	r4, r4, r0
 801519e:	42a3      	cmp	r3, r4
 80151a0:	d805      	bhi.n	80151ae <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80151a2:	4b0e      	ldr	r3, [pc, #56]	; (80151dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80151a4:	211e      	movs	r1, #30
 80151a6:	4a0e      	ldr	r2, [pc, #56]	; (80151e0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80151a8:	480e      	ldr	r0, [pc, #56]	; (80151e4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80151aa:	f00f fe07 	bl	8024dbc <__assert_func>
 80151ae:	682b      	ldr	r3, [r5, #0]
 80151b0:	2100      	movs	r1, #0
 80151b2:	4628      	mov	r0, r5
 80151b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b6:	4798      	blx	r3
 80151b8:	682b      	ldr	r3, [r5, #0]
 80151ba:	4607      	mov	r7, r0
 80151bc:	4628      	mov	r0, r5
 80151be:	6a1b      	ldr	r3, [r3, #32]
 80151c0:	4798      	blx	r3
 80151c2:	1bf3      	subs	r3, r6, r7
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	fbb3 f2f0 	udiv	r2, r3, r0
 80151ca:	fb02 3010 	mls	r0, r2, r0, r3
 80151ce:	b118      	cbz	r0, 80151d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80151d0:	4b05      	ldr	r3, [pc, #20]	; (80151e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80151d2:	211f      	movs	r1, #31
 80151d4:	4a02      	ldr	r2, [pc, #8]	; (80151e0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80151d6:	e7e7      	b.n	80151a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80151d8:	4620      	mov	r0, r4
 80151da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151dc:	08026ecc 	.word	0x08026ecc
 80151e0:	0802703a 	.word	0x0802703a
 80151e4:	08026ee1 	.word	0x08026ee1
 80151e8:	08026f0f 	.word	0x08026f0f

080151ec <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80151ec:	b538      	push	{r3, r4, r5, lr}
 80151ee:	6803      	ldr	r3, [r0, #0]
 80151f0:	460d      	mov	r5, r1
 80151f2:	4604      	mov	r4, r0
 80151f4:	6a1b      	ldr	r3, [r3, #32]
 80151f6:	4798      	blx	r3
 80151f8:	4285      	cmp	r5, r0
 80151fa:	d905      	bls.n	8015208 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80151fc:	4b0c      	ldr	r3, [pc, #48]	; (8015230 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80151fe:	212f      	movs	r1, #47	; 0x2f
 8015200:	4a0c      	ldr	r2, [pc, #48]	; (8015234 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015202:	480d      	ldr	r0, [pc, #52]	; (8015238 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015204:	f00f fdda 	bl	8024dbc <__assert_func>
 8015208:	6823      	ldr	r3, [r4, #0]
 801520a:	4620      	mov	r0, r4
 801520c:	88a5      	ldrh	r5, [r4, #4]
 801520e:	69db      	ldr	r3, [r3, #28]
 8015210:	4798      	blx	r3
 8015212:	4285      	cmp	r5, r0
 8015214:	d303      	bcc.n	801521e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015216:	4b09      	ldr	r3, [pc, #36]	; (801523c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015218:	2130      	movs	r1, #48	; 0x30
 801521a:	4a06      	ldr	r2, [pc, #24]	; (8015234 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801521c:	e7f1      	b.n	8015202 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801521e:	6823      	ldr	r3, [r4, #0]
 8015220:	4620      	mov	r0, r4
 8015222:	88a1      	ldrh	r1, [r4, #4]
 8015224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015226:	4798      	blx	r3
 8015228:	88a3      	ldrh	r3, [r4, #4]
 801522a:	3301      	adds	r3, #1
 801522c:	80a3      	strh	r3, [r4, #4]
 801522e:	bd38      	pop	{r3, r4, r5, pc}
 8015230:	08026f89 	.word	0x08026f89
 8015234:	0802707d 	.word	0x0802707d
 8015238:	08026ee1 	.word	0x08026ee1
 801523c:	08026fa0 	.word	0x08026fa0

08015240 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015240:	b570      	push	{r4, r5, r6, lr}
 8015242:	6803      	ldr	r3, [r0, #0]
 8015244:	4616      	mov	r6, r2
 8015246:	4604      	mov	r4, r0
 8015248:	460d      	mov	r5, r1
 801524a:	6a1b      	ldr	r3, [r3, #32]
 801524c:	4798      	blx	r3
 801524e:	4286      	cmp	r6, r0
 8015250:	d905      	bls.n	801525e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015252:	4b06      	ldr	r3, [pc, #24]	; (801526c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015254:	2139      	movs	r1, #57	; 0x39
 8015256:	4a06      	ldr	r2, [pc, #24]	; (8015270 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015258:	4806      	ldr	r0, [pc, #24]	; (8015274 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801525a:	f00f fdaf 	bl	8024dbc <__assert_func>
 801525e:	6823      	ldr	r3, [r4, #0]
 8015260:	4629      	mov	r1, r5
 8015262:	4620      	mov	r0, r4
 8015264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801526a:	4718      	bx	r3
 801526c:	08026f89 	.word	0x08026f89
 8015270:	08026ff0 	.word	0x08026ff0
 8015274:	08026ee1 	.word	0x08026ee1

08015278 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015278:	4770      	bx	lr
	...

0801527c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801527c:	4a02      	ldr	r2, [pc, #8]	; (8015288 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801527e:	6002      	str	r2, [r0, #0]
 8015280:	2200      	movs	r2, #0
 8015282:	8082      	strh	r2, [r0, #4]
 8015284:	4770      	bx	lr
 8015286:	bf00      	nop
 8015288:	08026fc4 	.word	0x08026fc4

0801528c <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 801528c:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8015290:	4770      	bx	lr

08015292 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8015292:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8015296:	4770      	bx	lr

08015298 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8015298:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 801529c:	4770      	bx	lr

0801529e <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801529e:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 80152a2:	4770      	bx	lr

080152a4 <_ZN8touchgfx11BoxProgressD1Ev>:
 80152a4:	4b03      	ldr	r3, [pc, #12]	; (80152b4 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 80152a6:	b510      	push	{r4, lr}
 80152a8:	4604      	mov	r4, r0
 80152aa:	6003      	str	r3, [r0, #0]
 80152ac:	f000 f8b6 	bl	801541c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80152b0:	4620      	mov	r0, r4
 80152b2:	bd10      	pop	{r4, pc}
 80152b4:	080270c4 	.word	0x080270c4

080152b8 <_ZN8touchgfx11BoxProgressD0Ev>:
 80152b8:	b510      	push	{r4, lr}
 80152ba:	4604      	mov	r4, r0
 80152bc:	f7ff fff2 	bl	80152a4 <_ZN8touchgfx11BoxProgressD1Ev>
 80152c0:	21c0      	movs	r1, #192	; 0xc0
 80152c2:	4620      	mov	r0, r4
 80152c4:	f00f fd4f 	bl	8024d66 <_ZdlPvj>
 80152c8:	4620      	mov	r0, r4
 80152ca:	bd10      	pop	{r4, pc}

080152cc <_ZN8touchgfx11BoxProgressC1Ev>:
 80152cc:	b510      	push	{r4, lr}
 80152ce:	4604      	mov	r4, r0
 80152d0:	f000 f8b8 	bl	8015444 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80152d4:	2201      	movs	r2, #1
 80152d6:	4b16      	ldr	r3, [pc, #88]	; (8015330 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 80152d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80152dc:	f104 0190 	add.w	r1, r4, #144	; 0x90
 80152e0:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 80152e4:	4a13      	ldr	r2, [pc, #76]	; (8015334 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 80152e6:	6023      	str	r3, [r4, #0]
 80152e8:	2300      	movs	r3, #0
 80152ea:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80152ee:	22ff      	movs	r2, #255	; 0xff
 80152f0:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 80152f4:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 80152f8:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 80152fc:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8015300:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8015304:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8015308:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801530c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8015310:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8015314:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8015318:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 801531c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8015320:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8015324:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8015328:	f000 fbb8 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801532c:	4620      	mov	r0, r4
 801532e:	bd10      	pop	{r4, pc}
 8015330:	080270c4 	.word	0x080270c4
 8015334:	0802837c 	.word	0x0802837c

08015338 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8015338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801533c:	4617      	mov	r7, r2
 801533e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8015342:	2200      	movs	r2, #0
 8015344:	4604      	mov	r4, r0
 8015346:	460e      	mov	r6, r1
 8015348:	4698      	mov	r8, r3
 801534a:	4611      	mov	r1, r2
 801534c:	9500      	str	r5, [sp, #0]
 801534e:	3090      	adds	r0, #144	; 0x90
 8015350:	f7fa ff3e 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015354:	4643      	mov	r3, r8
 8015356:	463a      	mov	r2, r7
 8015358:	4631      	mov	r1, r6
 801535a:	4620      	mov	r0, r4
 801535c:	9508      	str	r5, [sp, #32]
 801535e:	b002      	add	sp, #8
 8015360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015364:	f000 b9fa 	b.w	801575c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08015368 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8015368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801536a:	4604      	mov	r4, r0
 801536c:	f000 fa40 	bl	80157f0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8015370:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8015374:	4628      	mov	r0, r5
 8015376:	f004 f95b 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
 801537a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801537e:	2b03      	cmp	r3, #3
 8015380:	d814      	bhi.n	80153ac <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8015382:	e8df f003 	tbb	[pc, r3]
 8015386:	0202      	.short	0x0202
 8015388:	1010      	.short	0x1010
 801538a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801538e:	4620      	mov	r0, r4
 8015390:	f000 fa88 	bl	80158a4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8015394:	b200      	sxth	r0, r0
 8015396:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801539a:	2b03      	cmp	r3, #3
 801539c:	d81a      	bhi.n	80153d4 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801539e:	e8df f003 	tbb	[pc, r3]
 80153a2:	0e07      	.short	0x0e07
 80153a4:	231f      	.short	0x231f
 80153a6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80153aa:	e7f0      	b.n	801538e <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80153ac:	2000      	movs	r0, #0
 80153ae:	e7f2      	b.n	8015396 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 80153b0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	4603      	mov	r3, r0
 80153b8:	2200      	movs	r2, #0
 80153ba:	2100      	movs	r1, #0
 80153bc:	e007      	b.n	80153ce <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 80153be:	8921      	ldrh	r1, [r4, #8]
 80153c0:	2200      	movs	r2, #0
 80153c2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80153c6:	1a09      	subs	r1, r1, r0
 80153c8:	9300      	str	r3, [sp, #0]
 80153ca:	4603      	mov	r3, r0
 80153cc:	b209      	sxth	r1, r1
 80153ce:	4628      	mov	r0, r5
 80153d0:	f7fa fefe 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80153d4:	4628      	mov	r0, r5
 80153d6:	b003      	add	sp, #12
 80153d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153dc:	f004 b928 	b.w	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
 80153e0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80153e4:	9000      	str	r0, [sp, #0]
 80153e6:	e7e7      	b.n	80153b8 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 80153e8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80153ec:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80153f0:	1a12      	subs	r2, r2, r0
 80153f2:	9000      	str	r0, [sp, #0]
 80153f4:	b212      	sxth	r2, r2
 80153f6:	e7e0      	b.n	80153ba <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

080153f8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80153f8:	b570      	push	{r4, r5, r6, lr}
 80153fa:	6803      	ldr	r3, [r0, #0]
 80153fc:	4604      	mov	r4, r0
 80153fe:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8015402:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8015406:	4798      	blx	r3
 8015408:	4601      	mov	r1, r0
 801540a:	462b      	mov	r3, r5
 801540c:	4620      	mov	r0, r4
 801540e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015412:	4718      	bx	r3

08015414 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8015414:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8015418:	4770      	bx	lr
	...

0801541c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 801541c:	4b03      	ldr	r3, [pc, #12]	; (801542c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 801541e:	b510      	push	{r4, lr}
 8015420:	4604      	mov	r4, r0
 8015422:	6003      	str	r3, [r0, #0]
 8015424:	f000 f999 	bl	801575a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8015428:	4620      	mov	r0, r4
 801542a:	bd10      	pop	{r4, pc}
 801542c:	0802719c 	.word	0x0802719c

08015430 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8015430:	b510      	push	{r4, lr}
 8015432:	4604      	mov	r4, r0
 8015434:	f7ff fff2 	bl	801541c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8015438:	2190      	movs	r1, #144	; 0x90
 801543a:	4620      	mov	r0, r4
 801543c:	f00f fc93 	bl	8024d66 <_ZdlPvj>
 8015440:	4620      	mov	r0, r4
 8015442:	bd10      	pop	{r4, pc}

08015444 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8015444:	b510      	push	{r4, lr}
 8015446:	4604      	mov	r4, r0
 8015448:	f000 fa4c 	bl	80158e4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801544c:	4b03      	ldr	r3, [pc, #12]	; (801545c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801544e:	2100      	movs	r1, #0
 8015450:	4620      	mov	r0, r4
 8015452:	6023      	str	r3, [r4, #0]
 8015454:	f7ff ffd0 	bl	80153f8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8015458:	4620      	mov	r0, r4
 801545a:	bd10      	pop	{r4, pc}
 801545c:	0802719c 	.word	0x0802719c

08015460 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8015460:	b570      	push	{r4, r5, r6, lr}
 8015462:	6803      	ldr	r3, [r0, #0]
 8015464:	4604      	mov	r4, r0
 8015466:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 801546a:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801546e:	4798      	blx	r3
 8015470:	4601      	mov	r1, r0
 8015472:	462b      	mov	r3, r5
 8015474:	4620      	mov	r0, r4
 8015476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801547a:	4718      	bx	r3

0801547c <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 801547c:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8015480:	4770      	bx	lr

08015482 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8015482:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8015486:	4770      	bx	lr

08015488 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8015488:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 801548c:	4770      	bx	lr

0801548e <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 801548e:	b507      	push	{r0, r1, r2, lr}
 8015490:	ab02      	add	r3, sp, #8
 8015492:	30bc      	adds	r0, #188	; 0xbc
 8015494:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8015498:	4619      	mov	r1, r3
 801549a:	f002 f9a9 	bl	80177f0 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801549e:	b003      	add	sp, #12
 80154a0:	f85d fb04 	ldr.w	pc, [sp], #4

080154a4 <_ZN8touchgfx13ImageProgressD1Ev>:
 80154a4:	4b03      	ldr	r3, [pc, #12]	; (80154b4 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 80154a6:	b510      	push	{r4, lr}
 80154a8:	4604      	mov	r4, r0
 80154aa:	6003      	str	r3, [r0, #0]
 80154ac:	f7ff ffb6 	bl	801541c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80154b0:	4620      	mov	r0, r4
 80154b2:	bd10      	pop	{r4, pc}
 80154b4:	080272c8 	.word	0x080272c8

080154b8 <_ZN8touchgfx13ImageProgressD0Ev>:
 80154b8:	b510      	push	{r4, lr}
 80154ba:	4604      	mov	r4, r0
 80154bc:	f7ff fff2 	bl	80154a4 <_ZN8touchgfx13ImageProgressD1Ev>
 80154c0:	21f0      	movs	r1, #240	; 0xf0
 80154c2:	4620      	mov	r0, r4
 80154c4:	f00f fc4f 	bl	8024d66 <_ZdlPvj>
 80154c8:	4620      	mov	r0, r4
 80154ca:	bd10      	pop	{r4, pc}

080154cc <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 80154cc:	b508      	push	{r3, lr}
 80154ce:	4b06      	ldr	r3, [pc, #24]	; (80154e8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	b92b      	cbnz	r3, 80154e0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 80154d4:	4b05      	ldr	r3, [pc, #20]	; (80154ec <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 80154d6:	21b8      	movs	r1, #184	; 0xb8
 80154d8:	4a05      	ldr	r2, [pc, #20]	; (80154f0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 80154da:	4806      	ldr	r0, [pc, #24]	; (80154f4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 80154dc:	f00f fc6e 	bl	8024dbc <__assert_func>
 80154e0:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 80154e4:	bd08      	pop	{r3, pc}
 80154e6:	bf00      	nop
 80154e8:	2000be34 	.word	0x2000be34
 80154ec:	0802725c 	.word	0x0802725c
 80154f0:	080273a0 	.word	0x080273a0
 80154f4:	08027298 	.word	0x08027298

080154f8 <_ZN8touchgfx13ImageProgressC1Ev>:
 80154f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	f7ff ffa1 	bl	8015444 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8015502:	4b31      	ldr	r3, [pc, #196]	; (80155c8 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8015504:	a902      	add	r1, sp, #8
 8015506:	4626      	mov	r6, r4
 8015508:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 801550c:	2500      	movs	r5, #0
 801550e:	4a2f      	ldr	r2, [pc, #188]	; (80155cc <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8015510:	f846 3b90 	str.w	r3, [r6], #144
 8015514:	2701      	movs	r7, #1
 8015516:	4b2e      	ldr	r3, [pc, #184]	; (80155d0 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8015518:	4640      	mov	r0, r8
 801551a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 801551e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8015522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015526:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 801552a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801552e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8015532:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8015536:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801553a:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801553e:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8015542:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8015546:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 801554a:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 801554e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8015552:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8015556:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 801555a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801555e:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8015562:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8015566:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801556a:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801556e:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8015572:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8015576:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 801557a:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 801557e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8015582:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8015586:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 801558a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801558e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8015592:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8015596:	f002 fb6f 	bl	8017c78 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801559a:	4b0e      	ldr	r3, [pc, #56]	; (80155d4 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 801559c:	4641      	mov	r1, r8
 801559e:	4630      	mov	r0, r6
 80155a0:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 80155a4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80155a8:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 80155ac:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 80155b0:	f000 fa74 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80155b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80155b8:	4631      	mov	r1, r6
 80155ba:	f000 fa6f 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80155be:	4620      	mov	r0, r4
 80155c0:	b002      	add	sp, #8
 80155c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c6:	bf00      	nop
 80155c8:	080272c8 	.word	0x080272c8
 80155cc:	080284e4 	.word	0x080284e4
 80155d0:	08027644 	.word	0x08027644
 80155d4:	080283e4 	.word	0x080283e4

080155d8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 80155d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80155dc:	4617      	mov	r7, r2
 80155de:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80155e2:	2200      	movs	r2, #0
 80155e4:	4604      	mov	r4, r0
 80155e6:	460e      	mov	r6, r1
 80155e8:	4698      	mov	r8, r3
 80155ea:	4611      	mov	r1, r2
 80155ec:	9500      	str	r5, [sp, #0]
 80155ee:	3090      	adds	r0, #144	; 0x90
 80155f0:	f7fa fdee 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80155f4:	4643      	mov	r3, r8
 80155f6:	463a      	mov	r2, r7
 80155f8:	4631      	mov	r1, r6
 80155fa:	4620      	mov	r0, r4
 80155fc:	9508      	str	r5, [sp, #32]
 80155fe:	b002      	add	sp, #8
 8015600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015604:	f000 b8aa 	b.w	801575c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08015608 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8015608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801560a:	4604      	mov	r4, r0
 801560c:	f000 f8f0 	bl	80157f0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8015610:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8015614:	4638      	mov	r0, r7
 8015616:	f004 f80b 	bl	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
 801561a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801561e:	4620      	mov	r0, r4
 8015620:	2b01      	cmp	r3, #1
 8015622:	bf94      	ite	ls
 8015624:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8015628:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 801562c:	f000 f93a 	bl	80158a4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8015630:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8015634:	4606      	mov	r6, r0
 8015636:	b205      	sxth	r5, r0
 8015638:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801563c:	2a00      	cmp	r2, #0
 801563e:	d056      	beq.n	80156ee <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8015640:	2b03      	cmp	r3, #3
 8015642:	d82c      	bhi.n	801569e <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015644:	e8df f003 	tbb	[pc, r3]
 8015648:	3d311202 	.word	0x3d311202
 801564c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015650:	2200      	movs	r2, #0
 8015652:	9300      	str	r3, [sp, #0]
 8015654:	4611      	mov	r1, r2
 8015656:	462b      	mov	r3, r5
 8015658:	4638      	mov	r0, r7
 801565a:	f7fa fdb9 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801565e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015662:	9300      	str	r3, [sp, #0]
 8015664:	462b      	mov	r3, r5
 8015666:	2200      	movs	r2, #0
 8015668:	4611      	mov	r1, r2
 801566a:	e014      	b.n	8015696 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801566c:	8921      	ldrh	r1, [r4, #8]
 801566e:	2200      	movs	r2, #0
 8015670:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015674:	1a09      	subs	r1, r1, r0
 8015676:	4638      	mov	r0, r7
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	462b      	mov	r3, r5
 801567c:	b209      	sxth	r1, r1
 801567e:	f7fa fda7 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015682:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8015686:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801568a:	4249      	negs	r1, r1
 801568c:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8015690:	9200      	str	r2, [sp, #0]
 8015692:	b209      	sxth	r1, r1
 8015694:	2200      	movs	r2, #0
 8015696:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801569a:	f7fa fd99 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801569e:	4638      	mov	r0, r7
 80156a0:	b003      	add	sp, #12
 80156a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156a6:	f003 bfc3 	b.w	8019630 <_ZNK8touchgfx8Drawable10invalidateEv>
 80156aa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80156ae:	2200      	movs	r2, #0
 80156b0:	9500      	str	r5, [sp, #0]
 80156b2:	2100      	movs	r1, #0
 80156b4:	4638      	mov	r0, r7
 80156b6:	f7fa fd8b 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80156ba:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80156be:	9500      	str	r5, [sp, #0]
 80156c0:	e7d1      	b.n	8015666 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 80156c2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80156c6:	2100      	movs	r1, #0
 80156c8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80156cc:	1a12      	subs	r2, r2, r0
 80156ce:	9500      	str	r5, [sp, #0]
 80156d0:	4638      	mov	r0, r7
 80156d2:	b212      	sxth	r2, r2
 80156d4:	f7fa fd7c 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80156d8:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 80156dc:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 80156e0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80156e4:	4252      	negs	r2, r2
 80156e6:	9100      	str	r1, [sp, #0]
 80156e8:	b212      	sxth	r2, r2
 80156ea:	2100      	movs	r1, #0
 80156ec:	e7d3      	b.n	8015696 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 80156ee:	2b03      	cmp	r3, #3
 80156f0:	d8d5      	bhi.n	801569e <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 80156f2:	e8df f003 	tbb	[pc, r3]
 80156f6:	1102      	.short	0x1102
 80156f8:	2a1b      	.short	0x2a1b
 80156fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80156fe:	2200      	movs	r2, #0
 8015700:	4638      	mov	r0, r7
 8015702:	4611      	mov	r1, r2
 8015704:	9300      	str	r3, [sp, #0]
 8015706:	462b      	mov	r3, r5
 8015708:	f7fa fd62 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801570c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015710:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015714:	1af1      	subs	r1, r6, r3
 8015716:	e7bb      	b.n	8015690 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8015718:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801571c:	2200      	movs	r2, #0
 801571e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015722:	1a09      	subs	r1, r1, r0
 8015724:	9300      	str	r3, [sp, #0]
 8015726:	462b      	mov	r3, r5
 8015728:	b209      	sxth	r1, r1
 801572a:	e795      	b.n	8015658 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 801572c:	2200      	movs	r2, #0
 801572e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015732:	4638      	mov	r0, r7
 8015734:	9500      	str	r5, [sp, #0]
 8015736:	4611      	mov	r1, r2
 8015738:	f7fa fd4a 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801573c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8015740:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015744:	1a32      	subs	r2, r6, r0
 8015746:	9000      	str	r0, [sp, #0]
 8015748:	e7ce      	b.n	80156e8 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801574a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801574e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015752:	1a12      	subs	r2, r2, r0
 8015754:	9500      	str	r5, [sp, #0]
 8015756:	b212      	sxth	r2, r2
 8015758:	e7ab      	b.n	80156b2 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801575a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801575a:	4770      	bx	lr

0801575c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801575c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015760:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8015764:	4604      	mov	r4, r0
 8015766:	460e      	mov	r6, r1
 8015768:	4698      	mov	r8, r3
 801576a:	9700      	str	r7, [sp, #0]
 801576c:	3058      	adds	r0, #88	; 0x58
 801576e:	4615      	mov	r5, r2
 8015770:	f7fa fd2e 	bl	80101d0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015774:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015778:	eb06 0308 	add.w	r3, r6, r8
 801577c:	429a      	cmp	r2, r3
 801577e:	eb05 0207 	add.w	r2, r5, r7
 8015782:	bfb8      	it	lt
 8015784:	8123      	strhlt	r3, [r4, #8]
 8015786:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801578a:	4293      	cmp	r3, r2
 801578c:	bfb8      	it	lt
 801578e:	8162      	strhlt	r2, [r4, #10]
 8015790:	b002      	add	sp, #8
 8015792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015796 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8015796:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801579a:	4770      	bx	lr

0801579c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801579c:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80157a0:	4770      	bx	lr

080157a2 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80157a2:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80157a6:	4770      	bx	lr

080157a8 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80157a8:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80157ac:	4770      	bx	lr

080157ae <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 80157ae:	b510      	push	{r4, lr}
 80157b0:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80157b4:	800c      	strh	r4, [r1, #0]
 80157b6:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80157ba:	8011      	strh	r1, [r2, #0]
 80157bc:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80157c0:	801a      	strh	r2, [r3, #0]
 80157c2:	9b02      	ldr	r3, [sp, #8]
 80157c4:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 80157c8:	801a      	strh	r2, [r3, #0]
 80157ca:	bd10      	pop	{r4, pc}

080157cc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 80157cc:	b510      	push	{r4, lr}
 80157ce:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80157d2:	800c      	strh	r4, [r1, #0]
 80157d4:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80157d8:	8011      	strh	r1, [r2, #0]
 80157da:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80157de:	801a      	strh	r2, [r3, #0]
 80157e0:	bd10      	pop	{r4, pc}

080157e2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80157e2:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80157e6:	800b      	strh	r3, [r1, #0]
 80157e8:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80157ec:	8013      	strh	r3, [r2, #0]
 80157ee:	4770      	bx	lr

080157f0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80157f0:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80157f4:	4299      	cmp	r1, r3
 80157f6:	bfb8      	it	lt
 80157f8:	4619      	movlt	r1, r3
 80157fa:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80157fe:	4299      	cmp	r1, r3
 8015800:	bfa8      	it	ge
 8015802:	4619      	movge	r1, r3
 8015804:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8015808:	4770      	bx	lr

0801580a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801580a:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801580e:	4770      	bx	lr

08015810 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8015810:	b510      	push	{r4, lr}
 8015812:	4604      	mov	r4, r0
 8015814:	2190      	movs	r1, #144	; 0x90
 8015816:	f00f faa6 	bl	8024d66 <_ZdlPvj>
 801581a:	4620      	mov	r0, r4
 801581c:	bd10      	pop	{r4, pc}

0801581e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801581e:	b510      	push	{r4, lr}
 8015820:	4604      	mov	r4, r0
 8015822:	302c      	adds	r0, #44	; 0x2c
 8015824:	f002 fa28 	bl	8017c78 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015828:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801582a:	8123      	strh	r3, [r4, #8]
 801582c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801582e:	8163      	strh	r3, [r4, #10]
 8015830:	bd10      	pop	{r4, pc}
	...

08015834 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8015834:	4291      	cmp	r1, r2
 8015836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801583a:	4604      	mov	r4, r0
 801583c:	460e      	mov	r6, r1
 801583e:	4615      	mov	r5, r2
 8015840:	4698      	mov	r8, r3
 8015842:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8015846:	db05      	blt.n	8015854 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8015848:	4b12      	ldr	r3, [pc, #72]	; (8015894 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801584a:	214d      	movs	r1, #77	; 0x4d
 801584c:	4a12      	ldr	r2, [pc, #72]	; (8015898 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801584e:	4813      	ldr	r0, [pc, #76]	; (801589c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8015850:	f00f fab4 	bl	8024dbc <__assert_func>
 8015854:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8015858:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 801585c:	6803      	ldr	r3, [r0, #0]
 801585e:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8015862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015866:	4798      	blx	r3
 8015868:	f1b8 0f00 	cmp.w	r8, #0
 801586c:	d10c      	bne.n	8015888 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801586e:	1bad      	subs	r5, r5, r6
 8015870:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8015874:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8015878:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 801587c:	42bb      	cmp	r3, r7
 801587e:	d806      	bhi.n	801588e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8015880:	4b07      	ldr	r3, [pc, #28]	; (80158a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8015882:	215a      	movs	r1, #90	; 0x5a
 8015884:	4a04      	ldr	r2, [pc, #16]	; (8015898 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8015886:	e7e2      	b.n	801584e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8015888:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 801588c:	e7f2      	b.n	8015874 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801588e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015892:	bf00      	nop
 8015894:	080273d3 	.word	0x080273d3
 8015898:	08027510 	.word	0x08027510
 801589c:	080273dd 	.word	0x080273dd
 80158a0:	08027434 	.word	0x08027434

080158a4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80158a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158a6:	4604      	mov	r4, r0
 80158a8:	460d      	mov	r5, r1
 80158aa:	b1b9      	cbz	r1, 80158dc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80158ac:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80158b0:	ab01      	add	r3, sp, #4
 80158b2:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80158b6:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80158ba:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80158be:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80158c2:	1a12      	subs	r2, r2, r0
 80158c4:	1b89      	subs	r1, r1, r6
 80158c6:	1a38      	subs	r0, r7, r0
 80158c8:	f003 fff3 	bl	80198b2 <_ZN8touchgfx6muldivElllRl>
 80158cc:	4629      	mov	r1, r5
 80158ce:	ab01      	add	r3, sp, #4
 80158d0:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80158d4:	4430      	add	r0, r6
 80158d6:	f003 ffec 	bl	80198b2 <_ZN8touchgfx6muldivElllRl>
 80158da:	b285      	uxth	r5, r0
 80158dc:	4628      	mov	r0, r5
 80158de:	b003      	add	sp, #12
 80158e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080158e4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80158e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80158e8:	4604      	mov	r4, r0
 80158ea:	2600      	movs	r6, #0
 80158ec:	f7fa fc22 	bl	8010134 <_ZN8touchgfx8DrawableC1Ev>
 80158f0:	4b1b      	ldr	r3, [pc, #108]	; (8015960 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 80158f2:	4625      	mov	r5, r4
 80158f4:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80158f8:	af02      	add	r7, sp, #8
 80158fa:	62a6      	str	r6, [r4, #40]	; 0x28
 80158fc:	f845 3b2c 	str.w	r3, [r5], #44
 8015900:	4628      	mov	r0, r5
 8015902:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8015906:	f7fa fc15 	bl	8010134 <_ZN8touchgfx8DrawableC1Ev>
 801590a:	4b16      	ldr	r3, [pc, #88]	; (8015964 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801590c:	4639      	mov	r1, r7
 801590e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015912:	4628      	mov	r0, r5
 8015914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015916:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801591a:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801591e:	f002 f9ab 	bl	8017c78 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015922:	4638      	mov	r0, r7
 8015924:	f7fa fc06 	bl	8010134 <_ZN8touchgfx8DrawableC1Ev>
 8015928:	4b0f      	ldr	r3, [pc, #60]	; (8015968 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801592a:	4632      	mov	r2, r6
 801592c:	4631      	mov	r1, r6
 801592e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015930:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8015934:	4628      	mov	r0, r5
 8015936:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801593a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801593e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015942:	f7fa fc90 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
 8015946:	4629      	mov	r1, r5
 8015948:	4620      	mov	r0, r4
 801594a:	f000 f8a7 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801594e:	4620      	mov	r0, r4
 8015950:	4639      	mov	r1, r7
 8015952:	f000 f8a3 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015956:	4620      	mov	r0, r4
 8015958:	b002      	add	sp, #8
 801595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801595e:	bf00      	nop
 8015960:	08027458 	.word	0x08027458
 8015964:	080284e4 	.word	0x080284e4
 8015968:	08027644 	.word	0x08027644

0801596c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801596c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801596e:	2000      	movs	r0, #0
 8015970:	b12b      	cbz	r3, 801597e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015972:	b920      	cbnz	r0, 801597e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015974:	1a5a      	subs	r2, r3, r1
 8015976:	699b      	ldr	r3, [r3, #24]
 8015978:	4250      	negs	r0, r2
 801597a:	4150      	adcs	r0, r2
 801597c:	e7f8      	b.n	8015970 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801597e:	4770      	bx	lr

08015980 <_ZN8touchgfx9Container9removeAllEv>:
 8015980:	2200      	movs	r2, #0
 8015982:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015984:	b123      	cbz	r3, 8015990 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015986:	6999      	ldr	r1, [r3, #24]
 8015988:	6281      	str	r1, [r0, #40]	; 0x28
 801598a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801598e:	e7f8      	b.n	8015982 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015990:	4770      	bx	lr

08015992 <_ZN8touchgfx9Container6unlinkEv>:
 8015992:	2300      	movs	r3, #0
 8015994:	6283      	str	r3, [r0, #40]	; 0x28
 8015996:	4770      	bx	lr

08015998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801599c:	461f      	mov	r7, r3
 801599e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80159a2:	460d      	mov	r5, r1
 80159a4:	4616      	mov	r6, r2
 80159a6:	b103      	cbz	r3, 80159aa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80159a8:	6038      	str	r0, [r7, #0]
 80159aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80159ac:	b314      	cbz	r4, 80159f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80159ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80159b2:	b1eb      	cbz	r3, 80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80159b8:	428d      	cmp	r5, r1
 80159ba:	db19      	blt.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159bc:	b289      	uxth	r1, r1
 80159be:	8923      	ldrh	r3, [r4, #8]
 80159c0:	440b      	add	r3, r1
 80159c2:	b21b      	sxth	r3, r3
 80159c4:	429d      	cmp	r5, r3
 80159c6:	da13      	bge.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80159cc:	4296      	cmp	r6, r2
 80159ce:	db0f      	blt.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159d0:	b292      	uxth	r2, r2
 80159d2:	8963      	ldrh	r3, [r4, #10]
 80159d4:	4413      	add	r3, r2
 80159d6:	b21b      	sxth	r3, r3
 80159d8:	429e      	cmp	r6, r3
 80159da:	da09      	bge.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	1ab2      	subs	r2, r6, r2
 80159e0:	1a69      	subs	r1, r5, r1
 80159e2:	4620      	mov	r0, r4
 80159e4:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80159e8:	b212      	sxth	r2, r2
 80159ea:	463b      	mov	r3, r7
 80159ec:	b209      	sxth	r1, r1
 80159ee:	47c0      	blx	r8
 80159f0:	69a4      	ldr	r4, [r4, #24]
 80159f2:	e7db      	b.n	80159ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80159f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159f8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80159f8:	2200      	movs	r2, #0
 80159fa:	8002      	strh	r2, [r0, #0]
 80159fc:	8042      	strh	r2, [r0, #2]
 80159fe:	8082      	strh	r2, [r0, #4]
 8015a00:	80c2      	strh	r2, [r0, #6]
 8015a02:	4770      	bx	lr

08015a04 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015a04:	b570      	push	{r4, r5, r6, lr}
 8015a06:	460d      	mov	r5, r1
 8015a08:	4616      	mov	r6, r2
 8015a0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a0c:	b13c      	cbz	r4, 8015a1e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	4620      	mov	r0, r4
 8015a12:	4632      	mov	r2, r6
 8015a14:	4629      	mov	r1, r5
 8015a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a18:	4798      	blx	r3
 8015a1a:	69a4      	ldr	r4, [r4, #24]
 8015a1c:	e7f6      	b.n	8015a0c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}

08015a20 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015a20:	b538      	push	{r3, r4, r5, lr}
 8015a22:	460d      	mov	r5, r1
 8015a24:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a26:	b134      	cbz	r4, 8015a36 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015a28:	682b      	ldr	r3, [r5, #0]
 8015a2a:	4621      	mov	r1, r4
 8015a2c:	4628      	mov	r0, r5
 8015a2e:	689b      	ldr	r3, [r3, #8]
 8015a30:	4798      	blx	r3
 8015a32:	69a4      	ldr	r4, [r4, #24]
 8015a34:	e7f7      	b.n	8015a26 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015a36:	bd38      	pop	{r3, r4, r5, pc}

08015a38 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015a38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a3a:	b19b      	cbz	r3, 8015a64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a3c:	428b      	cmp	r3, r1
 8015a3e:	d109      	bne.n	8015a54 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015a40:	699a      	ldr	r2, [r3, #24]
 8015a42:	2100      	movs	r1, #0
 8015a44:	6159      	str	r1, [r3, #20]
 8015a46:	6282      	str	r2, [r0, #40]	; 0x28
 8015a48:	b902      	cbnz	r2, 8015a4c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015a4a:	4770      	bx	lr
 8015a4c:	6199      	str	r1, [r3, #24]
 8015a4e:	4770      	bx	lr
 8015a50:	4613      	mov	r3, r2
 8015a52:	b13a      	cbz	r2, 8015a64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a54:	699a      	ldr	r2, [r3, #24]
 8015a56:	428a      	cmp	r2, r1
 8015a58:	d1fa      	bne.n	8015a50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015a5a:	698a      	ldr	r2, [r1, #24]
 8015a5c:	619a      	str	r2, [r3, #24]
 8015a5e:	2300      	movs	r3, #0
 8015a60:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015a64:	4770      	bx	lr

08015a66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015a66:	b410      	push	{r4}
 8015a68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	b92b      	cbnz	r3, 8015a7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015a6e:	6803      	ldr	r3, [r0, #0]
 8015a70:	4611      	mov	r1, r2
 8015a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a78:	4718      	bx	r3
 8015a7a:	b941      	cbnz	r1, 8015a8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015a7c:	6193      	str	r3, [r2, #24]
 8015a7e:	6282      	str	r2, [r0, #40]	; 0x28
 8015a80:	6154      	str	r4, [r2, #20]
 8015a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a86:	4770      	bx	lr
 8015a88:	4603      	mov	r3, r0
 8015a8a:	2800      	cmp	r0, #0
 8015a8c:	d0f9      	beq.n	8015a82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015a8e:	4299      	cmp	r1, r3
 8015a90:	6998      	ldr	r0, [r3, #24]
 8015a92:	d1f9      	bne.n	8015a88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015a94:	6190      	str	r0, [r2, #24]
 8015a96:	618a      	str	r2, [r1, #24]
 8015a98:	e7f2      	b.n	8015a80 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015a9c:	4288      	cmp	r0, r1
 8015a9e:	b508      	push	{r3, lr}
 8015aa0:	d105      	bne.n	8015aae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015aa2:	4b11      	ldr	r3, [pc, #68]	; (8015ae8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015aa4:	2123      	movs	r1, #35	; 0x23
 8015aa6:	4a11      	ldr	r2, [pc, #68]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015aa8:	4811      	ldr	r0, [pc, #68]	; (8015af0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015aaa:	f00f f987 	bl	8024dbc <__assert_func>
 8015aae:	694b      	ldr	r3, [r1, #20]
 8015ab0:	b11b      	cbz	r3, 8015aba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015ab2:	4b10      	ldr	r3, [pc, #64]	; (8015af4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015ab4:	2124      	movs	r1, #36	; 0x24
 8015ab6:	4a0d      	ldr	r2, [pc, #52]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ab8:	e7f6      	b.n	8015aa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015aba:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015abe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ac0:	b913      	cbnz	r3, 8015ac8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015ac2:	6281      	str	r1, [r0, #40]	; 0x28
 8015ac4:	bd08      	pop	{r3, pc}
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	699a      	ldr	r2, [r3, #24]
 8015aca:	b12a      	cbz	r2, 8015ad8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015acc:	428b      	cmp	r3, r1
 8015ace:	d1fa      	bne.n	8015ac6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015ad0:	4b09      	ldr	r3, [pc, #36]	; (8015af8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015ad2:	2135      	movs	r1, #53	; 0x35
 8015ad4:	4a05      	ldr	r2, [pc, #20]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ad6:	e7e7      	b.n	8015aa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015ad8:	428b      	cmp	r3, r1
 8015ada:	d103      	bne.n	8015ae4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015adc:	4b06      	ldr	r3, [pc, #24]	; (8015af8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015ade:	2138      	movs	r1, #56	; 0x38
 8015ae0:	4a02      	ldr	r2, [pc, #8]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ae2:	e7e1      	b.n	8015aa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015ae4:	6199      	str	r1, [r3, #24]
 8015ae6:	e7ed      	b.n	8015ac4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015ae8:	08027571 	.word	0x08027571
 8015aec:	080276c8 	.word	0x080276c8
 8015af0:	0802759d 	.word	0x0802759d
 8015af4:	080275d0 	.word	0x080275d0
 8015af8:	08027606 	.word	0x08027606

08015afc <_ZN8touchgfx4RectaNERKS0_>:
 8015afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b00:	888b      	ldrh	r3, [r1, #4]
 8015b02:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015b06:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015b0a:	444b      	add	r3, r9
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	fa0f f883 	sxth.w	r8, r3
 8015b12:	45c2      	cmp	sl, r8
 8015b14:	da30      	bge.n	8015b78 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015b16:	8882      	ldrh	r2, [r0, #4]
 8015b18:	4452      	add	r2, sl
 8015b1a:	b292      	uxth	r2, r2
 8015b1c:	fa0f fe82 	sxth.w	lr, r2
 8015b20:	45f1      	cmp	r9, lr
 8015b22:	da29      	bge.n	8015b78 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015b24:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015b28:	88cc      	ldrh	r4, [r1, #6]
 8015b2a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015b2e:	442c      	add	r4, r5
 8015b30:	b224      	sxth	r4, r4
 8015b32:	42a6      	cmp	r6, r4
 8015b34:	da20      	bge.n	8015b78 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015b36:	88c7      	ldrh	r7, [r0, #6]
 8015b38:	4437      	add	r7, r6
 8015b3a:	b2bf      	uxth	r7, r7
 8015b3c:	fa0f fc87 	sxth.w	ip, r7
 8015b40:	4565      	cmp	r5, ip
 8015b42:	da19      	bge.n	8015b78 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015b44:	45ca      	cmp	sl, r9
 8015b46:	4654      	mov	r4, sl
 8015b48:	bfb8      	it	lt
 8015b4a:	464c      	movlt	r4, r9
 8015b4c:	42b5      	cmp	r5, r6
 8015b4e:	bfb8      	it	lt
 8015b50:	4635      	movlt	r5, r6
 8015b52:	45f0      	cmp	r8, lr
 8015b54:	bfc8      	it	gt
 8015b56:	4613      	movgt	r3, r2
 8015b58:	1b1b      	subs	r3, r3, r4
 8015b5a:	8083      	strh	r3, [r0, #4]
 8015b5c:	88ca      	ldrh	r2, [r1, #6]
 8015b5e:	884b      	ldrh	r3, [r1, #2]
 8015b60:	8004      	strh	r4, [r0, #0]
 8015b62:	4413      	add	r3, r2
 8015b64:	8045      	strh	r5, [r0, #2]
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	b21a      	sxth	r2, r3
 8015b6a:	4594      	cmp	ip, r2
 8015b6c:	bfb8      	it	lt
 8015b6e:	463b      	movlt	r3, r7
 8015b70:	1b5b      	subs	r3, r3, r5
 8015b72:	80c3      	strh	r3, [r0, #6]
 8015b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b78:	2300      	movs	r3, #0
 8015b7a:	8003      	strh	r3, [r0, #0]
 8015b7c:	8043      	strh	r3, [r0, #2]
 8015b7e:	8083      	strh	r3, [r0, #4]
 8015b80:	80c3      	strh	r3, [r0, #6]
 8015b82:	e7f7      	b.n	8015b74 <_ZN8touchgfx4RectaNERKS0_+0x78>

08015b84 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015b84:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015b88:	b12b      	cbz	r3, 8015b96 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8015b8a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015b8e:	fab0 f080 	clz	r0, r0
 8015b92:	0940      	lsrs	r0, r0, #5
 8015b94:	4770      	bx	lr
 8015b96:	2001      	movs	r0, #1
 8015b98:	4770      	bx	lr

08015b9a <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015ba4:	8003      	strh	r3, [r0, #0]
 8015ba6:	8043      	strh	r3, [r0, #2]
 8015ba8:	8083      	strh	r3, [r0, #4]
 8015baa:	80c3      	strh	r3, [r0, #6]
 8015bac:	2d00      	cmp	r5, #0
 8015bae:	d040      	beq.n	8015c32 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015bb0:	1d28      	adds	r0, r5, #4
 8015bb2:	f7ff ffe7 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bb6:	b988      	cbnz	r0, 8015bdc <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015bb8:	4620      	mov	r0, r4
 8015bba:	f7ff ffe3 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bbe:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015bc2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015bc6:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015bca:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015bce:	b138      	cbz	r0, 8015be0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015bd0:	8022      	strh	r2, [r4, #0]
 8015bd2:	8063      	strh	r3, [r4, #2]
 8015bd4:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015bd8:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015bdc:	69ad      	ldr	r5, [r5, #24]
 8015bde:	e7e5      	b.n	8015bac <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015be0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015be4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015be8:	4290      	cmp	r0, r2
 8015bea:	4607      	mov	r7, r0
 8015bec:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015bf0:	460e      	mov	r6, r1
 8015bf2:	bfa8      	it	ge
 8015bf4:	4617      	movge	r7, r2
 8015bf6:	4299      	cmp	r1, r3
 8015bf8:	4472      	add	r2, lr
 8015bfa:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015bfe:	bfa8      	it	ge
 8015c00:	461e      	movge	r6, r3
 8015c02:	4440      	add	r0, r8
 8015c04:	4471      	add	r1, lr
 8015c06:	4463      	add	r3, ip
 8015c08:	b200      	sxth	r0, r0
 8015c0a:	8027      	strh	r7, [r4, #0]
 8015c0c:	b212      	sxth	r2, r2
 8015c0e:	8066      	strh	r6, [r4, #2]
 8015c10:	b209      	sxth	r1, r1
 8015c12:	b21b      	sxth	r3, r3
 8015c14:	4290      	cmp	r0, r2
 8015c16:	bfac      	ite	ge
 8015c18:	ebc7 0200 	rsbge	r2, r7, r0
 8015c1c:	ebc7 0202 	rsblt	r2, r7, r2
 8015c20:	4299      	cmp	r1, r3
 8015c22:	bfac      	ite	ge
 8015c24:	ebc6 0301 	rsbge	r3, r6, r1
 8015c28:	ebc6 0303 	rsblt	r3, r6, r3
 8015c2c:	80a2      	strh	r2, [r4, #4]
 8015c2e:	80e3      	strh	r3, [r4, #6]
 8015c30:	e7d4      	b.n	8015bdc <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015c32:	4620      	mov	r0, r4
 8015c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c38 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015c3c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015c40:	b383      	cbz	r3, 8015ca4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c44:	b374      	cbz	r4, 8015ca4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c46:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015c4a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015c4e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015c52:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015c56:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015c5a:	b303      	cbz	r3, 8015c9e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015c5c:	4668      	mov	r0, sp
 8015c5e:	1d21      	adds	r1, r4, #4
 8015c60:	f8ad 5000 	strh.w	r5, [sp]
 8015c64:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015c68:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015c6c:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015c70:	f7ff ff44 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8015c74:	4668      	mov	r0, sp
 8015c76:	f7ff ff85 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c7a:	b980      	cbnz	r0, 8015c9e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015c7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015c80:	4669      	mov	r1, sp
 8015c82:	88a2      	ldrh	r2, [r4, #4]
 8015c84:	4620      	mov	r0, r4
 8015c86:	1a9b      	subs	r3, r3, r2
 8015c88:	88e2      	ldrh	r2, [r4, #6]
 8015c8a:	f8ad 3000 	strh.w	r3, [sp]
 8015c8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015c92:	1a9b      	subs	r3, r3, r2
 8015c94:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015c98:	6823      	ldr	r3, [r4, #0]
 8015c9a:	689b      	ldr	r3, [r3, #8]
 8015c9c:	4798      	blx	r3
 8015c9e:	69a4      	ldr	r4, [r4, #24]
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	d1d8      	bne.n	8015c56 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015ca4:	b002      	add	sp, #8
 8015ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015caa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cac:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015cb0:	460d      	mov	r5, r1
 8015cb2:	4616      	mov	r6, r2
 8015cb4:	b323      	cbz	r3, 8015d00 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015cb6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cb8:	b314      	cbz	r4, 8015d00 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015cba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015cbe:	b1eb      	cbz	r3, 8015cfc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015cc0:	6828      	ldr	r0, [r5, #0]
 8015cc2:	466b      	mov	r3, sp
 8015cc4:	6869      	ldr	r1, [r5, #4]
 8015cc6:	c303      	stmia	r3!, {r0, r1}
 8015cc8:	4668      	mov	r0, sp
 8015cca:	1d21      	adds	r1, r4, #4
 8015ccc:	f7ff ff16 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8015cd0:	4668      	mov	r0, sp
 8015cd2:	f7ff ff57 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cd6:	b988      	cbnz	r0, 8015cfc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015cd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8015cdc:	4669      	mov	r1, sp
 8015cde:	88a2      	ldrh	r2, [r4, #4]
 8015ce0:	4620      	mov	r0, r4
 8015ce2:	1a9b      	subs	r3, r3, r2
 8015ce4:	88e2      	ldrh	r2, [r4, #6]
 8015ce6:	f8ad 3000 	strh.w	r3, [sp]
 8015cea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015cee:	1a9b      	subs	r3, r3, r2
 8015cf0:	4632      	mov	r2, r6
 8015cf2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015cf6:	6823      	ldr	r3, [r4, #0]
 8015cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015cfa:	4798      	blx	r3
 8015cfc:	69a4      	ldr	r4, [r4, #24]
 8015cfe:	e7db      	b.n	8015cb8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015d00:	b002      	add	sp, #8
 8015d02:	bd70      	pop	{r4, r5, r6, pc}

08015d04 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015d04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015d08:	4770      	bx	lr

08015d0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015d0a:	6803      	ldr	r3, [r0, #0]
 8015d0c:	b513      	push	{r0, r1, r4, lr}
 8015d0e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015d12:	2300      	movs	r3, #0
 8015d14:	e9cd 3300 	strd	r3, r3, [sp]
 8015d18:	466b      	mov	r3, sp
 8015d1a:	47a0      	blx	r4
 8015d1c:	b002      	add	sp, #8
 8015d1e:	bd10      	pop	{r4, pc}

08015d20 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015d20:	2301      	movs	r3, #1
 8015d22:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d26:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d2a:	4770      	bx	lr

08015d2c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d32:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d36:	4770      	bx	lr

08015d38 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015d38:	6843      	ldr	r3, [r0, #4]
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	725a      	strb	r2, [r3, #9]
 8015d3e:	6840      	ldr	r0, [r0, #4]
 8015d40:	6803      	ldr	r3, [r0, #0]
 8015d42:	691b      	ldr	r3, [r3, #16]
 8015d44:	4718      	bx	r3

08015d46 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015d46:	6840      	ldr	r0, [r0, #4]
 8015d48:	6803      	ldr	r3, [r0, #0]
 8015d4a:	689b      	ldr	r3, [r3, #8]
 8015d4c:	4718      	bx	r3
	...

08015d50 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015d50:	4b04      	ldr	r3, [pc, #16]	; (8015d64 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015d52:	781b      	ldrb	r3, [r3, #0]
 8015d54:	b123      	cbz	r3, 8015d60 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015d56:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015d5a:	f080 0001 	eor.w	r0, r0, #1
 8015d5e:	4770      	bx	lr
 8015d60:	2001      	movs	r0, #1
 8015d62:	4770      	bx	lr
 8015d64:	2000bd6a 	.word	0x2000bd6a

08015d68 <_ZN8touchgfx3HAL8endFrameEv>:
 8015d68:	b510      	push	{r4, lr}
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	6840      	ldr	r0, [r0, #4]
 8015d6e:	6803      	ldr	r3, [r0, #0]
 8015d70:	689b      	ldr	r3, [r3, #8]
 8015d72:	4798      	blx	r3
 8015d74:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015d78:	b113      	cbz	r3, 8015d80 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015d80:	bd10      	pop	{r4, pc}

08015d82 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015d82:	b508      	push	{r3, lr}
 8015d84:	6803      	ldr	r3, [r0, #0]
 8015d86:	4604      	mov	r4, r0
 8015d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015d8a:	4798      	blx	r3
 8015d8c:	6823      	ldr	r3, [r4, #0]
 8015d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d90:	4620      	mov	r0, r4
 8015d92:	4798      	blx	r3
 8015d94:	f7fd fed4 	bl	8013b40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015d98:	6823      	ldr	r3, [r4, #0]
 8015d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d9c:	e7f8      	b.n	8015d90 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015da0 <_ZN8touchgfx3HAL4tickEv>:
 8015da0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015da2:	6803      	ldr	r3, [r0, #0]
 8015da4:	4604      	mov	r4, r0
 8015da6:	4d5c      	ldr	r5, [pc, #368]	; (8015f18 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015dac:	4798      	blx	r3
 8015dae:	2800      	cmp	r0, #0
 8015db0:	f000 8097 	beq.w	8015ee2 <_ZN8touchgfx3HAL4tickEv+0x142>
 8015db4:	2001      	movs	r0, #1
 8015db6:	2600      	movs	r6, #0
 8015db8:	f7fd fba6 	bl	8013508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015dbc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015dc0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015dc4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015dc8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015dcc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015dd0:	b133      	cbz	r3, 8015de0 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015dd2:	6823      	ldr	r3, [r4, #0]
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015dda:	4798      	blx	r3
 8015ddc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015de0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015de4:	2601      	movs	r6, #1
 8015de6:	6862      	ldr	r2, [r4, #4]
 8015de8:	f083 0301 	eor.w	r3, r3, #1
 8015dec:	702e      	strb	r6, [r5, #0]
 8015dee:	7253      	strb	r3, [r2, #9]
 8015df0:	f002 fff0 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 8015df4:	6803      	ldr	r3, [r0, #0]
 8015df6:	4631      	mov	r1, r6
 8015df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dfa:	4798      	blx	r3
 8015dfc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015e00:	b90b      	cbnz	r3, 8015e06 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015e02:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015e06:	f002 ffe5 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 8015e0a:	6803      	ldr	r3, [r0, #0]
 8015e0c:	695b      	ldr	r3, [r3, #20]
 8015e0e:	4798      	blx	r3
 8015e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e12:	6803      	ldr	r3, [r0, #0]
 8015e14:	691b      	ldr	r3, [r3, #16]
 8015e16:	4798      	blx	r3
 8015e18:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015e1c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015e20:	3b01      	subs	r3, #1
 8015e22:	b2db      	uxtb	r3, r3
 8015e24:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015e28:	b10a      	cbz	r2, 8015e2e <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d1eb      	bne.n	8015e06 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015e2e:	4a3b      	ldr	r2, [pc, #236]	; (8015f1c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015e30:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015e34:	7813      	ldrb	r3, [r2, #0]
 8015e36:	3301      	adds	r3, #1
 8015e38:	b25b      	sxtb	r3, r3
 8015e3a:	4299      	cmp	r1, r3
 8015e3c:	7013      	strb	r3, [r2, #0]
 8015e3e:	dc10      	bgt.n	8015e62 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015e40:	2300      	movs	r3, #0
 8015e42:	68e0      	ldr	r0, [r4, #12]
 8015e44:	a902      	add	r1, sp, #8
 8015e46:	7013      	strb	r3, [r2, #0]
 8015e48:	aa03      	add	r2, sp, #12
 8015e4a:	6803      	ldr	r3, [r0, #0]
 8015e4c:	68db      	ldr	r3, [r3, #12]
 8015e4e:	4798      	blx	r3
 8015e50:	6823      	ldr	r3, [r4, #0]
 8015e52:	2800      	cmp	r0, #0
 8015e54:	d051      	beq.n	8015efa <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015e56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e5a:	4620      	mov	r0, r4
 8015e5c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015e60:	4798      	blx	r3
 8015e62:	2300      	movs	r3, #0
 8015e64:	6960      	ldr	r0, [r4, #20]
 8015e66:	f88d 3007 	strb.w	r3, [sp, #7]
 8015e6a:	b158      	cbz	r0, 8015e84 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015e6c:	6803      	ldr	r3, [r0, #0]
 8015e6e:	f10d 0107 	add.w	r1, sp, #7
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	4798      	blx	r3
 8015e76:	b128      	cbz	r0, 8015e84 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e7a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015e7e:	6803      	ldr	r3, [r0, #0]
 8015e80:	68db      	ldr	r3, [r3, #12]
 8015e82:	4798      	blx	r3
 8015e84:	f104 001c 	add.w	r0, r4, #28
 8015e88:	f00d facc 	bl	8023424 <_ZN8touchgfx8Gestures4tickEv>
 8015e8c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015e90:	b30b      	cbz	r3, 8015ed6 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015e92:	6920      	ldr	r0, [r4, #16]
 8015e94:	6803      	ldr	r3, [r0, #0]
 8015e96:	691b      	ldr	r3, [r3, #16]
 8015e98:	4798      	blx	r3
 8015e9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015e9c:	4606      	mov	r6, r0
 8015e9e:	b903      	cbnz	r3, 8015ea2 <_ZN8touchgfx3HAL4tickEv+0x102>
 8015ea0:	6720      	str	r0, [r4, #112]	; 0x70
 8015ea2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015ea4:	4a1e      	ldr	r2, [pc, #120]	; (8015f20 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015ea6:	1af3      	subs	r3, r6, r3
 8015ea8:	4293      	cmp	r3, r2
 8015eaa:	d914      	bls.n	8015ed6 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015eac:	6920      	ldr	r0, [r4, #16]
 8015eae:	6803      	ldr	r3, [r0, #0]
 8015eb0:	699b      	ldr	r3, [r3, #24]
 8015eb2:	4798      	blx	r3
 8015eb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015eb6:	2264      	movs	r2, #100	; 0x64
 8015eb8:	1af3      	subs	r3, r6, r3
 8015eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ebe:	fbb0 f0f3 	udiv	r0, r0, r3
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	dc1e      	bgt.n	8015f04 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015ec6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015eca:	6920      	ldr	r0, [r4, #16]
 8015ecc:	2100      	movs	r1, #0
 8015ece:	6803      	ldr	r3, [r0, #0]
 8015ed0:	69db      	ldr	r3, [r3, #28]
 8015ed2:	4798      	blx	r3
 8015ed4:	6726      	str	r6, [r4, #112]	; 0x70
 8015ed6:	f002 ff7d 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 8015eda:	6803      	ldr	r3, [r0, #0]
 8015edc:	2100      	movs	r1, #0
 8015ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ee0:	4798      	blx	r3
 8015ee2:	6823      	ldr	r3, [r4, #0]
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015eea:	4798      	blx	r3
 8015eec:	2001      	movs	r0, #1
 8015eee:	f7fd fb16 	bl	801351e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	702b      	strb	r3, [r5, #0]
 8015ef6:	b004      	add	sp, #16
 8015ef8:	bd70      	pop	{r4, r5, r6, pc}
 8015efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015efe:	4620      	mov	r0, r4
 8015f00:	4798      	blx	r3
 8015f02:	e7ae      	b.n	8015e62 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015f04:	2863      	cmp	r0, #99	; 0x63
 8015f06:	bfcb      	itete	gt
 8015f08:	2300      	movgt	r3, #0
 8015f0a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015f0e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015f12:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015f16:	e7d8      	b.n	8015eca <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015f18:	2000bd70 	.word	0x2000bd70
 8015f1c:	2000bd71 	.word	0x2000bd71
 8015f20:	05f5e100 	.word	0x05f5e100

08015f24 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015f24:	f7fd bdac 	b.w	8013a80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015f28 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015f28:	6581      	str	r1, [r0, #88]	; 0x58
 8015f2a:	301c      	adds	r0, #28
 8015f2c:	f00d ba78 	b.w	8023420 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015f30 <_ZN8touchgfx3HAL5touchEll>:
 8015f30:	b530      	push	{r4, r5, lr}
 8015f32:	b087      	sub	sp, #28
 8015f34:	4604      	mov	r4, r0
 8015f36:	a804      	add	r0, sp, #16
 8015f38:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015f3c:	f002 fd4e 	bl	80189dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015f40:	9b04      	ldr	r3, [sp, #16]
 8015f42:	a906      	add	r1, sp, #24
 8015f44:	a803      	add	r0, sp, #12
 8015f46:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015f4a:	9b05      	ldr	r3, [sp, #20]
 8015f4c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015f50:	f002 fd92 	bl	8018a78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015f54:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015f58:	f104 001c 	add.w	r0, r4, #28
 8015f5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015f60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015f64:	b189      	cbz	r1, 8015f8a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015f66:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015f6a:	9300      	str	r3, [sp, #0]
 8015f6c:	4613      	mov	r3, r2
 8015f6e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015f72:	462a      	mov	r2, r5
 8015f74:	f00d fa64 	bl	8023440 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015f78:	b128      	cbz	r0, 8015f86 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015f7a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015f7e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015f80:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015f84:	6623      	str	r3, [r4, #96]	; 0x60
 8015f86:	b007      	add	sp, #28
 8015f88:	bd30      	pop	{r4, r5, pc}
 8015f8a:	f00d fa9d 	bl	80234c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015f94:	e7f1      	b.n	8015f7a <_ZN8touchgfx3HAL5touchEll+0x4a>

08015f96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015f96:	b570      	push	{r4, r5, r6, lr}
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d050      	beq.n	801603e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015f9c:	ea81 0002 	eor.w	r0, r1, r2
 8015fa0:	07c6      	lsls	r6, r0, #31
 8015fa2:	d508      	bpl.n	8015fb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015fa4:	3a01      	subs	r2, #1
 8015fa6:	18cc      	adds	r4, r1, r3
 8015fa8:	42a1      	cmp	r1, r4
 8015faa:	d048      	beq.n	801603e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015fac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015fb0:	f801 0b01 	strb.w	r0, [r1], #1
 8015fb4:	e7f8      	b.n	8015fa8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015fb6:	07d5      	lsls	r5, r2, #31
 8015fb8:	bf42      	ittt	mi
 8015fba:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015fbe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015fc2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015fc6:	2b01      	cmp	r3, #1
 8015fc8:	d915      	bls.n	8015ff6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015fca:	ea82 0001 	eor.w	r0, r2, r1
 8015fce:	0784      	lsls	r4, r0, #30
 8015fd0:	d02d      	beq.n	801602e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015fd2:	1e94      	subs	r4, r2, #2
 8015fd4:	4608      	mov	r0, r1
 8015fd6:	18ce      	adds	r6, r1, r3
 8015fd8:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015fdc:	f820 5b02 	strh.w	r5, [r0], #2
 8015fe0:	1a35      	subs	r5, r6, r0
 8015fe2:	2d01      	cmp	r5, #1
 8015fe4:	d8f8      	bhi.n	8015fd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015fe6:	1e98      	subs	r0, r3, #2
 8015fe8:	f003 0301 	and.w	r3, r3, #1
 8015fec:	f020 0001 	bic.w	r0, r0, #1
 8015ff0:	3002      	adds	r0, #2
 8015ff2:	4401      	add	r1, r0
 8015ff4:	4402      	add	r2, r0
 8015ff6:	1f14      	subs	r4, r2, #4
 8015ff8:	4608      	mov	r0, r1
 8015ffa:	18ce      	adds	r6, r1, r3
 8015ffc:	1a35      	subs	r5, r6, r0
 8015ffe:	2d03      	cmp	r5, #3
 8016000:	d810      	bhi.n	8016024 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8016002:	089c      	lsrs	r4, r3, #2
 8016004:	00a0      	lsls	r0, r4, #2
 8016006:	4401      	add	r1, r0
 8016008:	3801      	subs	r0, #1
 801600a:	4402      	add	r2, r0
 801600c:	f06f 0003 	mvn.w	r0, #3
 8016010:	fb00 3404 	mla	r4, r0, r4, r3
 8016014:	440c      	add	r4, r1
 8016016:	42a1      	cmp	r1, r4
 8016018:	d011      	beq.n	801603e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801601a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801601e:	f801 3b01 	strb.w	r3, [r1], #1
 8016022:	e7f8      	b.n	8016016 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016024:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016028:	f840 5b04 	str.w	r5, [r0], #4
 801602c:	e7e6      	b.n	8015ffc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801602e:	0790      	lsls	r0, r2, #30
 8016030:	d0e1      	beq.n	8015ff6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016032:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016036:	3b02      	subs	r3, #2
 8016038:	f821 0b02 	strh.w	r0, [r1], #2
 801603c:	e7db      	b.n	8015ff6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801603e:	2001      	movs	r0, #1
 8016040:	bd70      	pop	{r4, r5, r6, pc}

08016042 <_ZN8touchgfx3HAL7noTouchEv>:
 8016042:	b510      	push	{r4, lr}
 8016044:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016048:	4604      	mov	r4, r0
 801604a:	b153      	cbz	r3, 8016062 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801604c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016050:	2101      	movs	r1, #1
 8016052:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016056:	301c      	adds	r0, #28
 8016058:	f00d fa36 	bl	80234c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801605c:	2300      	movs	r3, #0
 801605e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016062:	bd10      	pop	{r4, pc}

08016064 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016068:	4605      	mov	r5, r0
 801606a:	6980      	ldr	r0, [r0, #24]
 801606c:	b085      	sub	sp, #20
 801606e:	460f      	mov	r7, r1
 8016070:	4690      	mov	r8, r2
 8016072:	4699      	mov	r9, r3
 8016074:	b930      	cbnz	r0, 8016084 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016076:	4b1f      	ldr	r3, [pc, #124]	; (80160f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016078:	f44f 7198 	mov.w	r1, #304	; 0x130
 801607c:	4a1e      	ldr	r2, [pc, #120]	; (80160f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801607e:	481f      	ldr	r0, [pc, #124]	; (80160fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8016080:	f00e fe9c 	bl	8024dbc <__assert_func>
 8016084:	ac04      	add	r4, sp, #16
 8016086:	2600      	movs	r6, #0
 8016088:	f844 6d04 	str.w	r6, [r4, #-4]!
 801608c:	6806      	ldr	r6, [r0, #0]
 801608e:	9401      	str	r4, [sp, #4]
 8016090:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8016094:	9400      	str	r4, [sp, #0]
 8016096:	6834      	ldr	r4, [r6, #0]
 8016098:	47a0      	blx	r4
 801609a:	4c19      	ldr	r4, [pc, #100]	; (8016100 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801609c:	4606      	mov	r6, r0
 801609e:	f8a4 9000 	strh.w	r9, [r4]
 80160a2:	f7f9 fbd1 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 80160a6:	6803      	ldr	r3, [r0, #0]
 80160a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160aa:	4798      	blx	r3
 80160ac:	280c      	cmp	r0, #12
 80160ae:	d80f      	bhi.n	80160d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80160b0:	e8df f000 	tbb	[pc, r0]
 80160b4:	1b1b1207 	.word	0x1b1b1207
 80160b8:	1b1b1b1b 	.word	0x1b1b1b1b
 80160bc:	1b1b1b1b 	.word	0x1b1b1b1b
 80160c0:	1b          	.byte	0x1b
 80160c1:	00          	.byte	0x00
 80160c2:	8823      	ldrh	r3, [r4, #0]
 80160c4:	fb08 7203 	mla	r2, r8, r3, r7
 80160c8:	9b03      	ldr	r3, [sp, #12]
 80160ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80160ce:	63eb      	str	r3, [r5, #60]	; 0x3c
 80160d0:	4630      	mov	r0, r6
 80160d2:	b005      	add	sp, #20
 80160d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160d8:	8822      	ldrh	r2, [r4, #0]
 80160da:	9b03      	ldr	r3, [sp, #12]
 80160dc:	fb08 7202 	mla	r2, r8, r2, r7
 80160e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80160e4:	1a9a      	subs	r2, r3, r2
 80160e6:	63ea      	str	r2, [r5, #60]	; 0x3c
 80160e8:	e7f2      	b.n	80160d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80160ea:	4b06      	ldr	r3, [pc, #24]	; (8016104 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 80160ec:	f240 114d 	movw	r1, #333	; 0x14d
 80160f0:	4a01      	ldr	r2, [pc, #4]	; (80160f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80160f2:	e7c4      	b.n	801607e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80160f4:	08027771 	.word	0x08027771
 80160f8:	08027a82 	.word	0x08027a82
 80160fc:	080277b6 	.word	0x080277b6
 8016100:	2000bd66 	.word	0x2000bd66
 8016104:	080277dc 	.word	0x080277dc

08016108 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801610c:	4698      	mov	r8, r3
 801610e:	6803      	ldr	r3, [r0, #0]
 8016110:	b087      	sub	sp, #28
 8016112:	460e      	mov	r6, r1
 8016114:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8016116:	4617      	mov	r7, r2
 8016118:	4b0d      	ldr	r3, [pc, #52]	; (8016150 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801611a:	4604      	mov	r4, r0
 801611c:	f8b3 9000 	ldrh.w	r9, [r3]
 8016120:	f7f9 fb92 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016124:	6803      	ldr	r3, [r0, #0]
 8016126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016128:	4798      	blx	r3
 801612a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801612e:	463a      	mov	r2, r7
 8016130:	4631      	mov	r1, r6
 8016132:	9302      	str	r3, [sp, #8]
 8016134:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016138:	9301      	str	r3, [sp, #4]
 801613a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801613e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016142:	9300      	str	r3, [sp, #0]
 8016144:	4620      	mov	r0, r4
 8016146:	4643      	mov	r3, r8
 8016148:	47a8      	blx	r5
 801614a:	b007      	add	sp, #28
 801614c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016150:	2000bd66 	.word	0x2000bd66

08016154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016158:	4606      	mov	r6, r0
 801615a:	b089      	sub	sp, #36	; 0x24
 801615c:	4610      	mov	r0, r2
 801615e:	460c      	mov	r4, r1
 8016160:	4691      	mov	r9, r2
 8016162:	4698      	mov	r8, r3
 8016164:	f005 f818 	bl	801b198 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016168:	2800      	cmp	r0, #0
 801616a:	f000 8092 	beq.w	8016292 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801616e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80162ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8016172:	ad08      	add	r5, sp, #32
 8016174:	f8df b138 	ldr.w	fp, [pc, #312]	; 80162b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8016178:	f8da 0000 	ldr.w	r0, [sl]
 801617c:	4f4a      	ldr	r7, [pc, #296]	; (80162a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801617e:	6802      	ldr	r2, [r0, #0]
 8016180:	6a12      	ldr	r2, [r2, #32]
 8016182:	4790      	blx	r2
 8016184:	f8da 0000 	ldr.w	r0, [sl]
 8016188:	6802      	ldr	r2, [r0, #0]
 801618a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801618c:	4790      	blx	r2
 801618e:	f8bb 3000 	ldrh.w	r3, [fp]
 8016192:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8016196:	4628      	mov	r0, r5
 8016198:	9300      	str	r3, [sp, #0]
 801619a:	883b      	ldrh	r3, [r7, #0]
 801619c:	9301      	str	r3, [sp, #4]
 801619e:	f005 f8bb 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80161a2:	f8ab 0000 	strh.w	r0, [fp]
 80161a6:	4628      	mov	r0, r5
 80161a8:	f005 f8f0 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80161ac:	f8da b000 	ldr.w	fp, [sl]
 80161b0:	8038      	strh	r0, [r7, #0]
 80161b2:	4648      	mov	r0, r9
 80161b4:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80161b8:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80161bc:	9302      	str	r3, [sp, #8]
 80161be:	f004 ffeb 	bl	801b198 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80161c2:	f8da 2000 	ldr.w	r2, [sl]
 80161c6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80161ca:	63d0      	str	r0, [r2, #60]	; 0x3c
 80161cc:	4620      	mov	r0, r4
 80161ce:	6822      	ldr	r2, [r4, #0]
 80161d0:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80161d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80161d6:	2200      	movs	r2, #0
 80161d8:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80161dc:	4611      	mov	r1, r2
 80161de:	4798      	blx	r3
 80161e0:	2201      	movs	r2, #1
 80161e2:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80161e6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80161ea:	1d22      	adds	r2, r4, #4
 80161ec:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 80161f0:	2900      	cmp	r1, #0
 80161f2:	d051      	beq.n	8016298 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80161f4:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 80161f8:	2900      	cmp	r1, #0
 80161fa:	d04d      	beq.n	8016298 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80161fc:	6810      	ldr	r0, [r2, #0]
 80161fe:	f10d 0c18 	add.w	ip, sp, #24
 8016202:	6851      	ldr	r1, [r2, #4]
 8016204:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016208:	4641      	mov	r1, r8
 801620a:	a806      	add	r0, sp, #24
 801620c:	f7ff fc76 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8016210:	4628      	mov	r0, r5
 8016212:	f005 fa0d 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016216:	4680      	mov	r8, r0
 8016218:	f7f9 fb16 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 801621c:	6802      	ldr	r2, [r0, #0]
 801621e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016220:	4790      	blx	r2
 8016222:	4580      	cmp	r8, r0
 8016224:	d03d      	beq.n	80162a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8016226:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016228:	b150      	cbz	r0, 8016240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801622a:	4628      	mov	r0, r5
 801622c:	f005 fa00 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016230:	4605      	mov	r5, r0
 8016232:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016234:	6803      	ldr	r3, [r0, #0]
 8016236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016238:	4798      	blx	r3
 801623a:	1a2b      	subs	r3, r5, r0
 801623c:	4258      	negs	r0, r3
 801623e:	4158      	adcs	r0, r3
 8016240:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8016244:	2500      	movs	r5, #0
 8016246:	6963      	ldr	r3, [r4, #20]
 8016248:	4620      	mov	r0, r4
 801624a:	6822      	ldr	r2, [r4, #0]
 801624c:	a906      	add	r1, sp, #24
 801624e:	6165      	str	r5, [r4, #20]
 8016250:	9303      	str	r3, [sp, #12]
 8016252:	6892      	ldr	r2, [r2, #8]
 8016254:	4790      	blx	r2
 8016256:	9b03      	ldr	r3, [sp, #12]
 8016258:	4620      	mov	r0, r4
 801625a:	4652      	mov	r2, sl
 801625c:	6163      	str	r3, [r4, #20]
 801625e:	4649      	mov	r1, r9
 8016260:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8016264:	6823      	ldr	r3, [r4, #0]
 8016266:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801626a:	4c10      	ldr	r4, [pc, #64]	; (80162ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801626e:	4798      	blx	r3
 8016270:	6820      	ldr	r0, [r4, #0]
 8016272:	9b02      	ldr	r3, [sp, #8]
 8016274:	9a00      	ldr	r2, [sp, #0]
 8016276:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801627a:	4b0d      	ldr	r3, [pc, #52]	; (80162b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801627c:	801a      	strh	r2, [r3, #0]
 801627e:	4b0a      	ldr	r3, [pc, #40]	; (80162a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8016280:	9a01      	ldr	r2, [sp, #4]
 8016282:	801a      	strh	r2, [r3, #0]
 8016284:	6803      	ldr	r3, [r0, #0]
 8016286:	6a1b      	ldr	r3, [r3, #32]
 8016288:	4798      	blx	r3
 801628a:	6820      	ldr	r0, [r4, #0]
 801628c:	6803      	ldr	r3, [r0, #0]
 801628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016290:	4798      	blx	r3
 8016292:	b009      	add	sp, #36	; 0x24
 8016294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016298:	ab06      	add	r3, sp, #24
 801629a:	6810      	ldr	r0, [r2, #0]
 801629c:	6851      	ldr	r1, [r2, #4]
 801629e:	c303      	stmia	r3!, {r0, r1}
 80162a0:	e7b6      	b.n	8016210 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80162a2:	2000      	movs	r0, #0
 80162a4:	e7cc      	b.n	8016240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80162a6:	bf00      	nop
 80162a8:	2000bd68 	.word	0x2000bd68
 80162ac:	2000bd6c 	.word	0x2000bd6c
 80162b0:	2000bd66 	.word	0x2000bd66

080162b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80162b4:	4b07      	ldr	r3, [pc, #28]	; (80162d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80162b6:	b510      	push	{r4, lr}
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	4604      	mov	r4, r0
 80162bc:	b13b      	cbz	r3, 80162ce <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80162be:	6803      	ldr	r3, [r0, #0]
 80162c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162c2:	4798      	blx	r3
 80162c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80162c6:	4283      	cmp	r3, r0
 80162c8:	d101      	bne.n	80162ce <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80162ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80162cc:	bd10      	pop	{r4, pc}
 80162ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80162d0:	e7fc      	b.n	80162cc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80162d2:	bf00      	nop
 80162d4:	2000bd6a 	.word	0x2000bd6a

080162d8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80162d8:	4b0b      	ldr	r3, [pc, #44]	; (8016308 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80162da:	b510      	push	{r4, lr}
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	4604      	mov	r4, r0
 80162e0:	b95b      	cbnz	r3, 80162fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80162e2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d007      	beq.n	80162fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80162ea:	6840      	ldr	r0, [r0, #4]
 80162ec:	f000 fbc8 	bl	8016a80 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80162f0:	b118      	cbz	r0, 80162fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80162f2:	6862      	ldr	r2, [r4, #4]
 80162f4:	7a53      	ldrb	r3, [r2, #9]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d0fc      	beq.n	80162f4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80162fa:	f7fd fbb3 	bl	8013a64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80162fe:	4620      	mov	r0, r4
 8016300:	f7ff ffd8 	bl	80162b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016304:	bd10      	pop	{r4, pc}
 8016306:	bf00      	nop
 8016308:	2000bd6a 	.word	0x2000bd6a

0801630c <_ZN8touchgfx3HAL10initializeEv>:
 801630c:	b510      	push	{r4, lr}
 801630e:	4604      	mov	r4, r0
 8016310:	f7fd fb84 	bl	8013a1c <_ZN8touchgfx10OSWrappers10initializeEv>
 8016314:	6860      	ldr	r0, [r4, #4]
 8016316:	6803      	ldr	r3, [r0, #0]
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	4798      	blx	r3
 801631c:	68e0      	ldr	r0, [r4, #12]
 801631e:	6803      	ldr	r3, [r0, #0]
 8016320:	689b      	ldr	r3, [r3, #8]
 8016322:	4798      	blx	r3
 8016324:	6823      	ldr	r3, [r4, #0]
 8016326:	4620      	mov	r0, r4
 8016328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801632a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801632e:	4718      	bx	r3

08016330 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016330:	b508      	push	{r3, lr}
 8016332:	290c      	cmp	r1, #12
 8016334:	d817      	bhi.n	8016366 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8016336:	e8df f001 	tbb	[pc, r1]
 801633a:	090b      	.short	0x090b
 801633c:	0d0d0d07 	.word	0x0d0d0d07
 8016340:	1414140d 	.word	0x1414140d
 8016344:	1414      	.short	0x1414
 8016346:	0d          	.byte	0x0d
 8016347:	00          	.byte	0x00
 8016348:	2020      	movs	r0, #32
 801634a:	bd08      	pop	{r3, pc}
 801634c:	2018      	movs	r0, #24
 801634e:	e7fc      	b.n	801634a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016350:	2010      	movs	r0, #16
 8016352:	e7fa      	b.n	801634a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016354:	4b05      	ldr	r3, [pc, #20]	; (801636c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016356:	f44f 710c 	mov.w	r1, #560	; 0x230
 801635a:	4a05      	ldr	r2, [pc, #20]	; (8016370 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801635c:	4805      	ldr	r0, [pc, #20]	; (8016374 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801635e:	f00e fd2d 	bl	8024dbc <__assert_func>
 8016362:	2008      	movs	r0, #8
 8016364:	e7f1      	b.n	801634a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016366:	2000      	movs	r0, #0
 8016368:	e7ef      	b.n	801634a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801636a:	bf00      	nop
 801636c:	080278af 	.word	0x080278af
 8016370:	08027c44 	.word	0x08027c44
 8016374:	080277b6 	.word	0x080277b6

08016378 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016378:	b570      	push	{r4, r5, r6, lr}
 801637a:	460d      	mov	r5, r1
 801637c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016380:	4616      	mov	r6, r2
 8016382:	461c      	mov	r4, r3
 8016384:	f7ff ffd4 	bl	8016330 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016388:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801638c:	10c0      	asrs	r0, r0, #3
 801638e:	fb06 5101 	mla	r1, r6, r1, r5
 8016392:	fb00 4001 	mla	r0, r0, r1, r4
 8016396:	bd70      	pop	{r4, r5, r6, pc}

08016398 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8016398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801639c:	b08a      	sub	sp, #40	; 0x28
 801639e:	f04f 0c00 	mov.w	ip, #0
 80163a2:	4604      	mov	r4, r0
 80163a4:	469a      	mov	sl, r3
 80163a6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80163aa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80163ae:	f1b8 0f02 	cmp.w	r8, #2
 80163b2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80163b6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80163ba:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80163be:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80163c2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80163c6:	f8cd c020 	str.w	ip, [sp, #32]
 80163ca:	d030      	beq.n	801642e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80163cc:	2bff      	cmp	r3, #255	; 0xff
 80163ce:	d12c      	bne.n	801642a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80163d0:	4560      	cmp	r0, ip
 80163d2:	bf14      	ite	ne
 80163d4:	2004      	movne	r0, #4
 80163d6:	2001      	moveq	r0, #1
 80163d8:	9204      	str	r2, [sp, #16]
 80163da:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80163de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80163e2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80163e6:	f8ad 6018 	strh.w	r6, [sp, #24]
 80163ea:	f8ad 501a 	strh.w	r5, [sp, #26]
 80163ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163f2:	4620      	mov	r0, r4
 80163f4:	f7ff ff5e 	bl	80162b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80163f8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80163fc:	4603      	mov	r3, r0
 80163fe:	4651      	mov	r1, sl
 8016400:	4620      	mov	r0, r4
 8016402:	e9cd 9700 	strd	r9, r7, [sp]
 8016406:	f7ff ffb7 	bl	8016378 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801640a:	f8ad 901e 	strh.w	r9, [sp, #30]
 801640e:	9005      	str	r0, [sp, #20]
 8016410:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016414:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016418:	b106      	cbz	r6, 801641c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801641a:	b98d      	cbnz	r5, 8016440 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801641c:	4b12      	ldr	r3, [pc, #72]	; (8016468 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801641e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016422:	4a12      	ldr	r2, [pc, #72]	; (801646c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016424:	4812      	ldr	r0, [pc, #72]	; (8016470 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016426:	f00e fcc9 	bl	8024dbc <__assert_func>
 801642a:	2004      	movs	r0, #4
 801642c:	e7d4      	b.n	80163d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801642e:	2bff      	cmp	r3, #255	; 0xff
 8016430:	d104      	bne.n	801643c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8016432:	2800      	cmp	r0, #0
 8016434:	bf14      	ite	ne
 8016436:	2040      	movne	r0, #64	; 0x40
 8016438:	2020      	moveq	r0, #32
 801643a:	e7cd      	b.n	80163d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801643c:	2040      	movs	r0, #64	; 0x40
 801643e:	e7cb      	b.n	80163d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016440:	6823      	ldr	r3, [r4, #0]
 8016442:	4620      	mov	r0, r4
 8016444:	9d02      	ldr	r5, [sp, #8]
 8016446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016448:	4798      	blx	r3
 801644a:	4228      	tst	r0, r5
 801644c:	d104      	bne.n	8016458 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801644e:	4b09      	ldr	r3, [pc, #36]	; (8016474 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016450:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016454:	4a05      	ldr	r2, [pc, #20]	; (801646c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016456:	e7e5      	b.n	8016424 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016458:	6860      	ldr	r0, [r4, #4]
 801645a:	a902      	add	r1, sp, #8
 801645c:	6803      	ldr	r3, [r0, #0]
 801645e:	685b      	ldr	r3, [r3, #4]
 8016460:	4798      	blx	r3
 8016462:	b00a      	add	sp, #40	; 0x28
 8016464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016468:	08027832 	.word	0x08027832
 801646c:	08027ae6 	.word	0x08027ae6
 8016470:	080277b6 	.word	0x080277b6
 8016474:	0802786a 	.word	0x0802786a

08016478 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8016478:	b510      	push	{r4, lr}
 801647a:	b08a      	sub	sp, #40	; 0x28
 801647c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016480:	9408      	str	r4, [sp, #32]
 8016482:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8016486:	9407      	str	r4, [sp, #28]
 8016488:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801648c:	9406      	str	r4, [sp, #24]
 801648e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8016492:	9405      	str	r4, [sp, #20]
 8016494:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8016498:	9404      	str	r4, [sp, #16]
 801649a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801649e:	9403      	str	r4, [sp, #12]
 80164a0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80164a4:	9402      	str	r4, [sp, #8]
 80164a6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80164aa:	e9cd 3400 	strd	r3, r4, [sp]
 80164ae:	4613      	mov	r3, r2
 80164b0:	2200      	movs	r2, #0
 80164b2:	f7ff ff71 	bl	8016398 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80164b6:	b00a      	add	sp, #40	; 0x28
 80164b8:	bd10      	pop	{r4, pc}
	...

080164bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80164bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164be:	b08b      	sub	sp, #44	; 0x2c
 80164c0:	4616      	mov	r6, r2
 80164c2:	460d      	mov	r5, r1
 80164c4:	461f      	mov	r7, r3
 80164c6:	4604      	mov	r4, r0
 80164c8:	f7f9 f9be 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 80164cc:	6803      	ldr	r3, [r0, #0]
 80164ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164d0:	4798      	blx	r3
 80164d2:	4b0e      	ldr	r3, [pc, #56]	; (801650c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80164d4:	2200      	movs	r2, #0
 80164d6:	4629      	mov	r1, r5
 80164d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80164dc:	881b      	ldrh	r3, [r3, #0]
 80164de:	4620      	mov	r0, r4
 80164e0:	9306      	str	r3, [sp, #24]
 80164e2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80164e6:	9305      	str	r3, [sp, #20]
 80164e8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80164ec:	9304      	str	r3, [sp, #16]
 80164ee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80164f2:	9303      	str	r3, [sp, #12]
 80164f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80164f8:	9302      	str	r3, [sp, #8]
 80164fa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80164fe:	e9cd 7300 	strd	r7, r3, [sp]
 8016502:	4633      	mov	r3, r6
 8016504:	f7ff ff48 	bl	8016398 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016508:	b00b      	add	sp, #44	; 0x2c
 801650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801650c:	2000bd66 	.word	0x2000bd66

08016510 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016514:	461f      	mov	r7, r3
 8016516:	4b14      	ldr	r3, [pc, #80]	; (8016568 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016518:	b08a      	sub	sp, #40	; 0x28
 801651a:	4616      	mov	r6, r2
 801651c:	f8b3 8000 	ldrh.w	r8, [r3]
 8016520:	460d      	mov	r5, r1
 8016522:	4604      	mov	r4, r0
 8016524:	f7f9 f990 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016528:	6803      	ldr	r3, [r0, #0]
 801652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801652c:	4798      	blx	r3
 801652e:	2302      	movs	r3, #2
 8016530:	9008      	str	r0, [sp, #32]
 8016532:	2200      	movs	r2, #0
 8016534:	4629      	mov	r1, r5
 8016536:	4620      	mov	r0, r4
 8016538:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801653c:	2301      	movs	r3, #1
 801653e:	9305      	str	r3, [sp, #20]
 8016540:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016544:	9304      	str	r3, [sp, #16]
 8016546:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801654a:	9303      	str	r3, [sp, #12]
 801654c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016550:	9302      	str	r3, [sp, #8]
 8016552:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016556:	e9cd 7300 	strd	r7, r3, [sp]
 801655a:	4633      	mov	r3, r6
 801655c:	f7ff ff1c 	bl	8016398 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016560:	b00a      	add	sp, #40	; 0x28
 8016562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016566:	bf00      	nop
 8016568:	2000bd66 	.word	0x2000bd66

0801656c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801656c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016570:	b08b      	sub	sp, #44	; 0x2c
 8016572:	469b      	mov	fp, r3
 8016574:	4604      	mov	r4, r0
 8016576:	4692      	mov	sl, r2
 8016578:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801657c:	2600      	movs	r6, #0
 801657e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016582:	4689      	mov	r9, r1
 8016584:	2fff      	cmp	r7, #255	; 0xff
 8016586:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801658a:	9608      	str	r6, [sp, #32]
 801658c:	bf14      	ite	ne
 801658e:	2308      	movne	r3, #8
 8016590:	2302      	moveq	r3, #2
 8016592:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016596:	f7ff fe8d 	bl	80162b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801659a:	465a      	mov	r2, fp
 801659c:	4603      	mov	r3, r0
 801659e:	4651      	mov	r1, sl
 80165a0:	4620      	mov	r0, r4
 80165a2:	e9cd 8500 	strd	r8, r5, [sp]
 80165a6:	f7ff fee7 	bl	8016378 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80165aa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80165ae:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80165b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80165b6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80165ba:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80165be:	f8ad 301a 	strh.w	r3, [sp, #26]
 80165c2:	6823      	ldr	r3, [r4, #0]
 80165c4:	9d02      	ldr	r5, [sp, #8]
 80165c6:	9005      	str	r0, [sp, #20]
 80165c8:	4620      	mov	r0, r4
 80165ca:	f8ad 601c 	strh.w	r6, [sp, #28]
 80165ce:	f8ad 801e 	strh.w	r8, [sp, #30]
 80165d2:	f8cd 9020 	str.w	r9, [sp, #32]
 80165d6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80165da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165dc:	4798      	blx	r3
 80165de:	4228      	tst	r0, r5
 80165e0:	d106      	bne.n	80165f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80165e2:	4b07      	ldr	r3, [pc, #28]	; (8016600 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 80165e4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80165e8:	4a06      	ldr	r2, [pc, #24]	; (8016604 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80165ea:	4807      	ldr	r0, [pc, #28]	; (8016608 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80165ec:	f00e fbe6 	bl	8024dbc <__assert_func>
 80165f0:	6860      	ldr	r0, [r4, #4]
 80165f2:	a902      	add	r1, sp, #8
 80165f4:	6803      	ldr	r3, [r0, #0]
 80165f6:	685b      	ldr	r3, [r3, #4]
 80165f8:	4798      	blx	r3
 80165fa:	b00b      	add	sp, #44	; 0x2c
 80165fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016600:	0802786a 	.word	0x0802786a
 8016604:	08027baf 	.word	0x08027baf
 8016608:	080277b6 	.word	0x080277b6

0801660c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801660c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016610:	461f      	mov	r7, r3
 8016612:	4b0b      	ldr	r3, [pc, #44]	; (8016640 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016614:	460d      	mov	r5, r1
 8016616:	4616      	mov	r6, r2
 8016618:	f8b3 8000 	ldrh.w	r8, [r3]
 801661c:	4604      	mov	r4, r0
 801661e:	f7f9 f913 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016622:	6803      	ldr	r3, [r0, #0]
 8016624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016626:	4798      	blx	r3
 8016628:	463b      	mov	r3, r7
 801662a:	4632      	mov	r2, r6
 801662c:	4629      	mov	r1, r5
 801662e:	e9cd 8000 	strd	r8, r0, [sp]
 8016632:	4620      	mov	r0, r4
 8016634:	f7ff fea0 	bl	8016378 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016638:	b002      	add	sp, #8
 801663a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801663e:	bf00      	nop
 8016640:	2000bd66 	.word	0x2000bd66

08016644 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016648:	4698      	mov	r8, r3
 801664a:	b088      	sub	sp, #32
 801664c:	2300      	movs	r3, #0
 801664e:	4617      	mov	r7, r2
 8016650:	4604      	mov	r4, r0
 8016652:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8016656:	9306      	str	r3, [sp, #24]
 8016658:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801665c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016660:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016664:	f8ad 5012 	strh.w	r5, [sp, #18]
 8016668:	e9cd 3100 	strd	r3, r1, [sp]
 801666c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016670:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016674:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016678:	f88d 301c 	strb.w	r3, [sp, #28]
 801667c:	f7ff fe1a 	bl	80162b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016680:	4642      	mov	r2, r8
 8016682:	4603      	mov	r3, r0
 8016684:	4639      	mov	r1, r7
 8016686:	4620      	mov	r0, r4
 8016688:	f7ff ffc0 	bl	801660c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801668c:	4b16      	ldr	r3, [pc, #88]	; (80166e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801668e:	9003      	str	r0, [sp, #12]
 8016690:	881b      	ldrh	r3, [r3, #0]
 8016692:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016696:	f7f9 f8d7 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 801669a:	6803      	ldr	r3, [r0, #0]
 801669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801669e:	4798      	blx	r3
 80166a0:	f88d 001e 	strb.w	r0, [sp, #30]
 80166a4:	f88d 001d 	strb.w	r0, [sp, #29]
 80166a8:	b106      	cbz	r6, 80166ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80166aa:	b935      	cbnz	r5, 80166ba <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80166ac:	4b0f      	ldr	r3, [pc, #60]	; (80166ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80166ae:	f240 11cd 	movw	r1, #461	; 0x1cd
 80166b2:	4a0f      	ldr	r2, [pc, #60]	; (80166f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80166b4:	480f      	ldr	r0, [pc, #60]	; (80166f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80166b6:	f00e fb81 	bl	8024dbc <__assert_func>
 80166ba:	6823      	ldr	r3, [r4, #0]
 80166bc:	4620      	mov	r0, r4
 80166be:	9d00      	ldr	r5, [sp, #0]
 80166c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166c2:	4798      	blx	r3
 80166c4:	4228      	tst	r0, r5
 80166c6:	d104      	bne.n	80166d2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80166c8:	4b0b      	ldr	r3, [pc, #44]	; (80166f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80166ca:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80166ce:	4a08      	ldr	r2, [pc, #32]	; (80166f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80166d0:	e7f0      	b.n	80166b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80166d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166d4:	4669      	mov	r1, sp
 80166d6:	6860      	ldr	r0, [r4, #4]
 80166d8:	9306      	str	r3, [sp, #24]
 80166da:	6803      	ldr	r3, [r0, #0]
 80166dc:	685b      	ldr	r3, [r3, #4]
 80166de:	4798      	blx	r3
 80166e0:	b008      	add	sp, #32
 80166e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166e6:	bf00      	nop
 80166e8:	2000bd66 	.word	0x2000bd66
 80166ec:	08027832 	.word	0x08027832
 80166f0:	08027998 	.word	0x08027998
 80166f4:	080277b6 	.word	0x080277b6
 80166f8:	0802786a 	.word	0x0802786a

080166fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80166fc:	b570      	push	{r4, r5, r6, lr}
 80166fe:	b08a      	sub	sp, #40	; 0x28
 8016700:	4604      	mov	r4, r0
 8016702:	466b      	mov	r3, sp
 8016704:	e883 0006 	stmia.w	r3, {r1, r2}
 8016708:	4b1f      	ldr	r3, [pc, #124]	; (8016788 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	b933      	cbnz	r3, 801671c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801670e:	4b1f      	ldr	r3, [pc, #124]	; (801678c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016710:	f240 11f9 	movw	r1, #505	; 0x1f9
 8016714:	4a1e      	ldr	r2, [pc, #120]	; (8016790 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016716:	481f      	ldr	r0, [pc, #124]	; (8016794 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016718:	f00e fb50 	bl	8024dbc <__assert_func>
 801671c:	2300      	movs	r3, #0
 801671e:	f8bd 5000 	ldrh.w	r5, [sp]
 8016722:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8016726:	9308      	str	r3, [sp, #32]
 8016728:	2301      	movs	r3, #1
 801672a:	9302      	str	r3, [sp, #8]
 801672c:	6803      	ldr	r3, [r0, #0]
 801672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016730:	4798      	blx	r3
 8016732:	4632      	mov	r2, r6
 8016734:	4629      	mov	r1, r5
 8016736:	4603      	mov	r3, r0
 8016738:	4620      	mov	r0, r4
 801673a:	f7ff ff67 	bl	801660c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801673e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016740:	9003      	str	r0, [sp, #12]
 8016742:	9305      	str	r3, [sp, #20]
 8016744:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016748:	f8ad 3018 	strh.w	r3, [sp, #24]
 801674c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016750:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016754:	4b10      	ldr	r3, [pc, #64]	; (8016798 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	f8ad 301c 	strh.w	r3, [sp, #28]
 801675c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016760:	f7f9 f872 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016764:	6803      	ldr	r3, [r0, #0]
 8016766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016768:	4798      	blx	r3
 801676a:	23ff      	movs	r3, #255	; 0xff
 801676c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016770:	a902      	add	r1, sp, #8
 8016772:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016776:	6860      	ldr	r0, [r4, #4]
 8016778:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801677c:	6803      	ldr	r3, [r0, #0]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	4798      	blx	r3
 8016782:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016784:	b00a      	add	sp, #40	; 0x28
 8016786:	bd70      	pop	{r4, r5, r6, pc}
 8016788:	2000bd6b 	.word	0x2000bd6b
 801678c:	08027703 	.word	0x08027703
 8016790:	08027a3c 	.word	0x08027a3c
 8016794:	080277b6 	.word	0x080277b6
 8016798:	2000bd66 	.word	0x2000bd66

0801679c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801679c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801679e:	b08b      	sub	sp, #44	; 0x2c
 80167a0:	4604      	mov	r4, r0
 80167a2:	466d      	mov	r5, sp
 80167a4:	e885 0006 	stmia.w	r5, {r1, r2}
 80167a8:	461d      	mov	r5, r3
 80167aa:	2300      	movs	r3, #0
 80167ac:	f8bd 6000 	ldrh.w	r6, [sp]
 80167b0:	9308      	str	r3, [sp, #32]
 80167b2:	2301      	movs	r3, #1
 80167b4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80167b8:	9302      	str	r3, [sp, #8]
 80167ba:	6803      	ldr	r3, [r0, #0]
 80167bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167be:	4798      	blx	r3
 80167c0:	463a      	mov	r2, r7
 80167c2:	4631      	mov	r1, r6
 80167c4:	4603      	mov	r3, r0
 80167c6:	4620      	mov	r0, r4
 80167c8:	f7ff ff20 	bl	801660c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80167cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80167d0:	9003      	str	r0, [sp, #12]
 80167d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80167d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80167da:	9505      	str	r5, [sp, #20]
 80167dc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80167e0:	4b0d      	ldr	r3, [pc, #52]	; (8016818 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80167e2:	881b      	ldrh	r3, [r3, #0]
 80167e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80167e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80167ee:	f7f9 f82b 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 80167f2:	6803      	ldr	r3, [r0, #0]
 80167f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167f6:	4798      	blx	r3
 80167f8:	23ff      	movs	r3, #255	; 0xff
 80167fa:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80167fe:	a902      	add	r1, sp, #8
 8016800:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016804:	6860      	ldr	r0, [r4, #4]
 8016806:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801680a:	6803      	ldr	r3, [r0, #0]
 801680c:	685b      	ldr	r3, [r3, #4]
 801680e:	4798      	blx	r3
 8016810:	4628      	mov	r0, r5
 8016812:	b00b      	add	sp, #44	; 0x2c
 8016814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016816:	bf00      	nop
 8016818:	2000bd66 	.word	0x2000bd66

0801681c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801681c:	b570      	push	{r4, r5, r6, lr}
 801681e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016822:	4604      	mov	r4, r0
 8016824:	b19b      	cbz	r3, 801684e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016826:	2002      	movs	r0, #2
 8016828:	f7fc fe84 	bl	8013534 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801682c:	2300      	movs	r3, #0
 801682e:	4620      	mov	r0, r4
 8016830:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016834:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016838:	6823      	ldr	r3, [r4, #0]
 801683a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801683e:	f7ff fd39 	bl	80162b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016842:	4601      	mov	r1, r0
 8016844:	4620      	mov	r0, r4
 8016846:	462b      	mov	r3, r5
 8016848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801684c:	4718      	bx	r3
 801684e:	bd70      	pop	{r4, r5, r6, pc}

08016850 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016850:	4770      	bx	lr

08016852 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016852:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016856:	1a13      	subs	r3, r2, r0
 8016858:	4258      	negs	r0, r3
 801685a:	4158      	adcs	r0, r3
 801685c:	4770      	bx	lr

0801685e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801685e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016862:	1a9b      	subs	r3, r3, r2
 8016864:	2b00      	cmp	r3, #0
 8016866:	bfdc      	itt	le
 8016868:	6882      	ldrle	r2, [r0, #8]
 801686a:	189b      	addle	r3, r3, r2
 801686c:	2b01      	cmp	r3, #1
 801686e:	bfcc      	ite	gt
 8016870:	2000      	movgt	r0, #0
 8016872:	2001      	movle	r0, #1
 8016874:	4770      	bx	lr

08016876 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016876:	6902      	ldr	r2, [r0, #16]
 8016878:	6840      	ldr	r0, [r0, #4]
 801687a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801687e:	4770      	bx	lr

08016880 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016880:	6803      	ldr	r3, [r0, #0]
 8016882:	691b      	ldr	r3, [r3, #16]
 8016884:	4718      	bx	r3

08016886 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016886:	4770      	bx	lr

08016888 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016888:	4770      	bx	lr
	...

0801688c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801688c:	2301      	movs	r3, #1
 801688e:	b570      	push	{r4, r5, r6, lr}
 8016890:	7203      	strb	r3, [r0, #8]
 8016892:	4604      	mov	r4, r0
 8016894:	6840      	ldr	r0, [r0, #4]
 8016896:	6803      	ldr	r3, [r0, #0]
 8016898:	699b      	ldr	r3, [r3, #24]
 801689a:	4798      	blx	r3
 801689c:	6803      	ldr	r3, [r0, #0]
 801689e:	4605      	mov	r5, r0
 80168a0:	2b08      	cmp	r3, #8
 80168a2:	d01e      	beq.n	80168e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80168a4:	d80b      	bhi.n	80168be <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80168a6:	2b02      	cmp	r3, #2
 80168a8:	d027      	beq.n	80168fa <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80168aa:	2b04      	cmp	r3, #4
 80168ac:	d011      	beq.n	80168d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80168ae:	2b01      	cmp	r3, #1
 80168b0:	d028      	beq.n	8016904 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80168b2:	4b17      	ldr	r3, [pc, #92]	; (8016910 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80168b4:	218b      	movs	r1, #139	; 0x8b
 80168b6:	4a17      	ldr	r2, [pc, #92]	; (8016914 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80168b8:	4817      	ldr	r0, [pc, #92]	; (8016918 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80168ba:	f00e fa7f 	bl	8024dbc <__assert_func>
 80168be:	2b40      	cmp	r3, #64	; 0x40
 80168c0:	d020      	beq.n	8016904 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80168c2:	d801      	bhi.n	80168c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80168c4:	2b20      	cmp	r3, #32
 80168c6:	e7f3      	b.n	80168b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80168c8:	2b80      	cmp	r3, #128	; 0x80
 80168ca:	d01b      	beq.n	8016904 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80168cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168d0:	e7ee      	b.n	80168b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80168d2:	6823      	ldr	r3, [r4, #0]
 80168d4:	7f01      	ldrb	r1, [r0, #28]
 80168d6:	4620      	mov	r0, r4
 80168d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168da:	4798      	blx	r3
 80168dc:	6823      	ldr	r3, [r4, #0]
 80168de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168e0:	e006      	b.n	80168f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	7f01      	ldrb	r1, [r0, #28]
 80168e6:	4620      	mov	r0, r4
 80168e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168ea:	4798      	blx	r3
 80168ec:	6823      	ldr	r3, [r4, #0]
 80168ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168f0:	4629      	mov	r1, r5
 80168f2:	4620      	mov	r0, r4
 80168f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168f8:	4718      	bx	r3
 80168fa:	6823      	ldr	r3, [r4, #0]
 80168fc:	4620      	mov	r0, r4
 80168fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016900:	4798      	blx	r3
 8016902:	e7f3      	b.n	80168ec <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016904:	6823      	ldr	r3, [r4, #0]
 8016906:	4620      	mov	r0, r4
 8016908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801690a:	4798      	blx	r3
 801690c:	e7e6      	b.n	80168dc <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801690e:	bf00      	nop
 8016910:	08027c8d 	.word	0x08027c8d
 8016914:	08027d9c 	.word	0x08027d9c
 8016918:	08027cb2 	.word	0x08027cb2

0801691c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801691c:	b570      	push	{r4, r5, r6, lr}
 801691e:	4604      	mov	r4, r0
 8016920:	460e      	mov	r6, r1
 8016922:	6860      	ldr	r0, [r4, #4]
 8016924:	6803      	ldr	r3, [r0, #0]
 8016926:	685b      	ldr	r3, [r3, #4]
 8016928:	4798      	blx	r3
 801692a:	2800      	cmp	r0, #0
 801692c:	d1f9      	bne.n	8016922 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801692e:	4d0b      	ldr	r5, [pc, #44]	; (801695c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016930:	6828      	ldr	r0, [r5, #0]
 8016932:	6803      	ldr	r3, [r0, #0]
 8016934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016936:	4798      	blx	r3
 8016938:	f7fd f8b0 	bl	8013a9c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801693c:	6860      	ldr	r0, [r4, #4]
 801693e:	4631      	mov	r1, r6
 8016940:	6803      	ldr	r3, [r0, #0]
 8016942:	689b      	ldr	r3, [r3, #8]
 8016944:	4798      	blx	r3
 8016946:	6823      	ldr	r3, [r4, #0]
 8016948:	4620      	mov	r0, r4
 801694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801694c:	4798      	blx	r3
 801694e:	6828      	ldr	r0, [r5, #0]
 8016950:	6803      	ldr	r3, [r0, #0]
 8016952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016958:	4718      	bx	r3
 801695a:	bf00      	nop
 801695c:	2000bd6c 	.word	0x2000bd6c

08016960 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016960:	b508      	push	{r3, lr}
 8016962:	f7fd f87f 	bl	8013a64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801696a:	f7fd b889 	b.w	8013a80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801696e <_ZN8touchgfx13DMA_Interface5startEv>:
 801696e:	b510      	push	{r4, lr}
 8016970:	4604      	mov	r4, r0
 8016972:	6840      	ldr	r0, [r0, #4]
 8016974:	6803      	ldr	r3, [r0, #0]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4798      	blx	r3
 801697a:	b948      	cbnz	r0, 8016990 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801697c:	7a63      	ldrb	r3, [r4, #9]
 801697e:	b13b      	cbz	r3, 8016990 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016980:	7a23      	ldrb	r3, [r4, #8]
 8016982:	b92b      	cbnz	r3, 8016990 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016984:	6823      	ldr	r3, [r4, #0]
 8016986:	4620      	mov	r0, r4
 8016988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801698a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801698e:	4718      	bx	r3
 8016990:	bd10      	pop	{r4, pc}
	...

08016994 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016994:	b510      	push	{r4, lr}
 8016996:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801699a:	1b12      	subs	r2, r2, r4
 801699c:	2a00      	cmp	r2, #0
 801699e:	bfdc      	itt	le
 80169a0:	6883      	ldrle	r3, [r0, #8]
 80169a2:	18d2      	addle	r2, r2, r3
 80169a4:	2a01      	cmp	r2, #1
 80169a6:	dd18      	ble.n	80169da <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80169a8:	6843      	ldr	r3, [r0, #4]
 80169aa:	f101 021c 	add.w	r2, r1, #28
 80169ae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80169b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80169b6:	4291      	cmp	r1, r2
 80169b8:	f843 4b04 	str.w	r4, [r3], #4
 80169bc:	d1f9      	bne.n	80169b2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80169be:	880a      	ldrh	r2, [r1, #0]
 80169c0:	801a      	strh	r2, [r3, #0]
 80169c2:	788a      	ldrb	r2, [r1, #2]
 80169c4:	709a      	strb	r2, [r3, #2]
 80169c6:	68c3      	ldr	r3, [r0, #12]
 80169c8:	6882      	ldr	r2, [r0, #8]
 80169ca:	f3bf 8f5b 	dmb	ish
 80169ce:	3301      	adds	r3, #1
 80169d0:	429a      	cmp	r2, r3
 80169d2:	bfd8      	it	le
 80169d4:	1a9b      	suble	r3, r3, r2
 80169d6:	60c3      	str	r3, [r0, #12]
 80169d8:	bd10      	pop	{r4, pc}
 80169da:	4b03      	ldr	r3, [pc, #12]	; (80169e8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80169dc:	2139      	movs	r1, #57	; 0x39
 80169de:	4a03      	ldr	r2, [pc, #12]	; (80169ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80169e0:	4803      	ldr	r0, [pc, #12]	; (80169f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80169e2:	f00e f9eb 	bl	8024dbc <__assert_func>
 80169e6:	bf00      	nop
 80169e8:	08027cd8 	.word	0x08027cd8
 80169ec:	08027dcc 	.word	0x08027dcc
 80169f0:	08027cb2 	.word	0x08027cb2

080169f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80169f4:	b510      	push	{r4, lr}
 80169f6:	6803      	ldr	r3, [r0, #0]
 80169f8:	4604      	mov	r4, r0
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	4798      	blx	r3
 80169fe:	b128      	cbz	r0, 8016a0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016a00:	4b07      	ldr	r3, [pc, #28]	; (8016a20 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016a02:	213f      	movs	r1, #63	; 0x3f
 8016a04:	4a07      	ldr	r2, [pc, #28]	; (8016a24 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016a06:	4808      	ldr	r0, [pc, #32]	; (8016a28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016a08:	f00e f9d8 	bl	8024dbc <__assert_func>
 8016a0c:	6923      	ldr	r3, [r4, #16]
 8016a0e:	68a2      	ldr	r2, [r4, #8]
 8016a10:	f3bf 8f5b 	dmb	ish
 8016a14:	3301      	adds	r3, #1
 8016a16:	429a      	cmp	r2, r3
 8016a18:	bfd8      	it	le
 8016a1a:	1a9b      	suble	r3, r3, r2
 8016a1c:	6123      	str	r3, [r4, #16]
 8016a1e:	bd10      	pop	{r4, pc}
 8016a20:	08027cfb 	.word	0x08027cfb
 8016a24:	08027e1a 	.word	0x08027e1a
 8016a28:	08027cb2 	.word	0x08027cb2

08016a2c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016a2c:	b570      	push	{r4, r5, r6, lr}
 8016a2e:	4604      	mov	r4, r0
 8016a30:	6840      	ldr	r0, [r0, #4]
 8016a32:	6803      	ldr	r3, [r0, #0]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	4798      	blx	r3
 8016a38:	4605      	mov	r5, r0
 8016a3a:	b930      	cbnz	r0, 8016a4a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016a3c:	7a23      	ldrb	r3, [r4, #8]
 8016a3e:	b123      	cbz	r3, 8016a4a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016a40:	6860      	ldr	r0, [r4, #4]
 8016a42:	6803      	ldr	r3, [r0, #0]
 8016a44:	695b      	ldr	r3, [r3, #20]
 8016a46:	4798      	blx	r3
 8016a48:	7225      	strb	r5, [r4, #8]
 8016a4a:	6860      	ldr	r0, [r4, #4]
 8016a4c:	6803      	ldr	r3, [r0, #0]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	4798      	blx	r3
 8016a52:	b928      	cbnz	r0, 8016a60 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016a54:	6823      	ldr	r3, [r4, #0]
 8016a56:	4620      	mov	r0, r4
 8016a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a5e:	4718      	bx	r3
 8016a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a64:	f7fd b826 	b.w	8013ab4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016a68 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016a68:	b510      	push	{r4, lr}
 8016a6a:	6082      	str	r2, [r0, #8]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	4c03      	ldr	r4, [pc, #12]	; (8016a7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016a70:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016a74:	e9c0 4100 	strd	r4, r1, [r0]
 8016a78:	bd10      	pop	{r4, pc}
 8016a7a:	bf00      	nop
 8016a7c:	08027d80 	.word	0x08027d80

08016a80 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016a80:	6840      	ldr	r0, [r0, #4]
 8016a82:	6803      	ldr	r3, [r0, #0]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	4718      	bx	r3

08016a88 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016a88:	2001      	movs	r0, #1
 8016a8a:	4770      	bx	lr

08016a8c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a90:	460d      	mov	r5, r1
 8016a92:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016a96:	b085      	sub	sp, #20
 8016a98:	4690      	mov	r8, r2
 8016a9a:	4411      	add	r1, r2
 8016a9c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016aa0:	4699      	mov	r9, r3
 8016aa2:	6803      	ldr	r3, [r0, #0]
 8016aa4:	60c1      	str	r1, [r0, #12]
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016aaa:	440a      	add	r2, r1
 8016aac:	6102      	str	r2, [r0, #16]
 8016aae:	68db      	ldr	r3, [r3, #12]
 8016ab0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016ab4:	4798      	blx	r3
 8016ab6:	2800      	cmp	r0, #0
 8016ab8:	d039      	beq.n	8016b2e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8016aba:	44c8      	add	r8, r9
 8016abc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016ac0:	4445      	add	r5, r8
 8016ac2:	6823      	ldr	r3, [r4, #0]
 8016ac4:	f10d 020f 	add.w	r2, sp, #15
 8016ac8:	a903      	add	r1, sp, #12
 8016aca:	4620      	mov	r0, r4
 8016acc:	9200      	str	r2, [sp, #0]
 8016ace:	f10d 020d 	add.w	r2, sp, #13
 8016ad2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016ad6:	f10d 030e 	add.w	r3, sp, #14
 8016ada:	47c0      	blx	r8
 8016adc:	b1f8      	cbz	r0, 8016b1e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016ade:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016ae2:	7a20      	ldrb	r0, [r4, #8]
 8016ae4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016ae8:	4358      	muls	r0, r3
 8016aea:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016aee:	1c43      	adds	r3, r0, #1
 8016af0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016af4:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016af8:	121b      	asrs	r3, r3, #8
 8016afa:	fb10 f003 	smulbb	r0, r0, r3
 8016afe:	b283      	uxth	r3, r0
 8016b00:	1c58      	adds	r0, r3, #1
 8016b02:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	1200      	asrs	r0, r0, #8
 8016b0a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016b0e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016b12:	28ff      	cmp	r0, #255	; 0xff
 8016b14:	d10e      	bne.n	8016b34 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016b16:	9100      	str	r1, [sp, #0]
 8016b18:	4629      	mov	r1, r5
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	47c0      	blx	r8
 8016b1e:	68e3      	ldr	r3, [r4, #12]
 8016b20:	3e01      	subs	r6, #1
 8016b22:	f105 0503 	add.w	r5, r5, #3
 8016b26:	f103 0301 	add.w	r3, r3, #1
 8016b2a:	60e3      	str	r3, [r4, #12]
 8016b2c:	d1c9      	bne.n	8016ac2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016b2e:	b005      	add	sp, #20
 8016b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b34:	fa1f fc80 	uxth.w	ip, r0
 8016b38:	43c0      	mvns	r0, r0
 8016b3a:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016b3e:	fb12 f20c 	smulbb	r2, r2, ip
 8016b42:	b2c0      	uxtb	r0, r0
 8016b44:	fb13 f30c 	smulbb	r3, r3, ip
 8016b48:	fb0e 2200 	mla	r2, lr, r0, r2
 8016b4c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016b50:	fb11 f10c 	smulbb	r1, r1, ip
 8016b54:	fb0e 3300 	mla	r3, lr, r0, r3
 8016b58:	f895 e000 	ldrb.w	lr, [r5]
 8016b5c:	b292      	uxth	r2, r2
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	fb0e 1000 	mla	r0, lr, r0, r1
 8016b64:	1c59      	adds	r1, r3, #1
 8016b66:	b280      	uxth	r0, r0
 8016b68:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016b6c:	1c51      	adds	r1, r2, #1
 8016b6e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016b72:	1c41      	adds	r1, r0, #1
 8016b74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016b78:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016b7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016b80:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016b84:	9000      	str	r0, [sp, #0]
 8016b86:	e7c7      	b.n	8016b18 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016b88 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016b88:	f89d 0000 	ldrb.w	r0, [sp]
 8016b8c:	704b      	strb	r3, [r1, #1]
 8016b8e:	7008      	strb	r0, [r1, #0]
 8016b90:	708a      	strb	r2, [r1, #2]
 8016b92:	4770      	bx	lr

08016b94 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016b94:	4413      	add	r3, r2
 8016b96:	7dc2      	ldrb	r2, [r0, #23]
 8016b98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016b9c:	4419      	add	r1, r3
 8016b9e:	7a03      	ldrb	r3, [r0, #8]
 8016ba0:	435a      	muls	r2, r3
 8016ba2:	1c53      	adds	r3, r2, #1
 8016ba4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016ba8:	121b      	asrs	r3, r3, #8
 8016baa:	2bff      	cmp	r3, #255	; 0xff
 8016bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bae:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016bb2:	d13e      	bne.n	8016c32 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016bb4:	4427      	add	r7, r4
 8016bb6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016bba:	3103      	adds	r1, #3
 8016bbc:	7d86      	ldrb	r6, [r0, #22]
 8016bbe:	2bff      	cmp	r3, #255	; 0xff
 8016bc0:	d10a      	bne.n	8016bd8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016bc2:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016bc6:	7d43      	ldrb	r3, [r0, #21]
 8016bc8:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016bcc:	7d03      	ldrb	r3, [r0, #20]
 8016bce:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016bd2:	42a7      	cmp	r7, r4
 8016bd4:	d1ef      	bne.n	8016bb6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8016bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bd8:	b29a      	uxth	r2, r3
 8016bda:	43db      	mvns	r3, r3
 8016bdc:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016be0:	fb16 f602 	smulbb	r6, r6, r2
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	fb05 6503 	mla	r5, r5, r3, r6
 8016bea:	b2ad      	uxth	r5, r5
 8016bec:	1c6e      	adds	r6, r5, #1
 8016bee:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016bf2:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8016bf6:	fb16 f603 	smulbb	r6, r6, r3
 8016bfa:	122d      	asrs	r5, r5, #8
 8016bfc:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016c00:	7d45      	ldrb	r5, [r0, #21]
 8016c02:	fb05 6502 	mla	r5, r5, r2, r6
 8016c06:	b2ad      	uxth	r5, r5
 8016c08:	1c6e      	adds	r6, r5, #1
 8016c0a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016c0e:	122d      	asrs	r5, r5, #8
 8016c10:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016c14:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016c18:	7d06      	ldrb	r6, [r0, #20]
 8016c1a:	fb15 f303 	smulbb	r3, r5, r3
 8016c1e:	fb06 3202 	mla	r2, r6, r2, r3
 8016c22:	b292      	uxth	r2, r2
 8016c24:	1c53      	adds	r3, r2, #1
 8016c26:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016c2a:	1212      	asrs	r2, r2, #8
 8016c2c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016c30:	e7cf      	b.n	8016bd2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016c32:	b2de      	uxtb	r6, r3
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d0ce      	beq.n	8016bd6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8016c38:	3103      	adds	r1, #3
 8016c3a:	4427      	add	r7, r4
 8016c3c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016c40:	3103      	adds	r1, #3
 8016c42:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016c46:	fb02 f306 	mul.w	r3, r2, r6
 8016c4a:	42bc      	cmp	r4, r7
 8016c4c:	f103 0201 	add.w	r2, r3, #1
 8016c50:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016c54:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016c58:	b295      	uxth	r5, r2
 8016c5a:	ea6f 0202 	mvn.w	r2, r2
 8016c5e:	b2d3      	uxtb	r3, r2
 8016c60:	7d82      	ldrb	r2, [r0, #22]
 8016c62:	fb1c fc03 	smulbb	ip, ip, r3
 8016c66:	fb02 c205 	mla	r2, r2, r5, ip
 8016c6a:	b292      	uxth	r2, r2
 8016c6c:	f102 0c01 	add.w	ip, r2, #1
 8016c70:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016c74:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016c78:	fb1c fc03 	smulbb	ip, ip, r3
 8016c7c:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016c80:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016c84:	7d42      	ldrb	r2, [r0, #21]
 8016c86:	fb02 c205 	mla	r2, r2, r5, ip
 8016c8a:	b292      	uxth	r2, r2
 8016c8c:	f102 0c01 	add.w	ip, r2, #1
 8016c90:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016c94:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016c98:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016c9c:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016ca0:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016ca4:	fb12 f303 	smulbb	r3, r2, r3
 8016ca8:	fb0c 3305 	mla	r3, ip, r5, r3
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	f103 0201 	add.w	r2, r3, #1
 8016cb2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016cb6:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016cba:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016cbe:	d1bd      	bne.n	8016c3c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016cc0:	e789      	b.n	8016bd6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016cc2 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016cc2:	b510      	push	{r4, lr}
 8016cc4:	7d04      	ldrb	r4, [r0, #20]
 8016cc6:	700c      	strb	r4, [r1, #0]
 8016cc8:	7d41      	ldrb	r1, [r0, #21]
 8016cca:	7011      	strb	r1, [r2, #0]
 8016ccc:	7d82      	ldrb	r2, [r0, #22]
 8016cce:	701a      	strb	r2, [r3, #0]
 8016cd0:	9b02      	ldr	r3, [sp, #8]
 8016cd2:	7dc2      	ldrb	r2, [r0, #23]
 8016cd4:	2001      	movs	r0, #1
 8016cd6:	701a      	strb	r2, [r3, #0]
 8016cd8:	bd10      	pop	{r4, pc}

08016cda <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8016cda:	b570      	push	{r4, r5, r6, lr}
 8016cdc:	4616      	mov	r6, r2
 8016cde:	4604      	mov	r4, r0
 8016ce0:	460d      	mov	r5, r1
 8016ce2:	f7f8 fdb1 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016ce6:	6803      	ldr	r3, [r0, #0]
 8016ce8:	4629      	mov	r1, r5
 8016cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016cec:	4798      	blx	r3
 8016cee:	7520      	strb	r0, [r4, #20]
 8016cf0:	f7f8 fdaa 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016cf4:	6803      	ldr	r3, [r0, #0]
 8016cf6:	4629      	mov	r1, r5
 8016cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cfa:	4798      	blx	r3
 8016cfc:	7560      	strb	r0, [r4, #21]
 8016cfe:	f7f8 fda3 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016d02:	6803      	ldr	r3, [r0, #0]
 8016d04:	4629      	mov	r1, r5
 8016d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d08:	4798      	blx	r3
 8016d0a:	75e6      	strb	r6, [r4, #23]
 8016d0c:	75a0      	strb	r0, [r4, #22]
 8016d0e:	bd70      	pop	{r4, r5, r6, pc}

08016d10 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d12:	460e      	mov	r6, r1
 8016d14:	4617      	mov	r7, r2
 8016d16:	4604      	mov	r4, r0
 8016d18:	f000 f832 	bl	8016d80 <_ZN8touchgfx15AbstractPainterC1Ev>
 8016d1c:	4b12      	ldr	r3, [pc, #72]	; (8016d68 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8016d1e:	6023      	str	r3, [r4, #0]
 8016d20:	f7f8 fd92 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8016d24:	6803      	ldr	r3, [r0, #0]
 8016d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d28:	4798      	blx	r3
 8016d2a:	1e43      	subs	r3, r0, #1
 8016d2c:	425d      	negs	r5, r3
 8016d2e:	415d      	adcs	r5, r3
 8016d30:	4b0e      	ldr	r3, [pc, #56]	; (8016d6c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016d36:	b130      	cbz	r0, 8016d46 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8016d38:	6803      	ldr	r3, [r0, #0]
 8016d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d3c:	4798      	blx	r3
 8016d3e:	2801      	cmp	r0, #1
 8016d40:	bf08      	it	eq
 8016d42:	f045 0501 	orreq.w	r5, r5, #1
 8016d46:	b92d      	cbnz	r5, 8016d54 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8016d48:	4b09      	ldr	r3, [pc, #36]	; (8016d70 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8016d4a:	2129      	movs	r1, #41	; 0x29
 8016d4c:	4a09      	ldr	r2, [pc, #36]	; (8016d74 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016d4e:	480a      	ldr	r0, [pc, #40]	; (8016d78 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016d50:	f00e f834 	bl	8024dbc <__assert_func>
 8016d54:	4b09      	ldr	r3, [pc, #36]	; (8016d7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8016d56:	4620      	mov	r0, r4
 8016d58:	463a      	mov	r2, r7
 8016d5a:	4631      	mov	r1, r6
 8016d5c:	6023      	str	r3, [r4, #0]
 8016d5e:	f7ff ffbc 	bl	8016cda <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8016d62:	4620      	mov	r0, r4
 8016d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d66:	bf00      	nop
 8016d68:	08027e54 	.word	0x08027e54
 8016d6c:	2000bd6c 	.word	0x2000bd6c
 8016d70:	08027e6c 	.word	0x08027e6c
 8016d74:	08027f30 	.word	0x08027f30
 8016d78:	08027eca 	.word	0x08027eca
 8016d7c:	08027f18 	.word	0x08027f18

08016d80 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016d80:	4a03      	ldr	r2, [pc, #12]	; (8016d90 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016d82:	6002      	str	r2, [r0, #0]
 8016d84:	2200      	movs	r2, #0
 8016d86:	6042      	str	r2, [r0, #4]
 8016d88:	22ff      	movs	r2, #255	; 0xff
 8016d8a:	7202      	strb	r2, [r0, #8]
 8016d8c:	4770      	bx	lr
 8016d8e:	bf00      	nop
 8016d90:	08027f74 	.word	0x08027f74

08016d94 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016d94:	4770      	bx	lr

08016d96 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8016d96:	8081      	strh	r1, [r0, #4]
 8016d98:	80c2      	strh	r2, [r0, #6]
 8016d9a:	4770      	bx	lr

08016d9c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016d9c:	7201      	strb	r1, [r0, #8]
 8016d9e:	4770      	bx	lr

08016da0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016da0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016da4:	4770      	bx	lr

08016da6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016da6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016daa:	4770      	bx	lr

08016dac <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016dac:	6281      	str	r1, [r0, #40]	; 0x28
 8016dae:	4770      	bx	lr

08016db0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016db0:	b513      	push	{r0, r1, r4, lr}
 8016db2:	6803      	ldr	r3, [r0, #0]
 8016db4:	4604      	mov	r4, r0
 8016db6:	4601      	mov	r1, r0
 8016db8:	4668      	mov	r0, sp
 8016dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dbc:	4798      	blx	r3
 8016dbe:	6823      	ldr	r3, [r4, #0]
 8016dc0:	4669      	mov	r1, sp
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	691b      	ldr	r3, [r3, #16]
 8016dc6:	4798      	blx	r3
 8016dc8:	b002      	add	sp, #8
 8016dca:	bd10      	pop	{r4, pc}

08016dcc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016dcc:	b510      	push	{r4, lr}
 8016dce:	2200      	movs	r2, #0
 8016dd0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016dd4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016dd8:	8002      	strh	r2, [r0, #0]
 8016dda:	8042      	strh	r2, [r0, #2]
 8016ddc:	8084      	strh	r4, [r0, #4]
 8016dde:	80c1      	strh	r1, [r0, #6]
 8016de0:	bd10      	pop	{r4, pc}

08016de2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016de2:	2200      	movs	r2, #0
 8016de4:	8002      	strh	r2, [r0, #0]
 8016de6:	8042      	strh	r2, [r0, #2]
 8016de8:	8082      	strh	r2, [r0, #4]
 8016dea:	80c2      	strh	r2, [r0, #6]
 8016dec:	4770      	bx	lr
	...

08016df0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016df0:	b508      	push	{r3, lr}
 8016df2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016df4:	b928      	cbnz	r0, 8016e02 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016df6:	4b03      	ldr	r3, [pc, #12]	; (8016e04 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016df8:	2127      	movs	r1, #39	; 0x27
 8016dfa:	4a03      	ldr	r2, [pc, #12]	; (8016e08 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016dfc:	4803      	ldr	r0, [pc, #12]	; (8016e0c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016dfe:	f00d ffdd 	bl	8024dbc <__assert_func>
 8016e02:	bd08      	pop	{r3, pc}
 8016e04:	08027f80 	.word	0x08027f80
 8016e08:	08028064 	.word	0x08028064
 8016e0c:	08027fa7 	.word	0x08027fa7

08016e10 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e14:	b089      	sub	sp, #36	; 0x24
 8016e16:	4604      	mov	r4, r0
 8016e18:	6808      	ldr	r0, [r1, #0]
 8016e1a:	f04f 0a00 	mov.w	sl, #0
 8016e1e:	6849      	ldr	r1, [r1, #4]
 8016e20:	ab02      	add	r3, sp, #8
 8016e22:	f04f 0b01 	mov.w	fp, #1
 8016e26:	c303      	stmia	r3!, {r0, r1}
 8016e28:	4b3f      	ldr	r3, [pc, #252]	; (8016f28 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8016e2a:	4621      	mov	r1, r4
 8016e2c:	a804      	add	r0, sp, #16
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	2b01      	cmp	r3, #1
 8016e32:	6823      	ldr	r3, [r4, #0]
 8016e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e36:	bf1f      	itttt	ne
 8016e38:	f10d 0906 	addne.w	r9, sp, #6
 8016e3c:	ae03      	addne	r6, sp, #12
 8016e3e:	f10d 050e 	addne.w	r5, sp, #14
 8016e42:	f10d 080a 	addne.w	r8, sp, #10
 8016e46:	bf01      	itttt	eq
 8016e48:	f10d 090e 	addeq.w	r9, sp, #14
 8016e4c:	f10d 0606 	addeq.w	r6, sp, #6
 8016e50:	ad03      	addeq	r5, sp, #12
 8016e52:	f10d 0808 	addeq.w	r8, sp, #8
 8016e56:	4798      	blx	r3
 8016e58:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016e5c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d056      	beq.n	8016f12 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016e64:	4293      	cmp	r3, r2
 8016e66:	bfa8      	it	ge
 8016e68:	4613      	movge	r3, r2
 8016e6a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016e6e:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016e72:	2f00      	cmp	r7, #0
 8016e74:	dd34      	ble.n	8016ee0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016e76:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016e7a:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8016e7e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016e82:	4484      	add	ip, r0
 8016e84:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016e88:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016e8c:	fa0f fc8c 	sxth.w	ip, ip
 8016e90:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016e94:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016e98:	4562      	cmp	r2, ip
 8016e9a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016e9e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016ea2:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016ea6:	da29      	bge.n	8016efc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ea8:	4472      	add	r2, lr
 8016eaa:	b212      	sxth	r2, r2
 8016eac:	4290      	cmp	r0, r2
 8016eae:	da25      	bge.n	8016efc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016eb0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016eb4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016eb8:	4402      	add	r2, r0
 8016eba:	b212      	sxth	r2, r2
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	da1d      	bge.n	8016efc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ec0:	440b      	add	r3, r1
 8016ec2:	b21b      	sxth	r3, r3
 8016ec4:	4298      	cmp	r0, r3
 8016ec6:	da19      	bge.n	8016efc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ec8:	6823      	ldr	r3, [r4, #0]
 8016eca:	a906      	add	r1, sp, #24
 8016ecc:	4620      	mov	r0, r4
 8016ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ed0:	4798      	blx	r3
 8016ed2:	b998      	cbnz	r0, 8016efc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ed4:	107f      	asrs	r7, r7, #1
 8016ed6:	f04f 0a01 	mov.w	sl, #1
 8016eda:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016ede:	e7c6      	b.n	8016e6e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016ee0:	d10c      	bne.n	8016efc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016ee2:	f8ad b006 	strh.w	fp, [sp, #6]
 8016ee6:	f8b8 2000 	ldrh.w	r2, [r8]
 8016eea:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016eee:	440a      	add	r2, r1
 8016ef0:	f8a8 2000 	strh.w	r2, [r8]
 8016ef4:	882b      	ldrh	r3, [r5, #0]
 8016ef6:	1a5b      	subs	r3, r3, r1
 8016ef8:	802b      	strh	r3, [r5, #0]
 8016efa:	e7ad      	b.n	8016e58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016efc:	f1ba 0f00 	cmp.w	sl, #0
 8016f00:	d0f1      	beq.n	8016ee6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016f02:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016f06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	bf08      	it	eq
 8016f0e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016f10:	e7e9      	b.n	8016ee6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016f12:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016f16:	429a      	cmp	r2, r3
 8016f18:	bf04      	itt	eq
 8016f1a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016f1e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016f20:	b009      	add	sp, #36	; 0x24
 8016f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f26:	bf00      	nop
 8016f28:	2000bd64 	.word	0x2000bd64

08016f2c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	2101      	movs	r1, #1
 8016f30:	8082      	strh	r2, [r0, #4]
 8016f32:	80c2      	strh	r2, [r0, #6]
 8016f34:	8102      	strh	r2, [r0, #8]
 8016f36:	8142      	strh	r2, [r0, #10]
 8016f38:	8182      	strh	r2, [r0, #12]
 8016f3a:	81c2      	strh	r2, [r0, #14]
 8016f3c:	8202      	strh	r2, [r0, #16]
 8016f3e:	8242      	strh	r2, [r0, #18]
 8016f40:	61c2      	str	r2, [r0, #28]
 8016f42:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016f46:	6282      	str	r2, [r0, #40]	; 0x28
 8016f48:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016f4c:	4905      	ldr	r1, [pc, #20]	; (8016f64 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016f4e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016f52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016f56:	6001      	str	r1, [r0, #0]
 8016f58:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016f5a:	22ff      	movs	r2, #255	; 0xff
 8016f5c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016f60:	4770      	bx	lr
 8016f62:	bf00      	nop
 8016f64:	08027fec 	.word	0x08027fec

08016f68 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8016f68:	4770      	bx	lr

08016f6a <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016f6a:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016f6e:	4602      	mov	r2, r0
 8016f70:	cb03      	ldmia	r3!, {r0, r1}
 8016f72:	6010      	str	r0, [r2, #0]
 8016f74:	4610      	mov	r0, r2
 8016f76:	6051      	str	r1, [r2, #4]
 8016f78:	4770      	bx	lr

08016f7a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f7e:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8016f82:	b395      	cbz	r5, 8016fea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016f84:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016f88:	f1bc 0f00 	cmp.w	ip, #0
 8016f8c:	d02d      	beq.n	8016fea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016f8e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016f92:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016f96:	b354      	cbz	r4, 8016fee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016f98:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016f9c:	b33f      	cbz	r7, 8016fee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016f9e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016fa2:	4475      	add	r5, lr
 8016fa4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016fa8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016fac:	45f0      	cmp	r8, lr
 8016fae:	4646      	mov	r6, r8
 8016fb0:	4444      	add	r4, r8
 8016fb2:	bfa8      	it	ge
 8016fb4:	4676      	movge	r6, lr
 8016fb6:	4293      	cmp	r3, r2
 8016fb8:	4619      	mov	r1, r3
 8016fba:	443b      	add	r3, r7
 8016fbc:	bfa8      	it	ge
 8016fbe:	4611      	movge	r1, r2
 8016fc0:	4462      	add	r2, ip
 8016fc2:	b22d      	sxth	r5, r5
 8016fc4:	8006      	strh	r6, [r0, #0]
 8016fc6:	b224      	sxth	r4, r4
 8016fc8:	8041      	strh	r1, [r0, #2]
 8016fca:	b212      	sxth	r2, r2
 8016fcc:	b21b      	sxth	r3, r3
 8016fce:	42a5      	cmp	r5, r4
 8016fd0:	bfac      	ite	ge
 8016fd2:	ebc6 0405 	rsbge	r4, r6, r5
 8016fd6:	ebc6 0404 	rsblt	r4, r6, r4
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	bfac      	ite	ge
 8016fde:	ebc1 0302 	rsbge	r3, r1, r2
 8016fe2:	ebc1 0303 	rsblt	r3, r1, r3
 8016fe6:	8084      	strh	r4, [r0, #4]
 8016fe8:	80c3      	strh	r3, [r0, #6]
 8016fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fee:	f8a0 e000 	strh.w	lr, [r0]
 8016ff2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016ff6:	8043      	strh	r3, [r0, #2]
 8016ff8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016ffc:	8083      	strh	r3, [r0, #4]
 8016ffe:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017002:	e7f1      	b.n	8016fe8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08017004 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017004:	b507      	push	{r0, r1, r2, lr}
 8017006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801700a:	ab01      	add	r3, sp, #4
 801700c:	6809      	ldr	r1, [r1, #0]
 801700e:	6800      	ldr	r0, [r0, #0]
 8017010:	f002 fc4f 	bl	80198b2 <_ZN8touchgfx6muldivElllRl>
 8017014:	b003      	add	sp, #12
 8017016:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801701c <_ZN8touchgfx7CWRUtil4sineEi>:
 801701c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017020:	fb90 f3f2 	sdiv	r3, r0, r2
 8017024:	fb03 0312 	mls	r3, r3, r2, r0
 8017028:	4413      	add	r3, r2
 801702a:	fb93 f0f2 	sdiv	r0, r3, r2
 801702e:	fb02 3010 	mls	r0, r2, r0, r3
 8017032:	4b0a      	ldr	r3, [pc, #40]	; (801705c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8017034:	285a      	cmp	r0, #90	; 0x5a
 8017036:	dc02      	bgt.n	801703e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8017038:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801703c:	4770      	bx	lr
 801703e:	28b4      	cmp	r0, #180	; 0xb4
 8017040:	dc02      	bgt.n	8017048 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8017042:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8017046:	e7f7      	b.n	8017038 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8017048:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801704c:	bfd4      	ite	le
 801704e:	38b4      	suble	r0, #180	; 0xb4
 8017050:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8017054:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017058:	4240      	negs	r0, r0
 801705a:	4770      	bx	lr
 801705c:	0802810e 	.word	0x0802810e

08017060 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8017060:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8017064:	f04f 0300 	mov.w	r3, #0
 8017068:	bf2c      	ite	cs
 801706a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801706e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8017072:	1899      	adds	r1, r3, r2
 8017074:	4288      	cmp	r0, r1
 8017076:	bf24      	itt	cs
 8017078:	1853      	addcs	r3, r2, r1
 801707a:	1a40      	subcs	r0, r0, r1
 801707c:	0892      	lsrs	r2, r2, #2
 801707e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8017082:	d1f6      	bne.n	8017072 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8017084:	4618      	mov	r0, r3
 8017086:	4770      	bx	lr

08017088 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8017088:	2800      	cmp	r0, #0
 801708a:	b508      	push	{r3, lr}
 801708c:	da05      	bge.n	801709a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801708e:	4240      	negs	r0, r0
 8017090:	f7ff fffa 	bl	8017088 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017094:	4240      	negs	r0, r0
 8017096:	b240      	sxtb	r0, r0
 8017098:	bd08      	pop	{r3, pc}
 801709a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801709e:	dc11      	bgt.n	80170c4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80170a0:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80170a4:	dd09      	ble.n	80170ba <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80170a6:	4340      	muls	r0, r0
 80170a8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80170ac:	f7ff ffd8 	bl	8017060 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80170b0:	f7ff ffea 	bl	8017088 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80170b4:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80170b8:	e7ed      	b.n	8017096 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80170ba:	3003      	adds	r0, #3
 80170bc:	4b02      	ldr	r3, [pc, #8]	; (80170c8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80170be:	10c0      	asrs	r0, r0, #3
 80170c0:	5618      	ldrsb	r0, [r3, r0]
 80170c2:	e7e9      	b.n	8017098 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80170c4:	2000      	movs	r0, #0
 80170c6:	e7e7      	b.n	8017098 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80170c8:	080280b2 	.word	0x080280b2

080170cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 80170cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170ce:	460c      	mov	r4, r1
 80170d0:	1e01      	subs	r1, r0, #0
 80170d2:	4615      	mov	r5, r2
 80170d4:	db01      	blt.n	80170da <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 80170d6:	2c00      	cmp	r4, #0
 80170d8:	da06      	bge.n	80170e8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 80170da:	4b11      	ldr	r3, [pc, #68]	; (8017120 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 80170dc:	f240 3197 	movw	r1, #919	; 0x397
 80170e0:	4a10      	ldr	r2, [pc, #64]	; (8017124 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 80170e2:	4811      	ldr	r0, [pc, #68]	; (8017128 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 80170e4:	f00d fe6a 	bl	8024dbc <__assert_func>
 80170e8:	428c      	cmp	r4, r1
 80170ea:	dd06      	ble.n	80170fa <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 80170ec:	4620      	mov	r0, r4
 80170ee:	f7ff ffed 	bl	80170cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80170f2:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80170f6:	b003      	add	sp, #12
 80170f8:	bd30      	pop	{r4, r5, pc}
 80170fa:	4349      	muls	r1, r1
 80170fc:	fb04 1004 	mla	r0, r4, r4, r1
 8017100:	f7ff ffae 	bl	8017060 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017104:	6028      	str	r0, [r5, #0]
 8017106:	2800      	cmp	r0, #0
 8017108:	d0f5      	beq.n	80170f6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801710a:	4602      	mov	r2, r0
 801710c:	ab01      	add	r3, sp, #4
 801710e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017112:	4620      	mov	r0, r4
 8017114:	f002 fbcd 	bl	80198b2 <_ZN8touchgfx6muldivElllRl>
 8017118:	f7ff ffb6 	bl	8017088 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801711c:	e7eb      	b.n	80170f6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801711e:	bf00      	nop
 8017120:	080281c4 	.word	0x080281c4
 8017124:	0802828c 	.word	0x0802828c
 8017128:	080281d5 	.word	0x080281d5

0801712c <_ZN8touchgfx4LineC1Ev>:
 801712c:	b510      	push	{r4, lr}
 801712e:	4604      	mov	r4, r0
 8017130:	f7ff fefc 	bl	8016f2c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017134:	4b0c      	ldr	r3, [pc, #48]	; (8017168 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8017136:	2220      	movs	r2, #32
 8017138:	4620      	mov	r0, r4
 801713a:	6023      	str	r3, [r4, #0]
 801713c:	2300      	movs	r3, #0
 801713e:	6422      	str	r2, [r4, #64]	; 0x40
 8017140:	2212      	movs	r2, #18
 8017142:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8017146:	6722      	str	r2, [r4, #112]	; 0x70
 8017148:	60a3      	str	r3, [r4, #8]
 801714a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801714e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8017152:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017156:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801715a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801715e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8017162:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8017166:	bd10      	pop	{r4, pc}
 8017168:	08028214 	.word	0x08028214

0801716c <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017170:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8017172:	b085      	sub	sp, #20
 8017174:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017176:	4604      	mov	r4, r0
 8017178:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801717a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801717c:	1af6      	subs	r6, r6, r3
 801717e:	eba5 0502 	sub.w	r5, r5, r2
 8017182:	f040 809b 	bne.w	80172bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8017186:	b955      	cbnz	r5, 801719e <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8017188:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801718c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017190:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8017194:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8017198:	b005      	add	sp, #20
 801719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719e:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80171a2:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80171a6:	f04f 0802 	mov.w	r8, #2
 80171aa:	463a      	mov	r2, r7
 80171ac:	4629      	mov	r1, r5
 80171ae:	ab03      	add	r3, sp, #12
 80171b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80171b2:	f002 fb7e 	bl	80198b2 <_ZN8touchgfx6muldivElllRl>
 80171b6:	ab03      	add	r3, sp, #12
 80171b8:	463a      	mov	r2, r7
 80171ba:	4631      	mov	r1, r6
 80171bc:	fb90 f5f8 	sdiv	r5, r0, r8
 80171c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80171c2:	f002 fb76 	bl	80198b2 <_ZN8touchgfx6muldivElllRl>
 80171c6:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 80171ca:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 80171ce:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 80171d2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80171d4:	fb90 f0f8 	sdiv	r0, r0, r8
 80171d8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80171dc:	eba8 0305 	sub.w	r3, r8, r5
 80171e0:	f1ba 0f00 	cmp.w	sl, #0
 80171e4:	f040 80c3 	bne.w	801736e <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 80171e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80171ea:	19c3      	adds	r3, r0, r7
 80171ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80171ee:	ebae 0305 	sub.w	r3, lr, r5
 80171f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80171f4:	eb00 030c 	add.w	r3, r0, ip
 80171f8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80171fa:	eb05 030e 	add.w	r3, r5, lr
 80171fe:	6523      	str	r3, [r4, #80]	; 0x50
 8017200:	ebac 0300 	sub.w	r3, ip, r0
 8017204:	6623      	str	r3, [r4, #96]	; 0x60
 8017206:	eb05 0308 	add.w	r3, r5, r8
 801720a:	6563      	str	r3, [r4, #84]	; 0x54
 801720c:	1a3b      	subs	r3, r7, r0
 801720e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8017210:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8017214:	6663      	str	r3, [r4, #100]	; 0x64
 8017216:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801721a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801721c:	4632      	mov	r2, r6
 801721e:	9301      	str	r3, [sp, #4]
 8017220:	9100      	str	r1, [sp, #0]
 8017222:	f859 bb04 	ldr.w	fp, [r9], #4
 8017226:	9b00      	ldr	r3, [sp, #0]
 8017228:	455e      	cmp	r6, fp
 801722a:	bfa8      	it	ge
 801722c:	465e      	movge	r6, fp
 801722e:	455a      	cmp	r2, fp
 8017230:	bfb8      	it	lt
 8017232:	465a      	movlt	r2, fp
 8017234:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8017238:	4559      	cmp	r1, fp
 801723a:	bfa8      	it	ge
 801723c:	4659      	movge	r1, fp
 801723e:	455b      	cmp	r3, fp
 8017240:	bfb8      	it	lt
 8017242:	465b      	movlt	r3, fp
 8017244:	9300      	str	r3, [sp, #0]
 8017246:	9b01      	ldr	r3, [sp, #4]
 8017248:	454b      	cmp	r3, r9
 801724a:	d1ea      	bne.n	8017222 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801724c:	f04f 0b20 	mov.w	fp, #32
 8017250:	b209      	sxth	r1, r1
 8017252:	b212      	sxth	r2, r2
 8017254:	f1ba 0f01 	cmp.w	sl, #1
 8017258:	b236      	sxth	r6, r6
 801725a:	fb91 f9fb 	sdiv	r9, r1, fp
 801725e:	f9bd 1000 	ldrsh.w	r1, [sp]
 8017262:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8017266:	fb92 f2fb 	sdiv	r2, r2, fp
 801726a:	fb91 f1fb 	sdiv	r1, r1, fp
 801726e:	fb96 f6fb 	sdiv	r6, r6, fp
 8017272:	f102 0201 	add.w	r2, r2, #1
 8017276:	f101 0101 	add.w	r1, r1, #1
 801727a:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801727e:	eba1 0109 	sub.w	r1, r1, r9
 8017282:	eba2 0606 	sub.w	r6, r2, r6
 8017286:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801728a:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801728e:	d183      	bne.n	8017198 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8017290:	eba8 0305 	sub.w	r3, r8, r5
 8017294:	64a3      	str	r3, [r4, #72]	; 0x48
 8017296:	19c3      	adds	r3, r0, r7
 8017298:	65a3      	str	r3, [r4, #88]	; 0x58
 801729a:	ebae 0305 	sub.w	r3, lr, r5
 801729e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80172a0:	eb00 030c 	add.w	r3, r0, ip
 80172a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80172a6:	eb05 030e 	add.w	r3, r5, lr
 80172aa:	4445      	add	r5, r8
 80172ac:	6523      	str	r3, [r4, #80]	; 0x50
 80172ae:	ebac 0300 	sub.w	r3, ip, r0
 80172b2:	1a38      	subs	r0, r7, r0
 80172b4:	6565      	str	r5, [r4, #84]	; 0x54
 80172b6:	6623      	str	r3, [r4, #96]	; 0x60
 80172b8:	6660      	str	r0, [r4, #100]	; 0x64
 80172ba:	e76d      	b.n	8017198 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80172bc:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80172c0:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 80172c4:	2d00      	cmp	r5, #0
 80172c6:	f43f af6e 	beq.w	80171a6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80172ca:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 80172ce:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 80172d2:	fb93 f2f7 	sdiv	r2, r3, r7
 80172d6:	fb07 3312 	mls	r3, r7, r2, r3
 80172da:	b34b      	cbz	r3, 8017330 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 80172dc:	fb97 f2f3 	sdiv	r2, r7, r3
 80172e0:	fb03 7712 	mls	r7, r3, r2, r7
 80172e4:	2f00      	cmp	r7, #0
 80172e6:	d1f4      	bne.n	80172d2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 80172e8:	2b01      	cmp	r3, #1
 80172ea:	f24b 5204 	movw	r2, #46340	; 0xb504
 80172ee:	bf18      	it	ne
 80172f0:	fb96 f6f3 	sdivne	r6, r6, r3
 80172f4:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 80172f8:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 80172fc:	bf18      	it	ne
 80172fe:	fb95 f5f3 	sdivne	r5, r5, r3
 8017302:	4291      	cmp	r1, r2
 8017304:	dd16      	ble.n	8017334 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8017306:	2d00      	cmp	r5, #0
 8017308:	da4d      	bge.n	80173a6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801730a:	4b29      	ldr	r3, [pc, #164]	; (80173b0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801730c:	429d      	cmp	r5, r3
 801730e:	da27      	bge.n	8017360 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8017310:	426a      	negs	r2, r5
 8017312:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017316:	fb91 f1f3 	sdiv	r1, r1, r3
 801731a:	fb92 f3f3 	sdiv	r3, r2, r3
 801731e:	4299      	cmp	r1, r3
 8017320:	bfcc      	ite	gt
 8017322:	1c4b      	addgt	r3, r1, #1
 8017324:	3301      	addle	r3, #1
 8017326:	fb96 f6f3 	sdiv	r6, r6, r3
 801732a:	fb95 f5f3 	sdiv	r5, r5, r3
 801732e:	e00f      	b.n	8017350 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8017330:	463b      	mov	r3, r7
 8017332:	e7d9      	b.n	80172e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8017334:	2d00      	cmp	r5, #0
 8017336:	fb92 f2f1 	sdiv	r2, r2, r1
 801733a:	da13      	bge.n	8017364 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801733c:	4269      	negs	r1, r5
 801733e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017342:	fb93 f3f1 	sdiv	r3, r3, r1
 8017346:	429a      	cmp	r2, r3
 8017348:	bfa8      	it	ge
 801734a:	461a      	movge	r2, r3
 801734c:	4356      	muls	r6, r2
 801734e:	4355      	muls	r5, r2
 8017350:	fb05 f005 	mul.w	r0, r5, r5
 8017354:	fb06 0006 	mla	r0, r6, r6, r0
 8017358:	f7ff fe82 	bl	8017060 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801735c:	4607      	mov	r7, r0
 801735e:	e722      	b.n	80171a6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8017360:	2200      	movs	r2, #0
 8017362:	e7eb      	b.n	801733c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8017364:	4629      	mov	r1, r5
 8017366:	e7ea      	b.n	801733e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8017368:	4629      	mov	r1, r5
 801736a:	2200      	movs	r2, #0
 801736c:	e7e7      	b.n	801733e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801736e:	1a1b      	subs	r3, r3, r0
 8017370:	64a3      	str	r3, [r4, #72]	; 0x48
 8017372:	19c3      	adds	r3, r0, r7
 8017374:	1b5b      	subs	r3, r3, r5
 8017376:	65a3      	str	r3, [r4, #88]	; 0x58
 8017378:	ebae 0305 	sub.w	r3, lr, r5
 801737c:	4403      	add	r3, r0
 801737e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017380:	eb00 030c 	add.w	r3, r0, ip
 8017384:	442b      	add	r3, r5
 8017386:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017388:	eb05 030e 	add.w	r3, r5, lr
 801738c:	4403      	add	r3, r0
 801738e:	6523      	str	r3, [r4, #80]	; 0x50
 8017390:	ebac 0300 	sub.w	r3, ip, r0
 8017394:	442b      	add	r3, r5
 8017396:	6623      	str	r3, [r4, #96]	; 0x60
 8017398:	eb05 0308 	add.w	r3, r5, r8
 801739c:	1a1b      	subs	r3, r3, r0
 801739e:	6563      	str	r3, [r4, #84]	; 0x54
 80173a0:	1a3b      	subs	r3, r7, r0
 80173a2:	1b5b      	subs	r3, r3, r5
 80173a4:	e733      	b.n	801720e <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 80173a6:	4295      	cmp	r5, r2
 80173a8:	ddde      	ble.n	8017368 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 80173aa:	462a      	mov	r2, r5
 80173ac:	e7b1      	b.n	8017312 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 80173ae:	bf00      	nop
 80173b0:	ffff4afc 	.word	0xffff4afc

080173b4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80173b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80173b6:	428b      	cmp	r3, r1
 80173b8:	d102      	bne.n	80173c0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80173ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80173bc:	4293      	cmp	r3, r2
 80173be:	d003      	beq.n	80173c8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 80173c0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 80173c4:	f7ff bed2 	b.w	801716c <_ZN8touchgfx4Line17updateCachedShapeEv>
 80173c8:	4770      	bx	lr

080173ca <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80173ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80173cc:	428b      	cmp	r3, r1
 80173ce:	d102      	bne.n	80173d6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 80173d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d003      	beq.n	80173de <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 80173d6:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 80173da:	f7ff bec7 	b.w	801716c <_ZN8touchgfx4Line17updateCachedShapeEv>
 80173de:	4770      	bx	lr

080173e0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 80173e0:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 80173e4:	f7ff bec2 	b.w	801716c <_ZN8touchgfx4Line17updateCachedShapeEv>

080173e8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 80173e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173ec:	b0b3      	sub	sp, #204	; 0xcc
 80173ee:	4604      	mov	r4, r0
 80173f0:	460a      	mov	r2, r1
 80173f2:	4601      	mov	r1, r0
 80173f4:	a804      	add	r0, sp, #16
 80173f6:	ad32      	add	r5, sp, #200	; 0xc8
 80173f8:	f00c f914 	bl	8023624 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80173fc:	2300      	movs	r3, #0
 80173fe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017400:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8017404:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017406:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017408:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801740a:	1ac0      	subs	r0, r0, r3
 801740c:	eba1 0102 	sub.w	r1, r1, r2
 8017410:	d43c      	bmi.n	801748c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8017412:	2900      	cmp	r1, #0
 8017414:	462a      	mov	r2, r5
 8017416:	db33      	blt.n	8017480 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8017418:	f7ff fe58 	bl	80170cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801741c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8017420:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017422:	a804      	add	r0, sp, #16
 8017424:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017426:	f00c fac6 	bl	80239b6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801742a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801742c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801742e:	a804      	add	r0, sp, #16
 8017430:	f00c fa50 	bl	80238d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017434:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017438:	2b01      	cmp	r3, #1
 801743a:	d137      	bne.n	80174ac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801743c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801743e:	2eb3      	cmp	r6, #179	; 0xb3
 8017440:	dc34      	bgt.n	80174ac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017442:	eba7 0906 	sub.w	r9, r7, r6
 8017446:	4648      	mov	r0, r9
 8017448:	f7ff fde8 	bl	801701c <_ZN8touchgfx7CWRUtil4sineEi>
 801744c:	a902      	add	r1, sp, #8
 801744e:	9002      	str	r0, [sp, #8]
 8017450:	4628      	mov	r0, r5
 8017452:	f7ff fdd7 	bl	8017004 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017456:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017458:	eb00 0801 	add.w	r8, r0, r1
 801745c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017460:	f7ff fddc 	bl	801701c <_ZN8touchgfx7CWRUtil4sineEi>
 8017464:	a903      	add	r1, sp, #12
 8017466:	9003      	str	r0, [sp, #12]
 8017468:	4628      	mov	r0, r5
 801746a:	f7ff fdcb 	bl	8017004 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801746e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017470:	4641      	mov	r1, r8
 8017472:	1a12      	subs	r2, r2, r0
 8017474:	a804      	add	r0, sp, #16
 8017476:	f00c fa2d 	bl	80238d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801747a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801747c:	441e      	add	r6, r3
 801747e:	e7de      	b.n	801743e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8017480:	4249      	negs	r1, r1
 8017482:	f7ff fe23 	bl	80170cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017486:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801748a:	e7c9      	b.n	8017420 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801748c:	2900      	cmp	r1, #0
 801748e:	f1c0 0000 	rsb	r0, r0, #0
 8017492:	462a      	mov	r2, r5
 8017494:	db04      	blt.n	80174a0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8017496:	f7ff fe19 	bl	80170cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801749a:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801749e:	e7bf      	b.n	8017420 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80174a0:	4249      	negs	r1, r1
 80174a2:	f7ff fe13 	bl	80170cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80174a6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 80174aa:	e7b9      	b.n	8017420 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80174ac:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80174ae:	a804      	add	r0, sp, #16
 80174b0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80174b2:	f00c fa0f 	bl	80238d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80174b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80174ba:	a804      	add	r0, sp, #16
 80174bc:	f00c fa0a 	bl	80238d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80174c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	d123      	bne.n	8017510 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80174c8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80174ca:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 80174ce:	2e00      	cmp	r6, #0
 80174d0:	dd1e      	ble.n	8017510 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80174d2:	eb06 0907 	add.w	r9, r6, r7
 80174d6:	4648      	mov	r0, r9
 80174d8:	f7ff fda0 	bl	801701c <_ZN8touchgfx7CWRUtil4sineEi>
 80174dc:	a902      	add	r1, sp, #8
 80174de:	9002      	str	r0, [sp, #8]
 80174e0:	4628      	mov	r0, r5
 80174e2:	f7ff fd8f 	bl	8017004 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80174e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80174e8:	eb00 0801 	add.w	r8, r0, r1
 80174ec:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80174f0:	f7ff fd94 	bl	801701c <_ZN8touchgfx7CWRUtil4sineEi>
 80174f4:	a903      	add	r1, sp, #12
 80174f6:	9003      	str	r0, [sp, #12]
 80174f8:	4628      	mov	r0, r5
 80174fa:	f7ff fd83 	bl	8017004 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80174fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017500:	4641      	mov	r1, r8
 8017502:	1a12      	subs	r2, r2, r0
 8017504:	a804      	add	r0, sp, #16
 8017506:	f00c f9e5 	bl	80238d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801750a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801750c:	1af6      	subs	r6, r6, r3
 801750e:	e7de      	b.n	80174ce <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017510:	a804      	add	r0, sp, #16
 8017512:	f00c fb54 	bl	8023bbe <_ZN8touchgfx6Canvas6renderEv>
 8017516:	4604      	mov	r4, r0
 8017518:	a804      	add	r0, sp, #16
 801751a:	f00c fb91 	bl	8023c40 <_ZN8touchgfx6CanvasD1Ev>
 801751e:	4620      	mov	r0, r4
 8017520:	b033      	add	sp, #204	; 0xcc
 8017522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017526 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017526:	b570      	push	{r4, r5, r6, lr}
 8017528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801752c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801752e:	4604      	mov	r4, r0
 8017530:	429a      	cmp	r2, r3
 8017532:	d00c      	beq.n	801754e <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8017534:	f850 3b26 	ldr.w	r3, [r0], #38
 8017538:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801753a:	f7f9 f8bf 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 801753e:	2300      	movs	r3, #0
 8017540:	4601      	mov	r1, r0
 8017542:	46ac      	mov	ip, r5
 8017544:	4620      	mov	r0, r4
 8017546:	461a      	mov	r2, r3
 8017548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801754c:	4760      	bx	ip
 801754e:	2000      	movs	r0, #0
 8017550:	bd70      	pop	{r4, r5, r6, pc}

08017552 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017558:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801755a:	429a      	cmp	r2, r3
 801755c:	d016      	beq.n	801758c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801755e:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8017562:	4620      	mov	r0, r4
 8017564:	f7f7 fd90 	bl	800f088 <_ZNK8touchgfx9TypedText7getFontEv>
 8017568:	6803      	ldr	r3, [r0, #0]
 801756a:	4605      	mov	r5, r0
 801756c:	4620      	mov	r0, r4
 801756e:	69de      	ldr	r6, [r3, #28]
 8017570:	f7f7 fda6 	bl	800f0c0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017574:	4607      	mov	r7, r0
 8017576:	4620      	mov	r0, r4
 8017578:	f7f9 f8a0 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 801757c:	2300      	movs	r3, #0
 801757e:	4602      	mov	r2, r0
 8017580:	4639      	mov	r1, r7
 8017582:	9300      	str	r3, [sp, #0]
 8017584:	4628      	mov	r0, r5
 8017586:	47b0      	blx	r6
 8017588:	b003      	add	sp, #12
 801758a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801758c:	2000      	movs	r0, #0
 801758e:	e7fb      	b.n	8017588 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08017590 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017590:	b40e      	push	{r1, r2, r3}
 8017592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801759a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801759c:	b09b      	sub	sp, #108	; 0x6c
 801759e:	4604      	mov	r4, r0
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d03f      	beq.n	8017624 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 80175a4:	f100 0726 	add.w	r7, r0, #38	; 0x26
 80175a8:	ab22      	add	r3, sp, #136	; 0x88
 80175aa:	4638      	mov	r0, r7
 80175ac:	9303      	str	r3, [sp, #12]
 80175ae:	f7f7 fd6b 	bl	800f088 <_ZNK8touchgfx9TypedText7getFontEv>
 80175b2:	6803      	ldr	r3, [r0, #0]
 80175b4:	4680      	mov	r8, r0
 80175b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175b8:	4798      	blx	r3
 80175ba:	4606      	mov	r6, r0
 80175bc:	b205      	sxth	r5, r0
 80175be:	a804      	add	r0, sp, #16
 80175c0:	f002 ff7e 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 80175c4:	f8d8 3000 	ldr.w	r3, [r8]
 80175c8:	4640      	mov	r0, r8
 80175ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175cc:	4798      	blx	r3
 80175ce:	9a03      	ldr	r2, [sp, #12]
 80175d0:	4603      	mov	r3, r0
 80175d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80175d4:	a804      	add	r0, sp, #16
 80175d6:	f002 ff90 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80175da:	4638      	mov	r0, r7
 80175dc:	f7f7 fd70 	bl	800f0c0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80175e0:	4680      	mov	r8, r0
 80175e2:	4638      	mov	r0, r7
 80175e4:	f7f7 fd50 	bl	800f088 <_ZNK8touchgfx9TypedText7getFontEv>
 80175e8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80175ec:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80175f0:	4642      	mov	r2, r8
 80175f2:	9300      	str	r3, [sp, #0]
 80175f4:	4603      	mov	r3, r0
 80175f6:	a804      	add	r0, sp, #16
 80175f8:	f001 f815 	bl	8018626 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80175fc:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017600:	b203      	sxth	r3, r0
 8017602:	18a9      	adds	r1, r5, r2
 8017604:	2900      	cmp	r1, #0
 8017606:	dd0b      	ble.n	8017620 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8017608:	3b01      	subs	r3, #1
 801760a:	fb13 f302 	smulbb	r3, r3, r2
 801760e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017612:	b21d      	sxth	r5, r3
 8017614:	4628      	mov	r0, r5
 8017616:	b01b      	add	sp, #108	; 0x6c
 8017618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801761c:	b003      	add	sp, #12
 801761e:	4770      	bx	lr
 8017620:	2b00      	cmp	r3, #0
 8017622:	dcf7      	bgt.n	8017614 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8017624:	2500      	movs	r5, #0
 8017626:	e7f5      	b.n	8017614 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08017628 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801762c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017630:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017632:	b08d      	sub	sp, #52	; 0x34
 8017634:	4604      	mov	r4, r0
 8017636:	429e      	cmp	r6, r3
 8017638:	4688      	mov	r8, r1
 801763a:	d04b      	beq.n	80176d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801763c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017640:	4628      	mov	r0, r5
 8017642:	f7f7 fd21 	bl	800f088 <_ZNK8touchgfx9TypedText7getFontEv>
 8017646:	4607      	mov	r7, r0
 8017648:	2800      	cmp	r0, #0
 801764a:	d043      	beq.n	80176d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801764c:	4628      	mov	r0, r5
 801764e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017652:	f7f7 fd4d 	bl	800f0f0 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017656:	4b21      	ldr	r3, [pc, #132]	; (80176dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8017658:	4628      	mov	r0, r5
 801765a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017664:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017668:	785e      	ldrb	r6, [r3, #1]
 801766a:	f7f7 fd29 	bl	800f0c0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801766e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017670:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017674:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017678:	9309      	str	r3, [sp, #36]	; 0x24
 801767a:	4b19      	ldr	r3, [pc, #100]	; (80176e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801767c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017686:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801768a:	9707      	str	r7, [sp, #28]
 801768c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017690:	f88d 6020 	strb.w	r6, [sp, #32]
 8017694:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017698:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801769c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80176a0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80176a4:	b10a      	cbz	r2, 80176aa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 80176a6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80176a8:	b906      	cbnz	r6, 80176ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 80176aa:	689e      	ldr	r6, [r3, #8]
 80176ac:	af05      	add	r7, sp, #20
 80176ae:	4621      	mov	r1, r4
 80176b0:	4638      	mov	r0, r7
 80176b2:	f002 f864 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80176b6:	4628      	mov	r0, r5
 80176b8:	f7f9 f800 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 80176bc:	2300      	movs	r3, #0
 80176be:	9001      	str	r0, [sp, #4]
 80176c0:	4630      	mov	r0, r6
 80176c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80176c6:	ab07      	add	r3, sp, #28
 80176c8:	9300      	str	r3, [sp, #0]
 80176ca:	4643      	mov	r3, r8
 80176cc:	e897 0006 	ldmia.w	r7, {r1, r2}
 80176d0:	f000 fd76 	bl	80181c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80176d4:	b00d      	add	sp, #52	; 0x34
 80176d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176da:	bf00      	nop
 80176dc:	2000bdfc 	.word	0x2000bdfc
 80176e0:	2000bd6c 	.word	0x2000bd6c

080176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80176e4:	b570      	push	{r4, r5, r6, lr}
 80176e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176ea:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80176ec:	4604      	mov	r4, r0
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d021      	beq.n	8017736 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80176f2:	6803      	ldr	r3, [r0, #0]
 80176f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176f6:	4798      	blx	r3
 80176f8:	6823      	ldr	r3, [r4, #0]
 80176fa:	4605      	mov	r5, r0
 80176fc:	4620      	mov	r0, r4
 80176fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017700:	4798      	blx	r3
 8017702:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017706:	4606      	mov	r6, r0
 8017708:	b22d      	sxth	r5, r5
 801770a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801770e:	6823      	ldr	r3, [r4, #0]
 8017710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017712:	d109      	bne.n	8017728 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017714:	4629      	mov	r1, r5
 8017716:	4620      	mov	r0, r4
 8017718:	4798      	blx	r3
 801771a:	6823      	ldr	r3, [r4, #0]
 801771c:	4631      	mov	r1, r6
 801771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017720:	4620      	mov	r0, r4
 8017722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017726:	4718      	bx	r3
 8017728:	4601      	mov	r1, r0
 801772a:	4620      	mov	r0, r4
 801772c:	4798      	blx	r3
 801772e:	6823      	ldr	r3, [r4, #0]
 8017730:	4629      	mov	r1, r5
 8017732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017734:	e7f4      	b.n	8017720 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8017736:	bd70      	pop	{r4, r5, r6, pc}

08017738 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017738:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801773c:	84c1      	strh	r1, [r0, #38]	; 0x26
 801773e:	b922      	cbnz	r2, 801774a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017740:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017744:	b90b      	cbnz	r3, 801774a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017746:	f7ff bfcd 	b.w	80176e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801774a:	4770      	bx	lr

0801774c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801774c:	2300      	movs	r3, #0
 801774e:	8003      	strh	r3, [r0, #0]
 8017750:	8043      	strh	r3, [r0, #2]
 8017752:	8083      	strh	r3, [r0, #4]
 8017754:	80c3      	strh	r3, [r0, #6]
 8017756:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801775a:	b91b      	cbnz	r3, 8017764 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801775c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017760:	2bff      	cmp	r3, #255	; 0xff
 8017762:	d103      	bne.n	801776c <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017764:	890b      	ldrh	r3, [r1, #8]
 8017766:	8083      	strh	r3, [r0, #4]
 8017768:	894b      	ldrh	r3, [r1, #10]
 801776a:	80c3      	strh	r3, [r0, #6]
 801776c:	4770      	bx	lr
	...

08017770 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017772:	4604      	mov	r4, r0
 8017774:	466b      	mov	r3, sp
 8017776:	6808      	ldr	r0, [r1, #0]
 8017778:	6849      	ldr	r1, [r1, #4]
 801777a:	c303      	stmia	r3!, {r0, r1}
 801777c:	6823      	ldr	r3, [r4, #0]
 801777e:	4669      	mov	r1, sp
 8017780:	4620      	mov	r0, r4
 8017782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017784:	4798      	blx	r3
 8017786:	4b08      	ldr	r3, [pc, #32]	; (80177a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801778e:	b10a      	cbz	r2, 8017794 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017790:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017792:	b900      	cbnz	r0, 8017796 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017794:	6898      	ldr	r0, [r3, #8]
 8017796:	6803      	ldr	r3, [r0, #0]
 8017798:	4669      	mov	r1, sp
 801779a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801779c:	69dd      	ldr	r5, [r3, #28]
 801779e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80177a2:	47a8      	blx	r5
 80177a4:	b003      	add	sp, #12
 80177a6:	bd30      	pop	{r4, r5, pc}
 80177a8:	2000bd6c 	.word	0x2000bd6c

080177ac <_ZN8touchgfx10TiledImage9setOffsetEss>:
 80177ac:	b570      	push	{r4, r5, r6, lr}
 80177ae:	6803      	ldr	r3, [r0, #0]
 80177b0:	4604      	mov	r4, r0
 80177b2:	4615      	mov	r5, r2
 80177b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80177b6:	4798      	blx	r3
 80177b8:	6823      	ldr	r3, [r4, #0]
 80177ba:	4629      	mov	r1, r5
 80177bc:	4620      	mov	r0, r4
 80177be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177c4:	4718      	bx	r3

080177c6 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 80177c6:	b570      	push	{r4, r5, r6, lr}
 80177c8:	6803      	ldr	r3, [r0, #0]
 80177ca:	4604      	mov	r4, r0
 80177cc:	460e      	mov	r6, r1
 80177ce:	4615      	mov	r5, r2
 80177d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80177d2:	4798      	blx	r3
 80177d4:	8030      	strh	r0, [r6, #0]
 80177d6:	6823      	ldr	r3, [r4, #0]
 80177d8:	4620      	mov	r0, r4
 80177da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177dc:	4798      	blx	r3
 80177de:	8028      	strh	r0, [r5, #0]
 80177e0:	bd70      	pop	{r4, r5, r6, pc}

080177e2 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 80177e2:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 80177e6:	4770      	bx	lr

080177e8 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 80177e8:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80177ec:	4770      	bx	lr

080177ee <_ZN8touchgfx10TiledImageD1Ev>:
 80177ee:	4770      	bx	lr

080177f0 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 80177f0:	b510      	push	{r4, lr}
 80177f2:	4604      	mov	r4, r0
 80177f4:	f000 fa40 	bl	8017c78 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80177f8:	6823      	ldr	r3, [r4, #0]
 80177fa:	4620      	mov	r0, r4
 80177fc:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017800:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801780a:	4718      	bx	r3

0801780c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801780e:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017812:	4605      	mov	r5, r0
 8017814:	8541      	strh	r1, [r0, #42]	; 0x2a
 8017816:	4630      	mov	r0, r6
 8017818:	f003 fd7e 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801781c:	b1a0      	cbz	r0, 8017848 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801781e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8017822:	4630      	mov	r0, r6
 8017824:	f003 fd78 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017828:	fb97 f4f0 	sdiv	r4, r7, r0
 801782c:	fb04 7410 	mls	r4, r4, r0, r7
 8017830:	4630      	mov	r0, r6
 8017832:	f003 fd71 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017836:	4404      	add	r4, r0
 8017838:	4630      	mov	r0, r6
 801783a:	f003 fd6d 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801783e:	fb94 f3f0 	sdiv	r3, r4, r0
 8017842:	fb03 4010 	mls	r0, r3, r0, r4
 8017846:	8568      	strh	r0, [r5, #42]	; 0x2a
 8017848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801784a <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801784a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801784c:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017850:	4605      	mov	r5, r0
 8017852:	8581      	strh	r1, [r0, #44]	; 0x2c
 8017854:	4630      	mov	r0, r6
 8017856:	f003 fd99 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801785a:	b1a0      	cbz	r0, 8017886 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801785c:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8017860:	4630      	mov	r0, r6
 8017862:	f003 fd93 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017866:	fb97 f4f0 	sdiv	r4, r7, r0
 801786a:	fb04 7410 	mls	r4, r4, r0, r7
 801786e:	4630      	mov	r0, r6
 8017870:	f003 fd8c 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017874:	4404      	add	r4, r0
 8017876:	4630      	mov	r0, r6
 8017878:	f003 fd88 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801787c:	fb94 f3f0 	sdiv	r3, r4, r0
 8017880:	fb03 4010 	mls	r0, r3, r0, r4
 8017884:	85a8      	strh	r0, [r5, #44]	; 0x2c
 8017886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017888 <_ZN8touchgfx10TiledImageD0Ev>:
 8017888:	b510      	push	{r4, lr}
 801788a:	4604      	mov	r4, r0
 801788c:	2130      	movs	r1, #48	; 0x30
 801788e:	f00d fa6a 	bl	8024d66 <_ZdlPvj>
 8017892:	4620      	mov	r0, r4
 8017894:	bd10      	pop	{r4, pc}
	...

08017898 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8017898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801789c:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80178a0:	b093      	sub	sp, #76	; 0x4c
 80178a2:	4607      	mov	r7, r0
 80178a4:	460e      	mov	r6, r1
 80178a6:	4658      	mov	r0, fp
 80178a8:	f003 fd36 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80178ac:	4605      	mov	r5, r0
 80178ae:	4658      	mov	r0, fp
 80178b0:	f003 fd6c 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80178b4:	4680      	mov	r8, r0
 80178b6:	2d00      	cmp	r5, #0
 80178b8:	f000 80c5 	beq.w	8017a46 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80178bc:	2800      	cmp	r0, #0
 80178be:	f000 80c2 	beq.w	8017a46 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80178c2:	2300      	movs	r3, #0
 80178c4:	a90e      	add	r1, sp, #56	; 0x38
 80178c6:	4638      	mov	r0, r7
 80178c8:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178d0:	4798      	blx	r3
 80178d2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80178d6:	f9b6 3000 	ldrsh.w	r3, [r6]
 80178da:	88b1      	ldrh	r1, [r6, #4]
 80178dc:	189c      	adds	r4, r3, r2
 80178de:	440b      	add	r3, r1
 80178e0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80178e4:	fa02 f383 	sxtah	r3, r2, r3
 80178e8:	3b01      	subs	r3, #1
 80178ea:	fb93 f3f5 	sdiv	r3, r3, r5
 80178ee:	fb94 f4f5 	sdiv	r4, r4, r5
 80178f2:	fb13 f305 	smulbb	r3, r3, r5
 80178f6:	fb14 f405 	smulbb	r4, r4, r5
 80178fa:	b21b      	sxth	r3, r3
 80178fc:	1aa4      	subs	r4, r4, r2
 80178fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017900:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017904:	b2a4      	uxth	r4, r4
 8017906:	185a      	adds	r2, r3, r1
 8017908:	fb92 f2f8 	sdiv	r2, r2, r8
 801790c:	fb12 f208 	smulbb	r2, r2, r8
 8017910:	1a52      	subs	r2, r2, r1
 8017912:	b212      	sxth	r2, r2
 8017914:	920c      	str	r2, [sp, #48]	; 0x30
 8017916:	88f2      	ldrh	r2, [r6, #6]
 8017918:	4413      	add	r3, r2
 801791a:	fa01 f383 	sxtah	r3, r1, r3
 801791e:	3b01      	subs	r3, #1
 8017920:	fb93 f3f8 	sdiv	r3, r3, r8
 8017924:	fb13 f308 	smulbb	r3, r3, r8
 8017928:	b21b      	sxth	r3, r3
 801792a:	930d      	str	r3, [sp, #52]	; 0x34
 801792c:	1963      	adds	r3, r4, r5
 801792e:	fa1f fa83 	uxth.w	sl, r3
 8017932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017934:	b223      	sxth	r3, r4
 8017936:	4293      	cmp	r3, r2
 8017938:	9305      	str	r3, [sp, #20]
 801793a:	f300 8084 	bgt.w	8017a46 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801793e:	fa0f f38a 	sxth.w	r3, sl
 8017942:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8017946:	9309      	str	r3, [sp, #36]	; 0x24
 8017948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801794a:	4599      	cmp	r9, r3
 801794c:	dd04      	ble.n	8017958 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801794e:	442c      	add	r4, r5
 8017950:	eb05 030a 	add.w	r3, r5, sl
 8017954:	b2a4      	uxth	r4, r4
 8017956:	e7ea      	b.n	801792e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8017958:	f9b6 c000 	ldrsh.w	ip, [r6]
 801795c:	88b2      	ldrh	r2, [r6, #4]
 801795e:	4462      	add	r2, ip
 8017960:	b292      	uxth	r2, r2
 8017962:	b213      	sxth	r3, r2
 8017964:	9308      	str	r3, [sp, #32]
 8017966:	fa1f f389 	uxth.w	r3, r9
 801796a:	eb08 0103 	add.w	r1, r8, r3
 801796e:	9307      	str	r3, [sp, #28]
 8017970:	b289      	uxth	r1, r1
 8017972:	b208      	sxth	r0, r1
 8017974:	9006      	str	r0, [sp, #24]
 8017976:	9805      	ldr	r0, [sp, #20]
 8017978:	4603      	mov	r3, r0
 801797a:	9808      	ldr	r0, [sp, #32]
 801797c:	4283      	cmp	r3, r0
 801797e:	da5e      	bge.n	8017a3e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017982:	4584      	cmp	ip, r0
 8017984:	da5b      	bge.n	8017a3e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017986:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801798a:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801798e:	4486      	add	lr, r0
 8017990:	fa1f fe8e 	uxth.w	lr, lr
 8017994:	fa0f f38e 	sxth.w	r3, lr
 8017998:	4599      	cmp	r9, r3
 801799a:	930a      	str	r3, [sp, #40]	; 0x28
 801799c:	da4f      	bge.n	8017a3e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801799e:	9b06      	ldr	r3, [sp, #24]
 80179a0:	4298      	cmp	r0, r3
 80179a2:	da4c      	bge.n	8017a3e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80179a4:	9b05      	ldr	r3, [sp, #20]
 80179a6:	459c      	cmp	ip, r3
 80179a8:	bfb8      	it	lt
 80179aa:	469c      	movlt	ip, r3
 80179ac:	4548      	cmp	r0, r9
 80179ae:	9b08      	ldr	r3, [sp, #32]
 80179b0:	bfb8      	it	lt
 80179b2:	4648      	movlt	r0, r9
 80179b4:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80179b8:	4699      	mov	r9, r3
 80179ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179bc:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80179c0:	4599      	cmp	r9, r3
 80179c2:	bfc8      	it	gt
 80179c4:	4652      	movgt	r2, sl
 80179c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179c8:	eba2 020c 	sub.w	r2, r2, ip
 80179cc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80179d0:	9a06      	ldr	r2, [sp, #24]
 80179d2:	4293      	cmp	r3, r2
 80179d4:	bfd8      	it	le
 80179d6:	4671      	movle	r1, lr
 80179d8:	1a09      	subs	r1, r1, r0
 80179da:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 80179de:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80179e2:	9b07      	ldr	r3, [sp, #28]
 80179e4:	1b12      	subs	r2, r2, r4
 80179e6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80179ea:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80179ee:	1ad2      	subs	r2, r2, r3
 80179f0:	4b16      	ldr	r3, [pc, #88]	; (8017a4c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 80179f2:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 80179fc:	b109      	cbz	r1, 8017a02 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 80179fe:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8017a00:	b900      	cbnz	r0, 8017a04 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017a02:	6890      	ldr	r0, [r2, #8]
 8017a04:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017a08:	f04f 0c01 	mov.w	ip, #1
 8017a0c:	9b07      	ldr	r3, [sp, #28]
 8017a0e:	6801      	ldr	r1, [r0, #0]
 8017a10:	4413      	add	r3, r2
 8017a12:	f8cd c008 	str.w	ip, [sp, #8]
 8017a16:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8017a1a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8017a1e:	b21b      	sxth	r3, r3
 8017a20:	4422      	add	r2, r4
 8017a22:	f8cd c004 	str.w	ip, [sp, #4]
 8017a26:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8017a2a:	b212      	sxth	r2, r2
 8017a2c:	f8cd c000 	str.w	ip, [sp]
 8017a30:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8017a34:	4659      	mov	r1, fp
 8017a36:	47c8      	blx	r9
 8017a38:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017a3c:	e784      	b.n	8017948 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8017a3e:	2300      	movs	r3, #0
 8017a40:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8017a44:	e7cb      	b.n	80179de <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8017a46:	b013      	add	sp, #76	; 0x4c
 8017a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4c:	2000bd6c 	.word	0x2000bd6c

08017a50 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8017a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a54:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017a58:	4606      	mov	r6, r0
 8017a5a:	4689      	mov	r9, r1
 8017a5c:	2bff      	cmp	r3, #255	; 0xff
 8017a5e:	d008      	beq.n	8017a72 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8017a60:	2300      	movs	r3, #0
 8017a62:	8003      	strh	r3, [r0, #0]
 8017a64:	8043      	strh	r3, [r0, #2]
 8017a66:	8083      	strh	r3, [r0, #4]
 8017a68:	4630      	mov	r0, r6
 8017a6a:	80f3      	strh	r3, [r6, #6]
 8017a6c:	b003      	add	sp, #12
 8017a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a72:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 8017a76:	4668      	mov	r0, sp
 8017a78:	4659      	mov	r1, fp
 8017a7a:	f003 fcc1 	bl	801b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017a7e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8017a82:	4658      	mov	r0, fp
 8017a84:	f9bd 7000 	ldrsh.w	r7, [sp]
 8017a88:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8017a8c:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8017a90:	f003 fc42 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017a94:	4284      	cmp	r4, r0
 8017a96:	d10d      	bne.n	8017ab4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8017a98:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8017a9c:	4658      	mov	r0, fp
 8017a9e:	f003 fc75 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017aa2:	4580      	cmp	r8, r0
 8017aa4:	d12a      	bne.n	8017afc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8017aa6:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8017aaa:	8037      	strh	r7, [r6, #0]
 8017aac:	f8a6 a002 	strh.w	sl, [r6, #2]
 8017ab0:	80b5      	strh	r5, [r6, #4]
 8017ab2:	e7d9      	b.n	8017a68 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017ab4:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8017ab8:	4658      	mov	r0, fp
 8017aba:	f003 fc2d 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017abe:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8017ac2:	1b7f      	subs	r7, r7, r5
 8017ac4:	b2a3      	uxth	r3, r4
 8017ac6:	b2bd      	uxth	r5, r7
 8017ac8:	b22f      	sxth	r7, r5
 8017aca:	4428      	add	r0, r5
 8017acc:	2f00      	cmp	r7, #0
 8017ace:	b280      	uxth	r0, r0
 8017ad0:	bfb8      	it	lt
 8017ad2:	18ed      	addlt	r5, r5, r3
 8017ad4:	4403      	add	r3, r0
 8017ad6:	bfac      	ite	ge
 8017ad8:	4625      	movge	r5, r4
 8017ada:	2700      	movlt	r7, #0
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	bfb8      	it	lt
 8017ae0:	b22d      	sxthlt	r5, r5
 8017ae2:	b219      	sxth	r1, r3
 8017ae4:	bfb8      	it	lt
 8017ae6:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8017aea:	4291      	cmp	r1, r2
 8017aec:	bfc4      	itt	gt
 8017aee:	1a9c      	subgt	r4, r3, r2
 8017af0:	b224      	sxthgt	r4, r4
 8017af2:	42ac      	cmp	r4, r5
 8017af4:	bfc4      	itt	gt
 8017af6:	b207      	sxthgt	r7, r0
 8017af8:	4625      	movgt	r5, r4
 8017afa:	e7cf      	b.n	8017a9c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017afc:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8017b00:	4658      	mov	r0, fp
 8017b02:	f003 fc43 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b06:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8017b0a:	ebaa 0404 	sub.w	r4, sl, r4
 8017b0e:	fa1f f288 	uxth.w	r2, r8
 8017b12:	b2a4      	uxth	r4, r4
 8017b14:	fa0f fa84 	sxth.w	sl, r4
 8017b18:	4420      	add	r0, r4
 8017b1a:	f1ba 0f00 	cmp.w	sl, #0
 8017b1e:	b280      	uxth	r0, r0
 8017b20:	bfb8      	it	lt
 8017b22:	18a3      	addlt	r3, r4, r2
 8017b24:	4402      	add	r2, r0
 8017b26:	bfac      	ite	ge
 8017b28:	4643      	movge	r3, r8
 8017b2a:	f04f 0a00 	movlt.w	sl, #0
 8017b2e:	b292      	uxth	r2, r2
 8017b30:	bfb8      	it	lt
 8017b32:	b21b      	sxthlt	r3, r3
 8017b34:	b214      	sxth	r4, r2
 8017b36:	bfb8      	it	lt
 8017b38:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017b3c:	428c      	cmp	r4, r1
 8017b3e:	bfc4      	itt	gt
 8017b40:	eba2 0801 	subgt.w	r8, r2, r1
 8017b44:	fa0f f888 	sxthgt.w	r8, r8
 8017b48:	4543      	cmp	r3, r8
 8017b4a:	bfbc      	itt	lt
 8017b4c:	fa0f fa80 	sxthlt.w	sl, r0
 8017b50:	4643      	movlt	r3, r8
 8017b52:	e7aa      	b.n	8017aaa <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08017b54 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017b54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b5c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017b5e:	4604      	mov	r4, r0
 8017b60:	429a      	cmp	r2, r3
 8017b62:	d018      	beq.n	8017b96 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8017b64:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017b68:	4628      	mov	r0, r5
 8017b6a:	f7f7 fa8d 	bl	800f088 <_ZNK8touchgfx9TypedText7getFontEv>
 8017b6e:	6803      	ldr	r3, [r0, #0]
 8017b70:	4606      	mov	r6, r0
 8017b72:	4628      	mov	r0, r5
 8017b74:	69df      	ldr	r7, [r3, #28]
 8017b76:	f7f7 faa3 	bl	800f0c0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017b7a:	4680      	mov	r8, r0
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	f7f8 fd9d 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8017b82:	2300      	movs	r3, #0
 8017b84:	4602      	mov	r2, r0
 8017b86:	4641      	mov	r1, r8
 8017b88:	9300      	str	r3, [sp, #0]
 8017b8a:	4630      	mov	r0, r6
 8017b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b8e:	47b8      	blx	r7
 8017b90:	b002      	add	sp, #8
 8017b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b96:	2000      	movs	r0, #0
 8017b98:	e7fa      	b.n	8017b90 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08017b9a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017b9a:	b570      	push	{r4, r5, r6, lr}
 8017b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ba0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017ba2:	4604      	mov	r4, r0
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d00c      	beq.n	8017bc2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8017ba8:	f850 3b26 	ldr.w	r3, [r0], #38
 8017bac:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017bae:	f7f8 fd85 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8017bb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017bb4:	4601      	mov	r1, r0
 8017bb6:	46ac      	mov	ip, r5
 8017bb8:	4620      	mov	r0, r4
 8017bba:	2300      	movs	r3, #0
 8017bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bc0:	4760      	bx	ip
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08017bc8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bd0:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017bd2:	b08d      	sub	sp, #52	; 0x34
 8017bd4:	4604      	mov	r4, r0
 8017bd6:	429e      	cmp	r6, r3
 8017bd8:	460f      	mov	r7, r1
 8017bda:	d048      	beq.n	8017c6e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017bdc:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017be0:	4628      	mov	r0, r5
 8017be2:	f7f7 fa51 	bl	800f088 <_ZNK8touchgfx9TypedText7getFontEv>
 8017be6:	4680      	mov	r8, r0
 8017be8:	2800      	cmp	r0, #0
 8017bea:	d040      	beq.n	8017c6e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017bec:	4628      	mov	r0, r5
 8017bee:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017bf2:	f7f7 fa7d 	bl	800f0f0 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017bf6:	4b1f      	ldr	r3, [pc, #124]	; (8017c74 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8017bf8:	4628      	mov	r0, r5
 8017bfa:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017c04:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017c08:	785e      	ldrb	r6, [r3, #1]
 8017c0a:	f7f7 fa59 	bl	800f0c0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017c0e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017c12:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017c18:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017c1c:	f88d 6020 	strb.w	r6, [sp, #32]
 8017c20:	ae05      	add	r6, sp, #20
 8017c22:	9309      	str	r3, [sp, #36]	; 0x24
 8017c24:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017c28:	f8cd 801c 	str.w	r8, [sp, #28]
 8017c2c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017c30:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017c34:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017c38:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017c3c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017c40:	f7f7 fe02 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8017c44:	4621      	mov	r1, r4
 8017c46:	4680      	mov	r8, r0
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f001 fd98 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f7f8 fd34 	bl	80106bc <_ZNK8touchgfx9TypedText7getTextEv>
 8017c54:	2300      	movs	r3, #0
 8017c56:	9303      	str	r3, [sp, #12]
 8017c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c5a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017c5e:	ab07      	add	r3, sp, #28
 8017c60:	4640      	mov	r0, r8
 8017c62:	9300      	str	r3, [sp, #0]
 8017c64:	463b      	mov	r3, r7
 8017c66:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017c6a:	f000 faa9 	bl	80181c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017c6e:	b00d      	add	sp, #52	; 0x34
 8017c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c74:	2000bdfc 	.word	0x2000bdfc

08017c78 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017c78:	b570      	push	{r4, r5, r6, lr}
 8017c7a:	4605      	mov	r5, r0
 8017c7c:	880b      	ldrh	r3, [r1, #0]
 8017c7e:	4604      	mov	r4, r0
 8017c80:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017c82:	f855 3b26 	ldr.w	r3, [r5], #38
 8017c86:	4628      	mov	r0, r5
 8017c88:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8017c8a:	f003 fb45 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c8e:	b201      	sxth	r1, r0
 8017c90:	4620      	mov	r0, r4
 8017c92:	47b0      	blx	r6
 8017c94:	6823      	ldr	r3, [r4, #0]
 8017c96:	4628      	mov	r0, r5
 8017c98:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8017c9a:	f003 fb77 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c9e:	b201      	sxth	r1, r0
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	47b0      	blx	r6
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	f003 fc05 	bl	801b4b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017caa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8017cae:	bd70      	pop	{r4, r5, r6, pc}

08017cb0 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017cb0:	b510      	push	{r4, lr}
 8017cb2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	2bff      	cmp	r3, #255	; 0xff
 8017cba:	d006      	beq.n	8017cca <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	8003      	strh	r3, [r0, #0]
 8017cc0:	8043      	strh	r3, [r0, #2]
 8017cc2:	8083      	strh	r3, [r0, #4]
 8017cc4:	80c3      	strh	r3, [r0, #6]
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	bd10      	pop	{r4, pc}
 8017cca:	3126      	adds	r1, #38	; 0x26
 8017ccc:	f003 fb98 	bl	801b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017cd0:	e7f9      	b.n	8017cc6 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017cd4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd8:	4604      	mov	r4, r0
 8017cda:	b088      	sub	sp, #32
 8017cdc:	2500      	movs	r5, #0
 8017cde:	460f      	mov	r7, r1
 8017ce0:	f854 3b26 	ldr.w	r3, [r4], #38
 8017ce4:	a904      	add	r1, sp, #16
 8017ce6:	4606      	mov	r6, r0
 8017ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017cee:	4798      	blx	r3
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f003 fb11 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017cf6:	4680      	mov	r8, r0
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	f003 fb47 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017cfe:	9506      	str	r5, [sp, #24]
 8017d00:	ad06      	add	r5, sp, #24
 8017d02:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017d06:	4639      	mov	r1, r7
 8017d08:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017d0c:	4628      	mov	r0, r5
 8017d0e:	f7fd fef5 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8017d12:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017d16:	b1c3      	cbz	r3, 8017d4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017d18:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017d1c:	b1ab      	cbz	r3, 8017d4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017d1e:	4b0c      	ldr	r3, [pc, #48]	; (8017d50 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017d26:	b10a      	cbz	r2, 8017d2c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8017d28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017d2a:	b900      	cbnz	r0, 8017d2e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8017d2c:	6898      	ldr	r0, [r3, #8]
 8017d2e:	2701      	movs	r7, #1
 8017d30:	6801      	ldr	r1, [r0, #0]
 8017d32:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017d36:	9702      	str	r7, [sp, #8]
 8017d38:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017d3c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017d40:	e9cd 5600 	strd	r5, r6, [sp]
 8017d44:	68cd      	ldr	r5, [r1, #12]
 8017d46:	4621      	mov	r1, r4
 8017d48:	47a8      	blx	r5
 8017d4a:	b008      	add	sp, #32
 8017d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d50:	2000bd6c 	.word	0x2000bd6c

08017d54 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017d54:	4b02      	ldr	r3, [pc, #8]	; (8017d60 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017d56:	6018      	str	r0, [r3, #0]
 8017d58:	4b02      	ldr	r3, [pc, #8]	; (8017d64 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017d5a:	6019      	str	r1, [r3, #0]
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	2000bd74 	.word	0x2000bd74
 8017d64:	2000bd88 	.word	0x2000bd88

08017d68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4c2b      	ldr	r4, [pc, #172]	; (8017e18 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017d6c:	4b2b      	ldr	r3, [pc, #172]	; (8017e1c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017d6e:	6821      	ldr	r1, [r4, #0]
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	4281      	cmp	r1, r0
 8017d74:	4d2a      	ldr	r5, [pc, #168]	; (8017e20 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017d76:	492b      	ldr	r1, [pc, #172]	; (8017e24 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017d78:	d108      	bne.n	8017d8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017d7a:	682b      	ldr	r3, [r5, #0]
 8017d7c:	4293      	cmp	r3, r2
 8017d7e:	d105      	bne.n	8017d8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017d80:	6808      	ldr	r0, [r1, #0]
 8017d82:	280f      	cmp	r0, #15
 8017d84:	bf94      	ite	ls
 8017d86:	2000      	movls	r0, #0
 8017d88:	2001      	movhi	r0, #1
 8017d8a:	bd38      	pop	{r3, r4, r5, pc}
 8017d8c:	4b26      	ldr	r3, [pc, #152]	; (8017e28 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017d8e:	6020      	str	r0, [r4, #0]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	602a      	str	r2, [r5, #0]
 8017d94:	4298      	cmp	r0, r3
 8017d96:	d905      	bls.n	8017da4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017d98:	4b24      	ldr	r3, [pc, #144]	; (8017e2c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017d9a:	2137      	movs	r1, #55	; 0x37
 8017d9c:	4a24      	ldr	r2, [pc, #144]	; (8017e30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017d9e:	4825      	ldr	r0, [pc, #148]	; (8017e34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017da0:	f00d f80c 	bl	8024dbc <__assert_func>
 8017da4:	f010 0403 	ands.w	r4, r0, #3
 8017da8:	bf1f      	itttt	ne
 8017daa:	f1c4 0504 	rsbne	r5, r4, #4
 8017dae:	3b04      	subne	r3, #4
 8017db0:	1952      	addne	r2, r2, r5
 8017db2:	191b      	addne	r3, r3, r4
 8017db4:	4d20      	ldr	r5, [pc, #128]	; (8017e38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017db6:	4402      	add	r2, r0
 8017db8:	1a1b      	subs	r3, r3, r0
 8017dba:	3001      	adds	r0, #1
 8017dbc:	602a      	str	r2, [r5, #0]
 8017dbe:	f020 0401 	bic.w	r4, r0, #1
 8017dc2:	42a3      	cmp	r3, r4
 8017dc4:	d203      	bcs.n	8017dce <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017dc6:	4b19      	ldr	r3, [pc, #100]	; (8017e2c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017dc8:	214a      	movs	r1, #74	; 0x4a
 8017dca:	4a19      	ldr	r2, [pc, #100]	; (8017e30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017dcc:	e7e7      	b.n	8017d9e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017dce:	f010 0002 	ands.w	r0, r0, #2
 8017dd2:	bf1f      	itttt	ne
 8017dd4:	f1c0 0504 	rsbne	r5, r0, #4
 8017dd8:	1952      	addne	r2, r2, r5
 8017dda:	1f05      	subne	r5, r0, #4
 8017ddc:	195b      	addne	r3, r3, r5
 8017dde:	4422      	add	r2, r4
 8017de0:	4d16      	ldr	r5, [pc, #88]	; (8017e3c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017de2:	1b1b      	subs	r3, r3, r4
 8017de4:	602a      	str	r2, [r5, #0]
 8017de6:	429c      	cmp	r4, r3
 8017de8:	d903      	bls.n	8017df2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017dea:	4b10      	ldr	r3, [pc, #64]	; (8017e2c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017dec:	215d      	movs	r1, #93	; 0x5d
 8017dee:	4a10      	ldr	r2, [pc, #64]	; (8017e30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017df0:	e7d5      	b.n	8017d9e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017df2:	b120      	cbz	r0, 8017dfe <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017df4:	f1c0 0504 	rsb	r5, r0, #4
 8017df8:	3804      	subs	r0, #4
 8017dfa:	442a      	add	r2, r5
 8017dfc:	4403      	add	r3, r0
 8017dfe:	1b1b      	subs	r3, r3, r4
 8017e00:	4422      	add	r2, r4
 8017e02:	480f      	ldr	r0, [pc, #60]	; (8017e40 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017e04:	2b0f      	cmp	r3, #15
 8017e06:	600b      	str	r3, [r1, #0]
 8017e08:	6002      	str	r2, [r0, #0]
 8017e0a:	d803      	bhi.n	8017e14 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017e0c:	4b0d      	ldr	r3, [pc, #52]	; (8017e44 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017e0e:	2170      	movs	r1, #112	; 0x70
 8017e10:	4a07      	ldr	r2, [pc, #28]	; (8017e30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e12:	e7c4      	b.n	8017d9e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017e14:	2001      	movs	r0, #1
 8017e16:	e7b8      	b.n	8017d8a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017e18:	2000bd7c 	.word	0x2000bd7c
 8017e1c:	2000bd74 	.word	0x2000bd74
 8017e20:	2000bd84 	.word	0x2000bd84
 8017e24:	2000bd8c 	.word	0x2000bd8c
 8017e28:	2000bd88 	.word	0x2000bd88
 8017e2c:	08028548 	.word	0x08028548
 8017e30:	08028610 	.word	0x08028610
 8017e34:	08028581 	.word	0x08028581
 8017e38:	2000bd90 	.word	0x2000bd90
 8017e3c:	2000bd80 	.word	0x2000bd80
 8017e40:	2000bd78 	.word	0x2000bd78
 8017e44:	080285cb 	.word	0x080285cb

08017e48 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017e48:	4b04      	ldr	r3, [pc, #16]	; (8017e5c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017e4a:	6818      	ldr	r0, [r3, #0]
 8017e4c:	b120      	cbz	r0, 8017e58 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017e4e:	4b04      	ldr	r3, [pc, #16]	; (8017e60 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017e50:	6818      	ldr	r0, [r3, #0]
 8017e52:	3000      	adds	r0, #0
 8017e54:	bf18      	it	ne
 8017e56:	2001      	movne	r0, #1
 8017e58:	4770      	bx	lr
 8017e5a:	bf00      	nop
 8017e5c:	2000bd74 	.word	0x2000bd74
 8017e60:	2000bd88 	.word	0x2000bd88

08017e64 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017e64:	4b01      	ldr	r3, [pc, #4]	; (8017e6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017e66:	6818      	ldr	r0, [r3, #0]
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop
 8017e6c:	2000bd7c 	.word	0x2000bd7c

08017e70 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017e70:	4b01      	ldr	r3, [pc, #4]	; (8017e78 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017e72:	6818      	ldr	r0, [r3, #0]
 8017e74:	4770      	bx	lr
 8017e76:	bf00      	nop
 8017e78:	2000bd84 	.word	0x2000bd84

08017e7c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017e7c:	4b01      	ldr	r3, [pc, #4]	; (8017e84 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017e7e:	6818      	ldr	r0, [r3, #0]
 8017e80:	4770      	bx	lr
 8017e82:	bf00      	nop
 8017e84:	2000bd90 	.word	0x2000bd90

08017e88 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017e88:	4b01      	ldr	r3, [pc, #4]	; (8017e90 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017e8a:	6818      	ldr	r0, [r3, #0]
 8017e8c:	4770      	bx	lr
 8017e8e:	bf00      	nop
 8017e90:	2000bd80 	.word	0x2000bd80

08017e94 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017e94:	4b01      	ldr	r3, [pc, #4]	; (8017e9c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017e96:	6818      	ldr	r0, [r3, #0]
 8017e98:	4770      	bx	lr
 8017e9a:	bf00      	nop
 8017e9c:	2000bd78 	.word	0x2000bd78

08017ea0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017ea0:	4b01      	ldr	r3, [pc, #4]	; (8017ea8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017ea2:	6818      	ldr	r0, [r3, #0]
 8017ea4:	4770      	bx	lr
 8017ea6:	bf00      	nop
 8017ea8:	2000bd8c 	.word	0x2000bd8c

08017eac <_ZN8touchgfx3LCD4initEv>:
 8017eac:	4770      	bx	lr

08017eae <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017eae:	2000      	movs	r0, #0
 8017eb0:	4770      	bx	lr

08017eb2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017eb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb6:	b091      	sub	sp, #68	; 0x44
 8017eb8:	4699      	mov	r9, r3
 8017eba:	4617      	mov	r7, r2
 8017ebc:	2500      	movs	r5, #0
 8017ebe:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017ec2:	4680      	mov	r8, r0
 8017ec4:	a80e      	add	r0, sp, #56	; 0x38
 8017ec6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017ec8:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017ecc:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017ed0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017ed4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ed8:	910d      	str	r1, [sp, #52]	; 0x34
 8017eda:	950e      	str	r5, [sp, #56]	; 0x38
 8017edc:	f000 fe3a 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ee0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017ee2:	f8d9 6000 	ldr.w	r6, [r9]
 8017ee6:	6818      	ldr	r0, [r3, #0]
 8017ee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017eea:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017eee:	1b80      	subs	r0, r0, r6
 8017ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ef4:	eb02 0c06 	add.w	ip, r2, r6
 8017ef8:	ebab 0e0c 	sub.w	lr, fp, ip
 8017efc:	4570      	cmp	r0, lr
 8017efe:	f340 80bc 	ble.w	801807a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017f02:	88a1      	ldrh	r1, [r4, #4]
 8017f04:	4459      	add	r1, fp
 8017f06:	b209      	sxth	r1, r1
 8017f08:	458c      	cmp	ip, r1
 8017f0a:	f300 80b6 	bgt.w	801807a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017f0e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017f12:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8017f16:	4283      	cmp	r3, r0
 8017f18:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017f1c:	edd9 6a07 	vldr	s13, [r9, #28]
 8017f20:	bfa8      	it	ge
 8017f22:	4603      	movge	r3, r0
 8017f24:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8017f28:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017f2c:	45e3      	cmp	fp, ip
 8017f2e:	ee07 3a90 	vmov	s15, r3
 8017f32:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017f36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017f3a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017f3e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017f42:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017f46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017f4a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017f4e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017f52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017f56:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017f5a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017f5e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017f62:	f340 808d 	ble.w	8018080 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8017f66:	fb9e f5f3 	sdiv	r5, lr, r3
 8017f6a:	ee07 5a10 	vmov	s14, r5
 8017f6e:	2d00      	cmp	r5, #0
 8017f70:	fb03 e415 	mls	r4, r3, r5, lr
 8017f74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f78:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017f7c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017f80:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017f84:	dd12      	ble.n	8017fac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017f86:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017f8a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017f8e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017f92:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9a:	bf14      	ite	ne
 8017f9c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017fa0:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017fa4:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017fa8:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017fac:	fb05 f703 	mul.w	r7, r5, r3
 8017fb0:	1bc0      	subs	r0, r0, r7
 8017fb2:	443e      	add	r6, r7
 8017fb4:	1997      	adds	r7, r2, r6
 8017fb6:	4407      	add	r7, r0
 8017fb8:	42b9      	cmp	r1, r7
 8017fba:	bfbc      	itt	lt
 8017fbc:	1a88      	sublt	r0, r1, r2
 8017fbe:	1b80      	sublt	r0, r0, r6
 8017fc0:	2800      	cmp	r0, #0
 8017fc2:	dd5a      	ble.n	801807a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017fc4:	fb90 f1f3 	sdiv	r1, r0, r3
 8017fc8:	fb03 0211 	mls	r2, r3, r1, r0
 8017fcc:	b90a      	cbnz	r2, 8017fd2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017fce:	3901      	subs	r1, #1
 8017fd0:	461a      	mov	r2, r3
 8017fd2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017fd6:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017fda:	44a4      	add	ip, r4
 8017fdc:	2900      	cmp	r1, #0
 8017fde:	bfcc      	ite	gt
 8017fe0:	469e      	movgt	lr, r3
 8017fe2:	4696      	movle	lr, r2
 8017fe4:	fb03 c505 	mla	r5, r3, r5, ip
 8017fe8:	eef0 6a42 	vmov.f32	s13, s4
 8017fec:	eeb0 7a61 	vmov.f32	s14, s3
 8017ff0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017ff4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017ff8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017ffc:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018000:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018004:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018008:	ee17 0a90 	vmov	r0, s15
 801800c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018010:	fb90 f6f3 	sdiv	r6, r0, r3
 8018014:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018018:	ee17 0a90 	vmov	r0, s15
 801801c:	fb90 f7f3 	sdiv	r7, r0, r3
 8018020:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018024:	f8d0 8000 	ldr.w	r8, [r0]
 8018028:	900c      	str	r0, [sp, #48]	; 0x30
 801802a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801802c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018030:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8018034:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018038:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801803c:	f8cd a020 	str.w	sl, [sp, #32]
 8018040:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8018044:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018046:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801804a:	9603      	str	r6, [sp, #12]
 801804c:	44ca      	add	sl, r9
 801804e:	9506      	str	r5, [sp, #24]
 8018050:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8018054:	ee16 0a90 	vmov	r0, s13
 8018058:	f8cd a01c 	str.w	sl, [sp, #28]
 801805c:	fb07 0704 	mla	r7, r7, r4, r0
 8018060:	ee17 0a10 	vmov	r0, s14
 8018064:	fb06 0604 	mla	r6, r6, r4, r0
 8018068:	980c      	ldr	r0, [sp, #48]	; 0x30
 801806a:	9702      	str	r7, [sp, #8]
 801806c:	e9cd 3600 	strd	r3, r6, [sp]
 8018070:	ebae 0304 	sub.w	r3, lr, r4
 8018074:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018078:	47a8      	blx	r5
 801807a:	b011      	add	sp, #68	; 0x44
 801807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018080:	462c      	mov	r4, r5
 8018082:	e797      	b.n	8017fb4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08018084 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018084:	b570      	push	{r4, r5, r6, lr}
 8018086:	4604      	mov	r4, r0
 8018088:	2500      	movs	r5, #0
 801808a:	9804      	ldr	r0, [sp, #16]
 801808c:	7223      	strb	r3, [r4, #8]
 801808e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018092:	8025      	strh	r5, [r4, #0]
 8018094:	6061      	str	r1, [r4, #4]
 8018096:	7263      	strb	r3, [r4, #9]
 8018098:	60e0      	str	r0, [r4, #12]
 801809a:	8222      	strh	r2, [r4, #16]
 801809c:	8265      	strh	r5, [r4, #18]
 801809e:	82a5      	strh	r5, [r4, #20]
 80180a0:	82e5      	strh	r5, [r4, #22]
 80180a2:	8325      	strh	r5, [r4, #24]
 80180a4:	8365      	strh	r5, [r4, #26]
 80180a6:	83a5      	strh	r5, [r4, #28]
 80180a8:	77a5      	strb	r5, [r4, #30]
 80180aa:	6803      	ldr	r3, [r0, #0]
 80180ac:	695b      	ldr	r3, [r3, #20]
 80180ae:	4798      	blx	r3
 80180b0:	4606      	mov	r6, r0
 80180b2:	b1f8      	cbz	r0, 80180f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80180b4:	68e0      	ldr	r0, [r4, #12]
 80180b6:	4631      	mov	r1, r6
 80180b8:	6803      	ldr	r3, [r0, #0]
 80180ba:	68db      	ldr	r3, [r3, #12]
 80180bc:	4798      	blx	r3
 80180be:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80180c2:	4605      	mov	r5, r0
 80180c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80180c8:	7a83      	ldrb	r3, [r0, #10]
 80180ca:	4313      	orrs	r3, r2
 80180cc:	83a3      	strh	r3, [r4, #28]
 80180ce:	7a63      	ldrb	r3, [r4, #9]
 80180d0:	2b04      	cmp	r3, #4
 80180d2:	d10f      	bne.n	80180f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80180d4:	68e0      	ldr	r0, [r4, #12]
 80180d6:	462a      	mov	r2, r5
 80180d8:	4631      	mov	r1, r6
 80180da:	6803      	ldr	r3, [r0, #0]
 80180dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180de:	4798      	blx	r3
 80180e0:	f995 300d 	ldrsb.w	r3, [r5, #13]
 80180e4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80180e8:	7aab      	ldrb	r3, [r5, #10]
 80180ea:	4313      	orrs	r3, r2
 80180ec:	4418      	add	r0, r3
 80180ee:	8ba3      	ldrh	r3, [r4, #28]
 80180f0:	4418      	add	r0, r3
 80180f2:	83a0      	strh	r0, [r4, #28]
 80180f4:	4620      	mov	r0, r4
 80180f6:	bd70      	pop	{r4, r5, r6, pc}

080180f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80180f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180fc:	2400      	movs	r4, #0
 80180fe:	b085      	sub	sp, #20
 8018100:	4681      	mov	r9, r0
 8018102:	460f      	mov	r7, r1
 8018104:	4692      	mov	sl, r2
 8018106:	469b      	mov	fp, r3
 8018108:	46a0      	mov	r8, r4
 801810a:	4626      	mov	r6, r4
 801810c:	4554      	cmp	r4, sl
 801810e:	da21      	bge.n	8018154 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018110:	2300      	movs	r3, #0
 8018112:	463a      	mov	r2, r7
 8018114:	4659      	mov	r1, fp
 8018116:	4648      	mov	r0, r9
 8018118:	9303      	str	r3, [sp, #12]
 801811a:	ab03      	add	r3, sp, #12
 801811c:	f002 fb52 	bl	801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018120:	4605      	mov	r5, r0
 8018122:	b1b8      	cbz	r0, 8018154 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018124:	280a      	cmp	r0, #10
 8018126:	d015      	beq.n	8018154 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018128:	9a03      	ldr	r2, [sp, #12]
 801812a:	b182      	cbz	r2, 801814e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801812c:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8018130:	4641      	mov	r1, r8
 8018132:	7a93      	ldrb	r3, [r2, #10]
 8018134:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018138:	8895      	ldrh	r5, [r2, #4]
 801813a:	4303      	orrs	r3, r0
 801813c:	4638      	mov	r0, r7
 801813e:	9301      	str	r3, [sp, #4]
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018144:	4798      	blx	r3
 8018146:	9b01      	ldr	r3, [sp, #4]
 8018148:	4418      	add	r0, r3
 801814a:	4406      	add	r6, r0
 801814c:	b2b6      	uxth	r6, r6
 801814e:	3401      	adds	r4, #1
 8018150:	46a8      	mov	r8, r5
 8018152:	e7db      	b.n	801810c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8018154:	4630      	mov	r0, r6
 8018156:	b005      	add	sp, #20
 8018158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801815c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801815c:	2a02      	cmp	r2, #2
 801815e:	b530      	push	{r4, r5, lr}
 8018160:	d011      	beq.n	8018186 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018162:	2a03      	cmp	r2, #3
 8018164:	d01c      	beq.n	80181a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018166:	2a01      	cmp	r2, #1
 8018168:	d10c      	bne.n	8018184 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801816a:	888b      	ldrh	r3, [r1, #4]
 801816c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018170:	8801      	ldrh	r1, [r0, #0]
 8018172:	1a9b      	subs	r3, r3, r2
 8018174:	8844      	ldrh	r4, [r0, #2]
 8018176:	1a5b      	subs	r3, r3, r1
 8018178:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801817c:	8004      	strh	r4, [r0, #0]
 801817e:	8043      	strh	r3, [r0, #2]
 8018180:	8081      	strh	r1, [r0, #4]
 8018182:	80c2      	strh	r2, [r0, #6]
 8018184:	bd30      	pop	{r4, r5, pc}
 8018186:	88cb      	ldrh	r3, [r1, #6]
 8018188:	88c2      	ldrh	r2, [r0, #6]
 801818a:	1a9b      	subs	r3, r3, r2
 801818c:	8842      	ldrh	r2, [r0, #2]
 801818e:	1a9b      	subs	r3, r3, r2
 8018190:	888a      	ldrh	r2, [r1, #4]
 8018192:	8881      	ldrh	r1, [r0, #4]
 8018194:	8043      	strh	r3, [r0, #2]
 8018196:	1a52      	subs	r2, r2, r1
 8018198:	8801      	ldrh	r1, [r0, #0]
 801819a:	1a52      	subs	r2, r2, r1
 801819c:	8002      	strh	r2, [r0, #0]
 801819e:	e7f1      	b.n	8018184 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80181a0:	88cb      	ldrh	r3, [r1, #6]
 80181a2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80181a6:	8841      	ldrh	r1, [r0, #2]
 80181a8:	1a9b      	subs	r3, r3, r2
 80181aa:	f9b0 5000 	ldrsh.w	r5, [r0]
 80181ae:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80181b2:	1a5b      	subs	r3, r3, r1
 80181b4:	8045      	strh	r5, [r0, #2]
 80181b6:	8082      	strh	r2, [r0, #4]
 80181b8:	8003      	strh	r3, [r0, #0]
 80181ba:	80c4      	strh	r4, [r0, #6]
 80181bc:	e7e2      	b.n	8018184 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

080181c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 80181c0:	b570      	push	{r4, r5, r6, lr}
 80181c2:	b086      	sub	sp, #24
 80181c4:	ac02      	add	r4, sp, #8
 80181c6:	e884 0006 	stmia.w	r4, {r1, r2}
 80181ca:	461a      	mov	r2, r3
 80181cc:	ab0c      	add	r3, sp, #48	; 0x30
 80181ce:	9305      	str	r3, [sp, #20]
 80181d0:	4b0a      	ldr	r3, [pc, #40]	; (80181fc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 80181d2:	685d      	ldr	r5, [r3, #4]
 80181d4:	1069      	asrs	r1, r5, #1
 80181d6:	07ed      	lsls	r5, r5, #31
 80181d8:	eb00 0601 	add.w	r6, r0, r1
 80181dc:	bf46      	itte	mi
 80181de:	681b      	ldrmi	r3, [r3, #0]
 80181e0:	5841      	ldrmi	r1, [r0, r1]
 80181e2:	681d      	ldrpl	r5, [r3, #0]
 80181e4:	4630      	mov	r0, r6
 80181e6:	bf48      	it	mi
 80181e8:	58cd      	ldrmi	r5, [r1, r3]
 80181ea:	4621      	mov	r1, r4
 80181ec:	9b05      	ldr	r3, [sp, #20]
 80181ee:	9301      	str	r3, [sp, #4]
 80181f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181f2:	9300      	str	r3, [sp, #0]
 80181f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181f6:	47a8      	blx	r5
 80181f8:	b006      	add	sp, #24
 80181fa:	bd70      	pop	{r4, r5, r6, pc}
 80181fc:	20000030 	.word	0x20000030

08018200 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018204:	b09d      	sub	sp, #116	; 0x74
 8018206:	9114      	str	r1, [sp, #80]	; 0x50
 8018208:	9315      	str	r3, [sp, #84]	; 0x54
 801820a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801820c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801820e:	8809      	ldrh	r1, [r1, #0]
 8018210:	889b      	ldrh	r3, [r3, #4]
 8018212:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018214:	440b      	add	r3, r1
 8018216:	9210      	str	r2, [sp, #64]	; 0x40
 8018218:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801821c:	b21b      	sxth	r3, r3
 801821e:	900f      	str	r0, [sp, #60]	; 0x3c
 8018220:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018224:	930e      	str	r3, [sp, #56]	; 0x38
 8018226:	6833      	ldr	r3, [r6, #0]
 8018228:	7a59      	ldrb	r1, [r3, #9]
 801822a:	7a1b      	ldrb	r3, [r3, #8]
 801822c:	9113      	str	r1, [sp, #76]	; 0x4c
 801822e:	9312      	str	r3, [sp, #72]	; 0x48
 8018230:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018232:	f9b3 4000 	ldrsh.w	r4, [r3]
 8018236:	2a00      	cmp	r2, #0
 8018238:	d059      	beq.n	80182ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801823a:	7c33      	ldrb	r3, [r6, #16]
 801823c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801823e:	2b04      	cmp	r3, #4
 8018240:	bf14      	ite	ne
 8018242:	2301      	movne	r3, #1
 8018244:	2302      	moveq	r3, #2
 8018246:	4413      	add	r3, r2
 8018248:	f04f 0800 	mov.w	r8, #0
 801824c:	930d      	str	r3, [sp, #52]	; 0x34
 801824e:	4645      	mov	r5, r8
 8018250:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018254:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8018258:	4293      	cmp	r3, r2
 801825a:	da75      	bge.n	8018348 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801825c:	2300      	movs	r3, #0
 801825e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018260:	6832      	ldr	r2, [r6, #0]
 8018262:	931a      	str	r3, [sp, #104]	; 0x68
 8018264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018266:	428b      	cmp	r3, r1
 8018268:	db43      	blt.n	80182f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801826a:	6813      	ldr	r3, [r2, #0]
 801826c:	4610      	mov	r0, r2
 801826e:	695b      	ldr	r3, [r3, #20]
 8018270:	4798      	blx	r3
 8018272:	4681      	mov	r9, r0
 8018274:	6830      	ldr	r0, [r6, #0]
 8018276:	aa1b      	add	r2, sp, #108	; 0x6c
 8018278:	4649      	mov	r1, r9
 801827a:	6803      	ldr	r3, [r0, #0]
 801827c:	689f      	ldr	r7, [r3, #8]
 801827e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018282:	47b8      	blx	r7
 8018284:	901a      	str	r0, [sp, #104]	; 0x68
 8018286:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801828a:	45d1      	cmp	r9, sl
 801828c:	d045      	beq.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801828e:	f242 070b 	movw	r7, #8203	; 0x200b
 8018292:	45b9      	cmp	r9, r7
 8018294:	d041      	beq.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018296:	f1b9 0f00 	cmp.w	r9, #0
 801829a:	f000 80ee 	beq.w	801847a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801829e:	f1b9 0f0a 	cmp.w	r9, #10
 80182a2:	d057      	beq.n	8018354 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80182a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80182a6:	b383      	cbz	r3, 801830a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 80182a8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80182ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80182ae:	2a00      	cmp	r2, #0
 80182b0:	f000 80d2 	beq.w	8018458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 80182b4:	f1bb 0f00 	cmp.w	fp, #0
 80182b8:	d100      	bne.n	80182bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 80182ba:	4444      	add	r4, r8
 80182bc:	f992 800d 	ldrsb.w	r8, [r2, #13]
 80182c0:	f1bb 0f01 	cmp.w	fp, #1
 80182c4:	f408 7380 	and.w	r3, r8, #256	; 0x100
 80182c8:	f892 800a 	ldrb.w	r8, [r2, #10]
 80182cc:	ea48 0803 	orr.w	r8, r8, r3
 80182d0:	d128      	bne.n	8018324 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 80182d2:	eba4 0408 	sub.w	r4, r4, r8
 80182d6:	2d00      	cmp	r5, #0
 80182d8:	d143      	bne.n	8018362 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80182da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182dc:	eb08 0304 	add.w	r3, r8, r4
 80182e0:	4413      	add	r3, r2
 80182e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80182e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80182e8:	4293      	cmp	r3, r2
 80182ea:	da44      	bge.n	8018376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80182ec:	e02b      	b.n	8018346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 80182ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80182f0:	e7aa      	b.n	8018248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 80182f2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80182f6:	4659      	mov	r1, fp
 80182f8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80182fa:	9301      	str	r3, [sp, #4]
 80182fc:	ab1b      	add	r3, sp, #108	; 0x6c
 80182fe:	9300      	str	r3, [sp, #0]
 8018300:	ab1a      	add	r3, sp, #104	; 0x68
 8018302:	f002 fa93 	bl	801a82c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018306:	4681      	mov	r9, r0
 8018308:	e7bd      	b.n	8018286 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801830a:	6830      	ldr	r0, [r6, #0]
 801830c:	6803      	ldr	r3, [r0, #0]
 801830e:	691b      	ldr	r3, [r3, #16]
 8018310:	4798      	blx	r3
 8018312:	4550      	cmp	r0, sl
 8018314:	d001      	beq.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018316:	42b8      	cmp	r0, r7
 8018318:	d1c8      	bne.n	80182ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801831a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801831c:	464d      	mov	r5, r9
 801831e:	3301      	adds	r3, #1
 8018320:	930c      	str	r3, [sp, #48]	; 0x30
 8018322:	e797      	b.n	8018254 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8018324:	2d00      	cmp	r5, #0
 8018326:	f000 80aa 	beq.w	801847e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801832a:	f1bb 0f00 	cmp.w	fp, #0
 801832e:	d118      	bne.n	8018362 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8018330:	6830      	ldr	r0, [r6, #0]
 8018332:	4629      	mov	r1, r5
 8018334:	6803      	ldr	r3, [r0, #0]
 8018336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018338:	4798      	blx	r3
 801833a:	4404      	add	r4, r0
 801833c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801833e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018340:	1ae3      	subs	r3, r4, r3
 8018342:	4293      	cmp	r3, r2
 8018344:	dd17      	ble.n	8018376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018346:	464d      	mov	r5, r9
 8018348:	2d00      	cmp	r5, #0
 801834a:	f000 8096 	beq.w	801847a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801834e:	2d0a      	cmp	r5, #10
 8018350:	f040 8084 	bne.w	801845c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8018354:	250a      	movs	r5, #10
 8018356:	fab5 f085 	clz	r0, r5
 801835a:	0940      	lsrs	r0, r0, #5
 801835c:	b01d      	add	sp, #116	; 0x74
 801835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018362:	6830      	ldr	r0, [r6, #0]
 8018364:	4629      	mov	r1, r5
 8018366:	6803      	ldr	r3, [r0, #0]
 8018368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801836a:	4798      	blx	r3
 801836c:	f1bb 0f01 	cmp.w	fp, #1
 8018370:	eba4 0400 	sub.w	r4, r4, r0
 8018374:	d0b1      	beq.n	80182da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018376:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018378:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801837a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801837e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018382:	7b43      	ldrb	r3, [r0, #13]
 8018384:	4421      	add	r1, r4
 8018386:	015b      	lsls	r3, r3, #5
 8018388:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801838c:	7983      	ldrb	r3, [r0, #6]
 801838e:	4313      	orrs	r3, r2
 8018390:	440b      	add	r3, r1
 8018392:	42ab      	cmp	r3, r5
 8018394:	dbc1      	blt.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018398:	4299      	cmp	r1, r3
 801839a:	dabe      	bge.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801839c:	6830      	ldr	r0, [r6, #0]
 801839e:	42a5      	cmp	r5, r4
 80183a0:	6803      	ldr	r3, [r0, #0]
 80183a2:	bfcc      	ite	gt
 80183a4:	1b2d      	subgt	r5, r5, r4
 80183a6:	2500      	movle	r5, #0
 80183a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183aa:	bfc8      	it	gt
 80183ac:	b2ad      	uxthgt	r5, r5
 80183ae:	4798      	blx	r3
 80183b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80183b2:	4935      	ldr	r1, [pc, #212]	; (8018488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 80183b4:	7b5a      	ldrb	r2, [r3, #13]
 80183b6:	f893 e008 	ldrb.w	lr, [r3, #8]
 80183ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 80183be:	bf18      	it	ne
 80183c0:	468c      	movne	ip, r1
 80183c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80183c4:	bf08      	it	eq
 80183c6:	f04f 0c00 	moveq.w	ip, #0
 80183ca:	4408      	add	r0, r1
 80183cc:	00d1      	lsls	r1, r2, #3
 80183ce:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80183d2:	ea41 070e 	orr.w	r7, r1, lr
 80183d6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80183d8:	ea4c 0707 	orr.w	r7, ip, r7
 80183dc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80183e0:	1bc7      	subs	r7, r0, r7
 80183e2:	b2bf      	uxth	r7, r7
 80183e4:	fa0f fa87 	sxth.w	sl, r7
 80183e8:	4551      	cmp	r1, sl
 80183ea:	dd33      	ble.n	8018454 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 80183ec:	0112      	lsls	r2, r2, #4
 80183ee:	79d8      	ldrb	r0, [r3, #7]
 80183f0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80183f4:	4302      	orrs	r2, r0
 80183f6:	4492      	add	sl, r2
 80183f8:	4551      	cmp	r1, sl
 80183fa:	dc8e      	bgt.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80183fc:	1bcf      	subs	r7, r1, r7
 80183fe:	468a      	mov	sl, r1
 8018400:	b2bf      	uxth	r7, r7
 8018402:	9317      	str	r3, [sp, #92]	; 0x5c
 8018404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018406:	6830      	ldr	r0, [r6, #0]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	6801      	ldr	r1, [r0, #0]
 801840c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801840e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018410:	9311      	str	r3, [sp, #68]	; 0x44
 8018412:	9216      	str	r2, [sp, #88]	; 0x58
 8018414:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018416:	4788      	blx	r1
 8018418:	79b1      	ldrb	r1, [r6, #6]
 801841a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801841c:	910b      	str	r1, [sp, #44]	; 0x2c
 801841e:	7bb1      	ldrb	r1, [r6, #14]
 8018420:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018422:	910a      	str	r1, [sp, #40]	; 0x28
 8018424:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8018428:	9109      	str	r1, [sp, #36]	; 0x24
 801842a:	68b1      	ldr	r1, [r6, #8]
 801842c:	9305      	str	r3, [sp, #20]
 801842e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018430:	9206      	str	r2, [sp, #24]
 8018432:	e9cd a501 	strd	sl, r5, [sp, #4]
 8018436:	4425      	add	r5, r4
 8018438:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801843c:	b22d      	sxth	r5, r5
 801843e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018440:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018444:	9500      	str	r5, [sp, #0]
 8018446:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801844c:	685b      	ldr	r3, [r3, #4]
 801844e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018450:	47a8      	blx	r5
 8018452:	e762      	b.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018454:	2700      	movs	r7, #0
 8018456:	e7d4      	b.n	8018402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8018458:	4690      	mov	r8, r2
 801845a:	e75e      	b.n	801831a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801845c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801845e:	3401      	adds	r4, #1
 8018460:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018462:	429c      	cmp	r4, r3
 8018464:	f6bf af77 	bge.w	8018356 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8018468:	4659      	mov	r1, fp
 801846a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801846c:	f002 f96a 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018470:	4605      	mov	r5, r0
 8018472:	b110      	cbz	r0, 801847a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8018474:	280a      	cmp	r0, #10
 8018476:	d1f2      	bne.n	801845e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8018478:	e76c      	b.n	8018354 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801847a:	2500      	movs	r5, #0
 801847c:	e76b      	b.n	8018356 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801847e:	f1bb 0f00 	cmp.w	fp, #0
 8018482:	f43f af5b 	beq.w	801833c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8018486:	e776      	b.n	8018376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018488:	fffffe00 	.word	0xfffffe00

0801848c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801848c:	b530      	push	{r4, r5, lr}
 801848e:	8a44      	ldrh	r4, [r0, #18]
 8018490:	8ac5      	ldrh	r5, [r0, #22]
 8018492:	82c3      	strh	r3, [r0, #22]
 8018494:	442c      	add	r4, r5
 8018496:	1ae4      	subs	r4, r4, r3
 8018498:	8b03      	ldrh	r3, [r0, #24]
 801849a:	8244      	strh	r4, [r0, #18]
 801849c:	8a84      	ldrh	r4, [r0, #20]
 801849e:	4422      	add	r2, r4
 80184a0:	440c      	add	r4, r1
 80184a2:	1a59      	subs	r1, r3, r1
 80184a4:	8342      	strh	r2, [r0, #26]
 80184a6:	8284      	strh	r4, [r0, #20]
 80184a8:	8301      	strh	r1, [r0, #24]
 80184aa:	bd30      	pop	{r4, r5, pc}

080184ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80184ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b0:	7a45      	ldrb	r5, [r0, #9]
 80184b2:	b085      	sub	sp, #20
 80184b4:	4604      	mov	r4, r0
 80184b6:	4689      	mov	r9, r1
 80184b8:	1eeb      	subs	r3, r5, #3
 80184ba:	b2db      	uxtb	r3, r3
 80184bc:	b329      	cbz	r1, 801850a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d921      	bls.n	8018506 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 80184c2:	1e69      	subs	r1, r5, #1
 80184c4:	f1d1 0b00 	rsbs	fp, r1, #0
 80184c8:	eb4b 0b01 	adc.w	fp, fp, r1
 80184cc:	1eaa      	subs	r2, r5, #2
 80184ce:	2500      	movs	r5, #0
 80184d0:	4253      	negs	r3, r2
 80184d2:	9500      	str	r5, [sp, #0]
 80184d4:	4153      	adcs	r3, r2
 80184d6:	9301      	str	r3, [sp, #4]
 80184d8:	2600      	movs	r6, #0
 80184da:	f242 080b 	movw	r8, #8203	; 0x200b
 80184de:	8266      	strh	r6, [r4, #18]
 80184e0:	82a6      	strh	r6, [r4, #20]
 80184e2:	2300      	movs	r3, #0
 80184e4:	68e2      	ldr	r2, [r4, #12]
 80184e6:	7a21      	ldrb	r1, [r4, #8]
 80184e8:	9303      	str	r3, [sp, #12]
 80184ea:	ab03      	add	r3, sp, #12
 80184ec:	6860      	ldr	r0, [r4, #4]
 80184ee:	8827      	ldrh	r7, [r4, #0]
 80184f0:	f002 f968 	bl	801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80184f4:	8020      	strh	r0, [r4, #0]
 80184f6:	b9b0      	cbnz	r0, 8018526 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 80184f8:	8b22      	ldrh	r2, [r4, #24]
 80184fa:	2300      	movs	r3, #0
 80184fc:	4611      	mov	r1, r2
 80184fe:	4620      	mov	r0, r4
 8018500:	f7ff ffc4 	bl	801848c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018504:	e062      	b.n	80185cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018506:	468b      	mov	fp, r1
 8018508:	e7e0      	b.n	80184cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801850a:	2b01      	cmp	r3, #1
 801850c:	f105 35ff 	add.w	r5, r5, #4294967295
 8018510:	9101      	str	r1, [sp, #4]
 8018512:	468b      	mov	fp, r1
 8018514:	bf8c      	ite	hi
 8018516:	2300      	movhi	r3, #0
 8018518:	2301      	movls	r3, #1
 801851a:	2d01      	cmp	r5, #1
 801851c:	9300      	str	r3, [sp, #0]
 801851e:	bf8c      	ite	hi
 8018520:	2500      	movhi	r5, #0
 8018522:	2501      	movls	r5, #1
 8018524:	e7d8      	b.n	80184d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8018526:	8ae3      	ldrh	r3, [r4, #22]
 8018528:	280a      	cmp	r0, #10
 801852a:	f103 0301 	add.w	r3, r3, #1
 801852e:	82e3      	strh	r3, [r4, #22]
 8018530:	d0e2      	beq.n	80184f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8018532:	9a03      	ldr	r2, [sp, #12]
 8018534:	b972      	cbnz	r2, 8018554 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8018536:	4540      	cmp	r0, r8
 8018538:	d1d3      	bne.n	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801853a:	8823      	ldrh	r3, [r4, #0]
 801853c:	8b21      	ldrh	r1, [r4, #24]
 801853e:	2b20      	cmp	r3, #32
 8018540:	d001      	beq.n	8018546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8018542:	4543      	cmp	r3, r8
 8018544:	d11d      	bne.n	8018582 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018546:	2f20      	cmp	r7, #32
 8018548:	d002      	beq.n	8018550 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801854a:	4547      	cmp	r7, r8
 801854c:	bf18      	it	ne
 801854e:	460e      	movne	r6, r1
 8018550:	2001      	movs	r0, #1
 8018552:	e017      	b.n	8018584 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8018554:	4540      	cmp	r0, r8
 8018556:	d012      	beq.n	801857e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8018558:	8893      	ldrh	r3, [r2, #4]
 801855a:	4639      	mov	r1, r7
 801855c:	8023      	strh	r3, [r4, #0]
 801855e:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8018562:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8018566:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801856a:	ea4a 0a00 	orr.w	sl, sl, r0
 801856e:	68e0      	ldr	r0, [r4, #12]
 8018570:	6803      	ldr	r3, [r0, #0]
 8018572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018574:	4798      	blx	r3
 8018576:	eb0a 0200 	add.w	r2, sl, r0
 801857a:	b292      	uxth	r2, r2
 801857c:	e7dd      	b.n	801853a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801857e:	2200      	movs	r2, #0
 8018580:	e7db      	b.n	801853a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8018582:	2000      	movs	r0, #0
 8018584:	440a      	add	r2, r1
 8018586:	8aa3      	ldrh	r3, [r4, #20]
 8018588:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801858c:	b292      	uxth	r2, r2
 801858e:	8322      	strh	r2, [r4, #24]
 8018590:	4413      	add	r3, r2
 8018592:	f1b9 0f00 	cmp.w	r9, #0
 8018596:	d022      	beq.n	80185de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8018598:	f1bb 0f00 	cmp.w	fp, #0
 801859c:	d102      	bne.n	80185a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801859e:	9901      	ldr	r1, [sp, #4]
 80185a0:	b149      	cbz	r1, 80185b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80185a2:	b140      	cbz	r0, 80185b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 80185a4:	8ba1      	ldrh	r1, [r4, #28]
 80185a6:	4419      	add	r1, r3
 80185a8:	458c      	cmp	ip, r1
 80185aa:	da12      	bge.n	80185d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80185ac:	8a61      	ldrh	r1, [r4, #18]
 80185ae:	b181      	cbz	r1, 80185d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 80185b0:	4563      	cmp	r3, ip
 80185b2:	dd96      	ble.n	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185b4:	e004      	b.n	80185c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 80185b6:	4563      	cmp	r3, ip
 80185b8:	dd93      	ble.n	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185ba:	8a63      	ldrh	r3, [r4, #18]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d090      	beq.n	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185c0:	2301      	movs	r3, #1
 80185c2:	8ba2      	ldrh	r2, [r4, #28]
 80185c4:	77a3      	strb	r3, [r4, #30]
 80185c6:	8b63      	ldrh	r3, [r4, #26]
 80185c8:	4413      	add	r3, r2
 80185ca:	8363      	strh	r3, [r4, #26]
 80185cc:	b005      	add	sp, #20
 80185ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d2:	2300      	movs	r3, #0
 80185d4:	4611      	mov	r1, r2
 80185d6:	4620      	mov	r0, r4
 80185d8:	f7ff ff58 	bl	801848c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80185dc:	e781      	b.n	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185de:	4563      	cmp	r3, ip
 80185e0:	dd16      	ble.n	8018610 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 80185e2:	9b00      	ldr	r3, [sp, #0]
 80185e4:	b113      	cbz	r3, 80185ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80185e6:	2301      	movs	r3, #1
 80185e8:	460a      	mov	r2, r1
 80185ea:	e787      	b.n	80184fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 80185ec:	2d00      	cmp	r5, #0
 80185ee:	f43f af78 	beq.w	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185f2:	2800      	cmp	r0, #0
 80185f4:	f47f af75 	bne.w	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185f8:	2f20      	cmp	r7, #32
 80185fa:	d001      	beq.n	8018600 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 80185fc:	4547      	cmp	r7, r8
 80185fe:	d102      	bne.n	8018606 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8018600:	2301      	movs	r3, #1
 8018602:	4632      	mov	r2, r6
 8018604:	e77b      	b.n	80184fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8018606:	8a63      	ldrh	r3, [r4, #18]
 8018608:	2b00      	cmp	r3, #0
 801860a:	f43f af6a 	beq.w	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801860e:	e7dd      	b.n	80185cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018610:	2800      	cmp	r0, #0
 8018612:	f47f af66 	bne.w	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018616:	2f20      	cmp	r7, #32
 8018618:	d002      	beq.n	8018620 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801861a:	4547      	cmp	r7, r8
 801861c:	f47f af61 	bne.w	80184e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018620:	2301      	movs	r3, #1
 8018622:	4632      	mov	r2, r6
 8018624:	e7d7      	b.n	80185d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08018626 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018626:	b570      	push	{r4, r5, r6, lr}
 8018628:	4606      	mov	r6, r0
 801862a:	b08a      	sub	sp, #40	; 0x28
 801862c:	4615      	mov	r5, r2
 801862e:	b191      	cbz	r1, 8018656 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8018630:	2401      	movs	r4, #1
 8018632:	e9cd 3100 	strd	r3, r1, [sp]
 8018636:	4613      	mov	r3, r2
 8018638:	4601      	mov	r1, r0
 801863a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801863e:	a802      	add	r0, sp, #8
 8018640:	f7ff fd20 	bl	8018084 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018644:	2100      	movs	r1, #0
 8018646:	a802      	add	r0, sp, #8
 8018648:	f7ff ff30 	bl	80184ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801864c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018650:	b173      	cbz	r3, 8018670 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8018652:	3401      	adds	r4, #1
 8018654:	e7f6      	b.n	8018644 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8018656:	2401      	movs	r4, #1
 8018658:	4611      	mov	r1, r2
 801865a:	f002 f873 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801865e:	280a      	cmp	r0, #10
 8018660:	4629      	mov	r1, r5
 8018662:	4630      	mov	r0, r6
 8018664:	bf08      	it	eq
 8018666:	3401      	addeq	r4, #1
 8018668:	f002 f86c 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801866c:	2800      	cmp	r0, #0
 801866e:	d1f6      	bne.n	801865e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8018670:	b2a0      	uxth	r0, r4
 8018672:	b00a      	add	sp, #40	; 0x28
 8018674:	bd70      	pop	{r4, r5, r6, pc}

08018676 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801867a:	b0db      	sub	sp, #364	; 0x16c
 801867c:	468a      	mov	sl, r1
 801867e:	461c      	mov	r4, r3
 8018680:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8018684:	9009      	str	r0, [sp, #36]	; 0x24
 8018686:	f1bb 0f00 	cmp.w	fp, #0
 801868a:	f000 80c7 	beq.w	801881c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	f000 80c3 	beq.w	801881c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018696:	7ba3      	ldrb	r3, [r4, #14]
 8018698:	2b00      	cmp	r3, #0
 801869a:	f000 80bf 	beq.w	801881c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801869e:	af0c      	add	r7, sp, #48	; 0x30
 80186a0:	6810      	ldr	r0, [r2, #0]
 80186a2:	6851      	ldr	r1, [r2, #4]
 80186a4:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 80186a8:	463b      	mov	r3, r7
 80186aa:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 80186ae:	c303      	stmia	r3!, {r0, r1}
 80186b0:	2100      	movs	r1, #0
 80186b2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 80186b6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80186ba:	4638      	mov	r0, r7
 80186bc:	910e      	str	r1, [sp, #56]	; 0x38
 80186be:	a90e      	add	r1, sp, #56	; 0x38
 80186c0:	79a2      	ldrb	r2, [r4, #6]
 80186c2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80186c6:	f7ff fd49 	bl	801815c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80186ca:	a90e      	add	r1, sp, #56	; 0x38
 80186cc:	79a2      	ldrb	r2, [r4, #6]
 80186ce:	4608      	mov	r0, r1
 80186d0:	f7ff fd44 	bl	801815c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80186d4:	4648      	mov	r0, r9
 80186d6:	f001 fef3 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 80186da:	6820      	ldr	r0, [r4, #0]
 80186dc:	6803      	ldr	r3, [r0, #0]
 80186de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186e0:	4798      	blx	r3
 80186e2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80186e4:	4603      	mov	r3, r0
 80186e6:	4659      	mov	r1, fp
 80186e8:	4648      	mov	r0, r9
 80186ea:	f001 ff06 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80186ee:	a82e      	add	r0, sp, #184	; 0xb8
 80186f0:	f001 fee6 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 80186f4:	f894 8004 	ldrb.w	r8, [r4, #4]
 80186f8:	f1b8 0f00 	cmp.w	r8, #0
 80186fc:	d009      	beq.n	8018712 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 80186fe:	6820      	ldr	r0, [r4, #0]
 8018700:	6803      	ldr	r3, [r0, #0]
 8018702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018704:	4798      	blx	r3
 8018706:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018708:	4603      	mov	r3, r0
 801870a:	4659      	mov	r1, fp
 801870c:	a82e      	add	r0, sp, #184	; 0xb8
 801870e:	f001 fef4 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018712:	6820      	ldr	r0, [r4, #0]
 8018714:	6803      	ldr	r3, [r0, #0]
 8018716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018718:	4798      	blx	r3
 801871a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801871e:	182e      	adds	r6, r5, r0
 8018720:	2e00      	cmp	r6, #0
 8018722:	dd45      	ble.n	80187b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018724:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018728:	4283      	cmp	r3, r0
 801872a:	db41      	blt.n	80187b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801872c:	441d      	add	r5, r3
 801872e:	fb95 f5f6 	sdiv	r5, r5, r6
 8018732:	a844      	add	r0, sp, #272	; 0x110
 8018734:	f001 fec4 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 8018738:	7c23      	ldrb	r3, [r4, #16]
 801873a:	b14b      	cbz	r3, 8018750 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801873c:	6820      	ldr	r0, [r4, #0]
 801873e:	6803      	ldr	r3, [r0, #0]
 8018740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018742:	4798      	blx	r3
 8018744:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018746:	4603      	mov	r3, r0
 8018748:	4659      	mov	r1, fp
 801874a:	a844      	add	r0, sp, #272	; 0x110
 801874c:	f001 fed5 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018750:	7c21      	ldrb	r1, [r4, #16]
 8018752:	a810      	add	r0, sp, #64	; 0x40
 8018754:	7963      	ldrb	r3, [r4, #5]
 8018756:	9101      	str	r1, [sp, #4]
 8018758:	6821      	ldr	r1, [r4, #0]
 801875a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801875e:	9100      	str	r1, [sp, #0]
 8018760:	a944      	add	r1, sp, #272	; 0x110
 8018762:	f7ff fc8f 	bl	8018084 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018766:	7c23      	ldrb	r3, [r4, #16]
 8018768:	bb23      	cbnz	r3, 80187b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801876a:	fa1f fb86 	uxth.w	fp, r6
 801876e:	2d00      	cmp	r5, #0
 8018770:	dd57      	ble.n	8018822 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8018772:	7961      	ldrb	r1, [r4, #5]
 8018774:	4648      	mov	r0, r9
 8018776:	f001 ffe5 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801877a:	4603      	mov	r3, r0
 801877c:	f1b8 0f00 	cmp.w	r8, #0
 8018780:	d005      	beq.n	801878e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8018782:	9008      	str	r0, [sp, #32]
 8018784:	a82e      	add	r0, sp, #184	; 0xb8
 8018786:	7961      	ldrb	r1, [r4, #5]
 8018788:	f001 ffdc 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801878c:	9b08      	ldr	r3, [sp, #32]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d044      	beq.n	801881c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018792:	2b0a      	cmp	r3, #10
 8018794:	d1eb      	bne.n	801876e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8018796:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801879a:	3d01      	subs	r5, #1
 801879c:	445b      	add	r3, fp
 801879e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80187a2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80187a6:	eba3 030b 	sub.w	r3, r3, fp
 80187aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80187ae:	e7de      	b.n	801876e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80187b0:	2500      	movs	r5, #0
 80187b2:	e7be      	b.n	8018732 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 80187b4:	0073      	lsls	r3, r6, #1
 80187b6:	9308      	str	r3, [sp, #32]
 80187b8:	2d00      	cmp	r5, #0
 80187ba:	dd32      	ble.n	8018822 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80187bc:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80187c0:	a810      	add	r0, sp, #64	; 0x40
 80187c2:	9b08      	ldr	r3, [sp, #32]
 80187c4:	428b      	cmp	r3, r1
 80187c6:	bfd4      	ite	le
 80187c8:	2100      	movle	r1, #0
 80187ca:	2101      	movgt	r1, #1
 80187cc:	f7ff fe6e 	bl	80184ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80187d0:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 80187d4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80187d8:	fa1f fb83 	uxth.w	fp, r3
 80187dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187e0:	459b      	cmp	fp, r3
 80187e2:	d00b      	beq.n	80187fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80187e4:	7961      	ldrb	r1, [r4, #5]
 80187e6:	4648      	mov	r0, r9
 80187e8:	f001 ffac 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80187ec:	f1b8 0f00 	cmp.w	r8, #0
 80187f0:	d0f0      	beq.n	80187d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 80187f2:	7961      	ldrb	r1, [r4, #5]
 80187f4:	a82e      	add	r0, sp, #184	; 0xb8
 80187f6:	f001 ffa5 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80187fa:	e7eb      	b.n	80187d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 80187fc:	b2b3      	uxth	r3, r6
 80187fe:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018802:	3d01      	subs	r5, #1
 8018804:	441a      	add	r2, r3
 8018806:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801880a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801880e:	1ad3      	subs	r3, r2, r3
 8018810:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018814:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018818:	2b00      	cmp	r3, #0
 801881a:	d1cd      	bne.n	80187b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801881c:	b05b      	add	sp, #364	; 0x16c
 801881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018822:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8018826:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801882a:	7c23      	ldrb	r3, [r4, #16]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d05f      	beq.n	80188f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8018830:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018834:	a810      	add	r0, sp, #64	; 0x40
 8018836:	458b      	cmp	fp, r1
 8018838:	bfd4      	ite	le
 801883a:	2100      	movle	r1, #0
 801883c:	2101      	movgt	r1, #1
 801883e:	f7ff fe35 	bl	80184ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018842:	f1b8 0f00 	cmp.w	r8, #0
 8018846:	d04c      	beq.n	80188e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018848:	7c23      	ldrb	r3, [r4, #16]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d053      	beq.n	80188f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801884e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018852:	7922      	ldrb	r2, [r4, #4]
 8018854:	2a01      	cmp	r2, #1
 8018856:	d13c      	bne.n	80188d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8018858:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801885c:	1ac0      	subs	r0, r0, r3
 801885e:	2302      	movs	r3, #2
 8018860:	fb90 f0f3 	sdiv	r0, r0, r3
 8018864:	b200      	sxth	r0, r0
 8018866:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801886a:	4418      	add	r0, r3
 801886c:	7c23      	ldrb	r3, [r4, #16]
 801886e:	8028      	strh	r0, [r5, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d03a      	beq.n	80188ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8018874:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018878:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801887c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018880:	f8cd 9010 	str.w	r9, [sp, #16]
 8018884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018886:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801888a:	2200      	movs	r2, #0
 801888c:	2100      	movs	r1, #0
 801888e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018892:	e9cd 5700 	strd	r5, r7, [sp]
 8018896:	4652      	mov	r2, sl
 8018898:	f7ff fcb2 	bl	8018200 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801889c:	2800      	cmp	r0, #0
 801889e:	d1bd      	bne.n	801881c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80188a0:	b2b2      	uxth	r2, r6
 80188a2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80188a6:	4611      	mov	r1, r2
 80188a8:	4413      	add	r3, r2
 80188aa:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80188ae:	b21b      	sxth	r3, r3
 80188b0:	1a52      	subs	r2, r2, r1
 80188b2:	7c21      	ldrb	r1, [r4, #16]
 80188b4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80188b8:	b212      	sxth	r2, r2
 80188ba:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80188be:	b109      	cbz	r1, 80188c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80188c0:	42b2      	cmp	r2, r6
 80188c2:	dbab      	blt.n	801881c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80188c4:	887a      	ldrh	r2, [r7, #2]
 80188c6:	88f9      	ldrh	r1, [r7, #6]
 80188c8:	440a      	add	r2, r1
 80188ca:	b212      	sxth	r2, r2
 80188cc:	4293      	cmp	r3, r2
 80188ce:	ddac      	ble.n	801882a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 80188d0:	e7a4      	b.n	801881c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80188d2:	2a02      	cmp	r2, #2
 80188d4:	d107      	bne.n	80188e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80188d6:	7be2      	ldrb	r2, [r4, #15]
 80188d8:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80188dc:	1a80      	subs	r0, r0, r2
 80188de:	1ac0      	subs	r0, r0, r3
 80188e0:	e7c0      	b.n	8018864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 80188e2:	7be0      	ldrb	r0, [r4, #15]
 80188e4:	e7bf      	b.n	8018866 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80188e6:	2000      	movs	r0, #0
 80188e8:	e7bd      	b.n	8018866 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80188ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80188ee:	e7c3      	b.n	8018878 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 80188f0:	f1b8 0f00 	cmp.w	r8, #0
 80188f4:	d0f5      	beq.n	80188e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80188f6:	2300      	movs	r3, #0
 80188f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80188fc:	6821      	ldr	r1, [r4, #0]
 80188fe:	a82e      	add	r0, sp, #184	; 0xb8
 8018900:	f7ff fbfa 	bl	80180f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018904:	b203      	sxth	r3, r0
 8018906:	e7a4      	b.n	8018852 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08018908 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018908:	2b02      	cmp	r3, #2
 801890a:	b510      	push	{r4, lr}
 801890c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018910:	d00b      	beq.n	801892a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018912:	2b03      	cmp	r3, #3
 8018914:	d00e      	beq.n	8018934 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018916:	2b01      	cmp	r3, #1
 8018918:	d001      	beq.n	801891e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801891a:	1860      	adds	r0, r4, r1
 801891c:	bd10      	pop	{r4, pc}
 801891e:	8880      	ldrh	r0, [r0, #4]
 8018920:	4420      	add	r0, r4
 8018922:	b200      	sxth	r0, r0
 8018924:	1a80      	subs	r0, r0, r2
 8018926:	3801      	subs	r0, #1
 8018928:	e7f8      	b.n	801891c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801892a:	8880      	ldrh	r0, [r0, #4]
 801892c:	4420      	add	r0, r4
 801892e:	b200      	sxth	r0, r0
 8018930:	1a40      	subs	r0, r0, r1
 8018932:	e7f8      	b.n	8018926 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018934:	18a0      	adds	r0, r4, r2
 8018936:	e7f1      	b.n	801891c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018938 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018938:	2b02      	cmp	r3, #2
 801893a:	b510      	push	{r4, lr}
 801893c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018940:	d006      	beq.n	8018950 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018942:	2b03      	cmp	r3, #3
 8018944:	d00a      	beq.n	801895c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018946:	2b01      	cmp	r3, #1
 8018948:	bf14      	ite	ne
 801894a:	18a0      	addne	r0, r4, r2
 801894c:	1860      	addeq	r0, r4, r1
 801894e:	bd10      	pop	{r4, pc}
 8018950:	88c0      	ldrh	r0, [r0, #6]
 8018952:	4420      	add	r0, r4
 8018954:	b200      	sxth	r0, r0
 8018956:	1a80      	subs	r0, r0, r2
 8018958:	3801      	subs	r0, #1
 801895a:	e7f8      	b.n	801894e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801895c:	88c0      	ldrh	r0, [r0, #6]
 801895e:	4420      	add	r0, r4
 8018960:	b200      	sxth	r0, r0
 8018962:	1a40      	subs	r0, r0, r1
 8018964:	e7f8      	b.n	8018958 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018968 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018968:	4b01      	ldr	r3, [pc, #4]	; (8018970 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801896a:	2200      	movs	r2, #0
 801896c:	601a      	str	r2, [r3, #0]
 801896e:	4770      	bx	lr
 8018970:	2000bd94 	.word	0x2000bd94

08018974 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018976:	1e05      	subs	r5, r0, #0
 8018978:	f04f 0601 	mov.w	r6, #1
 801897c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018980:	bfba      	itte	lt
 8018982:	f04f 37ff 	movlt.w	r7, #4294967295
 8018986:	426d      	neglt	r5, r5
 8018988:	2701      	movge	r7, #1
 801898a:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801898e:	f1be 0f00 	cmp.w	lr, #0
 8018992:	bfbc      	itt	lt
 8018994:	f1ce 0e00 	rsblt	lr, lr, #0
 8018998:	427f      	neglt	r7, r7
 801899a:	2c00      	cmp	r4, #0
 801899c:	fa4e f001 	asr.w	r0, lr, r1
 80189a0:	fa06 f101 	lsl.w	r1, r6, r1
 80189a4:	bfbc      	itt	lt
 80189a6:	4264      	neglt	r4, r4
 80189a8:	427f      	neglt	r7, r7
 80189aa:	3901      	subs	r1, #1
 80189ac:	ea01 010e 	and.w	r1, r1, lr
 80189b0:	434d      	muls	r5, r1
 80189b2:	f8dc 1000 	ldr.w	r1, [ip]
 80189b6:	fb03 1300 	mla	r3, r3, r0, r1
 80189ba:	fb95 f1f4 	sdiv	r1, r5, r4
 80189be:	fb04 5511 	mls	r5, r4, r1, r5
 80189c2:	441d      	add	r5, r3
 80189c4:	fb95 f3f4 	sdiv	r3, r5, r4
 80189c8:	4419      	add	r1, r3
 80189ca:	fb04 5413 	mls	r4, r4, r3, r5
 80189ce:	fb02 1000 	mla	r0, r2, r0, r1
 80189d2:	f8cc 4000 	str.w	r4, [ip]
 80189d6:	4378      	muls	r0, r7
 80189d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080189dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80189dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e0:	4c24      	ldr	r4, [pc, #144]	; (8018a74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 80189e2:	b086      	sub	sp, #24
 80189e4:	4605      	mov	r5, r0
 80189e6:	6807      	ldr	r7, [r0, #0]
 80189e8:	69a3      	ldr	r3, [r4, #24]
 80189ea:	b92b      	cbnz	r3, 80189f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 80189ec:	6840      	ldr	r0, [r0, #4]
 80189ee:	e9c5 7000 	strd	r7, r0, [r5]
 80189f2:	b006      	add	sp, #24
 80189f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189f8:	f04f 0802 	mov.w	r8, #2
 80189fc:	68a2      	ldr	r2, [r4, #8]
 80189fe:	ae06      	add	r6, sp, #24
 8018a00:	6820      	ldr	r0, [r4, #0]
 8018a02:	fb93 f1f8 	sdiv	r1, r3, r8
 8018a06:	440a      	add	r2, r1
 8018a08:	69e1      	ldr	r1, [r4, #28]
 8018a0a:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018a0e:	9700      	str	r7, [sp, #0]
 8018a10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018a12:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018a16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018a18:	f7ff ffac 	bl	8018974 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018a1c:	69a3      	ldr	r3, [r4, #24]
 8018a1e:	4607      	mov	r7, r0
 8018a20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018a22:	9301      	str	r3, [sp, #4]
 8018a24:	686b      	ldr	r3, [r5, #4]
 8018a26:	6a21      	ldr	r1, [r4, #32]
 8018a28:	9300      	str	r3, [sp, #0]
 8018a2a:	9602      	str	r6, [sp, #8]
 8018a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018a2e:	6860      	ldr	r0, [r4, #4]
 8018a30:	f7ff ffa0 	bl	8018974 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018a34:	69a2      	ldr	r2, [r4, #24]
 8018a36:	6963      	ldr	r3, [r4, #20]
 8018a38:	4407      	add	r7, r0
 8018a3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018a3c:	68e0      	ldr	r0, [r4, #12]
 8018a3e:	fb92 f8f8 	sdiv	r8, r2, r8
 8018a42:	4443      	add	r3, r8
 8018a44:	9305      	str	r3, [sp, #20]
 8018a46:	682b      	ldr	r3, [r5, #0]
 8018a48:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018a4c:	9300      	str	r3, [sp, #0]
 8018a4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018a50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a52:	f7ff ff8f 	bl	8018974 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018a56:	69a3      	ldr	r3, [r4, #24]
 8018a58:	4680      	mov	r8, r0
 8018a5a:	9602      	str	r6, [sp, #8]
 8018a5c:	9301      	str	r3, [sp, #4]
 8018a5e:	686b      	ldr	r3, [r5, #4]
 8018a60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018a62:	9300      	str	r3, [sp, #0]
 8018a64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018a66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018a68:	6920      	ldr	r0, [r4, #16]
 8018a6a:	f7ff ff83 	bl	8018974 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018a6e:	4440      	add	r0, r8
 8018a70:	e7bd      	b.n	80189ee <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8018a72:	bf00      	nop
 8018a74:	2000bd98 	.word	0x2000bd98

08018a78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018a78:	4b07      	ldr	r3, [pc, #28]	; (8018a98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018a7a:	b510      	push	{r4, lr}
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	2b01      	cmp	r3, #1
 8018a80:	d108      	bne.n	8018a94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018a82:	4b06      	ldr	r3, [pc, #24]	; (8018a9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018a84:	880c      	ldrh	r4, [r1, #0]
 8018a86:	881b      	ldrh	r3, [r3, #0]
 8018a88:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018a8c:	3b01      	subs	r3, #1
 8018a8e:	1b1b      	subs	r3, r3, r4
 8018a90:	8003      	strh	r3, [r0, #0]
 8018a92:	800a      	strh	r2, [r1, #0]
 8018a94:	bd10      	pop	{r4, pc}
 8018a96:	bf00      	nop
 8018a98:	2000bd64 	.word	0x2000bd64
 8018a9c:	2000bd68 	.word	0x2000bd68

08018aa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018aa0:	4b0a      	ldr	r3, [pc, #40]	; (8018acc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018aa2:	b510      	push	{r4, lr}
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d10e      	bne.n	8018ac8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018aaa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018aae:	8843      	ldrh	r3, [r0, #2]
 8018ab0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018ab4:	18ca      	adds	r2, r1, r3
 8018ab6:	4b06      	ldr	r3, [pc, #24]	; (8018ad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018ab8:	8044      	strh	r4, [r0, #2]
 8018aba:	881b      	ldrh	r3, [r3, #0]
 8018abc:	1a9b      	subs	r3, r3, r2
 8018abe:	8003      	strh	r3, [r0, #0]
 8018ac0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018ac4:	8081      	strh	r1, [r0, #4]
 8018ac6:	80c3      	strh	r3, [r0, #6]
 8018ac8:	bd10      	pop	{r4, pc}
 8018aca:	bf00      	nop
 8018acc:	2000bd64 	.word	0x2000bd64
 8018ad0:	2000bd60 	.word	0x2000bd60

08018ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018ad4:	4b07      	ldr	r3, [pc, #28]	; (8018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018ad6:	b510      	push	{r4, lr}
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	2b01      	cmp	r3, #1
 8018adc:	d108      	bne.n	8018af0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018ade:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018ae2:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018ae6:	8003      	strh	r3, [r0, #0]
 8018ae8:	8893      	ldrh	r3, [r2, #4]
 8018aea:	3b01      	subs	r3, #1
 8018aec:	1b1b      	subs	r3, r3, r4
 8018aee:	800b      	strh	r3, [r1, #0]
 8018af0:	bd10      	pop	{r4, pc}
 8018af2:	bf00      	nop
 8018af4:	2000bd64 	.word	0x2000bd64

08018af8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018af8:	4b08      	ldr	r3, [pc, #32]	; (8018b1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018afa:	b513      	push	{r0, r1, r4, lr}
 8018afc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b00:	2400      	movs	r4, #0
 8018b02:	4b07      	ldr	r3, [pc, #28]	; (8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018b04:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b08:	466a      	mov	r2, sp
 8018b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b0e:	9400      	str	r4, [sp, #0]
 8018b10:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b14:	f7ff ffde 	bl	8018ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018b18:	b002      	add	sp, #8
 8018b1a:	bd10      	pop	{r4, pc}
 8018b1c:	2000bd60 	.word	0x2000bd60
 8018b20:	2000bd62 	.word	0x2000bd62

08018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018b24:	4b0a      	ldr	r3, [pc, #40]	; (8018b50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018b26:	460a      	mov	r2, r1
 8018b28:	b510      	push	{r4, lr}
 8018b2a:	781b      	ldrb	r3, [r3, #0]
 8018b2c:	2b01      	cmp	r3, #1
 8018b2e:	d10d      	bne.n	8018b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018b30:	8881      	ldrh	r1, [r0, #4]
 8018b32:	8803      	ldrh	r3, [r0, #0]
 8018b34:	440b      	add	r3, r1
 8018b36:	4601      	mov	r1, r0
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	f821 3b02 	strh.w	r3, [r1], #2
 8018b3e:	f7ff ffc9 	bl	8018ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018b42:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018b46:	88c2      	ldrh	r2, [r0, #6]
 8018b48:	80c3      	strh	r3, [r0, #6]
 8018b4a:	8082      	strh	r2, [r0, #4]
 8018b4c:	bd10      	pop	{r4, pc}
 8018b4e:	bf00      	nop
 8018b50:	2000bd64 	.word	0x2000bd64

08018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018b54:	4b09      	ldr	r3, [pc, #36]	; (8018b7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018b56:	b507      	push	{r0, r1, r2, lr}
 8018b58:	2100      	movs	r1, #0
 8018b5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b5e:	4b08      	ldr	r3, [pc, #32]	; (8018b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018b60:	9100      	str	r1, [sp, #0]
 8018b62:	4669      	mov	r1, sp
 8018b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b68:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b70:	f7ff ffd8 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018b74:	b003      	add	sp, #12
 8018b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b7a:	bf00      	nop
 8018b7c:	2000bd60 	.word	0x2000bd60
 8018b80:	2000bd62 	.word	0x2000bd62

08018b84 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018b84:	4b03      	ldr	r3, [pc, #12]	; (8018b94 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018b86:	6818      	ldr	r0, [r3, #0]
 8018b88:	b110      	cbz	r0, 8018b90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018b8a:	6803      	ldr	r3, [r0, #0]
 8018b8c:	699b      	ldr	r3, [r3, #24]
 8018b8e:	4718      	bx	r3
 8018b90:	4770      	bx	lr
 8018b92:	bf00      	nop
 8018b94:	2000bde8 	.word	0x2000bde8

08018b98 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018b98:	4770      	bx	lr
	...

08018b9c <_ZN8touchgfx11Application4drawEv>:
 8018b9c:	4b09      	ldr	r3, [pc, #36]	; (8018bc4 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018b9e:	b507      	push	{r0, r1, r2, lr}
 8018ba0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ba4:	2100      	movs	r1, #0
 8018ba6:	4b08      	ldr	r3, [pc, #32]	; (8018bc8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018ba8:	9100      	str	r1, [sp, #0]
 8018baa:	4669      	mov	r1, sp
 8018bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bb0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018bb4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018bb8:	6803      	ldr	r3, [r0, #0]
 8018bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bbc:	4798      	blx	r3
 8018bbe:	b003      	add	sp, #12
 8018bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018bc4:	2000bd60 	.word	0x2000bd60
 8018bc8:	2000bd62 	.word	0x2000bd62

08018bcc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018bcc:	4b03      	ldr	r3, [pc, #12]	; (8018bdc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018bce:	6818      	ldr	r0, [r3, #0]
 8018bd0:	b110      	cbz	r0, 8018bd8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018bd2:	6803      	ldr	r3, [r0, #0]
 8018bd4:	69db      	ldr	r3, [r3, #28]
 8018bd6:	4718      	bx	r3
 8018bd8:	4770      	bx	lr
 8018bda:	bf00      	nop
 8018bdc:	2000bde8 	.word	0x2000bde8

08018be0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018be0:	4b03      	ldr	r3, [pc, #12]	; (8018bf0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018be2:	6818      	ldr	r0, [r3, #0]
 8018be4:	b110      	cbz	r0, 8018bec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018be6:	6803      	ldr	r3, [r0, #0]
 8018be8:	6a1b      	ldr	r3, [r3, #32]
 8018bea:	4718      	bx	r3
 8018bec:	4770      	bx	lr
 8018bee:	bf00      	nop
 8018bf0:	2000bde8 	.word	0x2000bde8

08018bf4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018bf4:	4b03      	ldr	r3, [pc, #12]	; (8018c04 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018bf6:	6818      	ldr	r0, [r3, #0]
 8018bf8:	b110      	cbz	r0, 8018c00 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018bfa:	6803      	ldr	r3, [r0, #0]
 8018bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bfe:	4718      	bx	r3
 8018c00:	4770      	bx	lr
 8018c02:	bf00      	nop
 8018c04:	2000bde8 	.word	0x2000bde8

08018c08 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c0c:	4d3a      	ldr	r5, [pc, #232]	; (8018cf8 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018c0e:	4604      	mov	r4, r0
 8018c10:	6828      	ldr	r0, [r5, #0]
 8018c12:	b140      	cbz	r0, 8018c26 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018c14:	7a03      	ldrb	r3, [r0, #8]
 8018c16:	b933      	cbnz	r3, 8018c26 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018c18:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018c1c:	6803      	ldr	r3, [r0, #0]
 8018c1e:	689b      	ldr	r3, [r3, #8]
 8018c20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c24:	4718      	bx	r3
 8018c26:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8018c2a:	b97b      	cbnz	r3, 8018c4c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018c2c:	b170      	cbz	r0, 8018c4c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018c2e:	7a03      	ldrb	r3, [r0, #8]
 8018c30:	b163      	cbz	r3, 8018c4c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018c32:	4b32      	ldr	r3, [pc, #200]	; (8018cfc <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018c34:	6818      	ldr	r0, [r3, #0]
 8018c36:	b110      	cbz	r0, 8018c3e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018c38:	6803      	ldr	r3, [r0, #0]
 8018c3a:	691b      	ldr	r3, [r3, #16]
 8018c3c:	4798      	blx	r3
 8018c3e:	6828      	ldr	r0, [r5, #0]
 8018c40:	6803      	ldr	r3, [r0, #0]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	4798      	blx	r3
 8018c46:	2301      	movs	r3, #1
 8018c48:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018c4c:	2500      	movs	r5, #0
 8018c4e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018c52:	42a8      	cmp	r0, r5
 8018c54:	dd0c      	ble.n	8018c70 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8018c56:	1963      	adds	r3, r4, r5
 8018c58:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018c5c:	b132      	cbz	r2, 8018c6c <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018c5e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018c62:	4413      	add	r3, r2
 8018c64:	6858      	ldr	r0, [r3, #4]
 8018c66:	6803      	ldr	r3, [r0, #0]
 8018c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c6a:	4798      	blx	r3
 8018c6c:	3501      	adds	r5, #1
 8018c6e:	e7ee      	b.n	8018c4e <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8018c70:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8018c74:	3801      	subs	r0, #1
 8018c76:	f04f 0c00 	mov.w	ip, #0
 8018c7a:	3678      	adds	r6, #120	; 0x78
 8018c7c:	1c43      	adds	r3, r0, #1
 8018c7e:	d033      	beq.n	8018ce8 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018c80:	1823      	adds	r3, r4, r0
 8018c82:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018c86:	bb6a      	cbnz	r2, 8018ce4 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8018c88:	b281      	uxth	r1, r0
 8018c8a:	1d25      	adds	r5, r4, #4
 8018c8c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8018c90:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8018c94:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	dc0a      	bgt.n	8018cb2 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8018c9c:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8018ca0:	4422      	add	r2, r4
 8018ca2:	18b1      	adds	r1, r6, r2
 8018ca4:	b289      	uxth	r1, r1
 8018ca6:	428b      	cmp	r3, r1
 8018ca8:	d919      	bls.n	8018cde <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8018caa:	7851      	ldrb	r1, [r2, #1]
 8018cac:	f802 1b01 	strb.w	r1, [r2], #1
 8018cb0:	e7f7      	b.n	8018ca2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018cb2:	682f      	ldr	r7, [r5, #0]
 8018cb4:	f105 0804 	add.w	r8, r5, #4
 8018cb8:	45b9      	cmp	r9, r7
 8018cba:	d10d      	bne.n	8018cd8 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8018cbc:	4696      	mov	lr, r2
 8018cbe:	f1be 0f1e 	cmp.w	lr, #30
 8018cc2:	dc06      	bgt.n	8018cd2 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018cc4:	f10e 0e01 	add.w	lr, lr, #1
 8018cc8:	686f      	ldr	r7, [r5, #4]
 8018cca:	4573      	cmp	r3, lr
 8018ccc:	f845 7b04 	str.w	r7, [r5], #4
 8018cd0:	dcf5      	bgt.n	8018cbe <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018cd2:	3b01      	subs	r3, #1
 8018cd4:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018cd8:	3201      	adds	r2, #1
 8018cda:	4645      	mov	r5, r8
 8018cdc:	e7da      	b.n	8018c94 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018cde:	4423      	add	r3, r4
 8018ce0:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018ce4:	3801      	subs	r0, #1
 8018ce6:	e7c9      	b.n	8018c7c <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018ce8:	4b04      	ldr	r3, [pc, #16]	; (8018cfc <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018cea:	6818      	ldr	r0, [r3, #0]
 8018cec:	b110      	cbz	r0, 8018cf4 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018cee:	6803      	ldr	r3, [r0, #0]
 8018cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf2:	e795      	b.n	8018c20 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cf8:	2000bdec 	.word	0x2000bdec
 8018cfc:	2000bde8 	.word	0x2000bde8

08018d00 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018d00:	b570      	push	{r4, r5, r6, lr}
 8018d02:	4606      	mov	r6, r0
 8018d04:	460c      	mov	r4, r1
 8018d06:	b929      	cbnz	r1, 8018d14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018d08:	4b0c      	ldr	r3, [pc, #48]	; (8018d3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018d0a:	2164      	movs	r1, #100	; 0x64
 8018d0c:	4a0c      	ldr	r2, [pc, #48]	; (8018d40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018d0e:	480d      	ldr	r0, [pc, #52]	; (8018d44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018d10:	f00c f854 	bl	8024dbc <__assert_func>
 8018d14:	2300      	movs	r3, #0
 8018d16:	4d0c      	ldr	r5, [pc, #48]	; (8018d48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018d18:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018d1c:	6828      	ldr	r0, [r5, #0]
 8018d1e:	b110      	cbz	r0, 8018d26 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018d20:	6803      	ldr	r3, [r0, #0]
 8018d22:	695b      	ldr	r3, [r3, #20]
 8018d24:	4798      	blx	r3
 8018d26:	602c      	str	r4, [r5, #0]
 8018d28:	4620      	mov	r0, r4
 8018d2a:	6823      	ldr	r3, [r4, #0]
 8018d2c:	68db      	ldr	r3, [r3, #12]
 8018d2e:	4798      	blx	r3
 8018d30:	6833      	ldr	r3, [r6, #0]
 8018d32:	4630      	mov	r0, r6
 8018d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d3a:	4718      	bx	r3
 8018d3c:	080286ac 	.word	0x080286ac
 8018d40:	08028774 	.word	0x08028774
 8018d44:	080286b6 	.word	0x080286b6
 8018d48:	2000bde8 	.word	0x2000bde8

08018d4c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018d4c:	b510      	push	{r4, lr}
 8018d4e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018d52:	888a      	ldrh	r2, [r1, #4]
 8018d54:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018d58:	4422      	add	r2, r4
 8018d5a:	b212      	sxth	r2, r2
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	da15      	bge.n	8018d8c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018d60:	8882      	ldrh	r2, [r0, #4]
 8018d62:	4413      	add	r3, r2
 8018d64:	b21b      	sxth	r3, r3
 8018d66:	429c      	cmp	r4, r3
 8018d68:	da10      	bge.n	8018d8c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018d6a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018d6e:	88c9      	ldrh	r1, [r1, #6]
 8018d70:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018d74:	4419      	add	r1, r3
 8018d76:	b209      	sxth	r1, r1
 8018d78:	428a      	cmp	r2, r1
 8018d7a:	da07      	bge.n	8018d8c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018d7c:	88c0      	ldrh	r0, [r0, #6]
 8018d7e:	4410      	add	r0, r2
 8018d80:	b200      	sxth	r0, r0
 8018d82:	4283      	cmp	r3, r0
 8018d84:	bfac      	ite	ge
 8018d86:	2000      	movge	r0, #0
 8018d88:	2001      	movlt	r0, #1
 8018d8a:	bd10      	pop	{r4, pc}
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	e7fc      	b.n	8018d8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018d90 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018d90:	b570      	push	{r4, r5, r6, lr}
 8018d92:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018d96:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018d9a:	42ac      	cmp	r4, r5
 8018d9c:	db18      	blt.n	8018dd0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018d9e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018da2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	db12      	blt.n	8018dd0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018daa:	8886      	ldrh	r6, [r0, #4]
 8018dac:	4435      	add	r5, r6
 8018dae:	888e      	ldrh	r6, [r1, #4]
 8018db0:	4434      	add	r4, r6
 8018db2:	b22d      	sxth	r5, r5
 8018db4:	b224      	sxth	r4, r4
 8018db6:	42a5      	cmp	r5, r4
 8018db8:	db0a      	blt.n	8018dd0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018dba:	88c0      	ldrh	r0, [r0, #6]
 8018dbc:	4418      	add	r0, r3
 8018dbe:	88cb      	ldrh	r3, [r1, #6]
 8018dc0:	441a      	add	r2, r3
 8018dc2:	b200      	sxth	r0, r0
 8018dc4:	b212      	sxth	r2, r2
 8018dc6:	4290      	cmp	r0, r2
 8018dc8:	bfb4      	ite	lt
 8018dca:	2000      	movlt	r0, #0
 8018dcc:	2001      	movge	r0, #1
 8018dce:	bd70      	pop	{r4, r5, r6, pc}
 8018dd0:	2000      	movs	r0, #0
 8018dd2:	e7fc      	b.n	8018dce <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018dd4 <_ZN8touchgfx11Application11getInstanceEv>:
 8018dd4:	4b01      	ldr	r3, [pc, #4]	; (8018ddc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018dd6:	6818      	ldr	r0, [r3, #0]
 8018dd8:	4770      	bx	lr
 8018dda:	bf00      	nop
 8018ddc:	2000bdf8 	.word	0x2000bdf8

08018de0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018de0:	2300      	movs	r3, #0
 8018de2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018de6:	30a8      	adds	r0, #168	; 0xa8
 8018de8:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018dec:	f802 3b01 	strb.w	r3, [r2], #1
 8018df0:	4282      	cmp	r2, r0
 8018df2:	d1fb      	bne.n	8018dec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018df4:	4770      	bx	lr

08018df6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018df6:	4603      	mov	r3, r0
 8018df8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	801a      	strh	r2, [r3, #0]
 8018e00:	3308      	adds	r3, #8
 8018e02:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018e06:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018e0a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018e0e:	428b      	cmp	r3, r1
 8018e10:	d1f5      	bne.n	8018dfe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018e12:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018e16:	4770      	bx	lr

08018e18 <_ZN8touchgfx11ApplicationC1Ev>:
 8018e18:	b570      	push	{r4, r5, r6, lr}
 8018e1a:	4b16      	ldr	r3, [pc, #88]	; (8018e74 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8018e1c:	2500      	movs	r5, #0
 8018e1e:	4604      	mov	r4, r0
 8018e20:	30a8      	adds	r0, #168	; 0xa8
 8018e22:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018e26:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018e2a:	f7ff ffe4 	bl	8018df6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018e2e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018e32:	f7ff ffe0 	bl	8018df6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018e36:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8018e3a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8018e3e:	490e      	ldr	r1, [pc, #56]	; (8018e78 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018e40:	480e      	ldr	r0, [pc, #56]	; (8018e7c <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018e42:	f00a faa1 	bl	8023388 <CRC_Lock>
 8018e46:	4e0e      	ldr	r6, [pc, #56]	; (8018e80 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8018e48:	4b0e      	ldr	r3, [pc, #56]	; (8018e84 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018e4a:	b158      	cbz	r0, 8018e64 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8018e4c:	801d      	strh	r5, [r3, #0]
 8018e4e:	2300      	movs	r3, #0
 8018e50:	4a0d      	ldr	r2, [pc, #52]	; (8018e88 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018e52:	4620      	mov	r0, r4
 8018e54:	6013      	str	r3, [r2, #0]
 8018e56:	4a0d      	ldr	r2, [pc, #52]	; (8018e8c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018e58:	6033      	str	r3, [r6, #0]
 8018e5a:	6013      	str	r3, [r2, #0]
 8018e5c:	f7ff ffc0 	bl	8018de0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018e60:	4620      	mov	r0, r4
 8018e62:	bd70      	pop	{r4, r5, r6, pc}
 8018e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018e68:	2002      	movs	r0, #2
 8018e6a:	801a      	strh	r2, [r3, #0]
 8018e6c:	6030      	str	r0, [r6, #0]
 8018e6e:	f000 ff81 	bl	8019d74 <_ZN8touchgfx6Screen4drawEv>
 8018e72:	e7ec      	b.n	8018e4e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8018e74:	08028740 	.word	0x08028740
 8018e78:	b5e8b5cd 	.word	0xb5e8b5cd
 8018e7c:	f407a5c2 	.word	0xf407a5c2
 8018e80:	2000bde8 	.word	0x2000bde8
 8018e84:	20000058 	.word	0x20000058
 8018e88:	2000bdf8 	.word	0x2000bdf8
 8018e8c:	2000bdec 	.word	0x2000bdec

08018e90 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018e90:	2300      	movs	r3, #0
 8018e92:	8003      	strh	r3, [r0, #0]
 8018e94:	8043      	strh	r3, [r0, #2]
 8018e96:	8083      	strh	r3, [r0, #4]
 8018e98:	80c3      	strh	r3, [r0, #6]
 8018e9a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8018e9e:	4293      	cmp	r3, r2
 8018ea0:	b530      	push	{r4, r5, lr}
 8018ea2:	d912      	bls.n	8018eca <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018ea4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8018ea8:	3b01      	subs	r3, #1
 8018eaa:	6825      	ldr	r5, [r4, #0]
 8018eac:	b29b      	uxth	r3, r3
 8018eae:	6005      	str	r5, [r0, #0]
 8018eb0:	4293      	cmp	r3, r2
 8018eb2:	6865      	ldr	r5, [r4, #4]
 8018eb4:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8018eb8:	6045      	str	r5, [r0, #4]
 8018eba:	d906      	bls.n	8018eca <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018ebc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018ec0:	681d      	ldr	r5, [r3, #0]
 8018ec2:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8018ec6:	685d      	ldr	r5, [r3, #4]
 8018ec8:	6065      	str	r5, [r4, #4]
 8018eca:	bd30      	pop	{r4, r5, pc}

08018ecc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ece:	466b      	mov	r3, sp
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	e883 0006 	stmia.w	r3, {r1, r2}
 8018ed6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018eda:	2a07      	cmp	r2, #7
 8018edc:	d906      	bls.n	8018eec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018ede:	4b09      	ldr	r3, [pc, #36]	; (8018f04 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018ee0:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018ee4:	4a08      	ldr	r2, [pc, #32]	; (8018f08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018ee6:	4809      	ldr	r0, [pc, #36]	; (8018f0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018ee8:	f00b ff68 	bl	8024dbc <__assert_func>
 8018eec:	1c51      	adds	r1, r2, #1
 8018eee:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018ef2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018ef6:	cb03      	ldmia	r3!, {r0, r1}
 8018ef8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018efc:	6069      	str	r1, [r5, #4]
 8018efe:	b003      	add	sp, #12
 8018f00:	bd30      	pop	{r4, r5, pc}
 8018f02:	bf00      	nop
 8018f04:	080286e0 	.word	0x080286e0
 8018f08:	080287b8 	.word	0x080287b8
 8018f0c:	0802870f 	.word	0x0802870f

08018f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f14:	b089      	sub	sp, #36	; 0x24
 8018f16:	4606      	mov	r6, r0
 8018f18:	466c      	mov	r4, sp
 8018f1a:	4620      	mov	r0, r4
 8018f1c:	e884 0006 	stmia.w	r4, {r1, r2}
 8018f20:	f7fc fe30 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f24:	bbb0      	cbnz	r0, 8018f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018f26:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8018f2a:	b1fd      	cbz	r5, 8018f6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8018f2c:	3d01      	subs	r5, #1
 8018f2e:	af04      	add	r7, sp, #16
 8018f30:	f04f 090a 	mov.w	r9, #10
 8018f34:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8018f38:	ab02      	add	r3, sp, #8
 8018f3a:	fa1f f885 	uxth.w	r8, r5
 8018f3e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018f42:	6851      	ldr	r1, [r2, #4]
 8018f44:	c303      	stmia	r3!, {r0, r1}
 8018f46:	4621      	mov	r1, r4
 8018f48:	a802      	add	r0, sp, #8
 8018f4a:	f7ff ff21 	bl	8018d90 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018f4e:	bb08      	cbnz	r0, 8018f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018f50:	a902      	add	r1, sp, #8
 8018f52:	4620      	mov	r0, r4
 8018f54:	f7ff ff1c 	bl	8018d90 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018f58:	b1f8      	cbz	r0, 8018f9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8018f5a:	4642      	mov	r2, r8
 8018f5c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018f60:	a806      	add	r0, sp, #24
 8018f62:	f7ff ff95 	bl	8018e90 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f66:	f115 35ff 	adds.w	r5, r5, #4294967295
 8018f6a:	d2e3      	bcs.n	8018f34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8018f6c:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8018f70:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8018f74:	2b08      	cmp	r3, #8
 8018f76:	d108      	bne.n	8018f8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018f78:	4629      	mov	r1, r5
 8018f7a:	a806      	add	r0, sp, #24
 8018f7c:	2207      	movs	r2, #7
 8018f7e:	f7ff ff87 	bl	8018e90 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f82:	a906      	add	r1, sp, #24
 8018f84:	4620      	mov	r0, r4
 8018f86:	f7fd fff8 	bl	8016f7a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018f8a:	4628      	mov	r0, r5
 8018f8c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018f90:	f7ff ff9c 	bl	8018ecc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018f94:	b009      	add	sp, #36	; 0x24
 8018f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f9a:	4621      	mov	r1, r4
 8018f9c:	a802      	add	r0, sp, #8
 8018f9e:	f7ff fed5 	bl	8018d4c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018fa2:	b150      	cbz	r0, 8018fba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8018fa4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018fa8:	a806      	add	r0, sp, #24
 8018faa:	4642      	mov	r2, r8
 8018fac:	f7ff ff70 	bl	8018e90 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018fb0:	a902      	add	r1, sp, #8
 8018fb2:	4620      	mov	r0, r4
 8018fb4:	f7fd ffe1 	bl	8016f7a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018fb8:	e7d5      	b.n	8018f66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8018fbe:	e887 0003 	stmia.w	r7, {r0, r1}
 8018fc2:	a902      	add	r1, sp, #8
 8018fc4:	4638      	mov	r0, r7
 8018fc6:	f7fd ffd8 	bl	8016f7a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018fca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018fce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018fd2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018fd6:	fb13 f302 	smulbb	r3, r3, r2
 8018fda:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018fde:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018fe2:	fb11 f102 	smulbb	r1, r1, r2
 8018fe6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018fea:	fb09 f303 	mul.w	r3, r9, r3
 8018fee:	fb12 1100 	smlabb	r1, r2, r0, r1
 8018ff2:	220b      	movs	r2, #11
 8018ff4:	434a      	muls	r2, r1
 8018ff6:	4293      	cmp	r3, r2
 8018ff8:	dab5      	bge.n	8018f66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018ffa:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018ffe:	a806      	add	r0, sp, #24
 8019000:	4642      	mov	r2, r8
 8019002:	f7ff ff45 	bl	8018e90 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019006:	e897 0003 	ldmia.w	r7, {r0, r1}
 801900a:	e884 0003 	stmia.w	r4, {r0, r1}
 801900e:	e7aa      	b.n	8018f66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019010 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019010:	4b1d      	ldr	r3, [pc, #116]	; (8019088 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019012:	b530      	push	{r4, r5, lr}
 8019014:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019018:	b085      	sub	sp, #20
 801901a:	4b1c      	ldr	r3, [pc, #112]	; (801908c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801901c:	460c      	mov	r4, r1
 801901e:	2100      	movs	r1, #0
 8019020:	4605      	mov	r5, r0
 8019022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019026:	6820      	ldr	r0, [r4, #0]
 8019028:	9100      	str	r1, [sp, #0]
 801902a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801902e:	ab02      	add	r3, sp, #8
 8019030:	6861      	ldr	r1, [r4, #4]
 8019032:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019036:	c303      	stmia	r3!, {r0, r1}
 8019038:	4669      	mov	r1, sp
 801903a:	a802      	add	r0, sp, #8
 801903c:	f7fc fd5e 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019040:	ab02      	add	r3, sp, #8
 8019042:	cb03      	ldmia	r3!, {r0, r1}
 8019044:	4b12      	ldr	r3, [pc, #72]	; (8019090 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019046:	6020      	str	r0, [r4, #0]
 8019048:	6818      	ldr	r0, [r3, #0]
 801904a:	6061      	str	r1, [r4, #4]
 801904c:	b138      	cbz	r0, 801905e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801904e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8019052:	b133      	cbz	r3, 8019062 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019054:	6821      	ldr	r1, [r4, #0]
 8019056:	4628      	mov	r0, r5
 8019058:	6862      	ldr	r2, [r4, #4]
 801905a:	f7ff ff59 	bl	8018f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801905e:	b005      	add	sp, #20
 8019060:	bd30      	pop	{r4, r5, pc}
 8019062:	6803      	ldr	r3, [r0, #0]
 8019064:	4621      	mov	r1, r4
 8019066:	689b      	ldr	r3, [r3, #8]
 8019068:	4798      	blx	r3
 801906a:	4b0a      	ldr	r3, [pc, #40]	; (8019094 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801906c:	6818      	ldr	r0, [r3, #0]
 801906e:	b118      	cbz	r0, 8019078 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019070:	6803      	ldr	r3, [r0, #0]
 8019072:	4621      	mov	r1, r4
 8019074:	689b      	ldr	r3, [r3, #8]
 8019076:	4798      	blx	r3
 8019078:	4b07      	ldr	r3, [pc, #28]	; (8019098 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801907a:	4621      	mov	r1, r4
 801907c:	6818      	ldr	r0, [r3, #0]
 801907e:	6803      	ldr	r3, [r0, #0]
 8019080:	695b      	ldr	r3, [r3, #20]
 8019082:	4798      	blx	r3
 8019084:	e7eb      	b.n	801905e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019086:	bf00      	nop
 8019088:	2000bd60 	.word	0x2000bd60
 801908c:	2000bd62 	.word	0x2000bd62
 8019090:	2000bde8 	.word	0x2000bde8
 8019094:	2000bde4 	.word	0x2000bde4
 8019098:	2000bd6c 	.word	0x2000bd6c

0801909c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a0:	4604      	mov	r4, r0
 80190a2:	b09b      	sub	sp, #108	; 0x6c
 80190a4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80190a8:	b129      	cbz	r1, 80190b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80190aa:	2300      	movs	r3, #0
 80190ac:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80190b0:	b01b      	add	sp, #108	; 0x6c
 80190b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190b6:	4baf      	ldr	r3, [pc, #700]	; (8019374 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	b33b      	cbz	r3, 801910c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80190bc:	4dae      	ldr	r5, [pc, #696]	; (8019378 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80190be:	4628      	mov	r0, r5
 80190c0:	f7fc fd60 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 80190c4:	4606      	mov	r6, r0
 80190c6:	bb08      	cbnz	r0, 801910c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80190c8:	4628      	mov	r0, r5
 80190ca:	f7ff fce9 	bl	8018aa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80190ce:	6829      	ldr	r1, [r5, #0]
 80190d0:	686a      	ldr	r2, [r5, #4]
 80190d2:	4620      	mov	r0, r4
 80190d4:	f7ff ff1c 	bl	8018f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80190d8:	802e      	strh	r6, [r5, #0]
 80190da:	806e      	strh	r6, [r5, #2]
 80190dc:	80ae      	strh	r6, [r5, #4]
 80190de:	80ee      	strh	r6, [r5, #6]
 80190e0:	4fa6      	ldr	r7, [pc, #664]	; (801937c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80190e2:	a809      	add	r0, sp, #36	; 0x24
 80190e4:	f7ff fe87 	bl	8018df6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80190e8:	883d      	ldrh	r5, [r7, #0]
 80190ea:	462e      	mov	r6, r5
 80190ec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80190f0:	42b3      	cmp	r3, r6
 80190f2:	d910      	bls.n	8019116 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 80190f4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80190f8:	3601      	adds	r6, #1
 80190fa:	a809      	add	r0, sp, #36	; 0x24
 80190fc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019100:	b2b6      	uxth	r6, r6
 8019102:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019106:	f7ff fee1 	bl	8018ecc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801910a:	e7ef      	b.n	80190ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801910c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019110:	2b00      	cmp	r3, #0
 8019112:	d1e5      	bne.n	80190e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8019114:	e7cc      	b.n	80190b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019116:	462e      	mov	r6, r5
 8019118:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801911c:	42b3      	cmp	r3, r6
 801911e:	d90b      	bls.n	8019138 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019120:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019124:	3601      	adds	r6, #1
 8019126:	4620      	mov	r0, r4
 8019128:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801912c:	b2b6      	uxth	r6, r6
 801912e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019132:	f7ff feed 	bl	8018f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019136:	e7ef      	b.n	8019118 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8019138:	4e91      	ldr	r6, [pc, #580]	; (8019380 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801913a:	6833      	ldr	r3, [r6, #0]
 801913c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019140:	2b01      	cmp	r3, #1
 8019142:	f040 8092 	bne.w	801926a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8019146:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801914a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801914e:	f04f 0900 	mov.w	r9, #0
 8019152:	33aa      	adds	r3, #170	; 0xaa
 8019154:	42a8      	cmp	r0, r5
 8019156:	f103 0308 	add.w	r3, r3, #8
 801915a:	dd0a      	ble.n	8019172 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801915c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019160:	3501      	adds	r5, #1
 8019162:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019166:	440a      	add	r2, r1
 8019168:	b212      	sxth	r2, r2
 801916a:	4591      	cmp	r9, r2
 801916c:	bfb8      	it	lt
 801916e:	4691      	movlt	r9, r2
 8019170:	e7f0      	b.n	8019154 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8019172:	4b84      	ldr	r3, [pc, #528]	; (8019384 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8019174:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801938c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8019178:	881d      	ldrh	r5, [r3, #0]
 801917a:	2300      	movs	r3, #0
 801917c:	2d0f      	cmp	r5, #15
 801917e:	bf8c      	ite	hi
 8019180:	08ed      	lsrhi	r5, r5, #3
 8019182:	2501      	movls	r5, #1
 8019184:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019188:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801918c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019190:	6830      	ldr	r0, [r6, #0]
 8019192:	440b      	add	r3, r1
 8019194:	6802      	ldr	r2, [r0, #0]
 8019196:	b21b      	sxth	r3, r3
 8019198:	4599      	cmp	r9, r3
 801919a:	dd49      	ble.n	8019230 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801919c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80191a0:	4798      	blx	r3
 80191a2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80191a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80191aa:	4413      	add	r3, r2
 80191ac:	b21b      	sxth	r3, r3
 80191ae:	195a      	adds	r2, r3, r5
 80191b0:	4290      	cmp	r0, r2
 80191b2:	da07      	bge.n	80191c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80191b4:	4581      	cmp	r9, r0
 80191b6:	dd05      	ble.n	80191c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80191b8:	4298      	cmp	r0, r3
 80191ba:	da33      	bge.n	8019224 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80191bc:	2b00      	cmp	r3, #0
 80191be:	dd31      	ble.n	8019224 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80191c0:	4648      	mov	r0, r9
 80191c2:	e004      	b.n	80191ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 80191c4:	4298      	cmp	r0, r3
 80191c6:	dbfb      	blt.n	80191c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 80191c8:	4548      	cmp	r0, r9
 80191ca:	bfa8      	it	ge
 80191cc:	4648      	movge	r0, r9
 80191ce:	f9b8 2000 	ldrsh.w	r2, [r8]
 80191d2:	2100      	movs	r1, #0
 80191d4:	1ac0      	subs	r0, r0, r3
 80191d6:	f8b7 a000 	ldrh.w	sl, [r7]
 80191da:	f8ad 1014 	strh.w	r1, [sp, #20]
 80191de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191e2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80191e6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80191ea:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80191ee:	4553      	cmp	r3, sl
 80191f0:	d9ca      	bls.n	8019188 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80191f2:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80191f6:	ab07      	add	r3, sp, #28
 80191f8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80191fc:	6851      	ldr	r1, [r2, #4]
 80191fe:	c303      	stmia	r3!, {r0, r1}
 8019200:	a807      	add	r0, sp, #28
 8019202:	a905      	add	r1, sp, #20
 8019204:	f7fc fc7a 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019208:	a807      	add	r0, sp, #28
 801920a:	f7fc fcbb 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 801920e:	b920      	cbnz	r0, 801921a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8019210:	6823      	ldr	r3, [r4, #0]
 8019212:	a907      	add	r1, sp, #28
 8019214:	4620      	mov	r0, r4
 8019216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019218:	4798      	blx	r3
 801921a:	f10a 0a01 	add.w	sl, sl, #1
 801921e:	fa1f fa8a 	uxth.w	sl, sl
 8019222:	e7e2      	b.n	80191ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8019224:	6830      	ldr	r0, [r6, #0]
 8019226:	2101      	movs	r1, #1
 8019228:	6803      	ldr	r3, [r0, #0]
 801922a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801922c:	4798      	blx	r3
 801922e:	e7ab      	b.n	8019188 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019230:	69d3      	ldr	r3, [r2, #28]
 8019232:	4798      	blx	r3
 8019234:	4b54      	ldr	r3, [pc, #336]	; (8019388 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	2b00      	cmp	r3, #0
 801923a:	f43f af39 	beq.w	80190b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801923e:	2300      	movs	r3, #0
 8019240:	883d      	ldrh	r5, [r7, #0]
 8019242:	34ea      	adds	r4, #234	; 0xea
 8019244:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019248:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801924c:	42ab      	cmp	r3, r5
 801924e:	f67f af2f 	bls.w	80190b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019252:	ab1a      	add	r3, sp, #104	; 0x68
 8019254:	4620      	mov	r0, r4
 8019256:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801925a:	3501      	adds	r5, #1
 801925c:	3b44      	subs	r3, #68	; 0x44
 801925e:	b2ad      	uxth	r5, r5
 8019260:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019264:	f7ff fe32 	bl	8018ecc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019268:	e7ee      	b.n	8019248 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801926a:	2b02      	cmp	r3, #2
 801926c:	d16a      	bne.n	8019344 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801926e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8019390 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8019272:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019276:	42ab      	cmp	r3, r5
 8019278:	d9dc      	bls.n	8019234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801927a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801927e:	ab03      	add	r3, sp, #12
 8019280:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019284:	6851      	ldr	r1, [r2, #4]
 8019286:	c303      	stmia	r3!, {r0, r1}
 8019288:	f89a 3000 	ldrb.w	r3, [sl]
 801928c:	2b01      	cmp	r3, #1
 801928e:	d102      	bne.n	8019296 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8019290:	a803      	add	r0, sp, #12
 8019292:	f7ff fc5f 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019296:	a803      	add	r0, sp, #12
 8019298:	f7fc fc74 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 801929c:	2800      	cmp	r0, #0
 801929e:	d14a      	bne.n	8019336 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 80192a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80192a4:	f10d 0914 	add.w	r9, sp, #20
 80192a8:	f10d 081c 	add.w	r8, sp, #28
 80192ac:	f8ad 001a 	strh.w	r0, [sp, #26]
 80192b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80192b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80192b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80192bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80192c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80192c4:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80192c8:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 80192cc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80192d0:	44dc      	add	ip, fp
 80192d2:	6830      	ldr	r0, [r6, #0]
 80192d4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80192d8:	ebac 0c02 	sub.w	ip, ip, r2
 80192dc:	f8d0 e000 	ldr.w	lr, [r0]
 80192e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80192e4:	fa1f fc8c 	uxth.w	ip, ip
 80192e8:	f8cd c000 	str.w	ip, [sp]
 80192ec:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 80192f0:	47d8      	blx	fp
 80192f2:	f89a 3000 	ldrb.w	r3, [sl]
 80192f6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80192fa:	2b01      	cmp	r3, #1
 80192fc:	d11e      	bne.n	801933c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 80192fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019302:	e888 0003 	stmia.w	r8, {r0, r1}
 8019306:	4640      	mov	r0, r8
 8019308:	f7ff fbca 	bl	8018aa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801930c:	6823      	ldr	r3, [r4, #0]
 801930e:	4641      	mov	r1, r8
 8019310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019312:	4620      	mov	r0, r4
 8019314:	4798      	blx	r3
 8019316:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801931a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801931e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8019322:	4413      	add	r3, r2
 8019324:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019328:	440a      	add	r2, r1
 801932a:	b21b      	sxth	r3, r3
 801932c:	b212      	sxth	r2, r2
 801932e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019332:	4293      	cmp	r3, r2
 8019334:	dbc6      	blt.n	80192c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8019336:	3501      	adds	r5, #1
 8019338:	b2ad      	uxth	r5, r5
 801933a:	e79a      	b.n	8019272 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	4649      	mov	r1, r9
 8019340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019342:	e7e6      	b.n	8019312 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019344:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019348:	42ab      	cmp	r3, r5
 801934a:	f67f af73 	bls.w	8019234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801934e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019352:	ab07      	add	r3, sp, #28
 8019354:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019358:	6851      	ldr	r1, [r2, #4]
 801935a:	c303      	stmia	r3!, {r0, r1}
 801935c:	a807      	add	r0, sp, #28
 801935e:	f7fc fc11 	bl	8015b84 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019362:	b920      	cbnz	r0, 801936e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8019364:	6823      	ldr	r3, [r4, #0]
 8019366:	a907      	add	r1, sp, #28
 8019368:	4620      	mov	r0, r4
 801936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801936c:	4798      	blx	r3
 801936e:	3501      	adds	r5, #1
 8019370:	b2ad      	uxth	r5, r5
 8019372:	e7e7      	b.n	8019344 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8019374:	2000bde4 	.word	0x2000bde4
 8019378:	2000bdf0 	.word	0x2000bdf0
 801937c:	20000058 	.word	0x20000058
 8019380:	2000bd6c 	.word	0x2000bd6c
 8019384:	2000bd62 	.word	0x2000bd62
 8019388:	2000bd6a 	.word	0x2000bd6a
 801938c:	2000bd60 	.word	0x2000bd60
 8019390:	2000bd64 	.word	0x2000bd64

08019394 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019394:	4b03      	ldr	r3, [pc, #12]	; (80193a4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019396:	2200      	movs	r2, #0
 8019398:	801a      	strh	r2, [r3, #0]
 801939a:	805a      	strh	r2, [r3, #2]
 801939c:	809a      	strh	r2, [r3, #4]
 801939e:	80da      	strh	r2, [r3, #6]
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	2000bdf0 	.word	0x2000bdf0

080193a8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 80193a8:	2000      	movs	r0, #0
 80193aa:	4770      	bx	lr

080193ac <_ZNK8touchgfx4Font12getGSUBTableEv>:
 80193ac:	2000      	movs	r0, #0
 80193ae:	4770      	bx	lr

080193b0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80193b0:	b508      	push	{r3, lr}
 80193b2:	6803      	ldr	r3, [r0, #0]
 80193b4:	68db      	ldr	r3, [r3, #12]
 80193b6:	4798      	blx	r3
 80193b8:	b128      	cbz	r0, 80193c6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80193ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80193be:	7a80      	ldrb	r0, [r0, #10]
 80193c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80193c4:	4318      	orrs	r0, r3
 80193c6:	bd08      	pop	{r3, pc}

080193c8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 80193c8:	b40e      	push	{r1, r2, r3}
 80193ca:	b533      	push	{r0, r1, r4, r5, lr}
 80193cc:	ab05      	add	r3, sp, #20
 80193ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80193d2:	9301      	str	r3, [sp, #4]
 80193d4:	4b0a      	ldr	r3, [pc, #40]	; (8019400 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 80193d6:	685c      	ldr	r4, [r3, #4]
 80193d8:	1061      	asrs	r1, r4, #1
 80193da:	07e4      	lsls	r4, r4, #31
 80193dc:	eb00 0501 	add.w	r5, r0, r1
 80193e0:	bf46      	itte	mi
 80193e2:	681b      	ldrmi	r3, [r3, #0]
 80193e4:	5841      	ldrmi	r1, [r0, r1]
 80193e6:	681c      	ldrpl	r4, [r3, #0]
 80193e8:	4628      	mov	r0, r5
 80193ea:	bf48      	it	mi
 80193ec:	58cc      	ldrmi	r4, [r1, r3]
 80193ee:	2100      	movs	r1, #0
 80193f0:	9b01      	ldr	r3, [sp, #4]
 80193f2:	47a0      	blx	r4
 80193f4:	b002      	add	sp, #8
 80193f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193fa:	b003      	add	sp, #12
 80193fc:	4770      	bx	lr
 80193fe:	bf00      	nop
 8019400:	20000028 	.word	0x20000028

08019404 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8019404:	b40c      	push	{r2, r3}
 8019406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019408:	ab06      	add	r3, sp, #24
 801940a:	f853 2b04 	ldr.w	r2, [r3], #4
 801940e:	9301      	str	r3, [sp, #4]
 8019410:	4b09      	ldr	r3, [pc, #36]	; (8019438 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8019412:	685d      	ldr	r5, [r3, #4]
 8019414:	106c      	asrs	r4, r5, #1
 8019416:	07ed      	lsls	r5, r5, #31
 8019418:	eb00 0604 	add.w	r6, r0, r4
 801941c:	bf45      	ittet	mi
 801941e:	681b      	ldrmi	r3, [r3, #0]
 8019420:	5900      	ldrmi	r0, [r0, r4]
 8019422:	681c      	ldrpl	r4, [r3, #0]
 8019424:	58c4      	ldrmi	r4, [r0, r3]
 8019426:	4630      	mov	r0, r6
 8019428:	9b01      	ldr	r3, [sp, #4]
 801942a:	47a0      	blx	r4
 801942c:	b002      	add	sp, #8
 801942e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019432:	b002      	add	sp, #8
 8019434:	4770      	bx	lr
 8019436:	bf00      	nop
 8019438:	20000028 	.word	0x20000028

0801943c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801943c:	b40e      	push	{r1, r2, r3}
 801943e:	b530      	push	{r4, r5, lr}
 8019440:	b098      	sub	sp, #96	; 0x60
 8019442:	4604      	mov	r4, r0
 8019444:	ab1b      	add	r3, sp, #108	; 0x6c
 8019446:	a802      	add	r0, sp, #8
 8019448:	f853 5b04 	ldr.w	r5, [r3], #4
 801944c:	9301      	str	r3, [sp, #4]
 801944e:	f001 f837 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 8019452:	6823      	ldr	r3, [r4, #0]
 8019454:	4620      	mov	r0, r4
 8019456:	2401      	movs	r4, #1
 8019458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801945a:	4798      	blx	r3
 801945c:	9a01      	ldr	r2, [sp, #4]
 801945e:	4603      	mov	r3, r0
 8019460:	4629      	mov	r1, r5
 8019462:	a802      	add	r0, sp, #8
 8019464:	f001 f849 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019468:	a802      	add	r0, sp, #8
 801946a:	f001 f87f 	bl	801a56c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801946e:	b2a3      	uxth	r3, r4
 8019470:	b138      	cbz	r0, 8019482 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8019472:	280a      	cmp	r0, #10
 8019474:	a802      	add	r0, sp, #8
 8019476:	bf04      	itt	eq
 8019478:	3301      	addeq	r3, #1
 801947a:	b21c      	sxtheq	r4, r3
 801947c:	f001 f876 	bl	801a56c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019480:	e7f5      	b.n	801946e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8019482:	4618      	mov	r0, r3
 8019484:	b018      	add	sp, #96	; 0x60
 8019486:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801948a:	b003      	add	sp, #12
 801948c:	4770      	bx	lr
	...

08019490 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019490:	b40e      	push	{r1, r2, r3}
 8019492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019494:	b098      	sub	sp, #96	; 0x60
 8019496:	4605      	mov	r5, r0
 8019498:	4f25      	ldr	r7, [pc, #148]	; (8019530 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801949a:	ab1d      	add	r3, sp, #116	; 0x74
 801949c:	a802      	add	r0, sp, #8
 801949e:	ae18      	add	r6, sp, #96	; 0x60
 80194a0:	f853 4b04 	ldr.w	r4, [r3], #4
 80194a4:	9300      	str	r3, [sp, #0]
 80194a6:	f001 f80b 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 80194aa:	682b      	ldr	r3, [r5, #0]
 80194ac:	4628      	mov	r0, r5
 80194ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194b0:	4798      	blx	r3
 80194b2:	4621      	mov	r1, r4
 80194b4:	2400      	movs	r4, #0
 80194b6:	4603      	mov	r3, r0
 80194b8:	9a00      	ldr	r2, [sp, #0]
 80194ba:	a802      	add	r0, sp, #8
 80194bc:	f001 f81d 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80194c0:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80194c4:	462a      	mov	r2, r5
 80194c6:	4633      	mov	r3, r6
 80194c8:	4621      	mov	r1, r4
 80194ca:	a802      	add	r0, sp, #8
 80194cc:	f001 f97a 	bl	801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80194d0:	b340      	cbz	r0, 8019524 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 80194d2:	280a      	cmp	r0, #10
 80194d4:	d01f      	beq.n	8019516 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80194d6:	9901      	ldr	r1, [sp, #4]
 80194d8:	b1e9      	cbz	r1, 8019516 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80194da:	7b4b      	ldrb	r3, [r1, #13]
 80194dc:	f891 c008 	ldrb.w	ip, [r1, #8]
 80194e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80194e4:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 80194e8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80194ec:	79c9      	ldrb	r1, [r1, #7]
 80194ee:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 80194f2:	bf18      	it	ne
 80194f4:	4638      	movne	r0, r7
 80194f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80194fa:	bf08      	it	eq
 80194fc:	2000      	moveq	r0, #0
 80194fe:	88aa      	ldrh	r2, [r5, #4]
 8019500:	ea41 010e 	orr.w	r1, r1, lr
 8019504:	ea43 030c 	orr.w	r3, r3, ip
 8019508:	440a      	add	r2, r1
 801950a:	4303      	orrs	r3, r0
 801950c:	1ad3      	subs	r3, r2, r3
 801950e:	b29b      	uxth	r3, r3
 8019510:	42a3      	cmp	r3, r4
 8019512:	bfc8      	it	gt
 8019514:	b21c      	sxthgt	r4, r3
 8019516:	4633      	mov	r3, r6
 8019518:	462a      	mov	r2, r5
 801951a:	2100      	movs	r1, #0
 801951c:	a802      	add	r0, sp, #8
 801951e:	f001 f951 	bl	801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019522:	e7d5      	b.n	80194d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8019524:	b2a0      	uxth	r0, r4
 8019526:	b018      	add	sp, #96	; 0x60
 8019528:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801952c:	b003      	add	sp, #12
 801952e:	4770      	bx	lr
 8019530:	fffffe00 	.word	0xfffffe00

08019534 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019534:	b40e      	push	{r1, r2, r3}
 8019536:	b570      	push	{r4, r5, r6, lr}
 8019538:	b099      	sub	sp, #100	; 0x64
 801953a:	4604      	mov	r4, r0
 801953c:	26ff      	movs	r6, #255	; 0xff
 801953e:	ab1d      	add	r3, sp, #116	; 0x74
 8019540:	a802      	add	r0, sp, #8
 8019542:	f853 5b04 	ldr.w	r5, [r3], #4
 8019546:	9300      	str	r3, [sp, #0]
 8019548:	f000 ffba 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 801954c:	6823      	ldr	r3, [r4, #0]
 801954e:	4620      	mov	r0, r4
 8019550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019552:	4798      	blx	r3
 8019554:	4629      	mov	r1, r5
 8019556:	4603      	mov	r3, r0
 8019558:	9a00      	ldr	r2, [sp, #0]
 801955a:	a802      	add	r0, sp, #8
 801955c:	ad18      	add	r5, sp, #96	; 0x60
 801955e:	f000 ffcc 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019562:	2100      	movs	r1, #0
 8019564:	4622      	mov	r2, r4
 8019566:	a802      	add	r0, sp, #8
 8019568:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801956c:	462b      	mov	r3, r5
 801956e:	f001 f929 	bl	801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019572:	b190      	cbz	r0, 801959a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8019574:	280a      	cmp	r0, #10
 8019576:	d009      	beq.n	801958c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019578:	9a01      	ldr	r2, [sp, #4]
 801957a:	b13a      	cbz	r2, 801958c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801957c:	7923      	ldrb	r3, [r4, #4]
 801957e:	7a12      	ldrb	r2, [r2, #8]
 8019580:	1a9b      	subs	r3, r3, r2
 8019582:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8019586:	429e      	cmp	r6, r3
 8019588:	bf28      	it	cs
 801958a:	461e      	movcs	r6, r3
 801958c:	462b      	mov	r3, r5
 801958e:	4622      	mov	r2, r4
 8019590:	2100      	movs	r1, #0
 8019592:	a802      	add	r0, sp, #8
 8019594:	f001 f916 	bl	801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019598:	e7eb      	b.n	8019572 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801959a:	4630      	mov	r0, r6
 801959c:	b019      	add	sp, #100	; 0x64
 801959e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195a2:	b003      	add	sp, #12
 80195a4:	4770      	bx	lr

080195a6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80195a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195aa:	b099      	sub	sp, #100	; 0x64
 80195ac:	4606      	mov	r6, r0
 80195ae:	4614      	mov	r4, r2
 80195b0:	4688      	mov	r8, r1
 80195b2:	a802      	add	r0, sp, #8
 80195b4:	461d      	mov	r5, r3
 80195b6:	f04f 0b00 	mov.w	fp, #0
 80195ba:	f000 ff81 	bl	801a4c0 <_ZN8touchgfx12TextProviderC1Ev>
 80195be:	6833      	ldr	r3, [r6, #0]
 80195c0:	4630      	mov	r0, r6
 80195c2:	465f      	mov	r7, fp
 80195c4:	46da      	mov	sl, fp
 80195c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195c8:	46d9      	mov	r9, fp
 80195ca:	4798      	blx	r3
 80195cc:	462a      	mov	r2, r5
 80195ce:	4603      	mov	r3, r0
 80195d0:	4621      	mov	r1, r4
 80195d2:	a802      	add	r0, sp, #8
 80195d4:	f000 ff91 	bl	801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80195d8:	ab01      	add	r3, sp, #4
 80195da:	4632      	mov	r2, r6
 80195dc:	4641      	mov	r1, r8
 80195de:	a802      	add	r0, sp, #8
 80195e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80195e4:	f001 f8ee 	bl	801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80195e8:	4605      	mov	r5, r0
 80195ea:	b108      	cbz	r0, 80195f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 80195ec:	280a      	cmp	r0, #10
 80195ee:	d10b      	bne.n	8019608 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 80195f0:	4557      	cmp	r7, sl
 80195f2:	bf38      	it	cc
 80195f4:	4657      	movcc	r7, sl
 80195f6:	f04f 0a00 	mov.w	sl, #0
 80195fa:	b91d      	cbnz	r5, 8019604 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 80195fc:	4638      	mov	r0, r7
 80195fe:	b019      	add	sp, #100	; 0x64
 8019600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019604:	46ab      	mov	fp, r5
 8019606:	e7e7      	b.n	80195d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8019608:	9a01      	ldr	r2, [sp, #4]
 801960a:	2a00      	cmp	r2, #0
 801960c:	d0fa      	beq.n	8019604 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801960e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8019612:	4659      	mov	r1, fp
 8019614:	6833      	ldr	r3, [r6, #0]
 8019616:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801961a:	7a94      	ldrb	r4, [r2, #10]
 801961c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801961e:	4304      	orrs	r4, r0
 8019620:	4630      	mov	r0, r6
 8019622:	8895      	ldrh	r5, [r2, #4]
 8019624:	4798      	blx	r3
 8019626:	4420      	add	r0, r4
 8019628:	4450      	add	r0, sl
 801962a:	fa1f fa80 	uxth.w	sl, r0
 801962e:	e7e4      	b.n	80195fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08019630 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019630:	b513      	push	{r0, r1, r4, lr}
 8019632:	1d01      	adds	r1, r0, #4
 8019634:	4603      	mov	r3, r0
 8019636:	466a      	mov	r2, sp
 8019638:	c903      	ldmia	r1, {r0, r1}
 801963a:	e882 0003 	stmia.w	r2, {r0, r1}
 801963e:	2100      	movs	r1, #0
 8019640:	4618      	mov	r0, r3
 8019642:	9100      	str	r1, [sp, #0]
 8019644:	6819      	ldr	r1, [r3, #0]
 8019646:	690c      	ldr	r4, [r1, #16]
 8019648:	4611      	mov	r1, r2
 801964a:	47a0      	blx	r4
 801964c:	b002      	add	sp, #8
 801964e:	bd10      	pop	{r4, pc}

08019650 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019650:	b538      	push	{r3, r4, r5, lr}
 8019652:	680b      	ldr	r3, [r1, #0]
 8019654:	460c      	mov	r4, r1
 8019656:	4605      	mov	r5, r0
 8019658:	68db      	ldr	r3, [r3, #12]
 801965a:	4798      	blx	r3
 801965c:	6823      	ldr	r3, [r4, #0]
 801965e:	4620      	mov	r0, r4
 8019660:	4629      	mov	r1, r5
 8019662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019664:	4798      	blx	r3
 8019666:	4628      	mov	r0, r5
 8019668:	bd38      	pop	{r3, r4, r5, pc}

0801966a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801966a:	b410      	push	{r4}
 801966c:	880a      	ldrh	r2, [r1, #0]
 801966e:	8884      	ldrh	r4, [r0, #4]
 8019670:	4422      	add	r2, r4
 8019672:	800a      	strh	r2, [r1, #0]
 8019674:	884a      	ldrh	r2, [r1, #2]
 8019676:	88c4      	ldrh	r4, [r0, #6]
 8019678:	4422      	add	r2, r4
 801967a:	804a      	strh	r2, [r1, #2]
 801967c:	6940      	ldr	r0, [r0, #20]
 801967e:	b120      	cbz	r0, 801968a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019680:	6803      	ldr	r3, [r0, #0]
 8019682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019688:	4718      	bx	r3
 801968a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801968e:	4770      	bx	lr

08019690 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019692:	460b      	mov	r3, r1
 8019694:	b085      	sub	sp, #20
 8019696:	4604      	mov	r4, r0
 8019698:	b901      	cbnz	r1, 801969c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801969a:	b1fa      	cbz	r2, 80196dc <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801969c:	1d27      	adds	r7, r4, #4
 801969e:	466e      	mov	r6, sp
 80196a0:	ad02      	add	r5, sp, #8
 80196a2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80196a6:	e886 0003 	stmia.w	r6, {r0, r1}
 80196aa:	88e1      	ldrh	r1, [r4, #6]
 80196ac:	4620      	mov	r0, r4
 80196ae:	440a      	add	r2, r1
 80196b0:	88a1      	ldrh	r1, [r4, #4]
 80196b2:	4419      	add	r1, r3
 80196b4:	6823      	ldr	r3, [r4, #0]
 80196b6:	b212      	sxth	r2, r2
 80196b8:	b209      	sxth	r1, r1
 80196ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196bc:	4798      	blx	r3
 80196be:	e897 0003 	ldmia.w	r7, {r0, r1}
 80196c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80196c6:	6960      	ldr	r0, [r4, #20]
 80196c8:	b150      	cbz	r0, 80196e0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 80196ca:	6803      	ldr	r3, [r0, #0]
 80196cc:	4631      	mov	r1, r6
 80196ce:	691b      	ldr	r3, [r3, #16]
 80196d0:	4798      	blx	r3
 80196d2:	6960      	ldr	r0, [r4, #20]
 80196d4:	6803      	ldr	r3, [r0, #0]
 80196d6:	691b      	ldr	r3, [r3, #16]
 80196d8:	4629      	mov	r1, r5
 80196da:	4798      	blx	r3
 80196dc:	b005      	add	sp, #20
 80196de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196e0:	f7ff fb78 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 80196e4:	6803      	ldr	r3, [r0, #0]
 80196e6:	4631      	mov	r1, r6
 80196e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196ea:	4798      	blx	r3
 80196ec:	f7ff fb72 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 80196f0:	6803      	ldr	r3, [r0, #0]
 80196f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196f4:	e7f0      	b.n	80196d8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

080196f6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80196f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196f8:	8882      	ldrh	r2, [r0, #4]
 80196fa:	4605      	mov	r5, r0
 80196fc:	880b      	ldrh	r3, [r1, #0]
 80196fe:	460c      	mov	r4, r1
 8019700:	4413      	add	r3, r2
 8019702:	800b      	strh	r3, [r1, #0]
 8019704:	884b      	ldrh	r3, [r1, #2]
 8019706:	88c2      	ldrh	r2, [r0, #6]
 8019708:	4413      	add	r3, r2
 801970a:	4602      	mov	r2, r0
 801970c:	804b      	strh	r3, [r1, #2]
 801970e:	466b      	mov	r3, sp
 8019710:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019714:	6851      	ldr	r1, [r2, #4]
 8019716:	c303      	stmia	r3!, {r0, r1}
 8019718:	4621      	mov	r1, r4
 801971a:	4668      	mov	r0, sp
 801971c:	f7fc f9ee 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019720:	466b      	mov	r3, sp
 8019722:	cb03      	ldmia	r3!, {r0, r1}
 8019724:	6020      	str	r0, [r4, #0]
 8019726:	6061      	str	r1, [r4, #4]
 8019728:	6968      	ldr	r0, [r5, #20]
 801972a:	b128      	cbz	r0, 8019738 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801972c:	6803      	ldr	r3, [r0, #0]
 801972e:	691b      	ldr	r3, [r3, #16]
 8019730:	4621      	mov	r1, r4
 8019732:	4798      	blx	r3
 8019734:	b003      	add	sp, #12
 8019736:	bd30      	pop	{r4, r5, pc}
 8019738:	f7ff fb4c 	bl	8018dd4 <_ZN8touchgfx11Application11getInstanceEv>
 801973c:	6803      	ldr	r3, [r0, #0]
 801973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019740:	e7f6      	b.n	8019730 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019742 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019742:	b570      	push	{r4, r5, r6, lr}
 8019744:	8882      	ldrh	r2, [r0, #4]
 8019746:	460c      	mov	r4, r1
 8019748:	880b      	ldrh	r3, [r1, #0]
 801974a:	4605      	mov	r5, r0
 801974c:	4413      	add	r3, r2
 801974e:	800b      	strh	r3, [r1, #0]
 8019750:	884b      	ldrh	r3, [r1, #2]
 8019752:	88c2      	ldrh	r2, [r0, #6]
 8019754:	4413      	add	r3, r2
 8019756:	804b      	strh	r3, [r1, #2]
 8019758:	1d01      	adds	r1, r0, #4
 801975a:	4620      	mov	r0, r4
 801975c:	f7fc f9ce 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019760:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019764:	b153      	cbz	r3, 801977c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019766:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801976a:	b13b      	cbz	r3, 801977c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801976c:	6968      	ldr	r0, [r5, #20]
 801976e:	b128      	cbz	r0, 801977c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019770:	6803      	ldr	r3, [r0, #0]
 8019772:	4621      	mov	r1, r4
 8019774:	6a1b      	ldr	r3, [r3, #32]
 8019776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801977a:	4718      	bx	r3
 801977c:	bd70      	pop	{r4, r5, r6, pc}

0801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801977e:	b510      	push	{r4, lr}
 8019780:	2300      	movs	r3, #0
 8019782:	4604      	mov	r4, r0
 8019784:	4608      	mov	r0, r1
 8019786:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801978a:	8023      	strh	r3, [r4, #0]
 801978c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019790:	8063      	strh	r3, [r4, #2]
 8019792:	6803      	ldr	r3, [r0, #0]
 8019794:	80a1      	strh	r1, [r4, #4]
 8019796:	4621      	mov	r1, r4
 8019798:	80e2      	strh	r2, [r4, #6]
 801979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801979c:	4798      	blx	r3
 801979e:	4620      	mov	r0, r4
 80197a0:	bd10      	pop	{r4, pc}
	...

080197a4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80197a4:	b530      	push	{r4, r5, lr}
 80197a6:	8083      	strh	r3, [r0, #4]
 80197a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80197ac:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80197b0:	7183      	strb	r3, [r0, #6]
 80197b2:	79c3      	ldrb	r3, [r0, #7]
 80197b4:	6101      	str	r1, [r0, #16]
 80197b6:	f365 0306 	bfi	r3, r5, #0, #7
 80197ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80197be:	8282      	strh	r2, [r0, #20]
 80197c0:	f365 13c7 	bfi	r3, r5, #7, #1
 80197c4:	71c3      	strb	r3, [r0, #7]
 80197c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80197ca:	7203      	strb	r3, [r0, #8]
 80197cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80197d0:	7243      	strb	r3, [r0, #9]
 80197d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80197d6:	8143      	strh	r3, [r0, #10]
 80197d8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80197dc:	8183      	strh	r3, [r0, #12]
 80197de:	4b01      	ldr	r3, [pc, #4]	; (80197e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80197e0:	6003      	str	r3, [r0, #0]
 80197e2:	bd30      	pop	{r4, r5, pc}
 80197e4:	080288e0 	.word	0x080288e0

080197e8 <_ZNK8touchgfx9ConstFont4findEt>:
 80197e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ea:	8a84      	ldrh	r4, [r0, #20]
 80197ec:	2500      	movs	r5, #0
 80197ee:	260e      	movs	r6, #14
 80197f0:	3c01      	subs	r4, #1
 80197f2:	42a5      	cmp	r5, r4
 80197f4:	dc0c      	bgt.n	8019810 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 80197f6:	192a      	adds	r2, r5, r4
 80197f8:	6903      	ldr	r3, [r0, #16]
 80197fa:	1052      	asrs	r2, r2, #1
 80197fc:	fb06 3302 	mla	r3, r6, r2, r3
 8019800:	889f      	ldrh	r7, [r3, #4]
 8019802:	428f      	cmp	r7, r1
 8019804:	d901      	bls.n	801980a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019806:	1e54      	subs	r4, r2, #1
 8019808:	e7f3      	b.n	80197f2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801980a:	d202      	bcs.n	8019812 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801980c:	1c55      	adds	r5, r2, #1
 801980e:	e7f0      	b.n	80197f2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019810:	2300      	movs	r3, #0
 8019812:	4618      	mov	r0, r3
 8019814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019816 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019818:	4605      	mov	r5, r0
 801981a:	4617      	mov	r7, r2
 801981c:	461e      	mov	r6, r3
 801981e:	f7ff ffe3 	bl	80197e8 <_ZNK8touchgfx9ConstFont4findEt>
 8019822:	b9e0      	cbnz	r0, 801985e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019824:	b911      	cbnz	r1, 801982c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019826:	2400      	movs	r4, #0
 8019828:	4620      	mov	r0, r4
 801982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801982c:	290a      	cmp	r1, #10
 801982e:	d0fa      	beq.n	8019826 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019830:	682b      	ldr	r3, [r5, #0]
 8019832:	4628      	mov	r0, r5
 8019834:	691b      	ldr	r3, [r3, #16]
 8019836:	4798      	blx	r3
 8019838:	4601      	mov	r1, r0
 801983a:	4628      	mov	r0, r5
 801983c:	f7ff ffd4 	bl	80197e8 <_ZNK8touchgfx9ConstFont4findEt>
 8019840:	4604      	mov	r4, r0
 8019842:	2800      	cmp	r0, #0
 8019844:	d0ef      	beq.n	8019826 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019846:	682b      	ldr	r3, [r5, #0]
 8019848:	4621      	mov	r1, r4
 801984a:	4628      	mov	r0, r5
 801984c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801984e:	4798      	blx	r3
 8019850:	6038      	str	r0, [r7, #0]
 8019852:	682b      	ldr	r3, [r5, #0]
 8019854:	4628      	mov	r0, r5
 8019856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019858:	4798      	blx	r3
 801985a:	7030      	strb	r0, [r6, #0]
 801985c:	e7e4      	b.n	8019828 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801985e:	4604      	mov	r4, r0
 8019860:	e7f1      	b.n	8019846 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019862 <_ZN8touchgfx6memsetEPvhm>:
 8019862:	4402      	add	r2, r0
 8019864:	4290      	cmp	r0, r2
 8019866:	d002      	beq.n	801986e <_ZN8touchgfx6memsetEPvhm+0xc>
 8019868:	f800 1b01 	strb.w	r1, [r0], #1
 801986c:	e7fa      	b.n	8019864 <_ZN8touchgfx6memsetEPvhm+0x2>
 801986e:	4770      	bx	lr

08019870 <_ZN8touchgfx3clzEl>:
 8019870:	b1e8      	cbz	r0, 80198ae <_ZN8touchgfx3clzEl+0x3e>
 8019872:	2800      	cmp	r0, #0
 8019874:	bfb8      	it	lt
 8019876:	4240      	neglt	r0, r0
 8019878:	0c03      	lsrs	r3, r0, #16
 801987a:	041b      	lsls	r3, r3, #16
 801987c:	b9ab      	cbnz	r3, 80198aa <_ZN8touchgfx3clzEl+0x3a>
 801987e:	0400      	lsls	r0, r0, #16
 8019880:	2310      	movs	r3, #16
 8019882:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019886:	bf04      	itt	eq
 8019888:	0200      	lsleq	r0, r0, #8
 801988a:	3308      	addeq	r3, #8
 801988c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019890:	bf04      	itt	eq
 8019892:	0100      	lsleq	r0, r0, #4
 8019894:	3304      	addeq	r3, #4
 8019896:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801989a:	bf04      	itt	eq
 801989c:	0080      	lsleq	r0, r0, #2
 801989e:	3302      	addeq	r3, #2
 80198a0:	2800      	cmp	r0, #0
 80198a2:	bfa8      	it	ge
 80198a4:	3301      	addge	r3, #1
 80198a6:	1e58      	subs	r0, r3, #1
 80198a8:	4770      	bx	lr
 80198aa:	2300      	movs	r3, #0
 80198ac:	e7e9      	b.n	8019882 <_ZN8touchgfx3clzEl+0x12>
 80198ae:	201f      	movs	r0, #31
 80198b0:	4770      	bx	lr

080198b2 <_ZN8touchgfx6muldivElllRl>:
 80198b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198b6:	4604      	mov	r4, r0
 80198b8:	4698      	mov	r8, r3
 80198ba:	2601      	movs	r6, #1
 80198bc:	f7ff ffd8 	bl	8019870 <_ZN8touchgfx3clzEl>
 80198c0:	2c00      	cmp	r4, #0
 80198c2:	fa04 f500 	lsl.w	r5, r4, r0
 80198c6:	fa06 f600 	lsl.w	r6, r6, r0
 80198ca:	bfba      	itte	lt
 80198cc:	f04f 37ff 	movlt.w	r7, #4294967295
 80198d0:	4264      	neglt	r4, r4
 80198d2:	2701      	movge	r7, #1
 80198d4:	2900      	cmp	r1, #0
 80198d6:	f106 36ff 	add.w	r6, r6, #4294967295
 80198da:	bfbc      	itt	lt
 80198dc:	4249      	neglt	r1, r1
 80198de:	427f      	neglt	r7, r7
 80198e0:	2a00      	cmp	r2, #0
 80198e2:	fa41 fc00 	asr.w	ip, r1, r0
 80198e6:	ea01 0106 	and.w	r1, r1, r6
 80198ea:	bfb8      	it	lt
 80198ec:	427f      	neglt	r7, r7
 80198ee:	fb04 f401 	mul.w	r4, r4, r1
 80198f2:	fb95 f3f2 	sdiv	r3, r5, r2
 80198f6:	fb02 5513 	mls	r5, r2, r3, r5
 80198fa:	bfb8      	it	lt
 80198fc:	4252      	neglt	r2, r2
 80198fe:	fb94 f0f2 	sdiv	r0, r4, r2
 8019902:	fb02 4410 	mls	r4, r2, r0, r4
 8019906:	fb0c 4405 	mla	r4, ip, r5, r4
 801990a:	fb94 f1f2 	sdiv	r1, r4, r2
 801990e:	4408      	add	r0, r1
 8019910:	fb02 4211 	mls	r2, r2, r1, r4
 8019914:	fb0c 0003 	mla	r0, ip, r3, r0
 8019918:	f8c8 2000 	str.w	r2, [r8]
 801991c:	4378      	muls	r0, r7
 801991e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019922 <_ZN8touchgfx10ClickEventD1Ev>:
 8019922:	4770      	bx	lr

08019924 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019924:	2000      	movs	r0, #0
 8019926:	4770      	bx	lr

08019928 <_ZN8touchgfx9DragEventD1Ev>:
 8019928:	4770      	bx	lr

0801992a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801992a:	2001      	movs	r0, #1
 801992c:	4770      	bx	lr

0801992e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801992e:	2002      	movs	r0, #2
 8019930:	4770      	bx	lr

08019932 <_ZN8touchgfx12GestureEventD1Ev>:
 8019932:	4770      	bx	lr

08019934 <_ZN8touchgfx10ClickEventD0Ev>:
 8019934:	b510      	push	{r4, lr}
 8019936:	4604      	mov	r4, r0
 8019938:	210c      	movs	r1, #12
 801993a:	f00b fa14 	bl	8024d66 <_ZdlPvj>
 801993e:	4620      	mov	r0, r4
 8019940:	bd10      	pop	{r4, pc}

08019942 <_ZN8touchgfx9DragEventD0Ev>:
 8019942:	b510      	push	{r4, lr}
 8019944:	4604      	mov	r4, r0
 8019946:	2110      	movs	r1, #16
 8019948:	f00b fa0d 	bl	8024d66 <_ZdlPvj>
 801994c:	4620      	mov	r0, r4
 801994e:	bd10      	pop	{r4, pc}

08019950 <_ZN8touchgfx12GestureEventD0Ev>:
 8019950:	b510      	push	{r4, lr}
 8019952:	4604      	mov	r4, r0
 8019954:	210c      	movs	r1, #12
 8019956:	f00b fa06 	bl	8024d66 <_ZdlPvj>
 801995a:	4620      	mov	r0, r4
 801995c:	bd10      	pop	{r4, pc}
	...

08019960 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019960:	b530      	push	{r4, r5, lr}
 8019962:	460d      	mov	r5, r1
 8019964:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019966:	b087      	sub	sp, #28
 8019968:	4604      	mov	r4, r0
 801996a:	b301      	cbz	r1, 80199ae <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801996c:	a801      	add	r0, sp, #4
 801996e:	f7ff ff06 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019972:	892a      	ldrh	r2, [r5, #8]
 8019974:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019978:	7928      	ldrb	r0, [r5, #4]
 801997a:	1ad2      	subs	r2, r2, r3
 801997c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801997e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019982:	441a      	add	r2, r3
 8019984:	896b      	ldrh	r3, [r5, #10]
 8019986:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801998a:	f88d 0010 	strb.w	r0, [sp, #16]
 801998e:	1b5b      	subs	r3, r3, r5
 8019990:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019992:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019994:	442b      	add	r3, r5
 8019996:	4d07      	ldr	r5, [pc, #28]	; (80199b4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019998:	f8ad 1012 	strh.w	r1, [sp, #18]
 801999c:	a903      	add	r1, sp, #12
 801999e:	9503      	str	r5, [sp, #12]
 80199a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80199a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80199a8:	6803      	ldr	r3, [r0, #0]
 80199aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80199ac:	4798      	blx	r3
 80199ae:	b007      	add	sp, #28
 80199b0:	bd30      	pop	{r4, r5, pc}
 80199b2:	bf00      	nop
 80199b4:	0802895c 	.word	0x0802895c

080199b8 <_ZNK8touchgfx4Rect9intersectEss>:
 80199b8:	b510      	push	{r4, lr}
 80199ba:	f9b0 3000 	ldrsh.w	r3, [r0]
 80199be:	428b      	cmp	r3, r1
 80199c0:	dc10      	bgt.n	80199e4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80199c2:	8884      	ldrh	r4, [r0, #4]
 80199c4:	4423      	add	r3, r4
 80199c6:	b21b      	sxth	r3, r3
 80199c8:	4299      	cmp	r1, r3
 80199ca:	da0b      	bge.n	80199e4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80199cc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80199d0:	4293      	cmp	r3, r2
 80199d2:	dc07      	bgt.n	80199e4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80199d4:	88c0      	ldrh	r0, [r0, #6]
 80199d6:	4418      	add	r0, r3
 80199d8:	b200      	sxth	r0, r0
 80199da:	4282      	cmp	r2, r0
 80199dc:	bfac      	ite	ge
 80199de:	2000      	movge	r0, #0
 80199e0:	2001      	movlt	r0, #1
 80199e2:	bd10      	pop	{r4, pc}
 80199e4:	2000      	movs	r0, #0
 80199e6:	e7fc      	b.n	80199e2 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

080199e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80199e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199ea:	460c      	mov	r4, r1
 80199ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80199ee:	b089      	sub	sp, #36	; 0x24
 80199f0:	4605      	mov	r5, r0
 80199f2:	2900      	cmp	r1, #0
 80199f4:	d054      	beq.n	8019aa0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 80199f6:	4668      	mov	r0, sp
 80199f8:	f7ff fec1 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80199fc:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 80199fe:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019a00:	4668      	mov	r0, sp
 8019a02:	8922      	ldrh	r2, [r4, #8]
 8019a04:	88e1      	ldrh	r1, [r4, #6]
 8019a06:	443a      	add	r2, r7
 8019a08:	4431      	add	r1, r6
 8019a0a:	b212      	sxth	r2, r2
 8019a0c:	b209      	sxth	r1, r1
 8019a0e:	f7ff ffd3 	bl	80199b8 <_ZNK8touchgfx4Rect9intersectEss>
 8019a12:	b1d0      	cbz	r0, 8019a4a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019a14:	89a2      	ldrh	r2, [r4, #12]
 8019a16:	4668      	mov	r0, sp
 8019a18:	8961      	ldrh	r1, [r4, #10]
 8019a1a:	443a      	add	r2, r7
 8019a1c:	4431      	add	r1, r6
 8019a1e:	b212      	sxth	r2, r2
 8019a20:	b209      	sxth	r1, r1
 8019a22:	f7ff ffc9 	bl	80199b8 <_ZNK8touchgfx4Rect9intersectEss>
 8019a26:	4603      	mov	r3, r0
 8019a28:	b978      	cbnz	r0, 8019a4a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019a2a:	4a1e      	ldr	r2, [pc, #120]	; (8019aa4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019a2c:	a904      	add	r1, sp, #16
 8019a2e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019a30:	9204      	str	r2, [sp, #16]
 8019a32:	2202      	movs	r2, #2
 8019a34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a38:	f88d 2014 	strb.w	r2, [sp, #20]
 8019a3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019a40:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019a44:	6803      	ldr	r3, [r0, #0]
 8019a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a48:	4798      	blx	r3
 8019a4a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019a4c:	a802      	add	r0, sp, #8
 8019a4e:	f7ff fe96 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019a56:	88e0      	ldrh	r0, [r4, #6]
 8019a58:	8961      	ldrh	r1, [r4, #10]
 8019a5a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019a5e:	1a80      	subs	r0, r0, r2
 8019a60:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019a64:	1a89      	subs	r1, r1, r2
 8019a66:	8923      	ldrh	r3, [r4, #8]
 8019a68:	4460      	add	r0, ip
 8019a6a:	89a2      	ldrh	r2, [r4, #12]
 8019a6c:	4461      	add	r1, ip
 8019a6e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019a70:	eba3 030e 	sub.w	r3, r3, lr
 8019a74:	eba2 020e 	sub.w	r2, r2, lr
 8019a78:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019a7c:	7927      	ldrb	r7, [r4, #4]
 8019a7e:	4433      	add	r3, r6
 8019a80:	4432      	add	r2, r6
 8019a82:	4c09      	ldr	r4, [pc, #36]	; (8019aa8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019a84:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019a86:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019a8a:	a904      	add	r1, sp, #16
 8019a8c:	9404      	str	r4, [sp, #16]
 8019a8e:	f88d 7014 	strb.w	r7, [sp, #20]
 8019a92:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019a96:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019a9a:	6803      	ldr	r3, [r0, #0]
 8019a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a9e:	4798      	blx	r3
 8019aa0:	b009      	add	sp, #36	; 0x24
 8019aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019aa4:	08028934 	.word	0x08028934
 8019aa8:	08028948 	.word	0x08028948

08019aac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ab0:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019ab4:	b0a1      	sub	sp, #132	; 0x84
 8019ab6:	4604      	mov	r4, r0
 8019ab8:	460d      	mov	r5, r1
 8019aba:	790b      	ldrb	r3, [r1, #4]
 8019abc:	f1b9 0f00 	cmp.w	r9, #0
 8019ac0:	d00f      	beq.n	8019ae2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	f040 80a2 	bne.w	8019c0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019ac8:	b021      	add	sp, #132	; 0x84
 8019aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ace:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019ad2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019ad6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019ada:	1d20      	adds	r0, r4, #4
 8019adc:	f7fb ff5c 	bl	8015998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019ae0:	e094      	b.n	8019c0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d1f0      	bne.n	8019ac8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019ae6:	4b5f      	ldr	r3, [pc, #380]	; (8019c64 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019aee:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019af2:	f1ba 0f03 	cmp.w	sl, #3
 8019af6:	ddea      	ble.n	8019ace <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019af8:	f1ba 0f0c 	cmp.w	sl, #12
 8019afc:	f04f 0303 	mov.w	r3, #3
 8019b00:	f04f 0600 	mov.w	r6, #0
 8019b04:	4958      	ldr	r1, [pc, #352]	; (8019c68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019b06:	bfd8      	it	le
 8019b08:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019b0c:	960a      	str	r6, [sp, #40]	; 0x28
 8019b0e:	bfd8      	it	le
 8019b10:	fb92 f3f3 	sdivle	r3, r2, r3
 8019b14:	9301      	str	r3, [sp, #4]
 8019b16:	4b55      	ldr	r3, [pc, #340]	; (8019c6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019b18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b1c:	4b54      	ldr	r3, [pc, #336]	; (8019c70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019b1e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019b22:	2248      	movs	r2, #72	; 0x48
 8019b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b28:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019b2c:	ab0e      	add	r3, sp, #56	; 0x38
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f00b f9c2 	bl	8024eb8 <memcpy>
 8019b34:	f04f 32ff 	mov.w	r2, #4294967295
 8019b38:	f8cd a008 	str.w	sl, [sp, #8]
 8019b3c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019b40:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019b44:	46b3      	mov	fp, r6
 8019b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8019b4a:	b29b      	uxth	r3, r3
 8019b4c:	9303      	str	r3, [sp, #12]
 8019b4e:	2300      	movs	r3, #0
 8019b50:	9a03      	ldr	r2, [sp, #12]
 8019b52:	88ef      	ldrh	r7, [r5, #6]
 8019b54:	a80a      	add	r0, sp, #40	; 0x28
 8019b56:	9309      	str	r3, [sp, #36]	; 0x24
 8019b58:	9b07      	ldr	r3, [sp, #28]
 8019b5a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019b5e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019b62:	fb13 f302 	smulbb	r3, r3, r2
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	9304      	str	r3, [sp, #16]
 8019b6a:	9b07      	ldr	r3, [sp, #28]
 8019b6c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019b70:	685b      	ldr	r3, [r3, #4]
 8019b72:	fb13 f302 	smulbb	r3, r3, r2
 8019b76:	b29b      	uxth	r3, r3
 8019b78:	9305      	str	r3, [sp, #20]
 8019b7a:	9b04      	ldr	r3, [sp, #16]
 8019b7c:	441f      	add	r7, r3
 8019b7e:	9b05      	ldr	r3, [sp, #20]
 8019b80:	4498      	add	r8, r3
 8019b82:	b23f      	sxth	r7, r7
 8019b84:	fa0f f888 	sxth.w	r8, r8
 8019b88:	4639      	mov	r1, r7
 8019b8a:	4642      	mov	r2, r8
 8019b8c:	f7ff ff14 	bl	80199b8 <_ZNK8touchgfx4Rect9intersectEss>
 8019b90:	b380      	cbz	r0, 8019bf4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019b92:	4639      	mov	r1, r7
 8019b94:	ab09      	add	r3, sp, #36	; 0x24
 8019b96:	4642      	mov	r2, r8
 8019b98:	1d20      	adds	r0, r4, #4
 8019b9a:	f7fb fefd 	bl	8015998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019b9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019ba0:	b341      	cbz	r1, 8019bf4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019ba2:	4549      	cmp	r1, r9
 8019ba4:	d026      	beq.n	8019bf4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019ba6:	a80c      	add	r0, sp, #48	; 0x30
 8019ba8:	f7ff fde9 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019bac:	2002      	movs	r0, #2
 8019bae:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019bb2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019bb6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019bba:	fb92 f2f0 	sdiv	r2, r2, r0
 8019bbe:	440a      	add	r2, r1
 8019bc0:	1a99      	subs	r1, r3, r2
 8019bc2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019bc6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019bca:	fb93 f3f0 	sdiv	r3, r3, r0
 8019bce:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019bd2:	4403      	add	r3, r0
 8019bd4:	1ad3      	subs	r3, r2, r3
 8019bd6:	9a06      	ldr	r2, [sp, #24]
 8019bd8:	435b      	muls	r3, r3
 8019bda:	fb01 3301 	mla	r3, r1, r1, r3
 8019bde:	4293      	cmp	r3, r2
 8019be0:	d208      	bcs.n	8019bf4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019be2:	9a04      	ldr	r2, [sp, #16]
 8019be4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019be8:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019bea:	9a05      	ldr	r2, [sp, #20]
 8019bec:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019bf0:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019bf2:	9306      	str	r3, [sp, #24]
 8019bf4:	f10b 0b02 	add.w	fp, fp, #2
 8019bf8:	f1bb 0f08 	cmp.w	fp, #8
 8019bfc:	dda7      	ble.n	8019b4e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019bfe:	9b02      	ldr	r3, [sp, #8]
 8019c00:	3601      	adds	r6, #1
 8019c02:	4453      	add	r3, sl
 8019c04:	9302      	str	r3, [sp, #8]
 8019c06:	9b01      	ldr	r3, [sp, #4]
 8019c08:	42b3      	cmp	r3, r6
 8019c0a:	d199      	bne.n	8019b40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019c0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019c0e:	2900      	cmp	r1, #0
 8019c10:	f43f af5a 	beq.w	8019ac8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019c14:	a80c      	add	r0, sp, #48	; 0x30
 8019c16:	2600      	movs	r6, #0
 8019c18:	f7ff fdb1 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c1c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019c20:	88ea      	ldrh	r2, [r5, #6]
 8019c22:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019c26:	1ad2      	subs	r2, r2, r3
 8019c28:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019c2a:	7929      	ldrb	r1, [r5, #4]
 8019c2c:	441a      	add	r2, r3
 8019c2e:	892b      	ldrh	r3, [r5, #8]
 8019c30:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019c34:	a90e      	add	r1, sp, #56	; 0x38
 8019c36:	1a1b      	subs	r3, r3, r0
 8019c38:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019c3a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019c3e:	4403      	add	r3, r0
 8019c40:	480c      	ldr	r0, [pc, #48]	; (8019c74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019c42:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019c46:	900e      	str	r0, [sp, #56]	; 0x38
 8019c48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019c4a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019c4e:	6803      	ldr	r3, [r0, #0]
 8019c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c52:	4798      	blx	r3
 8019c54:	792b      	ldrb	r3, [r5, #4]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	f43f af36 	beq.w	8019ac8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019c5c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019c60:	e732      	b.n	8019ac8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019c62:	bf00      	nop
 8019c64:	2000bd6c 	.word	0x2000bd6c
 8019c68:	08026508 	.word	0x08026508
 8019c6c:	2000bd60 	.word	0x2000bd60
 8019c70:	2000bd62 	.word	0x2000bd62
 8019c74:	08028934 	.word	0x08028934

08019c78 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c7a:	4604      	mov	r4, r0
 8019c7c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019c80:	3201      	adds	r2, #1
 8019c82:	d112      	bne.n	8019caa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019c84:	2500      	movs	r5, #0
 8019c86:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019c8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019c8e:	6803      	ldr	r3, [r0, #0]
 8019c90:	9500      	str	r5, [sp, #0]
 8019c92:	466d      	mov	r5, sp
 8019c94:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019c98:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019c9c:	4629      	mov	r1, r5
 8019c9e:	6a1b      	ldr	r3, [r3, #32]
 8019ca0:	4798      	blx	r3
 8019ca2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019ca6:	e884 0003 	stmia.w	r4, {r0, r1}
 8019caa:	4620      	mov	r0, r4
 8019cac:	b003      	add	sp, #12
 8019cae:	bd30      	pop	{r4, r5, pc}

08019cb0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019cb0:	b513      	push	{r0, r1, r4, lr}
 8019cb2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019cb6:	4604      	mov	r4, r0
 8019cb8:	3301      	adds	r3, #1
 8019cba:	d109      	bne.n	8019cd0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019cbc:	4601      	mov	r1, r0
 8019cbe:	4668      	mov	r0, sp
 8019cc0:	f7ff fd5d 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019cc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8019cc8:	8423      	strh	r3, [r4, #32]
 8019cca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019cce:	8463      	strh	r3, [r4, #34]	; 0x22
 8019cd0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019cd4:	b002      	add	sp, #8
 8019cd6:	bd10      	pop	{r4, pc}

08019cd8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019cd8:	b513      	push	{r0, r1, r4, lr}
 8019cda:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019cde:	4604      	mov	r4, r0
 8019ce0:	3301      	adds	r3, #1
 8019ce2:	d109      	bne.n	8019cf8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019ce4:	4601      	mov	r1, r0
 8019ce6:	4668      	mov	r0, sp
 8019ce8:	f7ff fd49 	bl	801977e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019cec:	f8bd 3000 	ldrh.w	r3, [sp]
 8019cf0:	8423      	strh	r3, [r4, #32]
 8019cf2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019cf6:	8463      	strh	r3, [r4, #34]	; 0x22
 8019cf8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019cfc:	b002      	add	sp, #8
 8019cfe:	bd10      	pop	{r4, pc}

08019d00 <_ZN8touchgfx6ScreenC1Ev>:
 8019d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d02:	4605      	mov	r5, r0
 8019d04:	4b17      	ldr	r3, [pc, #92]	; (8019d64 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019d06:	2200      	movs	r2, #0
 8019d08:	4917      	ldr	r1, [pc, #92]	; (8019d68 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019d0a:	f845 3b04 	str.w	r3, [r5], #4
 8019d0e:	2301      	movs	r3, #1
 8019d10:	8102      	strh	r2, [r0, #8]
 8019d12:	4604      	mov	r4, r0
 8019d14:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8019d18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019d1c:	4b13      	ldr	r3, [pc, #76]	; (8019d6c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019d1e:	8142      	strh	r2, [r0, #10]
 8019d20:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019d24:	4b12      	ldr	r3, [pc, #72]	; (8019d70 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8019d26:	8182      	strh	r2, [r0, #12]
 8019d28:	81c2      	strh	r2, [r0, #14]
 8019d2a:	8202      	strh	r2, [r0, #16]
 8019d2c:	8242      	strh	r2, [r0, #18]
 8019d2e:	8282      	strh	r2, [r0, #20]
 8019d30:	82c2      	strh	r2, [r0, #22]
 8019d32:	6202      	str	r2, [r0, #32]
 8019d34:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019d38:	6342      	str	r2, [r0, #52]	; 0x34
 8019d3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019d3e:	6041      	str	r1, [r0, #4]
 8019d40:	4611      	mov	r1, r2
 8019d42:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019d46:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8019d4a:	4628      	mov	r0, r5
 8019d4c:	f7f6 fa8b 	bl	8010266 <_ZN8touchgfx8Drawable5setXYEss>
 8019d50:	4639      	mov	r1, r7
 8019d52:	4628      	mov	r0, r5
 8019d54:	f7f6 faa5 	bl	80102a2 <_ZN8touchgfx8Drawable8setWidthEs>
 8019d58:	4628      	mov	r0, r5
 8019d5a:	4631      	mov	r1, r6
 8019d5c:	f7f6 fab0 	bl	80102c0 <_ZN8touchgfx8Drawable9setHeightEs>
 8019d60:	4620      	mov	r0, r4
 8019d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d64:	08028970 	.word	0x08028970
 8019d68:	08027644 	.word	0x08027644
 8019d6c:	2000bd60 	.word	0x2000bd60
 8019d70:	2000bd62 	.word	0x2000bd62

08019d74 <_ZN8touchgfx6Screen4drawEv>:
 8019d74:	4b09      	ldr	r3, [pc, #36]	; (8019d9c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019d76:	b507      	push	{r0, r1, r2, lr}
 8019d78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d7c:	2100      	movs	r1, #0
 8019d7e:	4b08      	ldr	r3, [pc, #32]	; (8019da0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019d80:	9100      	str	r1, [sp, #0]
 8019d82:	4669      	mov	r1, sp
 8019d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d88:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019d8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019d90:	6803      	ldr	r3, [r0, #0]
 8019d92:	689b      	ldr	r3, [r3, #8]
 8019d94:	4798      	blx	r3
 8019d96:	b003      	add	sp, #12
 8019d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d9c:	2000bd60 	.word	0x2000bd60
 8019da0:	2000bd62 	.word	0x2000bd62

08019da4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019dac:	b089      	sub	sp, #36	; 0x24
 8019dae:	4680      	mov	r8, r0
 8019db0:	460c      	mov	r4, r1
 8019db2:	4615      	mov	r5, r2
 8019db4:	b16b      	cbz	r3, 8019dd2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019db6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019dba:	b153      	cbz	r3, 8019dd2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019dbc:	4628      	mov	r0, r5
 8019dbe:	f7ff ff5b 	bl	8019c78 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019dc2:	4621      	mov	r1, r4
 8019dc4:	f7fe ffc2 	bl	8018d4c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019dc8:	69eb      	ldr	r3, [r5, #28]
 8019dca:	b928      	cbnz	r0, 8019dd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019dcc:	461d      	mov	r5, r3
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d1f4      	bne.n	8019dbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019dd2:	b009      	add	sp, #36	; 0x24
 8019dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd8:	ae04      	add	r6, sp, #16
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d051      	beq.n	8019e82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019dde:	682b      	ldr	r3, [r5, #0]
 8019de0:	4629      	mov	r1, r5
 8019de2:	a802      	add	r0, sp, #8
 8019de4:	68db      	ldr	r3, [r3, #12]
 8019de6:	4798      	blx	r3
 8019de8:	4628      	mov	r0, r5
 8019dea:	f7ff ff61 	bl	8019cb0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019dee:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019df2:	4407      	add	r7, r0
 8019df4:	4628      	mov	r0, r5
 8019df6:	f7ff ff6f 	bl	8019cd8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019dfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019dfe:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019e02:	b23f      	sxth	r7, r7
 8019e04:	4418      	add	r0, r3
 8019e06:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019e0a:	4621      	mov	r1, r4
 8019e0c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019e10:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019e14:	4630      	mov	r0, r6
 8019e16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e1a:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019e1e:	f7fb fe6d 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019e22:	4628      	mov	r0, r5
 8019e24:	f7ff ff28 	bl	8019c78 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019e28:	ab06      	add	r3, sp, #24
 8019e2a:	4602      	mov	r2, r0
 8019e2c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019e30:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e34:	4611      	mov	r1, r2
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7fb fe60 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019e3c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019e40:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019e44:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019e48:	4299      	cmp	r1, r3
 8019e4a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019e4e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019e52:	d10b      	bne.n	8019e6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019e54:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019e58:	4552      	cmp	r2, sl
 8019e5a:	d107      	bne.n	8019e6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019e5c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019e60:	455a      	cmp	r2, fp
 8019e62:	d103      	bne.n	8019e6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019e64:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019e68:	454a      	cmp	r2, r9
 8019e6a:	d00a      	beq.n	8019e82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019e6c:	f1bb 0f00 	cmp.w	fp, #0
 8019e70:	d002      	beq.n	8019e78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8019e72:	f1b9 0f00 	cmp.w	r9, #0
 8019e76:	d12e      	bne.n	8019ed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8019e78:	69ea      	ldr	r2, [r5, #28]
 8019e7a:	4621      	mov	r1, r4
 8019e7c:	4640      	mov	r0, r8
 8019e7e:	f7ff ff91 	bl	8019da4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019e82:	4628      	mov	r0, r5
 8019e84:	f7ff fef8 	bl	8019c78 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019e88:	6861      	ldr	r1, [r4, #4]
 8019e8a:	4602      	mov	r2, r0
 8019e8c:	4633      	mov	r3, r6
 8019e8e:	6820      	ldr	r0, [r4, #0]
 8019e90:	c303      	stmia	r3!, {r0, r1}
 8019e92:	4611      	mov	r1, r2
 8019e94:	4630      	mov	r0, r6
 8019e96:	f7fb fe31 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019e9a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d097      	beq.n	8019dd2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019ea2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d093      	beq.n	8019dd2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019eaa:	4628      	mov	r0, r5
 8019eac:	f7ff ff00 	bl	8019cb0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019eb0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019eb4:	1a18      	subs	r0, r3, r0
 8019eb6:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019eba:	4628      	mov	r0, r5
 8019ebc:	f7ff ff0c 	bl	8019cd8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019ec0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019ec4:	4631      	mov	r1, r6
 8019ec6:	1a18      	subs	r0, r3, r0
 8019ec8:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019ecc:	4628      	mov	r0, r5
 8019ece:	682b      	ldr	r3, [r5, #0]
 8019ed0:	689b      	ldr	r3, [r3, #8]
 8019ed2:	4798      	blx	r3
 8019ed4:	e77d      	b.n	8019dd2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019ed6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019eda:	fa1f f08a 	uxth.w	r0, sl
 8019ede:	4552      	cmp	r2, sl
 8019ee0:	9000      	str	r0, [sp, #0]
 8019ee2:	da12      	bge.n	8019f0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019ee4:	9301      	str	r3, [sp, #4]
 8019ee6:	9b00      	ldr	r3, [sp, #0]
 8019ee8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019eec:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019ef0:	1a9a      	subs	r2, r3, r2
 8019ef2:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019ef6:	4631      	mov	r1, r6
 8019ef8:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019efc:	4640      	mov	r0, r8
 8019efe:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019f02:	69ea      	ldr	r2, [r5, #28]
 8019f04:	f7ff ff4e 	bl	8019da4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f08:	9b01      	ldr	r3, [sp, #4]
 8019f0a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019f0e:	b29f      	uxth	r7, r3
 8019f10:	429a      	cmp	r2, r3
 8019f12:	da0d      	bge.n	8019f30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8019f14:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019f18:	1aba      	subs	r2, r7, r2
 8019f1a:	f8ad a012 	strh.w	sl, [sp, #18]
 8019f1e:	4631      	mov	r1, r6
 8019f20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019f24:	4640      	mov	r0, r8
 8019f26:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019f2a:	69ea      	ldr	r2, [r5, #28]
 8019f2c:	f7ff ff3a 	bl	8019da4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f30:	8822      	ldrh	r2, [r4, #0]
 8019f32:	445f      	add	r7, fp
 8019f34:	88a3      	ldrh	r3, [r4, #4]
 8019f36:	b2bf      	uxth	r7, r7
 8019f38:	4413      	add	r3, r2
 8019f3a:	b23a      	sxth	r2, r7
 8019f3c:	b29b      	uxth	r3, r3
 8019f3e:	b219      	sxth	r1, r3
 8019f40:	4291      	cmp	r1, r2
 8019f42:	dd0d      	ble.n	8019f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8019f44:	1bdb      	subs	r3, r3, r7
 8019f46:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019f4a:	f8ad a012 	strh.w	sl, [sp, #18]
 8019f4e:	4631      	mov	r1, r6
 8019f50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019f54:	4640      	mov	r0, r8
 8019f56:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019f5a:	69ea      	ldr	r2, [r5, #28]
 8019f5c:	f7ff ff22 	bl	8019da4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f60:	88e2      	ldrh	r2, [r4, #6]
 8019f62:	8863      	ldrh	r3, [r4, #2]
 8019f64:	4413      	add	r3, r2
 8019f66:	9a00      	ldr	r2, [sp, #0]
 8019f68:	444a      	add	r2, r9
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	fa1f f982 	uxth.w	r9, r2
 8019f70:	b219      	sxth	r1, r3
 8019f72:	fa0f f289 	sxth.w	r2, r9
 8019f76:	428a      	cmp	r2, r1
 8019f78:	da83      	bge.n	8019e82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019f7a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019f7e:	eba3 0309 	sub.w	r3, r3, r9
 8019f82:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019f86:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019f8a:	4631      	mov	r1, r6
 8019f8c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019f90:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019f94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f98:	69ea      	ldr	r2, [r5, #28]
 8019f9a:	e76f      	b.n	8019e7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08019f9c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	aa02      	add	r2, sp, #8
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	3004      	adds	r0, #4
 8019fa6:	f842 3d04 	str.w	r3, [r2, #-4]!
 8019faa:	460d      	mov	r5, r1
 8019fac:	f7fb fe7d 	bl	8015caa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019fb0:	9a01      	ldr	r2, [sp, #4]
 8019fb2:	b11a      	cbz	r2, 8019fbc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019fb4:	4629      	mov	r1, r5
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	f7ff fef4 	bl	8019da4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019fbc:	b003      	add	sp, #12
 8019fbe:	bd30      	pop	{r4, r5, pc}

08019fc0 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019fc2:	4602      	mov	r2, r0
 8019fc4:	4604      	mov	r4, r0
 8019fc6:	460d      	mov	r5, r1
 8019fc8:	466b      	mov	r3, sp
 8019fca:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019fce:	6851      	ldr	r1, [r2, #4]
 8019fd0:	c303      	stmia	r3!, {r0, r1}
 8019fd2:	4629      	mov	r1, r5
 8019fd4:	4668      	mov	r0, sp
 8019fd6:	f7fb fd91 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019fda:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019fde:	4669      	mov	r1, sp
 8019fe0:	b123      	cbz	r3, 8019fec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	f7ff ffda 	bl	8019f9c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019fe8:	b003      	add	sp, #12
 8019fea:	bd30      	pop	{r4, r5, pc}
 8019fec:	1d20      	adds	r0, r4, #4
 8019fee:	f7fb fe23 	bl	8015c38 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019ff2:	e7f9      	b.n	8019fe8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019ff4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	680a      	ldr	r2, [r1, #0]
 8019ff8:	1d01      	adds	r1, r0, #4
 8019ffa:	6952      	ldr	r2, [r2, #20]
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	4710      	bx	r2

0801a000 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801a000:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a004:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a008:	4b03      	ldr	r3, [pc, #12]	; (801a018 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801a00a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a00e:	bf08      	it	eq
 801a010:	2300      	moveq	r3, #0
 801a012:	4308      	orrs	r0, r1
 801a014:	4318      	orrs	r0, r3
 801a016:	4770      	bx	lr
 801a018:	fffffe00 	.word	0xfffffe00

0801a01c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801a01c:	7b43      	ldrb	r3, [r0, #13]
 801a01e:	7201      	strb	r1, [r0, #8]
 801a020:	b289      	uxth	r1, r1
 801a022:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801a026:	05ca      	lsls	r2, r1, #23
 801a028:	bf48      	it	mi
 801a02a:	f043 0320 	orrmi.w	r3, r3, #32
 801a02e:	7343      	strb	r3, [r0, #13]
 801a030:	058b      	lsls	r3, r1, #22
 801a032:	bf42      	ittt	mi
 801a034:	7b43      	ldrbmi	r3, [r0, #13]
 801a036:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a03a:	7343      	strbmi	r3, [r0, #13]
 801a03c:	4770      	bx	lr

0801a03e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a03e:	b530      	push	{r4, r5, lr}
 801a040:	2500      	movs	r5, #0
 801a042:	2401      	movs	r4, #1
 801a044:	6843      	ldr	r3, [r0, #4]
 801a046:	b913      	cbnz	r3, 801a04e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a048:	6803      	ldr	r3, [r0, #0]
 801a04a:	b1f3      	cbz	r3, 801a08a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a04c:	6043      	str	r3, [r0, #4]
 801a04e:	7c03      	ldrb	r3, [r0, #16]
 801a050:	b143      	cbz	r3, 801a064 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a052:	68c3      	ldr	r3, [r0, #12]
 801a054:	b12b      	cbz	r3, 801a062 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a056:	881a      	ldrh	r2, [r3, #0]
 801a058:	b11a      	cbz	r2, 801a062 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a05a:	1c9a      	adds	r2, r3, #2
 801a05c:	60c2      	str	r2, [r0, #12]
 801a05e:	8818      	ldrh	r0, [r3, #0]
 801a060:	bd30      	pop	{r4, r5, pc}
 801a062:	7405      	strb	r5, [r0, #16]
 801a064:	6843      	ldr	r3, [r0, #4]
 801a066:	8819      	ldrh	r1, [r3, #0]
 801a068:	b179      	cbz	r1, 801a08a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a06a:	1c9a      	adds	r2, r3, #2
 801a06c:	2902      	cmp	r1, #2
 801a06e:	6042      	str	r2, [r0, #4]
 801a070:	d1f5      	bne.n	801a05e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a072:	6883      	ldr	r3, [r0, #8]
 801a074:	1d1a      	adds	r2, r3, #4
 801a076:	6082      	str	r2, [r0, #8]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	60c3      	str	r3, [r0, #12]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d0e1      	beq.n	801a044 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a080:	881b      	ldrh	r3, [r3, #0]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d0de      	beq.n	801a044 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a086:	7404      	strb	r4, [r0, #16]
 801a088:	e7dc      	b.n	801a044 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a08a:	2000      	movs	r0, #0
 801a08c:	e7e8      	b.n	801a060 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a08e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a08e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a090:	4605      	mov	r5, r0
 801a092:	4608      	mov	r0, r1
 801a094:	b1f1      	cbz	r1, 801a0d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a096:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a09a:	460b      	mov	r3, r1
 801a09c:	f101 0708 	add.w	r7, r1, #8
 801a0a0:	4622      	mov	r2, r4
 801a0a2:	6818      	ldr	r0, [r3, #0]
 801a0a4:	3308      	adds	r3, #8
 801a0a6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a0aa:	4626      	mov	r6, r4
 801a0ac:	42bb      	cmp	r3, r7
 801a0ae:	c603      	stmia	r6!, {r0, r1}
 801a0b0:	4634      	mov	r4, r6
 801a0b2:	d1f6      	bne.n	801a0a2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a0b4:	6818      	ldr	r0, [r3, #0]
 801a0b6:	6030      	str	r0, [r6, #0]
 801a0b8:	4610      	mov	r0, r2
 801a0ba:	889b      	ldrh	r3, [r3, #4]
 801a0bc:	80b3      	strh	r3, [r6, #4]
 801a0be:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a0c2:	015b      	lsls	r3, r3, #5
 801a0c4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a0c8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a0cc:	430b      	orrs	r3, r1
 801a0ce:	425b      	negs	r3, r3
 801a0d0:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a0d6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a0d6:	b538      	push	{r3, r4, r5, lr}
 801a0d8:	460c      	mov	r4, r1
 801a0da:	6811      	ldr	r1, [r2, #0]
 801a0dc:	4610      	mov	r0, r2
 801a0de:	68cd      	ldr	r5, [r1, #12]
 801a0e0:	4619      	mov	r1, r3
 801a0e2:	47a8      	blx	r5
 801a0e4:	2800      	cmp	r0, #0
 801a0e6:	bf08      	it	eq
 801a0e8:	4620      	moveq	r0, r4
 801a0ea:	bd38      	pop	{r3, r4, r5, pc}

0801a0ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a0ec:	b570      	push	{r4, r5, r6, lr}
 801a0ee:	8810      	ldrh	r0, [r2, #0]
 801a0f0:	4298      	cmp	r0, r3
 801a0f2:	d817      	bhi.n	801a124 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a0f4:	1e48      	subs	r0, r1, #1
 801a0f6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a0fa:	4298      	cmp	r0, r3
 801a0fc:	d312      	bcc.n	801a124 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a0fe:	2400      	movs	r4, #0
 801a100:	428c      	cmp	r4, r1
 801a102:	d20f      	bcs.n	801a124 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a104:	1860      	adds	r0, r4, r1
 801a106:	1040      	asrs	r0, r0, #1
 801a108:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a10c:	0085      	lsls	r5, r0, #2
 801a10e:	42b3      	cmp	r3, r6
 801a110:	d902      	bls.n	801a118 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a112:	3001      	adds	r0, #1
 801a114:	b284      	uxth	r4, r0
 801a116:	e7f3      	b.n	801a100 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a118:	d102      	bne.n	801a120 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a11a:	442a      	add	r2, r5
 801a11c:	8850      	ldrh	r0, [r2, #2]
 801a11e:	bd70      	pop	{r4, r5, r6, pc}
 801a120:	b281      	uxth	r1, r0
 801a122:	e7ed      	b.n	801a100 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a124:	2000      	movs	r0, #0
 801a126:	e7fa      	b.n	801a11e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801a128 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a128:	b510      	push	{r4, lr}
 801a12a:	8ac3      	ldrh	r3, [r0, #22]
 801a12c:	428b      	cmp	r3, r1
 801a12e:	d805      	bhi.n	801a13c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a130:	4b07      	ldr	r3, [pc, #28]	; (801a150 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a132:	21fd      	movs	r1, #253	; 0xfd
 801a134:	4a07      	ldr	r2, [pc, #28]	; (801a154 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a136:	4808      	ldr	r0, [pc, #32]	; (801a158 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a138:	f00a fe40 	bl	8024dbc <__assert_func>
 801a13c:	8a83      	ldrh	r3, [r0, #20]
 801a13e:	240a      	movs	r4, #10
 801a140:	4419      	add	r1, r3
 801a142:	fbb1 f3f4 	udiv	r3, r1, r4
 801a146:	fb04 1113 	mls	r1, r4, r3, r1
 801a14a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a14e:	bd10      	pop	{r4, pc}
 801a150:	080289bd 	.word	0x080289bd
 801a154:	08028dec 	.word	0x08028dec
 801a158:	080289cb 	.word	0x080289cb

0801a15c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a15c:	b508      	push	{r3, lr}
 801a15e:	8ac3      	ldrh	r3, [r0, #22]
 801a160:	428b      	cmp	r3, r1
 801a162:	d805      	bhi.n	801a170 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a164:	4b07      	ldr	r3, [pc, #28]	; (801a184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a166:	21d3      	movs	r1, #211	; 0xd3
 801a168:	4a07      	ldr	r2, [pc, #28]	; (801a188 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a16a:	4808      	ldr	r0, [pc, #32]	; (801a18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a16c:	f00a fe26 	bl	8024dbc <__assert_func>
 801a170:	8a83      	ldrh	r3, [r0, #20]
 801a172:	220a      	movs	r2, #10
 801a174:	4419      	add	r1, r3
 801a176:	fbb1 f3f2 	udiv	r3, r1, r2
 801a17a:	fb02 1113 	mls	r1, r2, r3, r1
 801a17e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a182:	bd08      	pop	{r3, pc}
 801a184:	080289bd 	.word	0x080289bd
 801a188:	08028b3c 	.word	0x08028b3c
 801a18c:	080289cb 	.word	0x080289cb

0801a190 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a194:	4604      	mov	r4, r0
 801a196:	4688      	mov	r8, r1
 801a198:	4615      	mov	r5, r2
 801a19a:	b94a      	cbnz	r2, 801a1b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a19c:	4691      	mov	r9, r2
 801a19e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a1a2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a1a6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a1aa:	4648      	mov	r0, r9
 801a1ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1b0:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a1b4:	8892      	ldrh	r2, [r2, #4]
 801a1b6:	462b      	mov	r3, r5
 801a1b8:	f105 0c08 	add.w	ip, r5, #8
 801a1bc:	46b3      	mov	fp, r6
 801a1be:	6818      	ldr	r0, [r3, #0]
 801a1c0:	3308      	adds	r3, #8
 801a1c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a1c6:	4637      	mov	r7, r6
 801a1c8:	4563      	cmp	r3, ip
 801a1ca:	c703      	stmia	r7!, {r0, r1}
 801a1cc:	463e      	mov	r6, r7
 801a1ce:	d1f6      	bne.n	801a1be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a1d0:	6818      	ldr	r0, [r3, #0]
 801a1d2:	46d9      	mov	r9, fp
 801a1d4:	6038      	str	r0, [r7, #0]
 801a1d6:	889b      	ldrh	r3, [r3, #4]
 801a1d8:	80bb      	strh	r3, [r7, #4]
 801a1da:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a1de:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a1e2:	18d3      	adds	r3, r2, r3
 801a1e4:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a1e8:	b298      	uxth	r0, r3
 801a1ea:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a1ee:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a1f2:	281d      	cmp	r0, #29
 801a1f4:	ea4a 0a01 	orr.w	sl, sl, r1
 801a1f8:	fa1f f68a 	uxth.w	r6, sl
 801a1fc:	d842      	bhi.n	801a284 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a1fe:	2301      	movs	r3, #1
 801a200:	4950      	ldr	r1, [pc, #320]	; (801a344 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a202:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a206:	4083      	lsls	r3, r0
 801a208:	420b      	tst	r3, r1
 801a20a:	d114      	bne.n	801a236 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a20c:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a210:	d03c      	beq.n	801a28c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a212:	fa1f fa8a 	uxth.w	sl, sl
 801a216:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a21a:	4658      	mov	r0, fp
 801a21c:	eba1 010a 	sub.w	r1, r1, sl
 801a220:	b209      	sxth	r1, r1
 801a222:	f7ff fefb 	bl	801a01c <_ZN8touchgfx9GlyphNode6setTopEs>
 801a226:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a22a:	1b86      	subs	r6, r0, r6
 801a22c:	eba6 0a0a 	sub.w	sl, r6, sl
 801a230:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a234:	e7b9      	b.n	801a1aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a236:	2100      	movs	r1, #0
 801a238:	f104 001a 	add.w	r0, r4, #26
 801a23c:	f7ff ff8e 	bl	801a15c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a240:	f640 6333 	movw	r3, #3635	; 0xe33
 801a244:	4601      	mov	r1, r0
 801a246:	4298      	cmp	r0, r3
 801a248:	d10a      	bne.n	801a260 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a24a:	f8d8 3000 	ldr.w	r3, [r8]
 801a24e:	4640      	mov	r0, r8
 801a250:	68db      	ldr	r3, [r3, #12]
 801a252:	4798      	blx	r3
 801a254:	7b41      	ldrb	r1, [r0, #13]
 801a256:	7a00      	ldrb	r0, [r0, #8]
 801a258:	f7ff fed2 	bl	801a000 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a25c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a260:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a264:	4658      	mov	r0, fp
 801a266:	4431      	add	r1, r6
 801a268:	4451      	add	r1, sl
 801a26a:	b209      	sxth	r1, r1
 801a26c:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a270:	f7ff fed4 	bl	801a01c <_ZN8touchgfx9GlyphNode6setTopEs>
 801a274:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a278:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a27c:	1a9b      	subs	r3, r3, r2
 801a27e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a282:	e792      	b.n	801a1aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a284:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a288:	429a      	cmp	r2, r3
 801a28a:	d005      	beq.n	801a298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a28c:	f022 0302 	bic.w	r3, r2, #2
 801a290:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a294:	428b      	cmp	r3, r1
 801a296:	d119      	bne.n	801a2cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a298:	1e53      	subs	r3, r2, #1
 801a29a:	4629      	mov	r1, r5
 801a29c:	4642      	mov	r2, r8
 801a29e:	4620      	mov	r0, r4
 801a2a0:	b29b      	uxth	r3, r3
 801a2a2:	f7ff ff18 	bl	801a0d6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a2a6:	7b41      	ldrb	r1, [r0, #13]
 801a2a8:	7a00      	ldrb	r0, [r0, #8]
 801a2aa:	f7ff fea9 	bl	801a000 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a2ae:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a2b2:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a2b6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a2ba:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a2be:	4313      	orrs	r3, r2
 801a2c0:	115a      	asrs	r2, r3, #5
 801a2c2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a2c6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a2ca:	e02e      	b.n	801a32a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a2cc:	4639      	mov	r1, r7
 801a2ce:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a2d2:	f7ff fe95 	bl	801a000 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a2d6:	f640 6109 	movw	r1, #3593	; 0xe09
 801a2da:	f022 0310 	bic.w	r3, r2, #16
 801a2de:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a2e2:	428b      	cmp	r3, r1
 801a2e4:	d003      	beq.n	801a2ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a2e6:	f640 6313 	movw	r3, #3603	; 0xe13
 801a2ea:	429a      	cmp	r2, r3
 801a2ec:	d127      	bne.n	801a33e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a2ee:	b27f      	sxtb	r7, r7
 801a2f0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a2f4:	4629      	mov	r1, r5
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a2fc:	431f      	orrs	r7, r3
 801a2fe:	f640 6313 	movw	r3, #3603	; 0xe13
 801a302:	429a      	cmp	r2, r3
 801a304:	bf14      	ite	ne
 801a306:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a30a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a30e:	4642      	mov	r2, r8
 801a310:	bf18      	it	ne
 801a312:	b29b      	uxthne	r3, r3
 801a314:	f7ff fedf 	bl	801a0d6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a318:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a31c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a320:	7a83      	ldrb	r3, [r0, #10]
 801a322:	4313      	orrs	r3, r2
 801a324:	1aff      	subs	r7, r7, r3
 801a326:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a32a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a32e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a332:	f7ff fe65 	bl	801a000 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a336:	1b80      	subs	r0, r0, r6
 801a338:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a33c:	e735      	b.n	801a1aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a33e:	2300      	movs	r3, #0
 801a340:	e7c1      	b.n	801a2c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a342:	bf00      	nop
 801a344:	3fc00079 	.word	0x3fc00079

0801a348 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a348:	3a01      	subs	r2, #1
 801a34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a34e:	b292      	uxth	r2, r2
 801a350:	460c      	mov	r4, r1
 801a352:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a356:	42b2      	cmp	r2, r6
 801a358:	d018      	beq.n	801a38c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a35a:	8b01      	ldrh	r1, [r0, #24]
 801a35c:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a360:	4291      	cmp	r1, r2
 801a362:	d805      	bhi.n	801a370 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a364:	4b13      	ldr	r3, [pc, #76]	; (801a3b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a366:	21d3      	movs	r1, #211	; 0xd3
 801a368:	4a13      	ldr	r2, [pc, #76]	; (801a3b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a36a:	4814      	ldr	r0, [pc, #80]	; (801a3bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a36c:	f00a fd26 	bl	8024dbc <__assert_func>
 801a370:	8ac1      	ldrh	r1, [r0, #22]
 801a372:	4411      	add	r1, r2
 801a374:	3a01      	subs	r2, #1
 801a376:	f001 0101 	and.w	r1, r1, #1
 801a37a:	b292      	uxth	r2, r2
 801a37c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a380:	8a49      	ldrh	r1, [r1, #18]
 801a382:	428d      	cmp	r5, r1
 801a384:	d0e7      	beq.n	801a356 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a386:	2000      	movs	r0, #0
 801a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a38c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a390:	2600      	movs	r6, #0
 801a392:	f100 051a 	add.w	r5, r0, #26
 801a396:	441f      	add	r7, r3
 801a398:	b2b1      	uxth	r1, r6
 801a39a:	42b9      	cmp	r1, r7
 801a39c:	da08      	bge.n	801a3b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a39e:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	f7ff feda 	bl	801a15c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a3a8:	3601      	adds	r6, #1
 801a3aa:	4540      	cmp	r0, r8
 801a3ac:	d0f4      	beq.n	801a398 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a3ae:	e7ea      	b.n	801a386 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a3b0:	2001      	movs	r0, #1
 801a3b2:	e7e9      	b.n	801a388 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a3b4:	080289bd 	.word	0x080289bd
 801a3b8:	08028f4c 	.word	0x08028f4c
 801a3bc:	080289cb 	.word	0x080289cb

0801a3c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a3c0:	b538      	push	{r3, r4, r5, lr}
 801a3c2:	8ac3      	ldrh	r3, [r0, #22]
 801a3c4:	428b      	cmp	r3, r1
 801a3c6:	d205      	bcs.n	801a3d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a3c8:	4b08      	ldr	r3, [pc, #32]	; (801a3ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a3ca:	21d8      	movs	r1, #216	; 0xd8
 801a3cc:	4a08      	ldr	r2, [pc, #32]	; (801a3f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a3ce:	4809      	ldr	r0, [pc, #36]	; (801a3f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a3d0:	f00a fcf4 	bl	8024dbc <__assert_func>
 801a3d4:	8a82      	ldrh	r2, [r0, #20]
 801a3d6:	250a      	movs	r5, #10
 801a3d8:	1a5b      	subs	r3, r3, r1
 801a3da:	440a      	add	r2, r1
 801a3dc:	82c3      	strh	r3, [r0, #22]
 801a3de:	fbb2 f4f5 	udiv	r4, r2, r5
 801a3e2:	fb05 2214 	mls	r2, r5, r4, r2
 801a3e6:	8282      	strh	r2, [r0, #20]
 801a3e8:	bd38      	pop	{r3, r4, r5, pc}
 801a3ea:	bf00      	nop
 801a3ec:	080289b1 	.word	0x080289b1
 801a3f0:	08028d68 	.word	0x08028d68
 801a3f4:	080289cb 	.word	0x080289cb

0801a3f8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801a3f8:	b538      	push	{r3, r4, r5, lr}
 801a3fa:	8ac3      	ldrh	r3, [r0, #22]
 801a3fc:	2b09      	cmp	r3, #9
 801a3fe:	d905      	bls.n	801a40c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801a400:	4b08      	ldr	r3, [pc, #32]	; (801a424 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801a402:	21f7      	movs	r1, #247	; 0xf7
 801a404:	4a08      	ldr	r2, [pc, #32]	; (801a428 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801a406:	4809      	ldr	r0, [pc, #36]	; (801a42c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801a408:	f00a fcd8 	bl	8024dbc <__assert_func>
 801a40c:	8a82      	ldrh	r2, [r0, #20]
 801a40e:	250a      	movs	r5, #10
 801a410:	441a      	add	r2, r3
 801a412:	3301      	adds	r3, #1
 801a414:	fbb2 f4f5 	udiv	r4, r2, r5
 801a418:	fb05 2214 	mls	r2, r5, r4, r2
 801a41c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801a420:	82c3      	strh	r3, [r0, #22]
 801a422:	bd38      	pop	{r3, r4, r5, pc}
 801a424:	080289a5 	.word	0x080289a5
 801a428:	08028cb9 	.word	0x08028cb9
 801a42c:	080289cb 	.word	0x080289cb

0801a430 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a430:	b538      	push	{r3, r4, r5, lr}
 801a432:	4604      	mov	r4, r0
 801a434:	f100 051a 	add.w	r5, r0, #26
 801a438:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a43a:	2b0a      	cmp	r3, #10
 801a43c:	d01c      	beq.n	801a478 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a43e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801a440:	b962      	cbnz	r2, 801a45c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801a442:	f104 051a 	add.w	r5, r4, #26
 801a446:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a448:	2b0a      	cmp	r3, #10
 801a44a:	d015      	beq.n	801a478 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a44c:	4620      	mov	r0, r4
 801a44e:	f7ff fdf6 	bl	801a03e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a452:	4601      	mov	r1, r0
 801a454:	4628      	mov	r0, r5
 801a456:	f7ff ffcf 	bl	801a3f8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a45a:	e7f4      	b.n	801a446 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801a45c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a45e:	3a01      	subs	r2, #1
 801a460:	4628      	mov	r0, r5
 801a462:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801a466:	3301      	adds	r3, #1
 801a468:	f003 0301 	and.w	r3, r3, #1
 801a46c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801a46e:	8722      	strh	r2, [r4, #56]	; 0x38
 801a470:	86e3      	strh	r3, [r4, #54]	; 0x36
 801a472:	f7ff ffc1 	bl	801a3f8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a476:	e7df      	b.n	801a438 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801a478:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a47c <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801a47c:	2300      	movs	r3, #0
 801a47e:	b510      	push	{r4, lr}
 801a480:	6043      	str	r3, [r0, #4]
 801a482:	4604      	mov	r4, r0
 801a484:	60c3      	str	r3, [r0, #12]
 801a486:	7403      	strb	r3, [r0, #16]
 801a488:	8603      	strh	r3, [r0, #48]	; 0x30
 801a48a:	8303      	strh	r3, [r0, #24]
 801a48c:	8703      	strh	r3, [r0, #56]	; 0x38
 801a48e:	f7ff ffcf 	bl	801a430 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a492:	4a0a      	ldr	r2, [pc, #40]	; (801a4bc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801a494:	6813      	ldr	r3, [r2, #0]
 801a496:	4611      	mov	r1, r2
 801a498:	b913      	cbnz	r3, 801a4a0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801a49a:	6852      	ldr	r2, [r2, #4]
 801a49c:	07d0      	lsls	r0, r2, #31
 801a49e:	d50b      	bpl.n	801a4b8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801a4a0:	6849      	ldr	r1, [r1, #4]
 801a4a2:	104a      	asrs	r2, r1, #1
 801a4a4:	07c9      	lsls	r1, r1, #31
 801a4a6:	eb04 0002 	add.w	r0, r4, r2
 801a4aa:	bf48      	it	mi
 801a4ac:	58a2      	ldrmi	r2, [r4, r2]
 801a4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4b2:	bf48      	it	mi
 801a4b4:	58d3      	ldrmi	r3, [r2, r3]
 801a4b6:	4718      	bx	r3
 801a4b8:	bd10      	pop	{r4, pc}
 801a4ba:	bf00      	nop
 801a4bc:	20008638 	.word	0x20008638

0801a4c0 <_ZN8touchgfx12TextProviderC1Ev>:
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	2201      	movs	r2, #1
 801a4c4:	b510      	push	{r4, lr}
 801a4c6:	4604      	mov	r4, r0
 801a4c8:	60c3      	str	r3, [r0, #12]
 801a4ca:	7403      	strb	r3, [r0, #16]
 801a4cc:	82c3      	strh	r3, [r0, #22]
 801a4ce:	8303      	strh	r3, [r0, #24]
 801a4d0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a4d2:	8603      	strh	r3, [r0, #48]	; 0x30
 801a4d4:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a4d6:	8703      	strh	r3, [r0, #56]	; 0x38
 801a4d8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a4da:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a4de:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a4e2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a4e6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a4ea:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a4ee:	e9c0 3300 	strd	r3, r3, [r0]
 801a4f2:	f7ff ffc3 	bl	801a47c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	bd10      	pop	{r4, pc}

0801a4fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a4fa:	b410      	push	{r4}
 801a4fc:	6082      	str	r2, [r0, #8]
 801a4fe:	6001      	str	r1, [r0, #0]
 801a500:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a502:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a506:	f7ff bfb9 	b.w	801a47c <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801a50c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801a50c:	b508      	push	{r3, lr}
 801a50e:	88c2      	ldrh	r2, [r0, #6]
 801a510:	440a      	add	r2, r1
 801a512:	2a02      	cmp	r2, #2
 801a514:	dd05      	ble.n	801a522 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801a516:	4b06      	ldr	r3, [pc, #24]	; (801a530 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801a518:	21ec      	movs	r1, #236	; 0xec
 801a51a:	4a06      	ldr	r2, [pc, #24]	; (801a534 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801a51c:	4806      	ldr	r0, [pc, #24]	; (801a538 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801a51e:	f00a fc4d 	bl	8024dbc <__assert_func>
 801a522:	8883      	ldrh	r3, [r0, #4]
 801a524:	80c2      	strh	r2, [r0, #6]
 801a526:	1a59      	subs	r1, r3, r1
 801a528:	f001 0101 	and.w	r1, r1, #1
 801a52c:	8081      	strh	r1, [r0, #4]
 801a52e:	bd08      	pop	{r3, pc}
 801a530:	080289f7 	.word	0x080289f7
 801a534:	08028ec5 	.word	0x08028ec5
 801a538:	080289cb 	.word	0x080289cb

0801a53c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801a53c:	b508      	push	{r3, lr}
 801a53e:	88c3      	ldrh	r3, [r0, #6]
 801a540:	428b      	cmp	r3, r1
 801a542:	d805      	bhi.n	801a550 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801a544:	4b06      	ldr	r3, [pc, #24]	; (801a560 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801a546:	21fd      	movs	r1, #253	; 0xfd
 801a548:	4a06      	ldr	r2, [pc, #24]	; (801a564 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801a54a:	4807      	ldr	r0, [pc, #28]	; (801a568 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801a54c:	f00a fc36 	bl	8024dbc <__assert_func>
 801a550:	8883      	ldrh	r3, [r0, #4]
 801a552:	4419      	add	r1, r3
 801a554:	f001 0101 	and.w	r1, r1, #1
 801a558:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a55c:	bd08      	pop	{r3, pc}
 801a55e:	bf00      	nop
 801a560:	080289bd 	.word	0x080289bd
 801a564:	0802901d 	.word	0x0802901d
 801a568:	080289cb 	.word	0x080289cb

0801a56c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a56c:	b570      	push	{r4, r5, r6, lr}
 801a56e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801a570:	4604      	mov	r4, r0
 801a572:	b92a      	cbnz	r2, 801a580 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801a574:	4b12      	ldr	r3, [pc, #72]	; (801a5c0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801a576:	21de      	movs	r1, #222	; 0xde
 801a578:	4a12      	ldr	r2, [pc, #72]	; (801a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801a57a:	4813      	ldr	r0, [pc, #76]	; (801a5c8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801a57c:	f00a fc1e 	bl	8024dbc <__assert_func>
 801a580:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a582:	260a      	movs	r6, #10
 801a584:	3a01      	subs	r2, #1
 801a586:	3412      	adds	r4, #18
 801a588:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801a58c:	3301      	adds	r3, #1
 801a58e:	8b4d      	ldrh	r5, [r1, #26]
 801a590:	8602      	strh	r2, [r0, #48]	; 0x30
 801a592:	fbb3 f1f6 	udiv	r1, r3, r6
 801a596:	fb06 3311 	mls	r3, r6, r1, r3
 801a59a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a59c:	f7ff ff48 	bl	801a430 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a5a0:	88e3      	ldrh	r3, [r4, #6]
 801a5a2:	2101      	movs	r1, #1
 801a5a4:	2b02      	cmp	r3, #2
 801a5a6:	bf04      	itt	eq
 801a5a8:	2301      	moveq	r3, #1
 801a5aa:	80e3      	strheq	r3, [r4, #6]
 801a5ac:	4620      	mov	r0, r4
 801a5ae:	f7ff ffad 	bl	801a50c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a5b2:	4620      	mov	r0, r4
 801a5b4:	462a      	mov	r2, r5
 801a5b6:	2100      	movs	r1, #0
 801a5b8:	f7ff ffc0 	bl	801a53c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a5bc:	4628      	mov	r0, r5
 801a5be:	bd70      	pop	{r4, r5, r6, pc}
 801a5c0:	0802899c 	.word	0x0802899c
 801a5c4:	08028c0e 	.word	0x08028c0e
 801a5c8:	080289cb 	.word	0x080289cb

0801a5cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a5cc:	428a      	cmp	r2, r1
 801a5ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5d2:	4604      	mov	r4, r0
 801a5d4:	460e      	mov	r6, r1
 801a5d6:	4615      	mov	r5, r2
 801a5d8:	469a      	mov	sl, r3
 801a5da:	d92b      	bls.n	801a634 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801a5dc:	1a57      	subs	r7, r2, r1
 801a5de:	f04f 0800 	mov.w	r8, #0
 801a5e2:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801a5e6:	f04f 0b0a 	mov.w	fp, #10
 801a5ea:	b2bf      	uxth	r7, r7
 801a5ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a5ee:	b92b      	cbnz	r3, 801a5fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801a5f0:	4b24      	ldr	r3, [pc, #144]	; (801a684 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801a5f2:	21e6      	movs	r1, #230	; 0xe6
 801a5f4:	4a24      	ldr	r2, [pc, #144]	; (801a688 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801a5f6:	4825      	ldr	r0, [pc, #148]	; (801a68c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801a5f8:	f00a fbe0 	bl	8024dbc <__assert_func>
 801a5fc:	3b01      	subs	r3, #1
 801a5fe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a600:	2101      	movs	r1, #1
 801a602:	4648      	mov	r0, r9
 801a604:	b29b      	uxth	r3, r3
 801a606:	f108 0801 	add.w	r8, r8, #1
 801a60a:	441a      	add	r2, r3
 801a60c:	8623      	strh	r3, [r4, #48]	; 0x30
 801a60e:	fbb2 f3fb 	udiv	r3, r2, fp
 801a612:	fb0b 2313 	mls	r3, fp, r3, r2
 801a616:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a61a:	8b5a      	ldrh	r2, [r3, #26]
 801a61c:	9201      	str	r2, [sp, #4]
 801a61e:	f7ff ff75 	bl	801a50c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a622:	9a01      	ldr	r2, [sp, #4]
 801a624:	2100      	movs	r1, #0
 801a626:	4648      	mov	r0, r9
 801a628:	f7ff ff88 	bl	801a53c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a62c:	fa1f f388 	uxth.w	r3, r8
 801a630:	429f      	cmp	r7, r3
 801a632:	d8db      	bhi.n	801a5ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801a634:	f104 071a 	add.w	r7, r4, #26
 801a638:	4631      	mov	r1, r6
 801a63a:	260a      	movs	r6, #10
 801a63c:	4638      	mov	r0, r7
 801a63e:	f7ff febf 	bl	801a3c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a642:	b1c5      	cbz	r5, 801a676 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a644:	3d01      	subs	r5, #1
 801a646:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a648:	b2ad      	uxth	r5, r5
 801a64a:	2b09      	cmp	r3, #9
 801a64c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801a650:	d903      	bls.n	801a65a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801a652:	4b0f      	ldr	r3, [pc, #60]	; (801a690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801a654:	21ec      	movs	r1, #236	; 0xec
 801a656:	4a0f      	ldr	r2, [pc, #60]	; (801a694 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801a658:	e7cd      	b.n	801a5f6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801a65a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801a65c:	3301      	adds	r3, #1
 801a65e:	3109      	adds	r1, #9
 801a660:	8623      	strh	r3, [r4, #48]	; 0x30
 801a662:	fbb1 f0f6 	udiv	r0, r1, r6
 801a666:	fb06 1110 	mls	r1, r6, r0, r1
 801a66a:	4638      	mov	r0, r7
 801a66c:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801a66e:	2100      	movs	r1, #0
 801a670:	f7ff fd5a 	bl	801a128 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a674:	e7e5      	b.n	801a642 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801a676:	4620      	mov	r0, r4
 801a678:	b003      	add	sp, #12
 801a67a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a67e:	f7ff bed7 	b.w	801a430 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a682:	bf00      	nop
 801a684:	0802899c 	.word	0x0802899c
 801a688:	08028a92 	.word	0x08028a92
 801a68c:	080289cb 	.word	0x080289cb
 801a690:	080289f7 	.word	0x080289f7
 801a694:	08028a0a 	.word	0x08028a0a

0801a698 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a69c:	4605      	mov	r5, r0
 801a69e:	4616      	mov	r6, r2
 801a6a0:	1c8c      	adds	r4, r1, #2
 801a6a2:	8809      	ldrh	r1, [r1, #0]
 801a6a4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a6a8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a6ac:	42b3      	cmp	r3, r6
 801a6ae:	d124      	bne.n	801a6fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a6b0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a6b4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a6b8:	f001 070f 	and.w	r7, r1, #15
 801a6bc:	4652      	mov	r2, sl
 801a6be:	f8cd 8000 	str.w	r8, [sp]
 801a6c2:	464b      	mov	r3, r9
 801a6c4:	4621      	mov	r1, r4
 801a6c6:	4628      	mov	r0, r5
 801a6c8:	f7ff fe3e 	bl	801a348 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a6cc:	4683      	mov	fp, r0
 801a6ce:	b168      	cbz	r0, 801a6ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a6d0:	eb0a 0109 	add.w	r1, sl, r9
 801a6d4:	463a      	mov	r2, r7
 801a6d6:	4628      	mov	r0, r5
 801a6d8:	4441      	add	r1, r8
 801a6da:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a6de:	4649      	mov	r1, r9
 801a6e0:	f7ff ff74 	bl	801a5cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a6e4:	4658      	mov	r0, fp
 801a6e6:	b003      	add	sp, #12
 801a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6ec:	eb07 010a 	add.w	r1, r7, sl
 801a6f0:	4449      	add	r1, r9
 801a6f2:	4441      	add	r1, r8
 801a6f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a6f8:	e7d2      	b.n	801a6a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a6fa:	f04f 0b00 	mov.w	fp, #0
 801a6fe:	e7f1      	b.n	801a6e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a700 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a704:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a706:	4604      	mov	r4, r0
 801a708:	260b      	movs	r6, #11
 801a70a:	f100 091a 	add.w	r9, r0, #26
 801a70e:	886f      	ldrh	r7, [r5, #2]
 801a710:	087f      	lsrs	r7, r7, #1
 801a712:	3e01      	subs	r6, #1
 801a714:	d013      	beq.n	801a73e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a716:	2100      	movs	r1, #0
 801a718:	4648      	mov	r0, r9
 801a71a:	f7ff fd1f 	bl	801a15c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a71e:	462a      	mov	r2, r5
 801a720:	4680      	mov	r8, r0
 801a722:	4603      	mov	r3, r0
 801a724:	4639      	mov	r1, r7
 801a726:	4620      	mov	r0, r4
 801a728:	f7ff fce0 	bl	801a0ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a72c:	b138      	cbz	r0, 801a73e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a72e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a732:	4642      	mov	r2, r8
 801a734:	4620      	mov	r0, r4
 801a736:	f7ff ffaf 	bl	801a698 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a73a:	2800      	cmp	r0, #0
 801a73c:	d1e9      	bne.n	801a712 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801a73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801a744:	4b1e      	ldr	r3, [pc, #120]	; (801a7c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801a746:	b570      	push	{r4, r5, r6, lr}
 801a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a74c:	4604      	mov	r4, r0
 801a74e:	f003 0501 	and.w	r5, r3, #1
 801a752:	b902      	cbnz	r2, 801a756 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801a754:	b165      	cbz	r5, 801a770 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801a756:	105b      	asrs	r3, r3, #1
 801a758:	f104 061a 	add.w	r6, r4, #26
 801a75c:	18e0      	adds	r0, r4, r3
 801a75e:	b10d      	cbz	r5, 801a764 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801a760:	58e3      	ldr	r3, [r4, r3]
 801a762:	589a      	ldr	r2, [r3, r2]
 801a764:	4790      	blx	r2
 801a766:	2100      	movs	r1, #0
 801a768:	4602      	mov	r2, r0
 801a76a:	4630      	mov	r0, r6
 801a76c:	f7ff fcdc 	bl	801a128 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a770:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a772:	b303      	cbz	r3, 801a7b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a774:	f104 051a 	add.w	r5, r4, #26
 801a778:	2100      	movs	r1, #0
 801a77a:	4628      	mov	r0, r5
 801a77c:	f7ff fcee 	bl	801a15c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a780:	b1c8      	cbz	r0, 801a7b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a782:	4620      	mov	r0, r4
 801a784:	f7ff ffbc 	bl	801a700 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801a788:	2101      	movs	r1, #1
 801a78a:	4628      	mov	r0, r5
 801a78c:	f7ff fce6 	bl	801a15c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a790:	f640 133f 	movw	r3, #2367	; 0x93f
 801a794:	4606      	mov	r6, r0
 801a796:	4298      	cmp	r0, r3
 801a798:	d10d      	bne.n	801a7b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a79a:	2100      	movs	r1, #0
 801a79c:	4628      	mov	r0, r5
 801a79e:	f7ff fcdd 	bl	801a15c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a7a2:	2101      	movs	r1, #1
 801a7a4:	4602      	mov	r2, r0
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	f7ff fcbe 	bl	801a128 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a7ac:	4632      	mov	r2, r6
 801a7ae:	2100      	movs	r1, #0
 801a7b0:	4628      	mov	r0, r5
 801a7b2:	f7ff fcb9 	bl	801a128 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a7b6:	4620      	mov	r0, r4
 801a7b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7bc:	f7ff bed6 	b.w	801a56c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a7c0:	20008640 	.word	0x20008640

0801a7c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7c6:	4617      	mov	r7, r2
 801a7c8:	461e      	mov	r6, r3
 801a7ca:	4605      	mov	r5, r0
 801a7cc:	f7ff ffba 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a7d0:	683b      	ldr	r3, [r7, #0]
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	4601      	mov	r1, r0
 801a7d6:	4638      	mov	r0, r7
 801a7d8:	68db      	ldr	r3, [r3, #12]
 801a7da:	4798      	blx	r3
 801a7dc:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	6030      	str	r0, [r6, #0]
 801a7e4:	b29b      	uxth	r3, r3
 801a7e6:	2b7f      	cmp	r3, #127	; 0x7f
 801a7e8:	d813      	bhi.n	801a812 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a7ea:	4639      	mov	r1, r7
 801a7ec:	4628      	mov	r0, r5
 801a7ee:	f7ff fccf 	bl	801a190 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a7f2:	6030      	str	r0, [r6, #0]
 801a7f4:	6833      	ldr	r3, [r6, #0]
 801a7f6:	b143      	cbz	r3, 801a80a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a7f8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a7fc:	7a9b      	ldrb	r3, [r3, #10]
 801a7fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a802:	4313      	orrs	r3, r2
 801a804:	bf0c      	ite	eq
 801a806:	2301      	moveq	r3, #1
 801a808:	2300      	movne	r3, #0
 801a80a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a80e:	4620      	mov	r0, r4
 801a810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a812:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a816:	2b00      	cmp	r3, #0
 801a818:	d0ec      	beq.n	801a7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a81a:	f640 1302 	movw	r3, #2306	; 0x902
 801a81e:	429c      	cmp	r4, r3
 801a820:	d1e8      	bne.n	801a7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a822:	4601      	mov	r1, r0
 801a824:	4628      	mov	r0, r5
 801a826:	f7ff fc32 	bl	801a08e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a82a:	e7e2      	b.n	801a7f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a82c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a830:	4617      	mov	r7, r2
 801a832:	461e      	mov	r6, r3
 801a834:	4605      	mov	r5, r0
 801a836:	f7ff ff85 	bl	801a744 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	4604      	mov	r4, r0
 801a83e:	4601      	mov	r1, r0
 801a840:	4638      	mov	r0, r7
 801a842:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a84a:	47c0      	blx	r8
 801a84c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a850:	4602      	mov	r2, r0
 801a852:	6030      	str	r0, [r6, #0]
 801a854:	b29b      	uxth	r3, r3
 801a856:	2b7f      	cmp	r3, #127	; 0x7f
 801a858:	d814      	bhi.n	801a884 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a85a:	4639      	mov	r1, r7
 801a85c:	4628      	mov	r0, r5
 801a85e:	f7ff fc97 	bl	801a190 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a862:	6030      	str	r0, [r6, #0]
 801a864:	6833      	ldr	r3, [r6, #0]
 801a866:	b143      	cbz	r3, 801a87a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a868:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a86c:	7a9b      	ldrb	r3, [r3, #10]
 801a86e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a872:	4313      	orrs	r3, r2
 801a874:	bf0c      	ite	eq
 801a876:	2301      	moveq	r3, #1
 801a878:	2300      	movne	r3, #0
 801a87a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a87e:	4620      	mov	r0, r4
 801a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a884:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d0eb      	beq.n	801a864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a88c:	f640 1302 	movw	r3, #2306	; 0x902
 801a890:	429c      	cmp	r4, r3
 801a892:	d1e7      	bne.n	801a864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a894:	4601      	mov	r1, r0
 801a896:	4628      	mov	r0, r5
 801a898:	f7ff fbf9 	bl	801a08e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a89c:	e7e1      	b.n	801a862 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801a89e <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a89e:	4602      	mov	r2, r0
 801a8a0:	b148      	cbz	r0, 801a8b6 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	b298      	uxth	r0, r3
 801a8a6:	3301      	adds	r3, #1
 801a8a8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a8ac:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a8b0:	2900      	cmp	r1, #0
 801a8b2:	d1f7      	bne.n	801a8a4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a8b4:	4770      	bx	lr
 801a8b6:	4770      	bx	lr

0801a8b8 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801a8b8:	b140      	cbz	r0, 801a8cc <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801a8ba:	4602      	mov	r2, r0
 801a8bc:	1a13      	subs	r3, r2, r0
 801a8be:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a8c2:	b29b      	uxth	r3, r3
 801a8c4:	2900      	cmp	r1, #0
 801a8c6:	d1f9      	bne.n	801a8bc <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	4770      	bx	lr
 801a8cc:	4603      	mov	r3, r0
 801a8ce:	e7fb      	b.n	801a8c8 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801a8d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a8d0:	b530      	push	{r4, r5, lr}
 801a8d2:	4604      	mov	r4, r0
 801a8d4:	b159      	cbz	r1, 801a8ee <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a8d6:	b148      	cbz	r0, 801a8ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a8d8:	2300      	movs	r3, #0
 801a8da:	b298      	uxth	r0, r3
 801a8dc:	4282      	cmp	r2, r0
 801a8de:	d905      	bls.n	801a8ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a8e0:	5ccd      	ldrb	r5, [r1, r3]
 801a8e2:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a8e6:	3301      	adds	r3, #1
 801a8e8:	2d00      	cmp	r5, #0
 801a8ea:	d1f6      	bne.n	801a8da <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a8ec:	bd30      	pop	{r4, r5, pc}
 801a8ee:	4608      	mov	r0, r1
 801a8f0:	e7fc      	b.n	801a8ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a8f2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a8f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8f4:	468c      	mov	ip, r1
 801a8f6:	b08b      	sub	sp, #44	; 0x2c
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	ae01      	add	r6, sp, #4
 801a8fc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a900:	211f      	movs	r1, #31
 801a902:	fbb0 f7f3 	udiv	r7, r0, r3
 801a906:	fb03 0517 	mls	r5, r3, r7, r0
 801a90a:	4638      	mov	r0, r7
 801a90c:	b2ec      	uxtb	r4, r5
 801a90e:	2d09      	cmp	r5, #9
 801a910:	bfd4      	ite	le
 801a912:	3430      	addle	r4, #48	; 0x30
 801a914:	3457      	addgt	r4, #87	; 0x57
 801a916:	b2e4      	uxtb	r4, r4
 801a918:	558c      	strb	r4, [r1, r6]
 801a91a:	1e4c      	subs	r4, r1, #1
 801a91c:	b92f      	cbnz	r7, 801a92a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a91e:	4431      	add	r1, r6
 801a920:	4660      	mov	r0, ip
 801a922:	f7ff ffd5 	bl	801a8d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a926:	b00b      	add	sp, #44	; 0x2c
 801a928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a92a:	4621      	mov	r1, r4
 801a92c:	e7e9      	b.n	801a902 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a92e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a92e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a930:	4607      	mov	r7, r0
 801a932:	b08b      	sub	sp, #44	; 0x2c
 801a934:	4608      	mov	r0, r1
 801a936:	b341      	cbz	r1, 801a98a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a938:	1e99      	subs	r1, r3, #2
 801a93a:	290e      	cmp	r1, #14
 801a93c:	d825      	bhi.n	801a98a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a93e:	2100      	movs	r1, #0
 801a940:	463c      	mov	r4, r7
 801a942:	261f      	movs	r6, #31
 801a944:	f10d 0c04 	add.w	ip, sp, #4
 801a948:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a94c:	1e71      	subs	r1, r6, #1
 801a94e:	fb94 fef3 	sdiv	lr, r4, r3
 801a952:	fb03 441e 	mls	r4, r3, lr, r4
 801a956:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a95a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a95e:	b2ec      	uxtb	r4, r5
 801a960:	2d09      	cmp	r5, #9
 801a962:	bfd4      	ite	le
 801a964:	3430      	addle	r4, #48	; 0x30
 801a966:	3457      	addgt	r4, #87	; 0x57
 801a968:	b2e4      	uxtb	r4, r4
 801a96a:	f80c 4006 	strb.w	r4, [ip, r6]
 801a96e:	4674      	mov	r4, lr
 801a970:	b96c      	cbnz	r4, 801a98e <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a972:	2f00      	cmp	r7, #0
 801a974:	da05      	bge.n	801a982 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a976:	ab0a      	add	r3, sp, #40	; 0x28
 801a978:	4419      	add	r1, r3
 801a97a:	232d      	movs	r3, #45	; 0x2d
 801a97c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a980:	1eb1      	subs	r1, r6, #2
 801a982:	3101      	adds	r1, #1
 801a984:	4461      	add	r1, ip
 801a986:	f7ff ffa3 	bl	801a8d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a98a:	b00b      	add	sp, #44	; 0x2c
 801a98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a98e:	460e      	mov	r6, r1
 801a990:	e7dc      	b.n	801a94c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a992 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801a992:	b510      	push	{r4, lr}
 801a994:	b158      	cbz	r0, 801a9ae <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a996:	1e82      	subs	r2, r0, #2
 801a998:	210a      	movs	r1, #10
 801a99a:	2000      	movs	r0, #0
 801a99c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a9a0:	3b30      	subs	r3, #48	; 0x30
 801a9a2:	b29c      	uxth	r4, r3
 801a9a4:	2c09      	cmp	r4, #9
 801a9a6:	d802      	bhi.n	801a9ae <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a9a8:	fb01 3000 	mla	r0, r1, r0, r3
 801a9ac:	e7f6      	b.n	801a99c <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801a9ae:	bd10      	pop	{r4, pc}

0801a9b0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b4:	b085      	sub	sp, #20
 801a9b6:	f8d0 8000 	ldr.w	r8, [r0]
 801a9ba:	468a      	mov	sl, r1
 801a9bc:	461c      	mov	r4, r3
 801a9be:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a9c2:	4681      	mov	r9, r0
 801a9c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a9c8:	4640      	mov	r0, r8
 801a9ca:	9203      	str	r2, [sp, #12]
 801a9cc:	9102      	str	r1, [sp, #8]
 801a9ce:	9301      	str	r3, [sp, #4]
 801a9d0:	f7ff ff65 	bl	801a89e <_ZN8touchgfx7Unicode6strlenEPKt>
 801a9d4:	9a03      	ldr	r2, [sp, #12]
 801a9d6:	f1ba 0f00 	cmp.w	sl, #0
 801a9da:	bf0c      	ite	eq
 801a9dc:	4684      	moveq	ip, r0
 801a9de:	f100 0c01 	addne.w	ip, r0, #1
 801a9e2:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801a9e6:	8812      	ldrh	r2, [r2, #0]
 801a9e8:	fa1f fc8c 	uxth.w	ip, ip
 801a9ec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a9ee:	2a69      	cmp	r2, #105	; 0x69
 801a9f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a9f2:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801a9f4:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801a9f8:	d004      	beq.n	801aa04 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a9fa:	d844      	bhi.n	801aa86 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801a9fc:	2a58      	cmp	r2, #88	; 0x58
 801a9fe:	d001      	beq.n	801aa04 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801aa00:	2a64      	cmp	r2, #100	; 0x64
 801aa02:	d14b      	bne.n	801aa9c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801aa04:	b1a4      	cbz	r4, 801aa30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801aa06:	b956      	cbnz	r6, 801aa1e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801aa08:	2801      	cmp	r0, #1
 801aa0a:	d108      	bne.n	801aa1e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801aa0c:	f8b8 2000 	ldrh.w	r2, [r8]
 801aa10:	2a30      	cmp	r2, #48	; 0x30
 801aa12:	bf02      	ittt	eq
 801aa14:	f108 0202 	addeq.w	r2, r8, #2
 801aa18:	4630      	moveq	r0, r6
 801aa1a:	f8c9 2000 	streq.w	r2, [r9]
 801aa1e:	45b4      	cmp	ip, r6
 801aa20:	da3e      	bge.n	801aaa0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801aa22:	b2b6      	uxth	r6, r6
 801aa24:	eba6 040c 	sub.w	r4, r6, ip
 801aa28:	46b4      	mov	ip, r6
 801aa2a:	b2a4      	uxth	r4, r4
 801aa2c:	f04f 0b00 	mov.w	fp, #0
 801aa30:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801aa34:	3a01      	subs	r2, #1
 801aa36:	b169      	cbz	r1, 801aa54 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801aa38:	9911      	ldr	r1, [sp, #68]	; 0x44
 801aa3a:	458c      	cmp	ip, r1
 801aa3c:	da09      	bge.n	801aa52 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801aa3e:	eba1 010c 	sub.w	r1, r1, ip
 801aa42:	b289      	uxth	r1, r1
 801aa44:	b933      	cbnz	r3, 801aa54 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801aa46:	f1bb 0f00 	cmp.w	fp, #0
 801aa4a:	d02b      	beq.n	801aaa4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801aa4c:	b350      	cbz	r0, 801aaa4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801aa4e:	440c      	add	r4, r1
 801aa50:	b2a4      	uxth	r4, r4
 801aa52:	2100      	movs	r1, #0
 801aa54:	682b      	ldr	r3, [r5, #0]
 801aa56:	4293      	cmp	r3, r2
 801aa58:	da07      	bge.n	801aa6a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801aa5a:	f1ba 0f00 	cmp.w	sl, #0
 801aa5e:	d004      	beq.n	801aa6a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801aa60:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801aa64:	682b      	ldr	r3, [r5, #0]
 801aa66:	3301      	adds	r3, #1
 801aa68:	602b      	str	r3, [r5, #0]
 801aa6a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801aa6e:	b354      	cbz	r4, 801aac6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801aa70:	682e      	ldr	r6, [r5, #0]
 801aa72:	3c01      	subs	r4, #1
 801aa74:	42b2      	cmp	r2, r6
 801aa76:	b2a4      	uxth	r4, r4
 801aa78:	dd25      	ble.n	801aac6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801aa7a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801aa7e:	682b      	ldr	r3, [r5, #0]
 801aa80:	3301      	adds	r3, #1
 801aa82:	602b      	str	r3, [r5, #0]
 801aa84:	e7f3      	b.n	801aa6e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801aa86:	2a73      	cmp	r2, #115	; 0x73
 801aa88:	d003      	beq.n	801aa92 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801aa8a:	2a78      	cmp	r2, #120	; 0x78
 801aa8c:	d0ba      	beq.n	801aa04 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801aa8e:	2a6f      	cmp	r2, #111	; 0x6f
 801aa90:	e7b7      	b.n	801aa02 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801aa92:	2c00      	cmp	r4, #0
 801aa94:	d0cc      	beq.n	801aa30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801aa96:	42b0      	cmp	r0, r6
 801aa98:	dd00      	ble.n	801aa9c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801aa9a:	b2b0      	uxth	r0, r6
 801aa9c:	2400      	movs	r4, #0
 801aa9e:	e7c7      	b.n	801aa30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801aaa0:	2400      	movs	r4, #0
 801aaa2:	e7c3      	b.n	801aa2c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801aaa4:	2900      	cmp	r1, #0
 801aaa6:	d0d5      	beq.n	801aa54 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801aaa8:	f04f 0c20 	mov.w	ip, #32
 801aaac:	682e      	ldr	r6, [r5, #0]
 801aaae:	2900      	cmp	r1, #0
 801aab0:	d0d0      	beq.n	801aa54 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801aab2:	3901      	subs	r1, #1
 801aab4:	4296      	cmp	r6, r2
 801aab6:	b289      	uxth	r1, r1
 801aab8:	dacb      	bge.n	801aa52 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801aaba:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801aabe:	682b      	ldr	r3, [r5, #0]
 801aac0:	3301      	adds	r3, #1
 801aac2:	602b      	str	r3, [r5, #0]
 801aac4:	e7f2      	b.n	801aaac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801aac6:	b198      	cbz	r0, 801aaf0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aac8:	f8d9 3000 	ldr.w	r3, [r9]
 801aacc:	881c      	ldrh	r4, [r3, #0]
 801aace:	b17c      	cbz	r4, 801aaf0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aad0:	682c      	ldr	r4, [r5, #0]
 801aad2:	3801      	subs	r0, #1
 801aad4:	42a2      	cmp	r2, r4
 801aad6:	b280      	uxth	r0, r0
 801aad8:	dd0a      	ble.n	801aaf0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801aada:	1c9c      	adds	r4, r3, #2
 801aadc:	f8c9 4000 	str.w	r4, [r9]
 801aae0:	881c      	ldrh	r4, [r3, #0]
 801aae2:	682b      	ldr	r3, [r5, #0]
 801aae4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801aae8:	682b      	ldr	r3, [r5, #0]
 801aaea:	3301      	adds	r3, #1
 801aaec:	602b      	str	r3, [r5, #0]
 801aaee:	e7ea      	b.n	801aac6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801aaf0:	2620      	movs	r6, #32
 801aaf2:	b151      	cbz	r1, 801ab0a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801aaf4:	6828      	ldr	r0, [r5, #0]
 801aaf6:	3901      	subs	r1, #1
 801aaf8:	4282      	cmp	r2, r0
 801aafa:	b289      	uxth	r1, r1
 801aafc:	dd05      	ble.n	801ab0a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801aafe:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801ab02:	682b      	ldr	r3, [r5, #0]
 801ab04:	3301      	adds	r3, #1
 801ab06:	602b      	str	r3, [r5, #0]
 801ab08:	e7f3      	b.n	801aaf2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801ab0a:	b005      	add	sp, #20
 801ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ab16:	4604      	mov	r4, r0
 801ab18:	f04f 0801 	mov.w	r8, #1
 801ab1c:	2000      	movs	r0, #0
 801ab1e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801ab22:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801ab26:	8008      	strh	r0, [r1, #0]
 801ab28:	7010      	strb	r0, [r2, #0]
 801ab2a:	7018      	strb	r0, [r3, #0]
 801ab2c:	f88c 0000 	strb.w	r0, [ip]
 801ab30:	f88e 0000 	strb.w	r0, [lr]
 801ab34:	7030      	strb	r0, [r6, #0]
 801ab36:	6820      	ldr	r0, [r4, #0]
 801ab38:	8800      	ldrh	r0, [r0, #0]
 801ab3a:	b190      	cbz	r0, 801ab62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801ab3c:	282b      	cmp	r0, #43	; 0x2b
 801ab3e:	d001      	beq.n	801ab44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801ab40:	2820      	cmp	r0, #32
 801ab42:	d104      	bne.n	801ab4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801ab44:	8008      	strh	r0, [r1, #0]
 801ab46:	6820      	ldr	r0, [r4, #0]
 801ab48:	3002      	adds	r0, #2
 801ab4a:	6020      	str	r0, [r4, #0]
 801ab4c:	e7f3      	b.n	801ab36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801ab4e:	282d      	cmp	r0, #45	; 0x2d
 801ab50:	d102      	bne.n	801ab58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801ab52:	f882 8000 	strb.w	r8, [r2]
 801ab56:	e7f6      	b.n	801ab46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801ab58:	2823      	cmp	r0, #35	; 0x23
 801ab5a:	d102      	bne.n	801ab62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801ab5c:	f883 8000 	strb.w	r8, [r3]
 801ab60:	e7f1      	b.n	801ab46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801ab62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ab66:	2b09      	cmp	r3, #9
 801ab68:	d901      	bls.n	801ab6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801ab6a:	282a      	cmp	r0, #42	; 0x2a
 801ab6c:	d114      	bne.n	801ab98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801ab6e:	2201      	movs	r2, #1
 801ab70:	f88e 2000 	strb.w	r2, [lr]
 801ab74:	6823      	ldr	r3, [r4, #0]
 801ab76:	8819      	ldrh	r1, [r3, #0]
 801ab78:	2930      	cmp	r1, #48	; 0x30
 801ab7a:	bf02      	ittt	eq
 801ab7c:	3302      	addeq	r3, #2
 801ab7e:	6023      	streq	r3, [r4, #0]
 801ab80:	f88c 2000 	strbeq.w	r2, [ip]
 801ab84:	6820      	ldr	r0, [r4, #0]
 801ab86:	8803      	ldrh	r3, [r0, #0]
 801ab88:	2b2a      	cmp	r3, #42	; 0x2a
 801ab8a:	d11e      	bne.n	801abca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801ab8c:	f04f 33ff 	mov.w	r3, #4294967295
 801ab90:	603b      	str	r3, [r7, #0]
 801ab92:	6823      	ldr	r3, [r4, #0]
 801ab94:	3302      	adds	r3, #2
 801ab96:	6023      	str	r3, [r4, #0]
 801ab98:	6823      	ldr	r3, [r4, #0]
 801ab9a:	881b      	ldrh	r3, [r3, #0]
 801ab9c:	2b2e      	cmp	r3, #46	; 0x2e
 801ab9e:	d112      	bne.n	801abc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801aba0:	2301      	movs	r3, #1
 801aba2:	7033      	strb	r3, [r6, #0]
 801aba4:	6823      	ldr	r3, [r4, #0]
 801aba6:	1c98      	adds	r0, r3, #2
 801aba8:	6020      	str	r0, [r4, #0]
 801abaa:	885b      	ldrh	r3, [r3, #2]
 801abac:	2b2a      	cmp	r3, #42	; 0x2a
 801abae:	d117      	bne.n	801abe0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801abb0:	f04f 33ff 	mov.w	r3, #4294967295
 801abb4:	602b      	str	r3, [r5, #0]
 801abb6:	6823      	ldr	r3, [r4, #0]
 801abb8:	3302      	adds	r3, #2
 801abba:	6023      	str	r3, [r4, #0]
 801abbc:	682b      	ldr	r3, [r5, #0]
 801abbe:	2b06      	cmp	r3, #6
 801abc0:	bfa8      	it	ge
 801abc2:	2306      	movge	r3, #6
 801abc4:	602b      	str	r3, [r5, #0]
 801abc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abca:	f7ff fee2 	bl	801a992 <_ZN8touchgfx7Unicode4atoiEPKt>
 801abce:	6038      	str	r0, [r7, #0]
 801abd0:	6823      	ldr	r3, [r4, #0]
 801abd2:	881a      	ldrh	r2, [r3, #0]
 801abd4:	3a30      	subs	r2, #48	; 0x30
 801abd6:	2a09      	cmp	r2, #9
 801abd8:	d8de      	bhi.n	801ab98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801abda:	3302      	adds	r3, #2
 801abdc:	6023      	str	r3, [r4, #0]
 801abde:	e7f7      	b.n	801abd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801abe0:	f7ff fed7 	bl	801a992 <_ZN8touchgfx7Unicode4atoiEPKt>
 801abe4:	6028      	str	r0, [r5, #0]
 801abe6:	6823      	ldr	r3, [r4, #0]
 801abe8:	881a      	ldrh	r2, [r3, #0]
 801abea:	3a30      	subs	r2, #48	; 0x30
 801abec:	2a09      	cmp	r2, #9
 801abee:	d8e5      	bhi.n	801abbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801abf0:	3302      	adds	r3, #2
 801abf2:	6023      	str	r3, [r4, #0]
 801abf4:	e7f7      	b.n	801abe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801abf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801abf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abfa:	b0a2      	sub	sp, #136	; 0x88
 801abfc:	2500      	movs	r5, #0
 801abfe:	4606      	mov	r6, r0
 801ac00:	460f      	mov	r7, r1
 801ac02:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ac06:	9209      	str	r2, [sp, #36]	; 0x24
 801ac08:	4629      	mov	r1, r5
 801ac0a:	2242      	movs	r2, #66	; 0x42
 801ac0c:	4640      	mov	r0, r8
 801ac0e:	461c      	mov	r4, r3
 801ac10:	950d      	str	r5, [sp, #52]	; 0x34
 801ac12:	f7fe fe26 	bl	8019862 <_ZN8touchgfx6memsetEPvhm>
 801ac16:	b30e      	cbz	r6, 801ac5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801ac18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac1a:	b1f3      	cbz	r3, 801ac5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801ac1c:	f107 3aff 	add.w	sl, r7, #4294967295
 801ac20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac24:	8812      	ldrh	r2, [r2, #0]
 801ac26:	2a00      	cmp	r2, #0
 801ac28:	f000 80b3 	beq.w	801ad92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801ac2c:	459a      	cmp	sl, r3
 801ac2e:	f340 80b0 	ble.w	801ad92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801ac32:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ac36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac38:	f8b9 2000 	ldrh.w	r2, [r9]
 801ac3c:	2a00      	cmp	r2, #0
 801ac3e:	d0ef      	beq.n	801ac20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ac40:	2a25      	cmp	r2, #37	; 0x25
 801ac42:	f000 80aa 	beq.w	801ad9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801ac46:	459a      	cmp	sl, r3
 801ac48:	ddea      	ble.n	801ac20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ac4a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ac4e:	f109 0202 	add.w	r2, r9, #2
 801ac52:	3301      	adds	r3, #1
 801ac54:	9209      	str	r2, [sp, #36]	; 0x24
 801ac56:	930d      	str	r3, [sp, #52]	; 0x34
 801ac58:	e7eb      	b.n	801ac32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801ac5a:	8033      	strh	r3, [r6, #0]
 801ac5c:	4630      	mov	r0, r6
 801ac5e:	b022      	add	sp, #136	; 0x88
 801ac60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac64:	3b63      	subs	r3, #99	; 0x63
 801ac66:	2b01      	cmp	r3, #1
 801ac68:	f200 80df 	bhi.w	801ae2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ac6c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ac70:	8813      	ldrh	r3, [r2, #0]
 801ac72:	2b69      	cmp	r3, #105	; 0x69
 801ac74:	d058      	beq.n	801ad28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ac76:	d81b      	bhi.n	801acb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801ac78:	2b63      	cmp	r3, #99	; 0x63
 801ac7a:	d02e      	beq.n	801acda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801ac7c:	2b64      	cmp	r3, #100	; 0x64
 801ac7e:	d053      	beq.n	801ad28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ac80:	2b58      	cmp	r3, #88	; 0x58
 801ac82:	d06f      	beq.n	801ad64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801ac84:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801ac88:	46a1      	mov	r9, r4
 801ac8a:	e02d      	b.n	801ace8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ac8c:	2b73      	cmp	r3, #115	; 0x73
 801ac8e:	d0ed      	beq.n	801ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac90:	d803      	bhi.n	801ac9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801ac92:	2b6f      	cmp	r3, #111	; 0x6f
 801ac94:	f040 80c9 	bne.w	801ae2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ac98:	e7e8      	b.n	801ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac9a:	2b75      	cmp	r3, #117	; 0x75
 801ac9c:	d0e6      	beq.n	801ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac9e:	2b78      	cmp	r3, #120	; 0x78
 801aca0:	e7f8      	b.n	801ac94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801aca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aca4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801aca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acaa:	3302      	adds	r3, #2
 801acac:	9309      	str	r3, [sp, #36]	; 0x24
 801acae:	e7b7      	b.n	801ac20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801acb0:	2b73      	cmp	r3, #115	; 0x73
 801acb2:	d034      	beq.n	801ad1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801acb4:	d807      	bhi.n	801acc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801acb6:	2b6f      	cmp	r3, #111	; 0x6f
 801acb8:	d1e4      	bne.n	801ac84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801acba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801acbc:	f104 0904 	add.w	r9, r4, #4
 801acc0:	2308      	movs	r3, #8
 801acc2:	1aba      	subs	r2, r7, r2
 801acc4:	e048      	b.n	801ad58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801acc6:	2b75      	cmp	r3, #117	; 0x75
 801acc8:	d041      	beq.n	801ad4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801acca:	2b78      	cmp	r3, #120	; 0x78
 801accc:	d1da      	bne.n	801ac84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801acce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801acd0:	f104 0904 	add.w	r9, r4, #4
 801acd4:	2310      	movs	r3, #16
 801acd6:	1aba      	subs	r2, r7, r2
 801acd8:	e03e      	b.n	801ad58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801acda:	7823      	ldrb	r3, [r4, #0]
 801acdc:	f104 0904 	add.w	r9, r4, #4
 801ace0:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801ace4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ace8:	aa0d      	add	r2, sp, #52	; 0x34
 801acea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801acee:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801acf2:	a810      	add	r0, sp, #64	; 0x40
 801acf4:	9205      	str	r2, [sp, #20]
 801acf6:	464c      	mov	r4, r9
 801acf8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801acfc:	9204      	str	r2, [sp, #16]
 801acfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ad00:	9203      	str	r2, [sp, #12]
 801ad02:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ad06:	9202      	str	r2, [sp, #8]
 801ad08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad0a:	9201      	str	r2, [sp, #4]
 801ad0c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801ad10:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801ad14:	9200      	str	r2, [sp, #0]
 801ad16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad18:	f7ff fe4a 	bl	801a9b0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801ad1c:	e7c4      	b.n	801aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801ad1e:	f104 0904 	add.w	r9, r4, #4
 801ad22:	6823      	ldr	r3, [r4, #0]
 801ad24:	9310      	str	r3, [sp, #64]	; 0x40
 801ad26:	e7df      	b.n	801ace8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ad28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad2a:	230a      	movs	r3, #10
 801ad2c:	4641      	mov	r1, r8
 801ad2e:	6820      	ldr	r0, [r4, #0]
 801ad30:	1aba      	subs	r2, r7, r2
 801ad32:	f104 0904 	add.w	r9, r4, #4
 801ad36:	b292      	uxth	r2, r2
 801ad38:	f7ff fdf9 	bl	801a92e <_ZN8touchgfx7Unicode4itoaElPtti>
 801ad3c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ad40:	2b2d      	cmp	r3, #45	; 0x2d
 801ad42:	d1d1      	bne.n	801ace8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ad44:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ad48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad4a:	3302      	adds	r3, #2
 801ad4c:	e7ea      	b.n	801ad24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801ad4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad50:	f104 0904 	add.w	r9, r4, #4
 801ad54:	230a      	movs	r3, #10
 801ad56:	1aba      	subs	r2, r7, r2
 801ad58:	b292      	uxth	r2, r2
 801ad5a:	4641      	mov	r1, r8
 801ad5c:	6820      	ldr	r0, [r4, #0]
 801ad5e:	f7ff fdc8 	bl	801a8f2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ad62:	e7c1      	b.n	801ace8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ad64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad66:	2310      	movs	r3, #16
 801ad68:	4641      	mov	r1, r8
 801ad6a:	6820      	ldr	r0, [r4, #0]
 801ad6c:	1aba      	subs	r2, r7, r2
 801ad6e:	f104 0904 	add.w	r9, r4, #4
 801ad72:	b292      	uxth	r2, r2
 801ad74:	f7ff fdbd 	bl	801a8f2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ad78:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ad7c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d0b1      	beq.n	801ace8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ad84:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ad88:	2919      	cmp	r1, #25
 801ad8a:	d8f7      	bhi.n	801ad7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801ad8c:	3b20      	subs	r3, #32
 801ad8e:	8013      	strh	r3, [r2, #0]
 801ad90:	e7f4      	b.n	801ad7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801ad92:	2200      	movs	r2, #0
 801ad94:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ad98:	e760      	b.n	801ac5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801ad9a:	459a      	cmp	sl, r3
 801ad9c:	f77f af40 	ble.w	801ac20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ada0:	f109 0302 	add.w	r3, r9, #2
 801ada4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801ada8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801adac:	a809      	add	r0, sp, #36	; 0x24
 801adae:	9309      	str	r3, [sp, #36]	; 0x24
 801adb0:	ab0f      	add	r3, sp, #60	; 0x3c
 801adb2:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801adb6:	9304      	str	r3, [sp, #16]
 801adb8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801adbc:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801adc0:	9303      	str	r3, [sp, #12]
 801adc2:	ab0e      	add	r3, sp, #56	; 0x38
 801adc4:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801adc8:	9302      	str	r3, [sp, #8]
 801adca:	ab0c      	add	r3, sp, #48	; 0x30
 801adcc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801add0:	9301      	str	r3, [sp, #4]
 801add2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801add6:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801adda:	9300      	str	r3, [sp, #0]
 801addc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ade0:	950e      	str	r5, [sp, #56]	; 0x38
 801ade2:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801ade6:	950f      	str	r5, [sp, #60]	; 0x3c
 801ade8:	f7ff fe92 	bl	801ab10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801adec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	bfbf      	itttt	lt
 801adf4:	6823      	ldrlt	r3, [r4, #0]
 801adf6:	3404      	addlt	r4, #4
 801adf8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801adfc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801adfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	bfbf      	itttt	lt
 801ae04:	6823      	ldrlt	r3, [r4, #0]
 801ae06:	3404      	addlt	r4, #4
 801ae08:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ae0c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ae0e:	8813      	ldrh	r3, [r2, #0]
 801ae10:	2b69      	cmp	r3, #105	; 0x69
 801ae12:	f43f af2b 	beq.w	801ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ae16:	f63f af39 	bhi.w	801ac8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801ae1a:	2b58      	cmp	r3, #88	; 0x58
 801ae1c:	f43f af26 	beq.w	801ac6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ae20:	f63f af20 	bhi.w	801ac64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801ae24:	2b25      	cmp	r3, #37	; 0x25
 801ae26:	f43f af3c 	beq.w	801aca2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801ae2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae2c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ae30:	f8b9 2000 	ldrh.w	r2, [r9]
 801ae34:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ae38:	3301      	adds	r3, #1
 801ae3a:	930d      	str	r3, [sp, #52]	; 0x34
 801ae3c:	e734      	b.n	801aca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae42:	4605      	mov	r5, r0
 801ae44:	b0a1      	sub	sp, #132	; 0x84
 801ae46:	4610      	mov	r0, r2
 801ae48:	460e      	mov	r6, r1
 801ae4a:	4614      	mov	r4, r2
 801ae4c:	461f      	mov	r7, r3
 801ae4e:	f7ff fd33 	bl	801a8b8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801ae52:	283f      	cmp	r0, #63	; 0x3f
 801ae54:	d906      	bls.n	801ae64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801ae56:	4b0a      	ldr	r3, [pc, #40]	; (801ae80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801ae58:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801ae5c:	4a09      	ldr	r2, [pc, #36]	; (801ae84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801ae5e:	480a      	ldr	r0, [pc, #40]	; (801ae88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801ae60:	f009 ffac 	bl	8024dbc <__assert_func>
 801ae64:	4621      	mov	r1, r4
 801ae66:	2240      	movs	r2, #64	; 0x40
 801ae68:	4668      	mov	r0, sp
 801ae6a:	f7ff fd31 	bl	801a8d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ae6e:	463b      	mov	r3, r7
 801ae70:	466a      	mov	r2, sp
 801ae72:	4631      	mov	r1, r6
 801ae74:	4628      	mov	r0, r5
 801ae76:	f7ff febe 	bl	801abf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801ae7a:	b021      	add	sp, #132	; 0x84
 801ae7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae7e:	bf00      	nop
 801ae80:	080290f5 	.word	0x080290f5
 801ae84:	080291c7 	.word	0x080291c7
 801ae88:	08029112 	.word	0x08029112

0801ae8c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ae8c:	b40c      	push	{r2, r3}
 801ae8e:	b507      	push	{r0, r1, r2, lr}
 801ae90:	ab04      	add	r3, sp, #16
 801ae92:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae96:	9301      	str	r3, [sp, #4]
 801ae98:	f7ff ffd2 	bl	801ae40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ae9c:	b003      	add	sp, #12
 801ae9e:	f85d eb04 	ldr.w	lr, [sp], #4
 801aea2:	b002      	add	sp, #8
 801aea4:	4770      	bx	lr
	...

0801aea8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeac:	b0c3      	sub	sp, #268	; 0x10c
 801aeae:	2400      	movs	r4, #0
 801aeb0:	4606      	mov	r6, r0
 801aeb2:	4689      	mov	r9, r1
 801aeb4:	af10      	add	r7, sp, #64	; 0x40
 801aeb6:	9209      	str	r2, [sp, #36]	; 0x24
 801aeb8:	4621      	mov	r1, r4
 801aeba:	22c8      	movs	r2, #200	; 0xc8
 801aebc:	4638      	mov	r0, r7
 801aebe:	469a      	mov	sl, r3
 801aec0:	940c      	str	r4, [sp, #48]	; 0x30
 801aec2:	f7fe fcce 	bl	8019862 <_ZN8touchgfx6memsetEPvhm>
 801aec6:	b116      	cbz	r6, 801aece <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801aec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeca:	b923      	cbnz	r3, 801aed6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801aecc:	8033      	strh	r3, [r6, #0]
 801aece:	4630      	mov	r0, r6
 801aed0:	b043      	add	sp, #268	; 0x10c
 801aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aed6:	f109 3bff 	add.w	fp, r9, #4294967295
 801aeda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aedc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aede:	8812      	ldrh	r2, [r2, #0]
 801aee0:	2a00      	cmp	r2, #0
 801aee2:	f000 80d1 	beq.w	801b088 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801aee6:	459b      	cmp	fp, r3
 801aee8:	f340 80ce 	ble.w	801b088 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801aeec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801aeee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aef0:	882a      	ldrh	r2, [r5, #0]
 801aef2:	2a00      	cmp	r2, #0
 801aef4:	d0f1      	beq.n	801aeda <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801aef6:	2a25      	cmp	r2, #37	; 0x25
 801aef8:	f000 80ca 	beq.w	801b090 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801aefc:	459b      	cmp	fp, r3
 801aefe:	ddec      	ble.n	801aeda <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801af00:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801af04:	3502      	adds	r5, #2
 801af06:	3301      	adds	r3, #1
 801af08:	9509      	str	r5, [sp, #36]	; 0x24
 801af0a:	930c      	str	r3, [sp, #48]	; 0x30
 801af0c:	e7ee      	b.n	801aeec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801af0e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801af12:	3202      	adds	r2, #2
 801af14:	920c      	str	r2, [sp, #48]	; 0x30
 801af16:	e0ac      	b.n	801b072 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801af18:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801af1c:	970f      	str	r7, [sp, #60]	; 0x3c
 801af1e:	3401      	adds	r4, #1
 801af20:	edd3 7a00 	vldr	s15, [r3]
 801af24:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801af28:	b923      	cbnz	r3, 801af34 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801af2a:	2301      	movs	r3, #1
 801af2c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801af30:	2303      	movs	r3, #3
 801af32:	930e      	str	r3, [sp, #56]	; 0x38
 801af34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af38:	980e      	ldr	r0, [sp, #56]	; 0x38
 801af3a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801af3e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b13c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801af42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af46:	bf42      	ittt	mi
 801af48:	232d      	movmi	r3, #45	; 0x2d
 801af4a:	eef1 7a67 	vnegmi.f32	s15, s15
 801af4e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801af52:	2300      	movs	r3, #0
 801af54:	4298      	cmp	r0, r3
 801af56:	dd03      	ble.n	801af60 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801af58:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801af5c:	3301      	adds	r3, #1
 801af5e:	e7f9      	b.n	801af54 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801af60:	ee77 7a87 	vadd.f32	s15, s15, s14
 801af64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801af68:	eeb0 7a67 	vmov.f32	s14, s15
 801af6c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801af70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af74:	da26      	bge.n	801afc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801af76:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801af7a:	eba9 0202 	sub.w	r2, r9, r2
 801af7e:	2100      	movs	r1, #0
 801af80:	eef4 6ae5 	vcmpe.f32	s13, s11
 801af84:	b28d      	uxth	r5, r1
 801af86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af8a:	db21      	blt.n	801afd0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801af8c:	1a53      	subs	r3, r2, r1
 801af8e:	2b00      	cmp	r3, #0
 801af90:	dd1e      	ble.n	801afd0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801af92:	2963      	cmp	r1, #99	; 0x63
 801af94:	d01b      	beq.n	801afce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801af96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801af9a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801af9e:	ee17 3a10 	vmov	r3, s14
 801afa2:	2b09      	cmp	r3, #9
 801afa4:	bfa8      	it	ge
 801afa6:	2309      	movge	r3, #9
 801afa8:	ee07 3a10 	vmov	s14, r3
 801afac:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801afb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afb4:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801afb8:	3101      	adds	r1, #1
 801afba:	eee7 7a66 	vfms.f32	s15, s14, s13
 801afbe:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801afc2:	e7dd      	b.n	801af80 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801afc4:	ee66 6a86 	vmul.f32	s13, s13, s12
 801afc8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801afcc:	e7ce      	b.n	801af6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801afce:	460d      	mov	r5, r1
 801afd0:	2a63      	cmp	r2, #99	; 0x63
 801afd2:	bfd4      	ite	le
 801afd4:	ebc5 0202 	rsble	r2, r5, r2
 801afd8:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801afdc:	2a00      	cmp	r2, #0
 801afde:	dd4e      	ble.n	801b07e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801afe0:	4603      	mov	r3, r0
 801afe2:	f04f 0801 	mov.w	r8, #1
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	dd0e      	ble.n	801b008 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801afea:	ee67 7a86 	vmul.f32	s15, s15, s12
 801afee:	210a      	movs	r1, #10
 801aff0:	3b01      	subs	r3, #1
 801aff2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801aff6:	ee17 ca10 	vmov	ip, s14
 801affa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801affe:	fb01 c808 	mla	r8, r1, r8, ip
 801b002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b006:	e7ee      	b.n	801afe6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801b008:	2800      	cmp	r0, #0
 801b00a:	f100 33ff 	add.w	r3, r0, #4294967295
 801b00e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801b012:	bfac      	ite	ge
 801b014:	1a18      	subge	r0, r3, r0
 801b016:	4618      	movlt	r0, r3
 801b018:	b292      	uxth	r2, r2
 801b01a:	230a      	movs	r3, #10
 801b01c:	900e      	str	r0, [sp, #56]	; 0x38
 801b01e:	1979      	adds	r1, r7, r5
 801b020:	4640      	mov	r0, r8
 801b022:	f7ff fc84 	bl	801a92e <_ZN8touchgfx7Unicode4itoaElPtti>
 801b026:	f1b8 0f01 	cmp.w	r8, #1
 801b02a:	dc26      	bgt.n	801b07a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801b02c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801b030:	2b00      	cmp	r3, #0
 801b032:	bf0c      	ite	eq
 801b034:	2300      	moveq	r3, #0
 801b036:	232e      	movne	r3, #46	; 0x2e
 801b038:	aa42      	add	r2, sp, #264	; 0x108
 801b03a:	4415      	add	r5, r2
 801b03c:	aa0c      	add	r2, sp, #48	; 0x30
 801b03e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801b042:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b046:	a80f      	add	r0, sp, #60	; 0x3c
 801b048:	9205      	str	r2, [sp, #20]
 801b04a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801b04e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b052:	9204      	str	r2, [sp, #16]
 801b054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b056:	9203      	str	r2, [sp, #12]
 801b058:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801b05c:	9202      	str	r2, [sp, #8]
 801b05e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b060:	9201      	str	r2, [sp, #4]
 801b062:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801b066:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801b06a:	9200      	str	r2, [sp, #0]
 801b06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b06e:	f7ff fc9f 	bl	801a9b0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b074:	3302      	adds	r3, #2
 801b076:	9309      	str	r3, [sp, #36]	; 0x24
 801b078:	e72f      	b.n	801aeda <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b07a:	232e      	movs	r3, #46	; 0x2e
 801b07c:	e7dc      	b.n	801b038 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801b07e:	ab42      	add	r3, sp, #264	; 0x108
 801b080:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801b084:	2300      	movs	r3, #0
 801b086:	e7d9      	b.n	801b03c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801b088:	2200      	movs	r2, #0
 801b08a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b08e:	e71e      	b.n	801aece <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b090:	459b      	cmp	fp, r3
 801b092:	f77f af22 	ble.w	801aeda <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b096:	2300      	movs	r3, #0
 801b098:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801b09c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801b0a0:	a809      	add	r0, sp, #36	; 0x24
 801b0a2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b0a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b0aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b0ae:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b0b2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b0b6:	930d      	str	r3, [sp, #52]	; 0x34
 801b0b8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b0bc:	930e      	str	r3, [sp, #56]	; 0x38
 801b0be:	1cab      	adds	r3, r5, #2
 801b0c0:	9309      	str	r3, [sp, #36]	; 0x24
 801b0c2:	ab0e      	add	r3, sp, #56	; 0x38
 801b0c4:	9304      	str	r3, [sp, #16]
 801b0c6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b0ca:	9303      	str	r3, [sp, #12]
 801b0cc:	ab0d      	add	r3, sp, #52	; 0x34
 801b0ce:	9302      	str	r3, [sp, #8]
 801b0d0:	ab0b      	add	r3, sp, #44	; 0x2c
 801b0d2:	9301      	str	r3, [sp, #4]
 801b0d4:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801b0d8:	9300      	str	r3, [sp, #0]
 801b0da:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801b0de:	f7ff fd17 	bl	801ab10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	da0b      	bge.n	801b100 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801b0e8:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b0ec:	3401      	adds	r4, #1
 801b0ee:	edd3 7a00 	vldr	s15, [r3]
 801b0f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b0f6:	ee17 3a90 	vmov	r3, s15
 801b0fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0fe:	930d      	str	r3, [sp, #52]	; 0x34
 801b100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b102:	2b00      	cmp	r3, #0
 801b104:	da0b      	bge.n	801b11e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801b106:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b10a:	3401      	adds	r4, #1
 801b10c:	edd3 7a00 	vldr	s15, [r3]
 801b110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b114:	ee17 3a90 	vmov	r3, s15
 801b118:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b11c:	930e      	str	r3, [sp, #56]	; 0x38
 801b11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b122:	881b      	ldrh	r3, [r3, #0]
 801b124:	2b25      	cmp	r3, #37	; 0x25
 801b126:	f43f aef2 	beq.w	801af0e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801b12a:	2b66      	cmp	r3, #102	; 0x66
 801b12c:	f43f aef4 	beq.w	801af18 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801b130:	9509      	str	r5, [sp, #36]	; 0x24
 801b132:	882b      	ldrh	r3, [r5, #0]
 801b134:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b138:	3201      	adds	r2, #1
 801b13a:	e6eb      	b.n	801af14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801b13c:	3f000002 	.word	0x3f000002

0801b140 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801b140:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b142:	4605      	mov	r5, r0
 801b144:	b0a1      	sub	sp, #132	; 0x84
 801b146:	4610      	mov	r0, r2
 801b148:	460e      	mov	r6, r1
 801b14a:	4614      	mov	r4, r2
 801b14c:	461f      	mov	r7, r3
 801b14e:	f7ff fbb3 	bl	801a8b8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b152:	283f      	cmp	r0, #63	; 0x3f
 801b154:	d906      	bls.n	801b164 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801b156:	4b0a      	ldr	r3, [pc, #40]	; (801b180 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801b158:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801b15c:	4a09      	ldr	r2, [pc, #36]	; (801b184 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801b15e:	480a      	ldr	r0, [pc, #40]	; (801b188 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801b160:	f009 fe2c 	bl	8024dbc <__assert_func>
 801b164:	4621      	mov	r1, r4
 801b166:	2240      	movs	r2, #64	; 0x40
 801b168:	4668      	mov	r0, sp
 801b16a:	f7ff fbb1 	bl	801a8d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b16e:	463b      	mov	r3, r7
 801b170:	466a      	mov	r2, sp
 801b172:	4631      	mov	r1, r6
 801b174:	4628      	mov	r0, r5
 801b176:	f7ff fe97 	bl	801aea8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801b17a:	b021      	add	sp, #132	; 0x84
 801b17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b17e:	bf00      	nop
 801b180:	080290f5 	.word	0x080290f5
 801b184:	08029138 	.word	0x08029138
 801b188:	08029112 	.word	0x08029112

0801b18c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b18c:	4b01      	ldr	r3, [pc, #4]	; (801b194 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b18e:	6018      	str	r0, [r3, #0]
 801b190:	4770      	bx	lr
 801b192:	bf00      	nop
 801b194:	2000be0c 	.word	0x2000be0c

0801b198 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b198:	4b07      	ldr	r3, [pc, #28]	; (801b1b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b19a:	881a      	ldrh	r2, [r3, #0]
 801b19c:	4282      	cmp	r2, r0
 801b19e:	d809      	bhi.n	801b1b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b1a0:	4b06      	ldr	r3, [pc, #24]	; (801b1bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b1a2:	881b      	ldrh	r3, [r3, #0]
 801b1a4:	4413      	add	r3, r2
 801b1a6:	4298      	cmp	r0, r3
 801b1a8:	da04      	bge.n	801b1b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b1aa:	4b05      	ldr	r3, [pc, #20]	; (801b1c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b1b2:	4770      	bx	lr
 801b1b4:	2000      	movs	r0, #0
 801b1b6:	4770      	bx	lr
 801b1b8:	2000be2c 	.word	0x2000be2c
 801b1bc:	2000be30 	.word	0x2000be30
 801b1c0:	2000be10 	.word	0x2000be10

0801b1c4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1c8:	4d26      	ldr	r5, [pc, #152]	; (801b264 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b1ca:	682b      	ldr	r3, [r5, #0]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d046      	beq.n	801b25e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b1d0:	4a25      	ldr	r2, [pc, #148]	; (801b268 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b1d2:	4f26      	ldr	r7, [pc, #152]	; (801b26c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b1d4:	8810      	ldrh	r0, [r2, #0]
 801b1d6:	883c      	ldrh	r4, [r7, #0]
 801b1d8:	4e25      	ldr	r6, [pc, #148]	; (801b270 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b1da:	4420      	add	r0, r4
 801b1dc:	1c42      	adds	r2, r0, #1
 801b1de:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b1e2:	f022 0201 	bic.w	r2, r2, #1
 801b1e6:	0412      	lsls	r2, r2, #16
 801b1e8:	0c12      	lsrs	r2, r2, #16
 801b1ea:	0051      	lsls	r1, r2, #1
 801b1ec:	220e      	movs	r2, #14
 801b1ee:	eb08 0e01 	add.w	lr, r8, r1
 801b1f2:	fb02 fc04 	mul.w	ip, r2, r4
 801b1f6:	eb03 0208 	add.w	r2, r3, r8
 801b1fa:	4c1e      	ldr	r4, [pc, #120]	; (801b274 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b1fc:	6022      	str	r2, [r4, #0]
 801b1fe:	eb03 020e 	add.w	r2, r3, lr
 801b202:	44e6      	add	lr, ip
 801b204:	6032      	str	r2, [r6, #0]
 801b206:	4473      	add	r3, lr
 801b208:	4a1b      	ldr	r2, [pc, #108]	; (801b278 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b20a:	6013      	str	r3, [r2, #0]
 801b20c:	2300      	movs	r3, #0
 801b20e:	4a1b      	ldr	r2, [pc, #108]	; (801b27c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b210:	8013      	strh	r3, [r2, #0]
 801b212:	4a1b      	ldr	r2, [pc, #108]	; (801b280 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b214:	6812      	ldr	r2, [r2, #0]
 801b216:	eba2 0208 	sub.w	r2, r2, r8
 801b21a:	1a52      	subs	r2, r2, r1
 801b21c:	4919      	ldr	r1, [pc, #100]	; (801b284 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b21e:	eba2 020c 	sub.w	r2, r2, ip
 801b222:	469c      	mov	ip, r3
 801b224:	600a      	str	r2, [r1, #0]
 801b226:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b22a:	4a17      	ldr	r2, [pc, #92]	; (801b288 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b22c:	8013      	strh	r3, [r2, #0]
 801b22e:	4283      	cmp	r3, r0
 801b230:	d10d      	bne.n	801b24e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801b232:	883d      	ldrh	r5, [r7, #0]
 801b234:	2300      	movs	r3, #0
 801b236:	6830      	ldr	r0, [r6, #0]
 801b238:	240e      	movs	r4, #14
 801b23a:	429d      	cmp	r5, r3
 801b23c:	d90f      	bls.n	801b25e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b23e:	fb04 0203 	mla	r2, r4, r3, r0
 801b242:	3301      	adds	r3, #1
 801b244:	7b11      	ldrb	r1, [r2, #12]
 801b246:	f36f 1145 	bfc	r1, #5, #1
 801b24a:	7311      	strb	r1, [r2, #12]
 801b24c:	e7f5      	b.n	801b23a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801b24e:	682a      	ldr	r2, [r5, #0]
 801b250:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b254:	6822      	ldr	r2, [r4, #0]
 801b256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b25a:	3301      	adds	r3, #1
 801b25c:	e7e7      	b.n	801b22e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801b25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b262:	bf00      	nop
 801b264:	2000be10 	.word	0x2000be10
 801b268:	2000be2c 	.word	0x2000be2c
 801b26c:	2000be30 	.word	0x2000be30
 801b270:	2000be14 	.word	0x2000be14
 801b274:	2000be24 	.word	0x2000be24
 801b278:	2000be1c 	.word	0x2000be1c
 801b27c:	2000be2e 	.word	0x2000be2e
 801b280:	2000be18 	.word	0x2000be18
 801b284:	2000be28 	.word	0x2000be28
 801b288:	2000be20 	.word	0x2000be20

0801b28c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b28c:	4b10      	ldr	r3, [pc, #64]	; (801b2d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b28e:	b510      	push	{r4, lr}
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	b9db      	cbnz	r3, 801b2cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b294:	b1d1      	cbz	r1, 801b2cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b296:	4b0f      	ldr	r3, [pc, #60]	; (801b2d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b298:	240e      	movs	r4, #14
 801b29a:	801a      	strh	r2, [r3, #0]
 801b29c:	b292      	uxth	r2, r2
 801b29e:	4b0e      	ldr	r3, [pc, #56]	; (801b2d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b2a0:	881b      	ldrh	r3, [r3, #0]
 801b2a2:	4413      	add	r3, r2
 801b2a4:	4362      	muls	r2, r4
 801b2a6:	2406      	movs	r4, #6
 801b2a8:	fb04 2203 	mla	r2, r4, r3, r2
 801b2ac:	428a      	cmp	r2, r1
 801b2ae:	d305      	bcc.n	801b2bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b2b0:	4b0a      	ldr	r3, [pc, #40]	; (801b2dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b2b2:	2137      	movs	r1, #55	; 0x37
 801b2b4:	4a0a      	ldr	r2, [pc, #40]	; (801b2e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b2b6:	480b      	ldr	r0, [pc, #44]	; (801b2e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b2b8:	f009 fd80 	bl	8024dbc <__assert_func>
 801b2bc:	4b0a      	ldr	r3, [pc, #40]	; (801b2e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b2be:	6019      	str	r1, [r3, #0]
 801b2c0:	4b0a      	ldr	r3, [pc, #40]	; (801b2ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b2c2:	6018      	str	r0, [r3, #0]
 801b2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2c8:	f7ff bf7c 	b.w	801b1c4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b2cc:	bd10      	pop	{r4, pc}
 801b2ce:	bf00      	nop
 801b2d0:	2000be1c 	.word	0x2000be1c
 801b2d4:	2000be30 	.word	0x2000be30
 801b2d8:	2000be2c 	.word	0x2000be2c
 801b2dc:	080292a9 	.word	0x080292a9
 801b2e0:	08029302 	.word	0x08029302
 801b2e4:	08029284 	.word	0x08029284
 801b2e8:	2000be18 	.word	0x2000be18
 801b2ec:	2000be10 	.word	0x2000be10

0801b2f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b2f0:	b470      	push	{r4, r5, r6}
 801b2f2:	4c07      	ldr	r4, [pc, #28]	; (801b310 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b2f4:	4605      	mov	r5, r0
 801b2f6:	4610      	mov	r0, r2
 801b2f8:	9a03      	ldr	r2, [sp, #12]
 801b2fa:	6826      	ldr	r6, [r4, #0]
 801b2fc:	b936      	cbnz	r6, 801b30c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b2fe:	6025      	str	r5, [r4, #0]
 801b300:	4c04      	ldr	r4, [pc, #16]	; (801b314 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b302:	8021      	strh	r1, [r4, #0]
 801b304:	4619      	mov	r1, r3
 801b306:	bc70      	pop	{r4, r5, r6}
 801b308:	f7ff bfc0 	b.w	801b28c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b30c:	bc70      	pop	{r4, r5, r6}
 801b30e:	4770      	bx	lr
 801b310:	2000be34 	.word	0x2000be34
 801b314:	2000be2c 	.word	0x2000be2c

0801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b318:	b508      	push	{r3, lr}
 801b31a:	4b14      	ldr	r3, [pc, #80]	; (801b36c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b31c:	6819      	ldr	r1, [r3, #0]
 801b31e:	b931      	cbnz	r1, 801b32e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b320:	4b13      	ldr	r3, [pc, #76]	; (801b370 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b322:	f240 21e6 	movw	r1, #742	; 0x2e6
 801b326:	4a13      	ldr	r2, [pc, #76]	; (801b374 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b328:	4813      	ldr	r0, [pc, #76]	; (801b378 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b32a:	f009 fd47 	bl	8024dbc <__assert_func>
 801b32e:	4a13      	ldr	r2, [pc, #76]	; (801b37c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b330:	8803      	ldrh	r3, [r0, #0]
 801b332:	8812      	ldrh	r2, [r2, #0]
 801b334:	4293      	cmp	r3, r2
 801b336:	d204      	bcs.n	801b342 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b338:	2214      	movs	r2, #20
 801b33a:	fb02 1303 	mla	r3, r2, r3, r1
 801b33e:	8918      	ldrh	r0, [r3, #8]
 801b340:	bd08      	pop	{r3, pc}
 801b342:	490f      	ldr	r1, [pc, #60]	; (801b380 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b344:	8809      	ldrh	r1, [r1, #0]
 801b346:	4411      	add	r1, r2
 801b348:	428b      	cmp	r3, r1
 801b34a:	da06      	bge.n	801b35a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b34c:	1a9b      	subs	r3, r3, r2
 801b34e:	4a0d      	ldr	r2, [pc, #52]	; (801b384 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b350:	210e      	movs	r1, #14
 801b352:	6812      	ldr	r2, [r2, #0]
 801b354:	fb01 2303 	mla	r3, r1, r3, r2
 801b358:	e7f1      	b.n	801b33e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b35a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b35e:	4293      	cmp	r3, r2
 801b360:	bf0a      	itet	eq
 801b362:	4b09      	ldreq	r3, [pc, #36]	; (801b388 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b364:	2000      	movne	r0, #0
 801b366:	8818      	ldrheq	r0, [r3, #0]
 801b368:	e7ea      	b.n	801b340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b36a:	bf00      	nop
 801b36c:	2000be34 	.word	0x2000be34
 801b370:	0802725c 	.word	0x0802725c
 801b374:	080293af 	.word	0x080293af
 801b378:	08029284 	.word	0x08029284
 801b37c:	2000be2c 	.word	0x2000be2c
 801b380:	2000be30 	.word	0x2000be30
 801b384:	2000be14 	.word	0x2000be14
 801b388:	2000bd60 	.word	0x2000bd60

0801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b38c:	b508      	push	{r3, lr}
 801b38e:	4b14      	ldr	r3, [pc, #80]	; (801b3e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b390:	6819      	ldr	r1, [r3, #0]
 801b392:	b931      	cbnz	r1, 801b3a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b394:	4b13      	ldr	r3, [pc, #76]	; (801b3e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b396:	f240 21fa 	movw	r1, #762	; 0x2fa
 801b39a:	4a13      	ldr	r2, [pc, #76]	; (801b3e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b39c:	4813      	ldr	r0, [pc, #76]	; (801b3ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b39e:	f009 fd0d 	bl	8024dbc <__assert_func>
 801b3a2:	4a13      	ldr	r2, [pc, #76]	; (801b3f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b3a4:	8803      	ldrh	r3, [r0, #0]
 801b3a6:	8812      	ldrh	r2, [r2, #0]
 801b3a8:	4293      	cmp	r3, r2
 801b3aa:	d204      	bcs.n	801b3b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b3ac:	2214      	movs	r2, #20
 801b3ae:	fb02 1303 	mla	r3, r2, r3, r1
 801b3b2:	8958      	ldrh	r0, [r3, #10]
 801b3b4:	bd08      	pop	{r3, pc}
 801b3b6:	490f      	ldr	r1, [pc, #60]	; (801b3f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b3b8:	8809      	ldrh	r1, [r1, #0]
 801b3ba:	4411      	add	r1, r2
 801b3bc:	428b      	cmp	r3, r1
 801b3be:	da06      	bge.n	801b3ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b3c0:	1a9b      	subs	r3, r3, r2
 801b3c2:	4a0d      	ldr	r2, [pc, #52]	; (801b3f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b3c4:	210e      	movs	r1, #14
 801b3c6:	6812      	ldr	r2, [r2, #0]
 801b3c8:	fb01 2303 	mla	r3, r1, r3, r2
 801b3cc:	e7f1      	b.n	801b3b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b3ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b3d2:	4293      	cmp	r3, r2
 801b3d4:	bf0a      	itet	eq
 801b3d6:	4b09      	ldreq	r3, [pc, #36]	; (801b3fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b3d8:	2000      	movne	r0, #0
 801b3da:	8818      	ldrheq	r0, [r3, #0]
 801b3dc:	e7ea      	b.n	801b3b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b3de:	bf00      	nop
 801b3e0:	2000be34 	.word	0x2000be34
 801b3e4:	0802725c 	.word	0x0802725c
 801b3e8:	080293db 	.word	0x080293db
 801b3ec:	08029284 	.word	0x08029284
 801b3f0:	2000be2c 	.word	0x2000be2c
 801b3f4:	2000be30 	.word	0x2000be30
 801b3f8:	2000be14 	.word	0x2000be14
 801b3fc:	2000bd62 	.word	0x2000bd62

0801b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b400:	4b23      	ldr	r3, [pc, #140]	; (801b490 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b402:	b510      	push	{r4, lr}
 801b404:	681c      	ldr	r4, [r3, #0]
 801b406:	b934      	cbnz	r4, 801b416 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b408:	4b22      	ldr	r3, [pc, #136]	; (801b494 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b40a:	f240 310e 	movw	r1, #782	; 0x30e
 801b40e:	4a22      	ldr	r2, [pc, #136]	; (801b498 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b410:	4822      	ldr	r0, [pc, #136]	; (801b49c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b412:	f009 fcd3 	bl	8024dbc <__assert_func>
 801b416:	4a22      	ldr	r2, [pc, #136]	; (801b4a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b418:	880b      	ldrh	r3, [r1, #0]
 801b41a:	8812      	ldrh	r2, [r2, #0]
 801b41c:	4293      	cmp	r3, r2
 801b41e:	d211      	bcs.n	801b444 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b420:	2214      	movs	r2, #20
 801b422:	fb02 4303 	mla	r3, r2, r3, r4
 801b426:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b42a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b42e:	8a1a      	ldrh	r2, [r3, #16]
 801b430:	8a5b      	ldrh	r3, [r3, #18]
 801b432:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b436:	8004      	strh	r4, [r0, #0]
 801b438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b43c:	8041      	strh	r1, [r0, #2]
 801b43e:	8082      	strh	r2, [r0, #4]
 801b440:	80c3      	strh	r3, [r0, #6]
 801b442:	e00e      	b.n	801b462 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b444:	4917      	ldr	r1, [pc, #92]	; (801b4a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b446:	8809      	ldrh	r1, [r1, #0]
 801b448:	4411      	add	r1, r2
 801b44a:	428b      	cmp	r3, r1
 801b44c:	da0a      	bge.n	801b464 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b44e:	1a9b      	subs	r3, r3, r2
 801b450:	4a15      	ldr	r2, [pc, #84]	; (801b4a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b452:	210e      	movs	r1, #14
 801b454:	6812      	ldr	r2, [r2, #0]
 801b456:	fb01 2303 	mla	r3, r1, r3, r2
 801b45a:	681a      	ldr	r2, [r3, #0]
 801b45c:	6002      	str	r2, [r0, #0]
 801b45e:	685a      	ldr	r2, [r3, #4]
 801b460:	6042      	str	r2, [r0, #4]
 801b462:	bd10      	pop	{r4, pc}
 801b464:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b468:	4293      	cmp	r3, r2
 801b46a:	d10b      	bne.n	801b484 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b46c:	4b0f      	ldr	r3, [pc, #60]	; (801b4ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b46e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b472:	4b0f      	ldr	r3, [pc, #60]	; (801b4b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b474:	8081      	strh	r1, [r0, #4]
 801b476:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b47a:	2300      	movs	r3, #0
 801b47c:	80c2      	strh	r2, [r0, #6]
 801b47e:	8003      	strh	r3, [r0, #0]
 801b480:	8043      	strh	r3, [r0, #2]
 801b482:	e7ee      	b.n	801b462 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b484:	2300      	movs	r3, #0
 801b486:	8003      	strh	r3, [r0, #0]
 801b488:	8043      	strh	r3, [r0, #2]
 801b48a:	8083      	strh	r3, [r0, #4]
 801b48c:	e7d8      	b.n	801b440 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b48e:	bf00      	nop
 801b490:	2000be34 	.word	0x2000be34
 801b494:	0802725c 	.word	0x0802725c
 801b498:	08029348 	.word	0x08029348
 801b49c:	08029284 	.word	0x08029284
 801b4a0:	2000be2c 	.word	0x2000be2c
 801b4a4:	2000be30 	.word	0x2000be30
 801b4a8:	2000be14 	.word	0x2000be14
 801b4ac:	2000bd60 	.word	0x2000bd60
 801b4b0:	2000bd62 	.word	0x2000bd62

0801b4b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b4b4:	4b18      	ldr	r3, [pc, #96]	; (801b518 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	b34b      	cbz	r3, 801b50e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b4ba:	4a18      	ldr	r2, [pc, #96]	; (801b51c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b4bc:	8800      	ldrh	r0, [r0, #0]
 801b4be:	8812      	ldrh	r2, [r2, #0]
 801b4c0:	4290      	cmp	r0, r2
 801b4c2:	d211      	bcs.n	801b4e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b4c4:	2214      	movs	r2, #20
 801b4c6:	fb02 3300 	mla	r3, r2, r0, r3
 801b4ca:	8a1a      	ldrh	r2, [r3, #16]
 801b4cc:	8919      	ldrh	r1, [r3, #8]
 801b4ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b4d2:	428a      	cmp	r2, r1
 801b4d4:	db1d      	blt.n	801b512 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b4d6:	8a58      	ldrh	r0, [r3, #18]
 801b4d8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b4dc:	895b      	ldrh	r3, [r3, #10]
 801b4de:	4298      	cmp	r0, r3
 801b4e0:	bfac      	ite	ge
 801b4e2:	2000      	movge	r0, #0
 801b4e4:	2001      	movlt	r0, #1
 801b4e6:	4770      	bx	lr
 801b4e8:	4b0d      	ldr	r3, [pc, #52]	; (801b520 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b4ea:	881b      	ldrh	r3, [r3, #0]
 801b4ec:	4413      	add	r3, r2
 801b4ee:	4298      	cmp	r0, r3
 801b4f0:	da0d      	bge.n	801b50e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b4f2:	4b0c      	ldr	r3, [pc, #48]	; (801b524 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b4f4:	1a80      	subs	r0, r0, r2
 801b4f6:	220e      	movs	r2, #14
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	fb02 3300 	mla	r3, r2, r0, r3
 801b4fe:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b502:	891a      	ldrh	r2, [r3, #8]
 801b504:	4291      	cmp	r1, r2
 801b506:	db04      	blt.n	801b512 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b508:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b50c:	e7e6      	b.n	801b4dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b50e:	2000      	movs	r0, #0
 801b510:	4770      	bx	lr
 801b512:	2001      	movs	r0, #1
 801b514:	4770      	bx	lr
 801b516:	bf00      	nop
 801b518:	2000be34 	.word	0x2000be34
 801b51c:	2000be2c 	.word	0x2000be2c
 801b520:	2000be30 	.word	0x2000be30
 801b524:	2000be14 	.word	0x2000be14

0801b528 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b528:	b508      	push	{r3, lr}
 801b52a:	4b12      	ldr	r3, [pc, #72]	; (801b574 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b52c:	6819      	ldr	r1, [r3, #0]
 801b52e:	b931      	cbnz	r1, 801b53e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b530:	4b11      	ldr	r3, [pc, #68]	; (801b578 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b532:	f240 3132 	movw	r1, #818	; 0x332
 801b536:	4a11      	ldr	r2, [pc, #68]	; (801b57c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b538:	4811      	ldr	r0, [pc, #68]	; (801b580 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b53a:	f009 fc3f 	bl	8024dbc <__assert_func>
 801b53e:	8803      	ldrh	r3, [r0, #0]
 801b540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b544:	4293      	cmp	r3, r2
 801b546:	d012      	beq.n	801b56e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b548:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b54c:	4293      	cmp	r3, r2
 801b54e:	d103      	bne.n	801b558 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b550:	4b0c      	ldr	r3, [pc, #48]	; (801b584 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b556:	bd08      	pop	{r3, pc}
 801b558:	4a0b      	ldr	r2, [pc, #44]	; (801b588 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b55a:	6812      	ldr	r2, [r2, #0]
 801b55c:	b11a      	cbz	r2, 801b566 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b55e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b562:	2800      	cmp	r0, #0
 801b564:	d1f7      	bne.n	801b556 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b566:	2214      	movs	r2, #20
 801b568:	4353      	muls	r3, r2
 801b56a:	58c8      	ldr	r0, [r1, r3]
 801b56c:	e7f3      	b.n	801b556 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b56e:	2000      	movs	r0, #0
 801b570:	e7f1      	b.n	801b556 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b572:	bf00      	nop
 801b574:	2000be34 	.word	0x2000be34
 801b578:	0802725c 	.word	0x0802725c
 801b57c:	0802937e 	.word	0x0802937e
 801b580:	08029284 	.word	0x08029284
 801b584:	2000bd6c 	.word	0x2000bd6c
 801b588:	2000be10 	.word	0x2000be10

0801b58c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b58c:	8802      	ldrh	r2, [r0, #0]
 801b58e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b592:	429a      	cmp	r2, r3
 801b594:	d840      	bhi.n	801b618 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b596:	4b21      	ldr	r3, [pc, #132]	; (801b61c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801b598:	881b      	ldrh	r3, [r3, #0]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d220      	bcs.n	801b5e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801b59e:	4b20      	ldr	r3, [pc, #128]	; (801b620 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b5a0:	6819      	ldr	r1, [r3, #0]
 801b5a2:	2314      	movs	r3, #20
 801b5a4:	fb03 1302 	mla	r3, r3, r2, r1
 801b5a8:	6858      	ldr	r0, [r3, #4]
 801b5aa:	2800      	cmp	r0, #0
 801b5ac:	d035      	beq.n	801b61a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b5ae:	491d      	ldr	r1, [pc, #116]	; (801b624 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b5b0:	6809      	ldr	r1, [r1, #0]
 801b5b2:	2900      	cmp	r1, #0
 801b5b4:	d031      	beq.n	801b61a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b5b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b5ba:	b371      	cbz	r1, 801b61a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b5bc:	895a      	ldrh	r2, [r3, #10]
 801b5be:	8918      	ldrh	r0, [r3, #8]
 801b5c0:	4350      	muls	r0, r2
 801b5c2:	7c5a      	ldrb	r2, [r3, #17]
 801b5c4:	7cdb      	ldrb	r3, [r3, #19]
 801b5c6:	0952      	lsrs	r2, r2, #5
 801b5c8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b5cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b5d0:	2b0b      	cmp	r3, #11
 801b5d2:	bf18      	it	ne
 801b5d4:	0040      	lslne	r0, r0, #1
 801b5d6:	3003      	adds	r0, #3
 801b5d8:	f020 0003 	bic.w	r0, r0, #3
 801b5dc:	4408      	add	r0, r1
 801b5de:	4770      	bx	lr
 801b5e0:	4911      	ldr	r1, [pc, #68]	; (801b628 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b5e2:	8809      	ldrh	r1, [r1, #0]
 801b5e4:	4419      	add	r1, r3
 801b5e6:	428a      	cmp	r2, r1
 801b5e8:	da16      	bge.n	801b618 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b5ea:	4910      	ldr	r1, [pc, #64]	; (801b62c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b5ec:	1ad3      	subs	r3, r2, r3
 801b5ee:	200e      	movs	r0, #14
 801b5f0:	6809      	ldr	r1, [r1, #0]
 801b5f2:	fb00 1303 	mla	r3, r0, r3, r1
 801b5f6:	7b19      	ldrb	r1, [r3, #12]
 801b5f8:	f001 011f 	and.w	r1, r1, #31
 801b5fc:	290b      	cmp	r1, #11
 801b5fe:	d10b      	bne.n	801b618 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b600:	8919      	ldrh	r1, [r3, #8]
 801b602:	8958      	ldrh	r0, [r3, #10]
 801b604:	4b07      	ldr	r3, [pc, #28]	; (801b624 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b606:	4348      	muls	r0, r1
 801b608:	6819      	ldr	r1, [r3, #0]
 801b60a:	3003      	adds	r0, #3
 801b60c:	f020 0303 	bic.w	r3, r0, #3
 801b610:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b614:	4418      	add	r0, r3
 801b616:	4770      	bx	lr
 801b618:	2000      	movs	r0, #0
 801b61a:	4770      	bx	lr
 801b61c:	2000be2c 	.word	0x2000be2c
 801b620:	2000be34 	.word	0x2000be34
 801b624:	2000be10 	.word	0x2000be10
 801b628:	2000be30 	.word	0x2000be30
 801b62c:	2000be14 	.word	0x2000be14

0801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b630:	4b19      	ldr	r3, [pc, #100]	; (801b698 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b632:	6819      	ldr	r1, [r3, #0]
 801b634:	8803      	ldrh	r3, [r0, #0]
 801b636:	b1e9      	cbz	r1, 801b674 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b638:	4a18      	ldr	r2, [pc, #96]	; (801b69c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b63a:	8812      	ldrh	r2, [r2, #0]
 801b63c:	429a      	cmp	r2, r3
 801b63e:	d90a      	bls.n	801b656 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b640:	2214      	movs	r2, #20
 801b642:	fb02 1303 	mla	r3, r2, r3, r1
 801b646:	7c58      	ldrb	r0, [r3, #17]
 801b648:	0942      	lsrs	r2, r0, #5
 801b64a:	7cd8      	ldrb	r0, [r3, #19]
 801b64c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b650:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b654:	4770      	bx	lr
 801b656:	4912      	ldr	r1, [pc, #72]	; (801b6a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b658:	8809      	ldrh	r1, [r1, #0]
 801b65a:	4411      	add	r1, r2
 801b65c:	428b      	cmp	r3, r1
 801b65e:	da09      	bge.n	801b674 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b660:	1a9b      	subs	r3, r3, r2
 801b662:	4a10      	ldr	r2, [pc, #64]	; (801b6a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b664:	210e      	movs	r1, #14
 801b666:	6812      	ldr	r2, [r2, #0]
 801b668:	fb01 2303 	mla	r3, r1, r3, r2
 801b66c:	7b18      	ldrb	r0, [r3, #12]
 801b66e:	f000 001f 	and.w	r0, r0, #31
 801b672:	4770      	bx	lr
 801b674:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b678:	4293      	cmp	r3, r2
 801b67a:	d10a      	bne.n	801b692 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b67c:	4b0a      	ldr	r3, [pc, #40]	; (801b6a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b684:	b10a      	cbz	r2, 801b68a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b686:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b688:	b900      	cbnz	r0, 801b68c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b68a:	6898      	ldr	r0, [r3, #8]
 801b68c:	6803      	ldr	r3, [r0, #0]
 801b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b690:	4718      	bx	r3
 801b692:	2000      	movs	r0, #0
 801b694:	4770      	bx	lr
 801b696:	bf00      	nop
 801b698:	2000be34 	.word	0x2000be34
 801b69c:	2000be2c 	.word	0x2000be2c
 801b6a0:	2000be30 	.word	0x2000be30
 801b6a4:	2000be14 	.word	0x2000be14
 801b6a8:	2000bd6c 	.word	0x2000bd6c

0801b6ac <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b6ac:	2018      	movs	r0, #24
 801b6ae:	4770      	bx	lr

0801b6b0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b6b0:	2001      	movs	r0, #1
 801b6b2:	4770      	bx	lr

0801b6b4 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801b6b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b6b8:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801b6bc:	4770      	bx	lr

0801b6be <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801b6be:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801b6c2:	4770      	bx	lr

0801b6c4 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801b6c4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801b6c8:	4770      	bx	lr

0801b6ca <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801b6ca:	b2c8      	uxtb	r0, r1
 801b6cc:	4770      	bx	lr

0801b6ce <_ZN8touchgfx8LCD24bpp4initEv>:
 801b6ce:	4770      	bx	lr

0801b6d0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d4:	b085      	sub	sp, #20
 801b6d6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801b6d8:	9203      	str	r2, [sp, #12]
 801b6da:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b6de:	6878      	ldr	r0, [r7, #4]
 801b6e0:	9201      	str	r2, [sp, #4]
 801b6e2:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801b6e4:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801b6e8:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801b6ec:	fa1f fc84 	uxth.w	ip, r4
 801b6f0:	43e4      	mvns	r4, r4
 801b6f2:	9100      	str	r1, [sp, #0]
 801b6f4:	b2e4      	uxtb	r4, r4
 801b6f6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b6fa:	fb00 2505 	mla	r5, r0, r5, r2
 801b6fe:	683a      	ldr	r2, [r7, #0]
 801b700:	6877      	ldr	r7, [r6, #4]
 801b702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b706:	3704      	adds	r7, #4
 801b708:	4415      	add	r5, r2
 801b70a:	6832      	ldr	r2, [r6, #0]
 801b70c:	9202      	str	r2, [sp, #8]
 801b70e:	9a00      	ldr	r2, [sp, #0]
 801b710:	2a00      	cmp	r2, #0
 801b712:	dc03      	bgt.n	801b71c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b714:	9a03      	ldr	r2, [sp, #12]
 801b716:	2a00      	cmp	r2, #0
 801b718:	f340 8116 	ble.w	801b948 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b71c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b71e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b722:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b724:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b728:	2b00      	cmp	r3, #0
 801b72a:	dd0f      	ble.n	801b74c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b72c:	1406      	asrs	r6, r0, #16
 801b72e:	d406      	bmi.n	801b73e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b730:	4546      	cmp	r6, r8
 801b732:	da04      	bge.n	801b73e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b734:	1416      	asrs	r6, r2, #16
 801b736:	d402      	bmi.n	801b73e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b738:	9901      	ldr	r1, [sp, #4]
 801b73a:	428e      	cmp	r6, r1
 801b73c:	db07      	blt.n	801b74e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b73e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b740:	3b01      	subs	r3, #1
 801b742:	3503      	adds	r5, #3
 801b744:	4408      	add	r0, r1
 801b746:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b748:	440a      	add	r2, r1
 801b74a:	e7ed      	b.n	801b728 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b74c:	d011      	beq.n	801b772 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b74e:	1e5e      	subs	r6, r3, #1
 801b750:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b752:	fb01 0e06 	mla	lr, r1, r6, r0
 801b756:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b75a:	d548      	bpl.n	801b7ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801b75c:	4699      	mov	r9, r3
 801b75e:	462e      	mov	r6, r5
 801b760:	f1b9 0f00 	cmp.w	r9, #0
 801b764:	f300 809e 	bgt.w	801b8a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801b768:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b76c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b770:	441d      	add	r5, r3
 801b772:	9b00      	ldr	r3, [sp, #0]
 801b774:	2b00      	cmp	r3, #0
 801b776:	f340 80e7 	ble.w	801b948 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b77a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b780:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b784:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b788:	eef0 6a62 	vmov.f32	s13, s5
 801b78c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b790:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b794:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b798:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b79c:	eef0 6a43 	vmov.f32	s13, s6
 801b7a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b7a4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b7a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b7ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b7b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b7b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b7b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b7bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b7c0:	ee12 2a90 	vmov	r2, s5
 801b7c4:	eef0 2a47 	vmov.f32	s5, s14
 801b7c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7cc:	ee13 2a10 	vmov	r2, s6
 801b7d0:	9311      	str	r3, [sp, #68]	; 0x44
 801b7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7d4:	eeb0 3a67 	vmov.f32	s6, s15
 801b7d8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7dc:	9312      	str	r3, [sp, #72]	; 0x48
 801b7de:	9b00      	ldr	r3, [sp, #0]
 801b7e0:	9a03      	ldr	r2, [sp, #12]
 801b7e2:	3b01      	subs	r3, #1
 801b7e4:	9300      	str	r3, [sp, #0]
 801b7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7e8:	bf08      	it	eq
 801b7ea:	4613      	moveq	r3, r2
 801b7ec:	e78f      	b.n	801b70e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b7ee:	45c6      	cmp	lr, r8
 801b7f0:	dab4      	bge.n	801b75c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b7f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b7f4:	fb01 2606 	mla	r6, r1, r6, r2
 801b7f8:	1436      	asrs	r6, r6, #16
 801b7fa:	d4af      	bmi.n	801b75c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b7fc:	9901      	ldr	r1, [sp, #4]
 801b7fe:	428e      	cmp	r6, r1
 801b800:	daac      	bge.n	801b75c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b802:	1cee      	adds	r6, r5, #3
 801b804:	4699      	mov	r9, r3
 801b806:	f1b9 0f00 	cmp.w	r9, #0
 801b80a:	f106 0603 	add.w	r6, r6, #3
 801b80e:	ddab      	ble.n	801b768 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b810:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b814:	9902      	ldr	r1, [sp, #8]
 801b816:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b81a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b81e:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b822:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b824:	fb1b fb04 	smulbb	fp, fp, r4
 801b828:	f109 39ff 	add.w	r9, r9, #4294967295
 801b82c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b830:	4408      	add	r0, r1
 801b832:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b834:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b838:	440a      	add	r2, r1
 801b83a:	eb07 0a0e 	add.w	sl, r7, lr
 801b83e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b842:	fb0e be0c 	mla	lr, lr, ip, fp
 801b846:	fa1f fe8e 	uxth.w	lr, lr
 801b84a:	f10e 0b01 	add.w	fp, lr, #1
 801b84e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b852:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b856:	fb1b fb04 	smulbb	fp, fp, r4
 801b85a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b85e:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b862:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b866:	fb0e be0c 	mla	lr, lr, ip, fp
 801b86a:	fa1f fe8e 	uxth.w	lr, lr
 801b86e:	f10e 0b01 	add.w	fp, lr, #1
 801b872:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b876:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b87a:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b87e:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b882:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b886:	fb1a fa04 	smulbb	sl, sl, r4
 801b88a:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b88e:	fa1f fe8e 	uxth.w	lr, lr
 801b892:	f10e 0a01 	add.w	sl, lr, #1
 801b896:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b89a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b89e:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b8a2:	e7b0      	b.n	801b806 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b8a4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b8a8:	d446      	bmi.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b8aa:	45c2      	cmp	sl, r8
 801b8ac:	da44      	bge.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b8ae:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b8b2:	d441      	bmi.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b8b4:	9901      	ldr	r1, [sp, #4]
 801b8b6:	458e      	cmp	lr, r1
 801b8b8:	da3e      	bge.n	801b938 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b8ba:	9902      	ldr	r1, [sp, #8]
 801b8bc:	f896 b000 	ldrb.w	fp, [r6]
 801b8c0:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b8c4:	fb1b fb04 	smulbb	fp, fp, r4
 801b8c8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b8cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b8d0:	eb07 0a0e 	add.w	sl, r7, lr
 801b8d4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b8d8:	fb0e be0c 	mla	lr, lr, ip, fp
 801b8dc:	fa1f fe8e 	uxth.w	lr, lr
 801b8e0:	f10e 0b01 	add.w	fp, lr, #1
 801b8e4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b8e8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b8ec:	fb1b fb04 	smulbb	fp, fp, r4
 801b8f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b8f4:	f886 e000 	strb.w	lr, [r6]
 801b8f8:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b8fc:	fb0e be0c 	mla	lr, lr, ip, fp
 801b900:	fa1f fe8e 	uxth.w	lr, lr
 801b904:	f10e 0b01 	add.w	fp, lr, #1
 801b908:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b90c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b910:	f886 e001 	strb.w	lr, [r6, #1]
 801b914:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b918:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b91c:	fb1a fa04 	smulbb	sl, sl, r4
 801b920:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b924:	fa1f fe8e 	uxth.w	lr, lr
 801b928:	f10e 0a01 	add.w	sl, lr, #1
 801b92c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b930:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b934:	f886 e002 	strb.w	lr, [r6, #2]
 801b938:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b93a:	3603      	adds	r6, #3
 801b93c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b940:	4408      	add	r0, r1
 801b942:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b944:	440a      	add	r2, r1
 801b946:	e70b      	b.n	801b760 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b948:	b005      	add	sp, #20
 801b94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b94e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b952:	b085      	sub	sp, #20
 801b954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b958:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b95a:	9203      	str	r2, [sp, #12]
 801b95c:	6870      	ldr	r0, [r6, #4]
 801b95e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b960:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b964:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b968:	9101      	str	r1, [sp, #4]
 801b96a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b96e:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801b972:	fb00 2404 	mla	r4, r0, r4, r2
 801b976:	6832      	ldr	r2, [r6, #0]
 801b978:	686e      	ldr	r6, [r5, #4]
 801b97a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b97e:	3604      	adds	r6, #4
 801b980:	4414      	add	r4, r2
 801b982:	682a      	ldr	r2, [r5, #0]
 801b984:	9202      	str	r2, [sp, #8]
 801b986:	9a01      	ldr	r2, [sp, #4]
 801b988:	2a00      	cmp	r2, #0
 801b98a:	dc03      	bgt.n	801b994 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b98c:	9a03      	ldr	r2, [sp, #12]
 801b98e:	2a00      	cmp	r2, #0
 801b990:	f340 80b2 	ble.w	801baf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b994:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b996:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b99a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b99c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	dd0c      	ble.n	801b9be <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b9a4:	1405      	asrs	r5, r0, #16
 801b9a6:	d405      	bmi.n	801b9b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b9a8:	4575      	cmp	r5, lr
 801b9aa:	da03      	bge.n	801b9b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b9ac:	1415      	asrs	r5, r2, #16
 801b9ae:	d401      	bmi.n	801b9b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b9b0:	4545      	cmp	r5, r8
 801b9b2:	db05      	blt.n	801b9c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b9b4:	4460      	add	r0, ip
 801b9b6:	443a      	add	r2, r7
 801b9b8:	3b01      	subs	r3, #1
 801b9ba:	3403      	adds	r4, #3
 801b9bc:	e7f0      	b.n	801b9a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801b9be:	d03d      	beq.n	801ba3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b9c0:	1e5d      	subs	r5, r3, #1
 801b9c2:	fb0c 0905 	mla	r9, ip, r5, r0
 801b9c6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b9ca:	d42c      	bmi.n	801ba26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b9cc:	45f1      	cmp	r9, lr
 801b9ce:	da2a      	bge.n	801ba26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b9d0:	fb07 2505 	mla	r5, r7, r5, r2
 801b9d4:	142d      	asrs	r5, r5, #16
 801b9d6:	d426      	bmi.n	801ba26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b9d8:	4545      	cmp	r5, r8
 801b9da:	da24      	bge.n	801ba26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b9dc:	1ce5      	adds	r5, r4, #3
 801b9de:	469a      	mov	sl, r3
 801b9e0:	f1ba 0f00 	cmp.w	sl, #0
 801b9e4:	f105 0503 	add.w	r5, r5, #3
 801b9e8:	dd23      	ble.n	801ba32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b9ea:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b9ee:	9902      	ldr	r1, [sp, #8]
 801b9f0:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b9f4:	443a      	add	r2, r7
 801b9f6:	fb0e 1909 	mla	r9, lr, r9, r1
 801b9fa:	4460      	add	r0, ip
 801b9fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba00:	f819 900b 	ldrb.w	r9, [r9, fp]
 801ba04:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ba08:	eb06 0b09 	add.w	fp, r6, r9
 801ba0c:	f816 9009 	ldrb.w	r9, [r6, r9]
 801ba10:	f805 9c06 	strb.w	r9, [r5, #-6]
 801ba14:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ba18:	f805 9c05 	strb.w	r9, [r5, #-5]
 801ba1c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ba20:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ba24:	e7dc      	b.n	801b9e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ba26:	2500      	movs	r5, #0
 801ba28:	eba3 0905 	sub.w	r9, r3, r5
 801ba2c:	f1b9 0f00 	cmp.w	r9, #0
 801ba30:	dc3c      	bgt.n	801baac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801ba32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba3a:	441c      	add	r4, r3
 801ba3c:	9b01      	ldr	r3, [sp, #4]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	dd5a      	ble.n	801baf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801ba42:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba4c:	eeb0 6a62 	vmov.f32	s12, s5
 801ba50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba54:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba5c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ba60:	eeb0 6a43 	vmov.f32	s12, s6
 801ba64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba68:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ba6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba70:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba74:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba84:	ee12 2a90 	vmov	r2, s5
 801ba88:	eef0 2a47 	vmov.f32	s5, s14
 801ba8c:	fb92 fcf3 	sdiv	ip, r2, r3
 801ba90:	ee13 2a10 	vmov	r2, s6
 801ba94:	eeb0 3a67 	vmov.f32	s6, s15
 801ba98:	fb92 f7f3 	sdiv	r7, r2, r3
 801ba9c:	9b01      	ldr	r3, [sp, #4]
 801ba9e:	9a03      	ldr	r2, [sp, #12]
 801baa0:	3b01      	subs	r3, #1
 801baa2:	9301      	str	r3, [sp, #4]
 801baa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801baa6:	bf08      	it	eq
 801baa8:	4613      	moveq	r3, r2
 801baaa:	e76c      	b.n	801b986 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801baac:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bab0:	d41e      	bmi.n	801baf0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801bab2:	45f2      	cmp	sl, lr
 801bab4:	da1c      	bge.n	801baf0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801bab6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801baba:	d419      	bmi.n	801baf0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801babc:	45c1      	cmp	r9, r8
 801babe:	da17      	bge.n	801baf0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801bac0:	9902      	ldr	r1, [sp, #8]
 801bac2:	fb0e 1909 	mla	r9, lr, r9, r1
 801bac6:	f819 900a 	ldrb.w	r9, [r9, sl]
 801baca:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bace:	f816 b009 	ldrb.w	fp, [r6, r9]
 801bad2:	eb06 0a09 	add.w	sl, r6, r9
 801bad6:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801bada:	f804 b009 	strb.w	fp, [r4, r9]
 801bade:	44a1      	add	r9, r4
 801bae0:	f89a b001 	ldrb.w	fp, [sl, #1]
 801bae4:	f889 b001 	strb.w	fp, [r9, #1]
 801bae8:	f89a a002 	ldrb.w	sl, [sl, #2]
 801baec:	f889 a002 	strb.w	sl, [r9, #2]
 801baf0:	4460      	add	r0, ip
 801baf2:	443a      	add	r2, r7
 801baf4:	3501      	adds	r5, #1
 801baf6:	e797      	b.n	801ba28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801baf8:	b005      	add	sp, #20
 801bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bafe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bafe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb02:	b087      	sub	sp, #28
 801bb04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801bb0a:	9204      	str	r2, [sp, #16]
 801bb0c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801bb10:	6870      	ldr	r0, [r6, #4]
 801bb12:	9205      	str	r2, [sp, #20]
 801bb14:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801bb16:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801bb1a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801bb1e:	9101      	str	r1, [sp, #4]
 801bb20:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801bb24:	fb00 2505 	mla	r5, r0, r5, r2
 801bb28:	6832      	ldr	r2, [r6, #0]
 801bb2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb2e:	4415      	add	r5, r2
 801bb30:	6822      	ldr	r2, [r4, #0]
 801bb32:	9202      	str	r2, [sp, #8]
 801bb34:	6862      	ldr	r2, [r4, #4]
 801bb36:	3204      	adds	r2, #4
 801bb38:	9203      	str	r2, [sp, #12]
 801bb3a:	9a01      	ldr	r2, [sp, #4]
 801bb3c:	2a00      	cmp	r2, #0
 801bb3e:	dc03      	bgt.n	801bb48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801bb40:	9a04      	ldr	r2, [sp, #16]
 801bb42:	2a00      	cmp	r2, #0
 801bb44:	f340 8124 	ble.w	801bd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801bb48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb4a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bb4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb50:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	dd0e      	ble.n	801bb76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801bb58:	1422      	asrs	r2, r4, #16
 801bb5a:	d405      	bmi.n	801bb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801bb5c:	4572      	cmp	r2, lr
 801bb5e:	da03      	bge.n	801bb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801bb60:	1402      	asrs	r2, r0, #16
 801bb62:	d401      	bmi.n	801bb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801bb64:	4542      	cmp	r2, r8
 801bb66:	db07      	blt.n	801bb78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801bb68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb6a:	3b01      	subs	r3, #1
 801bb6c:	3503      	adds	r5, #3
 801bb6e:	4414      	add	r4, r2
 801bb70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb72:	4410      	add	r0, r2
 801bb74:	e7ee      	b.n	801bb54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801bb76:	d010      	beq.n	801bb9a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801bb78:	1e5a      	subs	r2, r3, #1
 801bb7a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bb7c:	fb06 4602 	mla	r6, r6, r2, r4
 801bb80:	1436      	asrs	r6, r6, #16
 801bb82:	d546      	bpl.n	801bc12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801bb84:	4699      	mov	r9, r3
 801bb86:	462f      	mov	r7, r5
 801bb88:	f1b9 0f00 	cmp.w	r9, #0
 801bb8c:	f300 80a5 	bgt.w	801bcda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801bb90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb98:	441d      	add	r5, r3
 801bb9a:	9b01      	ldr	r3, [sp, #4]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	f340 80f7 	ble.w	801bd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801bba2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bba8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bbac:	eeb0 6a62 	vmov.f32	s12, s5
 801bbb0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bbb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bbb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbbc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bbc0:	eeb0 6a43 	vmov.f32	s12, s6
 801bbc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbc8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bbcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bbd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bbd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bbd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bbdc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bbe0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bbe4:	ee12 2a90 	vmov	r2, s5
 801bbe8:	eef0 2a47 	vmov.f32	s5, s14
 801bbec:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbf0:	ee13 2a10 	vmov	r2, s6
 801bbf4:	9313      	str	r3, [sp, #76]	; 0x4c
 801bbf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbf8:	eeb0 3a67 	vmov.f32	s6, s15
 801bbfc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc00:	9314      	str	r3, [sp, #80]	; 0x50
 801bc02:	9b01      	ldr	r3, [sp, #4]
 801bc04:	9a04      	ldr	r2, [sp, #16]
 801bc06:	3b01      	subs	r3, #1
 801bc08:	9301      	str	r3, [sp, #4]
 801bc0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc0c:	bf08      	it	eq
 801bc0e:	4613      	moveq	r3, r2
 801bc10:	e793      	b.n	801bb3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801bc12:	4576      	cmp	r6, lr
 801bc14:	dab6      	bge.n	801bb84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bc16:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bc18:	fb06 0202 	mla	r2, r6, r2, r0
 801bc1c:	1412      	asrs	r2, r2, #16
 801bc1e:	d4b1      	bmi.n	801bb84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bc20:	4542      	cmp	r2, r8
 801bc22:	daaf      	bge.n	801bb84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bc24:	1cef      	adds	r7, r5, #3
 801bc26:	4699      	mov	r9, r3
 801bc28:	f1b9 0f00 	cmp.w	r9, #0
 801bc2c:	ddb0      	ble.n	801bb90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801bc2e:	9902      	ldr	r1, [sp, #8]
 801bc30:	1402      	asrs	r2, r0, #16
 801bc32:	1426      	asrs	r6, r4, #16
 801bc34:	fb0e 1202 	mla	r2, lr, r2, r1
 801bc38:	9903      	ldr	r1, [sp, #12]
 801bc3a:	5d92      	ldrb	r2, [r2, r6]
 801bc3c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bc40:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bc44:	d041      	beq.n	801bcca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bc46:	9a05      	ldr	r2, [sp, #20]
 801bc48:	fa5f fb86 	uxtb.w	fp, r6
 801bc4c:	fb02 fc0c 	mul.w	ip, r2, ip
 801bc50:	f10c 0201 	add.w	r2, ip, #1
 801bc54:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bc58:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801bc5c:	1212      	asrs	r2, r2, #8
 801bc5e:	fa1f fa82 	uxth.w	sl, r2
 801bc62:	43d2      	mvns	r2, r2
 801bc64:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc68:	b2d2      	uxtb	r2, r2
 801bc6a:	fb0c bc02 	mla	ip, ip, r2, fp
 801bc6e:	fa1f fc8c 	uxth.w	ip, ip
 801bc72:	f10c 0b01 	add.w	fp, ip, #1
 801bc76:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bc7a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bc7e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bc82:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc86:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc8a:	fb16 fa0a 	smulbb	sl, r6, sl
 801bc8e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bc92:	f807 cc03 	strb.w	ip, [r7, #-3]
 801bc96:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801bc9a:	fb06 aa02 	mla	sl, r6, r2, sl
 801bc9e:	fb0c bc02 	mla	ip, ip, r2, fp
 801bca2:	fa1f fa8a 	uxth.w	sl, sl
 801bca6:	fa1f fc8c 	uxth.w	ip, ip
 801bcaa:	f10a 0601 	add.w	r6, sl, #1
 801bcae:	f10c 0b01 	add.w	fp, ip, #1
 801bcb2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bcb6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bcba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bcbe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bcc2:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bcc6:	f807 cc02 	strb.w	ip, [r7, #-2]
 801bcca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bccc:	3703      	adds	r7, #3
 801bcce:	f109 39ff 	add.w	r9, r9, #4294967295
 801bcd2:	4414      	add	r4, r2
 801bcd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bcd6:	4410      	add	r0, r2
 801bcd8:	e7a6      	b.n	801bc28 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bcda:	1426      	asrs	r6, r4, #16
 801bcdc:	d450      	bmi.n	801bd80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bcde:	4576      	cmp	r6, lr
 801bce0:	da4e      	bge.n	801bd80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bce2:	1402      	asrs	r2, r0, #16
 801bce4:	d44c      	bmi.n	801bd80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bce6:	4542      	cmp	r2, r8
 801bce8:	da4a      	bge.n	801bd80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bcea:	9902      	ldr	r1, [sp, #8]
 801bcec:	fb0e 1202 	mla	r2, lr, r2, r1
 801bcf0:	9903      	ldr	r1, [sp, #12]
 801bcf2:	5d92      	ldrb	r2, [r2, r6]
 801bcf4:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bcf8:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bcfc:	d040      	beq.n	801bd80 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bcfe:	9a05      	ldr	r2, [sp, #20]
 801bd00:	fa5f fb86 	uxtb.w	fp, r6
 801bd04:	fb02 fc0c 	mul.w	ip, r2, ip
 801bd08:	f10c 0201 	add.w	r2, ip, #1
 801bd0c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bd10:	f897 c000 	ldrb.w	ip, [r7]
 801bd14:	1212      	asrs	r2, r2, #8
 801bd16:	fa1f fa82 	uxth.w	sl, r2
 801bd1a:	43d2      	mvns	r2, r2
 801bd1c:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd20:	b2d2      	uxtb	r2, r2
 801bd22:	fb0c bc02 	mla	ip, ip, r2, fp
 801bd26:	fa1f fc8c 	uxth.w	ip, ip
 801bd2a:	f10c 0b01 	add.w	fp, ip, #1
 801bd2e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bd32:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bd36:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bd3a:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd3e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd42:	fb16 fa0a 	smulbb	sl, r6, sl
 801bd46:	78be      	ldrb	r6, [r7, #2]
 801bd48:	f887 c000 	strb.w	ip, [r7]
 801bd4c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801bd50:	fb06 aa02 	mla	sl, r6, r2, sl
 801bd54:	fb0c bc02 	mla	ip, ip, r2, fp
 801bd58:	fa1f fa8a 	uxth.w	sl, sl
 801bd5c:	fa1f fc8c 	uxth.w	ip, ip
 801bd60:	f10a 0601 	add.w	r6, sl, #1
 801bd64:	f10c 0b01 	add.w	fp, ip, #1
 801bd68:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bd6c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bd70:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bd74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd78:	f887 a002 	strb.w	sl, [r7, #2]
 801bd7c:	f887 c001 	strb.w	ip, [r7, #1]
 801bd80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bd82:	3703      	adds	r7, #3
 801bd84:	f109 39ff 	add.w	r9, r9, #4294967295
 801bd88:	4414      	add	r4, r2
 801bd8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bd8c:	4410      	add	r0, r2
 801bd8e:	e6fb      	b.n	801bb88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bd90:	b007      	add	sp, #28
 801bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bd96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd9a:	b085      	sub	sp, #20
 801bd9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bda0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bda2:	9203      	str	r2, [sp, #12]
 801bda4:	6870      	ldr	r0, [r6, #4]
 801bda6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801bda8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bdac:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801bdb0:	9100      	str	r1, [sp, #0]
 801bdb2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bdb6:	fb00 2404 	mla	r4, r0, r4, r2
 801bdba:	6832      	ldr	r2, [r6, #0]
 801bdbc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bdc0:	4414      	add	r4, r2
 801bdc2:	682a      	ldr	r2, [r5, #0]
 801bdc4:	9201      	str	r2, [sp, #4]
 801bdc6:	686a      	ldr	r2, [r5, #4]
 801bdc8:	3204      	adds	r2, #4
 801bdca:	9202      	str	r2, [sp, #8]
 801bdcc:	9a00      	ldr	r2, [sp, #0]
 801bdce:	2a00      	cmp	r2, #0
 801bdd0:	dc03      	bgt.n	801bdda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801bdd2:	9a03      	ldr	r2, [sp, #12]
 801bdd4:	2a00      	cmp	r2, #0
 801bdd6:	f340 8131 	ble.w	801c03c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bdda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bddc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bde0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bde2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	dd0e      	ble.n	801be08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bdea:	1405      	asrs	r5, r0, #16
 801bdec:	d405      	bmi.n	801bdfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bdee:	4575      	cmp	r5, lr
 801bdf0:	da03      	bge.n	801bdfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bdf2:	1415      	asrs	r5, r2, #16
 801bdf4:	d401      	bmi.n	801bdfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bdf6:	4545      	cmp	r5, r8
 801bdf8:	db07      	blt.n	801be0a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bdfa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bdfc:	3b01      	subs	r3, #1
 801bdfe:	3403      	adds	r4, #3
 801be00:	4428      	add	r0, r5
 801be02:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801be04:	442a      	add	r2, r5
 801be06:	e7ee      	b.n	801bde6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801be08:	d06f      	beq.n	801beea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801be0a:	1e5d      	subs	r5, r3, #1
 801be0c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801be0e:	fb06 0605 	mla	r6, r6, r5, r0
 801be12:	1436      	asrs	r6, r6, #16
 801be14:	d460      	bmi.n	801bed8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801be16:	4576      	cmp	r6, lr
 801be18:	da5e      	bge.n	801bed8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801be1a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801be1c:	fb06 2505 	mla	r5, r6, r5, r2
 801be20:	142d      	asrs	r5, r5, #16
 801be22:	d459      	bmi.n	801bed8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801be24:	4545      	cmp	r5, r8
 801be26:	da57      	bge.n	801bed8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801be28:	1ce5      	adds	r5, r4, #3
 801be2a:	469a      	mov	sl, r3
 801be2c:	f1ba 0f00 	cmp.w	sl, #0
 801be30:	dd56      	ble.n	801bee0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801be32:	9901      	ldr	r1, [sp, #4]
 801be34:	1416      	asrs	r6, r2, #16
 801be36:	1407      	asrs	r7, r0, #16
 801be38:	fb0e 1606 	mla	r6, lr, r6, r1
 801be3c:	9902      	ldr	r1, [sp, #8]
 801be3e:	5df6      	ldrb	r6, [r6, r7]
 801be40:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801be44:	0e37      	lsrs	r7, r6, #24
 801be46:	2fff      	cmp	r7, #255	; 0xff
 801be48:	f000 80ef 	beq.w	801c02a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801be4c:	fa5f fc87 	uxtb.w	ip, r7
 801be50:	b3d7      	cbz	r7, 801bec8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801be52:	fa1f f78c 	uxth.w	r7, ip
 801be56:	ea6f 0c0c 	mvn.w	ip, ip
 801be5a:	fa5f fb86 	uxtb.w	fp, r6
 801be5e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801be62:	fa5f fc8c 	uxtb.w	ip, ip
 801be66:	fb1b fb07 	smulbb	fp, fp, r7
 801be6a:	fb09 b90c 	mla	r9, r9, ip, fp
 801be6e:	fa1f f989 	uxth.w	r9, r9
 801be72:	f109 0b01 	add.w	fp, r9, #1
 801be76:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801be7a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801be7e:	fb1b fb0c 	smulbb	fp, fp, ip
 801be82:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be86:	f805 9c03 	strb.w	r9, [r5, #-3]
 801be8a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801be8e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801be92:	fb09 b907 	mla	r9, r9, r7, fp
 801be96:	fa1f f989 	uxth.w	r9, r9
 801be9a:	f109 0b01 	add.w	fp, r9, #1
 801be9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bea2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bea6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801beaa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801beae:	fb19 fc0c 	smulbb	ip, r9, ip
 801beb2:	fb06 c607 	mla	r6, r6, r7, ip
 801beb6:	b2b6      	uxth	r6, r6
 801beb8:	f106 0c01 	add.w	ip, r6, #1
 801bebc:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801bec0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bec4:	f805 cc01 	strb.w	ip, [r5, #-1]
 801bec8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801beca:	3503      	adds	r5, #3
 801becc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bed0:	4408      	add	r0, r1
 801bed2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bed4:	440a      	add	r2, r1
 801bed6:	e7a9      	b.n	801be2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801bed8:	2600      	movs	r6, #0
 801beda:	1b9d      	subs	r5, r3, r6
 801bedc:	2d00      	cmp	r5, #0
 801bede:	dc40      	bgt.n	801bf62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bee0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bee8:	441c      	add	r4, r3
 801beea:	9b00      	ldr	r3, [sp, #0]
 801beec:	2b00      	cmp	r3, #0
 801beee:	f340 80a5 	ble.w	801c03c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bef2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bef8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801befc:	eeb0 6a62 	vmov.f32	s12, s5
 801bf00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf04:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf0c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bf10:	eeb0 6a43 	vmov.f32	s12, s6
 801bf14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf18:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bf1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf20:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf24:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf34:	ee12 2a90 	vmov	r2, s5
 801bf38:	eef0 2a47 	vmov.f32	s5, s14
 801bf3c:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf40:	ee13 2a10 	vmov	r2, s6
 801bf44:	9311      	str	r3, [sp, #68]	; 0x44
 801bf46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf48:	eeb0 3a67 	vmov.f32	s6, s15
 801bf4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf50:	9312      	str	r3, [sp, #72]	; 0x48
 801bf52:	9b00      	ldr	r3, [sp, #0]
 801bf54:	9a03      	ldr	r2, [sp, #12]
 801bf56:	3b01      	subs	r3, #1
 801bf58:	9300      	str	r3, [sp, #0]
 801bf5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf5c:	bf08      	it	eq
 801bf5e:	4613      	moveq	r3, r2
 801bf60:	e734      	b.n	801bdcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801bf62:	1407      	asrs	r7, r0, #16
 801bf64:	d450      	bmi.n	801c008 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bf66:	4577      	cmp	r7, lr
 801bf68:	da4e      	bge.n	801c008 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bf6a:	1415      	asrs	r5, r2, #16
 801bf6c:	d44c      	bmi.n	801c008 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bf6e:	4545      	cmp	r5, r8
 801bf70:	da4a      	bge.n	801c008 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bf72:	9901      	ldr	r1, [sp, #4]
 801bf74:	fb0e 1505 	mla	r5, lr, r5, r1
 801bf78:	9902      	ldr	r1, [sp, #8]
 801bf7a:	5ded      	ldrb	r5, [r5, r7]
 801bf7c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801bf80:	0e2f      	lsrs	r7, r5, #24
 801bf82:	2fff      	cmp	r7, #255	; 0xff
 801bf84:	d046      	beq.n	801c014 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801bf86:	fa5f f987 	uxtb.w	r9, r7
 801bf8a:	b3ef      	cbz	r7, 801c008 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bf8c:	fa1f fc89 	uxth.w	ip, r9
 801bf90:	ea6f 0909 	mvn.w	r9, r9
 801bf94:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bf98:	fa5f fb85 	uxtb.w	fp, r5
 801bf9c:	f814 a007 	ldrb.w	sl, [r4, r7]
 801bfa0:	fa5f f989 	uxtb.w	r9, r9
 801bfa4:	fb1b fb0c 	smulbb	fp, fp, ip
 801bfa8:	fb0a ba09 	mla	sl, sl, r9, fp
 801bfac:	fa1f fa8a 	uxth.w	sl, sl
 801bfb0:	f10a 0b01 	add.w	fp, sl, #1
 801bfb4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bfb8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bfbc:	f804 a007 	strb.w	sl, [r4, r7]
 801bfc0:	4427      	add	r7, r4
 801bfc2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bfc6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801bfca:	f897 b001 	ldrb.w	fp, [r7, #1]
 801bfce:	fb1b fb09 	smulbb	fp, fp, r9
 801bfd2:	fb0a ba0c 	mla	sl, sl, ip, fp
 801bfd6:	fa1f fa8a 	uxth.w	sl, sl
 801bfda:	f10a 0b01 	add.w	fp, sl, #1
 801bfde:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bfe2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bfe6:	f887 a001 	strb.w	sl, [r7, #1]
 801bfea:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bfee:	fb1a f909 	smulbb	r9, sl, r9
 801bff2:	fb05 950c 	mla	r5, r5, ip, r9
 801bff6:	b2ad      	uxth	r5, r5
 801bff8:	f105 0901 	add.w	r9, r5, #1
 801bffc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c000:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c004:	f887 9002 	strb.w	r9, [r7, #2]
 801c008:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c00a:	3601      	adds	r6, #1
 801c00c:	4408      	add	r0, r1
 801c00e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c010:	440a      	add	r2, r1
 801c012:	e762      	b.n	801beda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c014:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c018:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801c01c:	55e5      	strb	r5, [r4, r7]
 801c01e:	4427      	add	r7, r4
 801c020:	0c2d      	lsrs	r5, r5, #16
 801c022:	f887 c001 	strb.w	ip, [r7, #1]
 801c026:	70bd      	strb	r5, [r7, #2]
 801c028:	e7ee      	b.n	801c008 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c02a:	0a37      	lsrs	r7, r6, #8
 801c02c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c030:	0c36      	lsrs	r6, r6, #16
 801c032:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c036:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c03a:	e745      	b.n	801bec8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c03c:	b005      	add	sp, #20
 801c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c042 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c046:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c048:	9201      	str	r2, [sp, #4]
 801c04a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c04e:	6870      	ldr	r0, [r6, #4]
 801c050:	9200      	str	r2, [sp, #0]
 801c052:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c056:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801c05a:	fa1f fc85 	uxth.w	ip, r5
 801c05e:	43ed      	mvns	r5, r5
 801c060:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c064:	b2ed      	uxtb	r5, r5
 801c066:	fb00 2404 	mla	r4, r0, r4, r2
 801c06a:	6832      	ldr	r2, [r6, #0]
 801c06c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c070:	4414      	add	r4, r2
 801c072:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c074:	f8d2 8000 	ldr.w	r8, [r2]
 801c078:	2900      	cmp	r1, #0
 801c07a:	dc03      	bgt.n	801c084 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801c07c:	9a01      	ldr	r2, [sp, #4]
 801c07e:	2a00      	cmp	r2, #0
 801c080:	f340 8104 	ble.w	801c28c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c086:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c08c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c090:	2b00      	cmp	r3, #0
 801c092:	dd0f      	ble.n	801c0b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c094:	1406      	asrs	r6, r0, #16
 801c096:	d406      	bmi.n	801c0a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c098:	4576      	cmp	r6, lr
 801c09a:	da04      	bge.n	801c0a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c09c:	1416      	asrs	r6, r2, #16
 801c09e:	d402      	bmi.n	801c0a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c0a0:	9f00      	ldr	r7, [sp, #0]
 801c0a2:	42be      	cmp	r6, r7
 801c0a4:	db07      	blt.n	801c0b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c0a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	3403      	adds	r4, #3
 801c0ac:	4430      	add	r0, r6
 801c0ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c0b0:	4432      	add	r2, r6
 801c0b2:	e7ed      	b.n	801c090 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c0b4:	d05f      	beq.n	801c176 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801c0b6:	1e5e      	subs	r6, r3, #1
 801c0b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c0ba:	fb07 0706 	mla	r7, r7, r6, r0
 801c0be:	143f      	asrs	r7, r7, #16
 801c0c0:	d450      	bmi.n	801c164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c0c2:	4577      	cmp	r7, lr
 801c0c4:	da4e      	bge.n	801c164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c0c6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c0c8:	fb07 2606 	mla	r6, r7, r6, r2
 801c0cc:	1436      	asrs	r6, r6, #16
 801c0ce:	d449      	bmi.n	801c164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c0d0:	9f00      	ldr	r7, [sp, #0]
 801c0d2:	42be      	cmp	r6, r7
 801c0d4:	da46      	bge.n	801c164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c0d6:	1ce6      	adds	r6, r4, #3
 801c0d8:	4699      	mov	r9, r3
 801c0da:	f1b9 0f00 	cmp.w	r9, #0
 801c0de:	f106 0603 	add.w	r6, r6, #3
 801c0e2:	dd43      	ble.n	801c16c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c0e4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c0e8:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c0ec:	1417      	asrs	r7, r2, #16
 801c0ee:	f109 39ff 	add.w	r9, r9, #4294967295
 801c0f2:	fb1b fb05 	smulbb	fp, fp, r5
 801c0f6:	fb0e a707 	mla	r7, lr, r7, sl
 801c0fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c0fe:	eb08 0a07 	add.w	sl, r8, r7
 801c102:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c106:	fb07 b70c 	mla	r7, r7, ip, fp
 801c10a:	b2bf      	uxth	r7, r7
 801c10c:	f107 0b01 	add.w	fp, r7, #1
 801c110:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c114:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c118:	fb1b fb05 	smulbb	fp, fp, r5
 801c11c:	123f      	asrs	r7, r7, #8
 801c11e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c122:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c126:	fb07 b70c 	mla	r7, r7, ip, fp
 801c12a:	b2bf      	uxth	r7, r7
 801c12c:	f107 0b01 	add.w	fp, r7, #1
 801c130:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c134:	123f      	asrs	r7, r7, #8
 801c136:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c13a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c13e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c142:	fb1a fa05 	smulbb	sl, sl, r5
 801c146:	fb07 a70c 	mla	r7, r7, ip, sl
 801c14a:	b2bf      	uxth	r7, r7
 801c14c:	f107 0a01 	add.w	sl, r7, #1
 801c150:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c154:	123f      	asrs	r7, r7, #8
 801c156:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c15a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c15c:	4438      	add	r0, r7
 801c15e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c160:	443a      	add	r2, r7
 801c162:	e7ba      	b.n	801c0da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c164:	2700      	movs	r7, #0
 801c166:	1bde      	subs	r6, r3, r7
 801c168:	2e00      	cmp	r6, #0
 801c16a:	dc3f      	bgt.n	801c1ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c16c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c174:	441c      	add	r4, r3
 801c176:	2900      	cmp	r1, #0
 801c178:	f340 8088 	ble.w	801c28c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c17c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c182:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c186:	3901      	subs	r1, #1
 801c188:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c18c:	eef0 6a62 	vmov.f32	s13, s5
 801c190:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c194:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c198:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c19c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c1a0:	eef0 6a43 	vmov.f32	s13, s6
 801c1a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1a8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c1ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1c4:	ee12 2a90 	vmov	r2, s5
 801c1c8:	eef0 2a47 	vmov.f32	s5, s14
 801c1cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1d0:	ee13 2a10 	vmov	r2, s6
 801c1d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c1d8:	eeb0 3a67 	vmov.f32	s6, s15
 801c1dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1e0:	9a01      	ldr	r2, [sp, #4]
 801c1e2:	9310      	str	r3, [sp, #64]	; 0x40
 801c1e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c1e6:	bf08      	it	eq
 801c1e8:	4613      	moveq	r3, r2
 801c1ea:	e745      	b.n	801c078 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c1ec:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c1f0:	d446      	bmi.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c1f2:	45f2      	cmp	sl, lr
 801c1f4:	da44      	bge.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c1f6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c1fa:	d441      	bmi.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c1fc:	9e00      	ldr	r6, [sp, #0]
 801c1fe:	45b1      	cmp	r9, r6
 801c200:	da3e      	bge.n	801c280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c202:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c206:	fb0e a909 	mla	r9, lr, r9, sl
 801c20a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c20e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c212:	fb1b fb05 	smulbb	fp, fp, r5
 801c216:	eb08 0a09 	add.w	sl, r8, r9
 801c21a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c21e:	fb09 b90c 	mla	r9, r9, ip, fp
 801c222:	fa1f f989 	uxth.w	r9, r9
 801c226:	f109 0b01 	add.w	fp, r9, #1
 801c22a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c22e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c232:	f804 9006 	strb.w	r9, [r4, r6]
 801c236:	4426      	add	r6, r4
 801c238:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c23c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c240:	fb1b fb05 	smulbb	fp, fp, r5
 801c244:	fb09 b90c 	mla	r9, r9, ip, fp
 801c248:	fa1f f989 	uxth.w	r9, r9
 801c24c:	f109 0b01 	add.w	fp, r9, #1
 801c250:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c254:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c258:	f886 9001 	strb.w	r9, [r6, #1]
 801c25c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c260:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c264:	fb1a fa05 	smulbb	sl, sl, r5
 801c268:	fb09 a90c 	mla	r9, r9, ip, sl
 801c26c:	fa1f f989 	uxth.w	r9, r9
 801c270:	f109 0a01 	add.w	sl, r9, #1
 801c274:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c278:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c27c:	f886 9002 	strb.w	r9, [r6, #2]
 801c280:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c282:	3701      	adds	r7, #1
 801c284:	4430      	add	r0, r6
 801c286:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c288:	4432      	add	r2, r6
 801c28a:	e76c      	b.n	801c166 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c28c:	b003      	add	sp, #12
 801c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c292 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c296:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c29c:	9201      	str	r2, [sp, #4]
 801c29e:	6868      	ldr	r0, [r5, #4]
 801c2a0:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c2a4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c2a8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c2ac:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c2b0:	fb00 2404 	mla	r4, r0, r4, r2
 801c2b4:	682a      	ldr	r2, [r5, #0]
 801c2b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c2ba:	4414      	add	r4, r2
 801c2bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c2be:	f8d2 9000 	ldr.w	r9, [r2]
 801c2c2:	2900      	cmp	r1, #0
 801c2c4:	dc03      	bgt.n	801c2ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c2c6:	9a01      	ldr	r2, [sp, #4]
 801c2c8:	2a00      	cmp	r2, #0
 801c2ca:	f340 80a8 	ble.w	801c41e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c2ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c2d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c2d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c2d6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	dd0c      	ble.n	801c2f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c2de:	1405      	asrs	r5, r0, #16
 801c2e0:	d405      	bmi.n	801c2ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c2e2:	4565      	cmp	r5, ip
 801c2e4:	da03      	bge.n	801c2ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c2e6:	1415      	asrs	r5, r2, #16
 801c2e8:	d401      	bmi.n	801c2ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c2ea:	4575      	cmp	r5, lr
 801c2ec:	db05      	blt.n	801c2fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c2ee:	4438      	add	r0, r7
 801c2f0:	4432      	add	r2, r6
 801c2f2:	3b01      	subs	r3, #1
 801c2f4:	3403      	adds	r4, #3
 801c2f6:	e7f0      	b.n	801c2da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c2f8:	d03a      	beq.n	801c370 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c2fa:	1e5d      	subs	r5, r3, #1
 801c2fc:	fb07 0805 	mla	r8, r7, r5, r0
 801c300:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c304:	d429      	bmi.n	801c35a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c306:	45e0      	cmp	r8, ip
 801c308:	da27      	bge.n	801c35a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c30a:	fb06 2505 	mla	r5, r6, r5, r2
 801c30e:	142d      	asrs	r5, r5, #16
 801c310:	d423      	bmi.n	801c35a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c312:	4575      	cmp	r5, lr
 801c314:	da21      	bge.n	801c35a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c316:	f104 0803 	add.w	r8, r4, #3
 801c31a:	469a      	mov	sl, r3
 801c31c:	f1ba 0f00 	cmp.w	sl, #0
 801c320:	f108 0803 	add.w	r8, r8, #3
 801c324:	dd1f      	ble.n	801c366 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c326:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c32e:	1415      	asrs	r5, r2, #16
 801c330:	4438      	add	r0, r7
 801c332:	4432      	add	r2, r6
 801c334:	fb0c b505 	mla	r5, ip, r5, fp
 801c338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c33c:	eb09 0b05 	add.w	fp, r9, r5
 801c340:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c344:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c348:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801c34c:	f808 5c05 	strb.w	r5, [r8, #-5]
 801c350:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801c354:	f808 5c04 	strb.w	r5, [r8, #-4]
 801c358:	e7e0      	b.n	801c31c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c35a:	2500      	movs	r5, #0
 801c35c:	eba3 0805 	sub.w	r8, r3, r5
 801c360:	f1b8 0f00 	cmp.w	r8, #0
 801c364:	dc38      	bgt.n	801c3d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801c366:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c36a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c36e:	441c      	add	r4, r3
 801c370:	2900      	cmp	r1, #0
 801c372:	dd54      	ble.n	801c41e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c374:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c37a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c37e:	3901      	subs	r1, #1
 801c380:	eeb0 6a62 	vmov.f32	s12, s5
 801c384:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c388:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c38c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c390:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c394:	eeb0 6a43 	vmov.f32	s12, s6
 801c398:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c39c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c3a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3b8:	ee12 2a90 	vmov	r2, s5
 801c3bc:	eef0 2a47 	vmov.f32	s5, s14
 801c3c0:	fb92 f7f3 	sdiv	r7, r2, r3
 801c3c4:	ee13 2a10 	vmov	r2, s6
 801c3c8:	eeb0 3a67 	vmov.f32	s6, s15
 801c3cc:	fb92 f6f3 	sdiv	r6, r2, r3
 801c3d0:	9a01      	ldr	r2, [sp, #4]
 801c3d2:	bf08      	it	eq
 801c3d4:	4613      	moveq	r3, r2
 801c3d6:	e774      	b.n	801c2c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c3d8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c3dc:	d41b      	bmi.n	801c416 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c3de:	45e2      	cmp	sl, ip
 801c3e0:	da19      	bge.n	801c416 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c3e2:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c3e6:	d416      	bmi.n	801c416 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c3e8:	45f0      	cmp	r8, lr
 801c3ea:	da14      	bge.n	801c416 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c3ec:	fb0c a808 	mla	r8, ip, r8, sl
 801c3f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c3f4:	f819 b008 	ldrb.w	fp, [r9, r8]
 801c3f8:	eb09 0a08 	add.w	sl, r9, r8
 801c3fc:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801c400:	f804 b008 	strb.w	fp, [r4, r8]
 801c404:	44a0      	add	r8, r4
 801c406:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c40a:	f888 b001 	strb.w	fp, [r8, #1]
 801c40e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c412:	f888 a002 	strb.w	sl, [r8, #2]
 801c416:	4438      	add	r0, r7
 801c418:	4432      	add	r2, r6
 801c41a:	3501      	adds	r5, #1
 801c41c:	e79e      	b.n	801c35c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801c41e:	b003      	add	sp, #12
 801c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c424 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c428:	b085      	sub	sp, #20
 801c42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c42e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c430:	9202      	str	r2, [sp, #8]
 801c432:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c436:	6860      	ldr	r0, [r4, #4]
 801c438:	9203      	str	r2, [sp, #12]
 801c43a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c43e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c442:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c446:	fb00 2505 	mla	r5, r0, r5, r2
 801c44a:	6822      	ldr	r2, [r4, #0]
 801c44c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c450:	4415      	add	r5, r2
 801c452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c454:	6812      	ldr	r2, [r2, #0]
 801c456:	9201      	str	r2, [sp, #4]
 801c458:	2900      	cmp	r1, #0
 801c45a:	dc03      	bgt.n	801c464 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c45c:	9a02      	ldr	r2, [sp, #8]
 801c45e:	2a00      	cmp	r2, #0
 801c460:	f340 811c 	ble.w	801c69c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c466:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c46a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c46c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c470:	2b00      	cmp	r3, #0
 801c472:	dd0e      	ble.n	801c492 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c474:	1422      	asrs	r2, r4, #16
 801c476:	d405      	bmi.n	801c484 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c478:	4572      	cmp	r2, lr
 801c47a:	da03      	bge.n	801c484 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c47c:	1402      	asrs	r2, r0, #16
 801c47e:	d401      	bmi.n	801c484 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c480:	4542      	cmp	r2, r8
 801c482:	db07      	blt.n	801c494 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c484:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c486:	3b01      	subs	r3, #1
 801c488:	3503      	adds	r5, #3
 801c48a:	4414      	add	r4, r2
 801c48c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c48e:	4410      	add	r0, r2
 801c490:	e7ee      	b.n	801c470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c492:	d072      	beq.n	801c57a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801c494:	1e5a      	subs	r2, r3, #1
 801c496:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c498:	fb06 4602 	mla	r6, r6, r2, r4
 801c49c:	1436      	asrs	r6, r6, #16
 801c49e:	d461      	bmi.n	801c564 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c4a0:	4576      	cmp	r6, lr
 801c4a2:	da5f      	bge.n	801c564 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c4a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c4a6:	fb06 0202 	mla	r2, r6, r2, r0
 801c4aa:	1412      	asrs	r2, r2, #16
 801c4ac:	d45a      	bmi.n	801c564 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c4ae:	4542      	cmp	r2, r8
 801c4b0:	da58      	bge.n	801c564 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c4b2:	1cef      	adds	r7, r5, #3
 801c4b4:	4699      	mov	r9, r3
 801c4b6:	f1b9 0f00 	cmp.w	r9, #0
 801c4ba:	dd59      	ble.n	801c570 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c4bc:	1426      	asrs	r6, r4, #16
 801c4be:	1402      	asrs	r2, r0, #16
 801c4c0:	fb0e 6202 	mla	r2, lr, r2, r6
 801c4c4:	9e01      	ldr	r6, [sp, #4]
 801c4c6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c4ca:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c4ce:	d041      	beq.n	801c554 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801c4d0:	9a03      	ldr	r2, [sp, #12]
 801c4d2:	fa5f fb86 	uxtb.w	fp, r6
 801c4d6:	fb02 fc0c 	mul.w	ip, r2, ip
 801c4da:	f10c 0201 	add.w	r2, ip, #1
 801c4de:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c4e2:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c4e6:	1212      	asrs	r2, r2, #8
 801c4e8:	fa1f fa82 	uxth.w	sl, r2
 801c4ec:	43d2      	mvns	r2, r2
 801c4ee:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4f2:	b2d2      	uxtb	r2, r2
 801c4f4:	fb0c bc02 	mla	ip, ip, r2, fp
 801c4f8:	fa1f fc8c 	uxth.w	ip, ip
 801c4fc:	f10c 0b01 	add.w	fp, ip, #1
 801c500:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c504:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c508:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c50c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c510:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c514:	fb16 fa0a 	smulbb	sl, r6, sl
 801c518:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c51c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c520:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c524:	fb06 aa02 	mla	sl, r6, r2, sl
 801c528:	fb0c bc02 	mla	ip, ip, r2, fp
 801c52c:	fa1f fa8a 	uxth.w	sl, sl
 801c530:	fa1f fc8c 	uxth.w	ip, ip
 801c534:	f10a 0601 	add.w	r6, sl, #1
 801c538:	f10c 0b01 	add.w	fp, ip, #1
 801c53c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c540:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c544:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c548:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c54c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c550:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c554:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c556:	3703      	adds	r7, #3
 801c558:	f109 39ff 	add.w	r9, r9, #4294967295
 801c55c:	4414      	add	r4, r2
 801c55e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c560:	4410      	add	r0, r2
 801c562:	e7a8      	b.n	801c4b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c564:	f04f 0c00 	mov.w	ip, #0
 801c568:	eba3 020c 	sub.w	r2, r3, ip
 801c56c:	2a00      	cmp	r2, #0
 801c56e:	dc3d      	bgt.n	801c5ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801c570:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c578:	441d      	add	r5, r3
 801c57a:	2900      	cmp	r1, #0
 801c57c:	f340 808e 	ble.w	801c69c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c580:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c586:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c58a:	3901      	subs	r1, #1
 801c58c:	eeb0 6a62 	vmov.f32	s12, s5
 801c590:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c594:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c598:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c59c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c5a0:	eeb0 6a43 	vmov.f32	s12, s6
 801c5a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5a8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c5ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5c4:	ee12 2a90 	vmov	r2, s5
 801c5c8:	eef0 2a47 	vmov.f32	s5, s14
 801c5cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5d0:	ee13 2a10 	vmov	r2, s6
 801c5d4:	9311      	str	r3, [sp, #68]	; 0x44
 801c5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5d8:	eeb0 3a67 	vmov.f32	s6, s15
 801c5dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5e0:	9a02      	ldr	r2, [sp, #8]
 801c5e2:	9312      	str	r3, [sp, #72]	; 0x48
 801c5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5e6:	bf08      	it	eq
 801c5e8:	4613      	moveq	r3, r2
 801c5ea:	e735      	b.n	801c458 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801c5ec:	1426      	asrs	r6, r4, #16
 801c5ee:	d44e      	bmi.n	801c68e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c5f0:	4576      	cmp	r6, lr
 801c5f2:	da4c      	bge.n	801c68e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c5f4:	1402      	asrs	r2, r0, #16
 801c5f6:	d44a      	bmi.n	801c68e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c5f8:	4542      	cmp	r2, r8
 801c5fa:	da48      	bge.n	801c68e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c5fc:	fb0e 6202 	mla	r2, lr, r2, r6
 801c600:	9e01      	ldr	r6, [sp, #4]
 801c602:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c606:	0e3a      	lsrs	r2, r7, #24
 801c608:	d041      	beq.n	801c68e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c60a:	9e03      	ldr	r6, [sp, #12]
 801c60c:	fa5f fb87 	uxtb.w	fp, r7
 801c610:	4372      	muls	r2, r6
 801c612:	1c56      	adds	r6, r2, #1
 801c614:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c618:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801c61c:	1212      	asrs	r2, r2, #8
 801c61e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c622:	fa1f fa82 	uxth.w	sl, r2
 801c626:	43d2      	mvns	r2, r2
 801c628:	fb1b fb0a 	smulbb	fp, fp, sl
 801c62c:	b2d2      	uxtb	r2, r2
 801c62e:	fb09 b902 	mla	r9, r9, r2, fp
 801c632:	fa1f f989 	uxth.w	r9, r9
 801c636:	f109 0b01 	add.w	fp, r9, #1
 801c63a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c63e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c642:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c646:	fb1b fb0a 	smulbb	fp, fp, sl
 801c64a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c64e:	fb17 fa0a 	smulbb	sl, r7, sl
 801c652:	f805 9006 	strb.w	r9, [r5, r6]
 801c656:	442e      	add	r6, r5
 801c658:	78b7      	ldrb	r7, [r6, #2]
 801c65a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c65e:	fb07 aa02 	mla	sl, r7, r2, sl
 801c662:	fb09 b902 	mla	r9, r9, r2, fp
 801c666:	fa1f fa8a 	uxth.w	sl, sl
 801c66a:	fa1f f989 	uxth.w	r9, r9
 801c66e:	f10a 0701 	add.w	r7, sl, #1
 801c672:	f109 0b01 	add.w	fp, r9, #1
 801c676:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c67a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c67e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c682:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c686:	f886 a002 	strb.w	sl, [r6, #2]
 801c68a:	f886 9001 	strb.w	r9, [r6, #1]
 801c68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c690:	f10c 0c01 	add.w	ip, ip, #1
 801c694:	4414      	add	r4, r2
 801c696:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c698:	4410      	add	r0, r2
 801c69a:	e765      	b.n	801c568 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c69c:	b005      	add	sp, #20
 801c69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c6a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6a6:	b085      	sub	sp, #20
 801c6a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c6ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c6ae:	9203      	str	r2, [sp, #12]
 801c6b0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c6b4:	6860      	ldr	r0, [r4, #4]
 801c6b6:	9201      	str	r2, [sp, #4]
 801c6b8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c6bc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c6c0:	fb00 2505 	mla	r5, r0, r5, r2
 801c6c4:	6822      	ldr	r2, [r4, #0]
 801c6c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6ca:	4415      	add	r5, r2
 801c6cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c6ce:	6812      	ldr	r2, [r2, #0]
 801c6d0:	9202      	str	r2, [sp, #8]
 801c6d2:	2900      	cmp	r1, #0
 801c6d4:	dc03      	bgt.n	801c6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c6d6:	9a03      	ldr	r2, [sp, #12]
 801c6d8:	2a00      	cmp	r2, #0
 801c6da:	f340 8122 	ble.w	801c922 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c6de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c6e0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c6e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c6e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	dd0f      	ble.n	801c70e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c6ee:	1422      	asrs	r2, r4, #16
 801c6f0:	d406      	bmi.n	801c700 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c6f2:	4572      	cmp	r2, lr
 801c6f4:	da04      	bge.n	801c700 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c6f6:	1402      	asrs	r2, r0, #16
 801c6f8:	d402      	bmi.n	801c700 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c6fa:	9e01      	ldr	r6, [sp, #4]
 801c6fc:	42b2      	cmp	r2, r6
 801c6fe:	db07      	blt.n	801c710 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c700:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c702:	3b01      	subs	r3, #1
 801c704:	3503      	adds	r5, #3
 801c706:	4414      	add	r4, r2
 801c708:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c70a:	4410      	add	r0, r2
 801c70c:	e7ed      	b.n	801c6ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c70e:	d06e      	beq.n	801c7ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c710:	1e5a      	subs	r2, r3, #1
 801c712:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c714:	fb06 4602 	mla	r6, r6, r2, r4
 801c718:	1436      	asrs	r6, r6, #16
 801c71a:	d45d      	bmi.n	801c7d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c71c:	4576      	cmp	r6, lr
 801c71e:	da5b      	bge.n	801c7d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c720:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c722:	fb06 0202 	mla	r2, r6, r2, r0
 801c726:	1412      	asrs	r2, r2, #16
 801c728:	d456      	bmi.n	801c7d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c72a:	9e01      	ldr	r6, [sp, #4]
 801c72c:	42b2      	cmp	r2, r6
 801c72e:	da53      	bge.n	801c7d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c730:	1cee      	adds	r6, r5, #3
 801c732:	469a      	mov	sl, r3
 801c734:	f1ba 0f00 	cmp.w	sl, #0
 801c738:	dd54      	ble.n	801c7e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c73a:	1427      	asrs	r7, r4, #16
 801c73c:	1402      	asrs	r2, r0, #16
 801c73e:	fb0e 7202 	mla	r2, lr, r2, r7
 801c742:	9f02      	ldr	r7, [sp, #8]
 801c744:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c748:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801c74c:	d03c      	beq.n	801c7c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c74e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c752:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c756:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c75a:	fa5f f28c 	uxtb.w	r2, ip
 801c75e:	b2ff      	uxtb	r7, r7
 801c760:	f000 80d8 	beq.w	801c914 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c764:	fa1f f882 	uxth.w	r8, r2
 801c768:	43d2      	mvns	r2, r2
 801c76a:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c76e:	fb17 f708 	smulbb	r7, r7, r8
 801c772:	b2d2      	uxtb	r2, r2
 801c774:	fb19 f908 	smulbb	r9, r9, r8
 801c778:	fb0c 7702 	mla	r7, ip, r2, r7
 801c77c:	fb1b f808 	smulbb	r8, fp, r8
 801c780:	b2bf      	uxth	r7, r7
 801c782:	f107 0c01 	add.w	ip, r7, #1
 801c786:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c78a:	123f      	asrs	r7, r7, #8
 801c78c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c790:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c794:	fb07 9902 	mla	r9, r7, r2, r9
 801c798:	fa1f f989 	uxth.w	r9, r9
 801c79c:	f109 0701 	add.w	r7, r9, #1
 801c7a0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c7a4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c7a8:	fb07 8802 	mla	r8, r7, r2, r8
 801c7ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7b0:	fa1f f888 	uxth.w	r8, r8
 801c7b4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c7b8:	f108 0201 	add.w	r2, r8, #1
 801c7bc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c7c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c7c4:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c7c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c7ca:	3603      	adds	r6, #3
 801c7cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c7d0:	4414      	add	r4, r2
 801c7d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7d4:	4410      	add	r0, r2
 801c7d6:	e7ad      	b.n	801c734 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c7d8:	f04f 0c00 	mov.w	ip, #0
 801c7dc:	eba3 020c 	sub.w	r2, r3, ip
 801c7e0:	2a00      	cmp	r2, #0
 801c7e2:	dc3d      	bgt.n	801c860 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c7e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7ec:	441d      	add	r5, r3
 801c7ee:	2900      	cmp	r1, #0
 801c7f0:	f340 8097 	ble.w	801c922 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c7f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7fe:	3901      	subs	r1, #1
 801c800:	eeb0 6a62 	vmov.f32	s12, s5
 801c804:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c808:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c80c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c810:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c814:	eeb0 6a43 	vmov.f32	s12, s6
 801c818:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c81c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c820:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c824:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c828:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c82c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c830:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c834:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c838:	ee12 2a90 	vmov	r2, s5
 801c83c:	eef0 2a47 	vmov.f32	s5, s14
 801c840:	fb92 f3f3 	sdiv	r3, r2, r3
 801c844:	ee13 2a10 	vmov	r2, s6
 801c848:	9311      	str	r3, [sp, #68]	; 0x44
 801c84a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c84c:	eeb0 3a67 	vmov.f32	s6, s15
 801c850:	fb92 f3f3 	sdiv	r3, r2, r3
 801c854:	9a03      	ldr	r2, [sp, #12]
 801c856:	9312      	str	r3, [sp, #72]	; 0x48
 801c858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c85a:	bf08      	it	eq
 801c85c:	4613      	moveq	r3, r2
 801c85e:	e738      	b.n	801c6d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c860:	1426      	asrs	r6, r4, #16
 801c862:	d448      	bmi.n	801c8f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c864:	4576      	cmp	r6, lr
 801c866:	da46      	bge.n	801c8f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c868:	1402      	asrs	r2, r0, #16
 801c86a:	d444      	bmi.n	801c8f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c86c:	9f01      	ldr	r7, [sp, #4]
 801c86e:	42ba      	cmp	r2, r7
 801c870:	da41      	bge.n	801c8f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c872:	fb0e 6202 	mla	r2, lr, r2, r6
 801c876:	9e02      	ldr	r6, [sp, #8]
 801c878:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c87c:	0e3a      	lsrs	r2, r7, #24
 801c87e:	d03a      	beq.n	801c8f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c880:	2aff      	cmp	r2, #255	; 0xff
 801c882:	b2d6      	uxtb	r6, r2
 801c884:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c888:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c88c:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c890:	b2ff      	uxtb	r7, r7
 801c892:	d037      	beq.n	801c904 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c894:	fa1f f986 	uxth.w	r9, r6
 801c898:	4462      	add	r2, ip
 801c89a:	43f6      	mvns	r6, r6
 801c89c:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c8a0:	fb17 f709 	smulbb	r7, r7, r9
 801c8a4:	fb1a fa09 	smulbb	sl, sl, r9
 801c8a8:	b2f6      	uxtb	r6, r6
 801c8aa:	fb1b f909 	smulbb	r9, fp, r9
 801c8ae:	fb08 7706 	mla	r7, r8, r6, r7
 801c8b2:	b2bf      	uxth	r7, r7
 801c8b4:	f107 0801 	add.w	r8, r7, #1
 801c8b8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c8bc:	123f      	asrs	r7, r7, #8
 801c8be:	54af      	strb	r7, [r5, r2]
 801c8c0:	442a      	add	r2, r5
 801c8c2:	7857      	ldrb	r7, [r2, #1]
 801c8c4:	fb07 aa06 	mla	sl, r7, r6, sl
 801c8c8:	fa1f fa8a 	uxth.w	sl, sl
 801c8cc:	f10a 0701 	add.w	r7, sl, #1
 801c8d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c8d4:	7897      	ldrb	r7, [r2, #2]
 801c8d6:	fb07 9906 	mla	r9, r7, r6, r9
 801c8da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c8de:	fa1f f989 	uxth.w	r9, r9
 801c8e2:	f882 a001 	strb.w	sl, [r2, #1]
 801c8e6:	f109 0601 	add.w	r6, r9, #1
 801c8ea:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c8ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8f2:	f882 9002 	strb.w	r9, [r2, #2]
 801c8f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8f8:	f10c 0c01 	add.w	ip, ip, #1
 801c8fc:	4414      	add	r4, r2
 801c8fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c900:	4410      	add	r0, r2
 801c902:	e76b      	b.n	801c7dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801c904:	4462      	add	r2, ip
 801c906:	54af      	strb	r7, [r5, r2]
 801c908:	442a      	add	r2, r5
 801c90a:	f882 a001 	strb.w	sl, [r2, #1]
 801c90e:	f882 b002 	strb.w	fp, [r2, #2]
 801c912:	e7f0      	b.n	801c8f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c914:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c918:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c91c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c920:	e752      	b.n	801c7c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c922:	b005      	add	sp, #20
 801c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c928 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c92c:	b087      	sub	sp, #28
 801c92e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c932:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c934:	9204      	str	r2, [sp, #16]
 801c936:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c93a:	6860      	ldr	r0, [r4, #4]
 801c93c:	9205      	str	r2, [sp, #20]
 801c93e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c942:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c946:	9101      	str	r1, [sp, #4]
 801c948:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c94c:	fb00 2505 	mla	r5, r0, r5, r2
 801c950:	6822      	ldr	r2, [r4, #0]
 801c952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c956:	4415      	add	r5, r2
 801c958:	f10e 0201 	add.w	r2, lr, #1
 801c95c:	f022 0201 	bic.w	r2, r2, #1
 801c960:	9202      	str	r2, [sp, #8]
 801c962:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c964:	6812      	ldr	r2, [r2, #0]
 801c966:	9203      	str	r2, [sp, #12]
 801c968:	9a01      	ldr	r2, [sp, #4]
 801c96a:	2a00      	cmp	r2, #0
 801c96c:	dc03      	bgt.n	801c976 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c96e:	9a04      	ldr	r2, [sp, #16]
 801c970:	2a00      	cmp	r2, #0
 801c972:	f340 8132 	ble.w	801cbda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c976:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c978:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c97c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c97e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c982:	2b00      	cmp	r3, #0
 801c984:	dd0e      	ble.n	801c9a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c986:	1422      	asrs	r2, r4, #16
 801c988:	d405      	bmi.n	801c996 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c98a:	4596      	cmp	lr, r2
 801c98c:	dd03      	ble.n	801c996 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c98e:	1402      	asrs	r2, r0, #16
 801c990:	d401      	bmi.n	801c996 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c992:	4542      	cmp	r2, r8
 801c994:	db07      	blt.n	801c9a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c996:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c998:	3b01      	subs	r3, #1
 801c99a:	3503      	adds	r5, #3
 801c99c:	4414      	add	r4, r2
 801c99e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9a0:	4410      	add	r0, r2
 801c9a2:	e7ee      	b.n	801c982 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801c9a4:	d010      	beq.n	801c9c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c9a6:	1e5a      	subs	r2, r3, #1
 801c9a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c9aa:	fb06 4602 	mla	r6, r6, r2, r4
 801c9ae:	1436      	asrs	r6, r6, #16
 801c9b0:	d546      	bpl.n	801ca40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801c9b2:	4699      	mov	r9, r3
 801c9b4:	462e      	mov	r6, r5
 801c9b6:	f1b9 0f00 	cmp.w	r9, #0
 801c9ba:	f300 80ac 	bgt.w	801cb16 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801c9be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9c6:	441d      	add	r5, r3
 801c9c8:	9b01      	ldr	r3, [sp, #4]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	f340 8105 	ble.w	801cbda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c9d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c9d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c9da:	eeb0 6a62 	vmov.f32	s12, s5
 801c9de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c9e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9ea:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c9ee:	eeb0 6a43 	vmov.f32	s12, s6
 801c9f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9f6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c9fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca02:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca12:	ee12 2a90 	vmov	r2, s5
 801ca16:	eef0 2a47 	vmov.f32	s5, s14
 801ca1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca1e:	ee13 2a10 	vmov	r2, s6
 801ca22:	9313      	str	r3, [sp, #76]	; 0x4c
 801ca24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ca26:	eeb0 3a67 	vmov.f32	s6, s15
 801ca2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca2e:	9314      	str	r3, [sp, #80]	; 0x50
 801ca30:	9b01      	ldr	r3, [sp, #4]
 801ca32:	9a04      	ldr	r2, [sp, #16]
 801ca34:	3b01      	subs	r3, #1
 801ca36:	9301      	str	r3, [sp, #4]
 801ca38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ca3a:	bf08      	it	eq
 801ca3c:	4613      	moveq	r3, r2
 801ca3e:	e793      	b.n	801c968 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801ca40:	45b6      	cmp	lr, r6
 801ca42:	ddb6      	ble.n	801c9b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ca44:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ca46:	fb06 0202 	mla	r2, r6, r2, r0
 801ca4a:	1412      	asrs	r2, r2, #16
 801ca4c:	d4b1      	bmi.n	801c9b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ca4e:	4542      	cmp	r2, r8
 801ca50:	daaf      	bge.n	801c9b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ca52:	1cee      	adds	r6, r5, #3
 801ca54:	4699      	mov	r9, r3
 801ca56:	f1b9 0f00 	cmp.w	r9, #0
 801ca5a:	ddb0      	ble.n	801c9be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801ca5c:	1422      	asrs	r2, r4, #16
 801ca5e:	9902      	ldr	r1, [sp, #8]
 801ca60:	1407      	asrs	r7, r0, #16
 801ca62:	fb01 2707 	mla	r7, r1, r7, r2
 801ca66:	9903      	ldr	r1, [sp, #12]
 801ca68:	087a      	lsrs	r2, r7, #1
 801ca6a:	5c8a      	ldrb	r2, [r1, r2]
 801ca6c:	07f9      	lsls	r1, r7, #31
 801ca6e:	bf54      	ite	pl
 801ca70:	f002 020f 	andpl.w	r2, r2, #15
 801ca74:	1112      	asrmi	r2, r2, #4
 801ca76:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ca7a:	b2d2      	uxtb	r2, r2
 801ca7c:	2a00      	cmp	r2, #0
 801ca7e:	d042      	beq.n	801cb06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801ca80:	4957      	ldr	r1, [pc, #348]	; (801cbe0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801ca82:	680f      	ldr	r7, [r1, #0]
 801ca84:	9905      	ldr	r1, [sp, #20]
 801ca86:	fa5f fb87 	uxtb.w	fp, r7
 801ca8a:	434a      	muls	r2, r1
 801ca8c:	f102 0c01 	add.w	ip, r2, #1
 801ca90:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801ca94:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ca98:	1212      	asrs	r2, r2, #8
 801ca9a:	fa1f fa82 	uxth.w	sl, r2
 801ca9e:	43d2      	mvns	r2, r2
 801caa0:	fb1b fb0a 	smulbb	fp, fp, sl
 801caa4:	b2d2      	uxtb	r2, r2
 801caa6:	fb0c bc02 	mla	ip, ip, r2, fp
 801caaa:	fa1f fc8c 	uxth.w	ip, ip
 801caae:	f10c 0b01 	add.w	fp, ip, #1
 801cab2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cab6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801caba:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cabe:	fb1b fb0a 	smulbb	fp, fp, sl
 801cac2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cac6:	fb17 fa0a 	smulbb	sl, r7, sl
 801caca:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801cace:	f806 cc03 	strb.w	ip, [r6, #-3]
 801cad2:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801cad6:	fb07 aa02 	mla	sl, r7, r2, sl
 801cada:	fb0c bc02 	mla	ip, ip, r2, fp
 801cade:	fa1f fa8a 	uxth.w	sl, sl
 801cae2:	fa1f fc8c 	uxth.w	ip, ip
 801cae6:	f10a 0701 	add.w	r7, sl, #1
 801caea:	f10c 0b01 	add.w	fp, ip, #1
 801caee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801caf2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801caf6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cafa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cafe:	f806 ac01 	strb.w	sl, [r6, #-1]
 801cb02:	f806 cc02 	strb.w	ip, [r6, #-2]
 801cb06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb08:	3603      	adds	r6, #3
 801cb0a:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb0e:	4414      	add	r4, r2
 801cb10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb12:	4410      	add	r0, r2
 801cb14:	e79f      	b.n	801ca56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801cb16:	1422      	asrs	r2, r4, #16
 801cb18:	d457      	bmi.n	801cbca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cb1a:	4596      	cmp	lr, r2
 801cb1c:	dd55      	ble.n	801cbca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cb1e:	1407      	asrs	r7, r0, #16
 801cb20:	d453      	bmi.n	801cbca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cb22:	4547      	cmp	r7, r8
 801cb24:	da51      	bge.n	801cbca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cb26:	9902      	ldr	r1, [sp, #8]
 801cb28:	fb07 2701 	mla	r7, r7, r1, r2
 801cb2c:	9903      	ldr	r1, [sp, #12]
 801cb2e:	087a      	lsrs	r2, r7, #1
 801cb30:	07ff      	lsls	r7, r7, #31
 801cb32:	5c8a      	ldrb	r2, [r1, r2]
 801cb34:	bf54      	ite	pl
 801cb36:	f002 020f 	andpl.w	r2, r2, #15
 801cb3a:	1112      	asrmi	r2, r2, #4
 801cb3c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cb40:	b2d2      	uxtb	r2, r2
 801cb42:	2a00      	cmp	r2, #0
 801cb44:	d041      	beq.n	801cbca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801cb46:	4926      	ldr	r1, [pc, #152]	; (801cbe0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801cb48:	680f      	ldr	r7, [r1, #0]
 801cb4a:	9905      	ldr	r1, [sp, #20]
 801cb4c:	fa5f fb87 	uxtb.w	fp, r7
 801cb50:	434a      	muls	r2, r1
 801cb52:	f102 0c01 	add.w	ip, r2, #1
 801cb56:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801cb5a:	f896 c000 	ldrb.w	ip, [r6]
 801cb5e:	1212      	asrs	r2, r2, #8
 801cb60:	fa1f fa82 	uxth.w	sl, r2
 801cb64:	43d2      	mvns	r2, r2
 801cb66:	fb1b fb0a 	smulbb	fp, fp, sl
 801cb6a:	b2d2      	uxtb	r2, r2
 801cb6c:	fb0c bc02 	mla	ip, ip, r2, fp
 801cb70:	fa1f fc8c 	uxth.w	ip, ip
 801cb74:	f10c 0b01 	add.w	fp, ip, #1
 801cb78:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cb7c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cb80:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cb84:	fb1b fb0a 	smulbb	fp, fp, sl
 801cb88:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cb8c:	fb17 fa0a 	smulbb	sl, r7, sl
 801cb90:	78b7      	ldrb	r7, [r6, #2]
 801cb92:	f886 c000 	strb.w	ip, [r6]
 801cb96:	f896 c001 	ldrb.w	ip, [r6, #1]
 801cb9a:	fb07 aa02 	mla	sl, r7, r2, sl
 801cb9e:	fb0c bc02 	mla	ip, ip, r2, fp
 801cba2:	fa1f fa8a 	uxth.w	sl, sl
 801cba6:	fa1f fc8c 	uxth.w	ip, ip
 801cbaa:	f10a 0701 	add.w	r7, sl, #1
 801cbae:	f10c 0b01 	add.w	fp, ip, #1
 801cbb2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cbb6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cbba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cbbe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cbc2:	f886 a002 	strb.w	sl, [r6, #2]
 801cbc6:	f886 c001 	strb.w	ip, [r6, #1]
 801cbca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cbcc:	3603      	adds	r6, #3
 801cbce:	f109 39ff 	add.w	r9, r9, #4294967295
 801cbd2:	4414      	add	r4, r2
 801cbd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cbd6:	4410      	add	r0, r2
 801cbd8:	e6ed      	b.n	801c9b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801cbda:	b007      	add	sp, #28
 801cbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbe0:	2000bd94 	.word	0x2000bd94

0801cbe4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbe8:	b087      	sub	sp, #28
 801cbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cbee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cbf0:	9205      	str	r2, [sp, #20]
 801cbf2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801cbf6:	6860      	ldr	r0, [r4, #4]
 801cbf8:	9202      	str	r2, [sp, #8]
 801cbfa:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801cbfe:	9101      	str	r1, [sp, #4]
 801cc00:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801cc04:	fb00 2606 	mla	r6, r0, r6, r2
 801cc08:	6822      	ldr	r2, [r4, #0]
 801cc0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cc0e:	4416      	add	r6, r2
 801cc10:	f108 0201 	add.w	r2, r8, #1
 801cc14:	f022 0201 	bic.w	r2, r2, #1
 801cc18:	9203      	str	r2, [sp, #12]
 801cc1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cc1c:	6812      	ldr	r2, [r2, #0]
 801cc1e:	9204      	str	r2, [sp, #16]
 801cc20:	9a01      	ldr	r2, [sp, #4]
 801cc22:	2a00      	cmp	r2, #0
 801cc24:	dc03      	bgt.n	801cc2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801cc26:	9a05      	ldr	r2, [sp, #20]
 801cc28:	2a00      	cmp	r2, #0
 801cc2a:	f340 813a 	ble.w	801cea2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801cc2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc30:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801cc34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc36:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	dd0f      	ble.n	801cc5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801cc3e:	142a      	asrs	r2, r5, #16
 801cc40:	d406      	bmi.n	801cc50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cc42:	4590      	cmp	r8, r2
 801cc44:	dd04      	ble.n	801cc50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cc46:	1422      	asrs	r2, r4, #16
 801cc48:	d402      	bmi.n	801cc50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cc4a:	9802      	ldr	r0, [sp, #8]
 801cc4c:	4282      	cmp	r2, r0
 801cc4e:	db07      	blt.n	801cc60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801cc50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc52:	3b01      	subs	r3, #1
 801cc54:	3603      	adds	r6, #3
 801cc56:	4415      	add	r5, r2
 801cc58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cc5a:	4414      	add	r4, r2
 801cc5c:	e7ed      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801cc5e:	d073      	beq.n	801cd48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801cc60:	1e5a      	subs	r2, r3, #1
 801cc62:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cc64:	fb00 5002 	mla	r0, r0, r2, r5
 801cc68:	1400      	asrs	r0, r0, #16
 801cc6a:	d464      	bmi.n	801cd36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cc6c:	4580      	cmp	r8, r0
 801cc6e:	dd62      	ble.n	801cd36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cc70:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cc72:	fb00 4202 	mla	r2, r0, r2, r4
 801cc76:	1412      	asrs	r2, r2, #16
 801cc78:	d45d      	bmi.n	801cd36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cc7a:	9802      	ldr	r0, [sp, #8]
 801cc7c:	4282      	cmp	r2, r0
 801cc7e:	da5a      	bge.n	801cd36 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cc80:	1cf0      	adds	r0, r6, #3
 801cc82:	469a      	mov	sl, r3
 801cc84:	f1ba 0f00 	cmp.w	sl, #0
 801cc88:	dd59      	ble.n	801cd3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801cc8a:	142a      	asrs	r2, r5, #16
 801cc8c:	9903      	ldr	r1, [sp, #12]
 801cc8e:	1427      	asrs	r7, r4, #16
 801cc90:	fb01 2707 	mla	r7, r1, r7, r2
 801cc94:	9904      	ldr	r1, [sp, #16]
 801cc96:	087a      	lsrs	r2, r7, #1
 801cc98:	5c8a      	ldrb	r2, [r1, r2]
 801cc9a:	07f9      	lsls	r1, r7, #31
 801cc9c:	bf54      	ite	pl
 801cc9e:	f002 020f 	andpl.w	r2, r2, #15
 801cca2:	1112      	asrmi	r2, r2, #4
 801cca4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cca8:	b2d2      	uxtb	r2, r2
 801ccaa:	2a00      	cmp	r2, #0
 801ccac:	d03b      	beq.n	801cd26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ccae:	497e      	ldr	r1, [pc, #504]	; (801cea8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801ccb0:	2aff      	cmp	r2, #255	; 0xff
 801ccb2:	680f      	ldr	r7, [r1, #0]
 801ccb4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ccb8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ccbc:	b2ff      	uxtb	r7, r7
 801ccbe:	f000 80e9 	beq.w	801ce94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801ccc2:	fa1f fe82 	uxth.w	lr, r2
 801ccc6:	43d2      	mvns	r2, r2
 801ccc8:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801cccc:	fb17 f70e 	smulbb	r7, r7, lr
 801ccd0:	b2d2      	uxtb	r2, r2
 801ccd2:	fb19 f90e 	smulbb	r9, r9, lr
 801ccd6:	fb0c 7702 	mla	r7, ip, r2, r7
 801ccda:	fb1b fe0e 	smulbb	lr, fp, lr
 801ccde:	b2bf      	uxth	r7, r7
 801cce0:	f107 0c01 	add.w	ip, r7, #1
 801cce4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cce8:	123f      	asrs	r7, r7, #8
 801ccea:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ccee:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801ccf2:	fb07 9902 	mla	r9, r7, r2, r9
 801ccf6:	fa1f f989 	uxth.w	r9, r9
 801ccfa:	f109 0701 	add.w	r7, r9, #1
 801ccfe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cd02:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801cd06:	fb07 ee02 	mla	lr, r7, r2, lr
 801cd0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd0e:	fa1f fe8e 	uxth.w	lr, lr
 801cd12:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cd16:	f10e 0201 	add.w	r2, lr, #1
 801cd1a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801cd1e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cd22:	f800 ec01 	strb.w	lr, [r0, #-1]
 801cd26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd28:	3003      	adds	r0, #3
 801cd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd2e:	4415      	add	r5, r2
 801cd30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cd32:	4414      	add	r4, r2
 801cd34:	e7a6      	b.n	801cc84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801cd36:	2700      	movs	r7, #0
 801cd38:	1bda      	subs	r2, r3, r7
 801cd3a:	2a00      	cmp	r2, #0
 801cd3c:	dc40      	bgt.n	801cdc0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801cd3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd46:	441e      	add	r6, r3
 801cd48:	9b01      	ldr	r3, [sp, #4]
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	f340 80a9 	ble.w	801cea2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801cd50:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cd56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd5a:	eeb0 6a62 	vmov.f32	s12, s5
 801cd5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cd62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd6a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cd6e:	eeb0 6a43 	vmov.f32	s12, s6
 801cd72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd76:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cd7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd92:	ee12 2a90 	vmov	r2, s5
 801cd96:	eef0 2a47 	vmov.f32	s5, s14
 801cd9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd9e:	ee13 2a10 	vmov	r2, s6
 801cda2:	9313      	str	r3, [sp, #76]	; 0x4c
 801cda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cda6:	eeb0 3a67 	vmov.f32	s6, s15
 801cdaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdae:	9314      	str	r3, [sp, #80]	; 0x50
 801cdb0:	9b01      	ldr	r3, [sp, #4]
 801cdb2:	9a05      	ldr	r2, [sp, #20]
 801cdb4:	3b01      	subs	r3, #1
 801cdb6:	9301      	str	r3, [sp, #4]
 801cdb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cdba:	bf08      	it	eq
 801cdbc:	4613      	moveq	r3, r2
 801cdbe:	e72f      	b.n	801cc20 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cdc0:	142a      	asrs	r2, r5, #16
 801cdc2:	d458      	bmi.n	801ce76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cdc4:	4590      	cmp	r8, r2
 801cdc6:	dd56      	ble.n	801ce76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cdc8:	1420      	asrs	r0, r4, #16
 801cdca:	d454      	bmi.n	801ce76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cdcc:	9902      	ldr	r1, [sp, #8]
 801cdce:	4288      	cmp	r0, r1
 801cdd0:	da51      	bge.n	801ce76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cdd2:	9903      	ldr	r1, [sp, #12]
 801cdd4:	fb00 2001 	mla	r0, r0, r1, r2
 801cdd8:	9904      	ldr	r1, [sp, #16]
 801cdda:	0842      	lsrs	r2, r0, #1
 801cddc:	07c0      	lsls	r0, r0, #31
 801cdde:	5c8a      	ldrb	r2, [r1, r2]
 801cde0:	bf54      	ite	pl
 801cde2:	f002 020f 	andpl.w	r2, r2, #15
 801cde6:	1112      	asrmi	r2, r2, #4
 801cde8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cdec:	b2d2      	uxtb	r2, r2
 801cdee:	2a00      	cmp	r2, #0
 801cdf0:	d041      	beq.n	801ce76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cdf2:	492d      	ldr	r1, [pc, #180]	; (801cea8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cdf4:	2aff      	cmp	r2, #255	; 0xff
 801cdf6:	6808      	ldr	r0, [r1, #0]
 801cdf8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cdfc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ce00:	fa5f fc80 	uxtb.w	ip, r0
 801ce04:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ce08:	d03b      	beq.n	801ce82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801ce0a:	fa1f f982 	uxth.w	r9, r2
 801ce0e:	4438      	add	r0, r7
 801ce10:	43d2      	mvns	r2, r2
 801ce12:	f816 e000 	ldrb.w	lr, [r6, r0]
 801ce16:	fb1c fc09 	smulbb	ip, ip, r9
 801ce1a:	fb1a fa09 	smulbb	sl, sl, r9
 801ce1e:	b2d2      	uxtb	r2, r2
 801ce20:	fb1b f909 	smulbb	r9, fp, r9
 801ce24:	fb0e cc02 	mla	ip, lr, r2, ip
 801ce28:	fa1f fc8c 	uxth.w	ip, ip
 801ce2c:	f10c 0e01 	add.w	lr, ip, #1
 801ce30:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ce34:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ce38:	f806 c000 	strb.w	ip, [r6, r0]
 801ce3c:	4430      	add	r0, r6
 801ce3e:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ce42:	fb0c aa02 	mla	sl, ip, r2, sl
 801ce46:	fa1f fa8a 	uxth.w	sl, sl
 801ce4a:	f10a 0c01 	add.w	ip, sl, #1
 801ce4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ce52:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ce56:	fb0c 9902 	mla	r9, ip, r2, r9
 801ce5a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ce5e:	fa1f f989 	uxth.w	r9, r9
 801ce62:	f880 a001 	strb.w	sl, [r0, #1]
 801ce66:	f109 0201 	add.w	r2, r9, #1
 801ce6a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ce6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce72:	f880 9002 	strb.w	r9, [r0, #2]
 801ce76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ce78:	3701      	adds	r7, #1
 801ce7a:	4415      	add	r5, r2
 801ce7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ce7e:	4414      	add	r4, r2
 801ce80:	e75a      	b.n	801cd38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801ce82:	4438      	add	r0, r7
 801ce84:	f806 c000 	strb.w	ip, [r6, r0]
 801ce88:	4430      	add	r0, r6
 801ce8a:	f880 a001 	strb.w	sl, [r0, #1]
 801ce8e:	f880 b002 	strb.w	fp, [r0, #2]
 801ce92:	e7f0      	b.n	801ce76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ce94:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ce98:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ce9c:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cea0:	e741      	b.n	801cd26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cea2:	b007      	add	sp, #28
 801cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cea8:	2000bd94 	.word	0x2000bd94

0801ceac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ceac:	4770      	bx	lr

0801ceae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801ceae:	4770      	bx	lr

0801ceb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801ceb0:	4770      	bx	lr

0801ceb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801ceb2:	4770      	bx	lr

0801ceb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ceb4:	4770      	bx	lr

0801ceb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ceb6:	4770      	bx	lr

0801ceb8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ceb8:	4770      	bx	lr

0801ceba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ceba:	4770      	bx	lr

0801cebc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cebc:	4770      	bx	lr

0801cebe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cebe:	4770      	bx	lr

0801cec0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cec0:	4770      	bx	lr

0801cec2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cec2:	4770      	bx	lr

0801cec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cec4:	4770      	bx	lr

0801cec6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cec6:	4770      	bx	lr

0801cec8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cec8:	4770      	bx	lr

0801ceca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ceca:	4770      	bx	lr

0801cecc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cecc:	4770      	bx	lr

0801cece <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cece:	4770      	bx	lr

0801ced0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ced0:	4770      	bx	lr

0801ced2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ced2:	4770      	bx	lr

0801ced4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ced4:	2bff      	cmp	r3, #255	; 0xff
 801ced6:	b508      	push	{r3, lr}
 801ced8:	d04f      	beq.n	801cf7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ceda:	2a2c      	cmp	r2, #44	; 0x2c
 801cedc:	d032      	beq.n	801cf44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801cede:	d80f      	bhi.n	801cf00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801cee0:	2a08      	cmp	r2, #8
 801cee2:	d046      	beq.n	801cf72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cee4:	d805      	bhi.n	801cef2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801cee6:	2a04      	cmp	r2, #4
 801cee8:	d041      	beq.n	801cf6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ceea:	2a05      	cmp	r2, #5
 801ceec:	d03d      	beq.n	801cf6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ceee:	2000      	movs	r0, #0
 801cef0:	e027      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cef2:	2a0a      	cmp	r2, #10
 801cef4:	d03d      	beq.n	801cf72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cef6:	d301      	bcc.n	801cefc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801cef8:	2a0b      	cmp	r2, #11
 801cefa:	d1f8      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cefc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801cefe:	e020      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf00:	2a30      	cmp	r2, #48	; 0x30
 801cf02:	d038      	beq.n	801cf76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cf04:	d808      	bhi.n	801cf18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801cf06:	2a2e      	cmp	r2, #46	; 0x2e
 801cf08:	684b      	ldr	r3, [r1, #4]
 801cf0a:	d029      	beq.n	801cf60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801cf0c:	d90b      	bls.n	801cf26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801cf0e:	781b      	ldrb	r3, [r3, #0]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d1ec      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf14:	6a00      	ldr	r0, [r0, #32]
 801cf16:	e014      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf18:	2a32      	cmp	r2, #50	; 0x32
 801cf1a:	d02c      	beq.n	801cf76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cf1c:	d301      	bcc.n	801cf22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801cf1e:	2a33      	cmp	r2, #51	; 0x33
 801cf20:	d1e5      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf22:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801cf24:	e00d      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf26:	781b      	ldrb	r3, [r3, #0]
 801cf28:	2b01      	cmp	r3, #1
 801cf2a:	d009      	beq.n	801cf40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801cf2c:	d3f2      	bcc.n	801cf14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801cf2e:	2b02      	cmp	r3, #2
 801cf30:	d1dd      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf32:	4b39      	ldr	r3, [pc, #228]	; (801d018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cf34:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801cf38:	4a38      	ldr	r2, [pc, #224]	; (801d01c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cf3a:	4839      	ldr	r0, [pc, #228]	; (801d020 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801cf3c:	f007 ff3e 	bl	8024dbc <__assert_func>
 801cf40:	6900      	ldr	r0, [r0, #16]
 801cf42:	bd08      	pop	{r3, pc}
 801cf44:	684b      	ldr	r3, [r1, #4]
 801cf46:	781b      	ldrb	r3, [r3, #0]
 801cf48:	2b01      	cmp	r3, #1
 801cf4a:	d007      	beq.n	801cf5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801cf4c:	d30b      	bcc.n	801cf66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801cf4e:	2b02      	cmp	r3, #2
 801cf50:	d1cd      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf52:	4b31      	ldr	r3, [pc, #196]	; (801d018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cf54:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801cf58:	4a30      	ldr	r2, [pc, #192]	; (801d01c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cf5a:	e7ee      	b.n	801cf3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cf5c:	6880      	ldr	r0, [r0, #8]
 801cf5e:	e7f0      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf60:	781b      	ldrb	r3, [r3, #0]
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d1c3      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf66:	6980      	ldr	r0, [r0, #24]
 801cf68:	e7eb      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf6a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cf6c:	e7e9      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cf70:	e7e7      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf72:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801cf74:	e7e5      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf76:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801cf78:	e7e3      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf7a:	2a2c      	cmp	r2, #44	; 0x2c
 801cf7c:	d030      	beq.n	801cfe0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801cf7e:	d80f      	bhi.n	801cfa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801cf80:	2a08      	cmp	r2, #8
 801cf82:	d044      	beq.n	801d00e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cf84:	d805      	bhi.n	801cf92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cf86:	2a04      	cmp	r2, #4
 801cf88:	d03f      	beq.n	801d00a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cf8a:	2a05      	cmp	r2, #5
 801cf8c:	d1af      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf8e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cf90:	e7d7      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cf92:	2a0a      	cmp	r2, #10
 801cf94:	d03b      	beq.n	801d00e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cf96:	d301      	bcc.n	801cf9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801cf98:	2a0b      	cmp	r2, #11
 801cf9a:	d1a8      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cf9c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cf9e:	e7d0      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cfa0:	2a30      	cmp	r2, #48	; 0x30
 801cfa2:	d036      	beq.n	801d012 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cfa4:	d808      	bhi.n	801cfb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801cfa6:	2a2e      	cmp	r2, #46	; 0x2e
 801cfa8:	684b      	ldr	r3, [r1, #4]
 801cfaa:	d028      	beq.n	801cffe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801cfac:	d90b      	bls.n	801cfc6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801cfae:	781b      	ldrb	r3, [r3, #0]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d19c      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cfb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cfb6:	e7c4      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cfb8:	2a32      	cmp	r2, #50	; 0x32
 801cfba:	d02a      	beq.n	801d012 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cfbc:	d301      	bcc.n	801cfc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801cfbe:	2a33      	cmp	r2, #51	; 0x33
 801cfc0:	d195      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cfc2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cfc4:	e7bd      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cfc6:	781b      	ldrb	r3, [r3, #0]
 801cfc8:	2b01      	cmp	r3, #1
 801cfca:	d007      	beq.n	801cfdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801cfcc:	d3f2      	bcc.n	801cfb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801cfce:	2b02      	cmp	r3, #2
 801cfd0:	d18d      	bne.n	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cfd2:	4b11      	ldr	r3, [pc, #68]	; (801d018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cfd4:	f240 31e1 	movw	r1, #993	; 0x3e1
 801cfd8:	4a10      	ldr	r2, [pc, #64]	; (801d01c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cfda:	e7ae      	b.n	801cf3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cfdc:	6940      	ldr	r0, [r0, #20]
 801cfde:	e7b0      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cfe0:	684b      	ldr	r3, [r1, #4]
 801cfe2:	781b      	ldrb	r3, [r3, #0]
 801cfe4:	2b01      	cmp	r3, #1
 801cfe6:	d008      	beq.n	801cffa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801cfe8:	d30d      	bcc.n	801d006 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cfea:	2b02      	cmp	r3, #2
 801cfec:	f47f af7f 	bne.w	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cff0:	4b09      	ldr	r3, [pc, #36]	; (801d018 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cff2:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801cff6:	4a09      	ldr	r2, [pc, #36]	; (801d01c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cff8:	e79f      	b.n	801cf3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cffa:	68c0      	ldr	r0, [r0, #12]
 801cffc:	e7a1      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cffe:	781b      	ldrb	r3, [r3, #0]
 801d000:	2b00      	cmp	r3, #0
 801d002:	f47f af74 	bne.w	801ceee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d006:	69c0      	ldr	r0, [r0, #28]
 801d008:	e79b      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d00a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d00c:	e799      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d00e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d010:	e797      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d012:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d014:	e795      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d016:	bf00      	nop
 801d018:	08029597 	.word	0x08029597
 801d01c:	08029d4b 	.word	0x08029d4b
 801d020:	080295e3 	.word	0x080295e3

0801d024 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d024:	b508      	push	{r3, lr}
 801d026:	4b06      	ldr	r3, [pc, #24]	; (801d040 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d028:	8818      	ldrh	r0, [r3, #0]
 801d02a:	b928      	cbnz	r0, 801d038 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d02c:	4b05      	ldr	r3, [pc, #20]	; (801d044 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d02e:	21d7      	movs	r1, #215	; 0xd7
 801d030:	4a05      	ldr	r2, [pc, #20]	; (801d048 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d032:	4806      	ldr	r0, [pc, #24]	; (801d04c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d034:	f007 fec2 	bl	8024dbc <__assert_func>
 801d038:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d03c:	b280      	uxth	r0, r0
 801d03e:	bd08      	pop	{r3, pc}
 801d040:	2000bd66 	.word	0x2000bd66
 801d044:	08029832 	.word	0x08029832
 801d048:	08029d10 	.word	0x08029d10
 801d04c:	08029874 	.word	0x08029874

0801d050 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d054:	4616      	mov	r6, r2
 801d056:	b087      	sub	sp, #28
 801d058:	461f      	mov	r7, r3
 801d05a:	b33b      	cbz	r3, 801d0ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d05c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d060:	b323      	cbz	r3, 801d0ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d062:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d066:	b30b      	cbz	r3, 801d0ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d068:	6808      	ldr	r0, [r1, #0]
 801d06a:	ab04      	add	r3, sp, #16
 801d06c:	6849      	ldr	r1, [r1, #4]
 801d06e:	4c5a      	ldr	r4, [pc, #360]	; (801d1d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d070:	c303      	stmia	r3!, {r0, r1}
 801d072:	a804      	add	r0, sp, #16
 801d074:	f7fb fd6e 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d078:	6820      	ldr	r0, [r4, #0]
 801d07a:	6803      	ldr	r3, [r0, #0]
 801d07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d07e:	4798      	blx	r3
 801d080:	2fff      	cmp	r7, #255	; 0xff
 801d082:	4623      	mov	r3, r4
 801d084:	d015      	beq.n	801d0b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d086:	f010 0f08 	tst.w	r0, #8
 801d08a:	d015      	beq.n	801d0b8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801d08c:	6818      	ldr	r0, [r3, #0]
 801d08e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d092:	6801      	ldr	r1, [r0, #0]
 801d094:	9401      	str	r4, [sp, #4]
 801d096:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d09a:	9702      	str	r7, [sp, #8]
 801d09c:	9400      	str	r4, [sp, #0]
 801d09e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d0a2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801d0a4:	4631      	mov	r1, r6
 801d0a6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d0aa:	47a0      	blx	r4
 801d0ac:	b007      	add	sp, #28
 801d0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0b2:	f010 0f02 	tst.w	r0, #2
 801d0b6:	e7e8      	b.n	801d08a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801d0b8:	6818      	ldr	r0, [r3, #0]
 801d0ba:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d0be:	6803      	ldr	r3, [r0, #0]
 801d0c0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d0c4:	6a1b      	ldr	r3, [r3, #32]
 801d0c6:	4798      	blx	r3
 801d0c8:	4944      	ldr	r1, [pc, #272]	; (801d1dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d0ca:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d0ce:	2fff      	cmp	r7, #255	; 0xff
 801d0d0:	f8b1 c000 	ldrh.w	ip, [r1]
 801d0d4:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d0d8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d0dc:	4688      	mov	r8, r1
 801d0de:	fb0c 2303 	mla	r3, ip, r3, r2
 801d0e2:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d0e6:	b2f2      	uxtb	r2, r6
 801d0e8:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d0ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0f0:	4418      	add	r0, r3
 801d0f2:	d112      	bne.n	801d11a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801d0f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d0f8:	2100      	movs	r1, #0
 801d0fa:	42a9      	cmp	r1, r5
 801d0fc:	da66      	bge.n	801d1cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d0fe:	4603      	mov	r3, r0
 801d100:	2700      	movs	r7, #0
 801d102:	42a7      	cmp	r7, r4
 801d104:	f103 0303 	add.w	r3, r3, #3
 801d108:	da57      	bge.n	801d1ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801d10a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d10e:	3701      	adds	r7, #1
 801d110:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d114:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d118:	e7f3      	b.n	801d102 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801d11a:	b2bb      	uxth	r3, r7
 801d11c:	f04f 0800 	mov.w	r8, #0
 801d120:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d124:	fb0c fc03 	mul.w	ip, ip, r3
 801d128:	fb0e fe03 	mul.w	lr, lr, r3
 801d12c:	435a      	muls	r2, r3
 801d12e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d132:	460f      	mov	r7, r1
 801d134:	b29b      	uxth	r3, r3
 801d136:	45a8      	cmp	r8, r5
 801d138:	da48      	bge.n	801d1cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d13a:	4601      	mov	r1, r0
 801d13c:	f04f 0a00 	mov.w	sl, #0
 801d140:	45a2      	cmp	sl, r4
 801d142:	f101 0103 	add.w	r1, r1, #3
 801d146:	da2f      	bge.n	801d1a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801d148:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d14c:	f10a 0a01 	add.w	sl, sl, #1
 801d150:	fb19 f903 	smulbb	r9, r9, r3
 801d154:	4491      	add	r9, r2
 801d156:	fa1f f989 	uxth.w	r9, r9
 801d15a:	f109 0b01 	add.w	fp, r9, #1
 801d15e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d162:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d166:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d16a:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d16e:	fb19 f903 	smulbb	r9, r9, r3
 801d172:	44f1      	add	r9, lr
 801d174:	fa1f f989 	uxth.w	r9, r9
 801d178:	f109 0b01 	add.w	fp, r9, #1
 801d17c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d180:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d184:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d188:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d18c:	fb19 f903 	smulbb	r9, r9, r3
 801d190:	44e1      	add	r9, ip
 801d192:	fa1f f989 	uxth.w	r9, r9
 801d196:	f109 0b01 	add.w	fp, r9, #1
 801d19a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d19e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1a2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d1a6:	e7cb      	b.n	801d140 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801d1a8:	8839      	ldrh	r1, [r7, #0]
 801d1aa:	f108 0801 	add.w	r8, r8, #1
 801d1ae:	1b09      	subs	r1, r1, r4
 801d1b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d1b4:	4431      	add	r1, r6
 801d1b6:	4408      	add	r0, r1
 801d1b8:	e7bd      	b.n	801d136 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801d1ba:	f8b8 3000 	ldrh.w	r3, [r8]
 801d1be:	3101      	adds	r1, #1
 801d1c0:	1b1b      	subs	r3, r3, r4
 801d1c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1c6:	4433      	add	r3, r6
 801d1c8:	4418      	add	r0, r3
 801d1ca:	e796      	b.n	801d0fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d1cc:	4b02      	ldr	r3, [pc, #8]	; (801d1d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d1ce:	6818      	ldr	r0, [r3, #0]
 801d1d0:	6803      	ldr	r3, [r0, #0]
 801d1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1d4:	4798      	blx	r3
 801d1d6:	e769      	b.n	801d0ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d1d8:	2000bd6c 	.word	0x2000bd6c
 801d1dc:	2000bd66 	.word	0x2000bd66

0801d1e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1e4:	b08d      	sub	sp, #52	; 0x34
 801d1e6:	460c      	mov	r4, r1
 801d1e8:	4617      	mov	r7, r2
 801d1ea:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d1ee:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d1f2:	2e00      	cmp	r6, #0
 801d1f4:	d04a      	beq.n	801d28c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d1f6:	6810      	ldr	r0, [r2, #0]
 801d1f8:	ad08      	add	r5, sp, #32
 801d1fa:	6851      	ldr	r1, [r2, #4]
 801d1fc:	c503      	stmia	r5!, {r0, r1}
 801d1fe:	6818      	ldr	r0, [r3, #0]
 801d200:	ad0a      	add	r5, sp, #40	; 0x28
 801d202:	6859      	ldr	r1, [r3, #4]
 801d204:	c503      	stmia	r5!, {r0, r1}
 801d206:	a808      	add	r0, sp, #32
 801d208:	f7fb fca4 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d20c:	4639      	mov	r1, r7
 801d20e:	a80a      	add	r0, sp, #40	; 0x28
 801d210:	4f59      	ldr	r7, [pc, #356]	; (801d378 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d212:	f7fb fc87 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d216:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d21a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d21e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d222:	6838      	ldr	r0, [r7, #0]
 801d224:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d228:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d22c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d230:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d234:	440c      	add	r4, r1
 801d236:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d23a:	440a      	add	r2, r1
 801d23c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d240:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d244:	4413      	add	r3, r2
 801d246:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d24a:	6803      	ldr	r3, [r0, #0]
 801d24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d24e:	4798      	blx	r3
 801d250:	2eff      	cmp	r6, #255	; 0xff
 801d252:	f000 8089 	beq.w	801d368 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d256:	0743      	lsls	r3, r0, #29
 801d258:	d405      	bmi.n	801d266 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d25a:	f1b9 0f00 	cmp.w	r9, #0
 801d25e:	d018      	beq.n	801d292 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d260:	f010 0f10 	tst.w	r0, #16
 801d264:	d015      	beq.n	801d292 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d266:	6838      	ldr	r0, [r7, #0]
 801d268:	b2ad      	uxth	r5, r5
 801d26a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d26e:	6801      	ldr	r1, [r0, #0]
 801d270:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d274:	9500      	str	r5, [sp, #0]
 801d276:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d27a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d27e:	9602      	str	r6, [sp, #8]
 801d280:	fa1f f688 	uxth.w	r6, r8
 801d284:	9601      	str	r6, [sp, #4]
 801d286:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d288:	4621      	mov	r1, r4
 801d28a:	47a8      	blx	r5
 801d28c:	b00d      	add	sp, #52	; 0x34
 801d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d292:	6838      	ldr	r0, [r7, #0]
 801d294:	6803      	ldr	r3, [r0, #0]
 801d296:	6a1b      	ldr	r3, [r3, #32]
 801d298:	4798      	blx	r3
 801d29a:	4a38      	ldr	r2, [pc, #224]	; (801d37c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d29c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d2a0:	2eff      	cmp	r6, #255	; 0xff
 801d2a2:	8813      	ldrh	r3, [r2, #0]
 801d2a4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d2a8:	fb0c 1303 	mla	r3, ip, r3, r1
 801d2ac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d2b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d2b4:	4418      	add	r0, r3
 801d2b6:	d032      	beq.n	801d31e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d2b8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d2bc:	f04f 0c00 	mov.w	ip, #0
 801d2c0:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d2c4:	9306      	str	r3, [sp, #24]
 801d2c6:	45c4      	cmp	ip, r8
 801d2c8:	da49      	bge.n	801d35e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d2ca:	4686      	mov	lr, r0
 801d2cc:	46a1      	mov	r9, r4
 801d2ce:	eba9 0304 	sub.w	r3, r9, r4
 801d2d2:	428b      	cmp	r3, r1
 801d2d4:	da13      	bge.n	801d2fe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d2d6:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d2da:	f89e b000 	ldrb.w	fp, [lr]
 801d2de:	9307      	str	r3, [sp, #28]
 801d2e0:	9b06      	ldr	r3, [sp, #24]
 801d2e2:	fb1b fb03 	smulbb	fp, fp, r3
 801d2e6:	9b07      	ldr	r3, [sp, #28]
 801d2e8:	fb03 b306 	mla	r3, r3, r6, fp
 801d2ec:	b29b      	uxth	r3, r3
 801d2ee:	f103 0b01 	add.w	fp, r3, #1
 801d2f2:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d2f6:	121b      	asrs	r3, r3, #8
 801d2f8:	f80e 3b01 	strb.w	r3, [lr], #1
 801d2fc:	e7e7      	b.n	801d2ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d2fe:	8813      	ldrh	r3, [r2, #0]
 801d300:	f10c 0c01 	add.w	ip, ip, #1
 801d304:	1b5b      	subs	r3, r3, r5
 801d306:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d30a:	4453      	add	r3, sl
 801d30c:	4418      	add	r0, r3
 801d30e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d312:	1b5b      	subs	r3, r3, r5
 801d314:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d318:	4453      	add	r3, sl
 801d31a:	441c      	add	r4, r3
 801d31c:	e7d3      	b.n	801d2c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d31e:	2600      	movs	r6, #0
 801d320:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d324:	4546      	cmp	r6, r8
 801d326:	da1a      	bge.n	801d35e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d328:	f100 3eff 	add.w	lr, r0, #4294967295
 801d32c:	4623      	mov	r3, r4
 801d32e:	eba3 0904 	sub.w	r9, r3, r4
 801d332:	4589      	cmp	r9, r1
 801d334:	da04      	bge.n	801d340 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d336:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d33a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d33e:	e7f6      	b.n	801d32e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d340:	8813      	ldrh	r3, [r2, #0]
 801d342:	3601      	adds	r6, #1
 801d344:	1b5b      	subs	r3, r3, r5
 801d346:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d34a:	4463      	add	r3, ip
 801d34c:	4418      	add	r0, r3
 801d34e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d352:	1b5b      	subs	r3, r3, r5
 801d354:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d358:	4463      	add	r3, ip
 801d35a:	441c      	add	r4, r3
 801d35c:	e7e2      	b.n	801d324 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801d35e:	6838      	ldr	r0, [r7, #0]
 801d360:	6803      	ldr	r3, [r0, #0]
 801d362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d364:	4798      	blx	r3
 801d366:	e791      	b.n	801d28c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d368:	f1b9 0f00 	cmp.w	r9, #0
 801d36c:	f47f af78 	bne.w	801d260 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d370:	f010 0f01 	tst.w	r0, #1
 801d374:	e776      	b.n	801d264 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d376:	bf00      	nop
 801d378:	2000bd6c 	.word	0x2000bd6c
 801d37c:	2000bd66 	.word	0x2000bd66

0801d380 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d380:	b510      	push	{r4, lr}
 801d382:	4604      	mov	r4, r0
 801d384:	2104      	movs	r1, #4
 801d386:	f007 fcee 	bl	8024d66 <_ZdlPvj>
 801d38a:	4620      	mov	r0, r4
 801d38c:	bd10      	pop	{r4, pc}

0801d38e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d38e:	b510      	push	{r4, lr}
 801d390:	4604      	mov	r4, r0
 801d392:	2104      	movs	r1, #4
 801d394:	f007 fce7 	bl	8024d66 <_ZdlPvj>
 801d398:	4620      	mov	r0, r4
 801d39a:	bd10      	pop	{r4, pc}

0801d39c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d39c:	b510      	push	{r4, lr}
 801d39e:	4604      	mov	r4, r0
 801d3a0:	2104      	movs	r1, #4
 801d3a2:	f007 fce0 	bl	8024d66 <_ZdlPvj>
 801d3a6:	4620      	mov	r0, r4
 801d3a8:	bd10      	pop	{r4, pc}

0801d3aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d3aa:	b510      	push	{r4, lr}
 801d3ac:	4604      	mov	r4, r0
 801d3ae:	2104      	movs	r1, #4
 801d3b0:	f007 fcd9 	bl	8024d66 <_ZdlPvj>
 801d3b4:	4620      	mov	r0, r4
 801d3b6:	bd10      	pop	{r4, pc}

0801d3b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d3b8:	b510      	push	{r4, lr}
 801d3ba:	4604      	mov	r4, r0
 801d3bc:	2104      	movs	r1, #4
 801d3be:	f007 fcd2 	bl	8024d66 <_ZdlPvj>
 801d3c2:	4620      	mov	r0, r4
 801d3c4:	bd10      	pop	{r4, pc}

0801d3c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d3c6:	b510      	push	{r4, lr}
 801d3c8:	4604      	mov	r4, r0
 801d3ca:	2104      	movs	r1, #4
 801d3cc:	f007 fccb 	bl	8024d66 <_ZdlPvj>
 801d3d0:	4620      	mov	r0, r4
 801d3d2:	bd10      	pop	{r4, pc}

0801d3d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d3d4:	b510      	push	{r4, lr}
 801d3d6:	4604      	mov	r4, r0
 801d3d8:	2104      	movs	r1, #4
 801d3da:	f007 fcc4 	bl	8024d66 <_ZdlPvj>
 801d3de:	4620      	mov	r0, r4
 801d3e0:	bd10      	pop	{r4, pc}

0801d3e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d3e2:	b510      	push	{r4, lr}
 801d3e4:	4604      	mov	r4, r0
 801d3e6:	2104      	movs	r1, #4
 801d3e8:	f007 fcbd 	bl	8024d66 <_ZdlPvj>
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	bd10      	pop	{r4, pc}

0801d3f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d3f0:	b510      	push	{r4, lr}
 801d3f2:	4604      	mov	r4, r0
 801d3f4:	2104      	movs	r1, #4
 801d3f6:	f007 fcb6 	bl	8024d66 <_ZdlPvj>
 801d3fa:	4620      	mov	r0, r4
 801d3fc:	bd10      	pop	{r4, pc}

0801d3fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d3fe:	b510      	push	{r4, lr}
 801d400:	4604      	mov	r4, r0
 801d402:	2104      	movs	r1, #4
 801d404:	f007 fcaf 	bl	8024d66 <_ZdlPvj>
 801d408:	4620      	mov	r0, r4
 801d40a:	bd10      	pop	{r4, pc}

0801d40c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d40c:	b510      	push	{r4, lr}
 801d40e:	4604      	mov	r4, r0
 801d410:	2104      	movs	r1, #4
 801d412:	f007 fca8 	bl	8024d66 <_ZdlPvj>
 801d416:	4620      	mov	r0, r4
 801d418:	bd10      	pop	{r4, pc}

0801d41a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d41a:	b510      	push	{r4, lr}
 801d41c:	4604      	mov	r4, r0
 801d41e:	2104      	movs	r1, #4
 801d420:	f007 fca1 	bl	8024d66 <_ZdlPvj>
 801d424:	4620      	mov	r0, r4
 801d426:	bd10      	pop	{r4, pc}

0801d428 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d428:	b510      	push	{r4, lr}
 801d42a:	4604      	mov	r4, r0
 801d42c:	2104      	movs	r1, #4
 801d42e:	f007 fc9a 	bl	8024d66 <_ZdlPvj>
 801d432:	4620      	mov	r0, r4
 801d434:	bd10      	pop	{r4, pc}

0801d436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d436:	b510      	push	{r4, lr}
 801d438:	4604      	mov	r4, r0
 801d43a:	2104      	movs	r1, #4
 801d43c:	f007 fc93 	bl	8024d66 <_ZdlPvj>
 801d440:	4620      	mov	r0, r4
 801d442:	bd10      	pop	{r4, pc}

0801d444 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d444:	b510      	push	{r4, lr}
 801d446:	4604      	mov	r4, r0
 801d448:	2104      	movs	r1, #4
 801d44a:	f007 fc8c 	bl	8024d66 <_ZdlPvj>
 801d44e:	4620      	mov	r0, r4
 801d450:	bd10      	pop	{r4, pc}

0801d452 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d452:	b510      	push	{r4, lr}
 801d454:	4604      	mov	r4, r0
 801d456:	2104      	movs	r1, #4
 801d458:	f007 fc85 	bl	8024d66 <_ZdlPvj>
 801d45c:	4620      	mov	r0, r4
 801d45e:	bd10      	pop	{r4, pc}

0801d460 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d460:	b510      	push	{r4, lr}
 801d462:	4604      	mov	r4, r0
 801d464:	2104      	movs	r1, #4
 801d466:	f007 fc7e 	bl	8024d66 <_ZdlPvj>
 801d46a:	4620      	mov	r0, r4
 801d46c:	bd10      	pop	{r4, pc}

0801d46e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d46e:	b510      	push	{r4, lr}
 801d470:	4604      	mov	r4, r0
 801d472:	2104      	movs	r1, #4
 801d474:	f007 fc77 	bl	8024d66 <_ZdlPvj>
 801d478:	4620      	mov	r0, r4
 801d47a:	bd10      	pop	{r4, pc}

0801d47c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d47c:	b510      	push	{r4, lr}
 801d47e:	4604      	mov	r4, r0
 801d480:	2104      	movs	r1, #4
 801d482:	f007 fc70 	bl	8024d66 <_ZdlPvj>
 801d486:	4620      	mov	r0, r4
 801d488:	bd10      	pop	{r4, pc}

0801d48a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d48a:	b510      	push	{r4, lr}
 801d48c:	4604      	mov	r4, r0
 801d48e:	2104      	movs	r1, #4
 801d490:	f007 fc69 	bl	8024d66 <_ZdlPvj>
 801d494:	4620      	mov	r0, r4
 801d496:	bd10      	pop	{r4, pc}

0801d498 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d49c:	4d9e      	ldr	r5, [pc, #632]	; (801d718 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801d49e:	4690      	mov	r8, r2
 801d4a0:	b08f      	sub	sp, #60	; 0x3c
 801d4a2:	4604      	mov	r4, r0
 801d4a4:	682a      	ldr	r2, [r5, #0]
 801d4a6:	4689      	mov	r9, r1
 801d4a8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d4ac:	2a02      	cmp	r2, #2
 801d4ae:	d106      	bne.n	801d4be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d4b0:	4b9a      	ldr	r3, [pc, #616]	; (801d71c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801d4b2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801d4b6:	4a9a      	ldr	r2, [pc, #616]	; (801d720 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d4b8:	489a      	ldr	r0, [pc, #616]	; (801d724 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801d4ba:	f007 fc7f 	bl	8024dbc <__assert_func>
 801d4be:	ae0e      	add	r6, sp, #56	; 0x38
 801d4c0:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801d4c4:	4630      	mov	r0, r6
 801d4c6:	f7fe f8b3 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d4ca:	6823      	ldr	r3, [r4, #0]
 801d4cc:	4607      	mov	r7, r0
 801d4ce:	4620      	mov	r0, r4
 801d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4d2:	4798      	blx	r3
 801d4d4:	4287      	cmp	r7, r0
 801d4d6:	d004      	beq.n	801d4e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d4d8:	4b93      	ldr	r3, [pc, #588]	; (801d728 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801d4da:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d4de:	4a90      	ldr	r2, [pc, #576]	; (801d720 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d4e0:	e7ea      	b.n	801d4b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d4e2:	4630      	mov	r0, r6
 801d4e4:	f7fe f820 	bl	801b528 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d4e8:	4607      	mov	r7, r0
 801d4ea:	b920      	cbnz	r0, 801d4f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d4ec:	4b8f      	ldr	r3, [pc, #572]	; (801d72c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801d4ee:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d4f2:	4a8b      	ldr	r2, [pc, #556]	; (801d720 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d4f4:	e7e0      	b.n	801d4b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d4f6:	f8d8 0000 	ldr.w	r0, [r8]
 801d4fa:	ab06      	add	r3, sp, #24
 801d4fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d500:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d504:	c303      	stmia	r3!, {r0, r1}
 801d506:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d50a:	ab08      	add	r3, sp, #32
 801d50c:	f8d9 0000 	ldr.w	r0, [r9]
 801d510:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d514:	c303      	stmia	r3!, {r0, r1}
 801d516:	4630      	mov	r0, r6
 801d518:	f7fd fefe 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d51c:	4680      	mov	r8, r0
 801d51e:	4630      	mov	r0, r6
 801d520:	4e83      	ldr	r6, [pc, #524]	; (801d730 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d522:	f7fd ff33 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d526:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d52a:	f10d 0920 	add.w	r9, sp, #32
 801d52e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d532:	a806      	add	r0, sp, #24
 801d534:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d538:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d53c:	f7fb fb0a 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d540:	4648      	mov	r0, r9
 801d542:	f7fb fb07 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d546:	a80a      	add	r0, sp, #40	; 0x28
 801d548:	f7fb fb04 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d54c:	4b79      	ldr	r3, [pc, #484]	; (801d734 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d54e:	2100      	movs	r1, #0
 801d550:	f9b6 2000 	ldrsh.w	r2, [r6]
 801d554:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d558:	4648      	mov	r0, r9
 801d55a:	910c      	str	r1, [sp, #48]	; 0x30
 801d55c:	a90c      	add	r1, sp, #48	; 0x30
 801d55e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801d562:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d566:	f7f8 fac9 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801d56a:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d56e:	9602      	str	r6, [sp, #8]
 801d570:	f1bc 0f00 	cmp.w	ip, #0
 801d574:	f000 80a4 	beq.w	801d6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d578:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d57c:	2e00      	cmp	r6, #0
 801d57e:	f000 809f 	beq.w	801d6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d582:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d586:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d58a:	4288      	cmp	r0, r1
 801d58c:	db36      	blt.n	801d5fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d58e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d592:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d596:	429a      	cmp	r2, r3
 801d598:	db30      	blt.n	801d5fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d59a:	4460      	add	r0, ip
 801d59c:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d5a0:	4461      	add	r1, ip
 801d5a2:	b200      	sxth	r0, r0
 801d5a4:	b209      	sxth	r1, r1
 801d5a6:	4288      	cmp	r0, r1
 801d5a8:	dc28      	bgt.n	801d5fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d5aa:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d5ae:	4432      	add	r2, r6
 801d5b0:	440b      	add	r3, r1
 801d5b2:	b212      	sxth	r2, r2
 801d5b4:	b21b      	sxth	r3, r3
 801d5b6:	429a      	cmp	r2, r3
 801d5b8:	dc20      	bgt.n	801d5fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d5ba:	6823      	ldr	r3, [r4, #0]
 801d5bc:	4620      	mov	r0, r4
 801d5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5c0:	4798      	blx	r3
 801d5c2:	4682      	mov	sl, r0
 801d5c4:	6828      	ldr	r0, [r5, #0]
 801d5c6:	6803      	ldr	r3, [r0, #0]
 801d5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5ca:	4798      	blx	r3
 801d5cc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d5d0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d5d4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d5d8:	9303      	str	r3, [sp, #12]
 801d5da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d5de:	1a9b      	subs	r3, r3, r2
 801d5e0:	b29b      	uxth	r3, r3
 801d5e2:	b21c      	sxth	r4, r3
 801d5e4:	2c00      	cmp	r4, #0
 801d5e6:	dc0e      	bgt.n	801d606 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801d5e8:	b134      	cbz	r4, 801d5f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801d5ea:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d5ee:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d5f2:	4413      	add	r3, r2
 801d5f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d5f8:	463c      	mov	r4, r7
 801d5fa:	e00b      	b.n	801d614 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801d5fc:	4b4e      	ldr	r3, [pc, #312]	; (801d738 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801d5fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d602:	4a47      	ldr	r2, [pc, #284]	; (801d720 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d604:	e758      	b.n	801d4b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d606:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d60a:	ebab 0303 	sub.w	r3, fp, r3
 801d60e:	443c      	add	r4, r7
 801d610:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d614:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d618:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d61c:	1a9b      	subs	r3, r3, r2
 801d61e:	b29b      	uxth	r3, r3
 801d620:	b219      	sxth	r1, r3
 801d622:	2900      	cmp	r1, #0
 801d624:	dd50      	ble.n	801d6c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801d626:	9a03      	ldr	r2, [sp, #12]
 801d628:	fb02 4401 	mla	r4, r2, r1, r4
 801d62c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d630:	1ad3      	subs	r3, r2, r3
 801d632:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d636:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d63a:	f1bc 0f00 	cmp.w	ip, #0
 801d63e:	dd3f      	ble.n	801d6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d640:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d644:	2e00      	cmp	r6, #0
 801d646:	dd3b      	ble.n	801d6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d648:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d64c:	2203      	movs	r2, #3
 801d64e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d652:	fb0a f801 	mul.w	r8, sl, r1
 801d656:	fb13 8802 	smlabb	r8, r3, r2, r8
 801d65a:	9a02      	ldr	r2, [sp, #8]
 801d65c:	4480      	add	r8, r0
 801d65e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d662:	8812      	ldrh	r2, [r2, #0]
 801d664:	4584      	cmp	ip, r0
 801d666:	eba2 0303 	sub.w	r3, r2, r3
 801d66a:	bfa8      	it	ge
 801d66c:	4684      	movge	ip, r0
 801d66e:	459c      	cmp	ip, r3
 801d670:	bfa8      	it	ge
 801d672:	469c      	movge	ip, r3
 801d674:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801d678:	429e      	cmp	r6, r3
 801d67a:	bfa8      	it	ge
 801d67c:	461e      	movge	r6, r3
 801d67e:	4b2d      	ldr	r3, [pc, #180]	; (801d734 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d680:	881b      	ldrh	r3, [r3, #0]
 801d682:	1a59      	subs	r1, r3, r1
 801d684:	4633      	mov	r3, r6
 801d686:	428e      	cmp	r6, r1
 801d688:	bfa8      	it	ge
 801d68a:	460b      	movge	r3, r1
 801d68c:	4562      	cmp	r2, ip
 801d68e:	9302      	str	r3, [sp, #8]
 801d690:	d12d      	bne.n	801d6ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d692:	455a      	cmp	r2, fp
 801d694:	d12b      	bne.n	801d6ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d696:	6828      	ldr	r0, [r5, #0]
 801d698:	6803      	ldr	r3, [r0, #0]
 801d69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d69c:	4798      	blx	r3
 801d69e:	07c3      	lsls	r3, r0, #31
 801d6a0:	d51b      	bpl.n	801d6da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801d6a2:	6828      	ldr	r0, [r5, #0]
 801d6a4:	9b02      	ldr	r3, [sp, #8]
 801d6a6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d6aa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d6ae:	6803      	ldr	r3, [r0, #0]
 801d6b0:	f8cd b000 	str.w	fp, [sp]
 801d6b4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801d6b6:	4623      	mov	r3, r4
 801d6b8:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d6bc:	47a8      	blx	r5
 801d6be:	4607      	mov	r7, r0
 801d6c0:	4638      	mov	r0, r7
 801d6c2:	b00f      	add	sp, #60	; 0x3c
 801d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6c8:	bf1f      	itttt	ne
 801d6ca:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d6ce:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d6d2:	189b      	addne	r3, r3, r2
 801d6d4:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d6d8:	e7ad      	b.n	801d636 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801d6da:	6828      	ldr	r0, [r5, #0]
 801d6dc:	4642      	mov	r2, r8
 801d6de:	4621      	mov	r1, r4
 801d6e0:	6803      	ldr	r3, [r0, #0]
 801d6e2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801d6e4:	9b02      	ldr	r3, [sp, #8]
 801d6e6:	fb03 f30a 	mul.w	r3, r3, sl
 801d6ea:	47a8      	blx	r5
 801d6ec:	e7e8      	b.n	801d6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d6ee:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801d6f2:	f04f 0900 	mov.w	r9, #0
 801d6f6:	9b02      	ldr	r3, [sp, #8]
 801d6f8:	454b      	cmp	r3, r9
 801d6fa:	dde1      	ble.n	801d6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d6fc:	6828      	ldr	r0, [r5, #0]
 801d6fe:	4642      	mov	r2, r8
 801d700:	4621      	mov	r1, r4
 801d702:	44d0      	add	r8, sl
 801d704:	6803      	ldr	r3, [r0, #0]
 801d706:	f109 0901 	add.w	r9, r9, #1
 801d70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d70c:	461e      	mov	r6, r3
 801d70e:	465b      	mov	r3, fp
 801d710:	47b0      	blx	r6
 801d712:	9b03      	ldr	r3, [sp, #12]
 801d714:	441c      	add	r4, r3
 801d716:	e7ee      	b.n	801d6f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801d718:	2000bd6c 	.word	0x2000bd6c
 801d71c:	08029615 	.word	0x08029615
 801d720:	08029df5 	.word	0x08029df5
 801d724:	080295e3 	.word	0x080295e3
 801d728:	080296c9 	.word	0x080296c9
 801d72c:	0802971e 	.word	0x0802971e
 801d730:	2000bd66 	.word	0x2000bd66
 801d734:	2000bd68 	.word	0x2000bd68
 801d738:	0802975c 	.word	0x0802975c

0801d73c <_ZN8touchgfx8LCD24bppC1Ev>:
 801d73c:	4a0b      	ldr	r2, [pc, #44]	; (801d76c <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801d73e:	6002      	str	r2, [r0, #0]
 801d740:	2200      	movs	r2, #0
 801d742:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d746:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d74a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d74e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d752:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d756:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d75a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d75e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d762:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d766:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d76a:	4770      	bx	lr
 801d76c:	08029a40 	.word	0x08029a40

0801d770 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d774:	b093      	sub	sp, #76	; 0x4c
 801d776:	880c      	ldrh	r4, [r1, #0]
 801d778:	4605      	mov	r5, r0
 801d77a:	460f      	mov	r7, r1
 801d77c:	4691      	mov	r9, r2
 801d77e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801d782:	b12c      	cbz	r4, 801d790 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d784:	4b71      	ldr	r3, [pc, #452]	; (801d94c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d786:	2167      	movs	r1, #103	; 0x67
 801d788:	4a71      	ldr	r2, [pc, #452]	; (801d950 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d78a:	4872      	ldr	r0, [pc, #456]	; (801d954 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d78c:	f007 fb16 	bl	8024dbc <__assert_func>
 801d790:	6810      	ldr	r0, [r2, #0]
 801d792:	ae0e      	add	r6, sp, #56	; 0x38
 801d794:	6851      	ldr	r1, [r2, #4]
 801d796:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801d95c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801d79a:	c603      	stmia	r6!, {r0, r1}
 801d79c:	6818      	ldr	r0, [r3, #0]
 801d79e:	ae10      	add	r6, sp, #64	; 0x40
 801d7a0:	6859      	ldr	r1, [r3, #4]
 801d7a2:	c603      	stmia	r6!, {r0, r1}
 801d7a4:	a80e      	add	r0, sp, #56	; 0x38
 801d7a6:	f7fb f9d5 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d7aa:	4649      	mov	r1, r9
 801d7ac:	a810      	add	r0, sp, #64	; 0x40
 801d7ae:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801d958 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d7b2:	f7fb f9b7 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d7b6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d7ba:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d7be:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d7c2:	f8d9 0000 	ldr.w	r0, [r9]
 801d7c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d7ca:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d7ce:	440d      	add	r5, r1
 801d7d0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d7d4:	440a      	add	r2, r1
 801d7d6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d7da:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d7de:	4413      	add	r3, r2
 801d7e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d7e4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d7e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801d7ea:	6803      	ldr	r3, [r0, #0]
 801d7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d7f0:	4798      	blx	r3
 801d7f2:	2801      	cmp	r0, #1
 801d7f4:	d11e      	bne.n	801d834 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d7f6:	220b      	movs	r2, #11
 801d7f8:	9008      	str	r0, [sp, #32]
 801d7fa:	b2b6      	uxth	r6, r6
 801d7fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d800:	9207      	str	r2, [sp, #28]
 801d802:	4629      	mov	r1, r5
 801d804:	f8ba 2000 	ldrh.w	r2, [sl]
 801d808:	f8cd 8010 	str.w	r8, [sp, #16]
 801d80c:	9601      	str	r6, [sp, #4]
 801d80e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d812:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d816:	9203      	str	r2, [sp, #12]
 801d818:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d81c:	9202      	str	r2, [sp, #8]
 801d81e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d822:	9200      	str	r2, [sp, #0]
 801d824:	463a      	mov	r2, r7
 801d826:	f8d9 0000 	ldr.w	r0, [r9]
 801d82a:	f7f8 fdb5 	bl	8016398 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d82e:	b013      	add	sp, #76	; 0x4c
 801d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d834:	f8d9 0000 	ldr.w	r0, [r9]
 801d838:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d83c:	6803      	ldr	r3, [r0, #0]
 801d83e:	6a1b      	ldr	r3, [r3, #32]
 801d840:	4798      	blx	r3
 801d842:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d846:	f8ba 3000 	ldrh.w	r3, [sl]
 801d84a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d84e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d852:	fb01 2303 	mla	r3, r1, r3, r2
 801d856:	4621      	mov	r1, r4
 801d858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d85c:	4418      	add	r0, r3
 801d85e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d862:	930c      	str	r3, [sp, #48]	; 0x30
 801d864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d866:	4299      	cmp	r1, r3
 801d868:	da6a      	bge.n	801d940 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d86a:	1cc2      	adds	r2, r0, #3
 801d86c:	46aa      	mov	sl, r5
 801d86e:	ebaa 0305 	sub.w	r3, sl, r5
 801d872:	429e      	cmp	r6, r3
 801d874:	dd55      	ble.n	801d922 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d876:	2404      	movs	r4, #4
 801d878:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d87c:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d880:	eb07 0e03 	add.w	lr, r7, r3
 801d884:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d888:	b184      	cbz	r4, 801d8ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d88a:	2cff      	cmp	r4, #255	; 0xff
 801d88c:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d890:	d10e      	bne.n	801d8b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d892:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d896:	d10b      	bne.n	801d8b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d898:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d89c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d8a0:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d8a4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d8a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d8ac:	3203      	adds	r2, #3
 801d8ae:	e7de      	b.n	801d86e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d8b0:	fb08 f404 	mul.w	r4, r8, r4
 801d8b4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d8b8:	1c63      	adds	r3, r4, #1
 801d8ba:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d8be:	121b      	asrs	r3, r3, #8
 801d8c0:	b29c      	uxth	r4, r3
 801d8c2:	43db      	mvns	r3, r3
 801d8c4:	fb1b fb04 	smulbb	fp, fp, r4
 801d8c8:	b2db      	uxtb	r3, r3
 801d8ca:	fb0c bc03 	mla	ip, ip, r3, fp
 801d8ce:	fa1f fc8c 	uxth.w	ip, ip
 801d8d2:	f10c 0b01 	add.w	fp, ip, #1
 801d8d6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d8da:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d8de:	fb1b fb03 	smulbb	fp, fp, r3
 801d8e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d8e6:	f802 cc03 	strb.w	ip, [r2, #-3]
 801d8ea:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d8ee:	fb0c bc04 	mla	ip, ip, r4, fp
 801d8f2:	fa1f fc8c 	uxth.w	ip, ip
 801d8f6:	f10c 0b01 	add.w	fp, ip, #1
 801d8fa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d8fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d902:	f802 cc02 	strb.w	ip, [r2, #-2]
 801d906:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801d90a:	f89e e002 	ldrb.w	lr, [lr, #2]
 801d90e:	fb1c f303 	smulbb	r3, ip, r3
 801d912:	fb0e 3304 	mla	r3, lr, r4, r3
 801d916:	b29b      	uxth	r3, r3
 801d918:	1c5c      	adds	r4, r3, #1
 801d91a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d91e:	121b      	asrs	r3, r3, #8
 801d920:	e7c2      	b.n	801d8a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d924:	3101      	adds	r1, #1
 801d926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d928:	881b      	ldrh	r3, [r3, #0]
 801d92a:	1b9b      	subs	r3, r3, r6
 801d92c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d930:	4413      	add	r3, r2
 801d932:	4418      	add	r0, r3
 801d934:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d938:	1b9b      	subs	r3, r3, r6
 801d93a:	444b      	add	r3, r9
 801d93c:	441d      	add	r5, r3
 801d93e:	e791      	b.n	801d864 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d940:	4b05      	ldr	r3, [pc, #20]	; (801d958 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801d942:	6818      	ldr	r0, [r3, #0]
 801d944:	6803      	ldr	r3, [r0, #0]
 801d946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d948:	4798      	blx	r3
 801d94a:	e770      	b.n	801d82e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d94c:	08029547 	.word	0x08029547
 801d950:	08029c17 	.word	0x08029c17
 801d954:	080295e3 	.word	0x080295e3
 801d958:	2000bd6c 	.word	0x2000bd6c
 801d95c:	2000bd66 	.word	0x2000bd66

0801d960 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d964:	4614      	mov	r4, r2
 801d966:	880a      	ldrh	r2, [r1, #0]
 801d968:	b091      	sub	sp, #68	; 0x44
 801d96a:	4680      	mov	r8, r0
 801d96c:	2a01      	cmp	r2, #1
 801d96e:	460e      	mov	r6, r1
 801d970:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d974:	d005      	beq.n	801d982 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801d976:	4b6d      	ldr	r3, [pc, #436]	; (801db2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801d978:	21b5      	movs	r1, #181	; 0xb5
 801d97a:	4a6d      	ldr	r2, [pc, #436]	; (801db30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801d97c:	486d      	ldr	r0, [pc, #436]	; (801db34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801d97e:	f007 fa1d 	bl	8024dbc <__assert_func>
 801d982:	6820      	ldr	r0, [r4, #0]
 801d984:	ad0c      	add	r5, sp, #48	; 0x30
 801d986:	6861      	ldr	r1, [r4, #4]
 801d988:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801db38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801d98c:	c503      	stmia	r5!, {r0, r1}
 801d98e:	6818      	ldr	r0, [r3, #0]
 801d990:	ad0e      	add	r5, sp, #56	; 0x38
 801d992:	6859      	ldr	r1, [r3, #4]
 801d994:	c503      	stmia	r5!, {r0, r1}
 801d996:	a80c      	add	r0, sp, #48	; 0x30
 801d998:	f7fb f8dc 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d99c:	4621      	mov	r1, r4
 801d99e:	a80e      	add	r0, sp, #56	; 0x38
 801d9a0:	f7fb f8c0 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d9a4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d9a8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d9ac:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d9b0:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801d9b4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d9b8:	eb08 0401 	add.w	r4, r8, r1
 801d9bc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d9c0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801db3c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801d9c4:	440a      	add	r2, r1
 801d9c6:	f8d8 0000 	ldr.w	r0, [r8]
 801d9ca:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d9ce:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d9d2:	4413      	add	r3, r2
 801d9d4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d9d8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d9dc:	930a      	str	r3, [sp, #40]	; 0x28
 801d9de:	6803      	ldr	r3, [r0, #0]
 801d9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d9e4:	4798      	blx	r3
 801d9e6:	2801      	cmp	r0, #1
 801d9e8:	d11e      	bne.n	801da28 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801d9ea:	220b      	movs	r2, #11
 801d9ec:	9008      	str	r0, [sp, #32]
 801d9ee:	b2ad      	uxth	r5, r5
 801d9f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d9f4:	9207      	str	r2, [sp, #28]
 801d9f6:	4621      	mov	r1, r4
 801d9f8:	f8b9 2000 	ldrh.w	r2, [r9]
 801d9fc:	9501      	str	r5, [sp, #4]
 801d9fe:	9206      	str	r2, [sp, #24]
 801da00:	2200      	movs	r2, #0
 801da02:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801da06:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801da0a:	9203      	str	r2, [sp, #12]
 801da0c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801da10:	9202      	str	r2, [sp, #8]
 801da12:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801da16:	9200      	str	r2, [sp, #0]
 801da18:	4632      	mov	r2, r6
 801da1a:	f8d8 0000 	ldr.w	r0, [r8]
 801da1e:	f7f8 fcbb 	bl	8016398 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801da22:	b011      	add	sp, #68	; 0x44
 801da24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da28:	f8d8 0000 	ldr.w	r0, [r8]
 801da2c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801da30:	6803      	ldr	r3, [r0, #0]
 801da32:	6a1b      	ldr	r3, [r3, #32]
 801da34:	4798      	blx	r3
 801da36:	f8b9 3000 	ldrh.w	r3, [r9]
 801da3a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801da3e:	f04f 0e00 	mov.w	lr, #0
 801da42:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801da46:	fa1f f987 	uxth.w	r9, r7
 801da4a:	fb01 2303 	mla	r3, r1, r3, r2
 801da4e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801da52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da56:	b289      	uxth	r1, r1
 801da58:	4418      	add	r0, r3
 801da5a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801da5e:	930b      	str	r3, [sp, #44]	; 0x2c
 801da60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da62:	459e      	cmp	lr, r3
 801da64:	da5c      	bge.n	801db20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801da66:	1cc3      	adds	r3, r0, #3
 801da68:	46a2      	mov	sl, r4
 801da6a:	ebaa 0204 	sub.w	r2, sl, r4
 801da6e:	4295      	cmp	r5, r2
 801da70:	dd46      	ble.n	801db00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801da72:	f04f 0c03 	mov.w	ip, #3
 801da76:	f04f 0b04 	mov.w	fp, #4
 801da7a:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801da7e:	2fff      	cmp	r7, #255	; 0xff
 801da80:	fb1c b202 	smlabb	r2, ip, r2, fp
 801da84:	eb06 0c02 	add.w	ip, r6, r2
 801da88:	f816 b002 	ldrb.w	fp, [r6, r2]
 801da8c:	d02f      	beq.n	801daee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801da8e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801da92:	fb12 f201 	smulbb	r2, r2, r1
 801da96:	fb0b 2209 	mla	r2, fp, r9, r2
 801da9a:	b292      	uxth	r2, r2
 801da9c:	f102 0b01 	add.w	fp, r2, #1
 801daa0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801daa4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801daa8:	fb1b fb01 	smulbb	fp, fp, r1
 801daac:	1212      	asrs	r2, r2, #8
 801daae:	f803 2c03 	strb.w	r2, [r3, #-3]
 801dab2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801dab6:	fb02 b209 	mla	r2, r2, r9, fp
 801daba:	b292      	uxth	r2, r2
 801dabc:	f102 0b01 	add.w	fp, r2, #1
 801dac0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801dac4:	1212      	asrs	r2, r2, #8
 801dac6:	f803 2c02 	strb.w	r2, [r3, #-2]
 801daca:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801dace:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801dad2:	fb1c fc01 	smulbb	ip, ip, r1
 801dad6:	fb02 c209 	mla	r2, r2, r9, ip
 801dada:	b292      	uxth	r2, r2
 801dadc:	f102 0c01 	add.w	ip, r2, #1
 801dae0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801dae4:	1212      	asrs	r2, r2, #8
 801dae6:	f803 2c01 	strb.w	r2, [r3, #-1]
 801daea:	3303      	adds	r3, #3
 801daec:	e7bd      	b.n	801da6a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801daee:	f803 bc03 	strb.w	fp, [r3, #-3]
 801daf2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801daf6:	f803 2c02 	strb.w	r2, [r3, #-2]
 801dafa:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801dafe:	e7f2      	b.n	801dae6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801db00:	4b0d      	ldr	r3, [pc, #52]	; (801db38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801db02:	f10e 0e01 	add.w	lr, lr, #1
 801db06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801db08:	881b      	ldrh	r3, [r3, #0]
 801db0a:	1b5b      	subs	r3, r3, r5
 801db0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db10:	4413      	add	r3, r2
 801db12:	4418      	add	r0, r3
 801db14:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801db18:	1b5b      	subs	r3, r3, r5
 801db1a:	4443      	add	r3, r8
 801db1c:	441c      	add	r4, r3
 801db1e:	e79f      	b.n	801da60 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801db20:	4b06      	ldr	r3, [pc, #24]	; (801db3c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801db22:	6818      	ldr	r0, [r3, #0]
 801db24:	6803      	ldr	r3, [r0, #0]
 801db26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db28:	4798      	blx	r3
 801db2a:	e77a      	b.n	801da22 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801db2c:	08029453 	.word	0x08029453
 801db30:	08029b0a 	.word	0x08029b0a
 801db34:	080295e3 	.word	0x080295e3
 801db38:	2000bd66 	.word	0x2000bd66
 801db3c:	2000bd6c 	.word	0x2000bd6c

0801db40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801db40:	b570      	push	{r4, r5, r6, lr}
 801db42:	780d      	ldrb	r5, [r1, #0]
 801db44:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801db48:	2d01      	cmp	r5, #1
 801db4a:	d00d      	beq.n	801db68 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801db4c:	d307      	bcc.n	801db5e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801db4e:	2d02      	cmp	r5, #2
 801db50:	d10f      	bne.n	801db72 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801db52:	4b08      	ldr	r3, [pc, #32]	; (801db74 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801db54:	215a      	movs	r1, #90	; 0x5a
 801db56:	4a08      	ldr	r2, [pc, #32]	; (801db78 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801db58:	4808      	ldr	r0, [pc, #32]	; (801db7c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801db5a:	f007 f92f 	bl	8024dbc <__assert_func>
 801db5e:	9404      	str	r4, [sp, #16]
 801db60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db64:	f7ff be04 	b.w	801d770 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801db68:	9404      	str	r4, [sp, #16]
 801db6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db6e:	f7ff bef7 	b.w	801d960 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801db72:	bd70      	pop	{r4, r5, r6, pc}
 801db74:	08029408 	.word	0x08029408
 801db78:	08029a88 	.word	0x08029a88
 801db7c:	080295e3 	.word	0x080295e3

0801db80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db84:	b08b      	sub	sp, #44	; 0x2c
 801db86:	460c      	mov	r4, r1
 801db88:	4680      	mov	r8, r0
 801db8a:	469a      	mov	sl, r3
 801db8c:	6808      	ldr	r0, [r1, #0]
 801db8e:	ab06      	add	r3, sp, #24
 801db90:	6849      	ldr	r1, [r1, #4]
 801db92:	c303      	stmia	r3!, {r0, r1}
 801db94:	6810      	ldr	r0, [r2, #0]
 801db96:	ab08      	add	r3, sp, #32
 801db98:	6851      	ldr	r1, [r2, #4]
 801db9a:	c303      	stmia	r3!, {r0, r1}
 801db9c:	a806      	add	r0, sp, #24
 801db9e:	f7fa ffd9 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dba2:	4621      	mov	r1, r4
 801dba4:	a808      	add	r0, sp, #32
 801dba6:	4c61      	ldr	r4, [pc, #388]	; (801dd2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801dba8:	f7fa ffbc 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dbac:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dbb0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dbb4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dbb8:	6820      	ldr	r0, [r4, #0]
 801dbba:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dbbe:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801dbc2:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801dbc6:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801dbca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801dbce:	440a      	add	r2, r1
 801dbd0:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dbd4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dbd8:	4413      	add	r3, r2
 801dbda:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dbde:	6803      	ldr	r3, [r0, #0]
 801dbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dbe2:	4798      	blx	r3
 801dbe4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dbe8:	d118      	bne.n	801dc1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801dbea:	f010 0f20 	tst.w	r0, #32
 801dbee:	6820      	ldr	r0, [r4, #0]
 801dbf0:	d017      	beq.n	801dc22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801dbf2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801dbf6:	b2bf      	uxth	r7, r7
 801dbf8:	6801      	ldr	r1, [r0, #0]
 801dbfa:	9402      	str	r4, [sp, #8]
 801dbfc:	fa1f f489 	uxth.w	r4, r9
 801dc00:	f8cd a00c 	str.w	sl, [sp, #12]
 801dc04:	9401      	str	r4, [sp, #4]
 801dc06:	9700      	str	r7, [sp, #0]
 801dc08:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dc0c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801dc0e:	4641      	mov	r1, r8
 801dc10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dc14:	47a0      	blx	r4
 801dc16:	b00b      	add	sp, #44	; 0x2c
 801dc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dc20:	e7e5      	b.n	801dbee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801dc22:	6803      	ldr	r3, [r0, #0]
 801dc24:	6a1b      	ldr	r3, [r3, #32]
 801dc26:	4798      	blx	r3
 801dc28:	4b41      	ldr	r3, [pc, #260]	; (801dd30 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801dc2a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801dc2e:	f04f 0c00 	mov.w	ip, #0
 801dc32:	881a      	ldrh	r2, [r3, #0]
 801dc34:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801dc38:	fb04 1202 	mla	r2, r4, r2, r1
 801dc3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dc40:	4410      	add	r0, r2
 801dc42:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801dc46:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801dc4a:	0092      	lsls	r2, r2, #2
 801dc4c:	9105      	str	r1, [sp, #20]
 801dc4e:	9204      	str	r2, [sp, #16]
 801dc50:	45cc      	cmp	ip, r9
 801dc52:	da65      	bge.n	801dd20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801dc54:	1cc4      	adds	r4, r0, #3
 801dc56:	f108 0504 	add.w	r5, r8, #4
 801dc5a:	f04f 0e00 	mov.w	lr, #0
 801dc5e:	45be      	cmp	lr, r7
 801dc60:	da4d      	bge.n	801dcfe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801dc62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801dc66:	b181      	cbz	r1, 801dc8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801dc68:	29ff      	cmp	r1, #255	; 0xff
 801dc6a:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801dc6e:	d111      	bne.n	801dc94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dc70:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dc74:	d10e      	bne.n	801dc94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dc76:	f804 bc03 	strb.w	fp, [r4, #-3]
 801dc7a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801dc7e:	f804 2c02 	strb.w	r2, [r4, #-2]
 801dc82:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801dc86:	f804 2c01 	strb.w	r2, [r4, #-1]
 801dc8a:	f10e 0e01 	add.w	lr, lr, #1
 801dc8e:	3403      	adds	r4, #3
 801dc90:	3504      	adds	r5, #4
 801dc92:	e7e4      	b.n	801dc5e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801dc94:	fb0a f101 	mul.w	r1, sl, r1
 801dc98:	1c4a      	adds	r2, r1, #1
 801dc9a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801dc9e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801dca2:	1212      	asrs	r2, r2, #8
 801dca4:	b296      	uxth	r6, r2
 801dca6:	43d2      	mvns	r2, r2
 801dca8:	fb1b fb06 	smulbb	fp, fp, r6
 801dcac:	b2d2      	uxtb	r2, r2
 801dcae:	fb01 b102 	mla	r1, r1, r2, fp
 801dcb2:	b289      	uxth	r1, r1
 801dcb4:	f101 0b01 	add.w	fp, r1, #1
 801dcb8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801dcbc:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801dcc0:	fb1b fb02 	smulbb	fp, fp, r2
 801dcc4:	1209      	asrs	r1, r1, #8
 801dcc6:	f804 1c03 	strb.w	r1, [r4, #-3]
 801dcca:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801dcce:	fb01 b106 	mla	r1, r1, r6, fp
 801dcd2:	b289      	uxth	r1, r1
 801dcd4:	f101 0b01 	add.w	fp, r1, #1
 801dcd8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801dcdc:	1209      	asrs	r1, r1, #8
 801dcde:	f804 1c02 	strb.w	r1, [r4, #-2]
 801dce2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801dce6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801dcea:	fb11 f202 	smulbb	r2, r1, r2
 801dcee:	fb0b 2206 	mla	r2, fp, r6, r2
 801dcf2:	b292      	uxth	r2, r2
 801dcf4:	1c56      	adds	r6, r2, #1
 801dcf6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801dcfa:	1212      	asrs	r2, r2, #8
 801dcfc:	e7c3      	b.n	801dc86 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801dcfe:	881a      	ldrh	r2, [r3, #0]
 801dd00:	f10c 0c01 	add.w	ip, ip, #1
 801dd04:	9905      	ldr	r1, [sp, #20]
 801dd06:	1bd2      	subs	r2, r2, r7
 801dd08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd0c:	440a      	add	r2, r1
 801dd0e:	9904      	ldr	r1, [sp, #16]
 801dd10:	4410      	add	r0, r2
 801dd12:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801dd16:	1bd2      	subs	r2, r2, r7
 801dd18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801dd1c:	4490      	add	r8, r2
 801dd1e:	e797      	b.n	801dc50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801dd20:	4b02      	ldr	r3, [pc, #8]	; (801dd2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801dd22:	6818      	ldr	r0, [r3, #0]
 801dd24:	6803      	ldr	r3, [r0, #0]
 801dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd28:	4798      	blx	r3
 801dd2a:	e774      	b.n	801dc16 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801dd2c:	2000bd6c 	.word	0x2000bd6c
 801dd30:	2000bd66 	.word	0x2000bd66

0801dd34 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dd34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd38:	b085      	sub	sp, #20
 801dd3a:	4606      	mov	r6, r0
 801dd3c:	460c      	mov	r4, r1
 801dd3e:	4691      	mov	r9, r2
 801dd40:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801dd44:	4698      	mov	r8, r3
 801dd46:	b385      	cbz	r5, 801ddaa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dd48:	4608      	mov	r0, r1
 801dd4a:	f7fd fae5 	bl	801b318 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dd4e:	4607      	mov	r7, r0
 801dd50:	4620      	mov	r0, r4
 801dd52:	f7fd fb1b 	bl	801b38c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dd56:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dd60:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dd64:	f8ad 700c 	strh.w	r7, [sp, #12]
 801dd68:	f7fd fc62 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dd6c:	2801      	cmp	r0, #1
 801dd6e:	d00f      	beq.n	801dd90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dd70:	4620      	mov	r0, r4
 801dd72:	f7fd fc5d 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dd76:	2802      	cmp	r0, #2
 801dd78:	d00a      	beq.n	801dd90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dd7a:	4620      	mov	r0, r4
 801dd7c:	f7fd fc58 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dd80:	280b      	cmp	r0, #11
 801dd82:	d005      	beq.n	801dd90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dd84:	4b1b      	ldr	r3, [pc, #108]	; (801ddf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801dd86:	2142      	movs	r1, #66	; 0x42
 801dd88:	4a1b      	ldr	r2, [pc, #108]	; (801ddf8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801dd8a:	481c      	ldr	r0, [pc, #112]	; (801ddfc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801dd8c:	f007 f816 	bl	8024dbc <__assert_func>
 801dd90:	4620      	mov	r0, r4
 801dd92:	f7fd fc4d 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dd96:	2802      	cmp	r0, #2
 801dd98:	4620      	mov	r0, r4
 801dd9a:	d109      	bne.n	801ddb0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801dd9c:	f7fd fbc4 	bl	801b528 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dda0:	462b      	mov	r3, r5
 801dda2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dda4:	a902      	add	r1, sp, #8
 801dda6:	f7ff feeb 	bl	801db80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ddaa:	b005      	add	sp, #20
 801ddac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ddb0:	f7fd fc3e 	bl	801b630 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ddb4:	280b      	cmp	r0, #11
 801ddb6:	d10e      	bne.n	801ddd6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801ddb8:	4620      	mov	r0, r4
 801ddba:	f7fd fbb5 	bl	801b528 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ddbe:	4606      	mov	r6, r0
 801ddc0:	4620      	mov	r0, r4
 801ddc2:	f7fd fbe3 	bl	801b58c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ddc6:	9500      	str	r5, [sp, #0]
 801ddc8:	4601      	mov	r1, r0
 801ddca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddcc:	aa02      	add	r2, sp, #8
 801ddce:	4630      	mov	r0, r6
 801ddd0:	f7ff feb6 	bl	801db40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ddd4:	e7e9      	b.n	801ddaa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801ddd6:	6833      	ldr	r3, [r6, #0]
 801ddd8:	4620      	mov	r0, r4
 801ddda:	691f      	ldr	r7, [r3, #16]
 801dddc:	f7fd fba4 	bl	801b528 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dde0:	2300      	movs	r3, #0
 801dde2:	4601      	mov	r1, r0
 801dde4:	aa02      	add	r2, sp, #8
 801dde6:	4630      	mov	r0, r6
 801dde8:	e9cd 5300 	strd	r5, r3, [sp]
 801ddec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddee:	47b8      	blx	r7
 801ddf0:	e7db      	b.n	801ddaa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801ddf2:	bf00      	nop
 801ddf4:	080294a1 	.word	0x080294a1
 801ddf8:	08029b93 	.word	0x08029b93
 801ddfc:	080295e3 	.word	0x080295e3

0801de00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801de00:	b570      	push	{r4, r5, r6, lr}
 801de02:	9d04      	ldr	r5, [sp, #16]
 801de04:	460c      	mov	r4, r1
 801de06:	4619      	mov	r1, r3
 801de08:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801de0c:	2a0c      	cmp	r2, #12
 801de0e:	d826      	bhi.n	801de5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801de10:	e8df f002 	tbb	[pc, r2]
 801de14:	200e1407 	.word	0x200e1407
 801de18:	20202020 	.word	0x20202020
 801de1c:	20202020 	.word	0x20202020
 801de20:	20          	.byte	0x20
 801de21:	00          	.byte	0x00
 801de22:	4b0f      	ldr	r3, [pc, #60]	; (801de60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801de24:	f240 117f 	movw	r1, #383	; 0x17f
 801de28:	4a0e      	ldr	r2, [pc, #56]	; (801de64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801de2a:	480f      	ldr	r0, [pc, #60]	; (801de68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801de2c:	f006 ffc6 	bl	8024dbc <__assert_func>
 801de30:	462a      	mov	r2, r5
 801de32:	4620      	mov	r0, r4
 801de34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de38:	f7ff bea2 	b.w	801db80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801de3c:	6802      	ldr	r2, [r0, #0]
 801de3e:	2600      	movs	r6, #0
 801de40:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801de44:	6916      	ldr	r6, [r2, #16]
 801de46:	462b      	mov	r3, r5
 801de48:	460a      	mov	r2, r1
 801de4a:	4621      	mov	r1, r4
 801de4c:	46b4      	mov	ip, r6
 801de4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de52:	4760      	bx	ip
 801de54:	4b05      	ldr	r3, [pc, #20]	; (801de6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801de56:	f240 1191 	movw	r1, #401	; 0x191
 801de5a:	4a02      	ldr	r2, [pc, #8]	; (801de64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801de5c:	e7e5      	b.n	801de2a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801de5e:	bd70      	pop	{r4, r5, r6, pc}
 801de60:	080297bc 	.word	0x080297bc
 801de64:	08029e7b 	.word	0x08029e7b
 801de68:	080295e3 	.word	0x080295e3
 801de6c:	080297fd 	.word	0x080297fd

0801de70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801de70:	b158      	cbz	r0, 801de8a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801de72:	2902      	cmp	r1, #2
 801de74:	d00f      	beq.n	801de96 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801de76:	2903      	cmp	r1, #3
 801de78:	d010      	beq.n	801de9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801de7a:	2901      	cmp	r1, #1
 801de7c:	d101      	bne.n	801de82 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801de7e:	2001      	movs	r0, #1
 801de80:	4770      	bx	lr
 801de82:	4b08      	ldr	r3, [pc, #32]	; (801dea4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801de84:	8819      	ldrh	r1, [r3, #0]
 801de86:	4248      	negs	r0, r1
 801de88:	4770      	bx	lr
 801de8a:	2902      	cmp	r1, #2
 801de8c:	d006      	beq.n	801de9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801de8e:	2903      	cmp	r1, #3
 801de90:	d0f7      	beq.n	801de82 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801de92:	2901      	cmp	r1, #1
 801de94:	d1f3      	bne.n	801de7e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801de96:	4b03      	ldr	r3, [pc, #12]	; (801dea4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801de98:	8818      	ldrh	r0, [r3, #0]
 801de9a:	4770      	bx	lr
 801de9c:	f04f 30ff 	mov.w	r0, #4294967295
 801dea0:	4770      	bx	lr
 801dea2:	bf00      	nop
 801dea4:	2000bd66 	.word	0x2000bd66

0801dea8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dea8:	b170      	cbz	r0, 801dec8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801deaa:	2902      	cmp	r1, #2
 801deac:	d012      	beq.n	801ded4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801deae:	2903      	cmp	r1, #3
 801deb0:	d006      	beq.n	801dec0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801deb2:	2901      	cmp	r1, #1
 801deb4:	d001      	beq.n	801deba <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801deb6:	2001      	movs	r0, #1
 801deb8:	4770      	bx	lr
 801deba:	4b08      	ldr	r3, [pc, #32]	; (801dedc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801debc:	8818      	ldrh	r0, [r3, #0]
 801debe:	4770      	bx	lr
 801dec0:	4b06      	ldr	r3, [pc, #24]	; (801dedc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dec2:	8818      	ldrh	r0, [r3, #0]
 801dec4:	4240      	negs	r0, r0
 801dec6:	4770      	bx	lr
 801dec8:	2902      	cmp	r1, #2
 801deca:	d0f9      	beq.n	801dec0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801decc:	2903      	cmp	r1, #3
 801dece:	d0f2      	beq.n	801deb6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801ded0:	2901      	cmp	r1, #1
 801ded2:	d1f2      	bne.n	801deba <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ded4:	f04f 30ff 	mov.w	r0, #4294967295
 801ded8:	4770      	bx	lr
 801deda:	bf00      	nop
 801dedc:	2000bd66 	.word	0x2000bd66

0801dee0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee4:	b095      	sub	sp, #84	; 0x54
 801dee6:	9109      	str	r1, [sp, #36]	; 0x24
 801dee8:	a910      	add	r1, sp, #64	; 0x40
 801deea:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801deee:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801def2:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801def6:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801defa:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801defe:	e881 000c 	stmia.w	r1, {r2, r3}
 801df02:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801df06:	9306      	str	r3, [sp, #24]
 801df08:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801df0c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801df10:	930e      	str	r3, [sp, #56]	; 0x38
 801df12:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801df16:	798f      	ldrb	r7, [r1, #6]
 801df18:	930a      	str	r3, [sp, #40]	; 0x28
 801df1a:	7b4b      	ldrb	r3, [r1, #13]
 801df1c:	0158      	lsls	r0, r3, #5
 801df1e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801df22:	4338      	orrs	r0, r7
 801df24:	9008      	str	r0, [sp, #32]
 801df26:	f000 8174 	beq.w	801e212 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801df2a:	011b      	lsls	r3, r3, #4
 801df2c:	79c8      	ldrb	r0, [r1, #7]
 801df2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801df32:	4303      	orrs	r3, r0
 801df34:	9307      	str	r3, [sp, #28]
 801df36:	f000 816c 	beq.w	801e212 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801df3a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801df3e:	b29b      	uxth	r3, r3
 801df40:	2e00      	cmp	r6, #0
 801df42:	f000 8112 	beq.w	801e16a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801df46:	1af6      	subs	r6, r6, r3
 801df48:	b2b6      	uxth	r6, r6
 801df4a:	0433      	lsls	r3, r6, #16
 801df4c:	d502      	bpl.n	801df54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801df4e:	1bad      	subs	r5, r5, r6
 801df50:	2600      	movs	r6, #0
 801df52:	b22d      	sxth	r5, r5
 801df54:	f9b2 1000 	ldrsh.w	r1, [r2]
 801df58:	a810      	add	r0, sp, #64	; 0x40
 801df5a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801df5e:	428d      	cmp	r5, r1
 801df60:	b28b      	uxth	r3, r1
 801df62:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801df66:	bfbf      	itttt	lt
 801df68:	18f6      	addlt	r6, r6, r3
 801df6a:	1b75      	sublt	r5, r6, r5
 801df6c:	b2ae      	uxthlt	r6, r5
 801df6e:	460d      	movlt	r5, r1
 801df70:	8891      	ldrh	r1, [r2, #4]
 801df72:	440b      	add	r3, r1
 801df74:	4629      	mov	r1, r5
 801df76:	b21b      	sxth	r3, r3
 801df78:	930d      	str	r3, [sp, #52]	; 0x34
 801df7a:	88d3      	ldrh	r3, [r2, #6]
 801df7c:	9a06      	ldr	r2, [sp, #24]
 801df7e:	449a      	add	sl, r3
 801df80:	fa0f f38a 	sxth.w	r3, sl
 801df84:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801df88:	930c      	str	r3, [sp, #48]	; 0x30
 801df8a:	4bb8      	ldr	r3, [pc, #736]	; (801e26c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801df8c:	f893 b000 	ldrb.w	fp, [r3]
 801df90:	f10b 3cff 	add.w	ip, fp, #4294967295
 801df94:	f1dc 0300 	rsbs	r3, ip, #0
 801df98:	eb43 030c 	adc.w	r3, r3, ip
 801df9c:	930b      	str	r3, [sp, #44]	; 0x2c
 801df9e:	464b      	mov	r3, r9
 801dfa0:	f7fa fcb2 	bl	8018908 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801dfa4:	4629      	mov	r1, r5
 801dfa6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801dfaa:	464b      	mov	r3, r9
 801dfac:	9a06      	ldr	r2, [sp, #24]
 801dfae:	a810      	add	r0, sp, #64	; 0x40
 801dfb0:	f7fa fcc2 	bl	8018938 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801dfb4:	a914      	add	r1, sp, #80	; 0x50
 801dfb6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801dfba:	a813      	add	r0, sp, #76	; 0x4c
 801dfbc:	f7fa fd9c 	bl	8018af8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801dfc0:	f1b9 0f00 	cmp.w	r9, #0
 801dfc4:	f040 80d4 	bne.w	801e170 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801dfc8:	f1bb 0f01 	cmp.w	fp, #1
 801dfcc:	f040 80d8 	bne.w	801e180 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801dfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	f040 8122 	bne.w	801e21c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801dfd8:	4ba5      	ldr	r3, [pc, #660]	; (801e270 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801dfda:	6818      	ldr	r0, [r3, #0]
 801dfdc:	6803      	ldr	r3, [r0, #0]
 801dfde:	6a1b      	ldr	r3, [r3, #32]
 801dfe0:	4798      	blx	r3
 801dfe2:	4aa4      	ldr	r2, [pc, #656]	; (801e274 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801dfe4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801dfe8:	8811      	ldrh	r1, [r2, #0]
 801dfea:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801dfee:	fb01 2303 	mla	r3, r1, r3, r2
 801dff2:	2201      	movs	r2, #1
 801dff4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dff8:	4590      	cmp	r8, r2
 801dffa:	4403      	add	r3, r0
 801dffc:	9307      	str	r3, [sp, #28]
 801dffe:	fa02 f308 	lsl.w	r3, r2, r8
 801e002:	f103 33ff 	add.w	r3, r3, #4294967295
 801e006:	b2db      	uxtb	r3, r3
 801e008:	930f      	str	r3, [sp, #60]	; 0x3c
 801e00a:	f000 8109 	beq.w	801e220 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801e00e:	f1b8 0f02 	cmp.w	r8, #2
 801e012:	f000 813e 	beq.w	801e292 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801e016:	f1b8 0f04 	cmp.w	r8, #4
 801e01a:	f000 8132 	beq.w	801e282 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801e01e:	b906      	cbnz	r6, 801e022 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801e020:	b174      	cbz	r4, 801e040 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801e022:	fb17 6304 	smlabb	r3, r7, r4, r6
 801e026:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e028:	ebaa 0a04 	sub.w	sl, sl, r4
 801e02c:	fb13 f308 	smulbb	r3, r3, r8
 801e030:	fa1f fa8a 	uxth.w	sl, sl
 801e034:	b29b      	uxth	r3, r3
 801e036:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801e03a:	f003 0407 	and.w	r4, r3, #7
 801e03e:	9124      	str	r1, [sp, #144]	; 0x90
 801e040:	4649      	mov	r1, r9
 801e042:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e044:	f7ff ff14 	bl	801de70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e048:	4649      	mov	r1, r9
 801e04a:	4683      	mov	fp, r0
 801e04c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e04e:	f7ff ff2b 	bl	801dea8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e052:	9906      	ldr	r1, [sp, #24]
 801e054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e056:	1bad      	subs	r5, r5, r6
 801e058:	1a5b      	subs	r3, r3, r1
 801e05a:	459a      	cmp	sl, r3
 801e05c:	bfa8      	it	ge
 801e05e:	469a      	movge	sl, r3
 801e060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e062:	1b5d      	subs	r5, r3, r5
 801e064:	9b08      	ldr	r3, [sp, #32]
 801e066:	429d      	cmp	r5, r3
 801e068:	bfd4      	ite	le
 801e06a:	ebc6 0605 	rsble	r6, r6, r5
 801e06e:	ebc6 0603 	rsbgt	r6, r6, r3
 801e072:	1bbf      	subs	r7, r7, r6
 801e074:	fb0b 0016 	mls	r0, fp, r6, r0
 801e078:	fb08 f307 	mul.w	r3, r8, r7
 801e07c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e080:	9308      	str	r3, [sp, #32]
 801e082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e084:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e088:	930b      	str	r3, [sp, #44]	; 0x2c
 801e08a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e08c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e090:	930c      	str	r3, [sp, #48]	; 0x30
 801e092:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e094:	b2db      	uxtb	r3, r3
 801e096:	930d      	str	r3, [sp, #52]	; 0x34
 801e098:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e09a:	7819      	ldrb	r1, [r3, #0]
 801e09c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e0a0:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801e0a4:	4121      	asrs	r1, r4
 801e0a6:	9306      	str	r3, [sp, #24]
 801e0a8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801e0ac:	b2c9      	uxtb	r1, r1
 801e0ae:	f1ba 0f00 	cmp.w	sl, #0
 801e0b2:	f340 80d1 	ble.w	801e258 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e0b6:	46b6      	mov	lr, r6
 801e0b8:	9807      	ldr	r0, [sp, #28]
 801e0ba:	f1be 0f00 	cmp.w	lr, #0
 801e0be:	f340 80b8 	ble.w	801e232 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e0c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e0c4:	400b      	ands	r3, r1
 801e0c6:	d03e      	beq.n	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e0c8:	fb13 f302 	smulbb	r3, r3, r2
 801e0cc:	2bfe      	cmp	r3, #254	; 0xfe
 801e0ce:	dd03      	ble.n	801e0d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801e0d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e0d2:	2dff      	cmp	r5, #255	; 0xff
 801e0d4:	f000 80a6 	beq.w	801e224 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e0d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e0da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e0dc:	fb15 f303 	smulbb	r3, r5, r3
 801e0e0:	b29b      	uxth	r3, r3
 801e0e2:	1c5d      	adds	r5, r3, #1
 801e0e4:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e0e8:	7805      	ldrb	r5, [r0, #0]
 801e0ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e0ee:	fa1f fc83 	uxth.w	ip, r3
 801e0f2:	43db      	mvns	r3, r3
 801e0f4:	fb17 f90c 	smulbb	r9, r7, ip
 801e0f8:	b2db      	uxtb	r3, r3
 801e0fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e0fc:	fb05 9503 	mla	r5, r5, r3, r9
 801e100:	b2ad      	uxth	r5, r5
 801e102:	f105 0901 	add.w	r9, r5, #1
 801e106:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e10a:	fb17 f90c 	smulbb	r9, r7, ip
 801e10e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e110:	122d      	asrs	r5, r5, #8
 801e112:	fb17 fc0c 	smulbb	ip, r7, ip
 801e116:	7005      	strb	r5, [r0, #0]
 801e118:	7845      	ldrb	r5, [r0, #1]
 801e11a:	fb05 9503 	mla	r5, r5, r3, r9
 801e11e:	b2ad      	uxth	r5, r5
 801e120:	f105 0901 	add.w	r9, r5, #1
 801e124:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e128:	122d      	asrs	r5, r5, #8
 801e12a:	7045      	strb	r5, [r0, #1]
 801e12c:	7885      	ldrb	r5, [r0, #2]
 801e12e:	fb05 cc03 	mla	ip, r5, r3, ip
 801e132:	fa1f fc8c 	uxth.w	ip, ip
 801e136:	f10c 0301 	add.w	r3, ip, #1
 801e13a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e13e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e142:	f880 c002 	strb.w	ip, [r0, #2]
 801e146:	4444      	add	r4, r8
 801e148:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e14c:	b2a4      	uxth	r4, r4
 801e14e:	2c07      	cmp	r4, #7
 801e150:	bf89      	itett	hi
 801e152:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801e154:	fa41 f108 	asrls.w	r1, r1, r8
 801e158:	2400      	movhi	r4, #0
 801e15a:	7859      	ldrbhi	r1, [r3, #1]
 801e15c:	bf8a      	itet	hi
 801e15e:	3301      	addhi	r3, #1
 801e160:	b2c9      	uxtbls	r1, r1
 801e162:	9324      	strhi	r3, [sp, #144]	; 0x90
 801e164:	9b06      	ldr	r3, [sp, #24]
 801e166:	4418      	add	r0, r3
 801e168:	e7a7      	b.n	801e0ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801e16a:	441d      	add	r5, r3
 801e16c:	b22d      	sxth	r5, r5
 801e16e:	e6f1      	b.n	801df54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e170:	f1b9 0f01 	cmp.w	r9, #1
 801e174:	f47f af2c 	bne.w	801dfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e178:	f1bb 0f01 	cmp.w	fp, #1
 801e17c:	f47f af28 	bne.w	801dfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e180:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801e270 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e184:	f8db 0000 	ldr.w	r0, [fp]
 801e188:	6803      	ldr	r3, [r0, #0]
 801e18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e18c:	4798      	blx	r3
 801e18e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e192:	465a      	mov	r2, fp
 801e194:	d006      	beq.n	801e1a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e196:	f1b8 0f04 	cmp.w	r8, #4
 801e19a:	d13d      	bne.n	801e218 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801e19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e19e:	3300      	adds	r3, #0
 801e1a0:	bf18      	it	ne
 801e1a2:	2301      	movne	r3, #1
 801e1a4:	05c0      	lsls	r0, r0, #23
 801e1a6:	d567      	bpl.n	801e278 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e1a8:	f1b8 0f08 	cmp.w	r8, #8
 801e1ac:	d164      	bne.n	801e278 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	bf0c      	ite	eq
 801e1b2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e1b6:	2180      	movne	r1, #128	; 0x80
 801e1b8:	2e00      	cmp	r6, #0
 801e1ba:	f47f af09 	bne.w	801dfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e1be:	2c00      	cmp	r4, #0
 801e1c0:	f47f af06 	bne.w	801dfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e1c4:	9b08      	ldr	r3, [sp, #32]
 801e1c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e1c8:	442b      	add	r3, r5
 801e1ca:	4283      	cmp	r3, r0
 801e1cc:	f73f af00 	bgt.w	801dfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e1d0:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801e1d4:	4403      	add	r3, r0
 801e1d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e1d8:	4283      	cmp	r3, r0
 801e1da:	f73f aef9 	bgt.w	801dfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e1de:	f1b8 0f08 	cmp.w	r8, #8
 801e1e2:	6810      	ldr	r0, [r2, #0]
 801e1e4:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e1e8:	bf18      	it	ne
 801e1ea:	3701      	addne	r7, #1
 801e1ec:	6804      	ldr	r4, [r0, #0]
 801e1ee:	9105      	str	r1, [sp, #20]
 801e1f0:	bf18      	it	ne
 801e1f2:	f027 0701 	bicne.w	r7, r7, #1
 801e1f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e1f8:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e1fc:	bf18      	it	ne
 801e1fe:	b2bf      	uxthne	r7, r7
 801e200:	9104      	str	r1, [sp, #16]
 801e202:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e204:	e9cd 7a00 	strd	r7, sl, [sp]
 801e208:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e20c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e20e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e210:	47a0      	blx	r4
 801e212:	b015      	add	sp, #84	; 0x54
 801e214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e218:	2300      	movs	r3, #0
 801e21a:	e7c3      	b.n	801e1a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e21c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e21e:	e6e0      	b.n	801dfe2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e220:	22ff      	movs	r2, #255	; 0xff
 801e222:	e6fc      	b.n	801e01e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e226:	7003      	strb	r3, [r0, #0]
 801e228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e22a:	7043      	strb	r3, [r0, #1]
 801e22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e22e:	7083      	strb	r3, [r0, #2]
 801e230:	e789      	b.n	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e232:	9b08      	ldr	r3, [sp, #32]
 801e234:	b153      	cbz	r3, 801e24c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e236:	441c      	add	r4, r3
 801e238:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e23a:	b2a4      	uxth	r4, r4
 801e23c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e240:	f004 0407 	and.w	r4, r4, #7
 801e244:	7819      	ldrb	r1, [r3, #0]
 801e246:	9324      	str	r3, [sp, #144]	; 0x90
 801e248:	4121      	asrs	r1, r4
 801e24a:	b2c9      	uxtb	r1, r1
 801e24c:	9b07      	ldr	r3, [sp, #28]
 801e24e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e252:	445b      	add	r3, fp
 801e254:	9307      	str	r3, [sp, #28]
 801e256:	e72a      	b.n	801e0ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801e258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d1d9      	bne.n	801e212 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e25e:	4b04      	ldr	r3, [pc, #16]	; (801e270 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e260:	6818      	ldr	r0, [r3, #0]
 801e262:	6803      	ldr	r3, [r0, #0]
 801e264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e266:	4798      	blx	r3
 801e268:	e7d3      	b.n	801e212 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e26a:	bf00      	nop
 801e26c:	2000bd64 	.word	0x2000bd64
 801e270:	2000bd6c 	.word	0x2000bd6c
 801e274:	2000bd66 	.word	0x2000bd66
 801e278:	2b00      	cmp	r3, #0
 801e27a:	f43f aea9 	beq.w	801dfd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e27e:	2180      	movs	r1, #128	; 0x80
 801e280:	e79a      	b.n	801e1b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801e282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e284:	b11b      	cbz	r3, 801e28e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e286:	07fb      	lsls	r3, r7, #31
 801e288:	d501      	bpl.n	801e28e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e28a:	3701      	adds	r7, #1
 801e28c:	b2bf      	uxth	r7, r7
 801e28e:	2211      	movs	r2, #17
 801e290:	e6c5      	b.n	801e01e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e292:	2255      	movs	r2, #85	; 0x55
 801e294:	e6c3      	b.n	801e01e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e296:	bf00      	nop

0801e298 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e298:	b538      	push	{r3, r4, r5, lr}
 801e29a:	4c15      	ldr	r4, [pc, #84]	; (801e2f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e29c:	4605      	mov	r5, r0
 801e29e:	7823      	ldrb	r3, [r4, #0]
 801e2a0:	f3bf 8f5b 	dmb	ish
 801e2a4:	07da      	lsls	r2, r3, #31
 801e2a6:	d40b      	bmi.n	801e2c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e2a8:	4620      	mov	r0, r4
 801e2aa:	f006 fd5e 	bl	8024d6a <__cxa_guard_acquire>
 801e2ae:	b138      	cbz	r0, 801e2c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e2b0:	4620      	mov	r0, r4
 801e2b2:	f006 fd66 	bl	8024d82 <__cxa_guard_release>
 801e2b6:	4a0f      	ldr	r2, [pc, #60]	; (801e2f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e2b8:	490f      	ldr	r1, [pc, #60]	; (801e2f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e2ba:	4810      	ldr	r0, [pc, #64]	; (801e2fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e2bc:	f006 fd4b 	bl	8024d56 <__aeabi_atexit>
 801e2c0:	4c0f      	ldr	r4, [pc, #60]	; (801e300 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e2c2:	7823      	ldrb	r3, [r4, #0]
 801e2c4:	f3bf 8f5b 	dmb	ish
 801e2c8:	07db      	lsls	r3, r3, #31
 801e2ca:	d40b      	bmi.n	801e2e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e2cc:	4620      	mov	r0, r4
 801e2ce:	f006 fd4c 	bl	8024d6a <__cxa_guard_acquire>
 801e2d2:	b138      	cbz	r0, 801e2e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e2d4:	4620      	mov	r0, r4
 801e2d6:	f006 fd54 	bl	8024d82 <__cxa_guard_release>
 801e2da:	4a06      	ldr	r2, [pc, #24]	; (801e2f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e2dc:	4909      	ldr	r1, [pc, #36]	; (801e304 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e2de:	480a      	ldr	r0, [pc, #40]	; (801e308 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e2e0:	f006 fd39 	bl	8024d56 <__aeabi_atexit>
 801e2e4:	4b05      	ldr	r3, [pc, #20]	; (801e2fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e2e6:	612b      	str	r3, [r5, #16]
 801e2e8:	4b07      	ldr	r3, [pc, #28]	; (801e308 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e2ea:	616b      	str	r3, [r5, #20]
 801e2ec:	bd38      	pop	{r3, r4, r5, pc}
 801e2ee:	bf00      	nop
 801e2f0:	2000be78 	.word	0x2000be78
 801e2f4:	20000000 	.word	0x20000000
 801e2f8:	0801cecf 	.word	0x0801cecf
 801e2fc:	2000009c 	.word	0x2000009c
 801e300:	2000be7c 	.word	0x2000be7c
 801e304:	0801cecd 	.word	0x0801cecd
 801e308:	200000a0 	.word	0x200000a0

0801e30c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e30c:	b538      	push	{r3, r4, r5, lr}
 801e30e:	4c15      	ldr	r4, [pc, #84]	; (801e364 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e310:	4605      	mov	r5, r0
 801e312:	7823      	ldrb	r3, [r4, #0]
 801e314:	f3bf 8f5b 	dmb	ish
 801e318:	07da      	lsls	r2, r3, #31
 801e31a:	d40b      	bmi.n	801e334 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e31c:	4620      	mov	r0, r4
 801e31e:	f006 fd24 	bl	8024d6a <__cxa_guard_acquire>
 801e322:	b138      	cbz	r0, 801e334 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e324:	4620      	mov	r0, r4
 801e326:	f006 fd2c 	bl	8024d82 <__cxa_guard_release>
 801e32a:	4a0f      	ldr	r2, [pc, #60]	; (801e368 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e32c:	490f      	ldr	r1, [pc, #60]	; (801e36c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e32e:	4810      	ldr	r0, [pc, #64]	; (801e370 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e330:	f006 fd11 	bl	8024d56 <__aeabi_atexit>
 801e334:	4c0f      	ldr	r4, [pc, #60]	; (801e374 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e336:	7823      	ldrb	r3, [r4, #0]
 801e338:	f3bf 8f5b 	dmb	ish
 801e33c:	07db      	lsls	r3, r3, #31
 801e33e:	d40b      	bmi.n	801e358 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e340:	4620      	mov	r0, r4
 801e342:	f006 fd12 	bl	8024d6a <__cxa_guard_acquire>
 801e346:	b138      	cbz	r0, 801e358 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e348:	4620      	mov	r0, r4
 801e34a:	f006 fd1a 	bl	8024d82 <__cxa_guard_release>
 801e34e:	4a06      	ldr	r2, [pc, #24]	; (801e368 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e350:	4909      	ldr	r1, [pc, #36]	; (801e378 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e352:	480a      	ldr	r0, [pc, #40]	; (801e37c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e354:	f006 fcff 	bl	8024d56 <__aeabi_atexit>
 801e358:	4b05      	ldr	r3, [pc, #20]	; (801e370 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e35a:	60ab      	str	r3, [r5, #8]
 801e35c:	4b07      	ldr	r3, [pc, #28]	; (801e37c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e35e:	60eb      	str	r3, [r5, #12]
 801e360:	bd38      	pop	{r3, r4, r5, pc}
 801e362:	bf00      	nop
 801e364:	2000be58 	.word	0x2000be58
 801e368:	20000000 	.word	0x20000000
 801e36c:	0801ced3 	.word	0x0801ced3
 801e370:	2000007c 	.word	0x2000007c
 801e374:	2000be5c 	.word	0x2000be5c
 801e378:	0801ced1 	.word	0x0801ced1
 801e37c:	20000080 	.word	0x20000080

0801e380 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e380:	b510      	push	{r4, lr}
 801e382:	4604      	mov	r4, r0
 801e384:	f7ff ff88 	bl	801e298 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e388:	4620      	mov	r0, r4
 801e38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e38e:	f7ff bfbd 	b.w	801e30c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e394 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e394:	b538      	push	{r3, r4, r5, lr}
 801e396:	4c15      	ldr	r4, [pc, #84]	; (801e3ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e398:	4605      	mov	r5, r0
 801e39a:	7823      	ldrb	r3, [r4, #0]
 801e39c:	f3bf 8f5b 	dmb	ish
 801e3a0:	07da      	lsls	r2, r3, #31
 801e3a2:	d40b      	bmi.n	801e3bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f006 fce0 	bl	8024d6a <__cxa_guard_acquire>
 801e3aa:	b138      	cbz	r0, 801e3bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e3ac:	4620      	mov	r0, r4
 801e3ae:	f006 fce8 	bl	8024d82 <__cxa_guard_release>
 801e3b2:	4a0f      	ldr	r2, [pc, #60]	; (801e3f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e3b4:	490f      	ldr	r1, [pc, #60]	; (801e3f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e3b6:	4810      	ldr	r0, [pc, #64]	; (801e3f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e3b8:	f006 fccd 	bl	8024d56 <__aeabi_atexit>
 801e3bc:	4c0f      	ldr	r4, [pc, #60]	; (801e3fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e3be:	7823      	ldrb	r3, [r4, #0]
 801e3c0:	f3bf 8f5b 	dmb	ish
 801e3c4:	07db      	lsls	r3, r3, #31
 801e3c6:	d40b      	bmi.n	801e3e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e3c8:	4620      	mov	r0, r4
 801e3ca:	f006 fcce 	bl	8024d6a <__cxa_guard_acquire>
 801e3ce:	b138      	cbz	r0, 801e3e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	f006 fcd6 	bl	8024d82 <__cxa_guard_release>
 801e3d6:	4a06      	ldr	r2, [pc, #24]	; (801e3f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e3d8:	4909      	ldr	r1, [pc, #36]	; (801e400 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e3da:	480a      	ldr	r0, [pc, #40]	; (801e404 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e3dc:	f006 fcbb 	bl	8024d56 <__aeabi_atexit>
 801e3e0:	4b05      	ldr	r3, [pc, #20]	; (801e3f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e3e2:	622b      	str	r3, [r5, #32]
 801e3e4:	4b07      	ldr	r3, [pc, #28]	; (801e404 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e3e6:	626b      	str	r3, [r5, #36]	; 0x24
 801e3e8:	bd38      	pop	{r3, r4, r5, pc}
 801e3ea:	bf00      	nop
 801e3ec:	2000be80 	.word	0x2000be80
 801e3f0:	20000000 	.word	0x20000000
 801e3f4:	0801cec7 	.word	0x0801cec7
 801e3f8:	200000a4 	.word	0x200000a4
 801e3fc:	2000be84 	.word	0x2000be84
 801e400:	0801cec5 	.word	0x0801cec5
 801e404:	200000a8 	.word	0x200000a8

0801e408 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e408:	b538      	push	{r3, r4, r5, lr}
 801e40a:	4c15      	ldr	r4, [pc, #84]	; (801e460 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e40c:	4605      	mov	r5, r0
 801e40e:	7823      	ldrb	r3, [r4, #0]
 801e410:	f3bf 8f5b 	dmb	ish
 801e414:	07da      	lsls	r2, r3, #31
 801e416:	d40b      	bmi.n	801e430 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e418:	4620      	mov	r0, r4
 801e41a:	f006 fca6 	bl	8024d6a <__cxa_guard_acquire>
 801e41e:	b138      	cbz	r0, 801e430 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e420:	4620      	mov	r0, r4
 801e422:	f006 fcae 	bl	8024d82 <__cxa_guard_release>
 801e426:	4a0f      	ldr	r2, [pc, #60]	; (801e464 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e428:	490f      	ldr	r1, [pc, #60]	; (801e468 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e42a:	4810      	ldr	r0, [pc, #64]	; (801e46c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e42c:	f006 fc93 	bl	8024d56 <__aeabi_atexit>
 801e430:	4c0f      	ldr	r4, [pc, #60]	; (801e470 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e432:	7823      	ldrb	r3, [r4, #0]
 801e434:	f3bf 8f5b 	dmb	ish
 801e438:	07db      	lsls	r3, r3, #31
 801e43a:	d40b      	bmi.n	801e454 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e43c:	4620      	mov	r0, r4
 801e43e:	f006 fc94 	bl	8024d6a <__cxa_guard_acquire>
 801e442:	b138      	cbz	r0, 801e454 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e444:	4620      	mov	r0, r4
 801e446:	f006 fc9c 	bl	8024d82 <__cxa_guard_release>
 801e44a:	4a06      	ldr	r2, [pc, #24]	; (801e464 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e44c:	4909      	ldr	r1, [pc, #36]	; (801e474 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e44e:	480a      	ldr	r0, [pc, #40]	; (801e478 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e450:	f006 fc81 	bl	8024d56 <__aeabi_atexit>
 801e454:	4b05      	ldr	r3, [pc, #20]	; (801e46c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e456:	61ab      	str	r3, [r5, #24]
 801e458:	4b07      	ldr	r3, [pc, #28]	; (801e478 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e45a:	61eb      	str	r3, [r5, #28]
 801e45c:	bd38      	pop	{r3, r4, r5, pc}
 801e45e:	bf00      	nop
 801e460:	2000be60 	.word	0x2000be60
 801e464:	20000000 	.word	0x20000000
 801e468:	0801cecb 	.word	0x0801cecb
 801e46c:	20000084 	.word	0x20000084
 801e470:	2000be64 	.word	0x2000be64
 801e474:	0801cec9 	.word	0x0801cec9
 801e478:	20000088 	.word	0x20000088

0801e47c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e47c:	b510      	push	{r4, lr}
 801e47e:	4604      	mov	r4, r0
 801e480:	f7ff ff88 	bl	801e394 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e484:	4620      	mov	r0, r4
 801e486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e48a:	f7ff bfbd 	b.w	801e408 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e490 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e490:	b538      	push	{r3, r4, r5, lr}
 801e492:	4c15      	ldr	r4, [pc, #84]	; (801e4e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e494:	4605      	mov	r5, r0
 801e496:	7823      	ldrb	r3, [r4, #0]
 801e498:	f3bf 8f5b 	dmb	ish
 801e49c:	07da      	lsls	r2, r3, #31
 801e49e:	d40b      	bmi.n	801e4b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e4a0:	4620      	mov	r0, r4
 801e4a2:	f006 fc62 	bl	8024d6a <__cxa_guard_acquire>
 801e4a6:	b138      	cbz	r0, 801e4b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e4a8:	4620      	mov	r0, r4
 801e4aa:	f006 fc6a 	bl	8024d82 <__cxa_guard_release>
 801e4ae:	4a0f      	ldr	r2, [pc, #60]	; (801e4ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e4b0:	490f      	ldr	r1, [pc, #60]	; (801e4f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e4b2:	4810      	ldr	r0, [pc, #64]	; (801e4f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e4b4:	f006 fc4f 	bl	8024d56 <__aeabi_atexit>
 801e4b8:	4c0f      	ldr	r4, [pc, #60]	; (801e4f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e4ba:	7823      	ldrb	r3, [r4, #0]
 801e4bc:	f3bf 8f5b 	dmb	ish
 801e4c0:	07db      	lsls	r3, r3, #31
 801e4c2:	d40b      	bmi.n	801e4dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e4c4:	4620      	mov	r0, r4
 801e4c6:	f006 fc50 	bl	8024d6a <__cxa_guard_acquire>
 801e4ca:	b138      	cbz	r0, 801e4dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e4cc:	4620      	mov	r0, r4
 801e4ce:	f006 fc58 	bl	8024d82 <__cxa_guard_release>
 801e4d2:	4a06      	ldr	r2, [pc, #24]	; (801e4ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e4d4:	4909      	ldr	r1, [pc, #36]	; (801e4fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e4d6:	480a      	ldr	r0, [pc, #40]	; (801e500 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e4d8:	f006 fc3d 	bl	8024d56 <__aeabi_atexit>
 801e4dc:	4b05      	ldr	r3, [pc, #20]	; (801e4f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e4de:	632b      	str	r3, [r5, #48]	; 0x30
 801e4e0:	4b07      	ldr	r3, [pc, #28]	; (801e500 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e4e2:	636b      	str	r3, [r5, #52]	; 0x34
 801e4e4:	bd38      	pop	{r3, r4, r5, pc}
 801e4e6:	bf00      	nop
 801e4e8:	2000be68 	.word	0x2000be68
 801e4ec:	20000000 	.word	0x20000000
 801e4f0:	0801cebf 	.word	0x0801cebf
 801e4f4:	2000008c 	.word	0x2000008c
 801e4f8:	2000be6c 	.word	0x2000be6c
 801e4fc:	0801cebd 	.word	0x0801cebd
 801e500:	20000090 	.word	0x20000090

0801e504 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e504:	b538      	push	{r3, r4, r5, lr}
 801e506:	4c15      	ldr	r4, [pc, #84]	; (801e55c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e508:	4605      	mov	r5, r0
 801e50a:	7823      	ldrb	r3, [r4, #0]
 801e50c:	f3bf 8f5b 	dmb	ish
 801e510:	07da      	lsls	r2, r3, #31
 801e512:	d40b      	bmi.n	801e52c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e514:	4620      	mov	r0, r4
 801e516:	f006 fc28 	bl	8024d6a <__cxa_guard_acquire>
 801e51a:	b138      	cbz	r0, 801e52c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e51c:	4620      	mov	r0, r4
 801e51e:	f006 fc30 	bl	8024d82 <__cxa_guard_release>
 801e522:	4a0f      	ldr	r2, [pc, #60]	; (801e560 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e524:	490f      	ldr	r1, [pc, #60]	; (801e564 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e526:	4810      	ldr	r0, [pc, #64]	; (801e568 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e528:	f006 fc15 	bl	8024d56 <__aeabi_atexit>
 801e52c:	4c0f      	ldr	r4, [pc, #60]	; (801e56c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e52e:	7823      	ldrb	r3, [r4, #0]
 801e530:	f3bf 8f5b 	dmb	ish
 801e534:	07db      	lsls	r3, r3, #31
 801e536:	d40b      	bmi.n	801e550 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e538:	4620      	mov	r0, r4
 801e53a:	f006 fc16 	bl	8024d6a <__cxa_guard_acquire>
 801e53e:	b138      	cbz	r0, 801e550 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e540:	4620      	mov	r0, r4
 801e542:	f006 fc1e 	bl	8024d82 <__cxa_guard_release>
 801e546:	4a06      	ldr	r2, [pc, #24]	; (801e560 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e548:	4909      	ldr	r1, [pc, #36]	; (801e570 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e54a:	480a      	ldr	r0, [pc, #40]	; (801e574 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e54c:	f006 fc03 	bl	8024d56 <__aeabi_atexit>
 801e550:	4b05      	ldr	r3, [pc, #20]	; (801e568 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e552:	62ab      	str	r3, [r5, #40]	; 0x28
 801e554:	4b07      	ldr	r3, [pc, #28]	; (801e574 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e556:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e558:	bd38      	pop	{r3, r4, r5, pc}
 801e55a:	bf00      	nop
 801e55c:	2000be40 	.word	0x2000be40
 801e560:	20000000 	.word	0x20000000
 801e564:	0801cec3 	.word	0x0801cec3
 801e568:	20000064 	.word	0x20000064
 801e56c:	2000be44 	.word	0x2000be44
 801e570:	0801cec1 	.word	0x0801cec1
 801e574:	20000068 	.word	0x20000068

0801e578 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e578:	b510      	push	{r4, lr}
 801e57a:	4604      	mov	r4, r0
 801e57c:	f7ff ff88 	bl	801e490 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e580:	4620      	mov	r0, r4
 801e582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e586:	f7ff bfbd 	b.w	801e504 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e58c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e58c:	b538      	push	{r3, r4, r5, lr}
 801e58e:	4c15      	ldr	r4, [pc, #84]	; (801e5e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e590:	4605      	mov	r5, r0
 801e592:	7823      	ldrb	r3, [r4, #0]
 801e594:	f3bf 8f5b 	dmb	ish
 801e598:	07da      	lsls	r2, r3, #31
 801e59a:	d40b      	bmi.n	801e5b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e59c:	4620      	mov	r0, r4
 801e59e:	f006 fbe4 	bl	8024d6a <__cxa_guard_acquire>
 801e5a2:	b138      	cbz	r0, 801e5b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e5a4:	4620      	mov	r0, r4
 801e5a6:	f006 fbec 	bl	8024d82 <__cxa_guard_release>
 801e5aa:	4a0f      	ldr	r2, [pc, #60]	; (801e5e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e5ac:	490f      	ldr	r1, [pc, #60]	; (801e5ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e5ae:	4810      	ldr	r0, [pc, #64]	; (801e5f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e5b0:	f006 fbd1 	bl	8024d56 <__aeabi_atexit>
 801e5b4:	4c0f      	ldr	r4, [pc, #60]	; (801e5f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e5b6:	7823      	ldrb	r3, [r4, #0]
 801e5b8:	f3bf 8f5b 	dmb	ish
 801e5bc:	07db      	lsls	r3, r3, #31
 801e5be:	d40b      	bmi.n	801e5d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	f006 fbd2 	bl	8024d6a <__cxa_guard_acquire>
 801e5c6:	b138      	cbz	r0, 801e5d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	f006 fbda 	bl	8024d82 <__cxa_guard_release>
 801e5ce:	4a06      	ldr	r2, [pc, #24]	; (801e5e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e5d0:	4909      	ldr	r1, [pc, #36]	; (801e5f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e5d2:	480a      	ldr	r0, [pc, #40]	; (801e5fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e5d4:	f006 fbbf 	bl	8024d56 <__aeabi_atexit>
 801e5d8:	4b05      	ldr	r3, [pc, #20]	; (801e5f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e5da:	642b      	str	r3, [r5, #64]	; 0x40
 801e5dc:	4b07      	ldr	r3, [pc, #28]	; (801e5fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e5de:	646b      	str	r3, [r5, #68]	; 0x44
 801e5e0:	bd38      	pop	{r3, r4, r5, pc}
 801e5e2:	bf00      	nop
 801e5e4:	2000be70 	.word	0x2000be70
 801e5e8:	20000000 	.word	0x20000000
 801e5ec:	0801ceb7 	.word	0x0801ceb7
 801e5f0:	20000094 	.word	0x20000094
 801e5f4:	2000be74 	.word	0x2000be74
 801e5f8:	0801ceb5 	.word	0x0801ceb5
 801e5fc:	20000098 	.word	0x20000098

0801e600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e600:	b538      	push	{r3, r4, r5, lr}
 801e602:	4c15      	ldr	r4, [pc, #84]	; (801e658 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e604:	4605      	mov	r5, r0
 801e606:	7823      	ldrb	r3, [r4, #0]
 801e608:	f3bf 8f5b 	dmb	ish
 801e60c:	07da      	lsls	r2, r3, #31
 801e60e:	d40b      	bmi.n	801e628 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e610:	4620      	mov	r0, r4
 801e612:	f006 fbaa 	bl	8024d6a <__cxa_guard_acquire>
 801e616:	b138      	cbz	r0, 801e628 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e618:	4620      	mov	r0, r4
 801e61a:	f006 fbb2 	bl	8024d82 <__cxa_guard_release>
 801e61e:	4a0f      	ldr	r2, [pc, #60]	; (801e65c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e620:	490f      	ldr	r1, [pc, #60]	; (801e660 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e622:	4810      	ldr	r0, [pc, #64]	; (801e664 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e624:	f006 fb97 	bl	8024d56 <__aeabi_atexit>
 801e628:	4c0f      	ldr	r4, [pc, #60]	; (801e668 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e62a:	7823      	ldrb	r3, [r4, #0]
 801e62c:	f3bf 8f5b 	dmb	ish
 801e630:	07db      	lsls	r3, r3, #31
 801e632:	d40b      	bmi.n	801e64c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e634:	4620      	mov	r0, r4
 801e636:	f006 fb98 	bl	8024d6a <__cxa_guard_acquire>
 801e63a:	b138      	cbz	r0, 801e64c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e63c:	4620      	mov	r0, r4
 801e63e:	f006 fba0 	bl	8024d82 <__cxa_guard_release>
 801e642:	4a06      	ldr	r2, [pc, #24]	; (801e65c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e644:	4909      	ldr	r1, [pc, #36]	; (801e66c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e646:	480a      	ldr	r0, [pc, #40]	; (801e670 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e648:	f006 fb85 	bl	8024d56 <__aeabi_atexit>
 801e64c:	4b05      	ldr	r3, [pc, #20]	; (801e664 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e64e:	63ab      	str	r3, [r5, #56]	; 0x38
 801e650:	4b07      	ldr	r3, [pc, #28]	; (801e670 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e652:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e654:	bd38      	pop	{r3, r4, r5, pc}
 801e656:	bf00      	nop
 801e658:	2000be50 	.word	0x2000be50
 801e65c:	20000000 	.word	0x20000000
 801e660:	0801cebb 	.word	0x0801cebb
 801e664:	20000074 	.word	0x20000074
 801e668:	2000be54 	.word	0x2000be54
 801e66c:	0801ceb9 	.word	0x0801ceb9
 801e670:	20000078 	.word	0x20000078

0801e674 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e674:	b510      	push	{r4, lr}
 801e676:	4604      	mov	r4, r0
 801e678:	f7ff ff88 	bl	801e58c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e67c:	4620      	mov	r0, r4
 801e67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e682:	f7ff bfbd 	b.w	801e600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e688:	b538      	push	{r3, r4, r5, lr}
 801e68a:	4c15      	ldr	r4, [pc, #84]	; (801e6e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e68c:	4605      	mov	r5, r0
 801e68e:	7823      	ldrb	r3, [r4, #0]
 801e690:	f3bf 8f5b 	dmb	ish
 801e694:	07da      	lsls	r2, r3, #31
 801e696:	d40b      	bmi.n	801e6b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e698:	4620      	mov	r0, r4
 801e69a:	f006 fb66 	bl	8024d6a <__cxa_guard_acquire>
 801e69e:	b138      	cbz	r0, 801e6b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e6a0:	4620      	mov	r0, r4
 801e6a2:	f006 fb6e 	bl	8024d82 <__cxa_guard_release>
 801e6a6:	4a0f      	ldr	r2, [pc, #60]	; (801e6e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e6a8:	490f      	ldr	r1, [pc, #60]	; (801e6e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e6aa:	4810      	ldr	r0, [pc, #64]	; (801e6ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e6ac:	f006 fb53 	bl	8024d56 <__aeabi_atexit>
 801e6b0:	4c0f      	ldr	r4, [pc, #60]	; (801e6f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e6b2:	7823      	ldrb	r3, [r4, #0]
 801e6b4:	f3bf 8f5b 	dmb	ish
 801e6b8:	07db      	lsls	r3, r3, #31
 801e6ba:	d40b      	bmi.n	801e6d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e6bc:	4620      	mov	r0, r4
 801e6be:	f006 fb54 	bl	8024d6a <__cxa_guard_acquire>
 801e6c2:	b138      	cbz	r0, 801e6d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e6c4:	4620      	mov	r0, r4
 801e6c6:	f006 fb5c 	bl	8024d82 <__cxa_guard_release>
 801e6ca:	4a06      	ldr	r2, [pc, #24]	; (801e6e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e6cc:	4909      	ldr	r1, [pc, #36]	; (801e6f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e6ce:	480a      	ldr	r0, [pc, #40]	; (801e6f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e6d0:	f006 fb41 	bl	8024d56 <__aeabi_atexit>
 801e6d4:	4b05      	ldr	r3, [pc, #20]	; (801e6ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e6d6:	652b      	str	r3, [r5, #80]	; 0x50
 801e6d8:	4b07      	ldr	r3, [pc, #28]	; (801e6f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e6da:	656b      	str	r3, [r5, #84]	; 0x54
 801e6dc:	bd38      	pop	{r3, r4, r5, pc}
 801e6de:	bf00      	nop
 801e6e0:	2000be48 	.word	0x2000be48
 801e6e4:	20000000 	.word	0x20000000
 801e6e8:	0801ceaf 	.word	0x0801ceaf
 801e6ec:	2000006c 	.word	0x2000006c
 801e6f0:	2000be4c 	.word	0x2000be4c
 801e6f4:	0801cead 	.word	0x0801cead
 801e6f8:	20000070 	.word	0x20000070

0801e6fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e6fc:	b538      	push	{r3, r4, r5, lr}
 801e6fe:	4c15      	ldr	r4, [pc, #84]	; (801e754 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e700:	4605      	mov	r5, r0
 801e702:	7823      	ldrb	r3, [r4, #0]
 801e704:	f3bf 8f5b 	dmb	ish
 801e708:	07da      	lsls	r2, r3, #31
 801e70a:	d40b      	bmi.n	801e724 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e70c:	4620      	mov	r0, r4
 801e70e:	f006 fb2c 	bl	8024d6a <__cxa_guard_acquire>
 801e712:	b138      	cbz	r0, 801e724 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e714:	4620      	mov	r0, r4
 801e716:	f006 fb34 	bl	8024d82 <__cxa_guard_release>
 801e71a:	4a0f      	ldr	r2, [pc, #60]	; (801e758 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e71c:	490f      	ldr	r1, [pc, #60]	; (801e75c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e71e:	4810      	ldr	r0, [pc, #64]	; (801e760 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e720:	f006 fb19 	bl	8024d56 <__aeabi_atexit>
 801e724:	4c0f      	ldr	r4, [pc, #60]	; (801e764 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e726:	7823      	ldrb	r3, [r4, #0]
 801e728:	f3bf 8f5b 	dmb	ish
 801e72c:	07db      	lsls	r3, r3, #31
 801e72e:	d40b      	bmi.n	801e748 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e730:	4620      	mov	r0, r4
 801e732:	f006 fb1a 	bl	8024d6a <__cxa_guard_acquire>
 801e736:	b138      	cbz	r0, 801e748 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e738:	4620      	mov	r0, r4
 801e73a:	f006 fb22 	bl	8024d82 <__cxa_guard_release>
 801e73e:	4a06      	ldr	r2, [pc, #24]	; (801e758 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e740:	4909      	ldr	r1, [pc, #36]	; (801e768 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e742:	480a      	ldr	r0, [pc, #40]	; (801e76c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e744:	f006 fb07 	bl	8024d56 <__aeabi_atexit>
 801e748:	4b05      	ldr	r3, [pc, #20]	; (801e760 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e74a:	64ab      	str	r3, [r5, #72]	; 0x48
 801e74c:	4b07      	ldr	r3, [pc, #28]	; (801e76c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e74e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e750:	bd38      	pop	{r3, r4, r5, pc}
 801e752:	bf00      	nop
 801e754:	2000be38 	.word	0x2000be38
 801e758:	20000000 	.word	0x20000000
 801e75c:	0801ceb3 	.word	0x0801ceb3
 801e760:	2000005c 	.word	0x2000005c
 801e764:	2000be3c 	.word	0x2000be3c
 801e768:	0801ceb1 	.word	0x0801ceb1
 801e76c:	20000060 	.word	0x20000060

0801e770 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e770:	b510      	push	{r4, lr}
 801e772:	4604      	mov	r4, r0
 801e774:	f7ff ff88 	bl	801e688 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e778:	4620      	mov	r0, r4
 801e77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e77e:	f7ff bfbd 	b.w	801e6fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e782 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e782:	b510      	push	{r4, lr}
 801e784:	4604      	mov	r4, r0
 801e786:	f7ff fff3 	bl	801e770 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e78a:	4620      	mov	r0, r4
 801e78c:	f7ff ff72 	bl	801e674 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e790:	4620      	mov	r0, r4
 801e792:	f7ff fe73 	bl	801e47c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e796:	4620      	mov	r0, r4
 801e798:	f7ff fdf2 	bl	801e380 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e79c:	4620      	mov	r0, r4
 801e79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7a2:	f7ff bee9 	b.w	801e578 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e7a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7ac:	b087      	sub	sp, #28
 801e7ae:	7888      	ldrb	r0, [r1, #2]
 801e7b0:	4616      	mov	r6, r2
 801e7b2:	9001      	str	r0, [sp, #4]
 801e7b4:	7848      	ldrb	r0, [r1, #1]
 801e7b6:	9100      	str	r1, [sp, #0]
 801e7b8:	9002      	str	r0, [sp, #8]
 801e7ba:	7808      	ldrb	r0, [r1, #0]
 801e7bc:	9901      	ldr	r1, [sp, #4]
 801e7be:	9003      	str	r0, [sp, #12]
 801e7c0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e7c4:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e7c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e7cc:	9902      	ldr	r1, [sp, #8]
 801e7ce:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e7d2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e7d6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e7da:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e7de:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e7e2:	9005      	str	r0, [sp, #20]
 801e7e4:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e7e8:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e7ec:	2d00      	cmp	r5, #0
 801e7ee:	eb06 080a 	add.w	r8, r6, sl
 801e7f2:	db4a      	blt.n	801e88a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e7f4:	45a9      	cmp	r9, r5
 801e7f6:	dd48      	ble.n	801e88a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e7f8:	f1bc 0f00 	cmp.w	ip, #0
 801e7fc:	db43      	blt.n	801e886 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e7fe:	45e6      	cmp	lr, ip
 801e800:	dd41      	ble.n	801e886 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e802:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e806:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e80a:	441e      	add	r6, r3
 801e80c:	f11c 0001 	adds.w	r0, ip, #1
 801e810:	d43e      	bmi.n	801e890 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e812:	4586      	cmp	lr, r0
 801e814:	dd3c      	ble.n	801e890 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e816:	2a00      	cmp	r2, #0
 801e818:	d03a      	beq.n	801e890 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e81a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e81e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e822:	4418      	add	r0, r3
 801e824:	3501      	adds	r5, #1
 801e826:	d437      	bmi.n	801e898 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e828:	45a9      	cmp	r9, r5
 801e82a:	dd35      	ble.n	801e898 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e82c:	b3a4      	cbz	r4, 801e898 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e82e:	f1bc 0f00 	cmp.w	ip, #0
 801e832:	db2f      	blt.n	801e894 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e834:	45e6      	cmp	lr, ip
 801e836:	dd2d      	ble.n	801e894 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e838:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e83c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e840:	441d      	add	r5, r3
 801e842:	f11c 0c01 	adds.w	ip, ip, #1
 801e846:	d42a      	bmi.n	801e89e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e848:	45e6      	cmp	lr, ip
 801e84a:	dd28      	ble.n	801e89e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e84c:	b33a      	cbz	r2, 801e89e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e84e:	44c6      	add	lr, r8
 801e850:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e854:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e858:	4463      	add	r3, ip
 801e85a:	ea6f 0c07 	mvn.w	ip, r7
 801e85e:	2a0f      	cmp	r2, #15
 801e860:	f896 a000 	ldrb.w	sl, [r6]
 801e864:	fa5f fc8c 	uxtb.w	ip, ip
 801e868:	f890 b000 	ldrb.w	fp, [r0]
 801e86c:	f895 9000 	ldrb.w	r9, [r5]
 801e870:	7819      	ldrb	r1, [r3, #0]
 801e872:	d801      	bhi.n	801e878 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e874:	2c0f      	cmp	r4, #15
 801e876:	d914      	bls.n	801e8a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e878:	4b40      	ldr	r3, [pc, #256]	; (801e97c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e87a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e87e:	4a40      	ldr	r2, [pc, #256]	; (801e980 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e880:	4840      	ldr	r0, [pc, #256]	; (801e984 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e882:	f006 fa9b 	bl	8024dbc <__assert_func>
 801e886:	ae05      	add	r6, sp, #20
 801e888:	e7c0      	b.n	801e80c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e88a:	a805      	add	r0, sp, #20
 801e88c:	4606      	mov	r6, r0
 801e88e:	e7c9      	b.n	801e824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e890:	a805      	add	r0, sp, #20
 801e892:	e7c7      	b.n	801e824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e894:	ad05      	add	r5, sp, #20
 801e896:	e7d4      	b.n	801e842 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e898:	ab05      	add	r3, sp, #20
 801e89a:	461d      	mov	r5, r3
 801e89c:	e7dd      	b.n	801e85a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e89e:	ab05      	add	r3, sp, #20
 801e8a0:	e7db      	b.n	801e85a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e8a2:	b292      	uxth	r2, r2
 801e8a4:	b2a4      	uxth	r4, r4
 801e8a6:	fa1f fc8c 	uxth.w	ip, ip
 801e8aa:	fb02 f804 	mul.w	r8, r2, r4
 801e8ae:	0112      	lsls	r2, r2, #4
 801e8b0:	b2bf      	uxth	r7, r7
 801e8b2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e8b6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e8ba:	eba2 0208 	sub.w	r2, r2, r8
 801e8be:	b2a4      	uxth	r4, r4
 801e8c0:	b292      	uxth	r2, r2
 801e8c2:	ebae 0e04 	sub.w	lr, lr, r4
 801e8c6:	fb02 fb0b 	mul.w	fp, r2, fp
 801e8ca:	fa1f fe8e 	uxth.w	lr, lr
 801e8ce:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e8d2:	fb04 aa09 	mla	sl, r4, r9, sl
 801e8d6:	fb08 aa01 	mla	sl, r8, r1, sl
 801e8da:	9903      	ldr	r1, [sp, #12]
 801e8dc:	fb11 f90c 	smulbb	r9, r1, ip
 801e8e0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e8e4:	9900      	ldr	r1, [sp, #0]
 801e8e6:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e8ea:	fa1f fa8a 	uxth.w	sl, sl
 801e8ee:	f10a 0901 	add.w	r9, sl, #1
 801e8f2:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e8f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e8fa:	f881 a000 	strb.w	sl, [r1]
 801e8fe:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e902:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e906:	fb02 fa0a 	mul.w	sl, r2, sl
 801e90a:	9902      	ldr	r1, [sp, #8]
 801e90c:	fb0e aa09 	mla	sl, lr, r9, sl
 801e910:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e914:	fb04 aa09 	mla	sl, r4, r9, sl
 801e918:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e91c:	fb08 a909 	mla	r9, r8, r9, sl
 801e920:	fb11 fa0c 	smulbb	sl, r1, ip
 801e924:	9900      	ldr	r1, [sp, #0]
 801e926:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e92a:	fb09 a907 	mla	r9, r9, r7, sl
 801e92e:	fa1f f989 	uxth.w	r9, r9
 801e932:	f109 0a01 	add.w	sl, r9, #1
 801e936:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e93a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e93e:	f881 9001 	strb.w	r9, [r1, #1]
 801e942:	7880      	ldrb	r0, [r0, #2]
 801e944:	78b6      	ldrb	r6, [r6, #2]
 801e946:	4342      	muls	r2, r0
 801e948:	78a8      	ldrb	r0, [r5, #2]
 801e94a:	789b      	ldrb	r3, [r3, #2]
 801e94c:	fb0e 2206 	mla	r2, lr, r6, r2
 801e950:	fb04 2400 	mla	r4, r4, r0, r2
 801e954:	fb08 4803 	mla	r8, r8, r3, r4
 801e958:	9b01      	ldr	r3, [sp, #4]
 801e95a:	fb13 fc0c 	smulbb	ip, r3, ip
 801e95e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e962:	fb08 c707 	mla	r7, r8, r7, ip
 801e966:	b2bf      	uxth	r7, r7
 801e968:	f107 0c01 	add.w	ip, r7, #1
 801e96c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e970:	123f      	asrs	r7, r7, #8
 801e972:	708f      	strb	r7, [r1, #2]
 801e974:	b007      	add	sp, #28
 801e976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e97a:	bf00      	nop
 801e97c:	080297ab 	.word	0x080297ab
 801e980:	08029ca2 	.word	0x08029ca2
 801e984:	08029874 	.word	0x08029874

0801e988 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e98c:	ed2d 8b08 	vpush	{d8-d11}
 801e990:	b095      	sub	sp, #84	; 0x54
 801e992:	eeb0 aa40 	vmov.f32	s20, s0
 801e996:	eef0 9a60 	vmov.f32	s19, s1
 801e99a:	930a      	str	r3, [sp, #40]	; 0x28
 801e99c:	eeb0 9a41 	vmov.f32	s18, s2
 801e9a0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e9a4:	eeb0 8a62 	vmov.f32	s16, s5
 801e9a8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801e9aa:	eef0 8a43 	vmov.f32	s17, s6
 801e9ae:	930c      	str	r3, [sp, #48]	; 0x30
 801e9b0:	eef0 ba44 	vmov.f32	s23, s8
 801e9b4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e9b8:	eeb0 ba64 	vmov.f32	s22, s9
 801e9bc:	9013      	str	r0, [sp, #76]	; 0x4c
 801e9be:	eef0 aa45 	vmov.f32	s21, s10
 801e9c2:	9310      	str	r3, [sp, #64]	; 0x40
 801e9c4:	6860      	ldr	r0, [r4, #4]
 801e9c6:	910f      	str	r1, [sp, #60]	; 0x3c
 801e9c8:	9212      	str	r2, [sp, #72]	; 0x48
 801e9ca:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e9cc:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801e9d0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e9d4:	fb00 1303 	mla	r3, r0, r3, r1
 801e9d8:	6821      	ldr	r1, [r4, #0]
 801e9da:	6854      	ldr	r4, [r2, #4]
 801e9dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e9e0:	18cb      	adds	r3, r1, r3
 801e9e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e9e4:	6813      	ldr	r3, [r2, #0]
 801e9e6:	930e      	str	r3, [sp, #56]	; 0x38
 801e9e8:	1d23      	adds	r3, r4, #4
 801e9ea:	9309      	str	r3, [sp, #36]	; 0x24
 801e9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9ee:	43db      	mvns	r3, r3
 801e9f0:	b2db      	uxtb	r3, r3
 801e9f2:	930d      	str	r3, [sp, #52]	; 0x34
 801e9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	dc03      	bgt.n	801ea02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e9fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	f340 823c 	ble.w	801ee7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801ea02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	f340 8115 	ble.w	801ec34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801ea0a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ea0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ea0e:	1412      	asrs	r2, r2, #16
 801ea10:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ea14:	d431      	bmi.n	801ea7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801ea16:	1c51      	adds	r1, r2, #1
 801ea18:	428d      	cmp	r5, r1
 801ea1a:	dd31      	ble.n	801ea80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	db2f      	blt.n	801ea80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ea20:	1c59      	adds	r1, r3, #1
 801ea22:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ea24:	4288      	cmp	r0, r1
 801ea26:	dd2b      	ble.n	801ea80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ea28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea2a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea2c:	3b01      	subs	r3, #1
 801ea2e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801ea30:	fb02 1203 	mla	r2, r2, r3, r1
 801ea34:	1412      	asrs	r2, r2, #16
 801ea36:	d42d      	bmi.n	801ea94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801ea38:	3201      	adds	r2, #1
 801ea3a:	4295      	cmp	r5, r2
 801ea3c:	dd2a      	ble.n	801ea94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801ea3e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ea40:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ea42:	fb02 1303 	mla	r3, r2, r3, r1
 801ea46:	141b      	asrs	r3, r3, #16
 801ea48:	d424      	bmi.n	801ea94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801ea4a:	3301      	adds	r3, #1
 801ea4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea4e:	429a      	cmp	r2, r3
 801ea50:	dd20      	ble.n	801ea94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801ea52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea54:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801ea58:	f103 0c03 	add.w	ip, r3, #3
 801ea5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea5e:	9311      	str	r3, [sp, #68]	; 0x44
 801ea60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	f300 814f 	bgt.w	801ed06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801ea68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ea6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea74:	441a      	add	r2, r3
 801ea76:	920b      	str	r2, [sp, #44]	; 0x2c
 801ea78:	e0de      	b.n	801ec38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801ea7a:	1c51      	adds	r1, r2, #1
 801ea7c:	f040 80cb 	bne.w	801ec16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801ea80:	42aa      	cmp	r2, r5
 801ea82:	f280 80c8 	bge.w	801ec16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801ea86:	1c5f      	adds	r7, r3, #1
 801ea88:	f2c0 80c5 	blt.w	801ec16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801ea8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea8e:	4293      	cmp	r3, r2
 801ea90:	f280 80c1 	bge.w	801ec16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801ea94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea96:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ea98:	9311      	str	r3, [sp, #68]	; 0x44
 801ea9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	dde3      	ble.n	801ea68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801eaa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaa2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801eaa4:	141a      	asrs	r2, r3, #16
 801eaa6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eaa8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eaaa:	1400      	asrs	r0, r0, #16
 801eaac:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801eab0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eab4:	f100 810e 	bmi.w	801ecd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801eab8:	1c46      	adds	r6, r0, #1
 801eaba:	42b5      	cmp	r5, r6
 801eabc:	f340 810c 	ble.w	801ecd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801eac0:	2a00      	cmp	r2, #0
 801eac2:	f2c0 8109 	blt.w	801ecd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801eac6:	1c56      	adds	r6, r2, #1
 801eac8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eaca:	42b4      	cmp	r4, r6
 801eacc:	f340 8104 	ble.w	801ecd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801ead0:	fb02 0005 	mla	r0, r2, r5, r0
 801ead4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ead6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ead8:	f814 e000 	ldrb.w	lr, [r4, r0]
 801eadc:	4402      	add	r2, r0
 801eade:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eae0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eae4:	eb00 080e 	add.w	r8, r0, lr
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	f000 80e4 	beq.w	801ecb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801eaee:	f892 c001 	ldrb.w	ip, [r2, #1]
 801eaf2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801eaf6:	4484      	add	ip, r0
 801eaf8:	2900      	cmp	r1, #0
 801eafa:	f000 80e5 	beq.w	801ecc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801eafe:	1950      	adds	r0, r2, r5
 801eb00:	5d52      	ldrb	r2, [r2, r5]
 801eb02:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eb04:	7840      	ldrb	r0, [r0, #1]
 801eb06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb0e:	4422      	add	r2, r4
 801eb10:	4420      	add	r0, r4
 801eb12:	b29b      	uxth	r3, r3
 801eb14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eb16:	b289      	uxth	r1, r1
 801eb18:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801eb1c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801eb20:	fb03 fa01 	mul.w	sl, r3, r1
 801eb24:	011b      	lsls	r3, r3, #4
 801eb26:	f89c e000 	ldrb.w	lr, [ip]
 801eb2a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801eb2e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801eb32:	eba3 030a 	sub.w	r3, r3, sl
 801eb36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eb38:	b289      	uxth	r1, r1
 801eb3a:	b29b      	uxth	r3, r3
 801eb3c:	eba9 0901 	sub.w	r9, r9, r1
 801eb40:	fb03 fe0e 	mul.w	lr, r3, lr
 801eb44:	fa1f f989 	uxth.w	r9, r9
 801eb48:	fb09 ee0b 	mla	lr, r9, fp, lr
 801eb4c:	f892 b000 	ldrb.w	fp, [r2]
 801eb50:	fb01 ee0b 	mla	lr, r1, fp, lr
 801eb54:	f890 b000 	ldrb.w	fp, [r0]
 801eb58:	fb0a ee0b 	mla	lr, sl, fp, lr
 801eb5c:	f897 b000 	ldrb.w	fp, [r7]
 801eb60:	fb1b fb04 	smulbb	fp, fp, r4
 801eb64:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801eb68:	fb0e be06 	mla	lr, lr, r6, fp
 801eb6c:	fa1f fe8e 	uxth.w	lr, lr
 801eb70:	f10e 0b01 	add.w	fp, lr, #1
 801eb74:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801eb78:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801eb7c:	f887 b000 	strb.w	fp, [r7]
 801eb80:	f89c e001 	ldrb.w	lr, [ip, #1]
 801eb84:	f898 b001 	ldrb.w	fp, [r8, #1]
 801eb88:	fb03 fe0e 	mul.w	lr, r3, lr
 801eb8c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801eb90:	f892 b001 	ldrb.w	fp, [r2, #1]
 801eb94:	fb01 ee0b 	mla	lr, r1, fp, lr
 801eb98:	f890 b001 	ldrb.w	fp, [r0, #1]
 801eb9c:	fb0a ee0b 	mla	lr, sl, fp, lr
 801eba0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801eba4:	fb1b fb04 	smulbb	fp, fp, r4
 801eba8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ebac:	fb0e be06 	mla	lr, lr, r6, fp
 801ebb0:	fa1f fe8e 	uxth.w	lr, lr
 801ebb4:	f10e 0b01 	add.w	fp, lr, #1
 801ebb8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ebbc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ebc0:	f887 e001 	strb.w	lr, [r7, #1]
 801ebc4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ebc8:	f898 e002 	ldrb.w	lr, [r8, #2]
 801ebcc:	fb03 f30c 	mul.w	r3, r3, ip
 801ebd0:	fb09 330e 	mla	r3, r9, lr, r3
 801ebd4:	f892 e002 	ldrb.w	lr, [r2, #2]
 801ebd8:	7882      	ldrb	r2, [r0, #2]
 801ebda:	fb01 310e 	mla	r1, r1, lr, r3
 801ebde:	fb0a 1a02 	mla	sl, sl, r2, r1
 801ebe2:	78b9      	ldrb	r1, [r7, #2]
 801ebe4:	fb11 f104 	smulbb	r1, r1, r4
 801ebe8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ebec:	fb0a 1606 	mla	r6, sl, r6, r1
 801ebf0:	b2b6      	uxth	r6, r6
 801ebf2:	1c73      	adds	r3, r6, #1
 801ebf4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ebf8:	1236      	asrs	r6, r6, #8
 801ebfa:	70be      	strb	r6, [r7, #2]
 801ebfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ebfe:	3703      	adds	r7, #3
 801ec00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ec02:	4413      	add	r3, r2
 801ec04:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ec06:	9327      	str	r3, [sp, #156]	; 0x9c
 801ec08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec0a:	4413      	add	r3, r2
 801ec0c:	9328      	str	r3, [sp, #160]	; 0xa0
 801ec0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ec10:	3b01      	subs	r3, #1
 801ec12:	9311      	str	r3, [sp, #68]	; 0x44
 801ec14:	e741      	b.n	801ea9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801ec16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ec18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ec1a:	4413      	add	r3, r2
 801ec1c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ec1e:	9327      	str	r3, [sp, #156]	; 0x9c
 801ec20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec22:	4413      	add	r3, r2
 801ec24:	9328      	str	r3, [sp, #160]	; 0xa0
 801ec26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec28:	3b01      	subs	r3, #1
 801ec2a:	930a      	str	r3, [sp, #40]	; 0x28
 801ec2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec2e:	3303      	adds	r3, #3
 801ec30:	930b      	str	r3, [sp, #44]	; 0x2c
 801ec32:	e6e6      	b.n	801ea02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ec34:	f47f aef8 	bne.w	801ea28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ec38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	f340 811d 	ble.w	801ee7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801ec40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec46:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ec4a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ec4e:	eef0 6a48 	vmov.f32	s13, s16
 801ec52:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ec56:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ec5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec5e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801ec62:	eef0 6a68 	vmov.f32	s13, s17
 801ec66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec6a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801ec6e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ec72:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ec76:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ec7a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ec7e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ec82:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ec86:	ee18 2a10 	vmov	r2, s16
 801ec8a:	eeb0 8a47 	vmov.f32	s16, s14
 801ec8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec92:	ee18 2a90 	vmov	r2, s17
 801ec96:	9329      	str	r3, [sp, #164]	; 0xa4
 801ec98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec9a:	eef0 8a67 	vmov.f32	s17, s15
 801ec9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801eca2:	932a      	str	r3, [sp, #168]	; 0xa8
 801eca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eca6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eca8:	3b01      	subs	r3, #1
 801ecaa:	930f      	str	r3, [sp, #60]	; 0x3c
 801ecac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ecae:	bf08      	it	eq
 801ecb0:	4613      	moveq	r3, r2
 801ecb2:	930a      	str	r3, [sp, #40]	; 0x28
 801ecb4:	e69e      	b.n	801e9f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ecb6:	b151      	cbz	r1, 801ecce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801ecb8:	5d52      	ldrb	r2, [r2, r5]
 801ecba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ecbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ecc0:	4402      	add	r2, r0
 801ecc2:	4640      	mov	r0, r8
 801ecc4:	46c4      	mov	ip, r8
 801ecc6:	e724      	b.n	801eb12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801ecc8:	4640      	mov	r0, r8
 801ecca:	4642      	mov	r2, r8
 801eccc:	e721      	b.n	801eb12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801ecce:	4640      	mov	r0, r8
 801ecd0:	4642      	mov	r2, r8
 801ecd2:	e7f7      	b.n	801ecc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801ecd4:	1c46      	adds	r6, r0, #1
 801ecd6:	d191      	bne.n	801ebfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ecd8:	4285      	cmp	r5, r0
 801ecda:	dd8f      	ble.n	801ebfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ecdc:	1c54      	adds	r4, r2, #1
 801ecde:	db8d      	blt.n	801ebfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ece0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ece2:	4294      	cmp	r4, r2
 801ece4:	dd8a      	ble.n	801ebfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ece6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ece8:	9002      	str	r0, [sp, #8]
 801ecea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ecec:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801ecf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ecf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ecf4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ecf8:	e9cd 5300 	strd	r5, r3, [sp]
 801ecfc:	4639      	mov	r1, r7
 801ecfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed00:	f7ff fd52 	bl	801e7a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ed04:	e77a      	b.n	801ebfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ed06:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ed08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ed0a:	1410      	asrs	r0, r2, #16
 801ed0c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ed10:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ed12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ed14:	1412      	asrs	r2, r2, #16
 801ed16:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ed1a:	fb05 2000 	mla	r0, r5, r0, r2
 801ed1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed20:	f814 8000 	ldrb.w	r8, [r4, r0]
 801ed24:	4402      	add	r2, r0
 801ed26:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed28:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ed2c:	eb00 0708 	add.w	r7, r0, r8
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	f000 8093 	beq.w	801ee5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801ed36:	7856      	ldrb	r6, [r2, #1]
 801ed38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ed3c:	4406      	add	r6, r0
 801ed3e:	2900      	cmp	r1, #0
 801ed40:	f000 8095 	beq.w	801ee6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801ed44:	1950      	adds	r0, r2, r5
 801ed46:	5d52      	ldrb	r2, [r2, r5]
 801ed48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ed4a:	7840      	ldrb	r0, [r0, #1]
 801ed4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ed54:	4422      	add	r2, r4
 801ed56:	4420      	add	r0, r4
 801ed58:	b29b      	uxth	r3, r3
 801ed5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ed5c:	b289      	uxth	r1, r1
 801ed5e:	f10c 0c03 	add.w	ip, ip, #3
 801ed62:	f814 b008 	ldrb.w	fp, [r4, r8]
 801ed66:	fb03 f901 	mul.w	r9, r3, r1
 801ed6a:	011b      	lsls	r3, r3, #4
 801ed6c:	f896 8000 	ldrb.w	r8, [r6]
 801ed70:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ed74:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ed78:	eba3 0309 	sub.w	r3, r3, r9
 801ed7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ed7e:	b289      	uxth	r1, r1
 801ed80:	b29b      	uxth	r3, r3
 801ed82:	ebae 0e01 	sub.w	lr, lr, r1
 801ed86:	fb03 f808 	mul.w	r8, r3, r8
 801ed8a:	fa1f fe8e 	uxth.w	lr, lr
 801ed8e:	fb0e 880b 	mla	r8, lr, fp, r8
 801ed92:	f892 b000 	ldrb.w	fp, [r2]
 801ed96:	fb01 880b 	mla	r8, r1, fp, r8
 801ed9a:	f890 b000 	ldrb.w	fp, [r0]
 801ed9e:	fb09 880b 	mla	r8, r9, fp, r8
 801eda2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801eda6:	fb1b fb04 	smulbb	fp, fp, r4
 801edaa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801edae:	fb08 b80a 	mla	r8, r8, sl, fp
 801edb2:	fa1f f888 	uxth.w	r8, r8
 801edb6:	f108 0b01 	add.w	fp, r8, #1
 801edba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801edbe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801edc2:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801edc6:	f896 8001 	ldrb.w	r8, [r6, #1]
 801edca:	f897 b001 	ldrb.w	fp, [r7, #1]
 801edce:	fb03 f808 	mul.w	r8, r3, r8
 801edd2:	fb0e 880b 	mla	r8, lr, fp, r8
 801edd6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801edda:	fb01 880b 	mla	r8, r1, fp, r8
 801edde:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ede2:	fb09 880b 	mla	r8, r9, fp, r8
 801ede6:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801edea:	fb1b fb04 	smulbb	fp, fp, r4
 801edee:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801edf2:	fb08 b80a 	mla	r8, r8, sl, fp
 801edf6:	fa1f f888 	uxth.w	r8, r8
 801edfa:	f108 0b01 	add.w	fp, r8, #1
 801edfe:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ee02:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ee06:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801ee0a:	78b6      	ldrb	r6, [r6, #2]
 801ee0c:	78bf      	ldrb	r7, [r7, #2]
 801ee0e:	4373      	muls	r3, r6
 801ee10:	7896      	ldrb	r6, [r2, #2]
 801ee12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ee14:	fb0e 3307 	mla	r3, lr, r7, r3
 801ee18:	fb01 3306 	mla	r3, r1, r6, r3
 801ee1c:	7886      	ldrb	r6, [r0, #2]
 801ee1e:	fb09 3906 	mla	r9, r9, r6, r3
 801ee22:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801ee26:	fb13 f304 	smulbb	r3, r3, r4
 801ee2a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ee2e:	fb09 390a 	mla	r9, r9, sl, r3
 801ee32:	fa1f f989 	uxth.w	r9, r9
 801ee36:	f109 0301 	add.w	r3, r9, #1
 801ee3a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ee3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ee40:	4413      	add	r3, r2
 801ee42:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ee44:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ee48:	9327      	str	r3, [sp, #156]	; 0x9c
 801ee4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee4c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801ee50:	4413      	add	r3, r2
 801ee52:	9328      	str	r3, [sp, #160]	; 0xa0
 801ee54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ee56:	3b01      	subs	r3, #1
 801ee58:	9311      	str	r3, [sp, #68]	; 0x44
 801ee5a:	e601      	b.n	801ea60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ee5c:	b151      	cbz	r1, 801ee74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801ee5e:	5d52      	ldrb	r2, [r2, r5]
 801ee60:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee66:	4402      	add	r2, r0
 801ee68:	4638      	mov	r0, r7
 801ee6a:	463e      	mov	r6, r7
 801ee6c:	e774      	b.n	801ed58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ee6e:	4638      	mov	r0, r7
 801ee70:	463a      	mov	r2, r7
 801ee72:	e771      	b.n	801ed58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ee74:	4638      	mov	r0, r7
 801ee76:	463a      	mov	r2, r7
 801ee78:	e7f7      	b.n	801ee6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801ee7a:	b015      	add	sp, #84	; 0x54
 801ee7c:	ecbd 8b08 	vpop	{d8-d11}
 801ee80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ee84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee88:	780d      	ldrb	r5, [r1, #0]
 801ee8a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801ee8e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801ee92:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801ee96:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801ee9a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801ee9e:	f891 9001 	ldrb.w	r9, [r1, #1]
 801eea2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801eea6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801eeaa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801eeae:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801eeb2:	9501      	str	r5, [sp, #4]
 801eeb4:	fb06 470c 	mla	r7, r6, ip, r4
 801eeb8:	2e00      	cmp	r6, #0
 801eeba:	eb02 0e07 	add.w	lr, r2, r7
 801eebe:	db46      	blt.n	801ef4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801eec0:	45b0      	cmp	r8, r6
 801eec2:	dd44      	ble.n	801ef4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801eec4:	2c00      	cmp	r4, #0
 801eec6:	db40      	blt.n	801ef4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801eec8:	45a4      	cmp	ip, r4
 801eeca:	dd3e      	ble.n	801ef4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801eecc:	5dd7      	ldrb	r7, [r2, r7]
 801eece:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801eed2:	441f      	add	r7, r3
 801eed4:	1c62      	adds	r2, r4, #1
 801eed6:	d43d      	bmi.n	801ef54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801eed8:	4594      	cmp	ip, r2
 801eeda:	dd3b      	ble.n	801ef54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801eedc:	f1ba 0f00 	cmp.w	sl, #0
 801eee0:	d038      	beq.n	801ef54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801eee2:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801eee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eeea:	441d      	add	r5, r3
 801eeec:	3601      	adds	r6, #1
 801eeee:	d435      	bmi.n	801ef5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801eef0:	45b0      	cmp	r8, r6
 801eef2:	dd33      	ble.n	801ef5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801eef4:	b390      	cbz	r0, 801ef5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801eef6:	2c00      	cmp	r4, #0
 801eef8:	db2e      	blt.n	801ef58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801eefa:	45a4      	cmp	ip, r4
 801eefc:	dd2c      	ble.n	801ef58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801eefe:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801ef02:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef06:	441e      	add	r6, r3
 801ef08:	1c62      	adds	r2, r4, #1
 801ef0a:	d42a      	bmi.n	801ef62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ef0c:	4594      	cmp	ip, r2
 801ef0e:	dd28      	ble.n	801ef62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ef10:	f1ba 0f00 	cmp.w	sl, #0
 801ef14:	d025      	beq.n	801ef62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ef16:	44f4      	add	ip, lr
 801ef18:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ef1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef20:	4413      	add	r3, r2
 801ef22:	f1ba 0f0f 	cmp.w	sl, #15
 801ef26:	f897 8000 	ldrb.w	r8, [r7]
 801ef2a:	f895 9000 	ldrb.w	r9, [r5]
 801ef2e:	f896 e000 	ldrb.w	lr, [r6]
 801ef32:	f893 c000 	ldrb.w	ip, [r3]
 801ef36:	d801      	bhi.n	801ef3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801ef38:	280f      	cmp	r0, #15
 801ef3a:	d914      	bls.n	801ef66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801ef3c:	4b29      	ldr	r3, [pc, #164]	; (801efe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801ef3e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ef42:	4a29      	ldr	r2, [pc, #164]	; (801efe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801ef44:	4829      	ldr	r0, [pc, #164]	; (801efec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801ef46:	f005 ff39 	bl	8024dbc <__assert_func>
 801ef4a:	af01      	add	r7, sp, #4
 801ef4c:	e7c2      	b.n	801eed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ef4e:	ad01      	add	r5, sp, #4
 801ef50:	462f      	mov	r7, r5
 801ef52:	e7cb      	b.n	801eeec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ef54:	ad01      	add	r5, sp, #4
 801ef56:	e7c9      	b.n	801eeec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ef58:	ae01      	add	r6, sp, #4
 801ef5a:	e7d5      	b.n	801ef08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801ef5c:	ab01      	add	r3, sp, #4
 801ef5e:	461e      	mov	r6, r3
 801ef60:	e7df      	b.n	801ef22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ef62:	ab01      	add	r3, sp, #4
 801ef64:	e7dd      	b.n	801ef22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ef66:	fa1f f48a 	uxth.w	r4, sl
 801ef6a:	b280      	uxth	r0, r0
 801ef6c:	fb04 fa00 	mul.w	sl, r4, r0
 801ef70:	0124      	lsls	r4, r4, #4
 801ef72:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ef76:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801ef7a:	b282      	uxth	r2, r0
 801ef7c:	eba4 000a 	sub.w	r0, r4, sl
 801ef80:	ebab 0b02 	sub.w	fp, fp, r2
 801ef84:	b280      	uxth	r0, r0
 801ef86:	fa1f fb8b 	uxth.w	fp, fp
 801ef8a:	fb00 f909 	mul.w	r9, r0, r9
 801ef8e:	fb0b 9808 	mla	r8, fp, r8, r9
 801ef92:	fb02 8e0e 	mla	lr, r2, lr, r8
 801ef96:	fb0a ec0c 	mla	ip, sl, ip, lr
 801ef9a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ef9e:	f881 c000 	strb.w	ip, [r1]
 801efa2:	786c      	ldrb	r4, [r5, #1]
 801efa4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801efa8:	4344      	muls	r4, r0
 801efaa:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801efae:	7874      	ldrb	r4, [r6, #1]
 801efb0:	fb02 cc04 	mla	ip, r2, r4, ip
 801efb4:	785c      	ldrb	r4, [r3, #1]
 801efb6:	fb0a c404 	mla	r4, sl, r4, ip
 801efba:	1224      	asrs	r4, r4, #8
 801efbc:	704c      	strb	r4, [r1, #1]
 801efbe:	78ad      	ldrb	r5, [r5, #2]
 801efc0:	78bc      	ldrb	r4, [r7, #2]
 801efc2:	4368      	muls	r0, r5
 801efc4:	fb0b 0b04 	mla	fp, fp, r4, r0
 801efc8:	78b0      	ldrb	r0, [r6, #2]
 801efca:	fb02 b000 	mla	r0, r2, r0, fp
 801efce:	789a      	ldrb	r2, [r3, #2]
 801efd0:	fb0a 0a02 	mla	sl, sl, r2, r0
 801efd4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801efd8:	f881 a002 	strb.w	sl, [r1, #2]
 801efdc:	b003      	add	sp, #12
 801efde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efe2:	bf00      	nop
 801efe4:	080297ab 	.word	0x080297ab
 801efe8:	08029ca2 	.word	0x08029ca2
 801efec:	08029874 	.word	0x08029874

0801eff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eff4:	ed2d 8b0a 	vpush	{d8-d12}
 801eff8:	b08f      	sub	sp, #60	; 0x3c
 801effa:	eeb0 aa40 	vmov.f32	s20, s0
 801effe:	eef0 9a60 	vmov.f32	s19, s1
 801f002:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801f004:	eeb0 9a41 	vmov.f32	s18, s2
 801f008:	9307      	str	r3, [sp, #28]
 801f00a:	eeb0 8a62 	vmov.f32	s16, s5
 801f00e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f012:	eef0 8a43 	vmov.f32	s17, s6
 801f016:	900d      	str	r0, [sp, #52]	; 0x34
 801f018:	eeb0 ca44 	vmov.f32	s24, s8
 801f01c:	6860      	ldr	r0, [r4, #4]
 801f01e:	eef0 ba64 	vmov.f32	s23, s9
 801f022:	9309      	str	r3, [sp, #36]	; 0x24
 801f024:	eeb0 ba45 	vmov.f32	s22, s10
 801f028:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f02c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801f030:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801f034:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f038:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f03a:	fb00 1303 	mla	r3, r0, r3, r1
 801f03e:	6821      	ldr	r1, [r4, #0]
 801f040:	6854      	ldr	r4, [r2, #4]
 801f042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f046:	3404      	adds	r4, #4
 801f048:	18cb      	adds	r3, r1, r3
 801f04a:	9308      	str	r3, [sp, #32]
 801f04c:	6813      	ldr	r3, [r2, #0]
 801f04e:	930a      	str	r3, [sp, #40]	; 0x28
 801f050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f052:	2b00      	cmp	r3, #0
 801f054:	dc03      	bgt.n	801f05e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f058:	2b00      	cmp	r3, #0
 801f05a:	f340 81d2 	ble.w	801f402 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f05e:	9b07      	ldr	r3, [sp, #28]
 801f060:	2b00      	cmp	r3, #0
 801f062:	f340 80e3 	ble.w	801f22c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801f066:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f068:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f06a:	1412      	asrs	r2, r2, #16
 801f06c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f070:	d42f      	bmi.n	801f0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f072:	1c51      	adds	r1, r2, #1
 801f074:	428d      	cmp	r5, r1
 801f076:	dd2f      	ble.n	801f0d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f078:	2b00      	cmp	r3, #0
 801f07a:	db2d      	blt.n	801f0d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f07c:	1c59      	adds	r1, r3, #1
 801f07e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f080:	4288      	cmp	r0, r1
 801f082:	dd29      	ble.n	801f0d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f084:	9b07      	ldr	r3, [sp, #28]
 801f086:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f088:	3b01      	subs	r3, #1
 801f08a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f08c:	fb02 1203 	mla	r2, r2, r3, r1
 801f090:	1412      	asrs	r2, r2, #16
 801f092:	d42b      	bmi.n	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f094:	3201      	adds	r2, #1
 801f096:	4295      	cmp	r5, r2
 801f098:	dd28      	ble.n	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f09a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f09c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f09e:	fb02 1303 	mla	r3, r2, r3, r1
 801f0a2:	141b      	asrs	r3, r3, #16
 801f0a4:	d422      	bmi.n	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f0a6:	3301      	adds	r3, #1
 801f0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f0aa:	429a      	cmp	r2, r3
 801f0ac:	dd1e      	ble.n	801f0ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f0ae:	9b08      	ldr	r3, [sp, #32]
 801f0b0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f0b4:	f103 0803 	add.w	r8, r3, #3
 801f0b8:	f1ba 0f00 	cmp.w	sl, #0
 801f0bc:	f300 8119 	bgt.w	801f2f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801f0c0:	9b07      	ldr	r3, [sp, #28]
 801f0c2:	9a08      	ldr	r2, [sp, #32]
 801f0c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0cc:	441a      	add	r2, r3
 801f0ce:	9208      	str	r2, [sp, #32]
 801f0d0:	e0ae      	b.n	801f230 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f0d2:	1c51      	adds	r1, r2, #1
 801f0d4:	f040 809b 	bne.w	801f20e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f0d8:	42aa      	cmp	r2, r5
 801f0da:	f280 8098 	bge.w	801f20e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f0de:	1c5a      	adds	r2, r3, #1
 801f0e0:	f2c0 8095 	blt.w	801f20e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f0e6:	4293      	cmp	r3, r2
 801f0e8:	f280 8091 	bge.w	801f20e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f0ec:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801f0f0:	f1bb 0f00 	cmp.w	fp, #0
 801f0f4:	dde4      	ble.n	801f0c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f0f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0f8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f0fa:	141a      	asrs	r2, r3, #16
 801f0fc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f0fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f100:	1400      	asrs	r0, r0, #16
 801f102:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f106:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f10a:	f100 80dc 	bmi.w	801f2c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801f10e:	1c47      	adds	r7, r0, #1
 801f110:	42bd      	cmp	r5, r7
 801f112:	f340 80da 	ble.w	801f2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f116:	2a00      	cmp	r2, #0
 801f118:	f2c0 80d7 	blt.w	801f2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f11c:	f102 0c01 	add.w	ip, r2, #1
 801f120:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f122:	4567      	cmp	r7, ip
 801f124:	f340 80d1 	ble.w	801f2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f128:	fb02 0005 	mla	r0, r2, r5, r0
 801f12c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f12e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f130:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f134:	4402      	add	r2, r0
 801f136:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f13a:	eb04 0c08 	add.w	ip, r4, r8
 801f13e:	2b00      	cmp	r3, #0
 801f140:	f000 80b3 	beq.w	801f2aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801f144:	7857      	ldrb	r7, [r2, #1]
 801f146:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f14a:	4427      	add	r7, r4
 801f14c:	2900      	cmp	r1, #0
 801f14e:	f000 80b4 	beq.w	801f2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801f152:	1950      	adds	r0, r2, r5
 801f154:	5d52      	ldrb	r2, [r2, r5]
 801f156:	7840      	ldrb	r0, [r0, #1]
 801f158:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f15c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f160:	4422      	add	r2, r4
 801f162:	4420      	add	r0, r4
 801f164:	b29b      	uxth	r3, r3
 801f166:	f814 a008 	ldrb.w	sl, [r4, r8]
 801f16a:	b289      	uxth	r1, r1
 801f16c:	f897 8000 	ldrb.w	r8, [r7]
 801f170:	fb03 f901 	mul.w	r9, r3, r1
 801f174:	011b      	lsls	r3, r3, #4
 801f176:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f17a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f17e:	eba3 0309 	sub.w	r3, r3, r9
 801f182:	b289      	uxth	r1, r1
 801f184:	b29b      	uxth	r3, r3
 801f186:	ebae 0e01 	sub.w	lr, lr, r1
 801f18a:	fb03 f808 	mul.w	r8, r3, r8
 801f18e:	fa1f fe8e 	uxth.w	lr, lr
 801f192:	fb0e 880a 	mla	r8, lr, sl, r8
 801f196:	f892 a000 	ldrb.w	sl, [r2]
 801f19a:	fb01 880a 	mla	r8, r1, sl, r8
 801f19e:	f890 a000 	ldrb.w	sl, [r0]
 801f1a2:	fb09 880a 	mla	r8, r9, sl, r8
 801f1a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f1aa:	f886 8000 	strb.w	r8, [r6]
 801f1ae:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f1b2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f1b6:	fb03 f808 	mul.w	r8, r3, r8
 801f1ba:	fb0e 880a 	mla	r8, lr, sl, r8
 801f1be:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f1c2:	fb01 880a 	mla	r8, r1, sl, r8
 801f1c6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f1ca:	fb09 880a 	mla	r8, r9, sl, r8
 801f1ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f1d2:	f886 8001 	strb.w	r8, [r6, #1]
 801f1d6:	78bf      	ldrb	r7, [r7, #2]
 801f1d8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f1dc:	437b      	muls	r3, r7
 801f1de:	7892      	ldrb	r2, [r2, #2]
 801f1e0:	fb0e 330c 	mla	r3, lr, ip, r3
 801f1e4:	fb01 3102 	mla	r1, r1, r2, r3
 801f1e8:	7882      	ldrb	r2, [r0, #2]
 801f1ea:	fb09 1902 	mla	r9, r9, r2, r1
 801f1ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f1f2:	f886 9002 	strb.w	r9, [r6, #2]
 801f1f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f1f8:	3603      	adds	r6, #3
 801f1fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f1fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f200:	4413      	add	r3, r2
 801f202:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f204:	9323      	str	r3, [sp, #140]	; 0x8c
 801f206:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f208:	4413      	add	r3, r2
 801f20a:	9324      	str	r3, [sp, #144]	; 0x90
 801f20c:	e770      	b.n	801f0f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f20e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f210:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f212:	4413      	add	r3, r2
 801f214:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f216:	9323      	str	r3, [sp, #140]	; 0x8c
 801f218:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f21a:	4413      	add	r3, r2
 801f21c:	9324      	str	r3, [sp, #144]	; 0x90
 801f21e:	9b07      	ldr	r3, [sp, #28]
 801f220:	3b01      	subs	r3, #1
 801f222:	9307      	str	r3, [sp, #28]
 801f224:	9b08      	ldr	r3, [sp, #32]
 801f226:	3303      	adds	r3, #3
 801f228:	9308      	str	r3, [sp, #32]
 801f22a:	e718      	b.n	801f05e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f22c:	f47f af2a 	bne.w	801f084 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f232:	2b00      	cmp	r3, #0
 801f234:	f340 80e5 	ble.w	801f402 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f238:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f23c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f23e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f242:	eef0 6a48 	vmov.f32	s13, s16
 801f246:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f24a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f24e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f252:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801f256:	eef0 6a68 	vmov.f32	s13, s17
 801f25a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f25e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801f262:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f266:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f26a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f26e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f272:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f276:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f27a:	ee18 2a10 	vmov	r2, s16
 801f27e:	eeb0 8a47 	vmov.f32	s16, s14
 801f282:	fb92 f3f3 	sdiv	r3, r2, r3
 801f286:	ee18 2a90 	vmov	r2, s17
 801f28a:	9325      	str	r3, [sp, #148]	; 0x94
 801f28c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f28e:	eef0 8a67 	vmov.f32	s17, s15
 801f292:	fb92 f3f3 	sdiv	r3, r2, r3
 801f296:	9326      	str	r3, [sp, #152]	; 0x98
 801f298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f29a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f29c:	3b01      	subs	r3, #1
 801f29e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2a2:	bf08      	it	eq
 801f2a4:	4613      	moveq	r3, r2
 801f2a6:	9307      	str	r3, [sp, #28]
 801f2a8:	e6d2      	b.n	801f050 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f2aa:	b149      	cbz	r1, 801f2c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f2ac:	5d52      	ldrb	r2, [r2, r5]
 801f2ae:	4660      	mov	r0, ip
 801f2b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f2b4:	4422      	add	r2, r4
 801f2b6:	4667      	mov	r7, ip
 801f2b8:	e754      	b.n	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f2ba:	4660      	mov	r0, ip
 801f2bc:	4662      	mov	r2, ip
 801f2be:	e751      	b.n	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f2c0:	4660      	mov	r0, ip
 801f2c2:	4662      	mov	r2, ip
 801f2c4:	e7f7      	b.n	801f2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f2c6:	1c47      	adds	r7, r0, #1
 801f2c8:	d195      	bne.n	801f1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f2ca:	4285      	cmp	r5, r0
 801f2cc:	dd93      	ble.n	801f1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f2ce:	1c57      	adds	r7, r2, #1
 801f2d0:	db91      	blt.n	801f1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f2d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f2d4:	4297      	cmp	r7, r2
 801f2d6:	dd8e      	ble.n	801f1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f2d8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f2dc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f2e0:	e9cd 5700 	strd	r5, r7, [sp]
 801f2e4:	4623      	mov	r3, r4
 801f2e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f2e8:	4631      	mov	r1, r6
 801f2ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f2ec:	f7ff fdca 	bl	801ee84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f2f0:	e781      	b.n	801f1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f2f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f2f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f2f6:	1410      	asrs	r0, r2, #16
 801f2f8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f2fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f2fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f300:	1412      	asrs	r2, r2, #16
 801f302:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f306:	fb05 2000 	mla	r0, r5, r0, r2
 801f30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f30c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f310:	4402      	add	r2, r0
 801f312:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f316:	eb04 070e 	add.w	r7, r4, lr
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d063      	beq.n	801f3e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f31e:	7856      	ldrb	r6, [r2, #1]
 801f320:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f324:	4426      	add	r6, r4
 801f326:	2900      	cmp	r1, #0
 801f328:	d065      	beq.n	801f3f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f32a:	1950      	adds	r0, r2, r5
 801f32c:	5d52      	ldrb	r2, [r2, r5]
 801f32e:	7840      	ldrb	r0, [r0, #1]
 801f330:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f334:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f338:	4422      	add	r2, r4
 801f33a:	4420      	add	r0, r4
 801f33c:	b29b      	uxth	r3, r3
 801f33e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f342:	b289      	uxth	r1, r1
 801f344:	f896 e000 	ldrb.w	lr, [r6]
 801f348:	f108 0803 	add.w	r8, r8, #3
 801f34c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f350:	fb03 f901 	mul.w	r9, r3, r1
 801f354:	011b      	lsls	r3, r3, #4
 801f356:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f35a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f35e:	eba3 0309 	sub.w	r3, r3, r9
 801f362:	b289      	uxth	r1, r1
 801f364:	b29b      	uxth	r3, r3
 801f366:	ebac 0c01 	sub.w	ip, ip, r1
 801f36a:	fb03 fe0e 	mul.w	lr, r3, lr
 801f36e:	fa1f fc8c 	uxth.w	ip, ip
 801f372:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f376:	f892 b000 	ldrb.w	fp, [r2]
 801f37a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f37e:	f890 b000 	ldrb.w	fp, [r0]
 801f382:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f386:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f38a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f38e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f392:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f396:	fb03 fe0e 	mul.w	lr, r3, lr
 801f39a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f39e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f3a2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f3a6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f3aa:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f3ae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f3b2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f3b6:	78b6      	ldrb	r6, [r6, #2]
 801f3b8:	78bf      	ldrb	r7, [r7, #2]
 801f3ba:	4373      	muls	r3, r6
 801f3bc:	7896      	ldrb	r6, [r2, #2]
 801f3be:	7882      	ldrb	r2, [r0, #2]
 801f3c0:	fb0c 3307 	mla	r3, ip, r7, r3
 801f3c4:	fb01 3306 	mla	r3, r1, r6, r3
 801f3c8:	fb09 3902 	mla	r9, r9, r2, r3
 801f3cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f3ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f3d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3d4:	4413      	add	r3, r2
 801f3d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f3d8:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f3dc:	9323      	str	r3, [sp, #140]	; 0x8c
 801f3de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f3e0:	4413      	add	r3, r2
 801f3e2:	9324      	str	r3, [sp, #144]	; 0x90
 801f3e4:	e668      	b.n	801f0b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f3e6:	b149      	cbz	r1, 801f3fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801f3e8:	5d52      	ldrb	r2, [r2, r5]
 801f3ea:	4638      	mov	r0, r7
 801f3ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f3f0:	4422      	add	r2, r4
 801f3f2:	463e      	mov	r6, r7
 801f3f4:	e7a2      	b.n	801f33c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f3f6:	4638      	mov	r0, r7
 801f3f8:	463a      	mov	r2, r7
 801f3fa:	e79f      	b.n	801f33c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f3fc:	4638      	mov	r0, r7
 801f3fe:	463a      	mov	r2, r7
 801f400:	e7f7      	b.n	801f3f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801f402:	b00f      	add	sp, #60	; 0x3c
 801f404:	ecbd 8b0a 	vpop	{d8-d12}
 801f408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f40c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f410:	b087      	sub	sp, #28
 801f412:	7888      	ldrb	r0, [r1, #2]
 801f414:	9002      	str	r0, [sp, #8]
 801f416:	7848      	ldrb	r0, [r1, #1]
 801f418:	9e02      	ldr	r6, [sp, #8]
 801f41a:	9003      	str	r0, [sp, #12]
 801f41c:	7808      	ldrb	r0, [r1, #0]
 801f41e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f422:	9004      	str	r0, [sp, #16]
 801f424:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f428:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801f42c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801f430:	9e03      	ldr	r6, [sp, #12]
 801f432:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801f436:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f43a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801f43e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801f442:	fb04 7508 	mla	r5, r4, r8, r7
 801f446:	2c00      	cmp	r4, #0
 801f448:	eb02 0905 	add.w	r9, r2, r5
 801f44c:	db45      	blt.n	801f4da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f44e:	45a2      	cmp	sl, r4
 801f450:	dd43      	ble.n	801f4da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f452:	2f00      	cmp	r7, #0
 801f454:	db3f      	blt.n	801f4d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f456:	45b8      	cmp	r8, r7
 801f458:	dd3d      	ble.n	801f4d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f45a:	5d52      	ldrb	r2, [r2, r5]
 801f45c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f460:	1c7a      	adds	r2, r7, #1
 801f462:	d43d      	bmi.n	801f4e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f464:	4590      	cmp	r8, r2
 801f466:	dd3b      	ble.n	801f4e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f468:	f1bc 0f00 	cmp.w	ip, #0
 801f46c:	d038      	beq.n	801f4e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f46e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f472:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f476:	3401      	adds	r4, #1
 801f478:	d436      	bmi.n	801f4e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f47a:	45a2      	cmp	sl, r4
 801f47c:	dd34      	ble.n	801f4e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f47e:	f1be 0f00 	cmp.w	lr, #0
 801f482:	d031      	beq.n	801f4e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f484:	2f00      	cmp	r7, #0
 801f486:	db2d      	blt.n	801f4e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f488:	45b8      	cmp	r8, r7
 801f48a:	dd2b      	ble.n	801f4e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f48c:	f819 2008 	ldrb.w	r2, [r9, r8]
 801f490:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f494:	3701      	adds	r7, #1
 801f496:	d409      	bmi.n	801f4ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f498:	45b8      	cmp	r8, r7
 801f49a:	dd07      	ble.n	801f4ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f49c:	f1bc 0f00 	cmp.w	ip, #0
 801f4a0:	d004      	beq.n	801f4ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f4a2:	44c8      	add	r8, r9
 801f4a4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f4a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f4ac:	f1bc 0f0f 	cmp.w	ip, #15
 801f4b0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f4b4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f4b8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f4bc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f4c0:	d802      	bhi.n	801f4c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801f4c2:	f1be 0f0f 	cmp.w	lr, #15
 801f4c6:	d911      	bls.n	801f4ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801f4c8:	4b77      	ldr	r3, [pc, #476]	; (801f6a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801f4ca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f4ce:	4a77      	ldr	r2, [pc, #476]	; (801f6ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801f4d0:	4877      	ldr	r0, [pc, #476]	; (801f6b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801f4d2:	f005 fc73 	bl	8024dbc <__assert_func>
 801f4d6:	4606      	mov	r6, r0
 801f4d8:	e7c2      	b.n	801f460 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801f4da:	4605      	mov	r5, r0
 801f4dc:	4606      	mov	r6, r0
 801f4de:	e7ca      	b.n	801f476 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f4e0:	4605      	mov	r5, r0
 801f4e2:	e7c8      	b.n	801f476 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f4e4:	4604      	mov	r4, r0
 801f4e6:	e7d5      	b.n	801f494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801f4e8:	4604      	mov	r4, r0
 801f4ea:	e7df      	b.n	801f4ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f4ec:	fa1f fc8c 	uxth.w	ip, ip
 801f4f0:	fa1f f28e 	uxth.w	r2, lr
 801f4f4:	fb02 fe0c 	mul.w	lr, r2, ip
 801f4f8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f4fc:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801f500:	ebac 070e 	sub.w	r7, ip, lr
 801f504:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f508:	b292      	uxth	r2, r2
 801f50a:	b2bf      	uxth	r7, r7
 801f50c:	1a9b      	subs	r3, r3, r2
 801f50e:	fb07 fc0a 	mul.w	ip, r7, sl
 801f512:	b29b      	uxth	r3, r3
 801f514:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f518:	9301      	str	r3, [sp, #4]
 801f51a:	fb02 cc09 	mla	ip, r2, r9, ip
 801f51e:	fb0e cc08 	mla	ip, lr, r8, ip
 801f522:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f526:	9305      	str	r3, [sp, #20]
 801f528:	2b00      	cmp	r3, #0
 801f52a:	f000 80b9 	beq.w	801f6a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801f52e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f532:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f536:	fb0b fc0c 	mul.w	ip, fp, ip
 801f53a:	fb0b f606 	mul.w	r6, fp, r6
 801f53e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f542:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f546:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f54a:	44dc      	add	ip, fp
 801f54c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f550:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f558:	fb0a fb0b 	mul.w	fp, sl, fp
 801f55c:	fb0a fa05 	mul.w	sl, sl, r5
 801f560:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f564:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f568:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801f56c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f570:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f574:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f578:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801f57c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f580:	0a36      	lsrs	r6, r6, #8
 801f582:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f586:	44dc      	add	ip, fp
 801f588:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f58c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f590:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f594:	fb09 fb0b 	mul.w	fp, r9, fp
 801f598:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f59c:	fb09 f904 	mul.w	r9, r9, r4
 801f5a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f5a4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801f5a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f5ac:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f5b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f5b4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f5b8:	fb0c fc07 	mul.w	ip, ip, r7
 801f5bc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f5c0:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801f5c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f5c8:	445d      	add	r5, fp
 801f5ca:	fb08 f404 	mul.w	r4, r8, r4
 801f5ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f5d2:	fb08 f800 	mul.w	r8, r8, r0
 801f5d6:	0a2d      	lsrs	r5, r5, #8
 801f5d8:	0a20      	lsrs	r0, r4, #8
 801f5da:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f5de:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f5e2:	fb07 f70a 	mul.w	r7, r7, sl
 801f5e6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f5ea:	4404      	add	r4, r0
 801f5ec:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f5f0:	0a24      	lsrs	r4, r4, #8
 801f5f2:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801f5f6:	9801      	ldr	r0, [sp, #4]
 801f5f8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f5fc:	fb03 cc00 	mla	ip, r3, r0, ip
 801f600:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f604:	fb00 7606 	mla	r6, r0, r6, r7
 801f608:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801f60c:	fb04 cc0e 	mla	ip, r4, lr, ip
 801f610:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f614:	b280      	uxth	r0, r0
 801f616:	9c04      	ldr	r4, [sp, #16]
 801f618:	fb05 cc02 	mla	ip, r5, r2, ip
 801f61c:	fb0e 6e08 	mla	lr, lr, r8, r6
 801f620:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f624:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f628:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801f62c:	fb02 ec0c 	mla	ip, r2, ip, lr
 801f630:	9a05      	ldr	r2, [sp, #20]
 801f632:	4342      	muls	r2, r0
 801f634:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f638:	1c53      	adds	r3, r2, #1
 801f63a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f63e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f642:	ea45 0c0c 	orr.w	ip, r5, ip
 801f646:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f64a:	fa5f f28c 	uxtb.w	r2, ip
 801f64e:	b2db      	uxtb	r3, r3
 801f650:	fb14 f403 	smulbb	r4, r4, r3
 801f654:	fb02 4200 	mla	r2, r2, r0, r4
 801f658:	b292      	uxth	r2, r2
 801f65a:	1c54      	adds	r4, r2, #1
 801f65c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f660:	9c03      	ldr	r4, [sp, #12]
 801f662:	fb14 f403 	smulbb	r4, r4, r3
 801f666:	1212      	asrs	r2, r2, #8
 801f668:	700a      	strb	r2, [r1, #0]
 801f66a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801f66e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f672:	fb02 4200 	mla	r2, r2, r0, r4
 801f676:	b292      	uxth	r2, r2
 801f678:	1c54      	adds	r4, r2, #1
 801f67a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f67e:	1212      	asrs	r2, r2, #8
 801f680:	704a      	strb	r2, [r1, #1]
 801f682:	9a02      	ldr	r2, [sp, #8]
 801f684:	fb12 f303 	smulbb	r3, r2, r3
 801f688:	fb0c 3c00 	mla	ip, ip, r0, r3
 801f68c:	fa1f fc8c 	uxth.w	ip, ip
 801f690:	f10c 0301 	add.w	r3, ip, #1
 801f694:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f698:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f69c:	f881 c002 	strb.w	ip, [r1, #2]
 801f6a0:	b007      	add	sp, #28
 801f6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6a6:	bf00      	nop
 801f6a8:	080297ab 	.word	0x080297ab
 801f6ac:	08029ca2 	.word	0x08029ca2
 801f6b0:	08029874 	.word	0x08029874

0801f6b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b8:	ed2d 8b08 	vpush	{d8-d11}
 801f6bc:	b09b      	sub	sp, #108	; 0x6c
 801f6be:	eeb0 aa40 	vmov.f32	s20, s0
 801f6c2:	eef0 9a60 	vmov.f32	s19, s1
 801f6c6:	930a      	str	r3, [sp, #40]	; 0x28
 801f6c8:	eeb0 9a41 	vmov.f32	s18, s2
 801f6cc:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f6d0:	eeb0 8a62 	vmov.f32	s16, s5
 801f6d4:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f6d6:	eef0 8a43 	vmov.f32	s17, s6
 801f6da:	9312      	str	r3, [sp, #72]	; 0x48
 801f6dc:	eef0 ba44 	vmov.f32	s23, s8
 801f6e0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f6e4:	eeb0 ba64 	vmov.f32	s22, s9
 801f6e8:	9019      	str	r0, [sp, #100]	; 0x64
 801f6ea:	eef0 aa45 	vmov.f32	s21, s10
 801f6ee:	9114      	str	r1, [sp, #80]	; 0x50
 801f6f0:	9317      	str	r3, [sp, #92]	; 0x5c
 801f6f2:	6868      	ldr	r0, [r5, #4]
 801f6f4:	9218      	str	r2, [sp, #96]	; 0x60
 801f6f6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f6f8:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f6fc:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f700:	fb00 1303 	mla	r3, r0, r3, r1
 801f704:	6829      	ldr	r1, [r5, #0]
 801f706:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f70a:	18cb      	adds	r3, r1, r3
 801f70c:	930d      	str	r3, [sp, #52]	; 0x34
 801f70e:	6813      	ldr	r3, [r2, #0]
 801f710:	9313      	str	r3, [sp, #76]	; 0x4c
 801f712:	6853      	ldr	r3, [r2, #4]
 801f714:	3304      	adds	r3, #4
 801f716:	9309      	str	r3, [sp, #36]	; 0x24
 801f718:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	dc03      	bgt.n	801f726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f71e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f720:	2b00      	cmp	r3, #0
 801f722:	f340 8352 	ble.w	801fdca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f728:	2b00      	cmp	r3, #0
 801f72a:	f340 81a2 	ble.w	801fa72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801f72e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f730:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f732:	1412      	asrs	r2, r2, #16
 801f734:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f738:	d431      	bmi.n	801f79e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f73a:	1c51      	adds	r1, r2, #1
 801f73c:	428c      	cmp	r4, r1
 801f73e:	dd31      	ble.n	801f7a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f740:	2b00      	cmp	r3, #0
 801f742:	db2f      	blt.n	801f7a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f744:	1c59      	adds	r1, r3, #1
 801f746:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f748:	4288      	cmp	r0, r1
 801f74a:	dd2b      	ble.n	801f7a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f74e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f750:	3b01      	subs	r3, #1
 801f752:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f754:	fb02 1203 	mla	r2, r2, r3, r1
 801f758:	1412      	asrs	r2, r2, #16
 801f75a:	d42d      	bmi.n	801f7b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f75c:	3201      	adds	r2, #1
 801f75e:	4294      	cmp	r4, r2
 801f760:	dd2a      	ble.n	801f7b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f762:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f764:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f766:	fb02 1303 	mla	r3, r2, r3, r1
 801f76a:	141b      	asrs	r3, r3, #16
 801f76c:	d424      	bmi.n	801f7b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f76e:	3301      	adds	r3, #1
 801f770:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f772:	429a      	cmp	r2, r3
 801f774:	dd20      	ble.n	801f7b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f778:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f77c:	f103 0e03 	add.w	lr, r3, #3
 801f780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f782:	9315      	str	r3, [sp, #84]	; 0x54
 801f784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f786:	2b00      	cmp	r3, #0
 801f788:	f300 81de 	bgt.w	801fb48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801f78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f78e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f790:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f798:	441a      	add	r2, r3
 801f79a:	920d      	str	r2, [sp, #52]	; 0x34
 801f79c:	e16b      	b.n	801fa76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801f79e:	1c51      	adds	r1, r2, #1
 801f7a0:	f040 8158 	bne.w	801fa54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7a4:	42a2      	cmp	r2, r4
 801f7a6:	f280 8155 	bge.w	801fa54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7aa:	1c5a      	adds	r2, r3, #1
 801f7ac:	f2c0 8152 	blt.w	801fa54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f7b2:	4293      	cmp	r3, r2
 801f7b4:	f280 814e 	bge.w	801fa54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7ba:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f7bc:	9316      	str	r3, [sp, #88]	; 0x58
 801f7be:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f7c2:	9315      	str	r3, [sp, #84]	; 0x54
 801f7c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	dde0      	ble.n	801f78c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f7ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f7cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f7ce:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f7d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f7d4:	141b      	asrs	r3, r3, #16
 801f7d6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f7da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f7dc:	1412      	asrs	r2, r2, #16
 801f7de:	f100 819a 	bmi.w	801fb16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f7e2:	1c55      	adds	r5, r2, #1
 801f7e4:	42ac      	cmp	r4, r5
 801f7e6:	f340 8198 	ble.w	801fb1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	f2c0 8195 	blt.w	801fb1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f7f0:	1c5d      	adds	r5, r3, #1
 801f7f2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f7f4:	42af      	cmp	r7, r5
 801f7f6:	f340 8190 	ble.w	801fb1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f7fa:	fb03 2304 	mla	r3, r3, r4, r2
 801f7fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f800:	18d5      	adds	r5, r2, r3
 801f802:	5cd3      	ldrb	r3, [r2, r3]
 801f804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f80a:	0e1f      	lsrs	r7, r3, #24
 801f80c:	2800      	cmp	r0, #0
 801f80e:	f000 8171 	beq.w	801faf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f812:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f816:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f81a:	920e      	str	r2, [sp, #56]	; 0x38
 801f81c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f820:	2900      	cmp	r1, #0
 801f822:	f000 8172 	beq.w	801fb0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f826:	eb05 0c04 	add.w	ip, r5, r4
 801f82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f82c:	5d2d      	ldrb	r5, [r5, r4]
 801f82e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f832:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f836:	950b      	str	r5, [sp, #44]	; 0x2c
 801f838:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f83c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f83e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f842:	0e15      	lsrs	r5, r2, #24
 801f844:	920f      	str	r2, [sp, #60]	; 0x3c
 801f846:	b280      	uxth	r0, r0
 801f848:	b289      	uxth	r1, r1
 801f84a:	fb00 fa01 	mul.w	sl, r0, r1
 801f84e:	0100      	lsls	r0, r0, #4
 801f850:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f854:	eba0 080a 	sub.w	r8, r0, sl
 801f858:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f85c:	b289      	uxth	r1, r1
 801f85e:	fa1f f888 	uxth.w	r8, r8
 801f862:	1a52      	subs	r2, r2, r1
 801f864:	fb08 f00e 	mul.w	r0, r8, lr
 801f868:	b292      	uxth	r2, r2
 801f86a:	fb02 0007 	mla	r0, r2, r7, r0
 801f86e:	fb01 0009 	mla	r0, r1, r9, r0
 801f872:	fb0a 0005 	mla	r0, sl, r5, r0
 801f876:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f87a:	2800      	cmp	r0, #0
 801f87c:	f000 80dd 	beq.w	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f880:	2fff      	cmp	r7, #255	; 0xff
 801f882:	d01a      	beq.n	801f8ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f884:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f88c:	fb07 fc0c 	mul.w	ip, r7, ip
 801f890:	435f      	muls	r7, r3
 801f892:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f896:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f89a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f89e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f8a2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f8a6:	4463      	add	r3, ip
 801f8a8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f8ac:	0a1b      	lsrs	r3, r3, #8
 801f8ae:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f8b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f8b6:	ea43 030b 	orr.w	r3, r3, fp
 801f8ba:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f8be:	d01e      	beq.n	801f8fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f8c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f8c2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f8c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f8ca:	fb0e fb0b 	mul.w	fp, lr, fp
 801f8ce:	fb0e fe07 	mul.w	lr, lr, r7
 801f8d2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f8d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f8da:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f8de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f8e2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f8e6:	44dc      	add	ip, fp
 801f8e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f8ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8f0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f8f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f8f8:	ea4c 070e 	orr.w	r7, ip, lr
 801f8fc:	970e      	str	r7, [sp, #56]	; 0x38
 801f8fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f902:	d01e      	beq.n	801f942 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f904:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f906:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f90a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f90e:	fb09 fe0e 	mul.w	lr, r9, lr
 801f912:	fb09 f907 	mul.w	r9, r9, r7
 801f916:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f91a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f91e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f922:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f926:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f92a:	44f4      	add	ip, lr
 801f92c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f930:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f934:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f938:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f93c:	ea4c 0709 	orr.w	r7, ip, r9
 801f940:	970b      	str	r7, [sp, #44]	; 0x2c
 801f942:	2dff      	cmp	r5, #255	; 0xff
 801f944:	d01c      	beq.n	801f980 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f946:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f948:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f94c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f950:	fb05 fe0e 	mul.w	lr, r5, lr
 801f954:	437d      	muls	r5, r7
 801f956:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f95a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f95e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801f962:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f966:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f96a:	44f4      	add	ip, lr
 801f96c:	0a2d      	lsrs	r5, r5, #8
 801f96e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f972:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f97a:	ea4c 0505 	orr.w	r5, ip, r5
 801f97e:	950f      	str	r5, [sp, #60]	; 0x3c
 801f980:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f982:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f98a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f98e:	fb08 f505 	mul.w	r5, r8, r5
 801f992:	fb02 5507 	mla	r5, r2, r7, r5
 801f996:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f998:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f99c:	fb01 5507 	mla	r5, r1, r7, r5
 801f9a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f9a2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f9a6:	fb0a 5507 	mla	r5, sl, r7, r5
 801f9aa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f9ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f9b0:	0a2d      	lsrs	r5, r5, #8
 801f9b2:	fb08 f807 	mul.w	r8, r8, r7
 801f9b6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f9ba:	fb02 8303 	mla	r3, r2, r3, r8
 801f9be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f9c0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f9c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f9c6:	fb01 330c 	mla	r3, r1, ip, r3
 801f9ca:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f9ce:	fb0a 3a01 	mla	sl, sl, r1, r3
 801f9d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f9d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f9d6:	4343      	muls	r3, r0
 801f9d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f9dc:	1c58      	adds	r0, r3, #1
 801f9de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f9e2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f9e6:	ea45 050a 	orr.w	r5, r5, sl
 801f9ea:	7833      	ldrb	r3, [r6, #0]
 801f9ec:	b2ea      	uxtb	r2, r5
 801f9ee:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f9f2:	fb12 f201 	smulbb	r2, r2, r1
 801f9f6:	b2c0      	uxtb	r0, r0
 801f9f8:	fb03 2300 	mla	r3, r3, r0, r2
 801f9fc:	b29b      	uxth	r3, r3
 801f9fe:	1c5a      	adds	r2, r3, #1
 801fa00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa04:	7872      	ldrb	r2, [r6, #1]
 801fa06:	fb12 f200 	smulbb	r2, r2, r0
 801fa0a:	121b      	asrs	r3, r3, #8
 801fa0c:	7033      	strb	r3, [r6, #0]
 801fa0e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fa12:	0c2d      	lsrs	r5, r5, #16
 801fa14:	fb03 2301 	mla	r3, r3, r1, r2
 801fa18:	b29b      	uxth	r3, r3
 801fa1a:	1c5a      	adds	r2, r3, #1
 801fa1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa20:	121b      	asrs	r3, r3, #8
 801fa22:	7073      	strb	r3, [r6, #1]
 801fa24:	78b3      	ldrb	r3, [r6, #2]
 801fa26:	fb13 f000 	smulbb	r0, r3, r0
 801fa2a:	fb05 0501 	mla	r5, r5, r1, r0
 801fa2e:	b2ad      	uxth	r5, r5
 801fa30:	1c6b      	adds	r3, r5, #1
 801fa32:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fa36:	122d      	asrs	r5, r5, #8
 801fa38:	70b5      	strb	r5, [r6, #2]
 801fa3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fa3c:	3603      	adds	r6, #3
 801fa3e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fa40:	4413      	add	r3, r2
 801fa42:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fa44:	932d      	str	r3, [sp, #180]	; 0xb4
 801fa46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fa48:	4413      	add	r3, r2
 801fa4a:	932e      	str	r3, [sp, #184]	; 0xb8
 801fa4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fa4e:	3b01      	subs	r3, #1
 801fa50:	9316      	str	r3, [sp, #88]	; 0x58
 801fa52:	e6b7      	b.n	801f7c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801fa54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fa56:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fa58:	4413      	add	r3, r2
 801fa5a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fa5c:	932d      	str	r3, [sp, #180]	; 0xb4
 801fa5e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fa60:	4413      	add	r3, r2
 801fa62:	932e      	str	r3, [sp, #184]	; 0xb8
 801fa64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa66:	3b01      	subs	r3, #1
 801fa68:	930a      	str	r3, [sp, #40]	; 0x28
 801fa6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa6c:	3303      	adds	r3, #3
 801fa6e:	930d      	str	r3, [sp, #52]	; 0x34
 801fa70:	e659      	b.n	801f726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801fa72:	f47f ae6b 	bne.w	801f74c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801fa76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	f340 81a6 	ble.w	801fdca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801fa7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fa82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa84:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fa88:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fa8c:	eef0 6a48 	vmov.f32	s13, s16
 801fa90:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fa94:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fa98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa9c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801faa0:	eef0 6a68 	vmov.f32	s13, s17
 801faa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801faa8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801faac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fab0:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fab4:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fab8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fabc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fac0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fac4:	ee18 2a10 	vmov	r2, s16
 801fac8:	eeb0 8a47 	vmov.f32	s16, s14
 801facc:	fb92 f3f3 	sdiv	r3, r2, r3
 801fad0:	ee18 2a90 	vmov	r2, s17
 801fad4:	932f      	str	r3, [sp, #188]	; 0xbc
 801fad6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fad8:	eef0 8a67 	vmov.f32	s17, s15
 801fadc:	fb92 f3f3 	sdiv	r3, r2, r3
 801fae0:	9330      	str	r3, [sp, #192]	; 0xc0
 801fae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fae4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fae6:	3b01      	subs	r3, #1
 801fae8:	9314      	str	r3, [sp, #80]	; 0x50
 801faea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801faec:	bf08      	it	eq
 801faee:	4613      	moveq	r3, r2
 801faf0:	930a      	str	r3, [sp, #40]	; 0x28
 801faf2:	e611      	b.n	801f718 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801faf4:	b161      	cbz	r1, 801fb10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801faf6:	5d2a      	ldrb	r2, [r5, r4]
 801faf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fafa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fafe:	25ff      	movs	r5, #255	; 0xff
 801fb00:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fb04:	920b      	str	r2, [sp, #44]	; 0x2c
 801fb06:	46ae      	mov	lr, r5
 801fb08:	e69d      	b.n	801f846 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801fb0a:	25ff      	movs	r5, #255	; 0xff
 801fb0c:	46a9      	mov	r9, r5
 801fb0e:	e69a      	b.n	801f846 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801fb10:	25ff      	movs	r5, #255	; 0xff
 801fb12:	46a9      	mov	r9, r5
 801fb14:	e7f7      	b.n	801fb06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801fb16:	1c57      	adds	r7, r2, #1
 801fb18:	d18f      	bne.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fb1a:	4294      	cmp	r4, r2
 801fb1c:	dd8d      	ble.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fb1e:	1c5d      	adds	r5, r3, #1
 801fb20:	db8b      	blt.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fb22:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fb24:	429d      	cmp	r5, r3
 801fb26:	dd88      	ble.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fb28:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801fb2a:	9202      	str	r2, [sp, #8]
 801fb2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb2e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801fb32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fb34:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fb36:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801fb3a:	e9cd 4300 	strd	r4, r3, [sp]
 801fb3e:	4631      	mov	r1, r6
 801fb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb42:	f7ff fc63 	bl	801f40c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801fb46:	e778      	b.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fb48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fb4a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fb4c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fb50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb52:	1412      	asrs	r2, r2, #16
 801fb54:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801fb58:	141b      	asrs	r3, r3, #16
 801fb5a:	fb04 2303 	mla	r3, r4, r3, r2
 801fb5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb60:	18d5      	adds	r5, r2, r3
 801fb62:	5cd3      	ldrb	r3, [r2, r3]
 801fb64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fb6a:	0e1e      	lsrs	r6, r3, #24
 801fb6c:	2900      	cmp	r1, #0
 801fb6e:	f000 811b 	beq.w	801fda8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801fb72:	786a      	ldrb	r2, [r5, #1]
 801fb74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb76:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fb7a:	9210      	str	r2, [sp, #64]	; 0x40
 801fb7c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fb80:	2800      	cmp	r0, #0
 801fb82:	f000 811c 	beq.w	801fdbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801fb86:	192a      	adds	r2, r5, r4
 801fb88:	5d2d      	ldrb	r5, [r5, r4]
 801fb8a:	7852      	ldrb	r2, [r2, #1]
 801fb8c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fb90:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fb94:	950c      	str	r5, [sp, #48]	; 0x30
 801fb96:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fb9a:	0e15      	lsrs	r5, r2, #24
 801fb9c:	9211      	str	r2, [sp, #68]	; 0x44
 801fb9e:	b289      	uxth	r1, r1
 801fba0:	b280      	uxth	r0, r0
 801fba2:	fb01 fa00 	mul.w	sl, r1, r0
 801fba6:	0109      	lsls	r1, r1, #4
 801fba8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fbac:	eba1 080a 	sub.w	r8, r1, sl
 801fbb0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fbb4:	b280      	uxth	r0, r0
 801fbb6:	fa1f f888 	uxth.w	r8, r8
 801fbba:	1a12      	subs	r2, r2, r0
 801fbbc:	fb08 f10c 	mul.w	r1, r8, ip
 801fbc0:	b292      	uxth	r2, r2
 801fbc2:	fb02 1106 	mla	r1, r2, r6, r1
 801fbc6:	fb00 1109 	mla	r1, r0, r9, r1
 801fbca:	fb0a 1105 	mla	r1, sl, r5, r1
 801fbce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fbd2:	2900      	cmp	r1, #0
 801fbd4:	f000 80da 	beq.w	801fd8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801fbd8:	2eff      	cmp	r6, #255	; 0xff
 801fbda:	d016      	beq.n	801fc0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801fbdc:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fbe0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fbe4:	4377      	muls	r7, r6
 801fbe6:	435e      	muls	r6, r3
 801fbe8:	0a3b      	lsrs	r3, r7, #8
 801fbea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fbee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fbf2:	443b      	add	r3, r7
 801fbf4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fbf8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fbfc:	0a1b      	lsrs	r3, r3, #8
 801fbfe:	0a3f      	lsrs	r7, r7, #8
 801fc00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fc04:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fc08:	433b      	orrs	r3, r7
 801fc0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fc0e:	d01d      	beq.n	801fc4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801fc10:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fc12:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fc14:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fc18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fc1c:	fb0c f606 	mul.w	r6, ip, r6
 801fc20:	fb0c fc07 	mul.w	ip, ip, r7
 801fc24:	0a37      	lsrs	r7, r6, #8
 801fc26:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fc2a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fc2e:	4437      	add	r7, r6
 801fc30:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801fc34:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801fc38:	0a3f      	lsrs	r7, r7, #8
 801fc3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc3e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fc42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fc46:	ea47 060c 	orr.w	r6, r7, ip
 801fc4a:	9610      	str	r6, [sp, #64]	; 0x40
 801fc4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fc50:	d01d      	beq.n	801fc8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801fc52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fc54:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fc58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fc5c:	fb09 fc0c 	mul.w	ip, r9, ip
 801fc60:	fb09 f906 	mul.w	r9, r9, r6
 801fc64:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fc68:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fc6c:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801fc70:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fc74:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fc78:	4467      	add	r7, ip
 801fc7a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc7e:	0a3f      	lsrs	r7, r7, #8
 801fc80:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fc84:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fc88:	ea47 0609 	orr.w	r6, r7, r9
 801fc8c:	960c      	str	r6, [sp, #48]	; 0x30
 801fc8e:	2dff      	cmp	r5, #255	; 0xff
 801fc90:	d01a      	beq.n	801fcc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801fc92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fc94:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fc98:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fc9c:	fb05 fc0c 	mul.w	ip, r5, ip
 801fca0:	4375      	muls	r5, r6
 801fca2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fca6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fcaa:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fcae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fcb2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fcb6:	4467      	add	r7, ip
 801fcb8:	0a2d      	lsrs	r5, r5, #8
 801fcba:	0a3f      	lsrs	r7, r7, #8
 801fcbc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fcc0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fcc4:	433d      	orrs	r5, r7
 801fcc6:	9511      	str	r5, [sp, #68]	; 0x44
 801fcc8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fcca:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fcce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fcd2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fcd6:	fb08 f505 	mul.w	r5, r8, r5
 801fcda:	fb02 5506 	mla	r5, r2, r6, r5
 801fcde:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fce0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fce4:	fb00 5506 	mla	r5, r0, r6, r5
 801fce8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fcea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fcee:	fb0a 5506 	mla	r5, sl, r6, r5
 801fcf2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fcf4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fcf8:	0a2d      	lsrs	r5, r5, #8
 801fcfa:	fb08 f806 	mul.w	r8, r8, r6
 801fcfe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fd02:	fb02 8303 	mla	r3, r2, r3, r8
 801fd06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd08:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fd0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd0e:	fb00 3307 	mla	r3, r0, r7, r3
 801fd12:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fd16:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801fd1a:	fb01 f30b 	mul.w	r3, r1, fp
 801fd1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd22:	1c59      	adds	r1, r3, #1
 801fd24:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fd28:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fd2c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fd30:	ea45 050c 	orr.w	r5, r5, ip
 801fd34:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fd38:	b2ea      	uxtb	r2, r5
 801fd3a:	b2c9      	uxtb	r1, r1
 801fd3c:	fb12 f20b 	smulbb	r2, r2, fp
 801fd40:	fb03 2301 	mla	r3, r3, r1, r2
 801fd44:	b29b      	uxth	r3, r3
 801fd46:	1c5a      	adds	r2, r3, #1
 801fd48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fd4c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fd50:	fb12 f201 	smulbb	r2, r2, r1
 801fd54:	121b      	asrs	r3, r3, #8
 801fd56:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fd5a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fd5e:	0c2d      	lsrs	r5, r5, #16
 801fd60:	fb03 230b 	mla	r3, r3, fp, r2
 801fd64:	b29b      	uxth	r3, r3
 801fd66:	1c5a      	adds	r2, r3, #1
 801fd68:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fd6c:	121b      	asrs	r3, r3, #8
 801fd6e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fd72:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fd76:	fb13 f101 	smulbb	r1, r3, r1
 801fd7a:	fb05 150b 	mla	r5, r5, fp, r1
 801fd7e:	b2ad      	uxth	r5, r5
 801fd80:	1c69      	adds	r1, r5, #1
 801fd82:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fd86:	122d      	asrs	r5, r5, #8
 801fd88:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fd8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fd8e:	f10e 0e03 	add.w	lr, lr, #3
 801fd92:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fd94:	4413      	add	r3, r2
 801fd96:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fd98:	932d      	str	r3, [sp, #180]	; 0xb4
 801fd9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fd9c:	4413      	add	r3, r2
 801fd9e:	932e      	str	r3, [sp, #184]	; 0xb8
 801fda0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fda2:	3b01      	subs	r3, #1
 801fda4:	9315      	str	r3, [sp, #84]	; 0x54
 801fda6:	e4ed      	b.n	801f784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fda8:	b160      	cbz	r0, 801fdc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801fdaa:	5d2a      	ldrb	r2, [r5, r4]
 801fdac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fdae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fdb2:	25ff      	movs	r5, #255	; 0xff
 801fdb4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fdb8:	920c      	str	r2, [sp, #48]	; 0x30
 801fdba:	46ac      	mov	ip, r5
 801fdbc:	e6ef      	b.n	801fb9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fdbe:	25ff      	movs	r5, #255	; 0xff
 801fdc0:	46a9      	mov	r9, r5
 801fdc2:	e6ec      	b.n	801fb9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fdc4:	25ff      	movs	r5, #255	; 0xff
 801fdc6:	46a9      	mov	r9, r5
 801fdc8:	e7f7      	b.n	801fdba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801fdca:	b01b      	add	sp, #108	; 0x6c
 801fdcc:	ecbd 8b08 	vpop	{d8-d11}
 801fdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fdd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdd8:	b085      	sub	sp, #20
 801fdda:	7888      	ldrb	r0, [r1, #2]
 801fddc:	4692      	mov	sl, r2
 801fdde:	4698      	mov	r8, r3
 801fde0:	9000      	str	r0, [sp, #0]
 801fde2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fde6:	7848      	ldrb	r0, [r1, #1]
 801fde8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fdec:	9001      	str	r0, [sp, #4]
 801fdee:	7808      	ldrb	r0, [r1, #0]
 801fdf0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801fdf4:	9002      	str	r0, [sp, #8]
 801fdf6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fdfa:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801fdfe:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801fe02:	fb04 560c 	mla	r6, r4, ip, r5
 801fe06:	2c00      	cmp	r4, #0
 801fe08:	eb02 0e06 	add.w	lr, r2, r6
 801fe0c:	9a00      	ldr	r2, [sp, #0]
 801fe0e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801fe12:	9a01      	ldr	r2, [sp, #4]
 801fe14:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801fe18:	db3e      	blt.n	801fe98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fe1a:	45a1      	cmp	r9, r4
 801fe1c:	dd3c      	ble.n	801fe98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fe1e:	2d00      	cmp	r5, #0
 801fe20:	db38      	blt.n	801fe94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fe22:	45ac      	cmp	ip, r5
 801fe24:	dd36      	ble.n	801fe94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fe26:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801fe2a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801fe2e:	1c6e      	adds	r6, r5, #1
 801fe30:	d435      	bmi.n	801fe9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fe32:	45b4      	cmp	ip, r6
 801fe34:	dd33      	ble.n	801fe9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fe36:	b393      	cbz	r3, 801fe9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fe38:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801fe3c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801fe40:	3401      	adds	r4, #1
 801fe42:	d430      	bmi.n	801fea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fe44:	45a1      	cmp	r9, r4
 801fe46:	dd2e      	ble.n	801fea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fe48:	b36f      	cbz	r7, 801fea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fe4a:	2d00      	cmp	r5, #0
 801fe4c:	db29      	blt.n	801fea2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fe4e:	45ac      	cmp	ip, r5
 801fe50:	dd27      	ble.n	801fea2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fe52:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801fe56:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801fe5a:	3501      	adds	r5, #1
 801fe5c:	d407      	bmi.n	801fe6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fe5e:	45ac      	cmp	ip, r5
 801fe60:	dd05      	ble.n	801fe6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fe62:	b123      	cbz	r3, 801fe6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fe64:	44f4      	add	ip, lr
 801fe66:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fe6a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801fe6e:	2b0f      	cmp	r3, #15
 801fe70:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fe74:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fe78:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fe7c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fe80:	d801      	bhi.n	801fe86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801fe82:	2f0f      	cmp	r7, #15
 801fe84:	d911      	bls.n	801feaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801fe86:	4b76      	ldr	r3, [pc, #472]	; (8020060 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801fe88:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fe8c:	4a75      	ldr	r2, [pc, #468]	; (8020064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801fe8e:	4876      	ldr	r0, [pc, #472]	; (8020068 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801fe90:	f004 ff94 	bl	8024dbc <__assert_func>
 801fe94:	4602      	mov	r2, r0
 801fe96:	e7ca      	b.n	801fe2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801fe98:	4606      	mov	r6, r0
 801fe9a:	4602      	mov	r2, r0
 801fe9c:	e7d0      	b.n	801fe40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fe9e:	4606      	mov	r6, r0
 801fea0:	e7ce      	b.n	801fe40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fea2:	4604      	mov	r4, r0
 801fea4:	e7d9      	b.n	801fe5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801fea6:	4604      	mov	r4, r0
 801fea8:	e7e1      	b.n	801fe6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801feaa:	b29b      	uxth	r3, r3
 801feac:	b2bf      	uxth	r7, r7
 801feae:	fb07 fe03 	mul.w	lr, r7, r3
 801feb2:	011b      	lsls	r3, r3, #4
 801feb4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801feb8:	eba3 0c0e 	sub.w	ip, r3, lr
 801febc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801fec0:	b2bf      	uxth	r7, r7
 801fec2:	fa1f fc8c 	uxth.w	ip, ip
 801fec6:	1bed      	subs	r5, r5, r7
 801fec8:	fb0c f30a 	mul.w	r3, ip, sl
 801fecc:	b2ad      	uxth	r5, r5
 801fece:	fb05 330b 	mla	r3, r5, fp, r3
 801fed2:	fb07 3309 	mla	r3, r7, r9, r3
 801fed6:	fb0e 3308 	mla	r3, lr, r8, r3
 801feda:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fede:	9303      	str	r3, [sp, #12]
 801fee0:	2b00      	cmp	r3, #0
 801fee2:	f000 80b9 	beq.w	8020058 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801fee6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801feea:	d018      	beq.n	801ff1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801feec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fef0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fef4:	fb0b f303 	mul.w	r3, fp, r3
 801fef8:	fb0b fb02 	mul.w	fp, fp, r2
 801fefc:	0a1a      	lsrs	r2, r3, #8
 801fefe:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801ff02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ff06:	441a      	add	r2, r3
 801ff08:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801ff0c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801ff10:	0a12      	lsrs	r2, r2, #8
 801ff12:	0a1b      	lsrs	r3, r3, #8
 801ff14:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ff18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff1c:	431a      	orrs	r2, r3
 801ff1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ff22:	d019      	beq.n	801ff58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801ff24:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801ff28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ff2c:	fb0a fb0b 	mul.w	fp, sl, fp
 801ff30:	fb0a fa06 	mul.w	sl, sl, r6
 801ff34:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801ff38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ff3c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801ff40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ff44:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ff48:	445e      	add	r6, fp
 801ff4a:	0a1b      	lsrs	r3, r3, #8
 801ff4c:	0a36      	lsrs	r6, r6, #8
 801ff4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ff56:	431e      	orrs	r6, r3
 801ff58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ff5c:	d019      	beq.n	801ff92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801ff5e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801ff62:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ff66:	fb09 fa0a 	mul.w	sl, r9, sl
 801ff6a:	fb09 f904 	mul.w	r9, r9, r4
 801ff6e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801ff72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ff76:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801ff7a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ff7e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801ff82:	4454      	add	r4, sl
 801ff84:	0a1b      	lsrs	r3, r3, #8
 801ff86:	0a24      	lsrs	r4, r4, #8
 801ff88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff8c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ff90:	431c      	orrs	r4, r3
 801ff92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ff96:	d019      	beq.n	801ffcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801ff98:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801ff9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ffa0:	fb08 f909 	mul.w	r9, r8, r9
 801ffa4:	fb08 f800 	mul.w	r8, r8, r0
 801ffa8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801ffac:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801ffb0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801ffb4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ffb8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801ffbc:	4448      	add	r0, r9
 801ffbe:	0a1b      	lsrs	r3, r3, #8
 801ffc0:	0a00      	lsrs	r0, r0, #8
 801ffc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ffc6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ffca:	4318      	orrs	r0, r3
 801ffcc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801ffd0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ffd4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ffd8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ffdc:	fb0c f808 	mul.w	r8, ip, r8
 801ffe0:	fb0c f606 	mul.w	r6, ip, r6
 801ffe4:	fb05 8803 	mla	r8, r5, r3, r8
 801ffe8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801ffec:	fb05 6202 	mla	r2, r5, r2, r6
 801fff0:	fb07 8803 	mla	r8, r7, r3, r8
 801fff4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801fff8:	fb0e 8303 	mla	r3, lr, r3, r8
 801fffc:	0a1b      	lsrs	r3, r3, #8
 801fffe:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020002:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020006:	9c02      	ldr	r4, [sp, #8]
 8020008:	fb07 2703 	mla	r7, r7, r3, r2
 802000c:	9a03      	ldr	r2, [sp, #12]
 802000e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020012:	43d2      	mvns	r2, r2
 8020014:	fb0e 7303 	mla	r3, lr, r3, r7
 8020018:	b2d2      	uxtb	r2, r2
 802001a:	0a1b      	lsrs	r3, r3, #8
 802001c:	4354      	muls	r4, r2
 802001e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020022:	1c60      	adds	r0, r4, #1
 8020024:	ea48 0303 	orr.w	r3, r8, r3
 8020028:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802002c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020030:	7008      	strb	r0, [r1, #0]
 8020032:	9801      	ldr	r0, [sp, #4]
 8020034:	4350      	muls	r0, r2
 8020036:	1c44      	adds	r4, r0, #1
 8020038:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 802003c:	0a18      	lsrs	r0, r3, #8
 802003e:	0c1b      	lsrs	r3, r3, #16
 8020040:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020044:	7048      	strb	r0, [r1, #1]
 8020046:	9800      	ldr	r0, [sp, #0]
 8020048:	4350      	muls	r0, r2
 802004a:	4602      	mov	r2, r0
 802004c:	3001      	adds	r0, #1
 802004e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020052:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020056:	708b      	strb	r3, [r1, #2]
 8020058:	b005      	add	sp, #20
 802005a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802005e:	bf00      	nop
 8020060:	080297ab 	.word	0x080297ab
 8020064:	08029ca2 	.word	0x08029ca2
 8020068:	08029874 	.word	0x08029874

0802006c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802006c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020070:	ed2d 8b08 	vpush	{d8-d11}
 8020074:	b097      	sub	sp, #92	; 0x5c
 8020076:	eeb0 aa40 	vmov.f32	s20, s0
 802007a:	eef0 9a60 	vmov.f32	s19, s1
 802007e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8020080:	eeb0 9a41 	vmov.f32	s18, s2
 8020084:	9308      	str	r3, [sp, #32]
 8020086:	eeb0 8a62 	vmov.f32	s16, s5
 802008a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802008e:	eef0 8a43 	vmov.f32	s17, s6
 8020092:	9015      	str	r0, [sp, #84]	; 0x54
 8020094:	eef0 ba44 	vmov.f32	s23, s8
 8020098:	6868      	ldr	r0, [r5, #4]
 802009a:	eeb0 ba64 	vmov.f32	s22, s9
 802009e:	9112      	str	r1, [sp, #72]	; 0x48
 80200a0:	eef0 aa45 	vmov.f32	s21, s10
 80200a4:	9310      	str	r3, [sp, #64]	; 0x40
 80200a6:	9214      	str	r2, [sp, #80]	; 0x50
 80200a8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80200aa:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80200ae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80200b2:	fb00 1303 	mla	r3, r0, r3, r1
 80200b6:	6829      	ldr	r1, [r5, #0]
 80200b8:	6855      	ldr	r5, [r2, #4]
 80200ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200be:	3504      	adds	r5, #4
 80200c0:	18cb      	adds	r3, r1, r3
 80200c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80200c4:	6813      	ldr	r3, [r2, #0]
 80200c6:	9311      	str	r3, [sp, #68]	; 0x44
 80200c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	dc03      	bgt.n	80200d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80200ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	f340 8333 	ble.w	802073c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80200d6:	9b08      	ldr	r3, [sp, #32]
 80200d8:	2b00      	cmp	r3, #0
 80200da:	f340 8190 	ble.w	80203fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80200de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80200e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80200e2:	1412      	asrs	r2, r2, #16
 80200e4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80200e8:	d42f      	bmi.n	802014a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80200ea:	1c51      	adds	r1, r2, #1
 80200ec:	428c      	cmp	r4, r1
 80200ee:	dd2f      	ble.n	8020150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	db2d      	blt.n	8020150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80200f4:	1c59      	adds	r1, r3, #1
 80200f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80200f8:	4288      	cmp	r0, r1
 80200fa:	dd29      	ble.n	8020150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80200fc:	9b08      	ldr	r3, [sp, #32]
 80200fe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020100:	3b01      	subs	r3, #1
 8020102:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020104:	fb02 1203 	mla	r2, r2, r3, r1
 8020108:	1412      	asrs	r2, r2, #16
 802010a:	d42b      	bmi.n	8020164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802010c:	3201      	adds	r2, #1
 802010e:	4294      	cmp	r4, r2
 8020110:	dd28      	ble.n	8020164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020112:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020114:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020116:	fb02 1303 	mla	r3, r2, r3, r1
 802011a:	141b      	asrs	r3, r3, #16
 802011c:	d422      	bmi.n	8020164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802011e:	3301      	adds	r3, #1
 8020120:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020122:	429a      	cmp	r2, r3
 8020124:	dd1e      	ble.n	8020164 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020128:	f103 0803 	add.w	r8, r3, #3
 802012c:	9b08      	ldr	r3, [sp, #32]
 802012e:	9307      	str	r3, [sp, #28]
 8020130:	9b07      	ldr	r3, [sp, #28]
 8020132:	2b00      	cmp	r3, #0
 8020134:	f300 81ca 	bgt.w	80204cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020138:	9b08      	ldr	r3, [sp, #32]
 802013a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802013c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020140:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020144:	441a      	add	r2, r3
 8020146:	920b      	str	r2, [sp, #44]	; 0x2c
 8020148:	e15b      	b.n	8020402 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 802014a:	1c51      	adds	r1, r2, #1
 802014c:	f040 8148 	bne.w	80203e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020150:	42a2      	cmp	r2, r4
 8020152:	f280 8145 	bge.w	80203e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020156:	1c5a      	adds	r2, r3, #1
 8020158:	f2c0 8142 	blt.w	80203e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802015c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802015e:	4293      	cmp	r3, r2
 8020160:	f280 813e 	bge.w	80203e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020164:	9b08      	ldr	r3, [sp, #32]
 8020166:	9313      	str	r3, [sp, #76]	; 0x4c
 8020168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802016a:	9307      	str	r3, [sp, #28]
 802016c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802016e:	2b00      	cmp	r3, #0
 8020170:	dde2      	ble.n	8020138 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020172:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020174:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020176:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802017a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802017c:	141b      	asrs	r3, r3, #16
 802017e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020182:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020184:	1412      	asrs	r2, r2, #16
 8020186:	f100 818b 	bmi.w	80204a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 802018a:	1c56      	adds	r6, r2, #1
 802018c:	42b4      	cmp	r4, r6
 802018e:	f340 8189 	ble.w	80204a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020192:	2b00      	cmp	r3, #0
 8020194:	f2c0 8186 	blt.w	80204a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020198:	1c5e      	adds	r6, r3, #1
 802019a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802019c:	42b7      	cmp	r7, r6
 802019e:	f340 8181 	ble.w	80204a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80201a2:	fb03 2304 	mla	r3, r3, r4, r2
 80201a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201a8:	18d6      	adds	r6, r2, r3
 80201aa:	5cd3      	ldrb	r3, [r2, r3]
 80201ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80201b0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80201b4:	2900      	cmp	r1, #0
 80201b6:	f000 8163 	beq.w	8020480 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80201ba:	7872      	ldrb	r2, [r6, #1]
 80201bc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80201c0:	920c      	str	r2, [sp, #48]	; 0x30
 80201c2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80201c6:	2800      	cmp	r0, #0
 80201c8:	f000 8164 	beq.w	8020494 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 80201cc:	1932      	adds	r2, r6, r4
 80201ce:	5d36      	ldrb	r6, [r6, r4]
 80201d0:	7852      	ldrb	r2, [r2, #1]
 80201d2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80201d6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80201da:	9609      	str	r6, [sp, #36]	; 0x24
 80201dc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80201e0:	0e16      	lsrs	r6, r2, #24
 80201e2:	920d      	str	r2, [sp, #52]	; 0x34
 80201e4:	b289      	uxth	r1, r1
 80201e6:	b280      	uxth	r0, r0
 80201e8:	fb01 fb00 	mul.w	fp, r1, r0
 80201ec:	0109      	lsls	r1, r1, #4
 80201ee:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80201f2:	eba1 090b 	sub.w	r9, r1, fp
 80201f6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80201fa:	b280      	uxth	r0, r0
 80201fc:	fa1f f989 	uxth.w	r9, r9
 8020200:	1a12      	subs	r2, r2, r0
 8020202:	fb09 f108 	mul.w	r1, r9, r8
 8020206:	b292      	uxth	r2, r2
 8020208:	fb02 110c 	mla	r1, r2, ip, r1
 802020c:	fb00 110a 	mla	r1, r0, sl, r1
 8020210:	fb0b 1106 	mla	r1, fp, r6, r1
 8020214:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020218:	2900      	cmp	r1, #0
 802021a:	f000 80d2 	beq.w	80203c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802021e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020222:	d01b      	beq.n	802025c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020224:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020228:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802022c:	fb0c fe0e 	mul.w	lr, ip, lr
 8020230:	fb0c fc03 	mul.w	ip, ip, r3
 8020234:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020238:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802023c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020240:	4473      	add	r3, lr
 8020242:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020246:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802024a:	0a1b      	lsrs	r3, r3, #8
 802024c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020250:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020254:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020258:	ea43 030e 	orr.w	r3, r3, lr
 802025c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020260:	d01e      	beq.n	80202a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020262:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020264:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020268:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 802026c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020270:	fb08 f80e 	mul.w	r8, r8, lr
 8020274:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020278:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802027c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020280:	44e6      	add	lr, ip
 8020282:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020286:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802028a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802028e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020292:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020296:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802029a:	ea4e 0708 	orr.w	r7, lr, r8
 802029e:	970c      	str	r7, [sp, #48]	; 0x30
 80202a0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80202a4:	d01e      	beq.n	80202e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80202a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80202a8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80202ac:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80202b0:	fb0a f808 	mul.w	r8, sl, r8
 80202b4:	fb0a fa0c 	mul.w	sl, sl, ip
 80202b8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80202bc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80202c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80202c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80202c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80202cc:	44c6      	add	lr, r8
 80202ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80202da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80202de:	ea4e 070a 	orr.w	r7, lr, sl
 80202e2:	9709      	str	r7, [sp, #36]	; 0x24
 80202e4:	2eff      	cmp	r6, #255	; 0xff
 80202e6:	d01d      	beq.n	8020324 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 80202e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80202ea:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80202ee:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80202f2:	fb06 f808 	mul.w	r8, r6, r8
 80202f6:	fb06 f60c 	mul.w	r6, r6, ip
 80202fa:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80202fe:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020302:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020306:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802030a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802030e:	44c6      	add	lr, r8
 8020310:	0a36      	lsrs	r6, r6, #8
 8020312:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020316:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802031a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802031e:	ea4e 0606 	orr.w	r6, lr, r6
 8020322:	960d      	str	r6, [sp, #52]	; 0x34
 8020324:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020326:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802032a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802032c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020330:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020334:	43c9      	mvns	r1, r1
 8020336:	fb09 f606 	mul.w	r6, r9, r6
 802033a:	b2c9      	uxtb	r1, r1
 802033c:	fb02 660c 	mla	r6, r2, ip, r6
 8020340:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020344:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020346:	fb00 660c 	mla	r6, r0, ip, r6
 802034a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802034e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020350:	fb0b 660c 	mla	r6, fp, ip, r6
 8020354:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020358:	fb09 f90c 	mul.w	r9, r9, ip
 802035c:	0a36      	lsrs	r6, r6, #8
 802035e:	fb02 9303 	mla	r3, r2, r3, r9
 8020362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020364:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020368:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802036c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802036e:	fb00 330e 	mla	r3, r0, lr, r3
 8020372:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020376:	fb0b 3b00 	mla	fp, fp, r0, r3
 802037a:	9b07      	ldr	r3, [sp, #28]
 802037c:	781b      	ldrb	r3, [r3, #0]
 802037e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020382:	fb03 f201 	mul.w	r2, r3, r1
 8020386:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802038a:	1c53      	adds	r3, r2, #1
 802038c:	ea46 060b 	orr.w	r6, r6, fp
 8020390:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020394:	9a07      	ldr	r2, [sp, #28]
 8020396:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802039a:	7013      	strb	r3, [r2, #0]
 802039c:	7853      	ldrb	r3, [r2, #1]
 802039e:	434b      	muls	r3, r1
 80203a0:	1c5a      	adds	r2, r3, #1
 80203a2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80203a6:	0a33      	lsrs	r3, r6, #8
 80203a8:	0c36      	lsrs	r6, r6, #16
 80203aa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80203ae:	9a07      	ldr	r2, [sp, #28]
 80203b0:	7053      	strb	r3, [r2, #1]
 80203b2:	7893      	ldrb	r3, [r2, #2]
 80203b4:	4359      	muls	r1, r3
 80203b6:	1c4b      	adds	r3, r1, #1
 80203b8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80203bc:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80203c0:	7096      	strb	r6, [r2, #2]
 80203c2:	9b07      	ldr	r3, [sp, #28]
 80203c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80203c6:	3303      	adds	r3, #3
 80203c8:	9307      	str	r3, [sp, #28]
 80203ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80203cc:	4413      	add	r3, r2
 80203ce:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80203d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80203d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80203d4:	4413      	add	r3, r2
 80203d6:	932a      	str	r3, [sp, #168]	; 0xa8
 80203d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80203da:	3b01      	subs	r3, #1
 80203dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80203de:	e6c5      	b.n	802016c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80203e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80203e2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80203e4:	4413      	add	r3, r2
 80203e6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80203e8:	9329      	str	r3, [sp, #164]	; 0xa4
 80203ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80203ec:	4413      	add	r3, r2
 80203ee:	932a      	str	r3, [sp, #168]	; 0xa8
 80203f0:	9b08      	ldr	r3, [sp, #32]
 80203f2:	3b01      	subs	r3, #1
 80203f4:	9308      	str	r3, [sp, #32]
 80203f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203f8:	3303      	adds	r3, #3
 80203fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80203fc:	e66b      	b.n	80200d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80203fe:	f47f ae7d 	bne.w	80200fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020404:	2b00      	cmp	r3, #0
 8020406:	f340 8199 	ble.w	802073c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 802040a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802040e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020410:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020414:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020418:	eef0 6a48 	vmov.f32	s13, s16
 802041c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020420:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020424:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020428:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802042c:	eef0 6a68 	vmov.f32	s13, s17
 8020430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020434:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020438:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802043c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020440:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020444:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020448:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802044c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020450:	ee18 2a10 	vmov	r2, s16
 8020454:	eeb0 8a47 	vmov.f32	s16, s14
 8020458:	fb92 f3f3 	sdiv	r3, r2, r3
 802045c:	ee18 2a90 	vmov	r2, s17
 8020460:	932b      	str	r3, [sp, #172]	; 0xac
 8020462:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020464:	eef0 8a67 	vmov.f32	s17, s15
 8020468:	fb92 f3f3 	sdiv	r3, r2, r3
 802046c:	932c      	str	r3, [sp, #176]	; 0xb0
 802046e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020472:	3b01      	subs	r3, #1
 8020474:	9312      	str	r3, [sp, #72]	; 0x48
 8020476:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020478:	bf08      	it	eq
 802047a:	4613      	moveq	r3, r2
 802047c:	9308      	str	r3, [sp, #32]
 802047e:	e623      	b.n	80200c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020480:	b158      	cbz	r0, 802049a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020482:	5d32      	ldrb	r2, [r6, r4]
 8020484:	26ff      	movs	r6, #255	; 0xff
 8020486:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802048a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802048e:	9209      	str	r2, [sp, #36]	; 0x24
 8020490:	46b0      	mov	r8, r6
 8020492:	e6a7      	b.n	80201e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020494:	26ff      	movs	r6, #255	; 0xff
 8020496:	46b2      	mov	sl, r6
 8020498:	e6a4      	b.n	80201e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 802049a:	26ff      	movs	r6, #255	; 0xff
 802049c:	46b2      	mov	sl, r6
 802049e:	e7f7      	b.n	8020490 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80204a0:	1c57      	adds	r7, r2, #1
 80204a2:	d18e      	bne.n	80203c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80204a4:	4294      	cmp	r4, r2
 80204a6:	dd8c      	ble.n	80203c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80204a8:	1c5e      	adds	r6, r3, #1
 80204aa:	db8a      	blt.n	80203c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80204ac:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80204ae:	429e      	cmp	r6, r3
 80204b0:	dd87      	ble.n	80203c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80204b2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80204b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80204ba:	e9cd 4600 	strd	r4, r6, [sp]
 80204be:	462b      	mov	r3, r5
 80204c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80204c2:	9907      	ldr	r1, [sp, #28]
 80204c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80204c6:	f7ff fc85 	bl	801fdd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80204ca:	e77a      	b.n	80203c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80204cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80204ce:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80204d0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80204d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80204d6:	1409      	asrs	r1, r1, #16
 80204d8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80204dc:	141b      	asrs	r3, r3, #16
 80204de:	fb04 1303 	mla	r3, r4, r3, r1
 80204e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80204e4:	18ce      	adds	r6, r1, r3
 80204e6:	5ccb      	ldrb	r3, [r1, r3]
 80204e8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80204ec:	0e1f      	lsrs	r7, r3, #24
 80204ee:	2a00      	cmp	r2, #0
 80204f0:	f000 8114 	beq.w	802071c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 80204f4:	7871      	ldrb	r1, [r6, #1]
 80204f6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80204fa:	910e      	str	r1, [sp, #56]	; 0x38
 80204fc:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020500:	2800      	cmp	r0, #0
 8020502:	f000 8115 	beq.w	8020730 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020506:	1931      	adds	r1, r6, r4
 8020508:	5d36      	ldrb	r6, [r6, r4]
 802050a:	7849      	ldrb	r1, [r1, #1]
 802050c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020510:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020514:	960a      	str	r6, [sp, #40]	; 0x28
 8020516:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802051a:	0e0e      	lsrs	r6, r1, #24
 802051c:	910f      	str	r1, [sp, #60]	; 0x3c
 802051e:	b292      	uxth	r2, r2
 8020520:	b280      	uxth	r0, r0
 8020522:	fb02 fb00 	mul.w	fp, r2, r0
 8020526:	0112      	lsls	r2, r2, #4
 8020528:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802052c:	eba2 090b 	sub.w	r9, r2, fp
 8020530:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020534:	b280      	uxth	r0, r0
 8020536:	fa1f f989 	uxth.w	r9, r9
 802053a:	1a09      	subs	r1, r1, r0
 802053c:	fb09 f20e 	mul.w	r2, r9, lr
 8020540:	b289      	uxth	r1, r1
 8020542:	fb01 2207 	mla	r2, r1, r7, r2
 8020546:	fb00 220a 	mla	r2, r0, sl, r2
 802054a:	fb0b 2206 	mla	r2, fp, r6, r2
 802054e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020552:	9213      	str	r2, [sp, #76]	; 0x4c
 8020554:	2a00      	cmp	r2, #0
 8020556:	f000 80d4 	beq.w	8020702 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 802055a:	2fff      	cmp	r7, #255	; 0xff
 802055c:	d01a      	beq.n	8020594 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802055e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020566:	fb07 fc0c 	mul.w	ip, r7, ip
 802056a:	435f      	muls	r7, r3
 802056c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020570:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020574:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020578:	4463      	add	r3, ip
 802057a:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802057e:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020582:	0a1b      	lsrs	r3, r3, #8
 8020584:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020588:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802058c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020590:	ea43 030c 	orr.w	r3, r3, ip
 8020594:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020598:	d01f      	beq.n	80205da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 802059a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802059c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802059e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80205a2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80205a6:	fb0e f707 	mul.w	r7, lr, r7
 80205aa:	fb0e fe0c 	mul.w	lr, lr, ip
 80205ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80205b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80205b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205ba:	44bc      	add	ip, r7
 80205bc:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80205c0:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80205c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80205d4:	ea4c 020e 	orr.w	r2, ip, lr
 80205d8:	920e      	str	r2, [sp, #56]	; 0x38
 80205da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80205de:	d01e      	beq.n	802061e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 80205e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205e2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80205e6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80205ea:	fb0a fe0e 	mul.w	lr, sl, lr
 80205ee:	fb0a fa07 	mul.w	sl, sl, r7
 80205f2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80205f6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80205fa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80205fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020602:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020606:	44f4      	add	ip, lr
 8020608:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802060c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020610:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020614:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020618:	ea4c 020a 	orr.w	r2, ip, sl
 802061c:	920a      	str	r2, [sp, #40]	; 0x28
 802061e:	2eff      	cmp	r6, #255	; 0xff
 8020620:	d01c      	beq.n	802065c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8020622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020624:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020628:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802062c:	fb06 fe0e 	mul.w	lr, r6, lr
 8020630:	437e      	muls	r6, r7
 8020632:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020636:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802063a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802063e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020642:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020646:	44f4      	add	ip, lr
 8020648:	0a36      	lsrs	r6, r6, #8
 802064a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802064e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020652:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020656:	ea4c 0206 	orr.w	r2, ip, r6
 802065a:	920f      	str	r2, [sp, #60]	; 0x3c
 802065c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802065e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020666:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802066a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802066c:	fb09 f606 	mul.w	r6, r9, r6
 8020670:	fb01 6607 	mla	r6, r1, r7, r6
 8020674:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802067a:	fb00 6607 	mla	r6, r0, r7, r6
 802067e:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020684:	fb0b 6607 	mla	r6, fp, r7, r6
 8020688:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802068c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802068e:	fb09 f907 	mul.w	r9, r9, r7
 8020692:	0a36      	lsrs	r6, r6, #8
 8020694:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802069a:	fb01 9303 	mla	r3, r1, r3, r9
 802069e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80206a2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80206a6:	fb00 330c 	mla	r3, r0, ip, r3
 80206aa:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80206ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80206b0:	43da      	mvns	r2, r3
 80206b2:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80206b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206ba:	b2d2      	uxtb	r2, r2
 80206bc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80206c0:	fb03 f102 	mul.w	r1, r3, r2
 80206c4:	ea46 060e 	orr.w	r6, r6, lr
 80206c8:	1c4b      	adds	r3, r1, #1
 80206ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80206ce:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80206d2:	f808 3c03 	strb.w	r3, [r8, #-3]
 80206d6:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 80206da:	4353      	muls	r3, r2
 80206dc:	1c59      	adds	r1, r3, #1
 80206de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80206e2:	0a33      	lsrs	r3, r6, #8
 80206e4:	0c36      	lsrs	r6, r6, #16
 80206e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80206ea:	f808 3c02 	strb.w	r3, [r8, #-2]
 80206ee:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80206f2:	435a      	muls	r2, r3
 80206f4:	1c53      	adds	r3, r2, #1
 80206f6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80206fa:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80206fe:	f808 6c01 	strb.w	r6, [r8, #-1]
 8020702:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020704:	f108 0803 	add.w	r8, r8, #3
 8020708:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802070a:	4413      	add	r3, r2
 802070c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802070e:	9329      	str	r3, [sp, #164]	; 0xa4
 8020710:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020712:	4413      	add	r3, r2
 8020714:	932a      	str	r3, [sp, #168]	; 0xa8
 8020716:	9b07      	ldr	r3, [sp, #28]
 8020718:	3b01      	subs	r3, #1
 802071a:	e508      	b.n	802012e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 802071c:	b158      	cbz	r0, 8020736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802071e:	5d31      	ldrb	r1, [r6, r4]
 8020720:	26ff      	movs	r6, #255	; 0xff
 8020722:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020726:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802072a:	910a      	str	r1, [sp, #40]	; 0x28
 802072c:	46b6      	mov	lr, r6
 802072e:	e6f6      	b.n	802051e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020730:	26ff      	movs	r6, #255	; 0xff
 8020732:	46b2      	mov	sl, r6
 8020734:	e6f3      	b.n	802051e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020736:	26ff      	movs	r6, #255	; 0xff
 8020738:	46b2      	mov	sl, r6
 802073a:	e7f7      	b.n	802072c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 802073c:	b017      	add	sp, #92	; 0x5c
 802073e:	ecbd 8b08 	vpop	{d8-d11}
 8020742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020748 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802074c:	b08d      	sub	sp, #52	; 0x34
 802074e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8020752:	9103      	str	r1, [sp, #12]
 8020754:	fb07 5803 	mla	r8, r7, r3, r5
 8020758:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802075c:	9803      	ldr	r0, [sp, #12]
 802075e:	2f00      	cmp	r7, #0
 8020760:	910b      	str	r1, [sp, #44]	; 0x2c
 8020762:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020766:	9903      	ldr	r1, [sp, #12]
 8020768:	9c03      	ldr	r4, [sp, #12]
 802076a:	eb02 0608 	add.w	r6, r2, r8
 802076e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8020772:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8020776:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 802077a:	7809      	ldrb	r1, [r1, #0]
 802077c:	7840      	ldrb	r0, [r0, #1]
 802077e:	78a4      	ldrb	r4, [r4, #2]
 8020780:	db51      	blt.n	8020826 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020782:	45be      	cmp	lr, r7
 8020784:	dd4f      	ble.n	8020826 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020786:	2d00      	cmp	r5, #0
 8020788:	db49      	blt.n	802081e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802078a:	42ab      	cmp	r3, r5
 802078c:	dd47      	ble.n	802081e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802078e:	f812 2008 	ldrb.w	r2, [r2, r8]
 8020792:	9204      	str	r2, [sp, #16]
 8020794:	7872      	ldrb	r2, [r6, #1]
 8020796:	9205      	str	r2, [sp, #20]
 8020798:	78b2      	ldrb	r2, [r6, #2]
 802079a:	9206      	str	r2, [sp, #24]
 802079c:	1c6a      	adds	r2, r5, #1
 802079e:	d449      	bmi.n	8020834 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80207a0:	4293      	cmp	r3, r2
 80207a2:	dd47      	ble.n	8020834 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80207a4:	f1bc 0f00 	cmp.w	ip, #0
 80207a8:	d044      	beq.n	8020834 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80207aa:	7972      	ldrb	r2, [r6, #5]
 80207ac:	f896 b003 	ldrb.w	fp, [r6, #3]
 80207b0:	f896 a004 	ldrb.w	sl, [r6, #4]
 80207b4:	9201      	str	r2, [sp, #4]
 80207b6:	3701      	adds	r7, #1
 80207b8:	d444      	bmi.n	8020844 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80207ba:	45be      	cmp	lr, r7
 80207bc:	dd42      	ble.n	8020844 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80207be:	f1b9 0f00 	cmp.w	r9, #0
 80207c2:	f000 80c1 	beq.w	8020948 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80207c6:	2d00      	cmp	r5, #0
 80207c8:	db38      	blt.n	802083c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80207ca:	42ab      	cmp	r3, r5
 80207cc:	dd36      	ble.n	802083c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80207ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80207d2:	f816 8002 	ldrb.w	r8, [r6, r2]
 80207d6:	2203      	movs	r2, #3
 80207d8:	fb03 6702 	mla	r7, r3, r2, r6
 80207dc:	fb03 6202 	mla	r2, r3, r2, r6
 80207e0:	787f      	ldrb	r7, [r7, #1]
 80207e2:	f892 e002 	ldrb.w	lr, [r2, #2]
 80207e6:	9702      	str	r7, [sp, #8]
 80207e8:	3501      	adds	r5, #1
 80207ea:	d432      	bmi.n	8020852 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80207ec:	42ab      	cmp	r3, r5
 80207ee:	dd30      	ble.n	8020852 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80207f0:	f1bc 0f00 	cmp.w	ip, #0
 80207f4:	d031      	beq.n	802085a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80207f6:	2703      	movs	r7, #3
 80207f8:	fb13 7207 	smlabb	r2, r3, r7, r7
 80207fc:	5cb5      	ldrb	r5, [r6, r2]
 80207fe:	fb03 6207 	mla	r2, r3, r7, r6
 8020802:	fb03 6307 	mla	r3, r3, r7, r6
 8020806:	7912      	ldrb	r2, [r2, #4]
 8020808:	795e      	ldrb	r6, [r3, #5]
 802080a:	f1bc 0f0f 	cmp.w	ip, #15
 802080e:	d927      	bls.n	8020860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020810:	4b53      	ldr	r3, [pc, #332]	; (8020960 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8020812:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020816:	4a53      	ldr	r2, [pc, #332]	; (8020964 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020818:	4853      	ldr	r0, [pc, #332]	; (8020968 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802081a:	f004 facf 	bl	8024dbc <__assert_func>
 802081e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020822:	9104      	str	r1, [sp, #16]
 8020824:	e7ba      	b.n	802079c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8020826:	9401      	str	r4, [sp, #4]
 8020828:	4682      	mov	sl, r0
 802082a:	468b      	mov	fp, r1
 802082c:	9104      	str	r1, [sp, #16]
 802082e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020832:	e7c0      	b.n	80207b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020834:	9401      	str	r4, [sp, #4]
 8020836:	4682      	mov	sl, r0
 8020838:	468b      	mov	fp, r1
 802083a:	e7bc      	b.n	80207b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802083c:	46a6      	mov	lr, r4
 802083e:	9002      	str	r0, [sp, #8]
 8020840:	4688      	mov	r8, r1
 8020842:	e7d1      	b.n	80207e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020844:	4626      	mov	r6, r4
 8020846:	4602      	mov	r2, r0
 8020848:	460d      	mov	r5, r1
 802084a:	46a6      	mov	lr, r4
 802084c:	9002      	str	r0, [sp, #8]
 802084e:	4688      	mov	r8, r1
 8020850:	e7db      	b.n	802080a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020852:	4626      	mov	r6, r4
 8020854:	4602      	mov	r2, r0
 8020856:	460d      	mov	r5, r1
 8020858:	e7d7      	b.n	802080a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802085a:	4626      	mov	r6, r4
 802085c:	4602      	mov	r2, r0
 802085e:	460d      	mov	r5, r1
 8020860:	f1b9 0f0f 	cmp.w	r9, #15
 8020864:	d8d4      	bhi.n	8020810 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020866:	fa1f f38c 	uxth.w	r3, ip
 802086a:	fa1f fc89 	uxth.w	ip, r9
 802086e:	fb03 f70c 	mul.w	r7, r3, ip
 8020872:	011b      	lsls	r3, r3, #4
 8020874:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020878:	9707      	str	r7, [sp, #28]
 802087a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802087e:	fa1f fc8c 	uxth.w	ip, ip
 8020882:	eba7 070c 	sub.w	r7, r7, ip
 8020886:	b2bf      	uxth	r7, r7
 8020888:	9709      	str	r7, [sp, #36]	; 0x24
 802088a:	9f07      	ldr	r7, [sp, #28]
 802088c:	1bdb      	subs	r3, r3, r7
 802088e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8020892:	b29b      	uxth	r3, r3
 8020894:	9708      	str	r7, [sp, #32]
 8020896:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020898:	930a      	str	r3, [sp, #40]	; 0x28
 802089a:	ea6f 0907 	mvn.w	r9, r7
 802089e:	fb03 fb0b 	mul.w	fp, r3, fp
 80208a2:	9f04      	ldr	r7, [sp, #16]
 80208a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208a6:	fa5f f989 	uxtb.w	r9, r9
 80208aa:	fb03 bb07 	mla	fp, r3, r7, fp
 80208ae:	9f07      	ldr	r7, [sp, #28]
 80208b0:	fb11 f109 	smulbb	r1, r1, r9
 80208b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208b6:	fb0c b808 	mla	r8, ip, r8, fp
 80208ba:	fb10 f009 	smulbb	r0, r0, r9
 80208be:	fb14 f409 	smulbb	r4, r4, r9
 80208c2:	fb07 8805 	mla	r8, r7, r5, r8
 80208c6:	9d08      	ldr	r5, [sp, #32]
 80208c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80208ca:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80208ce:	fb08 1805 	mla	r8, r8, r5, r1
 80208d2:	9d05      	ldr	r5, [sp, #20]
 80208d4:	fa1f f888 	uxth.w	r8, r8
 80208d8:	f108 0101 	add.w	r1, r8, #1
 80208dc:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80208e0:	9903      	ldr	r1, [sp, #12]
 80208e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80208e6:	f881 8000 	strb.w	r8, [r1]
 80208ea:	fb03 f10a 	mul.w	r1, r3, sl
 80208ee:	fb07 1105 	mla	r1, r7, r5, r1
 80208f2:	9d02      	ldr	r5, [sp, #8]
 80208f4:	fb0c 1105 	mla	r1, ip, r5, r1
 80208f8:	9d07      	ldr	r5, [sp, #28]
 80208fa:	fb05 1102 	mla	r1, r5, r2, r1
 80208fe:	9a08      	ldr	r2, [sp, #32]
 8020900:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020904:	fb01 0102 	mla	r1, r1, r2, r0
 8020908:	9a03      	ldr	r2, [sp, #12]
 802090a:	b289      	uxth	r1, r1
 802090c:	1c48      	adds	r0, r1, #1
 802090e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020912:	1209      	asrs	r1, r1, #8
 8020914:	7051      	strb	r1, [r2, #1]
 8020916:	9a01      	ldr	r2, [sp, #4]
 8020918:	4353      	muls	r3, r2
 802091a:	9a06      	ldr	r2, [sp, #24]
 802091c:	fb07 3702 	mla	r7, r7, r2, r3
 8020920:	9b08      	ldr	r3, [sp, #32]
 8020922:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8020926:	fb05 c606 	mla	r6, r5, r6, ip
 802092a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802092e:	fb06 4603 	mla	r6, r6, r3, r4
 8020932:	9b03      	ldr	r3, [sp, #12]
 8020934:	b2b6      	uxth	r6, r6
 8020936:	f106 0e01 	add.w	lr, r6, #1
 802093a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802093e:	1236      	asrs	r6, r6, #8
 8020940:	709e      	strb	r6, [r3, #2]
 8020942:	b00d      	add	sp, #52	; 0x34
 8020944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020948:	f1bc 0f0f 	cmp.w	ip, #15
 802094c:	f63f af60 	bhi.w	8020810 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020950:	4626      	mov	r6, r4
 8020952:	4602      	mov	r2, r0
 8020954:	460d      	mov	r5, r1
 8020956:	46a6      	mov	lr, r4
 8020958:	9002      	str	r0, [sp, #8]
 802095a:	4688      	mov	r8, r1
 802095c:	e783      	b.n	8020866 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802095e:	bf00      	nop
 8020960:	080297ab 	.word	0x080297ab
 8020964:	08029ca2 	.word	0x08029ca2
 8020968:	08029874 	.word	0x08029874

0802096c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020970:	ed2d 8b08 	vpush	{d8-d11}
 8020974:	b0a1      	sub	sp, #132	; 0x84
 8020976:	eeb0 aa40 	vmov.f32	s20, s0
 802097a:	eef0 9a60 	vmov.f32	s19, s1
 802097e:	9307      	str	r3, [sp, #28]
 8020980:	eeb0 9a41 	vmov.f32	s18, s2
 8020984:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8020988:	eeb0 8a62 	vmov.f32	s16, s5
 802098c:	9210      	str	r2, [sp, #64]	; 0x40
 802098e:	eef0 8a43 	vmov.f32	s17, s6
 8020992:	9308      	str	r3, [sp, #32]
 8020994:	eef0 ba44 	vmov.f32	s23, s8
 8020998:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 802099c:	eeb0 ba64 	vmov.f32	s22, s9
 80209a0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80209a2:	eef0 aa45 	vmov.f32	s21, s10
 80209a6:	930a      	str	r3, [sp, #40]	; 0x28
 80209a8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80209ac:	901f      	str	r0, [sp, #124]	; 0x7c
 80209ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80209b0:	6850      	ldr	r0, [r2, #4]
 80209b2:	910e      	str	r1, [sp, #56]	; 0x38
 80209b4:	6812      	ldr	r2, [r2, #0]
 80209b6:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80209ba:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80209be:	fb00 1303 	mla	r3, r0, r3, r1
 80209c2:	9908      	ldr	r1, [sp, #32]
 80209c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209c8:	18d3      	adds	r3, r2, r3
 80209ca:	2203      	movs	r2, #3
 80209cc:	9309      	str	r3, [sp, #36]	; 0x24
 80209ce:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80209d0:	681b      	ldr	r3, [r3, #0]
 80209d2:	930c      	str	r3, [sp, #48]	; 0x30
 80209d4:	f06f 0304 	mvn.w	r3, #4
 80209d8:	fb11 3302 	smlabb	r3, r1, r2, r3
 80209dc:	930d      	str	r3, [sp, #52]	; 0x34
 80209de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209e0:	43db      	mvns	r3, r3
 80209e2:	b2db      	uxtb	r3, r3
 80209e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80209e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	dc03      	bgt.n	80209f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80209ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	f340 81df 	ble.w	8020db2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80209f4:	9b07      	ldr	r3, [sp, #28]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	f340 80f2 	ble.w	8020be0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80209fc:	ea5f 4228 	movs.w	r2, r8, asr #16
 8020a00:	ea4f 432b 	mov.w	r3, fp, asr #16
 8020a04:	d430      	bmi.n	8020a68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020a06:	1c51      	adds	r1, r2, #1
 8020a08:	9808      	ldr	r0, [sp, #32]
 8020a0a:	4281      	cmp	r1, r0
 8020a0c:	da2f      	bge.n	8020a6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	db2d      	blt.n	8020a6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020a12:	1c59      	adds	r1, r3, #1
 8020a14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020a16:	4288      	cmp	r0, r1
 8020a18:	dd29      	ble.n	8020a6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020a1a:	9b07      	ldr	r3, [sp, #28]
 8020a1c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020a1e:	3b01      	subs	r3, #1
 8020a20:	fb02 8203 	mla	r2, r2, r3, r8
 8020a24:	1412      	asrs	r2, r2, #16
 8020a26:	d42d      	bmi.n	8020a84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020a28:	3201      	adds	r2, #1
 8020a2a:	9908      	ldr	r1, [sp, #32]
 8020a2c:	4291      	cmp	r1, r2
 8020a2e:	dd29      	ble.n	8020a84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020a30:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020a32:	fb02 b303 	mla	r3, r2, r3, fp
 8020a36:	141b      	asrs	r3, r3, #16
 8020a38:	d424      	bmi.n	8020a84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020a3a:	3301      	adds	r3, #1
 8020a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a3e:	429a      	cmp	r2, r3
 8020a40:	dd20      	ble.n	8020a84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a44:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020a48:	1cde      	adds	r6, r3, #3
 8020a4a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8020a4e:	f1bc 0f00 	cmp.w	ip, #0
 8020a52:	f300 811f 	bgt.w	8020c94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8020a56:	9b07      	ldr	r3, [sp, #28]
 8020a58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a62:	4423      	add	r3, r4
 8020a64:	9309      	str	r3, [sp, #36]	; 0x24
 8020a66:	e0bd      	b.n	8020be4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020a68:	1c57      	adds	r7, r2, #1
 8020a6a:	f040 80ae 	bne.w	8020bca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020a6e:	9908      	ldr	r1, [sp, #32]
 8020a70:	428a      	cmp	r2, r1
 8020a72:	f280 80aa 	bge.w	8020bca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020a76:	1c5e      	adds	r6, r3, #1
 8020a78:	f2c0 80a7 	blt.w	8020bca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a7e:	4293      	cmp	r3, r2
 8020a80:	f280 80a3 	bge.w	8020bca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020a84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020a88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020a8a:	f1ba 0f00 	cmp.w	sl, #0
 8020a8e:	dde2      	ble.n	8020a56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8020a90:	ea5f 4028 	movs.w	r0, r8, asr #16
 8020a94:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020a98:	ea4f 412b 	mov.w	r1, fp, asr #16
 8020a9c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020aa0:	f100 80df 	bmi.w	8020c62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8020aa4:	1c45      	adds	r5, r0, #1
 8020aa6:	9f08      	ldr	r7, [sp, #32]
 8020aa8:	42af      	cmp	r7, r5
 8020aaa:	f340 80dc 	ble.w	8020c66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020aae:	2900      	cmp	r1, #0
 8020ab0:	f2c0 80d9 	blt.w	8020c66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020ab4:	1c4d      	adds	r5, r1, #1
 8020ab6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020ab8:	42af      	cmp	r7, r5
 8020aba:	f340 80d4 	ble.w	8020c66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020abe:	9d08      	ldr	r5, [sp, #32]
 8020ac0:	fb05 0101 	mla	r1, r5, r1, r0
 8020ac4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020ac6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020aca:	1845      	adds	r5, r0, r1
 8020acc:	5c40      	ldrb	r0, [r0, r1]
 8020ace:	792f      	ldrb	r7, [r5, #4]
 8020ad0:	7869      	ldrb	r1, [r5, #1]
 8020ad2:	9711      	str	r7, [sp, #68]	; 0x44
 8020ad4:	796f      	ldrb	r7, [r5, #5]
 8020ad6:	f895 e002 	ldrb.w	lr, [r5, #2]
 8020ada:	f895 9003 	ldrb.w	r9, [r5, #3]
 8020ade:	9712      	str	r7, [sp, #72]	; 0x48
 8020ae0:	b17a      	cbz	r2, 8020b02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8020ae2:	3505      	adds	r5, #5
 8020ae4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020ae6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020ae8:	19ef      	adds	r7, r5, r7
 8020aea:	5d2d      	ldrb	r5, [r5, r4]
 8020aec:	787c      	ldrb	r4, [r7, #1]
 8020aee:	9513      	str	r5, [sp, #76]	; 0x4c
 8020af0:	9415      	str	r4, [sp, #84]	; 0x54
 8020af2:	78bc      	ldrb	r4, [r7, #2]
 8020af4:	9417      	str	r4, [sp, #92]	; 0x5c
 8020af6:	78fc      	ldrb	r4, [r7, #3]
 8020af8:	9414      	str	r4, [sp, #80]	; 0x50
 8020afa:	793c      	ldrb	r4, [r7, #4]
 8020afc:	9416      	str	r4, [sp, #88]	; 0x58
 8020afe:	797c      	ldrb	r4, [r7, #5]
 8020b00:	9418      	str	r4, [sp, #96]	; 0x60
 8020b02:	b29b      	uxth	r3, r3
 8020b04:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b06:	b292      	uxth	r2, r2
 8020b08:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8020b0c:	fb03 f702 	mul.w	r7, r3, r2
 8020b10:	011b      	lsls	r3, r3, #4
 8020b12:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8020b16:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020b1a:	1bdb      	subs	r3, r3, r7
 8020b1c:	b292      	uxth	r2, r2
 8020b1e:	b29b      	uxth	r3, r3
 8020b20:	ebac 0c02 	sub.w	ip, ip, r2
 8020b24:	fb03 f909 	mul.w	r9, r3, r9
 8020b28:	fa1f fc8c 	uxth.w	ip, ip
 8020b2c:	fb0c 9000 	mla	r0, ip, r0, r9
 8020b30:	f896 9000 	ldrb.w	r9, [r6]
 8020b34:	fb02 0004 	mla	r0, r2, r4, r0
 8020b38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020b3a:	fb07 0004 	mla	r0, r7, r4, r0
 8020b3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b40:	fb19 f904 	smulbb	r9, r9, r4
 8020b44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020b48:	fb00 9005 	mla	r0, r0, r5, r9
 8020b4c:	b280      	uxth	r0, r0
 8020b4e:	f100 0901 	add.w	r9, r0, #1
 8020b52:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020b56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020b58:	4358      	muls	r0, r3
 8020b5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020b5e:	fb0c 0101 	mla	r1, ip, r1, r0
 8020b62:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020b64:	f886 9000 	strb.w	r9, [r6]
 8020b68:	fb02 1100 	mla	r1, r2, r0, r1
 8020b6c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020b6e:	fb07 1100 	mla	r1, r7, r0, r1
 8020b72:	7870      	ldrb	r0, [r6, #1]
 8020b74:	fb10 f004 	smulbb	r0, r0, r4
 8020b78:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020b7c:	fb01 0105 	mla	r1, r1, r5, r0
 8020b80:	b289      	uxth	r1, r1
 8020b82:	1c48      	adds	r0, r1, #1
 8020b84:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020b88:	1209      	asrs	r1, r1, #8
 8020b8a:	7071      	strb	r1, [r6, #1]
 8020b8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020b8e:	434b      	muls	r3, r1
 8020b90:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020b92:	fb0c 330e 	mla	r3, ip, lr, r3
 8020b96:	fb02 3201 	mla	r2, r2, r1, r3
 8020b9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020b9c:	fb07 2703 	mla	r7, r7, r3, r2
 8020ba0:	78b2      	ldrb	r2, [r6, #2]
 8020ba2:	fb12 f204 	smulbb	r2, r2, r4
 8020ba6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020baa:	fb07 2505 	mla	r5, r7, r5, r2
 8020bae:	b2ad      	uxth	r5, r5
 8020bb0:	1c6f      	adds	r7, r5, #1
 8020bb2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020bb6:	122d      	asrs	r5, r5, #8
 8020bb8:	70b5      	strb	r5, [r6, #2]
 8020bba:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020bbc:	3603      	adds	r6, #3
 8020bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020bc2:	4498      	add	r8, r3
 8020bc4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020bc6:	449b      	add	fp, r3
 8020bc8:	e75f      	b.n	8020a8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8020bca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020bcc:	4498      	add	r8, r3
 8020bce:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020bd0:	449b      	add	fp, r3
 8020bd2:	9b07      	ldr	r3, [sp, #28]
 8020bd4:	3b01      	subs	r3, #1
 8020bd6:	9307      	str	r3, [sp, #28]
 8020bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bda:	3303      	adds	r3, #3
 8020bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8020bde:	e709      	b.n	80209f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020be0:	f47f af1b 	bne.w	8020a1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	f340 80e3 	ble.w	8020db2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020bf0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020bf2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020bf6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020bfa:	eef0 6a48 	vmov.f32	s13, s16
 8020bfe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020c02:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020c06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c0a:	ee16 8a90 	vmov	r8, s13
 8020c0e:	eef0 6a68 	vmov.f32	s13, s17
 8020c12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c16:	ee16 ba90 	vmov	fp, s13
 8020c1a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020c1e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020c22:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020c26:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020c2a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020c2e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020c32:	ee18 2a10 	vmov	r2, s16
 8020c36:	eeb0 8a47 	vmov.f32	s16, s14
 8020c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c3e:	ee18 2a90 	vmov	r2, s17
 8020c42:	9335      	str	r3, [sp, #212]	; 0xd4
 8020c44:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020c46:	eef0 8a67 	vmov.f32	s17, s15
 8020c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c4e:	9336      	str	r3, [sp, #216]	; 0xd8
 8020c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020c54:	3b01      	subs	r3, #1
 8020c56:	930e      	str	r3, [sp, #56]	; 0x38
 8020c58:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020c5a:	bf08      	it	eq
 8020c5c:	4613      	moveq	r3, r2
 8020c5e:	9307      	str	r3, [sp, #28]
 8020c60:	e6c1      	b.n	80209e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020c62:	1c45      	adds	r5, r0, #1
 8020c64:	d1a9      	bne.n	8020bba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020c66:	9c08      	ldr	r4, [sp, #32]
 8020c68:	42a0      	cmp	r0, r4
 8020c6a:	daa6      	bge.n	8020bba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020c6c:	1c4c      	adds	r4, r1, #1
 8020c6e:	dba4      	blt.n	8020bba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020c70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020c72:	428c      	cmp	r4, r1
 8020c74:	dda1      	ble.n	8020bba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020c76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c78:	9001      	str	r0, [sp, #4]
 8020c7a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020c7c:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8020c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c82:	4631      	mov	r1, r6
 8020c84:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8020c88:	9300      	str	r3, [sp, #0]
 8020c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020c8c:	9b08      	ldr	r3, [sp, #32]
 8020c8e:	f7ff fd5b 	bl	8020748 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020c92:	e792      	b.n	8020bba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020c94:	ea4f 4228 	mov.w	r2, r8, asr #16
 8020c98:	9c08      	ldr	r4, [sp, #32]
 8020c9a:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020c9e:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8020ca2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020ca6:	fb04 2000 	mla	r0, r4, r0, r2
 8020caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020cac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020cae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020cb2:	4402      	add	r2, r0
 8020cb4:	5c25      	ldrb	r5, [r4, r0]
 8020cb6:	7894      	ldrb	r4, [r2, #2]
 8020cb8:	7850      	ldrb	r0, [r2, #1]
 8020cba:	9411      	str	r4, [sp, #68]	; 0x44
 8020cbc:	7954      	ldrb	r4, [r2, #5]
 8020cbe:	f892 a003 	ldrb.w	sl, [r2, #3]
 8020cc2:	f892 9004 	ldrb.w	r9, [r2, #4]
 8020cc6:	9412      	str	r4, [sp, #72]	; 0x48
 8020cc8:	b171      	cbz	r1, 8020ce8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020cca:	3205      	adds	r2, #5
 8020ccc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020cce:	1917      	adds	r7, r2, r4
 8020cd0:	5d12      	ldrb	r2, [r2, r4]
 8020cd2:	9219      	str	r2, [sp, #100]	; 0x64
 8020cd4:	787a      	ldrb	r2, [r7, #1]
 8020cd6:	921b      	str	r2, [sp, #108]	; 0x6c
 8020cd8:	78ba      	ldrb	r2, [r7, #2]
 8020cda:	921d      	str	r2, [sp, #116]	; 0x74
 8020cdc:	78fa      	ldrb	r2, [r7, #3]
 8020cde:	921a      	str	r2, [sp, #104]	; 0x68
 8020ce0:	793a      	ldrb	r2, [r7, #4]
 8020ce2:	921c      	str	r2, [sp, #112]	; 0x70
 8020ce4:	797a      	ldrb	r2, [r7, #5]
 8020ce6:	921e      	str	r2, [sp, #120]	; 0x78
 8020ce8:	b29b      	uxth	r3, r3
 8020cea:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8020cec:	b289      	uxth	r1, r1
 8020cee:	3603      	adds	r6, #3
 8020cf0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020cf4:	fb03 f201 	mul.w	r2, r3, r1
 8020cf8:	011b      	lsls	r3, r3, #4
 8020cfa:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8020cfe:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020d02:	1a9b      	subs	r3, r3, r2
 8020d04:	b289      	uxth	r1, r1
 8020d06:	b29b      	uxth	r3, r3
 8020d08:	1a7f      	subs	r7, r7, r1
 8020d0a:	fb03 fa0a 	mul.w	sl, r3, sl
 8020d0e:	b2bf      	uxth	r7, r7
 8020d10:	fb03 f909 	mul.w	r9, r3, r9
 8020d14:	fb07 a505 	mla	r5, r7, r5, sl
 8020d18:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8020d1c:	fb07 9000 	mla	r0, r7, r0, r9
 8020d20:	fb01 5504 	mla	r5, r1, r4, r5
 8020d24:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020d26:	fb02 5504 	mla	r5, r2, r4, r5
 8020d2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d2c:	fb1a fa04 	smulbb	sl, sl, r4
 8020d30:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020d34:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8020d36:	fb05 a50e 	mla	r5, r5, lr, sl
 8020d3a:	fb01 0004 	mla	r0, r1, r4, r0
 8020d3e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020d40:	b2ad      	uxth	r5, r5
 8020d42:	fb02 0004 	mla	r0, r2, r4, r0
 8020d46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d48:	f105 0a01 	add.w	sl, r5, #1
 8020d4c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020d50:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020d54:	122d      	asrs	r5, r5, #8
 8020d56:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020d5a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8020d5e:	fb15 f504 	smulbb	r5, r5, r4
 8020d62:	fb00 500e 	mla	r0, r0, lr, r5
 8020d66:	b280      	uxth	r0, r0
 8020d68:	1c45      	adds	r5, r0, #1
 8020d6a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020d6e:	1200      	asrs	r0, r0, #8
 8020d70:	f806 0c05 	strb.w	r0, [r6, #-5]
 8020d74:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020d76:	4343      	muls	r3, r0
 8020d78:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020d7a:	fb07 3300 	mla	r3, r7, r0, r3
 8020d7e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020d80:	fb01 3100 	mla	r1, r1, r0, r3
 8020d84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020d86:	fb02 1203 	mla	r2, r2, r3, r1
 8020d8a:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8020d8e:	fb11 f104 	smulbb	r1, r1, r4
 8020d92:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020d96:	fb02 120e 	mla	r2, r2, lr, r1
 8020d9a:	b292      	uxth	r2, r2
 8020d9c:	1c53      	adds	r3, r2, #1
 8020d9e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020da2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020da4:	1212      	asrs	r2, r2, #8
 8020da6:	4498      	add	r8, r3
 8020da8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020daa:	f806 2c04 	strb.w	r2, [r6, #-4]
 8020dae:	449b      	add	fp, r3
 8020db0:	e64d      	b.n	8020a4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020db2:	b021      	add	sp, #132	; 0x84
 8020db4:	ecbd 8b08 	vpop	{d8-d11}
 8020db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020dbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc0:	b085      	sub	sp, #20
 8020dc2:	784d      	ldrb	r5, [r1, #1]
 8020dc4:	788e      	ldrb	r6, [r1, #2]
 8020dc6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020dca:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020dce:	9403      	str	r4, [sp, #12]
 8020dd0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020dd4:	780c      	ldrb	r4, [r1, #0]
 8020dd6:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020dda:	fb07 ce03 	mla	lr, r7, r3, ip
 8020dde:	2f00      	cmp	r7, #0
 8020de0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020de4:	eb02 0b0e 	add.w	fp, r2, lr
 8020de8:	db56      	blt.n	8020e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020dea:	45b9      	cmp	r9, r7
 8020dec:	dd54      	ble.n	8020e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020dee:	f1bc 0f00 	cmp.w	ip, #0
 8020df2:	db4d      	blt.n	8020e90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020df4:	4563      	cmp	r3, ip
 8020df6:	dd4b      	ble.n	8020e90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020df8:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020dfc:	9200      	str	r2, [sp, #0]
 8020dfe:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020e02:	9201      	str	r2, [sp, #4]
 8020e04:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020e08:	9202      	str	r2, [sp, #8]
 8020e0a:	f11c 0201 	adds.w	r2, ip, #1
 8020e0e:	d44a      	bmi.n	8020ea6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020e10:	4293      	cmp	r3, r2
 8020e12:	dd48      	ble.n	8020ea6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020e14:	2800      	cmp	r0, #0
 8020e16:	d046      	beq.n	8020ea6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020e18:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020e1c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020e20:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020e24:	3701      	adds	r7, #1
 8020e26:	d446      	bmi.n	8020eb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020e28:	45b9      	cmp	r9, r7
 8020e2a:	dd44      	ble.n	8020eb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020e2c:	9a03      	ldr	r2, [sp, #12]
 8020e2e:	2a00      	cmp	r2, #0
 8020e30:	d045      	beq.n	8020ebe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020e32:	f1bc 0f00 	cmp.w	ip, #0
 8020e36:	db3a      	blt.n	8020eae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020e38:	4563      	cmp	r3, ip
 8020e3a:	dd38      	ble.n	8020eae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020e3c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020e40:	f04f 0903 	mov.w	r9, #3
 8020e44:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020e48:	fb03 b209 	mla	r2, r3, r9, fp
 8020e4c:	fb03 b909 	mla	r9, r3, r9, fp
 8020e50:	7852      	ldrb	r2, [r2, #1]
 8020e52:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020e56:	f11c 0c01 	adds.w	ip, ip, #1
 8020e5a:	d40d      	bmi.n	8020e78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020e5c:	4563      	cmp	r3, ip
 8020e5e:	dd0b      	ble.n	8020e78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020e60:	b160      	cbz	r0, 8020e7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020e62:	2603      	movs	r6, #3
 8020e64:	fb13 6406 	smlabb	r4, r3, r6, r6
 8020e68:	fb03 b506 	mla	r5, r3, r6, fp
 8020e6c:	fb03 b306 	mla	r3, r3, r6, fp
 8020e70:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020e74:	792d      	ldrb	r5, [r5, #4]
 8020e76:	795e      	ldrb	r6, [r3, #5]
 8020e78:	280f      	cmp	r0, #15
 8020e7a:	d802      	bhi.n	8020e82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020e7c:	9b03      	ldr	r3, [sp, #12]
 8020e7e:	2b0f      	cmp	r3, #15
 8020e80:	d922      	bls.n	8020ec8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8020e82:	4b2f      	ldr	r3, [pc, #188]	; (8020f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020e84:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020e88:	4a2e      	ldr	r2, [pc, #184]	; (8020f44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020e8a:	482f      	ldr	r0, [pc, #188]	; (8020f48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020e8c:	f003 ff96 	bl	8024dbc <__assert_func>
 8020e90:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020e94:	9400      	str	r4, [sp, #0]
 8020e96:	e7b8      	b.n	8020e0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020e98:	46b2      	mov	sl, r6
 8020e9a:	46a8      	mov	r8, r5
 8020e9c:	46a6      	mov	lr, r4
 8020e9e:	9400      	str	r4, [sp, #0]
 8020ea0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020ea4:	e7be      	b.n	8020e24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020ea6:	46b2      	mov	sl, r6
 8020ea8:	46a8      	mov	r8, r5
 8020eaa:	46a6      	mov	lr, r4
 8020eac:	e7ba      	b.n	8020e24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020eae:	46b1      	mov	r9, r6
 8020eb0:	462a      	mov	r2, r5
 8020eb2:	4627      	mov	r7, r4
 8020eb4:	e7cf      	b.n	8020e56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020eb6:	46b1      	mov	r9, r6
 8020eb8:	462a      	mov	r2, r5
 8020eba:	4627      	mov	r7, r4
 8020ebc:	e7dc      	b.n	8020e78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020ebe:	280f      	cmp	r0, #15
 8020ec0:	d8df      	bhi.n	8020e82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020ec2:	46b1      	mov	r9, r6
 8020ec4:	462a      	mov	r2, r5
 8020ec6:	4627      	mov	r7, r4
 8020ec8:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020ecc:	b280      	uxth	r0, r0
 8020ece:	fb00 f30b 	mul.w	r3, r0, fp
 8020ed2:	0100      	lsls	r0, r0, #4
 8020ed4:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020ed8:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020edc:	1ac0      	subs	r0, r0, r3
 8020ede:	fa1f fb8b 	uxth.w	fp, fp
 8020ee2:	b280      	uxth	r0, r0
 8020ee4:	ebac 0c0b 	sub.w	ip, ip, fp
 8020ee8:	9003      	str	r0, [sp, #12]
 8020eea:	fa1f fc8c 	uxth.w	ip, ip
 8020eee:	fb00 fe0e 	mul.w	lr, r0, lr
 8020ef2:	9800      	ldr	r0, [sp, #0]
 8020ef4:	fb0c ee00 	mla	lr, ip, r0, lr
 8020ef8:	9803      	ldr	r0, [sp, #12]
 8020efa:	fb00 f808 	mul.w	r8, r0, r8
 8020efe:	9801      	ldr	r0, [sp, #4]
 8020f00:	fb0b ee07 	mla	lr, fp, r7, lr
 8020f04:	fb0c 8800 	mla	r8, ip, r0, r8
 8020f08:	fb03 ee04 	mla	lr, r3, r4, lr
 8020f0c:	fb0b 8202 	mla	r2, fp, r2, r8
 8020f10:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020f14:	fb03 2505 	mla	r5, r3, r5, r2
 8020f18:	9a03      	ldr	r2, [sp, #12]
 8020f1a:	f881 e000 	strb.w	lr, [r1]
 8020f1e:	fb02 f00a 	mul.w	r0, r2, sl
 8020f22:	9a02      	ldr	r2, [sp, #8]
 8020f24:	122d      	asrs	r5, r5, #8
 8020f26:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020f2a:	704d      	strb	r5, [r1, #1]
 8020f2c:	fb0b c909 	mla	r9, fp, r9, ip
 8020f30:	fb03 9606 	mla	r6, r3, r6, r9
 8020f34:	1236      	asrs	r6, r6, #8
 8020f36:	708e      	strb	r6, [r1, #2]
 8020f38:	b005      	add	sp, #20
 8020f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f3e:	bf00      	nop
 8020f40:	080297ab 	.word	0x080297ab
 8020f44:	08029ca2 	.word	0x08029ca2
 8020f48:	08029874 	.word	0x08029874

08020f4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f50:	ed2d 8b0a 	vpush	{d8-d12}
 8020f54:	b09d      	sub	sp, #116	; 0x74
 8020f56:	eeb0 aa40 	vmov.f32	s20, s0
 8020f5a:	eef0 9a60 	vmov.f32	s19, s1
 8020f5e:	9306      	str	r3, [sp, #24]
 8020f60:	eeb0 9a41 	vmov.f32	s18, s2
 8020f64:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8020f68:	eeb0 8a62 	vmov.f32	s16, s5
 8020f6c:	901b      	str	r0, [sp, #108]	; 0x6c
 8020f6e:	eef0 8a43 	vmov.f32	s17, s6
 8020f72:	9307      	str	r3, [sp, #28]
 8020f74:	eeb0 ca44 	vmov.f32	s24, s8
 8020f78:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8020f7c:	eef0 ba64 	vmov.f32	s23, s9
 8020f80:	eeb0 ba45 	vmov.f32	s22, s10
 8020f84:	9309      	str	r3, [sp, #36]	; 0x24
 8020f86:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020f8a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8020f8e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020f90:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020f94:	6850      	ldr	r0, [r2, #4]
 8020f96:	6812      	ldr	r2, [r2, #0]
 8020f98:	fb00 1303 	mla	r3, r0, r3, r1
 8020f9c:	9907      	ldr	r1, [sp, #28]
 8020f9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020fa2:	18d3      	adds	r3, r2, r3
 8020fa4:	2203      	movs	r2, #3
 8020fa6:	9308      	str	r3, [sp, #32]
 8020fa8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8020faa:	681b      	ldr	r3, [r3, #0]
 8020fac:	930a      	str	r3, [sp, #40]	; 0x28
 8020fae:	f06f 0304 	mvn.w	r3, #4
 8020fb2:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020fb6:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8020fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	dc03      	bgt.n	8020fca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	f340 8193 	ble.w	80212f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020fca:	9b06      	ldr	r3, [sp, #24]
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	f340 80d0 	ble.w	8021172 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8020fd2:	1432      	asrs	r2, r6, #16
 8020fd4:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020fd8:	d42f      	bmi.n	802103a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8020fda:	1c51      	adds	r1, r2, #1
 8020fdc:	9807      	ldr	r0, [sp, #28]
 8020fde:	4281      	cmp	r1, r0
 8020fe0:	da2e      	bge.n	8021040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	db2c      	blt.n	8021040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020fe6:	1c59      	adds	r1, r3, #1
 8020fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020fea:	4288      	cmp	r0, r1
 8020fec:	dd28      	ble.n	8021040 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020fee:	9b06      	ldr	r3, [sp, #24]
 8020ff0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020ff2:	3b01      	subs	r3, #1
 8020ff4:	fb02 6203 	mla	r2, r2, r3, r6
 8020ff8:	1412      	asrs	r2, r2, #16
 8020ffa:	d42c      	bmi.n	8021056 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020ffc:	3201      	adds	r2, #1
 8020ffe:	9907      	ldr	r1, [sp, #28]
 8021000:	4291      	cmp	r1, r2
 8021002:	dd28      	ble.n	8021056 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021004:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021006:	fb02 5303 	mla	r3, r2, r3, r5
 802100a:	141b      	asrs	r3, r3, #16
 802100c:	d423      	bmi.n	8021056 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802100e:	3301      	adds	r3, #1
 8021010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021012:	429a      	cmp	r2, r3
 8021014:	dd1f      	ble.n	8021056 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021016:	9b08      	ldr	r3, [sp, #32]
 8021018:	f8dd e018 	ldr.w	lr, [sp, #24]
 802101c:	f103 0c03 	add.w	ip, r3, #3
 8021020:	f1be 0f00 	cmp.w	lr, #0
 8021024:	f300 80fa 	bgt.w	802121c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021028:	9b06      	ldr	r3, [sp, #24]
 802102a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802102e:	9b08      	ldr	r3, [sp, #32]
 8021030:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021034:	4423      	add	r3, r4
 8021036:	9308      	str	r3, [sp, #32]
 8021038:	e09d      	b.n	8021176 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802103a:	1c51      	adds	r1, r2, #1
 802103c:	f040 808e 	bne.w	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021040:	9907      	ldr	r1, [sp, #28]
 8021042:	428a      	cmp	r2, r1
 8021044:	f280 808a 	bge.w	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021048:	1c5f      	adds	r7, r3, #1
 802104a:	f2c0 8087 	blt.w	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802104e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021050:	4293      	cmp	r3, r2
 8021052:	f280 8083 	bge.w	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021056:	9f06      	ldr	r7, [sp, #24]
 8021058:	f8dd a020 	ldr.w	sl, [sp, #32]
 802105c:	2f00      	cmp	r7, #0
 802105e:	dde3      	ble.n	8021028 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021060:	1432      	asrs	r2, r6, #16
 8021062:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021066:	ea4f 4325 	mov.w	r3, r5, asr #16
 802106a:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802106e:	f100 80bf 	bmi.w	80211f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8021072:	1c50      	adds	r0, r2, #1
 8021074:	9c07      	ldr	r4, [sp, #28]
 8021076:	4284      	cmp	r4, r0
 8021078:	f340 80bc 	ble.w	80211f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802107c:	2b00      	cmp	r3, #0
 802107e:	f2c0 80b9 	blt.w	80211f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021082:	1c58      	adds	r0, r3, #1
 8021084:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021086:	4284      	cmp	r4, r0
 8021088:	f340 80b4 	ble.w	80211f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802108c:	9807      	ldr	r0, [sp, #28]
 802108e:	fb00 2303 	mla	r3, r0, r3, r2
 8021092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021094:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021096:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802109a:	441a      	add	r2, r3
 802109c:	f810 c003 	ldrb.w	ip, [r0, r3]
 80210a0:	7953      	ldrb	r3, [r2, #5]
 80210a2:	7850      	ldrb	r0, [r2, #1]
 80210a4:	f892 e002 	ldrb.w	lr, [r2, #2]
 80210a8:	f892 9003 	ldrb.w	r9, [r2, #3]
 80210ac:	f892 8004 	ldrb.w	r8, [r2, #4]
 80210b0:	930e      	str	r3, [sp, #56]	; 0x38
 80210b2:	f1bb 0f00 	cmp.w	fp, #0
 80210b6:	d00f      	beq.n	80210d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80210b8:	3205      	adds	r2, #5
 80210ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210be:	18d3      	adds	r3, r2, r3
 80210c0:	5d12      	ldrb	r2, [r2, r4]
 80210c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80210c4:	785a      	ldrb	r2, [r3, #1]
 80210c6:	9211      	str	r2, [sp, #68]	; 0x44
 80210c8:	789a      	ldrb	r2, [r3, #2]
 80210ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80210cc:	78da      	ldrb	r2, [r3, #3]
 80210ce:	9210      	str	r2, [sp, #64]	; 0x40
 80210d0:	791a      	ldrb	r2, [r3, #4]
 80210d2:	795b      	ldrb	r3, [r3, #5]
 80210d4:	9212      	str	r2, [sp, #72]	; 0x48
 80210d6:	9314      	str	r3, [sp, #80]	; 0x50
 80210d8:	b28b      	uxth	r3, r1
 80210da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80210dc:	fa1f f28b 	uxth.w	r2, fp
 80210e0:	fb03 fb02 	mul.w	fp, r3, r2
 80210e4:	011b      	lsls	r3, r3, #4
 80210e6:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80210ea:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80210ee:	eba3 030b 	sub.w	r3, r3, fp
 80210f2:	b292      	uxth	r2, r2
 80210f4:	b29b      	uxth	r3, r3
 80210f6:	1a89      	subs	r1, r1, r2
 80210f8:	fb03 f808 	mul.w	r8, r3, r8
 80210fc:	b289      	uxth	r1, r1
 80210fe:	fb03 f909 	mul.w	r9, r3, r9
 8021102:	fb01 8800 	mla	r8, r1, r0, r8
 8021106:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021108:	fb01 990c 	mla	r9, r1, ip, r9
 802110c:	fb02 8800 	mla	r8, r2, r0, r8
 8021110:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021112:	fb02 9904 	mla	r9, r2, r4, r9
 8021116:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021118:	fb0b 8800 	mla	r8, fp, r0, r8
 802111c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802111e:	fb0b 9904 	mla	r9, fp, r4, r9
 8021122:	4343      	muls	r3, r0
 8021124:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021128:	ea4f 2929 	mov.w	r9, r9, asr #8
 802112c:	fb01 330e 	mla	r3, r1, lr, r3
 8021130:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021132:	f88a 9000 	strb.w	r9, [sl]
 8021136:	fb02 3201 	mla	r2, r2, r1, r3
 802113a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802113c:	f88a 8001 	strb.w	r8, [sl, #1]
 8021140:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021144:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021148:	f88a b002 	strb.w	fp, [sl, #2]
 802114c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802114e:	f10a 0a03 	add.w	sl, sl, #3
 8021152:	3f01      	subs	r7, #1
 8021154:	441e      	add	r6, r3
 8021156:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021158:	441d      	add	r5, r3
 802115a:	e77f      	b.n	802105c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802115c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802115e:	441e      	add	r6, r3
 8021160:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021162:	441d      	add	r5, r3
 8021164:	9b06      	ldr	r3, [sp, #24]
 8021166:	3b01      	subs	r3, #1
 8021168:	9306      	str	r3, [sp, #24]
 802116a:	9b08      	ldr	r3, [sp, #32]
 802116c:	3303      	adds	r3, #3
 802116e:	9308      	str	r3, [sp, #32]
 8021170:	e72b      	b.n	8020fca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021172:	f47f af3c 	bne.w	8020fee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021178:	2b00      	cmp	r3, #0
 802117a:	f340 80b9 	ble.w	80212f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802117e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021182:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021184:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021188:	eef0 6a48 	vmov.f32	s13, s16
 802118c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021190:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021194:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021198:	ee16 6a90 	vmov	r6, s13
 802119c:	eef0 6a68 	vmov.f32	s13, s17
 80211a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211a4:	ee16 5a90 	vmov	r5, s13
 80211a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80211ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80211b0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80211b4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80211b8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80211bc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80211c0:	ee18 2a10 	vmov	r2, s16
 80211c4:	eeb0 8a47 	vmov.f32	s16, s14
 80211c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80211cc:	ee18 2a90 	vmov	r2, s17
 80211d0:	9333      	str	r3, [sp, #204]	; 0xcc
 80211d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80211d4:	eef0 8a67 	vmov.f32	s17, s15
 80211d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80211dc:	9334      	str	r3, [sp, #208]	; 0xd0
 80211de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80211e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80211e2:	3b01      	subs	r3, #1
 80211e4:	930c      	str	r3, [sp, #48]	; 0x30
 80211e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80211e8:	bf08      	it	eq
 80211ea:	4613      	moveq	r3, r2
 80211ec:	9306      	str	r3, [sp, #24]
 80211ee:	e6e5      	b.n	8020fbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80211f0:	1c54      	adds	r4, r2, #1
 80211f2:	d1ab      	bne.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80211f4:	9807      	ldr	r0, [sp, #28]
 80211f6:	4282      	cmp	r2, r0
 80211f8:	daa8      	bge.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80211fa:	1c58      	adds	r0, r3, #1
 80211fc:	dba6      	blt.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80211fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021200:	4298      	cmp	r0, r3
 8021202:	dda3      	ble.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021204:	9000      	str	r0, [sp, #0]
 8021206:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021208:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802120c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021210:	9b07      	ldr	r3, [sp, #28]
 8021212:	4651      	mov	r1, sl
 8021214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021216:	f7ff fdd1 	bl	8020dbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802121a:	e797      	b.n	802114c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802121c:	1431      	asrs	r1, r6, #16
 802121e:	9c07      	ldr	r4, [sp, #28]
 8021220:	1428      	asrs	r0, r5, #16
 8021222:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021226:	f3c6 3303 	ubfx	r3, r6, #12, #4
 802122a:	fb04 1000 	mla	r0, r4, r0, r1
 802122e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021230:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021232:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021236:	4401      	add	r1, r0
 8021238:	5c20      	ldrb	r0, [r4, r0]
 802123a:	f891 8002 	ldrb.w	r8, [r1, #2]
 802123e:	900e      	str	r0, [sp, #56]	; 0x38
 8021240:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021244:	7848      	ldrb	r0, [r1, #1]
 8021246:	f891 9004 	ldrb.w	r9, [r1, #4]
 802124a:	f891 b005 	ldrb.w	fp, [r1, #5]
 802124e:	b172      	cbz	r2, 802126e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021250:	3105      	adds	r1, #5
 8021252:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021254:	190f      	adds	r7, r1, r4
 8021256:	5d09      	ldrb	r1, [r1, r4]
 8021258:	9115      	str	r1, [sp, #84]	; 0x54
 802125a:	7879      	ldrb	r1, [r7, #1]
 802125c:	9117      	str	r1, [sp, #92]	; 0x5c
 802125e:	78b9      	ldrb	r1, [r7, #2]
 8021260:	9119      	str	r1, [sp, #100]	; 0x64
 8021262:	78f9      	ldrb	r1, [r7, #3]
 8021264:	9116      	str	r1, [sp, #88]	; 0x58
 8021266:	7939      	ldrb	r1, [r7, #4]
 8021268:	9118      	str	r1, [sp, #96]	; 0x60
 802126a:	7979      	ldrb	r1, [r7, #5]
 802126c:	911a      	str	r1, [sp, #104]	; 0x68
 802126e:	b29b      	uxth	r3, r3
 8021270:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021272:	b292      	uxth	r2, r2
 8021274:	f10c 0c03 	add.w	ip, ip, #3
 8021278:	f10e 3eff 	add.w	lr, lr, #4294967295
 802127c:	fb03 f102 	mul.w	r1, r3, r2
 8021280:	011b      	lsls	r3, r3, #4
 8021282:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021286:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802128a:	1a5b      	subs	r3, r3, r1
 802128c:	b292      	uxth	r2, r2
 802128e:	b29b      	uxth	r3, r3
 8021290:	1abf      	subs	r7, r7, r2
 8021292:	fb03 f909 	mul.w	r9, r3, r9
 8021296:	b2bf      	uxth	r7, r7
 8021298:	fb03 fa0a 	mul.w	sl, r3, sl
 802129c:	fb03 f30b 	mul.w	r3, r3, fp
 80212a0:	fb07 9900 	mla	r9, r7, r0, r9
 80212a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80212a6:	fb07 aa04 	mla	sl, r7, r4, sl
 80212aa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80212ac:	fb02 9900 	mla	r9, r2, r0, r9
 80212b0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80212b2:	fb07 3308 	mla	r3, r7, r8, r3
 80212b6:	fb01 9900 	mla	r9, r1, r0, r9
 80212ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80212bc:	fb02 aa04 	mla	sl, r2, r4, sl
 80212c0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80212c2:	fb02 3200 	mla	r2, r2, r0, r3
 80212c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80212c8:	fb01 aa04 	mla	sl, r1, r4, sl
 80212cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80212d0:	fb01 2103 	mla	r1, r1, r3, r2
 80212d4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80212d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80212da:	f80c 9c05 	strb.w	r9, [ip, #-5]
 80212de:	1209      	asrs	r1, r1, #8
 80212e0:	441e      	add	r6, r3
 80212e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80212e4:	f80c ac06 	strb.w	sl, [ip, #-6]
 80212e8:	f80c 1c04 	strb.w	r1, [ip, #-4]
 80212ec:	441d      	add	r5, r3
 80212ee:	e697      	b.n	8021020 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80212f0:	b01d      	add	sp, #116	; 0x74
 80212f2:	ecbd 8b0a 	vpop	{d8-d12}
 80212f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080212fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80212fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021300:	b085      	sub	sp, #20
 8021302:	7888      	ldrb	r0, [r1, #2]
 8021304:	4691      	mov	r9, r2
 8021306:	9000      	str	r0, [sp, #0]
 8021308:	7848      	ldrb	r0, [r1, #1]
 802130a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802130e:	9001      	str	r0, [sp, #4]
 8021310:	7808      	ldrb	r0, [r1, #0]
 8021312:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021316:	9002      	str	r0, [sp, #8]
 8021318:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802131c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021320:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021324:	fb04 c603 	mla	r6, r4, r3, ip
 8021328:	2c00      	cmp	r4, #0
 802132a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802132e:	9a00      	ldr	r2, [sp, #0]
 8021330:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021334:	9a01      	ldr	r2, [sp, #4]
 8021336:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802133a:	db3a      	blt.n	80213b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 802133c:	45a0      	cmp	r8, r4
 802133e:	dd38      	ble.n	80213b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021340:	f1bc 0f00 	cmp.w	ip, #0
 8021344:	db33      	blt.n	80213ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021346:	4563      	cmp	r3, ip
 8021348:	dd31      	ble.n	80213ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 802134a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802134e:	f11c 0601 	adds.w	r6, ip, #1
 8021352:	d431      	bmi.n	80213b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021354:	42b3      	cmp	r3, r6
 8021356:	dd2f      	ble.n	80213b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021358:	b375      	cbz	r5, 80213b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802135a:	f8de 6004 	ldr.w	r6, [lr, #4]
 802135e:	3401      	adds	r4, #1
 8021360:	d42e      	bmi.n	80213c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021362:	45a0      	cmp	r8, r4
 8021364:	dd2c      	ble.n	80213c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021366:	b35f      	cbz	r7, 80213c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021368:	f1bc 0f00 	cmp.w	ip, #0
 802136c:	db26      	blt.n	80213bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802136e:	4563      	cmp	r3, ip
 8021370:	dd24      	ble.n	80213bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021372:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021376:	f11c 0c01 	adds.w	ip, ip, #1
 802137a:	d405      	bmi.n	8021388 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802137c:	4563      	cmp	r3, ip
 802137e:	dd03      	ble.n	8021388 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021380:	b115      	cbz	r5, 8021388 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021382:	3301      	adds	r3, #1
 8021384:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021388:	2d0f      	cmp	r5, #15
 802138a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802138e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021392:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021396:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802139a:	d801      	bhi.n	80213a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 802139c:	2f0f      	cmp	r7, #15
 802139e:	d911      	bls.n	80213c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 80213a0:	4b80      	ldr	r3, [pc, #512]	; (80215a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80213a2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80213a6:	4a80      	ldr	r2, [pc, #512]	; (80215a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80213a8:	4880      	ldr	r0, [pc, #512]	; (80215ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80213aa:	f003 fd07 	bl	8024dbc <__assert_func>
 80213ae:	4602      	mov	r2, r0
 80213b0:	e7cd      	b.n	802134e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80213b2:	4606      	mov	r6, r0
 80213b4:	4602      	mov	r2, r0
 80213b6:	e7d2      	b.n	802135e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80213b8:	4606      	mov	r6, r0
 80213ba:	e7d0      	b.n	802135e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80213bc:	4604      	mov	r4, r0
 80213be:	e7da      	b.n	8021376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80213c0:	4604      	mov	r4, r0
 80213c2:	e7e1      	b.n	8021388 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80213c4:	b2ab      	uxth	r3, r5
 80213c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80213ca:	b2bf      	uxth	r7, r7
 80213cc:	fb03 fe07 	mul.w	lr, r3, r7
 80213d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80213d4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80213d8:	eba3 0c0e 	sub.w	ip, r3, lr
 80213dc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80213e0:	b2bf      	uxth	r7, r7
 80213e2:	fa1f fc8c 	uxth.w	ip, ip
 80213e6:	eba5 0507 	sub.w	r5, r5, r7
 80213ea:	fb0c f30a 	mul.w	r3, ip, sl
 80213ee:	b2ad      	uxth	r5, r5
 80213f0:	fb05 330b 	mla	r3, r5, fp, r3
 80213f4:	fb07 3309 	mla	r3, r7, r9, r3
 80213f8:	fb0e 3308 	mla	r3, lr, r8, r3
 80213fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021400:	9303      	str	r3, [sp, #12]
 8021402:	d018      	beq.n	8021436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021404:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021408:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802140c:	fb0b f303 	mul.w	r3, fp, r3
 8021410:	fb0b fb02 	mul.w	fp, fp, r2
 8021414:	0a1a      	lsrs	r2, r3, #8
 8021416:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802141a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802141e:	441a      	add	r2, r3
 8021420:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021424:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021428:	0a12      	lsrs	r2, r2, #8
 802142a:	0a1b      	lsrs	r3, r3, #8
 802142c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021430:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021434:	431a      	orrs	r2, r3
 8021436:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802143a:	d019      	beq.n	8021470 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 802143c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021440:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021444:	fb0a fb0b 	mul.w	fp, sl, fp
 8021448:	fb0a fa06 	mul.w	sl, sl, r6
 802144c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021450:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021454:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021458:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802145c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021460:	445e      	add	r6, fp
 8021462:	0a1b      	lsrs	r3, r3, #8
 8021464:	0a36      	lsrs	r6, r6, #8
 8021466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802146a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802146e:	431e      	orrs	r6, r3
 8021470:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021474:	d019      	beq.n	80214aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021476:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802147a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802147e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021482:	fb09 f904 	mul.w	r9, r9, r4
 8021486:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802148a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802148e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021492:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021496:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802149a:	4454      	add	r4, sl
 802149c:	0a1b      	lsrs	r3, r3, #8
 802149e:	0a24      	lsrs	r4, r4, #8
 80214a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80214a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80214a8:	431c      	orrs	r4, r3
 80214aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80214ae:	d019      	beq.n	80214e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80214b0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80214b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80214b8:	fb08 f909 	mul.w	r9, r8, r9
 80214bc:	fb08 f800 	mul.w	r8, r8, r0
 80214c0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80214c4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80214c8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80214cc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80214d0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80214d4:	4448      	add	r0, r9
 80214d6:	0a1b      	lsrs	r3, r3, #8
 80214d8:	0a00      	lsrs	r0, r0, #8
 80214da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80214de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80214e2:	4318      	orrs	r0, r3
 80214e4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80214e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80214ec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80214f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80214f4:	fb0c f808 	mul.w	r8, ip, r8
 80214f8:	fb0c f606 	mul.w	r6, ip, r6
 80214fc:	fb05 8803 	mla	r8, r5, r3, r8
 8021500:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021504:	fb05 6202 	mla	r2, r5, r2, r6
 8021508:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802150c:	fb07 8803 	mla	r8, r7, r3, r8
 8021510:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021514:	fb07 2704 	mla	r7, r7, r4, r2
 8021518:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802151c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021520:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021524:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021528:	9803      	ldr	r0, [sp, #12]
 802152a:	b292      	uxth	r2, r2
 802152c:	9c02      	ldr	r4, [sp, #8]
 802152e:	0a1b      	lsrs	r3, r3, #8
 8021530:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021534:	4350      	muls	r0, r2
 8021536:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802153a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802153e:	ea43 0e0e 	orr.w	lr, r3, lr
 8021542:	1c43      	adds	r3, r0, #1
 8021544:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021548:	fa5f f08e 	uxtb.w	r0, lr
 802154c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021550:	b2db      	uxtb	r3, r3
 8021552:	fb14 f403 	smulbb	r4, r4, r3
 8021556:	fb00 4002 	mla	r0, r0, r2, r4
 802155a:	b280      	uxth	r0, r0
 802155c:	1c44      	adds	r4, r0, #1
 802155e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021562:	9c01      	ldr	r4, [sp, #4]
 8021564:	fb14 f403 	smulbb	r4, r4, r3
 8021568:	1200      	asrs	r0, r0, #8
 802156a:	7008      	strb	r0, [r1, #0]
 802156c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021570:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021574:	fb00 4002 	mla	r0, r0, r2, r4
 8021578:	b280      	uxth	r0, r0
 802157a:	1c44      	adds	r4, r0, #1
 802157c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021580:	1200      	asrs	r0, r0, #8
 8021582:	7048      	strb	r0, [r1, #1]
 8021584:	9800      	ldr	r0, [sp, #0]
 8021586:	fb10 f303 	smulbb	r3, r0, r3
 802158a:	fb0e 3202 	mla	r2, lr, r2, r3
 802158e:	b292      	uxth	r2, r2
 8021590:	f102 0e01 	add.w	lr, r2, #1
 8021594:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021598:	1212      	asrs	r2, r2, #8
 802159a:	708a      	strb	r2, [r1, #2]
 802159c:	b005      	add	sp, #20
 802159e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215a2:	bf00      	nop
 80215a4:	080297ab 	.word	0x080297ab
 80215a8:	08029ca2 	.word	0x08029ca2
 80215ac:	08029874 	.word	0x08029874

080215b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80215b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215b4:	ed2d 8b08 	vpush	{d8-d11}
 80215b8:	b099      	sub	sp, #100	; 0x64
 80215ba:	eeb0 aa40 	vmov.f32	s20, s0
 80215be:	eef0 9a60 	vmov.f32	s19, s1
 80215c2:	9306      	str	r3, [sp, #24]
 80215c4:	eeb0 9a41 	vmov.f32	s18, s2
 80215c8:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 80215cc:	eeb0 8a62 	vmov.f32	s16, s5
 80215d0:	9216      	str	r2, [sp, #88]	; 0x58
 80215d2:	eef0 8a43 	vmov.f32	s17, s6
 80215d6:	9307      	str	r3, [sp, #28]
 80215d8:	eef0 ba44 	vmov.f32	s23, s8
 80215dc:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 80215e0:	eeb0 ba64 	vmov.f32	s22, s9
 80215e4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80215e6:	eef0 aa45 	vmov.f32	s21, s10
 80215ea:	9310      	str	r3, [sp, #64]	; 0x40
 80215ec:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 80215f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80215f2:	9112      	str	r1, [sp, #72]	; 0x48
 80215f4:	6850      	ldr	r0, [r2, #4]
 80215f6:	9315      	str	r3, [sp, #84]	; 0x54
 80215f8:	6812      	ldr	r2, [r2, #0]
 80215fa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80215fc:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021600:	fb00 1303 	mla	r3, r0, r3, r1
 8021604:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021608:	18d3      	adds	r3, r2, r3
 802160a:	930a      	str	r3, [sp, #40]	; 0x28
 802160c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802160e:	681b      	ldr	r3, [r3, #0]
 8021610:	9311      	str	r3, [sp, #68]	; 0x44
 8021612:	9b07      	ldr	r3, [sp, #28]
 8021614:	009b      	lsls	r3, r3, #2
 8021616:	930e      	str	r3, [sp, #56]	; 0x38
 8021618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802161a:	2b00      	cmp	r3, #0
 802161c:	dc03      	bgt.n	8021626 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802161e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021620:	2b00      	cmp	r3, #0
 8021622:	f340 833b 	ble.w	8021c9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021626:	9b06      	ldr	r3, [sp, #24]
 8021628:	2b00      	cmp	r3, #0
 802162a:	f340 8197 	ble.w	802195c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802162e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021630:	1423      	asrs	r3, r4, #16
 8021632:	1412      	asrs	r2, r2, #16
 8021634:	d432      	bmi.n	802169c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8021636:	1c51      	adds	r1, r2, #1
 8021638:	9807      	ldr	r0, [sp, #28]
 802163a:	4288      	cmp	r0, r1
 802163c:	dd31      	ble.n	80216a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802163e:	2b00      	cmp	r3, #0
 8021640:	db2f      	blt.n	80216a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021642:	1c59      	adds	r1, r3, #1
 8021644:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021646:	4288      	cmp	r0, r1
 8021648:	dd2b      	ble.n	80216a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802164a:	9b06      	ldr	r3, [sp, #24]
 802164c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802164e:	3b01      	subs	r3, #1
 8021650:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021652:	fb02 1203 	mla	r2, r2, r3, r1
 8021656:	1412      	asrs	r2, r2, #16
 8021658:	d42e      	bmi.n	80216b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802165a:	3201      	adds	r2, #1
 802165c:	9907      	ldr	r1, [sp, #28]
 802165e:	4291      	cmp	r1, r2
 8021660:	dd2a      	ble.n	80216b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021662:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021664:	fb02 4303 	mla	r3, r2, r3, r4
 8021668:	141b      	asrs	r3, r3, #16
 802166a:	d425      	bmi.n	80216b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802166c:	3301      	adds	r3, #1
 802166e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021670:	429a      	cmp	r2, r3
 8021672:	dd21      	ble.n	80216b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021676:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 802167a:	f103 0e03 	add.w	lr, r3, #3
 802167e:	9b06      	ldr	r3, [sp, #24]
 8021680:	9313      	str	r3, [sp, #76]	; 0x4c
 8021682:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021684:	2b00      	cmp	r3, #0
 8021686:	f300 81d2 	bgt.w	8021a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 802168a:	9b06      	ldr	r3, [sp, #24]
 802168c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021692:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021696:	4423      	add	r3, r4
 8021698:	930a      	str	r3, [sp, #40]	; 0x28
 802169a:	e161      	b.n	8021960 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 802169c:	1c51      	adds	r1, r2, #1
 802169e:	f040 8150 	bne.w	8021942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80216a2:	9907      	ldr	r1, [sp, #28]
 80216a4:	428a      	cmp	r2, r1
 80216a6:	f280 814c 	bge.w	8021942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80216aa:	1c5a      	adds	r2, r3, #1
 80216ac:	f2c0 8149 	blt.w	8021942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80216b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80216b2:	4293      	cmp	r3, r2
 80216b4:	f280 8145 	bge.w	8021942 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80216b8:	9b06      	ldr	r3, [sp, #24]
 80216ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80216bc:	9314      	str	r3, [sp, #80]	; 0x50
 80216be:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80216c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80216c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	dddf      	ble.n	802168a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80216ca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80216cc:	1423      	asrs	r3, r4, #16
 80216ce:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80216d2:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80216d6:	1412      	asrs	r2, r2, #16
 80216d8:	f100 8190 	bmi.w	80219fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 80216dc:	1c55      	adds	r5, r2, #1
 80216de:	9f07      	ldr	r7, [sp, #28]
 80216e0:	42af      	cmp	r7, r5
 80216e2:	f340 818d 	ble.w	8021a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	f2c0 818a 	blt.w	8021a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80216ec:	1c5d      	adds	r5, r3, #1
 80216ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80216f0:	42af      	cmp	r7, r5
 80216f2:	f340 8185 	ble.w	8021a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80216f6:	9d07      	ldr	r5, [sp, #28]
 80216f8:	fb03 2305 	mla	r3, r3, r5, r2
 80216fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80216fe:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021706:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802170a:	2800      	cmp	r0, #0
 802170c:	f000 8167 	beq.w	80219de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021710:	686a      	ldr	r2, [r5, #4]
 8021712:	920b      	str	r2, [sp, #44]	; 0x2c
 8021714:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021718:	2900      	cmp	r1, #0
 802171a:	f000 8169 	beq.w	80219f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802171e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021720:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021722:	18aa      	adds	r2, r5, r2
 8021724:	59ed      	ldr	r5, [r5, r7]
 8021726:	6852      	ldr	r2, [r2, #4]
 8021728:	9508      	str	r5, [sp, #32]
 802172a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802172e:	0e15      	lsrs	r5, r2, #24
 8021730:	920c      	str	r2, [sp, #48]	; 0x30
 8021732:	b280      	uxth	r0, r0
 8021734:	b289      	uxth	r1, r1
 8021736:	fb00 fb01 	mul.w	fp, r0, r1
 802173a:	0100      	lsls	r0, r0, #4
 802173c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8021740:	eba0 090b 	sub.w	r9, r0, fp
 8021744:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8021748:	b289      	uxth	r1, r1
 802174a:	fa1f f989 	uxth.w	r9, r9
 802174e:	1a52      	subs	r2, r2, r1
 8021750:	fb09 f008 	mul.w	r0, r9, r8
 8021754:	b292      	uxth	r2, r2
 8021756:	fb02 000c 	mla	r0, r2, ip, r0
 802175a:	fb01 000a 	mla	r0, r1, sl, r0
 802175e:	fb0b 0005 	mla	r0, fp, r5, r0
 8021762:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021766:	2800      	cmp	r0, #0
 8021768:	f000 80e0 	beq.w	802192c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802176c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021770:	d01b      	beq.n	80217aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8021772:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802177a:	fb0c fe0e 	mul.w	lr, ip, lr
 802177e:	fb0c fc03 	mul.w	ip, ip, r3
 8021782:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021786:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802178a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802178e:	4473      	add	r3, lr
 8021790:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021794:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021798:	0a1b      	lsrs	r3, r3, #8
 802179a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802179e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80217a2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80217a6:	ea43 030e 	orr.w	r3, r3, lr
 80217aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80217ae:	d01e      	beq.n	80217ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80217b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80217b2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80217b6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80217ba:	fb08 fc0c 	mul.w	ip, r8, ip
 80217be:	fb08 f80e 	mul.w	r8, r8, lr
 80217c2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80217c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80217ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80217ce:	44e6      	add	lr, ip
 80217d0:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80217d4:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80217d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80217dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80217e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80217e4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80217e8:	ea4e 0708 	orr.w	r7, lr, r8
 80217ec:	970b      	str	r7, [sp, #44]	; 0x2c
 80217ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80217f2:	d01e      	beq.n	8021832 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80217f4:	9f08      	ldr	r7, [sp, #32]
 80217f6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80217fa:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80217fe:	fb0a f808 	mul.w	r8, sl, r8
 8021802:	fb0a fa0c 	mul.w	sl, sl, ip
 8021806:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802180a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802180e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021812:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021816:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802181a:	44c6      	add	lr, r8
 802181c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021820:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021824:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021828:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802182c:	ea4e 070a 	orr.w	r7, lr, sl
 8021830:	9708      	str	r7, [sp, #32]
 8021832:	2dff      	cmp	r5, #255	; 0xff
 8021834:	d01d      	beq.n	8021872 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8021836:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021838:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802183c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021840:	fb05 f808 	mul.w	r8, r5, r8
 8021844:	fb05 f50c 	mul.w	r5, r5, ip
 8021848:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802184c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021850:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021854:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021858:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802185c:	44c6      	add	lr, r8
 802185e:	0a2d      	lsrs	r5, r5, #8
 8021860:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021864:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021868:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802186c:	ea4e 0505 	orr.w	r5, lr, r5
 8021870:	950c      	str	r5, [sp, #48]	; 0x30
 8021872:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021874:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021878:	9f08      	ldr	r7, [sp, #32]
 802187a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802187e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021882:	fb09 f505 	mul.w	r5, r9, r5
 8021886:	fb02 550c 	mla	r5, r2, ip, r5
 802188a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802188e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021890:	fb01 550c 	mla	r5, r1, ip, r5
 8021894:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021898:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802189a:	fb0b 550c 	mla	r5, fp, ip, r5
 802189e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80218a2:	fb09 f90c 	mul.w	r9, r9, ip
 80218a6:	0a2d      	lsrs	r5, r5, #8
 80218a8:	fb02 9303 	mla	r3, r2, r3, r9
 80218ac:	9a08      	ldr	r2, [sp, #32]
 80218ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80218b2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80218b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80218b8:	fb01 330e 	mla	r3, r1, lr, r3
 80218bc:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80218c0:	fb0b 3b01 	mla	fp, fp, r1, r3
 80218c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80218c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80218c8:	4343      	muls	r3, r0
 80218ca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80218ce:	1c58      	adds	r0, r3, #1
 80218d0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80218d4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80218d8:	ea45 050b 	orr.w	r5, r5, fp
 80218dc:	7833      	ldrb	r3, [r6, #0]
 80218de:	b2ea      	uxtb	r2, r5
 80218e0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80218e4:	fb12 f201 	smulbb	r2, r2, r1
 80218e8:	b2c0      	uxtb	r0, r0
 80218ea:	fb03 2300 	mla	r3, r3, r0, r2
 80218ee:	b29b      	uxth	r3, r3
 80218f0:	1c5a      	adds	r2, r3, #1
 80218f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80218f6:	7872      	ldrb	r2, [r6, #1]
 80218f8:	fb12 f200 	smulbb	r2, r2, r0
 80218fc:	121b      	asrs	r3, r3, #8
 80218fe:	7033      	strb	r3, [r6, #0]
 8021900:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021904:	0c2d      	lsrs	r5, r5, #16
 8021906:	fb03 2301 	mla	r3, r3, r1, r2
 802190a:	b29b      	uxth	r3, r3
 802190c:	1c5a      	adds	r2, r3, #1
 802190e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021912:	121b      	asrs	r3, r3, #8
 8021914:	7073      	strb	r3, [r6, #1]
 8021916:	78b3      	ldrb	r3, [r6, #2]
 8021918:	fb13 f000 	smulbb	r0, r3, r0
 802191c:	fb05 0501 	mla	r5, r5, r1, r0
 8021920:	b2ad      	uxth	r5, r5
 8021922:	1c6b      	adds	r3, r5, #1
 8021924:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021928:	122d      	asrs	r5, r5, #8
 802192a:	70b5      	strb	r5, [r6, #2]
 802192c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802192e:	3603      	adds	r6, #3
 8021930:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021932:	4413      	add	r3, r2
 8021934:	932b      	str	r3, [sp, #172]	; 0xac
 8021936:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021938:	441c      	add	r4, r3
 802193a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802193c:	3b01      	subs	r3, #1
 802193e:	9314      	str	r3, [sp, #80]	; 0x50
 8021940:	e6c0      	b.n	80216c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8021942:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021944:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021946:	4413      	add	r3, r2
 8021948:	932b      	str	r3, [sp, #172]	; 0xac
 802194a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802194c:	441c      	add	r4, r3
 802194e:	9b06      	ldr	r3, [sp, #24]
 8021950:	3b01      	subs	r3, #1
 8021952:	9306      	str	r3, [sp, #24]
 8021954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021956:	3303      	adds	r3, #3
 8021958:	930a      	str	r3, [sp, #40]	; 0x28
 802195a:	e664      	b.n	8021626 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802195c:	f47f ae75 	bne.w	802164a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8021960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021962:	2b00      	cmp	r3, #0
 8021964:	f340 819a 	ble.w	8021c9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802196c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802196e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021972:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021976:	eef0 6a48 	vmov.f32	s13, s16
 802197a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802197e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021982:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021986:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802198a:	eef0 6a68 	vmov.f32	s13, s17
 802198e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021992:	ee16 4a90 	vmov	r4, s13
 8021996:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802199a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802199e:	ee37 8a48 	vsub.f32	s16, s14, s16
 80219a2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80219a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80219aa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80219ae:	ee18 2a10 	vmov	r2, s16
 80219b2:	eeb0 8a47 	vmov.f32	s16, s14
 80219b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80219ba:	ee18 2a90 	vmov	r2, s17
 80219be:	932d      	str	r3, [sp, #180]	; 0xb4
 80219c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80219c2:	eef0 8a67 	vmov.f32	s17, s15
 80219c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80219ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80219cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80219ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80219d0:	3b01      	subs	r3, #1
 80219d2:	9312      	str	r3, [sp, #72]	; 0x48
 80219d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80219d6:	bf08      	it	eq
 80219d8:	4613      	moveq	r3, r2
 80219da:	9306      	str	r3, [sp, #24]
 80219dc:	e61c      	b.n	8021618 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80219de:	b151      	cbz	r1, 80219f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80219e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80219e2:	58aa      	ldr	r2, [r5, r2]
 80219e4:	25ff      	movs	r5, #255	; 0xff
 80219e6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80219ea:	9208      	str	r2, [sp, #32]
 80219ec:	46a8      	mov	r8, r5
 80219ee:	e6a0      	b.n	8021732 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80219f0:	25ff      	movs	r5, #255	; 0xff
 80219f2:	46aa      	mov	sl, r5
 80219f4:	e69d      	b.n	8021732 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80219f6:	25ff      	movs	r5, #255	; 0xff
 80219f8:	46aa      	mov	sl, r5
 80219fa:	e7f7      	b.n	80219ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80219fc:	1c57      	adds	r7, r2, #1
 80219fe:	d195      	bne.n	802192c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021a00:	9d07      	ldr	r5, [sp, #28]
 8021a02:	4295      	cmp	r5, r2
 8021a04:	dd92      	ble.n	802192c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021a06:	1c5d      	adds	r5, r3, #1
 8021a08:	db90      	blt.n	802192c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021a0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021a0c:	429d      	cmp	r5, r3
 8021a0e:	dd8d      	ble.n	802192c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021a10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021a12:	9201      	str	r2, [sp, #4]
 8021a14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021a16:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8021a1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021a1e:	9300      	str	r3, [sp, #0]
 8021a20:	9b07      	ldr	r3, [sp, #28]
 8021a22:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8021a26:	4631      	mov	r1, r6
 8021a28:	f7ff fc68 	bl	80212fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021a2c:	e77e      	b.n	802192c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021a2e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021a30:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021a34:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021a36:	9d07      	ldr	r5, [sp, #28]
 8021a38:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021a3c:	1412      	asrs	r2, r2, #16
 8021a3e:	1423      	asrs	r3, r4, #16
 8021a40:	fb05 2303 	mla	r3, r5, r3, r2
 8021a44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021a46:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021a4e:	0e1e      	lsrs	r6, r3, #24
 8021a50:	2900      	cmp	r1, #0
 8021a52:	f000 8114 	beq.w	8021c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8021a56:	686a      	ldr	r2, [r5, #4]
 8021a58:	920d      	str	r2, [sp, #52]	; 0x34
 8021a5a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8021a5e:	2800      	cmp	r0, #0
 8021a60:	f000 8116 	beq.w	8021c90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8021a64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021a66:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021a68:	18aa      	adds	r2, r5, r2
 8021a6a:	59ed      	ldr	r5, [r5, r7]
 8021a6c:	6852      	ldr	r2, [r2, #4]
 8021a6e:	9509      	str	r5, [sp, #36]	; 0x24
 8021a70:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021a74:	0e15      	lsrs	r5, r2, #24
 8021a76:	920f      	str	r2, [sp, #60]	; 0x3c
 8021a78:	b289      	uxth	r1, r1
 8021a7a:	b280      	uxth	r0, r0
 8021a7c:	fb01 fa00 	mul.w	sl, r1, r0
 8021a80:	0109      	lsls	r1, r1, #4
 8021a82:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021a86:	eba1 080a 	sub.w	r8, r1, sl
 8021a8a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021a8e:	b280      	uxth	r0, r0
 8021a90:	fa1f f888 	uxth.w	r8, r8
 8021a94:	1a12      	subs	r2, r2, r0
 8021a96:	fb08 f10c 	mul.w	r1, r8, ip
 8021a9a:	b292      	uxth	r2, r2
 8021a9c:	fb02 1106 	mla	r1, r2, r6, r1
 8021aa0:	fb00 1109 	mla	r1, r0, r9, r1
 8021aa4:	fb0a 1105 	mla	r1, sl, r5, r1
 8021aa8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021aac:	2900      	cmp	r1, #0
 8021aae:	f000 80da 	beq.w	8021c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8021ab2:	2eff      	cmp	r6, #255	; 0xff
 8021ab4:	d016      	beq.n	8021ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8021ab6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021aba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021abe:	4377      	muls	r7, r6
 8021ac0:	435e      	muls	r6, r3
 8021ac2:	0a3b      	lsrs	r3, r7, #8
 8021ac4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ac8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021acc:	443b      	add	r3, r7
 8021ace:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021ad2:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021ad6:	0a1b      	lsrs	r3, r3, #8
 8021ad8:	0a3f      	lsrs	r7, r7, #8
 8021ada:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ade:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021ae2:	433b      	orrs	r3, r7
 8021ae4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021ae8:	d01d      	beq.n	8021b26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8021aea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021aec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021aee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021af2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021af6:	fb0c f606 	mul.w	r6, ip, r6
 8021afa:	fb0c fc07 	mul.w	ip, ip, r7
 8021afe:	0a37      	lsrs	r7, r6, #8
 8021b00:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021b04:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021b08:	4437      	add	r7, r6
 8021b0a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021b0e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021b12:	0a3f      	lsrs	r7, r7, #8
 8021b14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b18:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021b1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021b20:	ea47 060c 	orr.w	r6, r7, ip
 8021b24:	960d      	str	r6, [sp, #52]	; 0x34
 8021b26:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021b2a:	d01d      	beq.n	8021b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8021b2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021b2e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021b32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b36:	fb09 fc0c 	mul.w	ip, r9, ip
 8021b3a:	fb09 f906 	mul.w	r9, r9, r6
 8021b3e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021b42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021b46:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8021b4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021b4e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8021b52:	4467      	add	r7, ip
 8021b54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021b58:	0a3f      	lsrs	r7, r7, #8
 8021b5a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021b5e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021b62:	ea47 0609 	orr.w	r6, r7, r9
 8021b66:	9609      	str	r6, [sp, #36]	; 0x24
 8021b68:	2dff      	cmp	r5, #255	; 0xff
 8021b6a:	d01a      	beq.n	8021ba2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8021b6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021b6e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021b72:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b76:	fb05 fc0c 	mul.w	ip, r5, ip
 8021b7a:	4375      	muls	r5, r6
 8021b7c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021b80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021b84:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021b88:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021b8c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021b90:	4467      	add	r7, ip
 8021b92:	0a2d      	lsrs	r5, r5, #8
 8021b94:	0a3f      	lsrs	r7, r7, #8
 8021b96:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021b9a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021b9e:	433d      	orrs	r5, r7
 8021ba0:	950f      	str	r5, [sp, #60]	; 0x3c
 8021ba2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021ba4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021ba8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021bac:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021bb0:	fb08 f505 	mul.w	r5, r8, r5
 8021bb4:	fb02 5506 	mla	r5, r2, r6, r5
 8021bb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021bba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021bbe:	fb00 5506 	mla	r5, r0, r6, r5
 8021bc2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021bc4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021bc8:	fb0a 5506 	mla	r5, sl, r6, r5
 8021bcc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021bce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021bd2:	0a2d      	lsrs	r5, r5, #8
 8021bd4:	fb08 f806 	mul.w	r8, r8, r6
 8021bd8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021bdc:	fb02 8303 	mla	r3, r2, r3, r8
 8021be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021be2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021be8:	fb00 3307 	mla	r3, r0, r7, r3
 8021bec:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021bf0:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021bf4:	fb01 f30b 	mul.w	r3, r1, fp
 8021bf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021bfc:	1c59      	adds	r1, r3, #1
 8021bfe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021c02:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021c06:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021c0a:	ea45 050c 	orr.w	r5, r5, ip
 8021c0e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021c12:	b2ea      	uxtb	r2, r5
 8021c14:	b2c9      	uxtb	r1, r1
 8021c16:	fb12 f20b 	smulbb	r2, r2, fp
 8021c1a:	fb03 2301 	mla	r3, r3, r1, r2
 8021c1e:	b29b      	uxth	r3, r3
 8021c20:	1c5a      	adds	r2, r3, #1
 8021c22:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021c26:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021c2a:	fb12 f201 	smulbb	r2, r2, r1
 8021c2e:	121b      	asrs	r3, r3, #8
 8021c30:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021c34:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021c38:	0c2d      	lsrs	r5, r5, #16
 8021c3a:	fb03 230b 	mla	r3, r3, fp, r2
 8021c3e:	b29b      	uxth	r3, r3
 8021c40:	1c5a      	adds	r2, r3, #1
 8021c42:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021c46:	121b      	asrs	r3, r3, #8
 8021c48:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021c4c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021c50:	fb13 f101 	smulbb	r1, r3, r1
 8021c54:	fb05 150b 	mla	r5, r5, fp, r1
 8021c58:	b2ad      	uxth	r5, r5
 8021c5a:	1c69      	adds	r1, r5, #1
 8021c5c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021c60:	122d      	asrs	r5, r5, #8
 8021c62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021c66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021c68:	f10e 0e03 	add.w	lr, lr, #3
 8021c6c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021c6e:	4413      	add	r3, r2
 8021c70:	932b      	str	r3, [sp, #172]	; 0xac
 8021c72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c74:	441c      	add	r4, r3
 8021c76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c78:	3b01      	subs	r3, #1
 8021c7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c7c:	e501      	b.n	8021682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021c7e:	b150      	cbz	r0, 8021c96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8021c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021c82:	58aa      	ldr	r2, [r5, r2]
 8021c84:	25ff      	movs	r5, #255	; 0xff
 8021c86:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8021c8c:	46ac      	mov	ip, r5
 8021c8e:	e6f3      	b.n	8021a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021c90:	25ff      	movs	r5, #255	; 0xff
 8021c92:	46a9      	mov	r9, r5
 8021c94:	e6f0      	b.n	8021a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021c96:	25ff      	movs	r5, #255	; 0xff
 8021c98:	46a9      	mov	r9, r5
 8021c9a:	e7f7      	b.n	8021c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8021c9c:	b019      	add	sp, #100	; 0x64
 8021c9e:	ecbd 8b08 	vpop	{d8-d11}
 8021ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cac:	b085      	sub	sp, #20
 8021cae:	7888      	ldrb	r0, [r1, #2]
 8021cb0:	4691      	mov	r9, r2
 8021cb2:	9000      	str	r0, [sp, #0]
 8021cb4:	7848      	ldrb	r0, [r1, #1]
 8021cb6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021cba:	9001      	str	r0, [sp, #4]
 8021cbc:	7808      	ldrb	r0, [r1, #0]
 8021cbe:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021cc2:	9002      	str	r0, [sp, #8]
 8021cc4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021cc8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021ccc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021cd0:	fb04 c603 	mla	r6, r4, r3, ip
 8021cd4:	2c00      	cmp	r4, #0
 8021cd6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021cda:	9a00      	ldr	r2, [sp, #0]
 8021cdc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021ce0:	9a01      	ldr	r2, [sp, #4]
 8021ce2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021ce6:	db3a      	blt.n	8021d5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021ce8:	45a0      	cmp	r8, r4
 8021cea:	dd38      	ble.n	8021d5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021cec:	f1bc 0f00 	cmp.w	ip, #0
 8021cf0:	db33      	blt.n	8021d5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021cf2:	4563      	cmp	r3, ip
 8021cf4:	dd31      	ble.n	8021d5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021cf6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021cfa:	f11c 0601 	adds.w	r6, ip, #1
 8021cfe:	d431      	bmi.n	8021d64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021d00:	42b3      	cmp	r3, r6
 8021d02:	dd2f      	ble.n	8021d64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021d04:	b375      	cbz	r5, 8021d64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021d06:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021d0a:	3401      	adds	r4, #1
 8021d0c:	d42e      	bmi.n	8021d6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021d0e:	45a0      	cmp	r8, r4
 8021d10:	dd2c      	ble.n	8021d6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021d12:	b35f      	cbz	r7, 8021d6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021d14:	f1bc 0f00 	cmp.w	ip, #0
 8021d18:	db26      	blt.n	8021d68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021d1a:	4563      	cmp	r3, ip
 8021d1c:	dd24      	ble.n	8021d68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021d1e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021d22:	f11c 0c01 	adds.w	ip, ip, #1
 8021d26:	d405      	bmi.n	8021d34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021d28:	4563      	cmp	r3, ip
 8021d2a:	dd03      	ble.n	8021d34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021d2c:	b115      	cbz	r5, 8021d34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021d2e:	3301      	adds	r3, #1
 8021d30:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021d34:	2d0f      	cmp	r5, #15
 8021d36:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021d3a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021d3e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021d42:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021d46:	d801      	bhi.n	8021d4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8021d48:	2f0f      	cmp	r7, #15
 8021d4a:	d911      	bls.n	8021d70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8021d4c:	4b77      	ldr	r3, [pc, #476]	; (8021f2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8021d4e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021d52:	4a77      	ldr	r2, [pc, #476]	; (8021f30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8021d54:	4877      	ldr	r0, [pc, #476]	; (8021f34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8021d56:	f003 f831 	bl	8024dbc <__assert_func>
 8021d5a:	4602      	mov	r2, r0
 8021d5c:	e7cd      	b.n	8021cfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8021d5e:	4606      	mov	r6, r0
 8021d60:	4602      	mov	r2, r0
 8021d62:	e7d2      	b.n	8021d0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021d64:	4606      	mov	r6, r0
 8021d66:	e7d0      	b.n	8021d0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021d68:	4604      	mov	r4, r0
 8021d6a:	e7da      	b.n	8021d22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8021d6c:	4604      	mov	r4, r0
 8021d6e:	e7e1      	b.n	8021d34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021d70:	b2ab      	uxth	r3, r5
 8021d72:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021d76:	b2bf      	uxth	r7, r7
 8021d78:	fb03 fe07 	mul.w	lr, r3, r7
 8021d7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021d80:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021d84:	eba3 0c0e 	sub.w	ip, r3, lr
 8021d88:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021d8c:	b2bf      	uxth	r7, r7
 8021d8e:	fa1f fc8c 	uxth.w	ip, ip
 8021d92:	eba5 0507 	sub.w	r5, r5, r7
 8021d96:	fb0c f30a 	mul.w	r3, ip, sl
 8021d9a:	b2ad      	uxth	r5, r5
 8021d9c:	fb05 330b 	mla	r3, r5, fp, r3
 8021da0:	fb07 3309 	mla	r3, r7, r9, r3
 8021da4:	fb0e 3308 	mla	r3, lr, r8, r3
 8021da8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021dac:	9303      	str	r3, [sp, #12]
 8021dae:	d018      	beq.n	8021de2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8021db0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021db4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021db8:	fb0b f303 	mul.w	r3, fp, r3
 8021dbc:	fb0b fb02 	mul.w	fp, fp, r2
 8021dc0:	0a1a      	lsrs	r2, r3, #8
 8021dc2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021dc6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021dca:	441a      	add	r2, r3
 8021dcc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021dd0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021dd4:	0a12      	lsrs	r2, r2, #8
 8021dd6:	0a1b      	lsrs	r3, r3, #8
 8021dd8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ddc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021de0:	431a      	orrs	r2, r3
 8021de2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021de6:	d019      	beq.n	8021e1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021de8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021dec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021df0:	fb0a fb0b 	mul.w	fp, sl, fp
 8021df4:	fb0a fa06 	mul.w	sl, sl, r6
 8021df8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021dfc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e00:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021e04:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021e08:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021e0c:	445e      	add	r6, fp
 8021e0e:	0a1b      	lsrs	r3, r3, #8
 8021e10:	0a36      	lsrs	r6, r6, #8
 8021e12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e16:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021e1a:	431e      	orrs	r6, r3
 8021e1c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021e20:	d019      	beq.n	8021e56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021e22:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021e26:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021e2a:	fb09 fa0a 	mul.w	sl, r9, sl
 8021e2e:	fb09 f904 	mul.w	r9, r9, r4
 8021e32:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021e36:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e3a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021e3e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021e42:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021e46:	4454      	add	r4, sl
 8021e48:	0a1b      	lsrs	r3, r3, #8
 8021e4a:	0a24      	lsrs	r4, r4, #8
 8021e4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e50:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021e54:	431c      	orrs	r4, r3
 8021e56:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021e5a:	d019      	beq.n	8021e90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8021e5c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021e60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021e64:	fb08 f909 	mul.w	r9, r8, r9
 8021e68:	fb08 f800 	mul.w	r8, r8, r0
 8021e6c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021e70:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021e74:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021e78:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021e7c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021e80:	4448      	add	r0, r9
 8021e82:	0a1b      	lsrs	r3, r3, #8
 8021e84:	0a00      	lsrs	r0, r0, #8
 8021e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e8a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021e8e:	4318      	orrs	r0, r3
 8021e90:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021e94:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021e98:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021e9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ea0:	fb0c f808 	mul.w	r8, ip, r8
 8021ea4:	fb0c f606 	mul.w	r6, ip, r6
 8021ea8:	fb05 8803 	mla	r8, r5, r3, r8
 8021eac:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021eb0:	fb05 6202 	mla	r2, r5, r2, r6
 8021eb4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021eb8:	fb07 8803 	mla	r8, r7, r3, r8
 8021ebc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021ec0:	fb07 2704 	mla	r7, r7, r4, r2
 8021ec4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021ec8:	fb0e 8303 	mla	r3, lr, r3, r8
 8021ecc:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021ed0:	9802      	ldr	r0, [sp, #8]
 8021ed2:	0a1b      	lsrs	r3, r3, #8
 8021ed4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ed8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021edc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021ee0:	ea43 0e0e 	orr.w	lr, r3, lr
 8021ee4:	9b03      	ldr	r3, [sp, #12]
 8021ee6:	43db      	mvns	r3, r3
 8021ee8:	b2db      	uxtb	r3, r3
 8021eea:	4358      	muls	r0, r3
 8021eec:	1c42      	adds	r2, r0, #1
 8021eee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021ef2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021ef6:	700a      	strb	r2, [r1, #0]
 8021ef8:	9a01      	ldr	r2, [sp, #4]
 8021efa:	435a      	muls	r2, r3
 8021efc:	1c50      	adds	r0, r2, #1
 8021efe:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021f02:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021f06:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021f0a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021f0e:	704a      	strb	r2, [r1, #1]
 8021f10:	9a00      	ldr	r2, [sp, #0]
 8021f12:	435a      	muls	r2, r3
 8021f14:	4613      	mov	r3, r2
 8021f16:	3201      	adds	r2, #1
 8021f18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021f1c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021f20:	f881 e002 	strb.w	lr, [r1, #2]
 8021f24:	b005      	add	sp, #20
 8021f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f2a:	bf00      	nop
 8021f2c:	080297ab 	.word	0x080297ab
 8021f30:	08029ca2 	.word	0x08029ca2
 8021f34:	08029874 	.word	0x08029874

08021f38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f3c:	ed2d 8b08 	vpush	{d8-d11}
 8021f40:	b097      	sub	sp, #92	; 0x5c
 8021f42:	eeb0 aa40 	vmov.f32	s20, s0
 8021f46:	eef0 9a60 	vmov.f32	s19, s1
 8021f4a:	9306      	str	r3, [sp, #24]
 8021f4c:	eeb0 9a41 	vmov.f32	s18, s2
 8021f50:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021f54:	eeb0 8a62 	vmov.f32	s16, s5
 8021f58:	9214      	str	r2, [sp, #80]	; 0x50
 8021f5a:	eef0 8a43 	vmov.f32	s17, s6
 8021f5e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021f60:	eef0 ba44 	vmov.f32	s23, s8
 8021f64:	9307      	str	r3, [sp, #28]
 8021f66:	eeb0 ba64 	vmov.f32	s22, s9
 8021f6a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021f6e:	eef0 aa45 	vmov.f32	s21, s10
 8021f72:	9015      	str	r0, [sp, #84]	; 0x54
 8021f74:	9112      	str	r1, [sp, #72]	; 0x48
 8021f76:	6850      	ldr	r0, [r2, #4]
 8021f78:	9310      	str	r3, [sp, #64]	; 0x40
 8021f7a:	6812      	ldr	r2, [r2, #0]
 8021f7c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021f7e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021f82:	fb00 1303 	mla	r3, r0, r3, r1
 8021f86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f8a:	18d3      	adds	r3, r2, r3
 8021f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8021f8e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021f90:	681b      	ldr	r3, [r3, #0]
 8021f92:	9311      	str	r3, [sp, #68]	; 0x44
 8021f94:	9b07      	ldr	r3, [sp, #28]
 8021f96:	009b      	lsls	r3, r3, #2
 8021f98:	930e      	str	r3, [sp, #56]	; 0x38
 8021f9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	dc03      	bgt.n	8021fa8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021fa2:	2b00      	cmp	r3, #0
 8021fa4:	f340 832e 	ble.w	8022604 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021fa8:	9b06      	ldr	r3, [sp, #24]
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	f340 8186 	ble.w	80222bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8021fb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021fb2:	1423      	asrs	r3, r4, #16
 8021fb4:	1412      	asrs	r2, r2, #16
 8021fb6:	d42f      	bmi.n	8022018 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021fb8:	1c51      	adds	r1, r2, #1
 8021fba:	9807      	ldr	r0, [sp, #28]
 8021fbc:	4288      	cmp	r0, r1
 8021fbe:	dd2e      	ble.n	802201e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021fc0:	2b00      	cmp	r3, #0
 8021fc2:	db2c      	blt.n	802201e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021fc4:	1c59      	adds	r1, r3, #1
 8021fc6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021fc8:	4288      	cmp	r0, r1
 8021fca:	dd28      	ble.n	802201e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021fcc:	9b06      	ldr	r3, [sp, #24]
 8021fce:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021fd0:	3b01      	subs	r3, #1
 8021fd2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021fd4:	fb02 1203 	mla	r2, r2, r3, r1
 8021fd8:	1412      	asrs	r2, r2, #16
 8021fda:	d42b      	bmi.n	8022034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021fdc:	3201      	adds	r2, #1
 8021fde:	9907      	ldr	r1, [sp, #28]
 8021fe0:	4291      	cmp	r1, r2
 8021fe2:	dd27      	ble.n	8022034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021fe4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021fe6:	fb02 4303 	mla	r3, r2, r3, r4
 8021fea:	141b      	asrs	r3, r3, #16
 8021fec:	d422      	bmi.n	8022034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021fee:	3301      	adds	r3, #1
 8021ff0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021ff2:	429a      	cmp	r2, r3
 8021ff4:	dd1e      	ble.n	8022034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ff8:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021ffc:	1cdd      	adds	r5, r3, #3
 8021ffe:	f1bb 0f00 	cmp.w	fp, #0
 8022002:	f300 81c4 	bgt.w	802238e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022006:	9b06      	ldr	r3, [sp, #24]
 8022008:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802200c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802200e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022012:	4423      	add	r3, r4
 8022014:	930a      	str	r3, [sp, #40]	; 0x28
 8022016:	e153      	b.n	80222c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022018:	1c51      	adds	r1, r2, #1
 802201a:	f040 8142 	bne.w	80222a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802201e:	9907      	ldr	r1, [sp, #28]
 8022020:	428a      	cmp	r2, r1
 8022022:	f280 813e 	bge.w	80222a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022026:	1c5a      	adds	r2, r3, #1
 8022028:	f2c0 813b 	blt.w	80222a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802202c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802202e:	4293      	cmp	r3, r2
 8022030:	f280 8137 	bge.w	80222a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022034:	9b06      	ldr	r3, [sp, #24]
 8022036:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022038:	9313      	str	r3, [sp, #76]	; 0x4c
 802203a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802203c:	2b00      	cmp	r3, #0
 802203e:	dde2      	ble.n	8022006 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022040:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022042:	1423      	asrs	r3, r4, #16
 8022044:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022046:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802204a:	1409      	asrs	r1, r1, #16
 802204c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022050:	f100 8187 	bmi.w	8022362 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022054:	1c4e      	adds	r6, r1, #1
 8022056:	9f07      	ldr	r7, [sp, #28]
 8022058:	42b7      	cmp	r7, r6
 802205a:	f340 8184 	ble.w	8022366 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802205e:	2b00      	cmp	r3, #0
 8022060:	f2c0 8181 	blt.w	8022366 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022064:	1c5e      	adds	r6, r3, #1
 8022066:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022068:	42b7      	cmp	r7, r6
 802206a:	f340 817c 	ble.w	8022366 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802206e:	9e07      	ldr	r6, [sp, #28]
 8022070:	fb03 1306 	mla	r3, r3, r6, r1
 8022074:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022076:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802207a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802207e:	0e1f      	lsrs	r7, r3, #24
 8022080:	2a00      	cmp	r2, #0
 8022082:	f000 815c 	beq.w	802233e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022086:	6871      	ldr	r1, [r6, #4]
 8022088:	910b      	str	r1, [sp, #44]	; 0x2c
 802208a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802208e:	2800      	cmp	r0, #0
 8022090:	f000 815e 	beq.w	8022350 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8022094:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022096:	eb06 0c01 	add.w	ip, r6, r1
 802209a:	5876      	ldr	r6, [r6, r1]
 802209c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80220a0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80220a4:	9608      	str	r6, [sp, #32]
 80220a6:	0e0e      	lsrs	r6, r1, #24
 80220a8:	910c      	str	r1, [sp, #48]	; 0x30
 80220aa:	b292      	uxth	r2, r2
 80220ac:	b280      	uxth	r0, r0
 80220ae:	fb02 fa00 	mul.w	sl, r2, r0
 80220b2:	0112      	lsls	r2, r2, #4
 80220b4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80220b8:	eba2 080a 	sub.w	r8, r2, sl
 80220bc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80220c0:	b280      	uxth	r0, r0
 80220c2:	fa1f f888 	uxth.w	r8, r8
 80220c6:	1a09      	subs	r1, r1, r0
 80220c8:	fb08 f20e 	mul.w	r2, r8, lr
 80220cc:	b289      	uxth	r1, r1
 80220ce:	fb01 2207 	mla	r2, r1, r7, r2
 80220d2:	fb00 2209 	mla	r2, r0, r9, r2
 80220d6:	fb0a 2206 	mla	r2, sl, r6, r2
 80220da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80220de:	2a00      	cmp	r2, #0
 80220e0:	f000 80d4 	beq.w	802228c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80220e4:	2fff      	cmp	r7, #255	; 0xff
 80220e6:	d01a      	beq.n	802211e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80220e8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80220ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80220f0:	fb07 fc0c 	mul.w	ip, r7, ip
 80220f4:	435f      	muls	r7, r3
 80220f6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80220fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80220fe:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022102:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022106:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802210a:	4463      	add	r3, ip
 802210c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022110:	0a1b      	lsrs	r3, r3, #8
 8022112:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022116:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802211a:	ea43 030b 	orr.w	r3, r3, fp
 802211e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022122:	d01e      	beq.n	8022162 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022124:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022126:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802212a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802212e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022132:	fb0e fe07 	mul.w	lr, lr, r7
 8022136:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802213a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802213e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022142:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022146:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802214a:	44dc      	add	ip, fp
 802214c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022150:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022154:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022158:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802215c:	ea4c 070e 	orr.w	r7, ip, lr
 8022160:	970b      	str	r7, [sp, #44]	; 0x2c
 8022162:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022166:	d01e      	beq.n	80221a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022168:	9f08      	ldr	r7, [sp, #32]
 802216a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802216e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022172:	fb09 fe0e 	mul.w	lr, r9, lr
 8022176:	fb09 f907 	mul.w	r9, r9, r7
 802217a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802217e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022182:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022186:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802218a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802218e:	44f4      	add	ip, lr
 8022190:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022198:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802219c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221a0:	ea4c 0709 	orr.w	r7, ip, r9
 80221a4:	9708      	str	r7, [sp, #32]
 80221a6:	2eff      	cmp	r6, #255	; 0xff
 80221a8:	d01c      	beq.n	80221e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80221aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80221ac:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80221b0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80221b4:	fb06 fe0e 	mul.w	lr, r6, lr
 80221b8:	437e      	muls	r6, r7
 80221ba:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80221be:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80221c2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80221c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221ca:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80221ce:	44f4      	add	ip, lr
 80221d0:	0a36      	lsrs	r6, r6, #8
 80221d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80221da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221de:	ea4c 0606 	orr.w	r6, ip, r6
 80221e2:	960c      	str	r6, [sp, #48]	; 0x30
 80221e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80221e6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80221ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221ee:	2aff      	cmp	r2, #255	; 0xff
 80221f0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80221f4:	fb08 f606 	mul.w	r6, r8, r6
 80221f8:	fb01 6607 	mla	r6, r1, r7, r6
 80221fc:	9f08      	ldr	r7, [sp, #32]
 80221fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022202:	fb00 6607 	mla	r6, r0, r7, r6
 8022206:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022208:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802220c:	fb0a 6607 	mla	r6, sl, r7, r6
 8022210:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022212:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022216:	ea4f 2616 	mov.w	r6, r6, lsr #8
 802221a:	fb08 f807 	mul.w	r8, r8, r7
 802221e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022222:	fb01 8303 	mla	r3, r1, r3, r8
 8022226:	9908      	ldr	r1, [sp, #32]
 8022228:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802222c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802222e:	fb00 330c 	mla	r3, r0, ip, r3
 8022232:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022236:	fb0a 3a00 	mla	sl, sl, r0, r3
 802223a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802223e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022242:	ea46 060a 	orr.w	r6, r6, sl
 8022246:	b2f0      	uxtb	r0, r6
 8022248:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802224c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022250:	f000 8084 	beq.w	802235c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022254:	43d2      	mvns	r2, r2
 8022256:	782b      	ldrb	r3, [r5, #0]
 8022258:	b2d2      	uxtb	r2, r2
 802225a:	fb03 f702 	mul.w	r7, r3, r2
 802225e:	1c7b      	adds	r3, r7, #1
 8022260:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022264:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022268:	702b      	strb	r3, [r5, #0]
 802226a:	786b      	ldrb	r3, [r5, #1]
 802226c:	fb03 f002 	mul.w	r0, r3, r2
 8022270:	1c43      	adds	r3, r0, #1
 8022272:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022276:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802227a:	706b      	strb	r3, [r5, #1]
 802227c:	78ab      	ldrb	r3, [r5, #2]
 802227e:	4353      	muls	r3, r2
 8022280:	1c5a      	adds	r2, r3, #1
 8022282:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022286:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802228a:	70ae      	strb	r6, [r5, #2]
 802228c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802228e:	3503      	adds	r5, #3
 8022290:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022292:	4413      	add	r3, r2
 8022294:	9329      	str	r3, [sp, #164]	; 0xa4
 8022296:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022298:	441c      	add	r4, r3
 802229a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802229c:	3b01      	subs	r3, #1
 802229e:	9313      	str	r3, [sp, #76]	; 0x4c
 80222a0:	e6cb      	b.n	802203a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80222a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80222a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80222a6:	4413      	add	r3, r2
 80222a8:	9329      	str	r3, [sp, #164]	; 0xa4
 80222aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80222ac:	441c      	add	r4, r3
 80222ae:	9b06      	ldr	r3, [sp, #24]
 80222b0:	3b01      	subs	r3, #1
 80222b2:	9306      	str	r3, [sp, #24]
 80222b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222b6:	3303      	adds	r3, #3
 80222b8:	930a      	str	r3, [sp, #40]	; 0x28
 80222ba:	e675      	b.n	8021fa8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80222bc:	f47f ae86 	bne.w	8021fcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80222c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	f340 819e 	ble.w	8022604 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80222c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222ce:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80222d2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80222d6:	eef0 6a48 	vmov.f32	s13, s16
 80222da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80222de:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80222e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222e6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80222ea:	eef0 6a68 	vmov.f32	s13, s17
 80222ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222f2:	ee16 4a90 	vmov	r4, s13
 80222f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80222fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80222fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022302:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022306:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802230a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802230e:	ee18 2a10 	vmov	r2, s16
 8022312:	eeb0 8a47 	vmov.f32	s16, s14
 8022316:	fb92 f3f3 	sdiv	r3, r2, r3
 802231a:	ee18 2a90 	vmov	r2, s17
 802231e:	932b      	str	r3, [sp, #172]	; 0xac
 8022320:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022322:	eef0 8a67 	vmov.f32	s17, s15
 8022326:	fb92 f3f3 	sdiv	r3, r2, r3
 802232a:	932c      	str	r3, [sp, #176]	; 0xb0
 802232c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802232e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022330:	3b01      	subs	r3, #1
 8022332:	9312      	str	r3, [sp, #72]	; 0x48
 8022334:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022336:	bf08      	it	eq
 8022338:	4613      	moveq	r3, r2
 802233a:	9306      	str	r3, [sp, #24]
 802233c:	e62d      	b.n	8021f9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 802233e:	b150      	cbz	r0, 8022356 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022340:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022342:	5871      	ldr	r1, [r6, r1]
 8022344:	26ff      	movs	r6, #255	; 0xff
 8022346:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802234a:	9108      	str	r1, [sp, #32]
 802234c:	46b6      	mov	lr, r6
 802234e:	e6ac      	b.n	80220aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022350:	26ff      	movs	r6, #255	; 0xff
 8022352:	46b1      	mov	r9, r6
 8022354:	e6a9      	b.n	80220aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022356:	26ff      	movs	r6, #255	; 0xff
 8022358:	46b1      	mov	r9, r6
 802235a:	e7f7      	b.n	802234c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802235c:	7028      	strb	r0, [r5, #0]
 802235e:	7069      	strb	r1, [r5, #1]
 8022360:	e793      	b.n	802228a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022362:	1c4f      	adds	r7, r1, #1
 8022364:	d192      	bne.n	802228c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022366:	9e07      	ldr	r6, [sp, #28]
 8022368:	428e      	cmp	r6, r1
 802236a:	dd8f      	ble.n	802228c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802236c:	1c5e      	adds	r6, r3, #1
 802236e:	db8d      	blt.n	802228c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022370:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022372:	429e      	cmp	r6, r3
 8022374:	dd8a      	ble.n	802228c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022376:	9600      	str	r6, [sp, #0]
 8022378:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802237c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022380:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022382:	4629      	mov	r1, r5
 8022384:	9b07      	ldr	r3, [sp, #28]
 8022386:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022388:	f7ff fc8e 	bl	8021ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802238c:	e77e      	b.n	802228c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802238e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022390:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022394:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022396:	9e07      	ldr	r6, [sp, #28]
 8022398:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802239c:	1409      	asrs	r1, r1, #16
 802239e:	1423      	asrs	r3, r4, #16
 80223a0:	fb06 1303 	mla	r3, r6, r3, r1
 80223a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80223a6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80223aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80223ae:	0e1f      	lsrs	r7, r3, #24
 80223b0:	2a00      	cmp	r2, #0
 80223b2:	f000 8113 	beq.w	80225dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80223b6:	6871      	ldr	r1, [r6, #4]
 80223b8:	910d      	str	r1, [sp, #52]	; 0x34
 80223ba:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80223be:	2800      	cmp	r0, #0
 80223c0:	f000 8115 	beq.w	80225ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80223c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80223c6:	eb06 0c01 	add.w	ip, r6, r1
 80223ca:	5876      	ldr	r6, [r6, r1]
 80223cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80223d0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80223d4:	9609      	str	r6, [sp, #36]	; 0x24
 80223d6:	0e0e      	lsrs	r6, r1, #24
 80223d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80223da:	b292      	uxth	r2, r2
 80223dc:	b280      	uxth	r0, r0
 80223de:	fb02 fa00 	mul.w	sl, r2, r0
 80223e2:	0112      	lsls	r2, r2, #4
 80223e4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80223e8:	eba2 080a 	sub.w	r8, r2, sl
 80223ec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80223f0:	b280      	uxth	r0, r0
 80223f2:	fa1f f888 	uxth.w	r8, r8
 80223f6:	1a09      	subs	r1, r1, r0
 80223f8:	fb08 f20e 	mul.w	r2, r8, lr
 80223fc:	b289      	uxth	r1, r1
 80223fe:	fb01 2207 	mla	r2, r1, r7, r2
 8022402:	fb00 2209 	mla	r2, r0, r9, r2
 8022406:	fb0a 2206 	mla	r2, sl, r6, r2
 802240a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802240e:	2a00      	cmp	r2, #0
 8022410:	f000 80da 	beq.w	80225c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022414:	2fff      	cmp	r7, #255	; 0xff
 8022416:	d01a      	beq.n	802244e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022418:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802241c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022420:	fb07 fc0c 	mul.w	ip, r7, ip
 8022424:	435f      	muls	r7, r3
 8022426:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802242a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802242e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022432:	4463      	add	r3, ip
 8022434:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022438:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802243c:	0a1b      	lsrs	r3, r3, #8
 802243e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022442:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022446:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802244a:	ea43 030c 	orr.w	r3, r3, ip
 802244e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022452:	d021      	beq.n	8022498 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022454:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022456:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802245a:	fb0e f707 	mul.w	r7, lr, r7
 802245e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022460:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022462:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022466:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022468:	fb0e fe0c 	mul.w	lr, lr, ip
 802246c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022470:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022474:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022478:	44bc      	add	ip, r7
 802247a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802247e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022482:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022486:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802248a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802248e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022492:	ea4c 070e 	orr.w	r7, ip, lr
 8022496:	970d      	str	r7, [sp, #52]	; 0x34
 8022498:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802249c:	d01e      	beq.n	80224dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802249e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80224a0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80224a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80224a8:	fb09 fe0e 	mul.w	lr, r9, lr
 80224ac:	fb09 f907 	mul.w	r9, r9, r7
 80224b0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80224b4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80224b8:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80224bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80224c0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80224c4:	44f4      	add	ip, lr
 80224c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80224ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80224ce:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80224d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80224d6:	ea4c 0709 	orr.w	r7, ip, r9
 80224da:	9709      	str	r7, [sp, #36]	; 0x24
 80224dc:	2eff      	cmp	r6, #255	; 0xff
 80224de:	d01c      	beq.n	802251a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 80224e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80224e2:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80224e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80224ea:	fb06 fe0e 	mul.w	lr, r6, lr
 80224ee:	437e      	muls	r6, r7
 80224f0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80224f4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80224f8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80224fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022500:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022504:	44f4      	add	ip, lr
 8022506:	0a36      	lsrs	r6, r6, #8
 8022508:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802250c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022510:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022514:	ea4c 0606 	orr.w	r6, ip, r6
 8022518:	960f      	str	r6, [sp, #60]	; 0x3c
 802251a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802251c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022520:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022524:	2aff      	cmp	r2, #255	; 0xff
 8022526:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802252a:	fb08 f606 	mul.w	r6, r8, r6
 802252e:	fb01 6607 	mla	r6, r1, r7, r6
 8022532:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022534:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022538:	fb00 6607 	mla	r6, r0, r7, r6
 802253c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802253e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022542:	fb0a 6607 	mla	r6, sl, r7, r6
 8022546:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022548:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802254c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022550:	fb08 f807 	mul.w	r8, r8, r7
 8022554:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022558:	fb01 8303 	mla	r3, r1, r3, r8
 802255c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802255e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022562:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022564:	fb00 330c 	mla	r3, r0, ip, r3
 8022568:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802256c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022570:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022574:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022578:	ea46 060e 	orr.w	r6, r6, lr
 802257c:	b2f0      	uxtb	r0, r6
 802257e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022582:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022586:	d038      	beq.n	80225fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022588:	43d2      	mvns	r2, r2
 802258a:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 802258e:	b2d2      	uxtb	r2, r2
 8022590:	4357      	muls	r7, r2
 8022592:	1c7b      	adds	r3, r7, #1
 8022594:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022598:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802259c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 80225a0:	4350      	muls	r0, r2
 80225a2:	f805 3c03 	strb.w	r3, [r5, #-3]
 80225a6:	1c43      	adds	r3, r0, #1
 80225a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80225ac:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80225b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80225b4:	4353      	muls	r3, r2
 80225b6:	f805 1c02 	strb.w	r1, [r5, #-2]
 80225ba:	1c5a      	adds	r2, r3, #1
 80225bc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80225c0:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80225c4:	f805 6c01 	strb.w	r6, [r5, #-1]
 80225c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80225ca:	3503      	adds	r5, #3
 80225cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80225ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80225d2:	4413      	add	r3, r2
 80225d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80225d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80225d8:	441c      	add	r4, r3
 80225da:	e510      	b.n	8021ffe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 80225dc:	b150      	cbz	r0, 80225f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80225de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80225e0:	5871      	ldr	r1, [r6, r1]
 80225e2:	26ff      	movs	r6, #255	; 0xff
 80225e4:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80225e8:	9109      	str	r1, [sp, #36]	; 0x24
 80225ea:	46b6      	mov	lr, r6
 80225ec:	e6f5      	b.n	80223da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80225ee:	26ff      	movs	r6, #255	; 0xff
 80225f0:	46b1      	mov	r9, r6
 80225f2:	e6f2      	b.n	80223da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80225f4:	26ff      	movs	r6, #255	; 0xff
 80225f6:	46b1      	mov	r9, r6
 80225f8:	e7f7      	b.n	80225ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 80225fa:	f805 0c03 	strb.w	r0, [r5, #-3]
 80225fe:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022602:	e7df      	b.n	80225c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022604:	b017      	add	sp, #92	; 0x5c
 8022606:	ecbd 8b08 	vpop	{d8-d11}
 802260a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022610 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022614:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022618:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802261c:	2800      	cmp	r0, #0
 802261e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022622:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022626:	fb0c 0e03 	mla	lr, ip, r3, r0
 802262a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802262e:	db6b      	blt.n	8022708 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022630:	4580      	cmp	r8, r0
 8022632:	dd69      	ble.n	8022708 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022634:	f1bc 0f00 	cmp.w	ip, #0
 8022638:	db66      	blt.n	8022708 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802263a:	45e1      	cmp	r9, ip
 802263c:	dd64      	ble.n	8022708 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802263e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022642:	f01e 0f01 	tst.w	lr, #1
 8022646:	5d16      	ldrb	r6, [r2, r4]
 8022648:	bf0c      	ite	eq
 802264a:	f006 060f 	andeq.w	r6, r6, #15
 802264e:	1136      	asrne	r6, r6, #4
 8022650:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022654:	b2f6      	uxtb	r6, r6
 8022656:	f110 0a01 	adds.w	sl, r0, #1
 802265a:	d457      	bmi.n	802270c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802265c:	45d0      	cmp	r8, sl
 802265e:	dd55      	ble.n	802270c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022660:	f1bc 0f00 	cmp.w	ip, #0
 8022664:	db52      	blt.n	802270c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022666:	45e1      	cmp	r9, ip
 8022668:	dd50      	ble.n	802270c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802266a:	2f00      	cmp	r7, #0
 802266c:	f000 80ac 	beq.w	80227c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8022670:	f10e 0b01 	add.w	fp, lr, #1
 8022674:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022678:	f01b 0f01 	tst.w	fp, #1
 802267c:	5d14      	ldrb	r4, [r2, r4]
 802267e:	bf0c      	ite	eq
 8022680:	f004 040f 	andeq.w	r4, r4, #15
 8022684:	1124      	asrne	r4, r4, #4
 8022686:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802268a:	b2e4      	uxtb	r4, r4
 802268c:	2d00      	cmp	r5, #0
 802268e:	f000 8096 	beq.w	80227be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8022692:	2800      	cmp	r0, #0
 8022694:	f10c 0c01 	add.w	ip, ip, #1
 8022698:	db3c      	blt.n	8022714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802269a:	4580      	cmp	r8, r0
 802269c:	dd3a      	ble.n	8022714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802269e:	f1bc 0f00 	cmp.w	ip, #0
 80226a2:	db37      	blt.n	8022714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80226a4:	45e1      	cmp	r9, ip
 80226a6:	dd35      	ble.n	8022714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80226a8:	eb03 0b0e 	add.w	fp, r3, lr
 80226ac:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80226b0:	f01b 0f01 	tst.w	fp, #1
 80226b4:	5c10      	ldrb	r0, [r2, r0]
 80226b6:	bf0c      	ite	eq
 80226b8:	f000 000f 	andeq.w	r0, r0, #15
 80226bc:	1100      	asrne	r0, r0, #4
 80226be:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80226c2:	b2c0      	uxtb	r0, r0
 80226c4:	f1ba 0f00 	cmp.w	sl, #0
 80226c8:	db26      	blt.n	8022718 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80226ca:	45d0      	cmp	r8, sl
 80226cc:	dd24      	ble.n	8022718 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80226ce:	f1bc 0f00 	cmp.w	ip, #0
 80226d2:	db21      	blt.n	8022718 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80226d4:	45e1      	cmp	r9, ip
 80226d6:	dd1f      	ble.n	8022718 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80226d8:	b307      	cbz	r7, 802271c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80226da:	3301      	adds	r3, #1
 80226dc:	449e      	add	lr, r3
 80226de:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80226e2:	f01e 0f01 	tst.w	lr, #1
 80226e6:	5cd3      	ldrb	r3, [r2, r3]
 80226e8:	bf0c      	ite	eq
 80226ea:	f003 030f 	andeq.w	r3, r3, #15
 80226ee:	111b      	asrne	r3, r3, #4
 80226f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80226f4:	b2db      	uxtb	r3, r3
 80226f6:	2f0f      	cmp	r7, #15
 80226f8:	d911      	bls.n	802271e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80226fa:	4b35      	ldr	r3, [pc, #212]	; (80227d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80226fc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022700:	4a34      	ldr	r2, [pc, #208]	; (80227d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8022702:	4835      	ldr	r0, [pc, #212]	; (80227d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022704:	f002 fb5a 	bl	8024dbc <__assert_func>
 8022708:	2600      	movs	r6, #0
 802270a:	e7a4      	b.n	8022656 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802270c:	2400      	movs	r4, #0
 802270e:	e7bd      	b.n	802268c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8022710:	463c      	mov	r4, r7
 8022712:	e7be      	b.n	8022692 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022714:	2000      	movs	r0, #0
 8022716:	e7d5      	b.n	80226c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022718:	2300      	movs	r3, #0
 802271a:	e7ec      	b.n	80226f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802271c:	463b      	mov	r3, r7
 802271e:	2d0f      	cmp	r5, #15
 8022720:	d8eb      	bhi.n	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022722:	b2bf      	uxth	r7, r7
 8022724:	b2ad      	uxth	r5, r5
 8022726:	fb07 f205 	mul.w	r2, r7, r5
 802272a:	013f      	lsls	r7, r7, #4
 802272c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022730:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022734:	1abf      	subs	r7, r7, r2
 8022736:	b2ad      	uxth	r5, r5
 8022738:	b2bf      	uxth	r7, r7
 802273a:	ebac 0c05 	sub.w	ip, ip, r5
 802273e:	437c      	muls	r4, r7
 8022740:	fa1f fc8c 	uxth.w	ip, ip
 8022744:	fb06 440c 	mla	r4, r6, ip, r4
 8022748:	fb05 4400 	mla	r4, r5, r0, r4
 802274c:	fb02 4203 	mla	r2, r2, r3, r4
 8022750:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022754:	b38a      	cbz	r2, 80227ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8022756:	4b21      	ldr	r3, [pc, #132]	; (80227dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8022758:	681c      	ldr	r4, [r3, #0]
 802275a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802275e:	b2e5      	uxtb	r5, r4
 8022760:	4353      	muls	r3, r2
 8022762:	1c5a      	adds	r2, r3, #1
 8022764:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022768:	1212      	asrs	r2, r2, #8
 802276a:	b290      	uxth	r0, r2
 802276c:	43d2      	mvns	r2, r2
 802276e:	fb15 f500 	smulbb	r5, r5, r0
 8022772:	b2d3      	uxtb	r3, r2
 8022774:	780a      	ldrb	r2, [r1, #0]
 8022776:	fb02 5203 	mla	r2, r2, r3, r5
 802277a:	b292      	uxth	r2, r2
 802277c:	1c55      	adds	r5, r2, #1
 802277e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022782:	784d      	ldrb	r5, [r1, #1]
 8022784:	fb15 f503 	smulbb	r5, r5, r3
 8022788:	1212      	asrs	r2, r2, #8
 802278a:	700a      	strb	r2, [r1, #0]
 802278c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022790:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022794:	fb02 5200 	mla	r2, r2, r0, r5
 8022798:	b292      	uxth	r2, r2
 802279a:	1c55      	adds	r5, r2, #1
 802279c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80227a0:	1212      	asrs	r2, r2, #8
 80227a2:	704a      	strb	r2, [r1, #1]
 80227a4:	788a      	ldrb	r2, [r1, #2]
 80227a6:	fb12 f303 	smulbb	r3, r2, r3
 80227aa:	fb04 3300 	mla	r3, r4, r0, r3
 80227ae:	b29b      	uxth	r3, r3
 80227b0:	1c5a      	adds	r2, r3, #1
 80227b2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80227b6:	121b      	asrs	r3, r3, #8
 80227b8:	708b      	strb	r3, [r1, #2]
 80227ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227be:	2f0f      	cmp	r7, #15
 80227c0:	d89b      	bhi.n	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80227c2:	462b      	mov	r3, r5
 80227c4:	4628      	mov	r0, r5
 80227c6:	e7ac      	b.n	8022722 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80227c8:	2d00      	cmp	r5, #0
 80227ca:	d1a1      	bne.n	8022710 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80227cc:	462c      	mov	r4, r5
 80227ce:	e7f8      	b.n	80227c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80227d0:	080297ab 	.word	0x080297ab
 80227d4:	08029ca2 	.word	0x08029ca2
 80227d8:	08029874 	.word	0x08029874
 80227dc:	2000bd94 	.word	0x2000bd94

080227e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80227e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227e4:	ed2d 8b08 	vpush	{d8-d11}
 80227e8:	b097      	sub	sp, #92	; 0x5c
 80227ea:	eeb0 aa40 	vmov.f32	s20, s0
 80227ee:	eef0 9a60 	vmov.f32	s19, s1
 80227f2:	9308      	str	r3, [sp, #32]
 80227f4:	eeb0 9a41 	vmov.f32	s18, s2
 80227f8:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80227fc:	eeb0 8a62 	vmov.f32	s16, s5
 8022800:	9214      	str	r2, [sp, #80]	; 0x50
 8022802:	eef0 8a43 	vmov.f32	s17, s6
 8022806:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022808:	eef0 ba44 	vmov.f32	s23, s8
 802280c:	9309      	str	r3, [sp, #36]	; 0x24
 802280e:	eeb0 ba64 	vmov.f32	s22, s9
 8022812:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022816:	eef0 aa45 	vmov.f32	s21, s10
 802281a:	9015      	str	r0, [sp, #84]	; 0x54
 802281c:	910c      	str	r1, [sp, #48]	; 0x30
 802281e:	930e      	str	r3, [sp, #56]	; 0x38
 8022820:	6850      	ldr	r0, [r2, #4]
 8022822:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8022826:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802282a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802282e:	fb00 1803 	mla	r8, r0, r3, r1
 8022832:	6813      	ldr	r3, [r2, #0]
 8022834:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022838:	4498      	add	r8, r3
 802283a:	f10b 0301 	add.w	r3, fp, #1
 802283e:	f023 0301 	bic.w	r3, r3, #1
 8022842:	930f      	str	r3, [sp, #60]	; 0x3c
 8022844:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022846:	681f      	ldr	r7, [r3, #0]
 8022848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802284a:	2b00      	cmp	r3, #0
 802284c:	dc03      	bgt.n	8022856 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802284e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022850:	2b00      	cmp	r3, #0
 8022852:	f340 8238 	ble.w	8022cc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8022856:	9b08      	ldr	r3, [sp, #32]
 8022858:	2b00      	cmp	r3, #0
 802285a:	f340 810c 	ble.w	8022a76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802285e:	142a      	asrs	r2, r5, #16
 8022860:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022864:	d42c      	bmi.n	80228c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022866:	1c51      	adds	r1, r2, #1
 8022868:	458b      	cmp	fp, r1
 802286a:	dd2c      	ble.n	80228c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802286c:	2b00      	cmp	r3, #0
 802286e:	db2a      	blt.n	80228c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022870:	1c59      	adds	r1, r3, #1
 8022872:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022874:	4288      	cmp	r0, r1
 8022876:	dd26      	ble.n	80228c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022878:	9b08      	ldr	r3, [sp, #32]
 802287a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802287c:	3b01      	subs	r3, #1
 802287e:	fb02 5203 	mla	r2, r2, r3, r5
 8022882:	1412      	asrs	r2, r2, #16
 8022884:	d429      	bmi.n	80228da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022886:	3201      	adds	r2, #1
 8022888:	4593      	cmp	fp, r2
 802288a:	dd26      	ble.n	80228da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802288c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802288e:	fb02 6303 	mla	r3, r2, r3, r6
 8022892:	141b      	asrs	r3, r3, #16
 8022894:	d421      	bmi.n	80228da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022896:	3301      	adds	r3, #1
 8022898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802289a:	429a      	cmp	r2, r3
 802289c:	dd1d      	ble.n	80228da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802289e:	f108 0e03 	add.w	lr, r8, #3
 80228a2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80228a6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80228aa:	f1b9 0f00 	cmp.w	r9, #0
 80228ae:	f300 814f 	bgt.w	8022b50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80228b2:	9b08      	ldr	r3, [sp, #32]
 80228b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80228b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80228bc:	44a0      	add	r8, r4
 80228be:	e0dc      	b.n	8022a7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80228c0:	1c51      	adds	r1, r2, #1
 80228c2:	f040 80ce 	bne.w	8022a62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80228c6:	4593      	cmp	fp, r2
 80228c8:	f340 80cb 	ble.w	8022a62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80228cc:	1c5a      	adds	r2, r3, #1
 80228ce:	f2c0 80c8 	blt.w	8022a62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80228d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228d4:	4293      	cmp	r3, r2
 80228d6:	f280 80c4 	bge.w	8022a62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80228da:	9b08      	ldr	r3, [sp, #32]
 80228dc:	46c1      	mov	r9, r8
 80228de:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80228e2:	930d      	str	r3, [sp, #52]	; 0x34
 80228e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	dde3      	ble.n	80228b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80228ea:	1428      	asrs	r0, r5, #16
 80228ec:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80228f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80228f4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80228f8:	f100 8111 	bmi.w	8022b1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80228fc:	f100 0c01 	add.w	ip, r0, #1
 8022900:	45e3      	cmp	fp, ip
 8022902:	f340 810e 	ble.w	8022b22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022906:	2b00      	cmp	r3, #0
 8022908:	f2c0 810b 	blt.w	8022b22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802290c:	f103 0c01 	add.w	ip, r3, #1
 8022910:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022912:	4564      	cmp	r4, ip
 8022914:	f340 8105 	ble.w	8022b22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022918:	fb03 030a 	mla	r3, r3, sl, r0
 802291c:	0858      	lsrs	r0, r3, #1
 802291e:	07dc      	lsls	r4, r3, #31
 8022920:	5c38      	ldrb	r0, [r7, r0]
 8022922:	bf54      	ite	pl
 8022924:	f000 000f 	andpl.w	r0, r0, #15
 8022928:	1100      	asrmi	r0, r0, #4
 802292a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802292e:	b2c0      	uxtb	r0, r0
 8022930:	2a00      	cmp	r2, #0
 8022932:	f000 80e1 	beq.w	8022af8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8022936:	f103 0e01 	add.w	lr, r3, #1
 802293a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802293e:	f01e 0f01 	tst.w	lr, #1
 8022942:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022946:	bf0c      	ite	eq
 8022948:	f00c 0c0f 	andeq.w	ip, ip, #15
 802294c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022950:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022954:	fa5f f48c 	uxtb.w	r4, ip
 8022958:	9410      	str	r4, [sp, #64]	; 0x40
 802295a:	b1f9      	cbz	r1, 802299c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802295c:	4453      	add	r3, sl
 802295e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022962:	07dc      	lsls	r4, r3, #31
 8022964:	f103 0301 	add.w	r3, r3, #1
 8022968:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802296c:	bf54      	ite	pl
 802296e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022972:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022976:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802297a:	fa5f f48c 	uxtb.w	r4, ip
 802297e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022982:	940a      	str	r4, [sp, #40]	; 0x28
 8022984:	07dc      	lsls	r4, r3, #31
 8022986:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802298a:	bf54      	ite	pl
 802298c:	f00c 030f 	andpl.w	r3, ip, #15
 8022990:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022994:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022998:	b2db      	uxtb	r3, r3
 802299a:	9311      	str	r3, [sp, #68]	; 0x44
 802299c:	b292      	uxth	r2, r2
 802299e:	b289      	uxth	r1, r1
 80229a0:	0113      	lsls	r3, r2, #4
 80229a2:	fb02 fc01 	mul.w	ip, r2, r1
 80229a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80229a8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80229ac:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80229b0:	eba3 030c 	sub.w	r3, r3, ip
 80229b4:	b289      	uxth	r1, r1
 80229b6:	b29b      	uxth	r3, r3
 80229b8:	ebae 0e01 	sub.w	lr, lr, r1
 80229bc:	4353      	muls	r3, r2
 80229be:	fa1f fe8e 	uxth.w	lr, lr
 80229c2:	fb00 320e 	mla	r2, r0, lr, r3
 80229c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229c8:	fb01 2203 	mla	r2, r1, r3, r2
 80229cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229ce:	fb0c 2203 	mla	r2, ip, r3, r2
 80229d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80229d6:	2a00      	cmp	r2, #0
 80229d8:	d039      	beq.n	8022a4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80229da:	4bbd      	ldr	r3, [pc, #756]	; (8022cd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80229dc:	6819      	ldr	r1, [r3, #0]
 80229de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80229e0:	fa5f fc81 	uxtb.w	ip, r1
 80229e4:	435a      	muls	r2, r3
 80229e6:	1c53      	adds	r3, r2, #1
 80229e8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80229ec:	1212      	asrs	r2, r2, #8
 80229ee:	b290      	uxth	r0, r2
 80229f0:	43d2      	mvns	r2, r2
 80229f2:	fb1c fc00 	smulbb	ip, ip, r0
 80229f6:	b2d3      	uxtb	r3, r2
 80229f8:	f899 2000 	ldrb.w	r2, [r9]
 80229fc:	fb02 c203 	mla	r2, r2, r3, ip
 8022a00:	b292      	uxth	r2, r2
 8022a02:	f102 0c01 	add.w	ip, r2, #1
 8022a06:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022a0a:	f899 c001 	ldrb.w	ip, [r9, #1]
 8022a0e:	fb1c fc03 	smulbb	ip, ip, r3
 8022a12:	1212      	asrs	r2, r2, #8
 8022a14:	f889 2000 	strb.w	r2, [r9]
 8022a18:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022a1c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022a20:	fb02 c200 	mla	r2, r2, r0, ip
 8022a24:	b292      	uxth	r2, r2
 8022a26:	f102 0c01 	add.w	ip, r2, #1
 8022a2a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022a2e:	1212      	asrs	r2, r2, #8
 8022a30:	f889 2001 	strb.w	r2, [r9, #1]
 8022a34:	f899 2002 	ldrb.w	r2, [r9, #2]
 8022a38:	fb12 f303 	smulbb	r3, r2, r3
 8022a3c:	fb01 3300 	mla	r3, r1, r0, r3
 8022a40:	b29b      	uxth	r3, r3
 8022a42:	1c5a      	adds	r2, r3, #1
 8022a44:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022a48:	121b      	asrs	r3, r3, #8
 8022a4a:	f889 3002 	strb.w	r3, [r9, #2]
 8022a4e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022a50:	f109 0903 	add.w	r9, r9, #3
 8022a54:	441d      	add	r5, r3
 8022a56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a58:	441e      	add	r6, r3
 8022a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a5c:	3b01      	subs	r3, #1
 8022a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8022a60:	e740      	b.n	80228e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022a62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022a64:	f108 0803 	add.w	r8, r8, #3
 8022a68:	441d      	add	r5, r3
 8022a6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a6c:	441e      	add	r6, r3
 8022a6e:	9b08      	ldr	r3, [sp, #32]
 8022a70:	3b01      	subs	r3, #1
 8022a72:	9308      	str	r3, [sp, #32]
 8022a74:	e6ef      	b.n	8022856 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022a76:	f47f aeff 	bne.w	8022878 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	f340 8122 	ble.w	8022cc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8022a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022a88:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022a8c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022a90:	eef0 6a48 	vmov.f32	s13, s16
 8022a94:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022a98:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022a9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022aa0:	ee16 5a90 	vmov	r5, s13
 8022aa4:	eef0 6a68 	vmov.f32	s13, s17
 8022aa8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022aac:	ee16 6a90 	vmov	r6, s13
 8022ab0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ab4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022ab8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022abc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ac0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022ac4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022ac8:	ee18 2a10 	vmov	r2, s16
 8022acc:	eeb0 8a47 	vmov.f32	s16, s14
 8022ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ad4:	ee18 2a90 	vmov	r2, s17
 8022ad8:	932b      	str	r3, [sp, #172]	; 0xac
 8022ada:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022adc:	eef0 8a67 	vmov.f32	s17, s15
 8022ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ae4:	932c      	str	r3, [sp, #176]	; 0xb0
 8022ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ae8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022aea:	3b01      	subs	r3, #1
 8022aec:	930c      	str	r3, [sp, #48]	; 0x30
 8022aee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022af0:	bf08      	it	eq
 8022af2:	4613      	moveq	r3, r2
 8022af4:	9308      	str	r3, [sp, #32]
 8022af6:	e6a7      	b.n	8022848 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022af8:	2900      	cmp	r1, #0
 8022afa:	f43f af4f 	beq.w	802299c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022afe:	4453      	add	r3, sl
 8022b00:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022b04:	07db      	lsls	r3, r3, #31
 8022b06:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b0a:	bf54      	ite	pl
 8022b0c:	f00c 030f 	andpl.w	r3, ip, #15
 8022b10:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022b14:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022b18:	b2db      	uxtb	r3, r3
 8022b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8022b1c:	e73e      	b.n	802299c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022b1e:	1c44      	adds	r4, r0, #1
 8022b20:	d195      	bne.n	8022a4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022b22:	4583      	cmp	fp, r0
 8022b24:	dd93      	ble.n	8022a4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022b26:	1c5c      	adds	r4, r3, #1
 8022b28:	db91      	blt.n	8022a4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022b2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022b2c:	429c      	cmp	r4, r3
 8022b2e:	dd8e      	ble.n	8022a4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022b30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022b32:	9002      	str	r0, [sp, #8]
 8022b34:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022b36:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8022b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b3c:	463a      	mov	r2, r7
 8022b3e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022b42:	e9cd b300 	strd	fp, r3, [sp]
 8022b46:	4649      	mov	r1, r9
 8022b48:	4653      	mov	r3, sl
 8022b4a:	f7ff fd61 	bl	8022610 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022b4e:	e77e      	b.n	8022a4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022b50:	142a      	asrs	r2, r5, #16
 8022b52:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022b56:	1433      	asrs	r3, r6, #16
 8022b58:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022b5c:	fb0a 2303 	mla	r3, sl, r3, r2
 8022b60:	085a      	lsrs	r2, r3, #1
 8022b62:	07dc      	lsls	r4, r3, #31
 8022b64:	5cba      	ldrb	r2, [r7, r2]
 8022b66:	bf54      	ite	pl
 8022b68:	f002 020f 	andpl.w	r2, r2, #15
 8022b6c:	1112      	asrmi	r2, r2, #4
 8022b6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022b72:	b2d2      	uxtb	r2, r2
 8022b74:	2900      	cmp	r1, #0
 8022b76:	f000 8093 	beq.w	8022ca0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8022b7a:	1c5c      	adds	r4, r3, #1
 8022b7c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8022b80:	07e4      	lsls	r4, r4, #31
 8022b82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b86:	bf54      	ite	pl
 8022b88:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b8c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b90:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b94:	fa5f f48c 	uxtb.w	r4, ip
 8022b98:	9412      	str	r4, [sp, #72]	; 0x48
 8022b9a:	b300      	cbz	r0, 8022bde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022b9c:	4453      	add	r3, sl
 8022b9e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022ba2:	07dc      	lsls	r4, r3, #31
 8022ba4:	f103 0301 	add.w	r3, r3, #1
 8022ba8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022bac:	bf54      	ite	pl
 8022bae:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022bb2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022bb6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022bba:	fa5f f48c 	uxtb.w	r4, ip
 8022bbe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022bc2:	940b      	str	r4, [sp, #44]	; 0x2c
 8022bc4:	07dc      	lsls	r4, r3, #31
 8022bc6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022bca:	bf54      	ite	pl
 8022bcc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022bd0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022bd4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022bd8:	fa5f f38c 	uxtb.w	r3, ip
 8022bdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8022bde:	b289      	uxth	r1, r1
 8022be0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022be2:	b280      	uxth	r0, r0
 8022be4:	fb01 f300 	mul.w	r3, r1, r0
 8022be8:	0109      	lsls	r1, r1, #4
 8022bea:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022bee:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022bf2:	1ac9      	subs	r1, r1, r3
 8022bf4:	b280      	uxth	r0, r0
 8022bf6:	b289      	uxth	r1, r1
 8022bf8:	ebac 0c00 	sub.w	ip, ip, r0
 8022bfc:	4361      	muls	r1, r4
 8022bfe:	fa1f fc8c 	uxth.w	ip, ip
 8022c02:	fb02 120c 	mla	r2, r2, ip, r1
 8022c06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022c08:	fb00 2001 	mla	r0, r0, r1, r2
 8022c0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022c0e:	fb03 0302 	mla	r3, r3, r2, r0
 8022c12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d039      	beq.n	8022c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8022c1a:	4a2d      	ldr	r2, [pc, #180]	; (8022cd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022c1c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022c20:	6810      	ldr	r0, [r2, #0]
 8022c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022c24:	fa5f fc80 	uxtb.w	ip, r0
 8022c28:	4353      	muls	r3, r2
 8022c2a:	1c5a      	adds	r2, r3, #1
 8022c2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c30:	121b      	asrs	r3, r3, #8
 8022c32:	b29a      	uxth	r2, r3
 8022c34:	43db      	mvns	r3, r3
 8022c36:	fb1c fc02 	smulbb	ip, ip, r2
 8022c3a:	b2db      	uxtb	r3, r3
 8022c3c:	fb01 c103 	mla	r1, r1, r3, ip
 8022c40:	b289      	uxth	r1, r1
 8022c42:	f101 0c01 	add.w	ip, r1, #1
 8022c46:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022c4a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022c4e:	fb1c fc03 	smulbb	ip, ip, r3
 8022c52:	1209      	asrs	r1, r1, #8
 8022c54:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022c58:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022c5c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022c60:	fb01 c102 	mla	r1, r1, r2, ip
 8022c64:	b289      	uxth	r1, r1
 8022c66:	f101 0c01 	add.w	ip, r1, #1
 8022c6a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022c6e:	1209      	asrs	r1, r1, #8
 8022c70:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022c74:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022c78:	fb11 f303 	smulbb	r3, r1, r3
 8022c7c:	fb00 3002 	mla	r0, r0, r2, r3
 8022c80:	b280      	uxth	r0, r0
 8022c82:	1c42      	adds	r2, r0, #1
 8022c84:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022c88:	1200      	asrs	r0, r0, #8
 8022c8a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022c8e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022c90:	f10e 0e03 	add.w	lr, lr, #3
 8022c94:	f109 39ff 	add.w	r9, r9, #4294967295
 8022c98:	441d      	add	r5, r3
 8022c9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c9c:	441e      	add	r6, r3
 8022c9e:	e604      	b.n	80228aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022ca0:	2800      	cmp	r0, #0
 8022ca2:	d09c      	beq.n	8022bde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022ca4:	4453      	add	r3, sl
 8022ca6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022caa:	07db      	lsls	r3, r3, #31
 8022cac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022cb0:	bf54      	ite	pl
 8022cb2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022cb6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022cba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022cbe:	fa5f f38c 	uxtb.w	r3, ip
 8022cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cc4:	e78b      	b.n	8022bde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022cc6:	b017      	add	sp, #92	; 0x5c
 8022cc8:	ecbd 8b08 	vpop	{d8-d11}
 8022ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cd0:	2000bd94 	.word	0x2000bd94

08022cd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cd8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022cdc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022ce0:	2800      	cmp	r0, #0
 8022ce2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022ce6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022cea:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022cee:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022cf2:	db6b      	blt.n	8022dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022cf4:	4580      	cmp	r8, r0
 8022cf6:	dd69      	ble.n	8022dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022cf8:	f1bc 0f00 	cmp.w	ip, #0
 8022cfc:	db66      	blt.n	8022dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022cfe:	45e1      	cmp	r9, ip
 8022d00:	dd64      	ble.n	8022dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022d02:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022d06:	f01e 0f01 	tst.w	lr, #1
 8022d0a:	5d16      	ldrb	r6, [r2, r4]
 8022d0c:	bf0c      	ite	eq
 8022d0e:	f006 060f 	andeq.w	r6, r6, #15
 8022d12:	1136      	asrne	r6, r6, #4
 8022d14:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022d18:	b2f6      	uxtb	r6, r6
 8022d1a:	f110 0a01 	adds.w	sl, r0, #1
 8022d1e:	d457      	bmi.n	8022dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022d20:	45d0      	cmp	r8, sl
 8022d22:	dd55      	ble.n	8022dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022d24:	f1bc 0f00 	cmp.w	ip, #0
 8022d28:	db52      	blt.n	8022dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022d2a:	45e1      	cmp	r9, ip
 8022d2c:	dd50      	ble.n	8022dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022d2e:	2f00      	cmp	r7, #0
 8022d30:	f000 80a5 	beq.w	8022e7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022d34:	f10e 0b01 	add.w	fp, lr, #1
 8022d38:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022d3c:	f01b 0f01 	tst.w	fp, #1
 8022d40:	5d14      	ldrb	r4, [r2, r4]
 8022d42:	bf0c      	ite	eq
 8022d44:	f004 040f 	andeq.w	r4, r4, #15
 8022d48:	1124      	asrne	r4, r4, #4
 8022d4a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022d4e:	b2e4      	uxtb	r4, r4
 8022d50:	2d00      	cmp	r5, #0
 8022d52:	f000 808f 	beq.w	8022e74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8022d56:	2800      	cmp	r0, #0
 8022d58:	f10c 0c01 	add.w	ip, ip, #1
 8022d5c:	db3c      	blt.n	8022dd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022d5e:	4580      	cmp	r8, r0
 8022d60:	dd3a      	ble.n	8022dd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022d62:	f1bc 0f00 	cmp.w	ip, #0
 8022d66:	db37      	blt.n	8022dd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022d68:	45e1      	cmp	r9, ip
 8022d6a:	dd35      	ble.n	8022dd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022d6c:	eb03 0b0e 	add.w	fp, r3, lr
 8022d70:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022d74:	f01b 0f01 	tst.w	fp, #1
 8022d78:	5c10      	ldrb	r0, [r2, r0]
 8022d7a:	bf0c      	ite	eq
 8022d7c:	f000 000f 	andeq.w	r0, r0, #15
 8022d80:	1100      	asrne	r0, r0, #4
 8022d82:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022d86:	b2c0      	uxtb	r0, r0
 8022d88:	f1ba 0f00 	cmp.w	sl, #0
 8022d8c:	db26      	blt.n	8022ddc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022d8e:	45d0      	cmp	r8, sl
 8022d90:	dd24      	ble.n	8022ddc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022d92:	f1bc 0f00 	cmp.w	ip, #0
 8022d96:	db21      	blt.n	8022ddc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022d98:	45e1      	cmp	r9, ip
 8022d9a:	dd1f      	ble.n	8022ddc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022d9c:	b307      	cbz	r7, 8022de0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8022d9e:	3301      	adds	r3, #1
 8022da0:	449e      	add	lr, r3
 8022da2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022da6:	f01e 0f01 	tst.w	lr, #1
 8022daa:	5cd3      	ldrb	r3, [r2, r3]
 8022dac:	bf0c      	ite	eq
 8022dae:	f003 030f 	andeq.w	r3, r3, #15
 8022db2:	111b      	asrne	r3, r3, #4
 8022db4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022db8:	b2db      	uxtb	r3, r3
 8022dba:	2f0f      	cmp	r7, #15
 8022dbc:	d911      	bls.n	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8022dbe:	4b32      	ldr	r3, [pc, #200]	; (8022e88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022dc0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022dc4:	4a31      	ldr	r2, [pc, #196]	; (8022e8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022dc6:	4832      	ldr	r0, [pc, #200]	; (8022e90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022dc8:	f001 fff8 	bl	8024dbc <__assert_func>
 8022dcc:	2600      	movs	r6, #0
 8022dce:	e7a4      	b.n	8022d1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022dd0:	2400      	movs	r4, #0
 8022dd2:	e7bd      	b.n	8022d50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022dd4:	463c      	mov	r4, r7
 8022dd6:	e7be      	b.n	8022d56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022dd8:	2000      	movs	r0, #0
 8022dda:	e7d5      	b.n	8022d88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022ddc:	2300      	movs	r3, #0
 8022dde:	e7ec      	b.n	8022dba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022de0:	463b      	mov	r3, r7
 8022de2:	2d0f      	cmp	r5, #15
 8022de4:	d8eb      	bhi.n	8022dbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022de6:	b2bf      	uxth	r7, r7
 8022de8:	b2ad      	uxth	r5, r5
 8022dea:	fb07 f205 	mul.w	r2, r7, r5
 8022dee:	013f      	lsls	r7, r7, #4
 8022df0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022df4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022df8:	1abf      	subs	r7, r7, r2
 8022dfa:	b2ad      	uxth	r5, r5
 8022dfc:	b2bf      	uxth	r7, r7
 8022dfe:	ebac 0c05 	sub.w	ip, ip, r5
 8022e02:	437c      	muls	r4, r7
 8022e04:	fa1f fc8c 	uxth.w	ip, ip
 8022e08:	fb06 440c 	mla	r4, r6, ip, r4
 8022e0c:	fb05 4400 	mla	r4, r5, r0, r4
 8022e10:	fb02 4303 	mla	r3, r2, r3, r4
 8022e14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022e18:	b353      	cbz	r3, 8022e70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8022e1a:	4a1e      	ldr	r2, [pc, #120]	; (8022e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022e1c:	7808      	ldrb	r0, [r1, #0]
 8022e1e:	6814      	ldr	r4, [r2, #0]
 8022e20:	b29a      	uxth	r2, r3
 8022e22:	43db      	mvns	r3, r3
 8022e24:	b2e5      	uxtb	r5, r4
 8022e26:	b2db      	uxtb	r3, r3
 8022e28:	fb15 f502 	smulbb	r5, r5, r2
 8022e2c:	fb00 5003 	mla	r0, r0, r3, r5
 8022e30:	b280      	uxth	r0, r0
 8022e32:	1c45      	adds	r5, r0, #1
 8022e34:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022e38:	784d      	ldrb	r5, [r1, #1]
 8022e3a:	fb15 f503 	smulbb	r5, r5, r3
 8022e3e:	1200      	asrs	r0, r0, #8
 8022e40:	7008      	strb	r0, [r1, #0]
 8022e42:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022e46:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022e4a:	fb00 5002 	mla	r0, r0, r2, r5
 8022e4e:	b280      	uxth	r0, r0
 8022e50:	1c45      	adds	r5, r0, #1
 8022e52:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022e56:	1200      	asrs	r0, r0, #8
 8022e58:	7048      	strb	r0, [r1, #1]
 8022e5a:	7888      	ldrb	r0, [r1, #2]
 8022e5c:	fb10 f303 	smulbb	r3, r0, r3
 8022e60:	fb04 3202 	mla	r2, r4, r2, r3
 8022e64:	b292      	uxth	r2, r2
 8022e66:	1c53      	adds	r3, r2, #1
 8022e68:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022e6c:	1212      	asrs	r2, r2, #8
 8022e6e:	708a      	strb	r2, [r1, #2]
 8022e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e74:	2f0f      	cmp	r7, #15
 8022e76:	d8a2      	bhi.n	8022dbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022e78:	462b      	mov	r3, r5
 8022e7a:	4628      	mov	r0, r5
 8022e7c:	e7b3      	b.n	8022de6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8022e7e:	2d00      	cmp	r5, #0
 8022e80:	d1a8      	bne.n	8022dd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8022e82:	462c      	mov	r4, r5
 8022e84:	e7f8      	b.n	8022e78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022e86:	bf00      	nop
 8022e88:	080297ab 	.word	0x080297ab
 8022e8c:	08029ca2 	.word	0x08029ca2
 8022e90:	08029874 	.word	0x08029874
 8022e94:	2000bd94 	.word	0x2000bd94

08022e98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e9c:	ed2d 8b08 	vpush	{d8-d11}
 8022ea0:	b095      	sub	sp, #84	; 0x54
 8022ea2:	461c      	mov	r4, r3
 8022ea4:	eeb0 aa40 	vmov.f32	s20, s0
 8022ea8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022eac:	eef0 9a60 	vmov.f32	s19, s1
 8022eb0:	920e      	str	r2, [sp, #56]	; 0x38
 8022eb2:	eeb0 9a41 	vmov.f32	s18, s2
 8022eb6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022eb8:	eeb0 8a62 	vmov.f32	s16, s5
 8022ebc:	9307      	str	r3, [sp, #28]
 8022ebe:	eef0 8a43 	vmov.f32	s17, s6
 8022ec2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022ec6:	eef0 ba44 	vmov.f32	s23, s8
 8022eca:	9013      	str	r0, [sp, #76]	; 0x4c
 8022ecc:	eeb0 ba64 	vmov.f32	s22, s9
 8022ed0:	9109      	str	r1, [sp, #36]	; 0x24
 8022ed2:	eef0 aa45 	vmov.f32	s21, s10
 8022ed6:	9308      	str	r3, [sp, #32]
 8022ed8:	6850      	ldr	r0, [r2, #4]
 8022eda:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022ede:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022ee2:	fb00 1803 	mla	r8, r0, r3, r1
 8022ee6:	6813      	ldr	r3, [r2, #0]
 8022ee8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022eec:	4498      	add	r8, r3
 8022eee:	9b07      	ldr	r3, [sp, #28]
 8022ef0:	3301      	adds	r3, #1
 8022ef2:	f023 0301 	bic.w	r3, r3, #1
 8022ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ef8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022efa:	681f      	ldr	r7, [r3, #0]
 8022efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022efe:	2b00      	cmp	r3, #0
 8022f00:	dc03      	bgt.n	8022f0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	f340 8238 	ble.w	802337a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022f0a:	2c00      	cmp	r4, #0
 8022f0c:	f340 8109 	ble.w	8023122 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022f10:	142a      	asrs	r2, r5, #16
 8022f12:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022f16:	d42b      	bmi.n	8022f70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022f18:	1c51      	adds	r1, r2, #1
 8022f1a:	9807      	ldr	r0, [sp, #28]
 8022f1c:	4288      	cmp	r0, r1
 8022f1e:	dd2a      	ble.n	8022f76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022f20:	2b00      	cmp	r3, #0
 8022f22:	db28      	blt.n	8022f76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022f24:	1c59      	adds	r1, r3, #1
 8022f26:	9808      	ldr	r0, [sp, #32]
 8022f28:	4288      	cmp	r0, r1
 8022f2a:	dd24      	ble.n	8022f76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022f2c:	1e63      	subs	r3, r4, #1
 8022f2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022f30:	fb02 5203 	mla	r2, r2, r3, r5
 8022f34:	1412      	asrs	r2, r2, #16
 8022f36:	d429      	bmi.n	8022f8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022f38:	3201      	adds	r2, #1
 8022f3a:	9907      	ldr	r1, [sp, #28]
 8022f3c:	4291      	cmp	r1, r2
 8022f3e:	dd25      	ble.n	8022f8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022f40:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022f42:	fb02 6303 	mla	r3, r2, r3, r6
 8022f46:	141b      	asrs	r3, r3, #16
 8022f48:	d420      	bmi.n	8022f8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022f4a:	3301      	adds	r3, #1
 8022f4c:	9a08      	ldr	r2, [sp, #32]
 8022f4e:	429a      	cmp	r2, r3
 8022f50:	dd1c      	ble.n	8022f8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022f52:	f108 0e03 	add.w	lr, r8, #3
 8022f56:	46a1      	mov	r9, r4
 8022f58:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022f5c:	f1b9 0f00 	cmp.w	r9, #0
 8022f60:	f300 8155 	bgt.w	802320e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8022f64:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022f68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022f6c:	44a0      	add	r8, r4
 8022f6e:	e0da      	b.n	8023126 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022f70:	1c50      	adds	r0, r2, #1
 8022f72:	f040 80ce 	bne.w	8023112 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022f76:	9907      	ldr	r1, [sp, #28]
 8022f78:	4291      	cmp	r1, r2
 8022f7a:	f340 80ca 	ble.w	8023112 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022f7e:	1c59      	adds	r1, r3, #1
 8022f80:	f2c0 80c7 	blt.w	8023112 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022f84:	9a08      	ldr	r2, [sp, #32]
 8022f86:	4293      	cmp	r3, r2
 8022f88:	f280 80c3 	bge.w	8023112 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022f8c:	46a3      	mov	fp, r4
 8022f8e:	46c1      	mov	r9, r8
 8022f90:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022f94:	f1bb 0f00 	cmp.w	fp, #0
 8022f98:	dde4      	ble.n	8022f64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022f9a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022f9e:	1428      	asrs	r0, r5, #16
 8022fa0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022fa4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8022faa:	f100 8116 	bmi.w	80231da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022fae:	f100 0c01 	add.w	ip, r0, #1
 8022fb2:	9a07      	ldr	r2, [sp, #28]
 8022fb4:	4562      	cmp	r2, ip
 8022fb6:	f340 8112 	ble.w	80231de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	f2c0 810f 	blt.w	80231de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022fc0:	f103 0c01 	add.w	ip, r3, #1
 8022fc4:	9a08      	ldr	r2, [sp, #32]
 8022fc6:	4562      	cmp	r2, ip
 8022fc8:	f340 8109 	ble.w	80231de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022fcc:	fb03 030a 	mla	r3, r3, sl, r0
 8022fd0:	0858      	lsrs	r0, r3, #1
 8022fd2:	07da      	lsls	r2, r3, #31
 8022fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022fd6:	5c38      	ldrb	r0, [r7, r0]
 8022fd8:	bf54      	ite	pl
 8022fda:	f000 000f 	andpl.w	r0, r0, #15
 8022fde:	1100      	asrmi	r0, r0, #4
 8022fe0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022fe4:	b2c0      	uxtb	r0, r0
 8022fe6:	2a00      	cmp	r2, #0
 8022fe8:	f000 80dd 	beq.w	80231a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022fec:	f103 0e01 	add.w	lr, r3, #1
 8022ff0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022ff4:	f01e 0f01 	tst.w	lr, #1
 8022ff8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ffc:	bf0c      	ite	eq
 8022ffe:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023002:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023006:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802300a:	fa5f fc8c 	uxtb.w	ip, ip
 802300e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023012:	b301      	cbz	r1, 8023056 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023014:	4453      	add	r3, sl
 8023016:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802301a:	07da      	lsls	r2, r3, #31
 802301c:	f103 0301 	add.w	r3, r3, #1
 8023020:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023024:	bf54      	ite	pl
 8023026:	f00c 0c0f 	andpl.w	ip, ip, #15
 802302a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802302e:	07da      	lsls	r2, r3, #31
 8023030:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023034:	fa5f fc8c 	uxtb.w	ip, ip
 8023038:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802303c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023040:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023044:	bf54      	ite	pl
 8023046:	f00c 030f 	andpl.w	r3, ip, #15
 802304a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802304e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023052:	b2db      	uxtb	r3, r3
 8023054:	9310      	str	r3, [sp, #64]	; 0x40
 8023056:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802305a:	b289      	uxth	r1, r1
 802305c:	fb02 f301 	mul.w	r3, r2, r1
 8023060:	0112      	lsls	r2, r2, #4
 8023062:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023066:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802306a:	1ad2      	subs	r2, r2, r3
 802306c:	fa1f fe81 	uxth.w	lr, r1
 8023070:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023072:	b292      	uxth	r2, r2
 8023074:	ebac 0c0e 	sub.w	ip, ip, lr
 8023078:	434a      	muls	r2, r1
 802307a:	fa1f fc8c 	uxth.w	ip, ip
 802307e:	fb00 200c 	mla	r0, r0, ip, r2
 8023082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023084:	fb0e 0002 	mla	r0, lr, r2, r0
 8023088:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802308a:	fb03 0002 	mla	r0, r3, r2, r0
 802308e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023092:	b3a8      	cbz	r0, 8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023094:	4bbb      	ldr	r3, [pc, #748]	; (8023384 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023096:	28ff      	cmp	r0, #255	; 0xff
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802309e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80230a2:	b2db      	uxtb	r3, r3
 80230a4:	f000 8092 	beq.w	80231cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80230a8:	b282      	uxth	r2, r0
 80230aa:	43c0      	mvns	r0, r0
 80230ac:	f899 e000 	ldrb.w	lr, [r9]
 80230b0:	fb13 f302 	smulbb	r3, r3, r2
 80230b4:	b2c0      	uxtb	r0, r0
 80230b6:	fb11 f102 	smulbb	r1, r1, r2
 80230ba:	fb0e 3300 	mla	r3, lr, r0, r3
 80230be:	fb1c f202 	smulbb	r2, ip, r2
 80230c2:	b29b      	uxth	r3, r3
 80230c4:	f103 0e01 	add.w	lr, r3, #1
 80230c8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80230cc:	121b      	asrs	r3, r3, #8
 80230ce:	f889 3000 	strb.w	r3, [r9]
 80230d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80230d6:	fb03 1100 	mla	r1, r3, r0, r1
 80230da:	b289      	uxth	r1, r1
 80230dc:	1c4b      	adds	r3, r1, #1
 80230de:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80230e2:	f899 3002 	ldrb.w	r3, [r9, #2]
 80230e6:	fb03 2000 	mla	r0, r3, r0, r2
 80230ea:	1209      	asrs	r1, r1, #8
 80230ec:	b280      	uxth	r0, r0
 80230ee:	f889 1001 	strb.w	r1, [r9, #1]
 80230f2:	f100 0c01 	add.w	ip, r0, #1
 80230f6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80230fa:	1200      	asrs	r0, r0, #8
 80230fc:	f889 0002 	strb.w	r0, [r9, #2]
 8023100:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023102:	f109 0903 	add.w	r9, r9, #3
 8023106:	f10b 3bff 	add.w	fp, fp, #4294967295
 802310a:	441d      	add	r5, r3
 802310c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802310e:	441e      	add	r6, r3
 8023110:	e740      	b.n	8022f94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023112:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023114:	3c01      	subs	r4, #1
 8023116:	f108 0803 	add.w	r8, r8, #3
 802311a:	441d      	add	r5, r3
 802311c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802311e:	441e      	add	r6, r3
 8023120:	e6f3      	b.n	8022f0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023122:	f47f af03 	bne.w	8022f2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023128:	2b00      	cmp	r3, #0
 802312a:	f340 8126 	ble.w	802337a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802312e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023134:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023138:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802313c:	eef0 6a48 	vmov.f32	s13, s16
 8023140:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023144:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023148:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802314c:	ee16 5a90 	vmov	r5, s13
 8023150:	eef0 6a68 	vmov.f32	s13, s17
 8023154:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023158:	ee16 6a90 	vmov	r6, s13
 802315c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023160:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023164:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023168:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802316c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023170:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023174:	ee18 2a10 	vmov	r2, s16
 8023178:	eeb0 8a47 	vmov.f32	s16, s14
 802317c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023180:	ee18 2a90 	vmov	r2, s17
 8023184:	9329      	str	r3, [sp, #164]	; 0xa4
 8023186:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023188:	eef0 8a67 	vmov.f32	s17, s15
 802318c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023190:	932a      	str	r3, [sp, #168]	; 0xa8
 8023192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023194:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023196:	3b01      	subs	r3, #1
 8023198:	9309      	str	r3, [sp, #36]	; 0x24
 802319a:	bf08      	it	eq
 802319c:	4614      	moveq	r4, r2
 802319e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80231a0:	bf18      	it	ne
 80231a2:	461c      	movne	r4, r3
 80231a4:	e6aa      	b.n	8022efc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80231a6:	2900      	cmp	r1, #0
 80231a8:	f43f af55 	beq.w	8023056 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80231ac:	4453      	add	r3, sl
 80231ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80231b2:	07db      	lsls	r3, r3, #31
 80231b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80231b8:	bf54      	ite	pl
 80231ba:	f00c 030f 	andpl.w	r3, ip, #15
 80231be:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80231c2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80231c6:	b2db      	uxtb	r3, r3
 80231c8:	930c      	str	r3, [sp, #48]	; 0x30
 80231ca:	e744      	b.n	8023056 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80231cc:	f889 3000 	strb.w	r3, [r9]
 80231d0:	f889 1001 	strb.w	r1, [r9, #1]
 80231d4:	f889 c002 	strb.w	ip, [r9, #2]
 80231d8:	e792      	b.n	8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80231da:	1c42      	adds	r2, r0, #1
 80231dc:	d190      	bne.n	8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80231de:	9a07      	ldr	r2, [sp, #28]
 80231e0:	4282      	cmp	r2, r0
 80231e2:	dd8d      	ble.n	8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80231e4:	1c5a      	adds	r2, r3, #1
 80231e6:	db8b      	blt.n	8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80231e8:	9a08      	ldr	r2, [sp, #32]
 80231ea:	429a      	cmp	r2, r3
 80231ec:	dd88      	ble.n	8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80231ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80231f0:	9105      	str	r1, [sp, #20]
 80231f2:	4649      	mov	r1, r9
 80231f4:	9002      	str	r0, [sp, #8]
 80231f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80231f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80231fc:	9b08      	ldr	r3, [sp, #32]
 80231fe:	463a      	mov	r2, r7
 8023200:	9301      	str	r3, [sp, #4]
 8023202:	9b07      	ldr	r3, [sp, #28]
 8023204:	9300      	str	r3, [sp, #0]
 8023206:	4653      	mov	r3, sl
 8023208:	f7ff fd64 	bl	8022cd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 802320c:	e778      	b.n	8023100 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802320e:	142a      	asrs	r2, r5, #16
 8023210:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023214:	1433      	asrs	r3, r6, #16
 8023216:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802321a:	fb0a 2303 	mla	r3, sl, r3, r2
 802321e:	085a      	lsrs	r2, r3, #1
 8023220:	07d9      	lsls	r1, r3, #31
 8023222:	5cba      	ldrb	r2, [r7, r2]
 8023224:	bf54      	ite	pl
 8023226:	f002 020f 	andpl.w	r2, r2, #15
 802322a:	1112      	asrmi	r2, r2, #4
 802322c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023230:	b2d2      	uxtb	r2, r2
 8023232:	2800      	cmp	r0, #0
 8023234:	f000 808a 	beq.w	802334c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023238:	f103 0b01 	add.w	fp, r3, #1
 802323c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023240:	f01b 0f01 	tst.w	fp, #1
 8023244:	5c79      	ldrb	r1, [r7, r1]
 8023246:	bf0c      	ite	eq
 8023248:	f001 010f 	andeq.w	r1, r1, #15
 802324c:	1109      	asrne	r1, r1, #4
 802324e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023252:	b2c9      	uxtb	r1, r1
 8023254:	9111      	str	r1, [sp, #68]	; 0x44
 8023256:	f1bc 0f00 	cmp.w	ip, #0
 802325a:	d019      	beq.n	8023290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802325c:	4453      	add	r3, sl
 802325e:	0859      	lsrs	r1, r3, #1
 8023260:	f013 0f01 	tst.w	r3, #1
 8023264:	f103 0301 	add.w	r3, r3, #1
 8023268:	5c79      	ldrb	r1, [r7, r1]
 802326a:	bf0c      	ite	eq
 802326c:	f001 010f 	andeq.w	r1, r1, #15
 8023270:	1109      	asrne	r1, r1, #4
 8023272:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023276:	b2c9      	uxtb	r1, r1
 8023278:	910d      	str	r1, [sp, #52]	; 0x34
 802327a:	0859      	lsrs	r1, r3, #1
 802327c:	07db      	lsls	r3, r3, #31
 802327e:	5c79      	ldrb	r1, [r7, r1]
 8023280:	bf54      	ite	pl
 8023282:	f001 010f 	andpl.w	r1, r1, #15
 8023286:	1109      	asrmi	r1, r1, #4
 8023288:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802328c:	b2c9      	uxtb	r1, r1
 802328e:	9112      	str	r1, [sp, #72]	; 0x48
 8023290:	b280      	uxth	r0, r0
 8023292:	fa1f fc8c 	uxth.w	ip, ip
 8023296:	fb00 f30c 	mul.w	r3, r0, ip
 802329a:	0100      	lsls	r0, r0, #4
 802329c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80232a0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80232a4:	1ac0      	subs	r0, r0, r3
 80232a6:	fa1f fc8c 	uxth.w	ip, ip
 80232aa:	b280      	uxth	r0, r0
 80232ac:	eba1 010c 	sub.w	r1, r1, ip
 80232b0:	fa1f fb81 	uxth.w	fp, r1
 80232b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80232b6:	4348      	muls	r0, r1
 80232b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80232ba:	fb02 020b 	mla	r2, r2, fp, r0
 80232be:	fb0c 2c01 	mla	ip, ip, r1, r2
 80232c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80232c4:	fb03 c302 	mla	r3, r3, r2, ip
 80232c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80232cc:	b3ab      	cbz	r3, 802333a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80232ce:	4a2d      	ldr	r2, [pc, #180]	; (8023384 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80232d0:	2bff      	cmp	r3, #255	; 0xff
 80232d2:	6811      	ldr	r1, [r2, #0]
 80232d4:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80232d8:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80232dc:	b2c9      	uxtb	r1, r1
 80232de:	d045      	beq.n	802336c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80232e0:	b298      	uxth	r0, r3
 80232e2:	43db      	mvns	r3, r3
 80232e4:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 80232e8:	fb11 f100 	smulbb	r1, r1, r0
 80232ec:	b2db      	uxtb	r3, r3
 80232ee:	fb1c fc00 	smulbb	ip, ip, r0
 80232f2:	fb02 1103 	mla	r1, r2, r3, r1
 80232f6:	fb1b f000 	smulbb	r0, fp, r0
 80232fa:	b289      	uxth	r1, r1
 80232fc:	1c4a      	adds	r2, r1, #1
 80232fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023302:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023306:	fb02 cc03 	mla	ip, r2, r3, ip
 802330a:	1209      	asrs	r1, r1, #8
 802330c:	fa1f fc8c 	uxth.w	ip, ip
 8023310:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023314:	f10c 0201 	add.w	r2, ip, #1
 8023318:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802331c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023320:	fb02 0303 	mla	r3, r2, r3, r0
 8023324:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023328:	b29b      	uxth	r3, r3
 802332a:	f80e cc02 	strb.w	ip, [lr, #-2]
 802332e:	1c5a      	adds	r2, r3, #1
 8023330:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023334:	121b      	asrs	r3, r3, #8
 8023336:	f80e 3c01 	strb.w	r3, [lr, #-1]
 802333a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802333c:	f10e 0e03 	add.w	lr, lr, #3
 8023340:	f109 39ff 	add.w	r9, r9, #4294967295
 8023344:	441d      	add	r5, r3
 8023346:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023348:	441e      	add	r6, r3
 802334a:	e607      	b.n	8022f5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 802334c:	f1bc 0f00 	cmp.w	ip, #0
 8023350:	d09e      	beq.n	8023290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023352:	4453      	add	r3, sl
 8023354:	0859      	lsrs	r1, r3, #1
 8023356:	07db      	lsls	r3, r3, #31
 8023358:	5c79      	ldrb	r1, [r7, r1]
 802335a:	bf54      	ite	pl
 802335c:	f001 010f 	andpl.w	r1, r1, #15
 8023360:	1109      	asrmi	r1, r1, #4
 8023362:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023366:	b2c9      	uxtb	r1, r1
 8023368:	910d      	str	r1, [sp, #52]	; 0x34
 802336a:	e791      	b.n	8023290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802336c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023370:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023374:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023378:	e7df      	b.n	802333a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802337a:	b015      	add	sp, #84	; 0x54
 802337c:	ecbd 8b08 	vpop	{d8-d11}
 8023380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023384:	2000bd94 	.word	0x2000bd94

08023388 <CRC_Lock>:
 8023388:	4a1d      	ldr	r2, [pc, #116]	; (8023400 <CRC_Lock+0x78>)
 802338a:	b530      	push	{r4, r5, lr}
 802338c:	6813      	ldr	r3, [r2, #0]
 802338e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023392:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023396:	f023 0301 	bic.w	r3, r3, #1
 802339a:	6013      	str	r3, [r2, #0]
 802339c:	4b19      	ldr	r3, [pc, #100]	; (8023404 <CRC_Lock+0x7c>)
 802339e:	681a      	ldr	r2, [r3, #0]
 80233a0:	4022      	ands	r2, r4
 80233a2:	42aa      	cmp	r2, r5
 80233a4:	d005      	beq.n	80233b2 <CRC_Lock+0x2a>
 80233a6:	681b      	ldr	r3, [r3, #0]
 80233a8:	f24c 2270 	movw	r2, #49776	; 0xc270
 80233ac:	4023      	ands	r3, r4
 80233ae:	4293      	cmp	r3, r2
 80233b0:	d11d      	bne.n	80233ee <CRC_Lock+0x66>
 80233b2:	4b15      	ldr	r3, [pc, #84]	; (8023408 <CRC_Lock+0x80>)
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	b9d3      	cbnz	r3, 80233ee <CRC_Lock+0x66>
 80233b8:	4a14      	ldr	r2, [pc, #80]	; (802340c <CRC_Lock+0x84>)
 80233ba:	6813      	ldr	r3, [r2, #0]
 80233bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80233c0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80233c4:	d006      	beq.n	80233d4 <CRC_Lock+0x4c>
 80233c6:	6813      	ldr	r3, [r2, #0]
 80233c8:	f240 4283 	movw	r2, #1155	; 0x483
 80233cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80233d0:	4293      	cmp	r3, r2
 80233d2:	d10c      	bne.n	80233ee <CRC_Lock+0x66>
 80233d4:	4b0e      	ldr	r3, [pc, #56]	; (8023410 <CRC_Lock+0x88>)
 80233d6:	2201      	movs	r2, #1
 80233d8:	601a      	str	r2, [r3, #0]
 80233da:	681a      	ldr	r2, [r3, #0]
 80233dc:	2a00      	cmp	r2, #0
 80233de:	d1fc      	bne.n	80233da <CRC_Lock+0x52>
 80233e0:	4b0c      	ldr	r3, [pc, #48]	; (8023414 <CRC_Lock+0x8c>)
 80233e2:	6018      	str	r0, [r3, #0]
 80233e4:	6818      	ldr	r0, [r3, #0]
 80233e6:	1a43      	subs	r3, r0, r1
 80233e8:	4258      	negs	r0, r3
 80233ea:	4158      	adcs	r0, r3
 80233ec:	bd30      	pop	{r4, r5, pc}
 80233ee:	4b0a      	ldr	r3, [pc, #40]	; (8023418 <CRC_Lock+0x90>)
 80233f0:	2201      	movs	r2, #1
 80233f2:	601a      	str	r2, [r3, #0]
 80233f4:	681a      	ldr	r2, [r3, #0]
 80233f6:	2a00      	cmp	r2, #0
 80233f8:	d1fc      	bne.n	80233f4 <CRC_Lock+0x6c>
 80233fa:	4b08      	ldr	r3, [pc, #32]	; (802341c <CRC_Lock+0x94>)
 80233fc:	e7f1      	b.n	80233e2 <CRC_Lock+0x5a>
 80233fe:	bf00      	nop
 8023400:	e0002000 	.word	0xe0002000
 8023404:	e000ed00 	.word	0xe000ed00
 8023408:	e0042000 	.word	0xe0042000
 802340c:	5c001000 	.word	0x5c001000
 8023410:	58024c08 	.word	0x58024c08
 8023414:	58024c00 	.word	0x58024c00
 8023418:	40023008 	.word	0x40023008
 802341c:	40023000 	.word	0x40023000

08023420 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023420:	6101      	str	r1, [r0, #16]
 8023422:	4770      	bx	lr

08023424 <_ZN8touchgfx8Gestures4tickEv>:
 8023424:	7b83      	ldrb	r3, [r0, #14]
 8023426:	b14b      	cbz	r3, 802343c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023428:	8903      	ldrh	r3, [r0, #8]
 802342a:	3301      	adds	r3, #1
 802342c:	b29b      	uxth	r3, r3
 802342e:	2b07      	cmp	r3, #7
 8023430:	8103      	strh	r3, [r0, #8]
 8023432:	bf81      	itttt	hi
 8023434:	2300      	movhi	r3, #0
 8023436:	8143      	strhhi	r3, [r0, #10]
 8023438:	8183      	strhhi	r3, [r0, #12]
 802343a:	7383      	strbhi	r3, [r0, #14]
 802343c:	4770      	bx	lr
	...

08023440 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023440:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023444:	4604      	mov	r4, r0
 8023446:	4698      	mov	r8, r3
 8023448:	8880      	ldrh	r0, [r0, #4]
 802344a:	4617      	mov	r7, r2
 802344c:	4b1d      	ldr	r3, [pc, #116]	; (80234c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802344e:	460e      	mov	r6, r1
 8023450:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023454:	eba8 0000 	sub.w	r0, r8, r0
 8023458:	9300      	str	r3, [sp, #0]
 802345a:	2300      	movs	r3, #0
 802345c:	b280      	uxth	r0, r0
 802345e:	8aa2      	ldrh	r2, [r4, #20]
 8023460:	f88d 3004 	strb.w	r3, [sp, #4]
 8023464:	b203      	sxth	r3, r0
 8023466:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802346a:	88e1      	ldrh	r1, [r4, #6]
 802346c:	2b00      	cmp	r3, #0
 802346e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023472:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023476:	bfb8      	it	lt
 8023478:	4240      	neglt	r0, r0
 802347a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802347e:	bfb8      	it	lt
 8023480:	b203      	sxthlt	r3, r0
 8023482:	4293      	cmp	r3, r2
 8023484:	dc08      	bgt.n	8023498 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023486:	1a69      	subs	r1, r5, r1
 8023488:	b289      	uxth	r1, r1
 802348a:	b20b      	sxth	r3, r1
 802348c:	2b00      	cmp	r3, #0
 802348e:	bfbc      	itt	lt
 8023490:	4249      	neglt	r1, r1
 8023492:	b20b      	sxthlt	r3, r1
 8023494:	429a      	cmp	r2, r3
 8023496:	da13      	bge.n	80234c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023498:	6920      	ldr	r0, [r4, #16]
 802349a:	4669      	mov	r1, sp
 802349c:	eba8 0606 	sub.w	r6, r8, r6
 80234a0:	1bef      	subs	r7, r5, r7
 80234a2:	6803      	ldr	r3, [r0, #0]
 80234a4:	685b      	ldr	r3, [r3, #4]
 80234a6:	4798      	blx	r3
 80234a8:	2300      	movs	r3, #0
 80234aa:	2001      	movs	r0, #1
 80234ac:	8166      	strh	r6, [r4, #10]
 80234ae:	8123      	strh	r3, [r4, #8]
 80234b0:	81a7      	strh	r7, [r4, #12]
 80234b2:	f8a4 8004 	strh.w	r8, [r4, #4]
 80234b6:	80e5      	strh	r5, [r4, #6]
 80234b8:	73a0      	strb	r0, [r4, #14]
 80234ba:	b004      	add	sp, #16
 80234bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80234c0:	2000      	movs	r0, #0
 80234c2:	e7fa      	b.n	80234ba <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80234c4:	08028948 	.word	0x08028948

080234c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80234c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80234ca:	461e      	mov	r6, r3
 80234cc:	1e4b      	subs	r3, r1, #1
 80234ce:	b085      	sub	sp, #20
 80234d0:	4604      	mov	r4, r0
 80234d2:	2b01      	cmp	r3, #1
 80234d4:	460d      	mov	r5, r1
 80234d6:	4617      	mov	r7, r2
 80234d8:	d84b      	bhi.n	8023572 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80234da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80234de:	1cd3      	adds	r3, r2, #3
 80234e0:	b29b      	uxth	r3, r3
 80234e2:	2b06      	cmp	r3, #6
 80234e4:	d916      	bls.n	8023514 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80234e6:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023580 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80234ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80234ee:	f8cd c004 	str.w	ip, [sp, #4]
 80234f2:	f04f 0c00 	mov.w	ip, #0
 80234f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80234fa:	6900      	ldr	r0, [r0, #16]
 80234fc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023500:	a901      	add	r1, sp, #4
 8023502:	f88d c008 	strb.w	ip, [sp, #8]
 8023506:	f8ad 200a 	strh.w	r2, [sp, #10]
 802350a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802350e:	6803      	ldr	r3, [r0, #0]
 8023510:	689b      	ldr	r3, [r3, #8]
 8023512:	4798      	blx	r3
 8023514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023518:	1cd3      	adds	r3, r2, #3
 802351a:	b29b      	uxth	r3, r3
 802351c:	2b06      	cmp	r3, #6
 802351e:	d916      	bls.n	802354e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023520:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023580 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023524:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023528:	f8cd c004 	str.w	ip, [sp, #4]
 802352c:	f04f 0c01 	mov.w	ip, #1
 8023530:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023534:	6920      	ldr	r0, [r4, #16]
 8023536:	f8ad 100c 	strh.w	r1, [sp, #12]
 802353a:	a901      	add	r1, sp, #4
 802353c:	f88d c008 	strb.w	ip, [sp, #8]
 8023540:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023544:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023548:	6803      	ldr	r3, [r0, #0]
 802354a:	689b      	ldr	r3, [r3, #8]
 802354c:	4798      	blx	r3
 802354e:	4b0b      	ldr	r3, [pc, #44]	; (802357c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023550:	a901      	add	r1, sp, #4
 8023552:	6920      	ldr	r0, [r4, #16]
 8023554:	9301      	str	r3, [sp, #4]
 8023556:	2300      	movs	r3, #0
 8023558:	f88d 5008 	strb.w	r5, [sp, #8]
 802355c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023560:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023564:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023568:	6803      	ldr	r3, [r0, #0]
 802356a:	681b      	ldr	r3, [r3, #0]
 802356c:	4798      	blx	r3
 802356e:	b005      	add	sp, #20
 8023570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023572:	2900      	cmp	r1, #0
 8023574:	d1eb      	bne.n	802354e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023576:	80a2      	strh	r2, [r4, #4]
 8023578:	80c6      	strh	r6, [r0, #6]
 802357a:	e7e8      	b.n	802354e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802357c:	08028934 	.word	0x08028934
 8023580:	0802895c 	.word	0x0802895c

08023584 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8023584:	10c9      	asrs	r1, r1, #3
 8023586:	2900      	cmp	r1, #0
 8023588:	bfb8      	it	lt
 802358a:	4249      	neglt	r1, r1
 802358c:	2801      	cmp	r0, #1
 802358e:	d108      	bne.n	80235a2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023590:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023594:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023598:	4601      	mov	r1, r0
 802359a:	dd02      	ble.n	80235a2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 802359c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80235a0:	4770      	bx	lr
 80235a2:	29ff      	cmp	r1, #255	; 0xff
 80235a4:	bfa8      	it	ge
 80235a6:	21ff      	movge	r1, #255	; 0xff
 80235a8:	4608      	mov	r0, r1
 80235aa:	4770      	bx	lr

080235ac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 80235ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235b0:	688c      	ldr	r4, [r1, #8]
 80235b2:	b087      	sub	sp, #28
 80235b4:	4607      	mov	r7, r0
 80235b6:	2c00      	cmp	r4, #0
 80235b8:	db2b      	blt.n	8023612 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80235ba:	6803      	ldr	r3, [r0, #0]
 80235bc:	68da      	ldr	r2, [r3, #12]
 80235be:	42a2      	cmp	r2, r4
 80235c0:	dd27      	ble.n	8023612 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80235c2:	681a      	ldr	r2, [r3, #0]
 80235c4:	691e      	ldr	r6, [r3, #16]
 80235c6:	68cd      	ldr	r5, [r1, #12]
 80235c8:	fb06 2604 	mla	r6, r6, r4, r2
 80235cc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80235d0:	698a      	ldr	r2, [r1, #24]
 80235d2:	f893 a004 	ldrb.w	sl, [r3, #4]
 80235d6:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80235da:	9205      	str	r2, [sp, #20]
 80235dc:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80235e0:	9b05      	ldr	r3, [sp, #20]
 80235e2:	6839      	ldr	r1, [r7, #0]
 80235e4:	eb03 0c02 	add.w	ip, r3, r2
 80235e8:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 80235ec:	6889      	ldr	r1, [r1, #8]
 80235ee:	1898      	adds	r0, r3, r2
 80235f0:	4288      	cmp	r0, r1
 80235f2:	db02      	blt.n	80235fa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80235f4:	1a8b      	subs	r3, r1, r2
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	dd09      	ble.n	802360e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80235fa:	6878      	ldr	r0, [r7, #4]
 80235fc:	6801      	ldr	r1, [r0, #0]
 80235fe:	9400      	str	r4, [sp, #0]
 8023600:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023604:	4653      	mov	r3, sl
 8023606:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802360a:	4631      	mov	r1, r6
 802360c:	47d8      	blx	fp
 802360e:	3d01      	subs	r5, #1
 8023610:	d1e4      	bne.n	80235dc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8023612:	b007      	add	sp, #28
 8023614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023618 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023618:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802361c:	b90b      	cbnz	r3, 8023622 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802361e:	f001 b974 	b.w	802490a <_ZN8touchgfx7Outline6lineToEii>
 8023622:	4770      	bx	lr

08023624 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023628:	4604      	mov	r4, r0
 802362a:	2600      	movs	r6, #0
 802362c:	4b8e      	ldr	r3, [pc, #568]	; (8023868 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802362e:	f100 0518 	add.w	r5, r0, #24
 8023632:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8023636:	b086      	sub	sp, #24
 8023638:	4690      	mov	r8, r2
 802363a:	e9c0 3100 	strd	r3, r1, [r0]
 802363e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8023642:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8023646:	4628      	mov	r0, r5
 8023648:	f001 fb75 	bl	8024d36 <_ZN8touchgfx15RenderingBufferC1Ev>
 802364c:	4638      	mov	r0, r7
 802364e:	f000 fb45 	bl	8023cdc <_ZN8touchgfx7OutlineC1Ev>
 8023652:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8023656:	f001 fb23 	bl	8024ca0 <_ZN8touchgfx8ScanlineC1Ev>
 802365a:	2301      	movs	r3, #1
 802365c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8023660:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8023664:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023668:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 802366c:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8023670:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8023674:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8023678:	f7f4 fbe6 	bl	8017e48 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802367c:	b928      	cbnz	r0, 802368a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802367e:	4b7b      	ldr	r3, [pc, #492]	; (802386c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8023680:	2118      	movs	r1, #24
 8023682:	4a7b      	ldr	r2, [pc, #492]	; (8023870 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023684:	487b      	ldr	r0, [pc, #492]	; (8023874 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023686:	f001 fb99 	bl	8024dbc <__assert_func>
 802368a:	f9b8 2000 	ldrsh.w	r2, [r8]
 802368e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8023692:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023696:	4410      	add	r0, r2
 8023698:	9602      	str	r6, [sp, #8]
 802369a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802369e:	b280      	uxth	r0, r0
 80236a0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80236a4:	fa0f fa80 	sxth.w	sl, r0
 80236a8:	f1ba 0f00 	cmp.w	sl, #0
 80236ac:	dd70      	ble.n	8023790 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80236ae:	4591      	cmp	r9, r2
 80236b0:	dd6e      	ble.n	8023790 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80236b2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80236b6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80236ba:	440b      	add	r3, r1
 80236bc:	b29b      	uxth	r3, r3
 80236be:	b21e      	sxth	r6, r3
 80236c0:	2e00      	cmp	r6, #0
 80236c2:	dd65      	ble.n	8023790 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80236c4:	458e      	cmp	lr, r1
 80236c6:	dd63      	ble.n	8023790 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80236c8:	45d1      	cmp	r9, sl
 80236ca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80236ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80236d2:	bfb8      	it	lt
 80236d4:	fa1f f089 	uxthlt.w	r0, r9
 80236d8:	45b6      	cmp	lr, r6
 80236da:	f8ad 2008 	strh.w	r2, [sp, #8]
 80236de:	bfb8      	it	lt
 80236e0:	fa1f f38e 	uxthlt.w	r3, lr
 80236e4:	1a80      	subs	r0, r0, r2
 80236e6:	f8ad 100a 	strh.w	r1, [sp, #10]
 80236ea:	1a5b      	subs	r3, r3, r1
 80236ec:	f8ad 000c 	strh.w	r0, [sp, #12]
 80236f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80236f4:	f10d 0808 	add.w	r8, sp, #8
 80236f8:	ae04      	add	r6, sp, #16
 80236fa:	e898 0003 	ldmia.w	r8, {r0, r1}
 80236fe:	e886 0003 	stmia.w	r6, {r0, r1}
 8023702:	f8dc 3000 	ldr.w	r3, [ip]
 8023706:	4660      	mov	r0, ip
 8023708:	4631      	mov	r1, r6
 802370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802370c:	4798      	blx	r3
 802370e:	6861      	ldr	r1, [r4, #4]
 8023710:	4640      	mov	r0, r8
 8023712:	3104      	adds	r1, #4
 8023714:	f7f5 fa06 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023718:	4630      	mov	r0, r6
 802371a:	f7f5 fa1b 	bl	8018b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802371e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8023722:	f7f4 fb21 	bl	8017d68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8023726:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 802372a:	4638      	mov	r0, r7
 802372c:	f000 fab2 	bl	8023c94 <_ZN8touchgfx7Outline5resetEv>
 8023730:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023734:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023738:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 802373c:	015b      	lsls	r3, r3, #5
 802373e:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8023742:	0152      	lsls	r2, r2, #5
 8023744:	60e3      	str	r3, [r4, #12]
 8023746:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802374a:	60a2      	str	r2, [r4, #8]
 802374c:	015b      	lsls	r3, r3, #5
 802374e:	6123      	str	r3, [r4, #16]
 8023750:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8023754:	015b      	lsls	r3, r3, #5
 8023756:	6163      	str	r3, [r4, #20]
 8023758:	4b47      	ldr	r3, [pc, #284]	; (8023878 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802375a:	6818      	ldr	r0, [r3, #0]
 802375c:	6803      	ldr	r3, [r0, #0]
 802375e:	6a1b      	ldr	r3, [r3, #32]
 8023760:	4798      	blx	r3
 8023762:	4606      	mov	r6, r0
 8023764:	f7ec f870 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8023768:	6803      	ldr	r3, [r0, #0]
 802376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802376c:	4798      	blx	r3
 802376e:	4607      	mov	r7, r0
 8023770:	f7ec f86a 	bl	800f848 <_ZN8touchgfx3HAL3lcdEv>
 8023774:	6803      	ldr	r3, [r0, #0]
 8023776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023778:	4798      	blx	r3
 802377a:	280c      	cmp	r0, #12
 802377c:	d854      	bhi.n	8023828 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802377e:	e8df f000 	tbb	[pc, r0]
 8023782:	554b      	.short	0x554b
 8023784:	2b6e0a66 	.word	0x2b6e0a66
 8023788:	5f5f5f3b 	.word	0x5f5f5f3b
 802378c:	5f5f      	.short	0x5f5f
 802378e:	6e          	.byte	0x6e
 802378f:	00          	.byte	0x00
 8023790:	2300      	movs	r3, #0
 8023792:	9303      	str	r3, [sp, #12]
 8023794:	e7ae      	b.n	80236f4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8023796:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802379a:	2108      	movs	r1, #8
 802379c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80237a0:	fb92 f1f1 	sdiv	r1, r2, r1
 80237a4:	fb07 1303 	mla	r3, r7, r3, r1
 80237a8:	441e      	add	r6, r3
 80237aa:	4253      	negs	r3, r2
 80237ac:	f002 0207 	and.w	r2, r2, #7
 80237b0:	f003 0307 	and.w	r3, r3, #7
 80237b4:	bf58      	it	pl
 80237b6:	425a      	negpl	r2, r3
 80237b8:	b2d2      	uxtb	r2, r2
 80237ba:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80237be:	4628      	mov	r0, r5
 80237c0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80237c4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80237c6:	e9cd 1700 	strd	r1, r7, [sp]
 80237ca:	4631      	mov	r1, r6
 80237cc:	f001 fabb 	bl	8024d46 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80237d0:	4620      	mov	r0, r4
 80237d2:	b006      	add	sp, #24
 80237d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80237dc:	2104      	movs	r1, #4
 80237de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80237e2:	fb92 f1f1 	sdiv	r1, r2, r1
 80237e6:	fb07 1303 	mla	r3, r7, r3, r1
 80237ea:	441e      	add	r6, r3
 80237ec:	4253      	negs	r3, r2
 80237ee:	f002 0203 	and.w	r2, r2, #3
 80237f2:	f003 0303 	and.w	r3, r3, #3
 80237f6:	e7dd      	b.n	80237b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80237f8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80237fc:	2102      	movs	r1, #2
 80237fe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023802:	2a00      	cmp	r2, #0
 8023804:	fb92 f1f1 	sdiv	r1, r2, r1
 8023808:	f002 0201 	and.w	r2, r2, #1
 802380c:	fb07 1303 	mla	r3, r7, r3, r1
 8023810:	bfb8      	it	lt
 8023812:	4252      	neglt	r2, r2
 8023814:	441e      	add	r6, r3
 8023816:	e7cf      	b.n	80237b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023818:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802381c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023820:	437b      	muls	r3, r7
 8023822:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023826:	441e      	add	r6, r3
 8023828:	2200      	movs	r2, #0
 802382a:	e7c6      	b.n	80237ba <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802382c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023830:	2103      	movs	r1, #3
 8023832:	fb07 f203 	mul.w	r2, r7, r3
 8023836:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802383a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802383e:	e7f2      	b.n	8023826 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023840:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023844:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023848:	fb07 2303 	mla	r3, r7, r3, r2
 802384c:	e7eb      	b.n	8023826 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802384e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023852:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023856:	437b      	muls	r3, r7
 8023858:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802385c:	e7e3      	b.n	8023826 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802385e:	4b07      	ldr	r3, [pc, #28]	; (802387c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8023860:	2156      	movs	r1, #86	; 0x56
 8023862:	4a03      	ldr	r2, [pc, #12]	; (8023870 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023864:	e70e      	b.n	8023684 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8023866:	bf00      	nop
 8023868:	08029fc8 	.word	0x08029fc8
 802386c:	08029f12 	.word	0x08029f12
 8023870:	08029fd0 	.word	0x08029fd0
 8023874:	08029f6e 	.word	0x08029f6e
 8023878:	2000bd6c 	.word	0x2000bd6c
 802387c:	08029fa2 	.word	0x08029fa2

08023880 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8023880:	6812      	ldr	r2, [r2, #0]
 8023882:	2a00      	cmp	r2, #0
 8023884:	db0b      	blt.n	802389e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8023886:	9800      	ldr	r0, [sp, #0]
 8023888:	6800      	ldr	r0, [r0, #0]
 802388a:	4290      	cmp	r0, r2
 802388c:	bfd4      	ite	le
 802388e:	2002      	movle	r0, #2
 8023890:	2000      	movgt	r0, #0
 8023892:	680a      	ldr	r2, [r1, #0]
 8023894:	2a00      	cmp	r2, #0
 8023896:	da04      	bge.n	80238a2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8023898:	f040 0004 	orr.w	r0, r0, #4
 802389c:	4770      	bx	lr
 802389e:	2001      	movs	r0, #1
 80238a0:	e7f7      	b.n	8023892 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	4293      	cmp	r3, r2
 80238a6:	bfd8      	it	le
 80238a8:	f040 0008 	orrle.w	r0, r0, #8
 80238ac:	4770      	bx	lr
	...

080238b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80238b0:	4b07      	ldr	r3, [pc, #28]	; (80238d0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80238b2:	b510      	push	{r4, lr}
 80238b4:	781b      	ldrb	r3, [r3, #0]
 80238b6:	2b01      	cmp	r3, #1
 80238b8:	d108      	bne.n	80238cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80238ba:	6843      	ldr	r3, [r0, #4]
 80238bc:	6814      	ldr	r4, [r2, #0]
 80238be:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80238c2:	680b      	ldr	r3, [r1, #0]
 80238c4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80238c8:	6013      	str	r3, [r2, #0]
 80238ca:	600c      	str	r4, [r1, #0]
 80238cc:	bd10      	pop	{r4, pc}
 80238ce:	bf00      	nop
 80238d0:	2000bd64 	.word	0x2000bd64

080238d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80238d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238d6:	b085      	sub	sp, #20
 80238d8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80238dc:	4604      	mov	r4, r0
 80238de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80238e2:	b33b      	cbz	r3, 8023934 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80238e4:	aa02      	add	r2, sp, #8
 80238e6:	a903      	add	r1, sp, #12
 80238e8:	f7ff ffe2 	bl	80238b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80238ec:	68a3      	ldr	r3, [r4, #8]
 80238ee:	9e03      	ldr	r6, [sp, #12]
 80238f0:	aa02      	add	r2, sp, #8
 80238f2:	9f02      	ldr	r7, [sp, #8]
 80238f4:	a903      	add	r1, sp, #12
 80238f6:	1af6      	subs	r6, r6, r3
 80238f8:	68e3      	ldr	r3, [r4, #12]
 80238fa:	4620      	mov	r0, r4
 80238fc:	1aff      	subs	r7, r7, r3
 80238fe:	f104 0314 	add.w	r3, r4, #20
 8023902:	9603      	str	r6, [sp, #12]
 8023904:	9300      	str	r3, [sp, #0]
 8023906:	f104 0310 	add.w	r3, r4, #16
 802390a:	9702      	str	r7, [sp, #8]
 802390c:	f7ff ffb8 	bl	8023880 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023910:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8023914:	4605      	mov	r5, r0
 8023916:	b97b      	cbnz	r3, 8023938 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023918:	463a      	mov	r2, r7
 802391a:	4631      	mov	r1, r6
 802391c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023920:	f7ff fe7a 	bl	8023618 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023924:	9b03      	ldr	r3, [sp, #12]
 8023926:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 802392a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802392e:	9b02      	ldr	r3, [sp, #8]
 8023930:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8023934:	b005      	add	sp, #20
 8023936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023938:	b110      	cbz	r0, 8023940 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802393a:	ea13 0200 	ands.w	r2, r3, r0
 802393e:	d11c      	bne.n	802397a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023940:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8023944:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8023948:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802394c:	b188      	cbz	r0, 8023972 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802394e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8023952:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023956:	b913      	cbnz	r3, 802395e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8023958:	4630      	mov	r0, r6
 802395a:	f001 f806 	bl	802496a <_ZN8touchgfx7Outline6moveToEii>
 802395e:	2300      	movs	r3, #0
 8023960:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023964:	2301      	movs	r3, #1
 8023966:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802396a:	4630      	mov	r0, r6
 802396c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023970:	e7d6      	b.n	8023920 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8023972:	4630      	mov	r0, r6
 8023974:	f7ff fe50 	bl	8023618 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023978:	e7f7      	b.n	802396a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802397a:	4615      	mov	r5, r2
 802397c:	e7d2      	b.n	8023924 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802397e <_ZN8touchgfx6Canvas5closeEv>:
 802397e:	b538      	push	{r3, r4, r5, lr}
 8023980:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8023984:	4604      	mov	r4, r0
 8023986:	b993      	cbnz	r3, 80239ae <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023988:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 802398c:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8023990:	4213      	tst	r3, r2
 8023992:	d10c      	bne.n	80239ae <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023994:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8023998:	b123      	cbz	r3, 80239a4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802399a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 802399e:	4628      	mov	r0, r5
 80239a0:	f7ff fe3a 	bl	8023618 <_ZN8touchgfx10Rasterizer6lineToEii>
 80239a4:	4628      	mov	r0, r5
 80239a6:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80239aa:	f7ff fe35 	bl	8023618 <_ZN8touchgfx10Rasterizer6lineToEii>
 80239ae:	2300      	movs	r3, #0
 80239b0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80239b4:	bd38      	pop	{r3, r4, r5, pc}

080239b6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80239b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239b8:	b085      	sub	sp, #20
 80239ba:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80239be:	4604      	mov	r4, r0
 80239c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80239c4:	b353      	cbz	r3, 8023a1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80239c6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80239ca:	b90b      	cbnz	r3, 80239d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80239cc:	f7ff ffd7 	bl	802397e <_ZN8touchgfx6Canvas5closeEv>
 80239d0:	aa02      	add	r2, sp, #8
 80239d2:	a903      	add	r1, sp, #12
 80239d4:	4620      	mov	r0, r4
 80239d6:	f7ff ff6b 	bl	80238b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80239da:	68a3      	ldr	r3, [r4, #8]
 80239dc:	9d03      	ldr	r5, [sp, #12]
 80239de:	aa02      	add	r2, sp, #8
 80239e0:	9e02      	ldr	r6, [sp, #8]
 80239e2:	a903      	add	r1, sp, #12
 80239e4:	1aed      	subs	r5, r5, r3
 80239e6:	68e3      	ldr	r3, [r4, #12]
 80239e8:	4620      	mov	r0, r4
 80239ea:	1af6      	subs	r6, r6, r3
 80239ec:	f104 0314 	add.w	r3, r4, #20
 80239f0:	9503      	str	r5, [sp, #12]
 80239f2:	9300      	str	r3, [sp, #0]
 80239f4:	f104 0310 	add.w	r3, r4, #16
 80239f8:	9602      	str	r6, [sp, #8]
 80239fa:	f7ff ff41 	bl	8023880 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80239fe:	4607      	mov	r7, r0
 8023a00:	b170      	cbz	r0, 8023a20 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8023a02:	2301      	movs	r3, #1
 8023a04:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023a08:	9a03      	ldr	r2, [sp, #12]
 8023a0a:	9b02      	ldr	r3, [sp, #8]
 8023a0c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8023a10:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8023a14:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8023a18:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8023a1c:	b005      	add	sp, #20
 8023a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a20:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023a24:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8023a28:	b92b      	cbnz	r3, 8023a36 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8023a2a:	4632      	mov	r2, r6
 8023a2c:	4629      	mov	r1, r5
 8023a2e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023a32:	f000 ff9a 	bl	802496a <_ZN8touchgfx7Outline6moveToEii>
 8023a36:	2300      	movs	r3, #0
 8023a38:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023a3c:	2301      	movs	r3, #1
 8023a3e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023a42:	e7e1      	b.n	8023a08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08023a44 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8023a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a48:	4604      	mov	r4, r0
 8023a4a:	b087      	sub	sp, #28
 8023a4c:	9105      	str	r1, [sp, #20]
 8023a4e:	f001 f8d0 	bl	8024bf2 <_ZN8touchgfx7Outline8getCellsEv>
 8023a52:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8023a56:	4605      	mov	r5, r0
 8023a58:	f1b9 0f00 	cmp.w	r9, #0
 8023a5c:	d103      	bne.n	8023a66 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8023a5e:	2001      	movs	r0, #1
 8023a60:	b007      	add	sp, #28
 8023a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a66:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8023a6a:	2e00      	cmp	r6, #0
 8023a6c:	d139      	bne.n	8023ae2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8023a6e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8023a72:	f105 0708 	add.w	r7, r5, #8
 8023a76:	4640      	mov	r0, r8
 8023a78:	f001 f8fd 	bl	8024c76 <_ZN8touchgfx8Scanline5resetEv>
 8023a7c:	f109 33ff 	add.w	r3, r9, #4294967295
 8023a80:	9303      	str	r3, [sp, #12]
 8023a82:	f9b5 b000 	ldrsh.w	fp, [r5]
 8023a86:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8023a8a:	46da      	mov	sl, fp
 8023a8c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8023a90:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8023a94:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8023a98:	9b03      	ldr	r3, [sp, #12]
 8023a9a:	4416      	add	r6, r2
 8023a9c:	9504      	str	r5, [sp, #16]
 8023a9e:	463d      	mov	r5, r7
 8023aa0:	3b01      	subs	r3, #1
 8023aa2:	9303      	str	r3, [sp, #12]
 8023aa4:	3301      	adds	r3, #1
 8023aa6:	d01e      	beq.n	8023ae6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8023aa8:	3708      	adds	r7, #8
 8023aaa:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8023aae:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8023ab2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023ab6:	4290      	cmp	r0, r2
 8023ab8:	d11e      	bne.n	8023af8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8023aba:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8023abe:	4411      	add	r1, r2
 8023ac0:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023ac4:	e7e8      	b.n	8023a98 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023ac6:	1c91      	adds	r1, r2, #2
 8023ac8:	f04f 0301 	mov.w	r3, #1
 8023acc:	65e1      	str	r1, [r4, #92]	; 0x5c
 8023ace:	8053      	strh	r3, [r2, #2]
 8023ad0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023ad2:	1c91      	adds	r1, r2, #2
 8023ad4:	65a1      	str	r1, [r4, #88]	; 0x58
 8023ad6:	f8a2 b002 	strh.w	fp, [r2, #2]
 8023ada:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023adc:	3201      	adds	r2, #1
 8023ade:	6562      	str	r2, [r4, #84]	; 0x54
 8023ae0:	e03a      	b.n	8023b58 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023ae2:	2000      	movs	r0, #0
 8023ae4:	e7bc      	b.n	8023a60 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023ae6:	b951      	cbnz	r1, 8023afe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	d0b7      	beq.n	8023a5e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023aee:	4641      	mov	r1, r8
 8023af0:	9805      	ldr	r0, [sp, #20]
 8023af2:	f7ff fd5b 	bl	80235ac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023af6:	e7b2      	b.n	8023a5e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023af8:	2900      	cmp	r1, #0
 8023afa:	d035      	beq.n	8023b68 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023afc:	9504      	str	r5, [sp, #16]
 8023afe:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8023b02:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023b06:	f7ff fd3d 	bl	8023584 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023b0a:	4605      	mov	r5, r0
 8023b0c:	b330      	cbz	r0, 8023b5c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023b0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023b10:	b182      	cbz	r2, 8023b34 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023b12:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023b14:	454a      	cmp	r2, r9
 8023b16:	d00d      	beq.n	8023b34 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023b18:	4641      	mov	r1, r8
 8023b1a:	9805      	ldr	r0, [sp, #20]
 8023b1c:	f7ff fd46 	bl	80235ac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023b20:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023b24:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8023b26:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023b2a:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023b2c:	2300      	movs	r3, #0
 8023b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023b30:	6563      	str	r3, [r4, #84]	; 0x54
 8023b32:	65a2      	str	r2, [r4, #88]	; 0x58
 8023b34:	f1bb 0f00 	cmp.w	fp, #0
 8023b38:	db10      	blt.n	8023b5c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023b3a:	f7f4 f993 	bl	8017e64 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023b3e:	4583      	cmp	fp, r0
 8023b40:	d20c      	bcs.n	8023b5c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8023b42:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023b44:	f802 500b 	strb.w	r5, [r2, fp]
 8023b48:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8023b4a:	3201      	adds	r2, #1
 8023b4c:	455a      	cmp	r2, fp
 8023b4e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8023b50:	d1b9      	bne.n	8023ac6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8023b52:	8811      	ldrh	r1, [r2, #0]
 8023b54:	3101      	adds	r1, #1
 8023b56:	8011      	strh	r1, [r2, #0]
 8023b58:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8023b5c:	9b03      	ldr	r3, [sp, #12]
 8023b5e:	3301      	adds	r3, #1
 8023b60:	d0c2      	beq.n	8023ae8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8023b62:	f10b 0a01 	add.w	sl, fp, #1
 8023b66:	9d04      	ldr	r5, [sp, #16]
 8023b68:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023b6c:	4553      	cmp	r3, sl
 8023b6e:	dd88      	ble.n	8023a82 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023b70:	01b1      	lsls	r1, r6, #6
 8023b72:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023b76:	f7ff fd05 	bl	8023584 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023b7a:	4683      	mov	fp, r0
 8023b7c:	2800      	cmp	r0, #0
 8023b7e:	d080      	beq.n	8023a82 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023b80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023b82:	b183      	cbz	r3, 8023ba6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023b84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023b86:	454b      	cmp	r3, r9
 8023b88:	d00d      	beq.n	8023ba6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023b8a:	4641      	mov	r1, r8
 8023b8c:	9805      	ldr	r0, [sp, #20]
 8023b8e:	f7ff fd0d 	bl	80235ac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023b92:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023b96:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023b9a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023b9c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ba0:	65a3      	str	r3, [r4, #88]	; 0x58
 8023ba2:	2300      	movs	r3, #0
 8023ba4:	6563      	str	r3, [r4, #84]	; 0x54
 8023ba6:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023baa:	464a      	mov	r2, r9
 8023bac:	f8cd b000 	str.w	fp, [sp]
 8023bb0:	4651      	mov	r1, sl
 8023bb2:	eba3 030a 	sub.w	r3, r3, sl
 8023bb6:	4640      	mov	r0, r8
 8023bb8:	f001 f884 	bl	8024cc4 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023bbc:	e761      	b.n	8023a82 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023bbe <_ZN8touchgfx6Canvas6renderEv>:
 8023bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023bc0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023bc4:	4604      	mov	r4, r0
 8023bc6:	b913      	cbnz	r3, 8023bce <_ZN8touchgfx6Canvas6renderEv+0x10>
 8023bc8:	2001      	movs	r0, #1
 8023bca:	b003      	add	sp, #12
 8023bcc:	bd30      	pop	{r4, r5, pc}
 8023bce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	d131      	bne.n	8023c3a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8023bd6:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	d0f4      	beq.n	8023bc8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023bde:	6840      	ldr	r0, [r0, #4]
 8023be0:	6803      	ldr	r3, [r0, #0]
 8023be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023be4:	4798      	blx	r3
 8023be6:	2800      	cmp	r0, #0
 8023be8:	d0ee      	beq.n	8023bc8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023bea:	4620      	mov	r0, r4
 8023bec:	f7ff fec7 	bl	802397e <_ZN8touchgfx6Canvas5closeEv>
 8023bf0:	6860      	ldr	r0, [r4, #4]
 8023bf2:	6803      	ldr	r3, [r0, #0]
 8023bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023bf6:	4798      	blx	r3
 8023bf8:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8023bfc:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8023c00:	f7f3 f8c9 	bl	8016d96 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023c04:	6860      	ldr	r0, [r4, #4]
 8023c06:	6803      	ldr	r3, [r0, #0]
 8023c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023c0a:	4798      	blx	r3
 8023c0c:	4605      	mov	r5, r0
 8023c0e:	6860      	ldr	r0, [r4, #4]
 8023c10:	6803      	ldr	r3, [r0, #0]
 8023c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023c14:	4798      	blx	r3
 8023c16:	4601      	mov	r1, r0
 8023c18:	4628      	mov	r0, r5
 8023c1a:	f7f3 f8bf 	bl	8016d9c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8023c1e:	6860      	ldr	r0, [r4, #4]
 8023c20:	6803      	ldr	r3, [r0, #0]
 8023c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023c24:	4798      	blx	r3
 8023c26:	f104 0318 	add.w	r3, r4, #24
 8023c2a:	4669      	mov	r1, sp
 8023c2c:	e9cd 3000 	strd	r3, r0, [sp]
 8023c30:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023c34:	f7ff ff06 	bl	8023a44 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023c38:	e7c7      	b.n	8023bca <_ZN8touchgfx6Canvas6renderEv+0xc>
 8023c3a:	2000      	movs	r0, #0
 8023c3c:	e7c5      	b.n	8023bca <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023c40 <_ZN8touchgfx6CanvasD1Ev>:
 8023c40:	b538      	push	{r3, r4, r5, lr}
 8023c42:	4605      	mov	r5, r0
 8023c44:	4b08      	ldr	r3, [pc, #32]	; (8023c68 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023c46:	4604      	mov	r4, r0
 8023c48:	f845 3b2c 	str.w	r3, [r5], #44
 8023c4c:	4b07      	ldr	r3, [pc, #28]	; (8023c6c <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023c4e:	6818      	ldr	r0, [r3, #0]
 8023c50:	6803      	ldr	r3, [r0, #0]
 8023c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c54:	4798      	blx	r3
 8023c56:	4628      	mov	r0, r5
 8023c58:	f000 f814 	bl	8023c84 <_ZN8touchgfx7OutlineD1Ev>
 8023c5c:	f104 0018 	add.w	r0, r4, #24
 8023c60:	f001 f870 	bl	8024d44 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023c64:	4620      	mov	r0, r4
 8023c66:	bd38      	pop	{r3, r4, r5, pc}
 8023c68:	08029fc8 	.word	0x08029fc8
 8023c6c:	2000bd6c 	.word	0x2000bd6c

08023c70 <_ZN8touchgfx6CanvasD0Ev>:
 8023c70:	b510      	push	{r4, lr}
 8023c72:	4604      	mov	r4, r0
 8023c74:	f7ff ffe4 	bl	8023c40 <_ZN8touchgfx6CanvasD1Ev>
 8023c78:	21b8      	movs	r1, #184	; 0xb8
 8023c7a:	4620      	mov	r0, r4
 8023c7c:	f001 f873 	bl	8024d66 <_ZdlPvj>
 8023c80:	4620      	mov	r0, r4
 8023c82:	bd10      	pop	{r4, pc}

08023c84 <_ZN8touchgfx7OutlineD1Ev>:
 8023c84:	4770      	bx	lr

08023c86 <_ZN8touchgfx7OutlineD0Ev>:
 8023c86:	b510      	push	{r4, lr}
 8023c88:	4604      	mov	r4, r0
 8023c8a:	2148      	movs	r1, #72	; 0x48
 8023c8c:	f001 f86b 	bl	8024d66 <_ZdlPvj>
 8023c90:	4620      	mov	r0, r4
 8023c92:	bd10      	pop	{r4, pc}

08023c94 <_ZN8touchgfx7Outline5resetEv>:
 8023c94:	b510      	push	{r4, lr}
 8023c96:	4604      	mov	r4, r0
 8023c98:	f7f4 f8fc 	bl	8017e94 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023c9c:	60e0      	str	r0, [r4, #12]
 8023c9e:	f7f4 f8ff 	bl	8017ea0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8023ca2:	68e3      	ldr	r3, [r4, #12]
 8023ca4:	2200      	movs	r2, #0
 8023ca6:	08c0      	lsrs	r0, r0, #3
 8023ca8:	6123      	str	r3, [r4, #16]
 8023caa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023cae:	6060      	str	r0, [r4, #4]
 8023cb0:	82a3      	strh	r3, [r4, #20]
 8023cb2:	82e3      	strh	r3, [r4, #22]
 8023cb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023cb6:	60a2      	str	r2, [r4, #8]
 8023cb8:	f023 0301 	bic.w	r3, r3, #1
 8023cbc:	8322      	strh	r2, [r4, #24]
 8023cbe:	8362      	strh	r2, [r4, #26]
 8023cc0:	f043 0302 	orr.w	r3, r3, #2
 8023cc4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023cc8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023cca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023cce:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023cd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023cd6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023cda:	bd10      	pop	{r4, pc}

08023cdc <_ZN8touchgfx7OutlineC1Ev>:
 8023cdc:	4b0f      	ldr	r3, [pc, #60]	; (8023d1c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023cde:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023ce2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023ce6:	b510      	push	{r4, lr}
 8023ce8:	6003      	str	r3, [r0, #0]
 8023cea:	2300      	movs	r3, #0
 8023cec:	4604      	mov	r4, r0
 8023cee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023cf2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023cf6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023cfa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023cfe:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023d02:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023d06:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023d0a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023d0e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023d12:	f7ff ffbf 	bl	8023c94 <_ZN8touchgfx7Outline5resetEv>
 8023d16:	4620      	mov	r0, r4
 8023d18:	bd10      	pop	{r4, pc}
 8023d1a:	bf00      	nop
 8023d1c:	0802a028 	.word	0x0802a028

08023d20 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d24:	b093      	sub	sp, #76	; 0x4c
 8023d26:	4604      	mov	r4, r0
 8023d28:	1156      	asrs	r6, r2, #5
 8023d2a:	f002 0e1f 	and.w	lr, r2, #31
 8023d2e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023d30:	9305      	str	r3, [sp, #20]
 8023d32:	1143      	asrs	r3, r0, #5
 8023d34:	1145      	asrs	r5, r0, #5
 8023d36:	930c      	str	r3, [sp, #48]	; 0x30
 8023d38:	f000 031f 	and.w	r3, r0, #31
 8023d3c:	9303      	str	r3, [sp, #12]
 8023d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023d40:	42b3      	cmp	r3, r6
 8023d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023d44:	bfc8      	it	gt
 8023d46:	6326      	strgt	r6, [r4, #48]	; 0x30
 8023d48:	42b3      	cmp	r3, r6
 8023d4a:	bfdc      	itt	le
 8023d4c:	1c73      	addle	r3, r6, #1
 8023d4e:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023d50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023d52:	42ab      	cmp	r3, r5
 8023d54:	bfc8      	it	gt
 8023d56:	462b      	movgt	r3, r5
 8023d58:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023d5c:	bfc8      	it	gt
 8023d5e:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023d60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023d62:	42ab      	cmp	r3, r5
 8023d64:	bfd8      	it	le
 8023d66:	462b      	movle	r3, r5
 8023d68:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023d6c:	bfdc      	itt	le
 8023d6e:	3301      	addle	r3, #1
 8023d70:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023d72:	9b05      	ldr	r3, [sp, #20]
 8023d74:	eba3 0a01 	sub.w	sl, r3, r1
 8023d78:	1143      	asrs	r3, r0, #5
 8023d7a:	429e      	cmp	r6, r3
 8023d7c:	f040 8119 	bne.w	8023fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8023d80:	9b05      	ldr	r3, [sp, #20]
 8023d82:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023d86:	9b03      	ldr	r3, [sp, #12]
 8023d88:	459e      	cmp	lr, r3
 8023d8a:	d12c      	bne.n	8023de6 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8023d8c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023d90:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8023d94:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023d98:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023d9c:	4291      	cmp	r1, r2
 8023d9e:	d037      	beq.n	8023e10 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023da0:	8b61      	ldrh	r1, [r4, #26]
 8023da2:	8b22      	ldrh	r2, [r4, #24]
 8023da4:	430a      	orrs	r2, r1
 8023da6:	d00b      	beq.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	db09      	blt.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023dac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023dae:	429a      	cmp	r2, r3
 8023db0:	dd06      	ble.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023db2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023db6:	429a      	cmp	r2, r3
 8023db8:	d308      	bcc.n	8023dcc <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8023dba:	2301      	movs	r3, #1
 8023dbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023dc0:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023dc4:	82e6      	strh	r6, [r4, #22]
 8023dc6:	2300      	movs	r3, #0
 8023dc8:	8323      	strh	r3, [r4, #24]
 8023dca:	e0c6      	b.n	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023dcc:	f104 0314 	add.w	r3, r4, #20
 8023dd0:	6922      	ldr	r2, [r4, #16]
 8023dd2:	cb03      	ldmia	r3!, {r0, r1}
 8023dd4:	6010      	str	r0, [r2, #0]
 8023dd6:	6051      	str	r1, [r2, #4]
 8023dd8:	6923      	ldr	r3, [r4, #16]
 8023dda:	3308      	adds	r3, #8
 8023ddc:	6123      	str	r3, [r4, #16]
 8023dde:	68a3      	ldr	r3, [r4, #8]
 8023de0:	3301      	adds	r3, #1
 8023de2:	60a3      	str	r3, [r4, #8]
 8023de4:	e7ec      	b.n	8023dc0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023de6:	9b05      	ldr	r3, [sp, #20]
 8023de8:	45ac      	cmp	ip, r5
 8023dea:	f001 011f 	and.w	r1, r1, #31
 8023dee:	8b20      	ldrh	r0, [r4, #24]
 8023df0:	f003 031f 	and.w	r3, r3, #31
 8023df4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023df8:	9304      	str	r3, [sp, #16]
 8023dfa:	9b03      	ldr	r3, [sp, #12]
 8023dfc:	eba3 020e 	sub.w	r2, r3, lr
 8023e00:	d109      	bne.n	8023e16 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023e02:	9b04      	ldr	r3, [sp, #16]
 8023e04:	4410      	add	r0, r2
 8023e06:	4419      	add	r1, r3
 8023e08:	8320      	strh	r0, [r4, #24]
 8023e0a:	fb02 8201 	mla	r2, r2, r1, r8
 8023e0e:	8362      	strh	r2, [r4, #26]
 8023e10:	b013      	add	sp, #76	; 0x4c
 8023e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e16:	f1ba 0f00 	cmp.w	sl, #0
 8023e1a:	f2c0 80a0 	blt.w	8023f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8023e1e:	f1c1 0320 	rsb	r3, r1, #32
 8023e22:	f04f 0b20 	mov.w	fp, #32
 8023e26:	435a      	muls	r2, r3
 8023e28:	2301      	movs	r3, #1
 8023e2a:	9302      	str	r3, [sp, #8]
 8023e2c:	4459      	add	r1, fp
 8023e2e:	fb92 f7fa 	sdiv	r7, r2, sl
 8023e32:	fb0a 2217 	mls	r2, sl, r7, r2
 8023e36:	2a00      	cmp	r2, #0
 8023e38:	bfbc      	itt	lt
 8023e3a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023e3e:	4452      	addlt	r2, sl
 8023e40:	fb07 8101 	mla	r1, r7, r1, r8
 8023e44:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023e48:	4438      	add	r0, r7
 8023e4a:	b20b      	sxth	r3, r1
 8023e4c:	9902      	ldr	r1, [sp, #8]
 8023e4e:	b200      	sxth	r0, r0
 8023e50:	9301      	str	r3, [sp, #4]
 8023e52:	8363      	strh	r3, [r4, #26]
 8023e54:	186b      	adds	r3, r5, r1
 8023e56:	0435      	lsls	r5, r6, #16
 8023e58:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023e5c:	8320      	strh	r0, [r4, #24]
 8023e5e:	eb03 0905 	add.w	r9, r3, r5
 8023e62:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8023e66:	9300      	str	r3, [sp, #0]
 8023e68:	45c1      	cmp	r9, r8
 8023e6a:	9505      	str	r5, [sp, #20]
 8023e6c:	d014      	beq.n	8023e98 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8023e6e:	9b01      	ldr	r3, [sp, #4]
 8023e70:	4303      	orrs	r3, r0
 8023e72:	d00b      	beq.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023e74:	2900      	cmp	r1, #0
 8023e76:	db09      	blt.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023e7a:	428b      	cmp	r3, r1
 8023e7c:	dd06      	ble.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023e7e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023e82:	4299      	cmp	r1, r3
 8023e84:	d374      	bcc.n	8023f70 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8023e86:	2301      	movs	r3, #1
 8023e88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023e8c:	9b00      	ldr	r3, [sp, #0]
 8023e8e:	82e6      	strh	r6, [r4, #22]
 8023e90:	82a3      	strh	r3, [r4, #20]
 8023e92:	2300      	movs	r3, #0
 8023e94:	8323      	strh	r3, [r4, #24]
 8023e96:	8363      	strh	r3, [r4, #26]
 8023e98:	9900      	ldr	r1, [sp, #0]
 8023e9a:	eb0e 0307 	add.w	r3, lr, r7
 8023e9e:	458c      	cmp	ip, r1
 8023ea0:	d04e      	beq.n	8023f40 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8023ea2:	9903      	ldr	r1, [sp, #12]
 8023ea4:	eba2 020a 	sub.w	r2, r2, sl
 8023ea8:	1ac9      	subs	r1, r1, r3
 8023eaa:	9201      	str	r2, [sp, #4]
 8023eac:	440f      	add	r7, r1
 8023eae:	017f      	lsls	r7, r7, #5
 8023eb0:	fb97 fefa 	sdiv	lr, r7, sl
 8023eb4:	fb0a 771e 	mls	r7, sl, lr, r7
 8023eb8:	2f00      	cmp	r7, #0
 8023eba:	bfbc      	itt	lt
 8023ebc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023ec0:	4457      	addlt	r7, sl
 8023ec2:	f10e 0101 	add.w	r1, lr, #1
 8023ec6:	9106      	str	r1, [sp, #24]
 8023ec8:	9a01      	ldr	r2, [sp, #4]
 8023eca:	8b20      	ldrh	r0, [r4, #24]
 8023ecc:	19d2      	adds	r2, r2, r7
 8023ece:	8b61      	ldrh	r1, [r4, #26]
 8023ed0:	9d02      	ldr	r5, [sp, #8]
 8023ed2:	9201      	str	r2, [sp, #4]
 8023ed4:	bf5b      	ittet	pl
 8023ed6:	eba2 020a 	subpl.w	r2, r2, sl
 8023eda:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8023ede:	46f0      	movmi	r8, lr
 8023ee0:	9201      	strpl	r2, [sp, #4]
 8023ee2:	9a00      	ldr	r2, [sp, #0]
 8023ee4:	4440      	add	r0, r8
 8023ee6:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023eea:	4443      	add	r3, r8
 8023eec:	442a      	add	r2, r5
 8023eee:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023ef2:	9d05      	ldr	r5, [sp, #20]
 8023ef4:	b200      	sxth	r0, r0
 8023ef6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023efa:	b209      	sxth	r1, r1
 8023efc:	4415      	add	r5, r2
 8023efe:	8320      	strh	r0, [r4, #24]
 8023f00:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023f04:	8361      	strh	r1, [r4, #26]
 8023f06:	9200      	str	r2, [sp, #0]
 8023f08:	454d      	cmp	r5, r9
 8023f0a:	d016      	beq.n	8023f3a <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8023f0c:	4301      	orrs	r1, r0
 8023f0e:	d00d      	beq.n	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023f10:	f1b8 0f00 	cmp.w	r8, #0
 8023f14:	db0a      	blt.n	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023f16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023f18:	4541      	cmp	r1, r8
 8023f1a:	dd07      	ble.n	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023f1c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023f20:	4288      	cmp	r0, r1
 8023f22:	d335      	bcc.n	8023f90 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023f24:	f04f 0101 	mov.w	r1, #1
 8023f28:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023f2c:	9900      	ldr	r1, [sp, #0]
 8023f2e:	82e6      	strh	r6, [r4, #22]
 8023f30:	82a1      	strh	r1, [r4, #20]
 8023f32:	f04f 0100 	mov.w	r1, #0
 8023f36:	8321      	strh	r1, [r4, #24]
 8023f38:	8361      	strh	r1, [r4, #26]
 8023f3a:	9a00      	ldr	r2, [sp, #0]
 8023f3c:	4594      	cmp	ip, r2
 8023f3e:	d1c3      	bne.n	8023ec8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8023f40:	9a03      	ldr	r2, [sp, #12]
 8023f42:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8023f46:	1ad3      	subs	r3, r2, r3
 8023f48:	8b22      	ldrh	r2, [r4, #24]
 8023f4a:	441a      	add	r2, r3
 8023f4c:	8322      	strh	r2, [r4, #24]
 8023f4e:	9a04      	ldr	r2, [sp, #16]
 8023f50:	3220      	adds	r2, #32
 8023f52:	eba2 020b 	sub.w	r2, r2, fp
 8023f56:	fb03 c302 	mla	r3, r3, r2, ip
 8023f5a:	8363      	strh	r3, [r4, #26]
 8023f5c:	e758      	b.n	8023e10 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8023f62:	434a      	muls	r2, r1
 8023f64:	f1ca 0a00 	rsb	sl, sl, #0
 8023f68:	f04f 0b00 	mov.w	fp, #0
 8023f6c:	9302      	str	r3, [sp, #8]
 8023f6e:	e75d      	b.n	8023e2c <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8023f70:	f104 0314 	add.w	r3, r4, #20
 8023f74:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023f78:	cb03      	ldmia	r3!, {r0, r1}
 8023f7a:	f8c8 0000 	str.w	r0, [r8]
 8023f7e:	f8c8 1004 	str.w	r1, [r8, #4]
 8023f82:	6923      	ldr	r3, [r4, #16]
 8023f84:	3308      	adds	r3, #8
 8023f86:	6123      	str	r3, [r4, #16]
 8023f88:	68a3      	ldr	r3, [r4, #8]
 8023f8a:	3301      	adds	r3, #1
 8023f8c:	60a3      	str	r3, [r4, #8]
 8023f8e:	e77d      	b.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023f90:	f104 0814 	add.w	r8, r4, #20
 8023f94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023f98:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023f9c:	f8c9 0000 	str.w	r0, [r9]
 8023fa0:	f8c9 1004 	str.w	r1, [r9, #4]
 8023fa4:	6921      	ldr	r1, [r4, #16]
 8023fa6:	3108      	adds	r1, #8
 8023fa8:	6121      	str	r1, [r4, #16]
 8023faa:	68a1      	ldr	r1, [r4, #8]
 8023fac:	3101      	adds	r1, #1
 8023fae:	60a1      	str	r1, [r4, #8]
 8023fb0:	e7bc      	b.n	8023f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023fb2:	1a83      	subs	r3, r0, r2
 8023fb4:	9301      	str	r3, [sp, #4]
 8023fb6:	f1ba 0f00 	cmp.w	sl, #0
 8023fba:	f040 8094 	bne.w	80240e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8023fbe:	9a01      	ldr	r2, [sp, #4]
 8023fc0:	0049      	lsls	r1, r1, #1
 8023fc2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023fc6:	2a00      	cmp	r2, #0
 8023fc8:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023fcc:	8b62      	ldrh	r2, [r4, #26]
 8023fce:	bfaa      	itet	ge
 8023fd0:	f04f 0a20 	movge.w	sl, #32
 8023fd4:	f04f 38ff 	movlt.w	r8, #4294967295
 8023fd8:	f04f 0801 	movge.w	r8, #1
 8023fdc:	8b21      	ldrh	r1, [r4, #24]
 8023fde:	ebaa 0e0e 	sub.w	lr, sl, lr
 8023fe2:	4471      	add	r1, lr
 8023fe4:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023fe8:	eb08 0206 	add.w	r2, r8, r6
 8023fec:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8023ff0:	b209      	sxth	r1, r1
 8023ff2:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8023ff6:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8023ffa:	8321      	strh	r1, [r4, #24]
 8023ffc:	fa0f fe8e 	sxth.w	lr, lr
 8024000:	42b7      	cmp	r7, r6
 8024002:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024006:	d013      	beq.n	8024030 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024008:	ea51 010e 	orrs.w	r1, r1, lr
 802400c:	d00b      	beq.n	8024026 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802400e:	2800      	cmp	r0, #0
 8024010:	db09      	blt.n	8024026 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024012:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024014:	4281      	cmp	r1, r0
 8024016:	dd06      	ble.n	8024026 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024018:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802401c:	4288      	cmp	r0, r1
 802401e:	d339      	bcc.n	8024094 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024020:	2101      	movs	r1, #1
 8024022:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024026:	2100      	movs	r1, #0
 8024028:	82a5      	strh	r5, [r4, #20]
 802402a:	82e2      	strh	r2, [r4, #22]
 802402c:	8321      	strh	r1, [r4, #24]
 802402e:	8361      	strh	r1, [r4, #26]
 8024030:	f1aa 0610 	sub.w	r6, sl, #16
 8024034:	f04f 0e00 	mov.w	lr, #0
 8024038:	f04f 0b01 	mov.w	fp, #1
 802403c:	0076      	lsls	r6, r6, #1
 802403e:	fb06 f703 	mul.w	r7, r6, r3
 8024042:	b236      	sxth	r6, r6
 8024044:	b23f      	sxth	r7, r7
 8024046:	ea46 0107 	orr.w	r1, r6, r7
 802404a:	9100      	str	r1, [sp, #0]
 802404c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802404e:	428a      	cmp	r2, r1
 8024050:	d03e      	beq.n	80240d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8024052:	4442      	add	r2, r8
 8024054:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024058:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802405c:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024060:	8326      	strh	r6, [r4, #24]
 8024062:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024066:	8367      	strh	r7, [r4, #26]
 8024068:	4584      	cmp	ip, r0
 802406a:	d0ef      	beq.n	802404c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 802406c:	9800      	ldr	r0, [sp, #0]
 802406e:	b150      	cbz	r0, 8024086 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024070:	2900      	cmp	r1, #0
 8024072:	db08      	blt.n	8024086 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024074:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024076:	4288      	cmp	r0, r1
 8024078:	dd05      	ble.n	8024086 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802407a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802407e:	4288      	cmp	r0, r1
 8024080:	d315      	bcc.n	80240ae <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024082:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8024086:	82a5      	strh	r5, [r4, #20]
 8024088:	82e2      	strh	r2, [r4, #22]
 802408a:	f8a4 e018 	strh.w	lr, [r4, #24]
 802408e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024092:	e7db      	b.n	802404c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024094:	f104 0614 	add.w	r6, r4, #20
 8024098:	6927      	ldr	r7, [r4, #16]
 802409a:	ce03      	ldmia	r6!, {r0, r1}
 802409c:	6038      	str	r0, [r7, #0]
 802409e:	6079      	str	r1, [r7, #4]
 80240a0:	6921      	ldr	r1, [r4, #16]
 80240a2:	3108      	adds	r1, #8
 80240a4:	6121      	str	r1, [r4, #16]
 80240a6:	68a1      	ldr	r1, [r4, #8]
 80240a8:	3101      	adds	r1, #1
 80240aa:	60a1      	str	r1, [r4, #8]
 80240ac:	e7bb      	b.n	8024026 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80240ae:	f104 0c14 	add.w	ip, r4, #20
 80240b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80240b6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80240ba:	f8c9 0000 	str.w	r0, [r9]
 80240be:	f8c9 1004 	str.w	r1, [r9, #4]
 80240c2:	6921      	ldr	r1, [r4, #16]
 80240c4:	3108      	adds	r1, #8
 80240c6:	6121      	str	r1, [r4, #16]
 80240c8:	68a1      	ldr	r1, [r4, #8]
 80240ca:	3101      	adds	r1, #1
 80240cc:	60a1      	str	r1, [r4, #8]
 80240ce:	e7da      	b.n	8024086 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80240d0:	9a03      	ldr	r2, [sp, #12]
 80240d2:	8b61      	ldrh	r1, [r4, #26]
 80240d4:	f1a2 0c20 	sub.w	ip, r2, #32
 80240d8:	8b22      	ldrh	r2, [r4, #24]
 80240da:	44d4      	add	ip, sl
 80240dc:	4462      	add	r2, ip
 80240de:	fb0c 1303 	mla	r3, ip, r3, r1
 80240e2:	8322      	strh	r2, [r4, #24]
 80240e4:	e739      	b.n	8023f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80240e6:	9b01      	ldr	r3, [sp, #4]
 80240e8:	2b00      	cmp	r3, #0
 80240ea:	db3f      	blt.n	802416c <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 80240ec:	2201      	movs	r2, #1
 80240ee:	f1ce 0320 	rsb	r3, lr, #32
 80240f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80240f4:	2220      	movs	r2, #32
 80240f6:	fb0a f303 	mul.w	r3, sl, r3
 80240fa:	9202      	str	r2, [sp, #8]
 80240fc:	9a01      	ldr	r2, [sp, #4]
 80240fe:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024102:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024106:	fb93 f7f2 	sdiv	r7, r3, r2
 802410a:	fb02 3317 	mls	r3, r2, r7, r3
 802410e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024112:	2b00      	cmp	r3, #0
 8024114:	9308      	str	r3, [sp, #32]
 8024116:	bfbc      	itt	lt
 8024118:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802411c:	189b      	addlt	r3, r3, r2
 802411e:	eb07 0b01 	add.w	fp, r7, r1
 8024122:	bfb8      	it	lt
 8024124:	9308      	strlt	r3, [sp, #32]
 8024126:	ea4f 136b 	mov.w	r3, fp, asr #5
 802412a:	9304      	str	r3, [sp, #16]
 802412c:	9b02      	ldr	r3, [sp, #8]
 802412e:	4573      	cmp	r3, lr
 8024130:	d133      	bne.n	802419a <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024132:	9b04      	ldr	r3, [sp, #16]
 8024134:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024138:	454b      	cmp	r3, r9
 802413a:	d045      	beq.n	80241c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802413c:	8b62      	ldrh	r2, [r4, #26]
 802413e:	8b23      	ldrh	r3, [r4, #24]
 8024140:	4313      	orrs	r3, r2
 8024142:	d00c      	beq.n	802415e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024144:	f1b8 0f00 	cmp.w	r8, #0
 8024148:	db09      	blt.n	802415e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802414a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802414c:	4543      	cmp	r3, r8
 802414e:	dd06      	ble.n	802415e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024150:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024154:	429a      	cmp	r2, r3
 8024156:	d313      	bcc.n	8024180 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024158:	2301      	movs	r3, #1
 802415a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802415e:	9b04      	ldr	r3, [sp, #16]
 8024160:	82e6      	strh	r6, [r4, #22]
 8024162:	82a3      	strh	r3, [r4, #20]
 8024164:	2300      	movs	r3, #0
 8024166:	8323      	strh	r3, [r4, #24]
 8024168:	8363      	strh	r3, [r4, #26]
 802416a:	e02d      	b.n	80241c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802416c:	9a01      	ldr	r2, [sp, #4]
 802416e:	fb0a f30e 	mul.w	r3, sl, lr
 8024172:	4252      	negs	r2, r2
 8024174:	9201      	str	r2, [sp, #4]
 8024176:	f04f 32ff 	mov.w	r2, #4294967295
 802417a:	920b      	str	r2, [sp, #44]	; 0x2c
 802417c:	2200      	movs	r2, #0
 802417e:	e7bc      	b.n	80240fa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024180:	f104 0314 	add.w	r3, r4, #20
 8024184:	6922      	ldr	r2, [r4, #16]
 8024186:	cb03      	ldmia	r3!, {r0, r1}
 8024188:	6010      	str	r0, [r2, #0]
 802418a:	6051      	str	r1, [r2, #4]
 802418c:	6923      	ldr	r3, [r4, #16]
 802418e:	3308      	adds	r3, #8
 8024190:	6123      	str	r3, [r4, #16]
 8024192:	68a3      	ldr	r3, [r4, #8]
 8024194:	3301      	adds	r3, #1
 8024196:	60a3      	str	r3, [r4, #8]
 8024198:	e7e1      	b.n	802415e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802419a:	f00b 031f 	and.w	r3, fp, #31
 802419e:	f001 011f 	and.w	r1, r1, #31
 80241a2:	8b20      	ldrh	r0, [r4, #24]
 80241a4:	9309      	str	r3, [sp, #36]	; 0x24
 80241a6:	9b02      	ldr	r3, [sp, #8]
 80241a8:	eba3 020e 	sub.w	r2, r3, lr
 80241ac:	8b63      	ldrh	r3, [r4, #26]
 80241ae:	9300      	str	r3, [sp, #0]
 80241b0:	9b04      	ldr	r3, [sp, #16]
 80241b2:	42ab      	cmp	r3, r5
 80241b4:	f040 80ef 	bne.w	8024396 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80241b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241ba:	4410      	add	r0, r2
 80241bc:	4419      	add	r1, r3
 80241be:	9b00      	ldr	r3, [sp, #0]
 80241c0:	8320      	strh	r0, [r4, #24]
 80241c2:	fb02 3101 	mla	r1, r2, r1, r3
 80241c6:	8361      	strh	r1, [r4, #26]
 80241c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241ca:	9904      	ldr	r1, [sp, #16]
 80241cc:	4433      	add	r3, r6
 80241ce:	9300      	str	r3, [sp, #0]
 80241d0:	9a00      	ldr	r2, [sp, #0]
 80241d2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80241d6:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 80241da:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80241de:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80241e2:	4288      	cmp	r0, r1
 80241e4:	d018      	beq.n	8024218 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 80241e6:	8b60      	ldrh	r0, [r4, #26]
 80241e8:	8b21      	ldrh	r1, [r4, #24]
 80241ea:	ea50 0201 	orrs.w	r2, r0, r1
 80241ee:	d00c      	beq.n	802420a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80241f0:	2b00      	cmp	r3, #0
 80241f2:	db0a      	blt.n	802420a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80241f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80241f6:	4299      	cmp	r1, r3
 80241f8:	dd07      	ble.n	802420a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80241fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80241fe:	4299      	cmp	r1, r3
 8024200:	f0c0 818b 	bcc.w	802451a <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024204:	2301      	movs	r3, #1
 8024206:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802420a:	9b04      	ldr	r3, [sp, #16]
 802420c:	82a3      	strh	r3, [r4, #20]
 802420e:	9b00      	ldr	r3, [sp, #0]
 8024210:	82e3      	strh	r3, [r4, #22]
 8024212:	2300      	movs	r3, #0
 8024214:	8323      	strh	r3, [r4, #24]
 8024216:	8363      	strh	r3, [r4, #26]
 8024218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802421a:	9a00      	ldr	r2, [sp, #0]
 802421c:	4293      	cmp	r3, r2
 802421e:	f000 808d 	beq.w	802433c <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024222:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024226:	9901      	ldr	r1, [sp, #4]
 8024228:	9801      	ldr	r0, [sp, #4]
 802422a:	fb93 f1f1 	sdiv	r1, r3, r1
 802422e:	fb00 3311 	mls	r3, r0, r1, r3
 8024232:	9106      	str	r1, [sp, #24]
 8024234:	2b00      	cmp	r3, #0
 8024236:	9307      	str	r3, [sp, #28]
 8024238:	da04      	bge.n	8024244 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 802423a:	1e4b      	subs	r3, r1, #1
 802423c:	9306      	str	r3, [sp, #24]
 802423e:	9b07      	ldr	r3, [sp, #28]
 8024240:	4403      	add	r3, r0
 8024242:	9307      	str	r3, [sp, #28]
 8024244:	9b08      	ldr	r3, [sp, #32]
 8024246:	f04f 0c00 	mov.w	ip, #0
 802424a:	9901      	ldr	r1, [sp, #4]
 802424c:	1a5b      	subs	r3, r3, r1
 802424e:	4659      	mov	r1, fp
 8024250:	9308      	str	r3, [sp, #32]
 8024252:	9b02      	ldr	r3, [sp, #8]
 8024254:	f1c3 0320 	rsb	r3, r3, #32
 8024258:	930a      	str	r3, [sp, #40]	; 0x28
 802425a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802425c:	9b02      	ldr	r3, [sp, #8]
 802425e:	1a1b      	subs	r3, r3, r0
 8024260:	9309      	str	r3, [sp, #36]	; 0x24
 8024262:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024266:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802426a:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802426e:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024272:	181b      	adds	r3, r3, r0
 8024274:	bf58      	it	pl
 8024276:	9801      	ldrpl	r0, [sp, #4]
 8024278:	9308      	str	r3, [sp, #32]
 802427a:	bf54      	ite	pl
 802427c:	1a1b      	subpl	r3, r3, r0
 802427e:	9d06      	ldrmi	r5, [sp, #24]
 8024280:	9802      	ldr	r0, [sp, #8]
 8024282:	bf5e      	ittt	pl
 8024284:	9308      	strpl	r3, [sp, #32]
 8024286:	9b06      	ldrpl	r3, [sp, #24]
 8024288:	1c5d      	addpl	r5, r3, #1
 802428a:	44ab      	add	fp, r5
 802428c:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024290:	9304      	str	r3, [sp, #16]
 8024292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024294:	4283      	cmp	r3, r0
 8024296:	f040 815a 	bne.w	802454e <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 802429a:	9b04      	ldr	r3, [sp, #16]
 802429c:	9a00      	ldr	r2, [sp, #0]
 802429e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80242a2:	4543      	cmp	r3, r8
 80242a4:	d01a      	beq.n	80242dc <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80242a6:	8b61      	ldrh	r1, [r4, #26]
 80242a8:	8b23      	ldrh	r3, [r4, #24]
 80242aa:	430b      	orrs	r3, r1
 80242ac:	d00e      	beq.n	80242cc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80242ae:	f1be 0f00 	cmp.w	lr, #0
 80242b2:	db0b      	blt.n	80242cc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80242b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80242b6:	4573      	cmp	r3, lr
 80242b8:	dd08      	ble.n	80242cc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80242ba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80242be:	4299      	cmp	r1, r3
 80242c0:	f0c0 8138 	bcc.w	8024534 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 80242c4:	f04f 0301 	mov.w	r3, #1
 80242c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80242cc:	9b04      	ldr	r3, [sp, #16]
 80242ce:	f8a4 c018 	strh.w	ip, [r4, #24]
 80242d2:	82a3      	strh	r3, [r4, #20]
 80242d4:	9b00      	ldr	r3, [sp, #0]
 80242d6:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80242da:	82e3      	strh	r3, [r4, #22]
 80242dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242de:	9a00      	ldr	r2, [sp, #0]
 80242e0:	441a      	add	r2, r3
 80242e2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80242e6:	9200      	str	r2, [sp, #0]
 80242e8:	9900      	ldr	r1, [sp, #0]
 80242ea:	9a04      	ldr	r2, [sp, #16]
 80242ec:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 80242f0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80242f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80242f8:	4288      	cmp	r0, r1
 80242fa:	d01a      	beq.n	8024332 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 80242fc:	8b60      	ldrh	r0, [r4, #26]
 80242fe:	8b21      	ldrh	r1, [r4, #24]
 8024300:	ea50 0201 	orrs.w	r2, r0, r1
 8024304:	d00d      	beq.n	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024306:	2b00      	cmp	r3, #0
 8024308:	db0b      	blt.n	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802430a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802430c:	4299      	cmp	r1, r3
 802430e:	dd08      	ble.n	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024310:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024314:	4299      	cmp	r1, r3
 8024316:	f0c0 81f9 	bcc.w	802470c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802431a:	f04f 0301 	mov.w	r3, #1
 802431e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024322:	9b04      	ldr	r3, [sp, #16]
 8024324:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024328:	82a3      	strh	r3, [r4, #20]
 802432a:	9b00      	ldr	r3, [sp, #0]
 802432c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024330:	82e3      	strh	r3, [r4, #22]
 8024332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024334:	4659      	mov	r1, fp
 8024336:	9a00      	ldr	r2, [sp, #0]
 8024338:	4293      	cmp	r3, r2
 802433a:	d192      	bne.n	8024262 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 802433c:	9b02      	ldr	r3, [sp, #8]
 802433e:	f1c3 0c20 	rsb	ip, r3, #32
 8024342:	9b05      	ldr	r3, [sp, #20]
 8024344:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024348:	9b03      	ldr	r3, [sp, #12]
 802434a:	459c      	cmp	ip, r3
 802434c:	f040 81f8 	bne.w	8024740 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024350:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024354:	9a00      	ldr	r2, [sp, #0]
 8024356:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802435a:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 802435e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024362:	4288      	cmp	r0, r1
 8024364:	f43f ad54 	beq.w	8023e10 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024368:	8b60      	ldrh	r0, [r4, #26]
 802436a:	8b21      	ldrh	r1, [r4, #24]
 802436c:	ea50 0201 	orrs.w	r2, r0, r1
 8024370:	d00c      	beq.n	802438c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024372:	2b00      	cmp	r3, #0
 8024374:	db0a      	blt.n	802438c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024376:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024378:	4299      	cmp	r1, r3
 802437a:	dd07      	ble.n	802438c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802437c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024380:	4299      	cmp	r1, r3
 8024382:	f0c0 81d0 	bcc.w	8024726 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024386:	2301      	movs	r3, #1
 8024388:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802438c:	9b00      	ldr	r3, [sp, #0]
 802438e:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024392:	82e3      	strh	r3, [r4, #22]
 8024394:	e517      	b.n	8023dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024396:	2f00      	cmp	r7, #0
 8024398:	f2c0 8097 	blt.w	80244ca <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 802439c:	2301      	movs	r3, #1
 802439e:	f1c1 0c20 	rsb	ip, r1, #32
 80243a2:	9307      	str	r3, [sp, #28]
 80243a4:	2320      	movs	r3, #32
 80243a6:	fb02 f20c 	mul.w	r2, r2, ip
 80243aa:	9306      	str	r3, [sp, #24]
 80243ac:	9b06      	ldr	r3, [sp, #24]
 80243ae:	fb92 fcf7 	sdiv	ip, r2, r7
 80243b2:	fb07 221c 	mls	r2, r7, ip, r2
 80243b6:	4419      	add	r1, r3
 80243b8:	9b00      	ldr	r3, [sp, #0]
 80243ba:	2a00      	cmp	r2, #0
 80243bc:	bfbc      	itt	lt
 80243be:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80243c2:	19d2      	addlt	r2, r2, r7
 80243c4:	fb0c 3101 	mla	r1, ip, r1, r3
 80243c8:	9b07      	ldr	r3, [sp, #28]
 80243ca:	4460      	add	r0, ip
 80243cc:	441d      	add	r5, r3
 80243ce:	0433      	lsls	r3, r6, #16
 80243d0:	b200      	sxth	r0, r0
 80243d2:	930a      	str	r3, [sp, #40]	; 0x28
 80243d4:	18eb      	adds	r3, r5, r3
 80243d6:	b209      	sxth	r1, r1
 80243d8:	8320      	strh	r0, [r4, #24]
 80243da:	454b      	cmp	r3, r9
 80243dc:	8361      	strh	r1, [r4, #26]
 80243de:	d014      	beq.n	802440a <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 80243e0:	ea50 0301 	orrs.w	r3, r0, r1
 80243e4:	d00c      	beq.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80243e6:	f1b8 0f00 	cmp.w	r8, #0
 80243ea:	db09      	blt.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80243ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80243ee:	4543      	cmp	r3, r8
 80243f0:	dd06      	ble.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80243f2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80243f6:	4299      	cmp	r1, r3
 80243f8:	d36e      	bcc.n	80244d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80243fa:	2301      	movs	r3, #1
 80243fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024400:	2300      	movs	r3, #0
 8024402:	82a5      	strh	r5, [r4, #20]
 8024404:	82e6      	strh	r6, [r4, #22]
 8024406:	8323      	strh	r3, [r4, #24]
 8024408:	8363      	strh	r3, [r4, #26]
 802440a:	9904      	ldr	r1, [sp, #16]
 802440c:	eb0e 030c 	add.w	r3, lr, ip
 8024410:	42a9      	cmp	r1, r5
 8024412:	d04d      	beq.n	80244b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024414:	9902      	ldr	r1, [sp, #8]
 8024416:	1bd2      	subs	r2, r2, r7
 8024418:	1ac9      	subs	r1, r1, r3
 802441a:	9200      	str	r2, [sp, #0]
 802441c:	448c      	add	ip, r1
 802441e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024422:	fb9c fef7 	sdiv	lr, ip, r7
 8024426:	fb07 cc1e 	mls	ip, r7, lr, ip
 802442a:	f1bc 0f00 	cmp.w	ip, #0
 802442e:	bfbc      	itt	lt
 8024430:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024434:	44bc      	addlt	ip, r7
 8024436:	f10e 0101 	add.w	r1, lr, #1
 802443a:	910d      	str	r1, [sp, #52]	; 0x34
 802443c:	9a00      	ldr	r2, [sp, #0]
 802443e:	8b20      	ldrh	r0, [r4, #24]
 8024440:	eb12 020c 	adds.w	r2, r2, ip
 8024444:	8b61      	ldrh	r1, [r4, #26]
 8024446:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802444a:	9200      	str	r2, [sp, #0]
 802444c:	bf5b      	ittet	pl
 802444e:	1bd2      	subpl	r2, r2, r7
 8024450:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024454:	46f0      	movmi	r8, lr
 8024456:	9200      	strpl	r2, [sp, #0]
 8024458:	9a07      	ldr	r2, [sp, #28]
 802445a:	4440      	add	r0, r8
 802445c:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024460:	4443      	add	r3, r8
 8024462:	4415      	add	r5, r2
 8024464:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802446a:	b200      	sxth	r0, r0
 802446c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024470:	442a      	add	r2, r5
 8024472:	b209      	sxth	r1, r1
 8024474:	8320      	strh	r0, [r4, #24]
 8024476:	454a      	cmp	r2, r9
 8024478:	8361      	strh	r1, [r4, #26]
 802447a:	d016      	beq.n	80244aa <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 802447c:	ea50 0201 	orrs.w	r2, r0, r1
 8024480:	d00d      	beq.n	802449e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024482:	f1b8 0f00 	cmp.w	r8, #0
 8024486:	db0a      	blt.n	802449e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024488:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802448a:	4541      	cmp	r1, r8
 802448c:	dd07      	ble.n	802449e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802448e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024492:	4288      	cmp	r0, r1
 8024494:	d330      	bcc.n	80244f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024496:	f04f 0201 	mov.w	r2, #1
 802449a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802449e:	f04f 0200 	mov.w	r2, #0
 80244a2:	82a5      	strh	r5, [r4, #20]
 80244a4:	82e6      	strh	r6, [r4, #22]
 80244a6:	8322      	strh	r2, [r4, #24]
 80244a8:	8362      	strh	r2, [r4, #26]
 80244aa:	9904      	ldr	r1, [sp, #16]
 80244ac:	42a9      	cmp	r1, r5
 80244ae:	d1c5      	bne.n	802443c <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 80244b0:	9a02      	ldr	r2, [sp, #8]
 80244b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80244b4:	1ad3      	subs	r3, r2, r3
 80244b6:	8b22      	ldrh	r2, [r4, #24]
 80244b8:	3120      	adds	r1, #32
 80244ba:	441a      	add	r2, r3
 80244bc:	8322      	strh	r2, [r4, #24]
 80244be:	9a06      	ldr	r2, [sp, #24]
 80244c0:	1a89      	subs	r1, r1, r2
 80244c2:	8b62      	ldrh	r2, [r4, #26]
 80244c4:	fb03 2301 	mla	r3, r3, r1, r2
 80244c8:	e64e      	b.n	8024168 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 80244ca:	f04f 33ff 	mov.w	r3, #4294967295
 80244ce:	434a      	muls	r2, r1
 80244d0:	427f      	negs	r7, r7
 80244d2:	9307      	str	r3, [sp, #28]
 80244d4:	2300      	movs	r3, #0
 80244d6:	e768      	b.n	80243aa <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 80244d8:	f104 0314 	add.w	r3, r4, #20
 80244dc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80244e0:	cb03      	ldmia	r3!, {r0, r1}
 80244e2:	f8c8 0000 	str.w	r0, [r8]
 80244e6:	f8c8 1004 	str.w	r1, [r8, #4]
 80244ea:	6923      	ldr	r3, [r4, #16]
 80244ec:	3308      	adds	r3, #8
 80244ee:	6123      	str	r3, [r4, #16]
 80244f0:	68a3      	ldr	r3, [r4, #8]
 80244f2:	3301      	adds	r3, #1
 80244f4:	60a3      	str	r3, [r4, #8]
 80244f6:	e783      	b.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80244f8:	f104 0814 	add.w	r8, r4, #20
 80244fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024500:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024504:	f8c9 0000 	str.w	r0, [r9]
 8024508:	f8c9 1004 	str.w	r1, [r9, #4]
 802450c:	6921      	ldr	r1, [r4, #16]
 802450e:	3108      	adds	r1, #8
 8024510:	6121      	str	r1, [r4, #16]
 8024512:	68a1      	ldr	r1, [r4, #8]
 8024514:	3101      	adds	r1, #1
 8024516:	60a1      	str	r1, [r4, #8]
 8024518:	e7c1      	b.n	802449e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802451a:	f104 0314 	add.w	r3, r4, #20
 802451e:	6925      	ldr	r5, [r4, #16]
 8024520:	cb03      	ldmia	r3!, {r0, r1}
 8024522:	6028      	str	r0, [r5, #0]
 8024524:	6069      	str	r1, [r5, #4]
 8024526:	6923      	ldr	r3, [r4, #16]
 8024528:	3308      	adds	r3, #8
 802452a:	6123      	str	r3, [r4, #16]
 802452c:	68a3      	ldr	r3, [r4, #8]
 802452e:	3301      	adds	r3, #1
 8024530:	60a3      	str	r3, [r4, #8]
 8024532:	e66a      	b.n	802420a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024534:	f104 0314 	add.w	r3, r4, #20
 8024538:	6925      	ldr	r5, [r4, #16]
 802453a:	cb03      	ldmia	r3!, {r0, r1}
 802453c:	6028      	str	r0, [r5, #0]
 802453e:	6069      	str	r1, [r5, #4]
 8024540:	6923      	ldr	r3, [r4, #16]
 8024542:	3308      	adds	r3, #8
 8024544:	6123      	str	r3, [r4, #16]
 8024546:	68a3      	ldr	r3, [r4, #8]
 8024548:	3301      	adds	r3, #1
 802454a:	60a3      	str	r3, [r4, #8]
 802454c:	e6be      	b.n	80242cc <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802454e:	f00b 031f 	and.w	r3, fp, #31
 8024552:	114f      	asrs	r7, r1, #5
 8024554:	8b20      	ldrh	r0, [r4, #24]
 8024556:	f001 011f 	and.w	r1, r1, #31
 802455a:	930f      	str	r3, [sp, #60]	; 0x3c
 802455c:	9b04      	ldr	r3, [sp, #16]
 802455e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024562:	429f      	cmp	r7, r3
 8024564:	d10a      	bne.n	802457c <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024568:	4418      	add	r0, r3
 802456a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802456c:	4419      	add	r1, r3
 802456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024570:	8320      	strh	r0, [r4, #24]
 8024572:	fb03 9901 	mla	r9, r3, r1, r9
 8024576:	f8a4 901a 	strh.w	r9, [r4, #26]
 802457a:	e6af      	b.n	80242dc <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802457c:	2d00      	cmp	r5, #0
 802457e:	f2c0 809b 	blt.w	80246b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024582:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024584:	f1c1 0320 	rsb	r3, r1, #32
 8024588:	4373      	muls	r3, r6
 802458a:	2601      	movs	r6, #1
 802458c:	960e      	str	r6, [sp, #56]	; 0x38
 802458e:	2620      	movs	r6, #32
 8024590:	960d      	str	r6, [sp, #52]	; 0x34
 8024592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024594:	fb93 f6f5 	sdiv	r6, r3, r5
 8024598:	4411      	add	r1, r2
 802459a:	fb05 3316 	mls	r3, r5, r6, r3
 802459e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80245a0:	2b00      	cmp	r3, #0
 80245a2:	4417      	add	r7, r2
 80245a4:	9a00      	ldr	r2, [sp, #0]
 80245a6:	bfbc      	itt	lt
 80245a8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80245ac:	195b      	addlt	r3, r3, r5
 80245ae:	0412      	lsls	r2, r2, #16
 80245b0:	fb06 9101 	mla	r1, r6, r1, r9
 80245b4:	4430      	add	r0, r6
 80245b6:	eb07 0902 	add.w	r9, r7, r2
 80245ba:	9210      	str	r2, [sp, #64]	; 0x40
 80245bc:	b200      	sxth	r0, r0
 80245be:	b209      	sxth	r1, r1
 80245c0:	45c1      	cmp	r9, r8
 80245c2:	8320      	strh	r0, [r4, #24]
 80245c4:	8361      	strh	r1, [r4, #26]
 80245c6:	d017      	beq.n	80245f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80245c8:	ea50 0201 	orrs.w	r2, r0, r1
 80245cc:	d00d      	beq.n	80245ea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80245ce:	f1be 0f00 	cmp.w	lr, #0
 80245d2:	db0a      	blt.n	80245ea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80245d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80245d6:	4571      	cmp	r1, lr
 80245d8:	dd07      	ble.n	80245ea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80245da:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80245de:	4288      	cmp	r0, r1
 80245e0:	d372      	bcc.n	80246c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80245e2:	f04f 0201 	mov.w	r2, #1
 80245e6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80245ea:	9a00      	ldr	r2, [sp, #0]
 80245ec:	82a7      	strh	r7, [r4, #20]
 80245ee:	82e2      	strh	r2, [r4, #22]
 80245f0:	f8a4 c018 	strh.w	ip, [r4, #24]
 80245f4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80245f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245fa:	eb02 0e06 	add.w	lr, r2, r6
 80245fe:	9a04      	ldr	r2, [sp, #16]
 8024600:	42ba      	cmp	r2, r7
 8024602:	d049      	beq.n	8024698 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024604:	9a02      	ldr	r2, [sp, #8]
 8024606:	1b5b      	subs	r3, r3, r5
 8024608:	eba2 010e 	sub.w	r1, r2, lr
 802460c:	440e      	add	r6, r1
 802460e:	0176      	lsls	r6, r6, #5
 8024610:	fb96 f8f5 	sdiv	r8, r6, r5
 8024614:	fb05 6618 	mls	r6, r5, r8, r6
 8024618:	2e00      	cmp	r6, #0
 802461a:	bfbc      	itt	lt
 802461c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024620:	1976      	addlt	r6, r6, r5
 8024622:	f108 0201 	add.w	r2, r8, #1
 8024626:	9211      	str	r2, [sp, #68]	; 0x44
 8024628:	199b      	adds	r3, r3, r6
 802462a:	8b20      	ldrh	r0, [r4, #24]
 802462c:	8b61      	ldrh	r1, [r4, #26]
 802462e:	bf54      	ite	pl
 8024630:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8024634:	46c1      	movmi	r9, r8
 8024636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024638:	bf58      	it	pl
 802463a:	1b5b      	subpl	r3, r3, r5
 802463c:	4448      	add	r0, r9
 802463e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024642:	4417      	add	r7, r2
 8024644:	44ce      	add	lr, r9
 8024646:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024648:	b200      	sxth	r0, r0
 802464a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802464e:	b209      	sxth	r1, r1
 8024650:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024654:	443a      	add	r2, r7
 8024656:	8320      	strh	r0, [r4, #24]
 8024658:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802465c:	8361      	strh	r1, [r4, #26]
 802465e:	4552      	cmp	r2, sl
 8024660:	d017      	beq.n	8024692 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8024662:	ea50 0201 	orrs.w	r2, r0, r1
 8024666:	d00d      	beq.n	8024684 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024668:	f1b9 0f00 	cmp.w	r9, #0
 802466c:	db0a      	blt.n	8024684 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802466e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024670:	4549      	cmp	r1, r9
 8024672:	dd07      	ble.n	8024684 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024674:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024678:	4288      	cmp	r0, r1
 802467a:	d336      	bcc.n	80246ea <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 802467c:	f04f 0201 	mov.w	r2, #1
 8024680:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024684:	9a00      	ldr	r2, [sp, #0]
 8024686:	82a7      	strh	r7, [r4, #20]
 8024688:	82e2      	strh	r2, [r4, #22]
 802468a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802468e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024692:	9a04      	ldr	r2, [sp, #16]
 8024694:	42ba      	cmp	r2, r7
 8024696:	d1c7      	bne.n	8024628 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024698:	9b02      	ldr	r3, [sp, #8]
 802469a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802469c:	eba3 0e0e 	sub.w	lr, r3, lr
 80246a0:	8b23      	ldrh	r3, [r4, #24]
 80246a2:	3120      	adds	r1, #32
 80246a4:	4473      	add	r3, lr
 80246a6:	8323      	strh	r3, [r4, #24]
 80246a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80246aa:	1ac9      	subs	r1, r1, r3
 80246ac:	8b63      	ldrh	r3, [r4, #26]
 80246ae:	fb0e 3e01 	mla	lr, lr, r1, r3
 80246b2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80246b6:	e611      	b.n	80242dc <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80246b8:	f04f 36ff 	mov.w	r6, #4294967295
 80246bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246be:	426d      	negs	r5, r5
 80246c0:	960e      	str	r6, [sp, #56]	; 0x38
 80246c2:	2600      	movs	r6, #0
 80246c4:	434b      	muls	r3, r1
 80246c6:	e763      	b.n	8024590 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80246c8:	f104 0e14 	add.w	lr, r4, #20
 80246cc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80246d0:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80246d4:	f8c8 0000 	str.w	r0, [r8]
 80246d8:	f8c8 1004 	str.w	r1, [r8, #4]
 80246dc:	6921      	ldr	r1, [r4, #16]
 80246de:	3108      	adds	r1, #8
 80246e0:	6121      	str	r1, [r4, #16]
 80246e2:	68a1      	ldr	r1, [r4, #8]
 80246e4:	3101      	adds	r1, #1
 80246e6:	60a1      	str	r1, [r4, #8]
 80246e8:	e77f      	b.n	80245ea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80246ea:	f104 0914 	add.w	r9, r4, #20
 80246ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80246f2:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80246f6:	f8ca 0000 	str.w	r0, [sl]
 80246fa:	f8ca 1004 	str.w	r1, [sl, #4]
 80246fe:	6921      	ldr	r1, [r4, #16]
 8024700:	3108      	adds	r1, #8
 8024702:	6121      	str	r1, [r4, #16]
 8024704:	68a1      	ldr	r1, [r4, #8]
 8024706:	3101      	adds	r1, #1
 8024708:	60a1      	str	r1, [r4, #8]
 802470a:	e7bb      	b.n	8024684 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802470c:	f104 0314 	add.w	r3, r4, #20
 8024710:	6925      	ldr	r5, [r4, #16]
 8024712:	cb03      	ldmia	r3!, {r0, r1}
 8024714:	6028      	str	r0, [r5, #0]
 8024716:	6069      	str	r1, [r5, #4]
 8024718:	6923      	ldr	r3, [r4, #16]
 802471a:	3308      	adds	r3, #8
 802471c:	6123      	str	r3, [r4, #16]
 802471e:	68a3      	ldr	r3, [r4, #8]
 8024720:	3301      	adds	r3, #1
 8024722:	60a3      	str	r3, [r4, #8]
 8024724:	e5fd      	b.n	8024322 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024726:	f104 0314 	add.w	r3, r4, #20
 802472a:	6925      	ldr	r5, [r4, #16]
 802472c:	cb03      	ldmia	r3!, {r0, r1}
 802472e:	6028      	str	r0, [r5, #0]
 8024730:	6069      	str	r1, [r5, #4]
 8024732:	6923      	ldr	r3, [r4, #16]
 8024734:	3308      	adds	r3, #8
 8024736:	6123      	str	r3, [r4, #16]
 8024738:	68a3      	ldr	r3, [r4, #8]
 802473a:	3301      	adds	r3, #1
 802473c:	60a3      	str	r3, [r4, #8]
 802473e:	e625      	b.n	802438c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024740:	9b05      	ldr	r3, [sp, #20]
 8024742:	ea4f 176b 	mov.w	r7, fp, asr #5
 8024746:	f00b 081f 	and.w	r8, fp, #31
 802474a:	8b20      	ldrh	r0, [r4, #24]
 802474c:	f003 031f 	and.w	r3, r3, #31
 8024750:	4577      	cmp	r7, lr
 8024752:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024756:	9302      	str	r3, [sp, #8]
 8024758:	9b03      	ldr	r3, [sp, #12]
 802475a:	eba3 050c 	sub.w	r5, r3, ip
 802475e:	d108      	bne.n	8024772 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8024760:	9b02      	ldr	r3, [sp, #8]
 8024762:	4428      	add	r0, r5
 8024764:	4498      	add	r8, r3
 8024766:	8320      	strh	r0, [r4, #24]
 8024768:	fb05 9508 	mla	r5, r5, r8, r9
 802476c:	8365      	strh	r5, [r4, #26]
 802476e:	f7ff bb4f 	b.w	8023e10 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024772:	9b05      	ldr	r3, [sp, #20]
 8024774:	ebb3 030b 	subs.w	r3, r3, fp
 8024778:	f100 809c 	bmi.w	80248b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 802477c:	f1c8 0120 	rsb	r1, r8, #32
 8024780:	2201      	movs	r2, #1
 8024782:	f04f 0b20 	mov.w	fp, #32
 8024786:	434d      	muls	r5, r1
 8024788:	9201      	str	r2, [sp, #4]
 802478a:	9a01      	ldr	r2, [sp, #4]
 802478c:	44d8      	add	r8, fp
 802478e:	fb95 f6f3 	sdiv	r6, r5, r3
 8024792:	fb03 5516 	mls	r5, r3, r6, r5
 8024796:	4417      	add	r7, r2
 8024798:	9a00      	ldr	r2, [sp, #0]
 802479a:	2d00      	cmp	r5, #0
 802479c:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80247a0:	bfbc      	itt	lt
 80247a2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80247a6:	18ed      	addlt	r5, r5, r3
 80247a8:	eb07 0a02 	add.w	sl, r7, r2
 80247ac:	9204      	str	r2, [sp, #16]
 80247ae:	fb06 9808 	mla	r8, r6, r8, r9
 80247b2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80247b6:	4430      	add	r0, r6
 80247b8:	fa0f f188 	sxth.w	r1, r8
 80247bc:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80247c0:	b200      	sxth	r0, r0
 80247c2:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80247c6:	8361      	strh	r1, [r4, #26]
 80247c8:	8320      	strh	r0, [r4, #24]
 80247ca:	45ca      	cmp	sl, r9
 80247cc:	d015      	beq.n	80247fa <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80247ce:	ea50 0201 	orrs.w	r2, r0, r1
 80247d2:	d00c      	beq.n	80247ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80247d4:	f1b8 0f00 	cmp.w	r8, #0
 80247d8:	db09      	blt.n	80247ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80247da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80247dc:	4541      	cmp	r1, r8
 80247de:	dd06      	ble.n	80247ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80247e0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80247e4:	4288      	cmp	r0, r1
 80247e6:	d36e      	bcc.n	80248c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 80247e8:	2101      	movs	r1, #1
 80247ea:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80247ee:	2100      	movs	r1, #0
 80247f0:	9a00      	ldr	r2, [sp, #0]
 80247f2:	82a7      	strh	r7, [r4, #20]
 80247f4:	82e2      	strh	r2, [r4, #22]
 80247f6:	8321      	strh	r1, [r4, #24]
 80247f8:	8361      	strh	r1, [r4, #26]
 80247fa:	45be      	cmp	lr, r7
 80247fc:	44b4      	add	ip, r6
 80247fe:	d048      	beq.n	8024892 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8024800:	9a03      	ldr	r2, [sp, #12]
 8024802:	1aed      	subs	r5, r5, r3
 8024804:	eba2 010c 	sub.w	r1, r2, ip
 8024808:	440e      	add	r6, r1
 802480a:	0176      	lsls	r6, r6, #5
 802480c:	fb96 f8f3 	sdiv	r8, r6, r3
 8024810:	fb03 6618 	mls	r6, r3, r8, r6
 8024814:	2e00      	cmp	r6, #0
 8024816:	bfbc      	itt	lt
 8024818:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802481c:	18f6      	addlt	r6, r6, r3
 802481e:	f108 0201 	add.w	r2, r8, #1
 8024822:	9205      	str	r2, [sp, #20]
 8024824:	19ad      	adds	r5, r5, r6
 8024826:	8b20      	ldrh	r0, [r4, #24]
 8024828:	8b61      	ldrh	r1, [r4, #26]
 802482a:	bf54      	ite	pl
 802482c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8024830:	46c1      	movmi	r9, r8
 8024832:	9a01      	ldr	r2, [sp, #4]
 8024834:	bf58      	it	pl
 8024836:	1aed      	subpl	r5, r5, r3
 8024838:	4448      	add	r0, r9
 802483a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802483e:	4417      	add	r7, r2
 8024840:	44cc      	add	ip, r9
 8024842:	9a04      	ldr	r2, [sp, #16]
 8024844:	b200      	sxth	r0, r0
 8024846:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802484a:	b209      	sxth	r1, r1
 802484c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024850:	443a      	add	r2, r7
 8024852:	8320      	strh	r0, [r4, #24]
 8024854:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024858:	8361      	strh	r1, [r4, #26]
 802485a:	4552      	cmp	r2, sl
 802485c:	d017      	beq.n	802488e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802485e:	ea50 0201 	orrs.w	r2, r0, r1
 8024862:	d00d      	beq.n	8024880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024864:	f1b9 0f00 	cmp.w	r9, #0
 8024868:	db0a      	blt.n	8024880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802486a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802486c:	4549      	cmp	r1, r9
 802486e:	dd07      	ble.n	8024880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024870:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024874:	4288      	cmp	r0, r1
 8024876:	d337      	bcc.n	80248e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8024878:	f04f 0201 	mov.w	r2, #1
 802487c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024880:	9a00      	ldr	r2, [sp, #0]
 8024882:	82a7      	strh	r7, [r4, #20]
 8024884:	82e2      	strh	r2, [r4, #22]
 8024886:	f04f 0200 	mov.w	r2, #0
 802488a:	8322      	strh	r2, [r4, #24]
 802488c:	8362      	strh	r2, [r4, #26]
 802488e:	45be      	cmp	lr, r7
 8024890:	d1c8      	bne.n	8024824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8024892:	9b03      	ldr	r3, [sp, #12]
 8024894:	8b62      	ldrh	r2, [r4, #26]
 8024896:	eba3 0c0c 	sub.w	ip, r3, ip
 802489a:	8b23      	ldrh	r3, [r4, #24]
 802489c:	4463      	add	r3, ip
 802489e:	8323      	strh	r3, [r4, #24]
 80248a0:	9b02      	ldr	r3, [sp, #8]
 80248a2:	3320      	adds	r3, #32
 80248a4:	eba3 030b 	sub.w	r3, r3, fp
 80248a8:	fb0c 2c03 	mla	ip, ip, r3, r2
 80248ac:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80248b0:	f7ff baae 	b.w	8023e10 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80248b4:	f04f 32ff 	mov.w	r2, #4294967295
 80248b8:	fb05 f508 	mul.w	r5, r5, r8
 80248bc:	425b      	negs	r3, r3
 80248be:	f04f 0b00 	mov.w	fp, #0
 80248c2:	9201      	str	r2, [sp, #4]
 80248c4:	e761      	b.n	802478a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80248c6:	f104 0814 	add.w	r8, r4, #20
 80248ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80248ce:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80248d2:	f8c9 0000 	str.w	r0, [r9]
 80248d6:	f8c9 1004 	str.w	r1, [r9, #4]
 80248da:	6921      	ldr	r1, [r4, #16]
 80248dc:	3108      	adds	r1, #8
 80248de:	6121      	str	r1, [r4, #16]
 80248e0:	68a1      	ldr	r1, [r4, #8]
 80248e2:	3101      	adds	r1, #1
 80248e4:	60a1      	str	r1, [r4, #8]
 80248e6:	e782      	b.n	80247ee <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80248e8:	f104 0914 	add.w	r9, r4, #20
 80248ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80248f0:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80248f4:	f8ca 0000 	str.w	r0, [sl]
 80248f8:	f8ca 1004 	str.w	r1, [sl, #4]
 80248fc:	6921      	ldr	r1, [r4, #16]
 80248fe:	3108      	adds	r1, #8
 8024900:	6121      	str	r1, [r4, #16]
 8024902:	68a1      	ldr	r1, [r4, #8]
 8024904:	3101      	adds	r1, #1
 8024906:	60a1      	str	r1, [r4, #8]
 8024908:	e7ba      	b.n	8024880 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802490a <_ZN8touchgfx7Outline6lineToEii>:
 802490a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802490c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802490e:	4604      	mov	r4, r0
 8024910:	460d      	mov	r5, r1
 8024912:	4616      	mov	r6, r2
 8024914:	079b      	lsls	r3, r3, #30
 8024916:	d526      	bpl.n	8024966 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024918:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802491c:	ea85 0001 	eor.w	r0, r5, r1
 8024920:	ea86 0302 	eor.w	r3, r6, r2
 8024924:	4303      	orrs	r3, r0
 8024926:	d01e      	beq.n	8024966 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024928:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802492a:	114b      	asrs	r3, r1, #5
 802492c:	9600      	str	r6, [sp, #0]
 802492e:	4283      	cmp	r3, r0
 8024930:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024932:	bfb8      	it	lt
 8024934:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024936:	3301      	adds	r3, #1
 8024938:	4283      	cmp	r3, r0
 802493a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802493c:	bfc8      	it	gt
 802493e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024940:	116b      	asrs	r3, r5, #5
 8024942:	4283      	cmp	r3, r0
 8024944:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024946:	bfb8      	it	lt
 8024948:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802494a:	3301      	adds	r3, #1
 802494c:	4283      	cmp	r3, r0
 802494e:	4620      	mov	r0, r4
 8024950:	bfc8      	it	gt
 8024952:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024954:	462b      	mov	r3, r5
 8024956:	f7ff f9e3 	bl	8023d20 <_ZN8touchgfx7Outline10renderLineEiiii>
 802495a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802495c:	f043 0301 	orr.w	r3, r3, #1
 8024960:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8024964:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024966:	b002      	add	sp, #8
 8024968:	bd70      	pop	{r4, r5, r6, pc}

0802496a <_ZN8touchgfx7Outline6moveToEii>:
 802496a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802496c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802496e:	4615      	mov	r5, r2
 8024970:	4604      	mov	r4, r0
 8024972:	460e      	mov	r6, r1
 8024974:	079a      	lsls	r2, r3, #30
 8024976:	d401      	bmi.n	802497c <_ZN8touchgfx7Outline6moveToEii+0x12>
 8024978:	f7ff f98c 	bl	8023c94 <_ZN8touchgfx7Outline5resetEv>
 802497c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802497e:	07db      	lsls	r3, r3, #31
 8024980:	d504      	bpl.n	802498c <_ZN8touchgfx7Outline6moveToEii+0x22>
 8024982:	4620      	mov	r0, r4
 8024984:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8024988:	f7ff ffbf 	bl	802490a <_ZN8touchgfx7Outline6lineToEii>
 802498c:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8024990:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024994:	116f      	asrs	r7, r5, #5
 8024996:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802499a:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802499e:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80249a2:	4291      	cmp	r1, r2
 80249a4:	d015      	beq.n	80249d2 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80249a6:	8b61      	ldrh	r1, [r4, #26]
 80249a8:	8b22      	ldrh	r2, [r4, #24]
 80249aa:	430a      	orrs	r2, r1
 80249ac:	d00b      	beq.n	80249c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80249ae:	2b00      	cmp	r3, #0
 80249b0:	db09      	blt.n	80249c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80249b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80249b4:	429a      	cmp	r2, r3
 80249b6:	dd06      	ble.n	80249c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80249b8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80249bc:	429a      	cmp	r2, r3
 80249be:	d30d      	bcc.n	80249dc <_ZN8touchgfx7Outline6moveToEii+0x72>
 80249c0:	2301      	movs	r3, #1
 80249c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80249c6:	2300      	movs	r3, #0
 80249c8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80249cc:	82e7      	strh	r7, [r4, #22]
 80249ce:	8323      	strh	r3, [r4, #24]
 80249d0:	8363      	strh	r3, [r4, #26]
 80249d2:	61e6      	str	r6, [r4, #28]
 80249d4:	62a5      	str	r5, [r4, #40]	; 0x28
 80249d6:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80249da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80249dc:	f104 0314 	add.w	r3, r4, #20
 80249e0:	6922      	ldr	r2, [r4, #16]
 80249e2:	cb03      	ldmia	r3!, {r0, r1}
 80249e4:	6010      	str	r0, [r2, #0]
 80249e6:	6051      	str	r1, [r2, #4]
 80249e8:	6923      	ldr	r3, [r4, #16]
 80249ea:	3308      	adds	r3, #8
 80249ec:	6123      	str	r3, [r4, #16]
 80249ee:	68a3      	ldr	r3, [r4, #8]
 80249f0:	3301      	adds	r3, #1
 80249f2:	60a3      	str	r3, [r4, #8]
 80249f4:	e7e7      	b.n	80249c6 <_ZN8touchgfx7Outline6moveToEii+0x5c>

080249f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80249f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249fa:	b0d1      	sub	sp, #324	; 0x144
 80249fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024a00:	466c      	mov	r4, sp
 8024a02:	1a0d      	subs	r5, r1, r0
 8024a04:	f100 0208 	add.w	r2, r0, #8
 8024a08:	2d48      	cmp	r5, #72	; 0x48
 8024a0a:	f340 80ba 	ble.w	8024b82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024a0e:	112d      	asrs	r5, r5, #4
 8024a10:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024a14:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8024a18:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024a1c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024a20:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024a24:	681e      	ldr	r6, [r3, #0]
 8024a26:	6006      	str	r6, [r0, #0]
 8024a28:	685e      	ldr	r6, [r3, #4]
 8024a2a:	6046      	str	r6, [r0, #4]
 8024a2c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024a30:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024a34:	f8a3 e002 	strh.w	lr, [r3, #2]
 8024a38:	80df      	strh	r7, [r3, #6]
 8024a3a:	f1a1 0308 	sub.w	r3, r1, #8
 8024a3e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8024a42:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8024a46:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8024a4a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024a4e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024a52:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024a56:	45ac      	cmp	ip, r5
 8024a58:	dd0f      	ble.n	8024a7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8024a5a:	681d      	ldr	r5, [r3, #0]
 8024a5c:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024a60:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8024a64:	6015      	str	r5, [r2, #0]
 8024a66:	685d      	ldr	r5, [r3, #4]
 8024a68:	6055      	str	r5, [r2, #4]
 8024a6a:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024a6e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024a72:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024a76:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024a7a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8024a7e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024a82:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024a86:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8024a8a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8024a8e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024a92:	4565      	cmp	r5, ip
 8024a94:	dd0d      	ble.n	8024ab2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8024a96:	6815      	ldr	r5, [r2, #0]
 8024a98:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024a9c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024aa0:	6005      	str	r5, [r0, #0]
 8024aa2:	6855      	ldr	r5, [r2, #4]
 8024aa4:	8107      	strh	r7, [r0, #8]
 8024aa6:	6045      	str	r5, [r0, #4]
 8024aa8:	8146      	strh	r6, [r0, #10]
 8024aaa:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8024aae:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8024ab2:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024ab6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024aba:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8024abe:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024ac2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024ac6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024aca:	45ac      	cmp	ip, r5
 8024acc:	dd0f      	ble.n	8024aee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024ace:	681d      	ldr	r5, [r3, #0]
 8024ad0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024ad4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024ad8:	6005      	str	r5, [r0, #0]
 8024ada:	685d      	ldr	r5, [r3, #4]
 8024adc:	6045      	str	r5, [r0, #4]
 8024ade:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024ae2:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024ae6:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024aea:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024aee:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8024af2:	f102 0508 	add.w	r5, r2, #8
 8024af6:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024afa:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024afe:	462f      	mov	r7, r5
 8024b00:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024b04:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024b08:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024b0c:	45b2      	cmp	sl, r6
 8024b0e:	dc18      	bgt.n	8024b42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024b10:	3b08      	subs	r3, #8
 8024b12:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024b16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024b1a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024b1e:	45b2      	cmp	sl, r6
 8024b20:	dbf6      	blt.n	8024b10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8024b22:	42ab      	cmp	r3, r5
 8024b24:	681e      	ldr	r6, [r3, #0]
 8024b26:	d30e      	bcc.n	8024b46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024b28:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024b2c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024b30:	602e      	str	r6, [r5, #0]
 8024b32:	685e      	ldr	r6, [r3, #4]
 8024b34:	606e      	str	r6, [r5, #4]
 8024b36:	f8a3 9000 	strh.w	r9, [r3]
 8024b3a:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024b3e:	809f      	strh	r7, [r3, #4]
 8024b40:	80da      	strh	r2, [r3, #6]
 8024b42:	462a      	mov	r2, r5
 8024b44:	e7d3      	b.n	8024aee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8024b46:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024b4a:	6006      	str	r6, [r0, #0]
 8024b4c:	685e      	ldr	r6, [r3, #4]
 8024b4e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8024b52:	6046      	str	r6, [r0, #4]
 8024b54:	1a1e      	subs	r6, r3, r0
 8024b56:	80da      	strh	r2, [r3, #6]
 8024b58:	1b4a      	subs	r2, r1, r5
 8024b5a:	f8a3 e000 	strh.w	lr, [r3]
 8024b5e:	10d2      	asrs	r2, r2, #3
 8024b60:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024b64:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024b68:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024b6c:	bfb5      	itete	lt
 8024b6e:	e9c4 0300 	strdlt	r0, r3, [r4]
 8024b72:	4607      	movge	r7, r0
 8024b74:	460b      	movlt	r3, r1
 8024b76:	e9c4 5100 	strdge	r5, r1, [r4]
 8024b7a:	4638      	mov	r0, r7
 8024b7c:	3408      	adds	r4, #8
 8024b7e:	4619      	mov	r1, r3
 8024b80:	e73f      	b.n	8024a02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024b82:	4291      	cmp	r1, r2
 8024b84:	d925      	bls.n	8024bd2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024b86:	f1a2 0310 	sub.w	r3, r2, #16
 8024b8a:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8024b8e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8024b92:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024b96:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024b9a:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8024b9e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024ba2:	42b5      	cmp	r5, r6
 8024ba4:	dd13      	ble.n	8024bce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024ba6:	461d      	mov	r5, r3
 8024ba8:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024bac:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024bb0:	3b08      	subs	r3, #8
 8024bb2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024bb6:	619e      	str	r6, [r3, #24]
 8024bb8:	42a8      	cmp	r0, r5
 8024bba:	686e      	ldr	r6, [r5, #4]
 8024bbc:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024bc0:	61de      	str	r6, [r3, #28]
 8024bc2:	825f      	strh	r7, [r3, #18]
 8024bc4:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024bc8:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024bcc:	d1dd      	bne.n	8024b8a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024bce:	3208      	adds	r2, #8
 8024bd0:	e7d7      	b.n	8024b82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024bd2:	466b      	mov	r3, sp
 8024bd4:	429c      	cmp	r4, r3
 8024bd6:	d903      	bls.n	8024be0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024bd8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024bdc:	3c08      	subs	r4, #8
 8024bde:	e710      	b.n	8024a02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024be0:	b051      	add	sp, #324	; 0x144
 8024be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024be6 <_ZN8touchgfx7Outline9sortCellsEv>:
 8024be6:	6881      	ldr	r1, [r0, #8]
 8024be8:	b111      	cbz	r1, 8024bf0 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024bea:	68c0      	ldr	r0, [r0, #12]
 8024bec:	f7ff bf03 	b.w	80249f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024bf0:	4770      	bx	lr

08024bf2 <_ZN8touchgfx7Outline8getCellsEv>:
 8024bf2:	b510      	push	{r4, lr}
 8024bf4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024bf6:	4604      	mov	r4, r0
 8024bf8:	07da      	lsls	r2, r3, #31
 8024bfa:	d507      	bpl.n	8024c0c <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024bfc:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024c00:	f7ff fe83 	bl	802490a <_ZN8touchgfx7Outline6lineToEii>
 8024c04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024c06:	f023 0301 	bic.w	r3, r3, #1
 8024c0a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024c0e:	079b      	lsls	r3, r3, #30
 8024c10:	d51a      	bpl.n	8024c48 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024c12:	8b62      	ldrh	r2, [r4, #26]
 8024c14:	8b23      	ldrh	r3, [r4, #24]
 8024c16:	4313      	orrs	r3, r2
 8024c18:	d00d      	beq.n	8024c36 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024c1a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	db09      	blt.n	8024c36 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024c22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024c24:	4293      	cmp	r3, r2
 8024c26:	da06      	bge.n	8024c36 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024c28:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024c2c:	429a      	cmp	r2, r3
 8024c2e:	d80d      	bhi.n	8024c4c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024c30:	2301      	movs	r3, #1
 8024c32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c36:	68a0      	ldr	r0, [r4, #8]
 8024c38:	b138      	cbz	r0, 8024c4a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024c3a:	4620      	mov	r0, r4
 8024c3c:	f7ff ffd3 	bl	8024be6 <_ZN8touchgfx7Outline9sortCellsEv>
 8024c40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024c42:	f023 0302 	bic.w	r3, r3, #2
 8024c46:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024c48:	68e0      	ldr	r0, [r4, #12]
 8024c4a:	bd10      	pop	{r4, pc}
 8024c4c:	f104 0314 	add.w	r3, r4, #20
 8024c50:	6922      	ldr	r2, [r4, #16]
 8024c52:	cb03      	ldmia	r3!, {r0, r1}
 8024c54:	6010      	str	r0, [r2, #0]
 8024c56:	6051      	str	r1, [r2, #4]
 8024c58:	6923      	ldr	r3, [r4, #16]
 8024c5a:	3308      	adds	r3, #8
 8024c5c:	6123      	str	r3, [r4, #16]
 8024c5e:	68a3      	ldr	r3, [r4, #8]
 8024c60:	3301      	adds	r3, #1
 8024c62:	60a3      	str	r3, [r4, #8]
 8024c64:	e7e7      	b.n	8024c36 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08024c66 <_ZN8touchgfx8ScanlineD1Ev>:
 8024c66:	4770      	bx	lr

08024c68 <_ZN8touchgfx8ScanlineD0Ev>:
 8024c68:	b510      	push	{r4, lr}
 8024c6a:	4604      	mov	r4, r0
 8024c6c:	2124      	movs	r1, #36	; 0x24
 8024c6e:	f000 f87a 	bl	8024d66 <_ZdlPvj>
 8024c72:	4620      	mov	r0, r4
 8024c74:	bd10      	pop	{r4, pc}

08024c76 <_ZN8touchgfx8Scanline5resetEv>:
 8024c76:	b510      	push	{r4, lr}
 8024c78:	4604      	mov	r4, r0
 8024c7a:	f7f3 f8f9 	bl	8017e70 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024c7e:	61a0      	str	r0, [r4, #24]
 8024c80:	f7f3 f8fc 	bl	8017e7c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024c84:	61e0      	str	r0, [r4, #28]
 8024c86:	f7f3 f8ff 	bl	8017e88 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024c8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024c8e:	6220      	str	r0, [r4, #32]
 8024c90:	6160      	str	r0, [r4, #20]
 8024c92:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024c96:	69e3      	ldr	r3, [r4, #28]
 8024c98:	6123      	str	r3, [r4, #16]
 8024c9a:	2300      	movs	r3, #0
 8024c9c:	60e3      	str	r3, [r4, #12]
 8024c9e:	bd10      	pop	{r4, pc}

08024ca0 <_ZN8touchgfx8ScanlineC1Ev>:
 8024ca0:	4b07      	ldr	r3, [pc, #28]	; (8024cc0 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8024ca2:	b510      	push	{r4, lr}
 8024ca4:	6003      	str	r3, [r0, #0]
 8024ca6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024caa:	4604      	mov	r4, r0
 8024cac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024cb0:	2300      	movs	r3, #0
 8024cb2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024cb6:	6143      	str	r3, [r0, #20]
 8024cb8:	f7ff ffdd 	bl	8024c76 <_ZN8touchgfx8Scanline5resetEv>
 8024cbc:	4620      	mov	r0, r4
 8024cbe:	bd10      	pop	{r4, pc}
 8024cc0:	0802a038 	.word	0x0802a038

08024cc4 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024cc8:	1e0c      	subs	r4, r1, #0
 8024cca:	4605      	mov	r5, r0
 8024ccc:	4617      	mov	r7, r2
 8024cce:	461e      	mov	r6, r3
 8024cd0:	da03      	bge.n	8024cda <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024cd2:	4426      	add	r6, r4
 8024cd4:	2e01      	cmp	r6, #1
 8024cd6:	d421      	bmi.n	8024d1c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024cd8:	2400      	movs	r4, #0
 8024cda:	f7f3 f8c3 	bl	8017e64 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024cde:	42a0      	cmp	r0, r4
 8024ce0:	d91c      	bls.n	8024d1c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024ce2:	eb04 0806 	add.w	r8, r4, r6
 8024ce6:	f7f3 f8bd 	bl	8017e64 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024cea:	4580      	cmp	r8, r0
 8024cec:	d902      	bls.n	8024cf4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024cee:	f7f3 f8b9 	bl	8017e64 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024cf2:	1b06      	subs	r6, r0, r4
 8024cf4:	69a8      	ldr	r0, [r5, #24]
 8024cf6:	4632      	mov	r2, r6
 8024cf8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024cfc:	4420      	add	r0, r4
 8024cfe:	f7f4 fdb0 	bl	8019862 <_ZN8touchgfx6memsetEPvhm>
 8024d02:	686b      	ldr	r3, [r5, #4]
 8024d04:	b2b2      	uxth	r2, r6
 8024d06:	3301      	adds	r3, #1
 8024d08:	42a3      	cmp	r3, r4
 8024d0a:	696b      	ldr	r3, [r5, #20]
 8024d0c:	d108      	bne.n	8024d20 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024d0e:	8819      	ldrh	r1, [r3, #0]
 8024d10:	440a      	add	r2, r1
 8024d12:	801a      	strh	r2, [r3, #0]
 8024d14:	3c01      	subs	r4, #1
 8024d16:	4434      	add	r4, r6
 8024d18:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d20:	1c99      	adds	r1, r3, #2
 8024d22:	6169      	str	r1, [r5, #20]
 8024d24:	805a      	strh	r2, [r3, #2]
 8024d26:	692b      	ldr	r3, [r5, #16]
 8024d28:	1c9a      	adds	r2, r3, #2
 8024d2a:	612a      	str	r2, [r5, #16]
 8024d2c:	805c      	strh	r4, [r3, #2]
 8024d2e:	68eb      	ldr	r3, [r5, #12]
 8024d30:	3301      	adds	r3, #1
 8024d32:	60eb      	str	r3, [r5, #12]
 8024d34:	e7ee      	b.n	8024d14 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024d36 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024d36:	2200      	movs	r2, #0
 8024d38:	6002      	str	r2, [r0, #0]
 8024d3a:	7102      	strb	r2, [r0, #4]
 8024d3c:	6102      	str	r2, [r0, #16]
 8024d3e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024d42:	4770      	bx	lr

08024d44 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024d44:	4770      	bx	lr

08024d46 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024d46:	6083      	str	r3, [r0, #8]
 8024d48:	9b00      	ldr	r3, [sp, #0]
 8024d4a:	6001      	str	r1, [r0, #0]
 8024d4c:	60c3      	str	r3, [r0, #12]
 8024d4e:	9b01      	ldr	r3, [sp, #4]
 8024d50:	7102      	strb	r2, [r0, #4]
 8024d52:	6103      	str	r3, [r0, #16]
 8024d54:	4770      	bx	lr

08024d56 <__aeabi_atexit>:
 8024d56:	460b      	mov	r3, r1
 8024d58:	4601      	mov	r1, r0
 8024d5a:	4618      	mov	r0, r3
 8024d5c:	f000 b852 	b.w	8024e04 <__cxa_atexit>

08024d60 <__cxa_pure_virtual>:
 8024d60:	b508      	push	{r3, lr}
 8024d62:	f000 f81f 	bl	8024da4 <_ZSt9terminatev>

08024d66 <_ZdlPvj>:
 8024d66:	f000 b80f 	b.w	8024d88 <_ZdlPv>

08024d6a <__cxa_guard_acquire>:
 8024d6a:	6803      	ldr	r3, [r0, #0]
 8024d6c:	07db      	lsls	r3, r3, #31
 8024d6e:	d406      	bmi.n	8024d7e <__cxa_guard_acquire+0x14>
 8024d70:	7843      	ldrb	r3, [r0, #1]
 8024d72:	b103      	cbz	r3, 8024d76 <__cxa_guard_acquire+0xc>
 8024d74:	deff      	udf	#255	; 0xff
 8024d76:	2301      	movs	r3, #1
 8024d78:	7043      	strb	r3, [r0, #1]
 8024d7a:	4618      	mov	r0, r3
 8024d7c:	4770      	bx	lr
 8024d7e:	2000      	movs	r0, #0
 8024d80:	4770      	bx	lr

08024d82 <__cxa_guard_release>:
 8024d82:	2301      	movs	r3, #1
 8024d84:	6003      	str	r3, [r0, #0]
 8024d86:	4770      	bx	lr

08024d88 <_ZdlPv>:
 8024d88:	f000 b88e 	b.w	8024ea8 <free>

08024d8c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024d8c:	b508      	push	{r3, lr}
 8024d8e:	4780      	blx	r0
 8024d90:	f000 f80d 	bl	8024dae <abort>

08024d94 <_ZSt13get_terminatev>:
 8024d94:	4b02      	ldr	r3, [pc, #8]	; (8024da0 <_ZSt13get_terminatev+0xc>)
 8024d96:	6818      	ldr	r0, [r3, #0]
 8024d98:	f3bf 8f5b 	dmb	ish
 8024d9c:	4770      	bx	lr
 8024d9e:	bf00      	nop
 8024da0:	200000ac 	.word	0x200000ac

08024da4 <_ZSt9terminatev>:
 8024da4:	b508      	push	{r3, lr}
 8024da6:	f7ff fff5 	bl	8024d94 <_ZSt13get_terminatev>
 8024daa:	f7ff ffef 	bl	8024d8c <_ZN10__cxxabiv111__terminateEPFvvE>

08024dae <abort>:
 8024dae:	b508      	push	{r3, lr}
 8024db0:	2006      	movs	r0, #6
 8024db2:	f000 fc3d 	bl	8025630 <raise>
 8024db6:	2001      	movs	r0, #1
 8024db8:	f7de fc82 	bl	80036c0 <_exit>

08024dbc <__assert_func>:
 8024dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024dbe:	461c      	mov	r4, r3
 8024dc0:	4b09      	ldr	r3, [pc, #36]	; (8024de8 <__assert_func+0x2c>)
 8024dc2:	681b      	ldr	r3, [r3, #0]
 8024dc4:	4605      	mov	r5, r0
 8024dc6:	68d8      	ldr	r0, [r3, #12]
 8024dc8:	b152      	cbz	r2, 8024de0 <__assert_func+0x24>
 8024dca:	4b08      	ldr	r3, [pc, #32]	; (8024dec <__assert_func+0x30>)
 8024dcc:	9100      	str	r1, [sp, #0]
 8024dce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024dd2:	4907      	ldr	r1, [pc, #28]	; (8024df0 <__assert_func+0x34>)
 8024dd4:	462b      	mov	r3, r5
 8024dd6:	4622      	mov	r2, r4
 8024dd8:	f000 f828 	bl	8024e2c <fiprintf>
 8024ddc:	f7ff ffe7 	bl	8024dae <abort>
 8024de0:	4b04      	ldr	r3, [pc, #16]	; (8024df4 <__assert_func+0x38>)
 8024de2:	461a      	mov	r2, r3
 8024de4:	e7f2      	b.n	8024dcc <__assert_func+0x10>
 8024de6:	bf00      	nop
 8024de8:	200000b0 	.word	0x200000b0
 8024dec:	0802a040 	.word	0x0802a040
 8024df0:	0802a04d 	.word	0x0802a04d
 8024df4:	0802a07b 	.word	0x0802a07b

08024df8 <atexit>:
 8024df8:	2300      	movs	r3, #0
 8024dfa:	4601      	mov	r1, r0
 8024dfc:	461a      	mov	r2, r3
 8024dfe:	4618      	mov	r0, r3
 8024e00:	f000 bcf2 	b.w	80257e8 <__register_exitproc>

08024e04 <__cxa_atexit>:
 8024e04:	b510      	push	{r4, lr}
 8024e06:	4c05      	ldr	r4, [pc, #20]	; (8024e1c <__cxa_atexit+0x18>)
 8024e08:	4613      	mov	r3, r2
 8024e0a:	b12c      	cbz	r4, 8024e18 <__cxa_atexit+0x14>
 8024e0c:	460a      	mov	r2, r1
 8024e0e:	4601      	mov	r1, r0
 8024e10:	2002      	movs	r0, #2
 8024e12:	f000 fce9 	bl	80257e8 <__register_exitproc>
 8024e16:	bd10      	pop	{r4, pc}
 8024e18:	4620      	mov	r0, r4
 8024e1a:	e7fc      	b.n	8024e16 <__cxa_atexit+0x12>
 8024e1c:	080257e9 	.word	0x080257e9

08024e20 <__errno>:
 8024e20:	4b01      	ldr	r3, [pc, #4]	; (8024e28 <__errno+0x8>)
 8024e22:	6818      	ldr	r0, [r3, #0]
 8024e24:	4770      	bx	lr
 8024e26:	bf00      	nop
 8024e28:	200000b0 	.word	0x200000b0

08024e2c <fiprintf>:
 8024e2c:	b40e      	push	{r1, r2, r3}
 8024e2e:	b503      	push	{r0, r1, lr}
 8024e30:	4601      	mov	r1, r0
 8024e32:	ab03      	add	r3, sp, #12
 8024e34:	4805      	ldr	r0, [pc, #20]	; (8024e4c <fiprintf+0x20>)
 8024e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8024e3a:	6800      	ldr	r0, [r0, #0]
 8024e3c:	9301      	str	r3, [sp, #4]
 8024e3e:	f000 f921 	bl	8025084 <_vfiprintf_r>
 8024e42:	b002      	add	sp, #8
 8024e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e48:	b003      	add	sp, #12
 8024e4a:	4770      	bx	lr
 8024e4c:	200000b0 	.word	0x200000b0

08024e50 <__libc_init_array>:
 8024e50:	b570      	push	{r4, r5, r6, lr}
 8024e52:	4e0d      	ldr	r6, [pc, #52]	; (8024e88 <__libc_init_array+0x38>)
 8024e54:	4c0d      	ldr	r4, [pc, #52]	; (8024e8c <__libc_init_array+0x3c>)
 8024e56:	1ba4      	subs	r4, r4, r6
 8024e58:	10a4      	asrs	r4, r4, #2
 8024e5a:	2500      	movs	r5, #0
 8024e5c:	42a5      	cmp	r5, r4
 8024e5e:	d109      	bne.n	8024e74 <__libc_init_array+0x24>
 8024e60:	4e0b      	ldr	r6, [pc, #44]	; (8024e90 <__libc_init_array+0x40>)
 8024e62:	4c0c      	ldr	r4, [pc, #48]	; (8024e94 <__libc_init_array+0x44>)
 8024e64:	f000 ffb0 	bl	8025dc8 <_init>
 8024e68:	1ba4      	subs	r4, r4, r6
 8024e6a:	10a4      	asrs	r4, r4, #2
 8024e6c:	2500      	movs	r5, #0
 8024e6e:	42a5      	cmp	r5, r4
 8024e70:	d105      	bne.n	8024e7e <__libc_init_array+0x2e>
 8024e72:	bd70      	pop	{r4, r5, r6, pc}
 8024e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024e78:	4798      	blx	r3
 8024e7a:	3501      	adds	r5, #1
 8024e7c:	e7ee      	b.n	8024e5c <__libc_init_array+0xc>
 8024e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024e82:	4798      	blx	r3
 8024e84:	3501      	adds	r5, #1
 8024e86:	e7f2      	b.n	8024e6e <__libc_init_array+0x1e>
 8024e88:	08061570 	.word	0x08061570
 8024e8c:	08061570 	.word	0x08061570
 8024e90:	08061570 	.word	0x08061570
 8024e94:	08061584 	.word	0x08061584

08024e98 <malloc>:
 8024e98:	4b02      	ldr	r3, [pc, #8]	; (8024ea4 <malloc+0xc>)
 8024e9a:	4601      	mov	r1, r0
 8024e9c:	6818      	ldr	r0, [r3, #0]
 8024e9e:	f000 b86d 	b.w	8024f7c <_malloc_r>
 8024ea2:	bf00      	nop
 8024ea4:	200000b0 	.word	0x200000b0

08024ea8 <free>:
 8024ea8:	4b02      	ldr	r3, [pc, #8]	; (8024eb4 <free+0xc>)
 8024eaa:	4601      	mov	r1, r0
 8024eac:	6818      	ldr	r0, [r3, #0]
 8024eae:	f000 b817 	b.w	8024ee0 <_free_r>
 8024eb2:	bf00      	nop
 8024eb4:	200000b0 	.word	0x200000b0

08024eb8 <memcpy>:
 8024eb8:	b510      	push	{r4, lr}
 8024eba:	1e43      	subs	r3, r0, #1
 8024ebc:	440a      	add	r2, r1
 8024ebe:	4291      	cmp	r1, r2
 8024ec0:	d100      	bne.n	8024ec4 <memcpy+0xc>
 8024ec2:	bd10      	pop	{r4, pc}
 8024ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024ecc:	e7f7      	b.n	8024ebe <memcpy+0x6>

08024ece <memset>:
 8024ece:	4402      	add	r2, r0
 8024ed0:	4603      	mov	r3, r0
 8024ed2:	4293      	cmp	r3, r2
 8024ed4:	d100      	bne.n	8024ed8 <memset+0xa>
 8024ed6:	4770      	bx	lr
 8024ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8024edc:	e7f9      	b.n	8024ed2 <memset+0x4>
	...

08024ee0 <_free_r>:
 8024ee0:	b538      	push	{r3, r4, r5, lr}
 8024ee2:	4605      	mov	r5, r0
 8024ee4:	2900      	cmp	r1, #0
 8024ee6:	d045      	beq.n	8024f74 <_free_r+0x94>
 8024ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024eec:	1f0c      	subs	r4, r1, #4
 8024eee:	2b00      	cmp	r3, #0
 8024ef0:	bfb8      	it	lt
 8024ef2:	18e4      	addlt	r4, r4, r3
 8024ef4:	f000 feba 	bl	8025c6c <__malloc_lock>
 8024ef8:	4a1f      	ldr	r2, [pc, #124]	; (8024f78 <_free_r+0x98>)
 8024efa:	6813      	ldr	r3, [r2, #0]
 8024efc:	4610      	mov	r0, r2
 8024efe:	b933      	cbnz	r3, 8024f0e <_free_r+0x2e>
 8024f00:	6063      	str	r3, [r4, #4]
 8024f02:	6014      	str	r4, [r2, #0]
 8024f04:	4628      	mov	r0, r5
 8024f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f0a:	f000 beb0 	b.w	8025c6e <__malloc_unlock>
 8024f0e:	42a3      	cmp	r3, r4
 8024f10:	d90c      	bls.n	8024f2c <_free_r+0x4c>
 8024f12:	6821      	ldr	r1, [r4, #0]
 8024f14:	1862      	adds	r2, r4, r1
 8024f16:	4293      	cmp	r3, r2
 8024f18:	bf04      	itt	eq
 8024f1a:	681a      	ldreq	r2, [r3, #0]
 8024f1c:	685b      	ldreq	r3, [r3, #4]
 8024f1e:	6063      	str	r3, [r4, #4]
 8024f20:	bf04      	itt	eq
 8024f22:	1852      	addeq	r2, r2, r1
 8024f24:	6022      	streq	r2, [r4, #0]
 8024f26:	6004      	str	r4, [r0, #0]
 8024f28:	e7ec      	b.n	8024f04 <_free_r+0x24>
 8024f2a:	4613      	mov	r3, r2
 8024f2c:	685a      	ldr	r2, [r3, #4]
 8024f2e:	b10a      	cbz	r2, 8024f34 <_free_r+0x54>
 8024f30:	42a2      	cmp	r2, r4
 8024f32:	d9fa      	bls.n	8024f2a <_free_r+0x4a>
 8024f34:	6819      	ldr	r1, [r3, #0]
 8024f36:	1858      	adds	r0, r3, r1
 8024f38:	42a0      	cmp	r0, r4
 8024f3a:	d10b      	bne.n	8024f54 <_free_r+0x74>
 8024f3c:	6820      	ldr	r0, [r4, #0]
 8024f3e:	4401      	add	r1, r0
 8024f40:	1858      	adds	r0, r3, r1
 8024f42:	4282      	cmp	r2, r0
 8024f44:	6019      	str	r1, [r3, #0]
 8024f46:	d1dd      	bne.n	8024f04 <_free_r+0x24>
 8024f48:	6810      	ldr	r0, [r2, #0]
 8024f4a:	6852      	ldr	r2, [r2, #4]
 8024f4c:	605a      	str	r2, [r3, #4]
 8024f4e:	4401      	add	r1, r0
 8024f50:	6019      	str	r1, [r3, #0]
 8024f52:	e7d7      	b.n	8024f04 <_free_r+0x24>
 8024f54:	d902      	bls.n	8024f5c <_free_r+0x7c>
 8024f56:	230c      	movs	r3, #12
 8024f58:	602b      	str	r3, [r5, #0]
 8024f5a:	e7d3      	b.n	8024f04 <_free_r+0x24>
 8024f5c:	6820      	ldr	r0, [r4, #0]
 8024f5e:	1821      	adds	r1, r4, r0
 8024f60:	428a      	cmp	r2, r1
 8024f62:	bf04      	itt	eq
 8024f64:	6811      	ldreq	r1, [r2, #0]
 8024f66:	6852      	ldreq	r2, [r2, #4]
 8024f68:	6062      	str	r2, [r4, #4]
 8024f6a:	bf04      	itt	eq
 8024f6c:	1809      	addeq	r1, r1, r0
 8024f6e:	6021      	streq	r1, [r4, #0]
 8024f70:	605c      	str	r4, [r3, #4]
 8024f72:	e7c7      	b.n	8024f04 <_free_r+0x24>
 8024f74:	bd38      	pop	{r3, r4, r5, pc}
 8024f76:	bf00      	nop
 8024f78:	2000be88 	.word	0x2000be88

08024f7c <_malloc_r>:
 8024f7c:	b570      	push	{r4, r5, r6, lr}
 8024f7e:	1ccd      	adds	r5, r1, #3
 8024f80:	f025 0503 	bic.w	r5, r5, #3
 8024f84:	3508      	adds	r5, #8
 8024f86:	2d0c      	cmp	r5, #12
 8024f88:	bf38      	it	cc
 8024f8a:	250c      	movcc	r5, #12
 8024f8c:	2d00      	cmp	r5, #0
 8024f8e:	4606      	mov	r6, r0
 8024f90:	db01      	blt.n	8024f96 <_malloc_r+0x1a>
 8024f92:	42a9      	cmp	r1, r5
 8024f94:	d903      	bls.n	8024f9e <_malloc_r+0x22>
 8024f96:	230c      	movs	r3, #12
 8024f98:	6033      	str	r3, [r6, #0]
 8024f9a:	2000      	movs	r0, #0
 8024f9c:	bd70      	pop	{r4, r5, r6, pc}
 8024f9e:	f000 fe65 	bl	8025c6c <__malloc_lock>
 8024fa2:	4a21      	ldr	r2, [pc, #132]	; (8025028 <_malloc_r+0xac>)
 8024fa4:	6814      	ldr	r4, [r2, #0]
 8024fa6:	4621      	mov	r1, r4
 8024fa8:	b991      	cbnz	r1, 8024fd0 <_malloc_r+0x54>
 8024faa:	4c20      	ldr	r4, [pc, #128]	; (802502c <_malloc_r+0xb0>)
 8024fac:	6823      	ldr	r3, [r4, #0]
 8024fae:	b91b      	cbnz	r3, 8024fb8 <_malloc_r+0x3c>
 8024fb0:	4630      	mov	r0, r6
 8024fb2:	f000 fb05 	bl	80255c0 <_sbrk_r>
 8024fb6:	6020      	str	r0, [r4, #0]
 8024fb8:	4629      	mov	r1, r5
 8024fba:	4630      	mov	r0, r6
 8024fbc:	f000 fb00 	bl	80255c0 <_sbrk_r>
 8024fc0:	1c43      	adds	r3, r0, #1
 8024fc2:	d124      	bne.n	802500e <_malloc_r+0x92>
 8024fc4:	230c      	movs	r3, #12
 8024fc6:	6033      	str	r3, [r6, #0]
 8024fc8:	4630      	mov	r0, r6
 8024fca:	f000 fe50 	bl	8025c6e <__malloc_unlock>
 8024fce:	e7e4      	b.n	8024f9a <_malloc_r+0x1e>
 8024fd0:	680b      	ldr	r3, [r1, #0]
 8024fd2:	1b5b      	subs	r3, r3, r5
 8024fd4:	d418      	bmi.n	8025008 <_malloc_r+0x8c>
 8024fd6:	2b0b      	cmp	r3, #11
 8024fd8:	d90f      	bls.n	8024ffa <_malloc_r+0x7e>
 8024fda:	600b      	str	r3, [r1, #0]
 8024fdc:	50cd      	str	r5, [r1, r3]
 8024fde:	18cc      	adds	r4, r1, r3
 8024fe0:	4630      	mov	r0, r6
 8024fe2:	f000 fe44 	bl	8025c6e <__malloc_unlock>
 8024fe6:	f104 000b 	add.w	r0, r4, #11
 8024fea:	1d23      	adds	r3, r4, #4
 8024fec:	f020 0007 	bic.w	r0, r0, #7
 8024ff0:	1ac3      	subs	r3, r0, r3
 8024ff2:	d0d3      	beq.n	8024f9c <_malloc_r+0x20>
 8024ff4:	425a      	negs	r2, r3
 8024ff6:	50e2      	str	r2, [r4, r3]
 8024ff8:	e7d0      	b.n	8024f9c <_malloc_r+0x20>
 8024ffa:	428c      	cmp	r4, r1
 8024ffc:	684b      	ldr	r3, [r1, #4]
 8024ffe:	bf16      	itet	ne
 8025000:	6063      	strne	r3, [r4, #4]
 8025002:	6013      	streq	r3, [r2, #0]
 8025004:	460c      	movne	r4, r1
 8025006:	e7eb      	b.n	8024fe0 <_malloc_r+0x64>
 8025008:	460c      	mov	r4, r1
 802500a:	6849      	ldr	r1, [r1, #4]
 802500c:	e7cc      	b.n	8024fa8 <_malloc_r+0x2c>
 802500e:	1cc4      	adds	r4, r0, #3
 8025010:	f024 0403 	bic.w	r4, r4, #3
 8025014:	42a0      	cmp	r0, r4
 8025016:	d005      	beq.n	8025024 <_malloc_r+0xa8>
 8025018:	1a21      	subs	r1, r4, r0
 802501a:	4630      	mov	r0, r6
 802501c:	f000 fad0 	bl	80255c0 <_sbrk_r>
 8025020:	3001      	adds	r0, #1
 8025022:	d0cf      	beq.n	8024fc4 <_malloc_r+0x48>
 8025024:	6025      	str	r5, [r4, #0]
 8025026:	e7db      	b.n	8024fe0 <_malloc_r+0x64>
 8025028:	2000be88 	.word	0x2000be88
 802502c:	2000be8c 	.word	0x2000be8c

08025030 <__sfputc_r>:
 8025030:	6893      	ldr	r3, [r2, #8]
 8025032:	3b01      	subs	r3, #1
 8025034:	2b00      	cmp	r3, #0
 8025036:	b410      	push	{r4}
 8025038:	6093      	str	r3, [r2, #8]
 802503a:	da08      	bge.n	802504e <__sfputc_r+0x1e>
 802503c:	6994      	ldr	r4, [r2, #24]
 802503e:	42a3      	cmp	r3, r4
 8025040:	db01      	blt.n	8025046 <__sfputc_r+0x16>
 8025042:	290a      	cmp	r1, #10
 8025044:	d103      	bne.n	802504e <__sfputc_r+0x1e>
 8025046:	f85d 4b04 	ldr.w	r4, [sp], #4
 802504a:	f000 bb0d 	b.w	8025668 <__swbuf_r>
 802504e:	6813      	ldr	r3, [r2, #0]
 8025050:	1c58      	adds	r0, r3, #1
 8025052:	6010      	str	r0, [r2, #0]
 8025054:	7019      	strb	r1, [r3, #0]
 8025056:	4608      	mov	r0, r1
 8025058:	f85d 4b04 	ldr.w	r4, [sp], #4
 802505c:	4770      	bx	lr

0802505e <__sfputs_r>:
 802505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025060:	4606      	mov	r6, r0
 8025062:	460f      	mov	r7, r1
 8025064:	4614      	mov	r4, r2
 8025066:	18d5      	adds	r5, r2, r3
 8025068:	42ac      	cmp	r4, r5
 802506a:	d101      	bne.n	8025070 <__sfputs_r+0x12>
 802506c:	2000      	movs	r0, #0
 802506e:	e007      	b.n	8025080 <__sfputs_r+0x22>
 8025070:	463a      	mov	r2, r7
 8025072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025076:	4630      	mov	r0, r6
 8025078:	f7ff ffda 	bl	8025030 <__sfputc_r>
 802507c:	1c43      	adds	r3, r0, #1
 802507e:	d1f3      	bne.n	8025068 <__sfputs_r+0xa>
 8025080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025084 <_vfiprintf_r>:
 8025084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025088:	460c      	mov	r4, r1
 802508a:	b09d      	sub	sp, #116	; 0x74
 802508c:	4617      	mov	r7, r2
 802508e:	461d      	mov	r5, r3
 8025090:	4606      	mov	r6, r0
 8025092:	b118      	cbz	r0, 802509c <_vfiprintf_r+0x18>
 8025094:	6983      	ldr	r3, [r0, #24]
 8025096:	b90b      	cbnz	r3, 802509c <_vfiprintf_r+0x18>
 8025098:	f000 fcfa 	bl	8025a90 <__sinit>
 802509c:	4b7c      	ldr	r3, [pc, #496]	; (8025290 <_vfiprintf_r+0x20c>)
 802509e:	429c      	cmp	r4, r3
 80250a0:	d158      	bne.n	8025154 <_vfiprintf_r+0xd0>
 80250a2:	6874      	ldr	r4, [r6, #4]
 80250a4:	89a3      	ldrh	r3, [r4, #12]
 80250a6:	0718      	lsls	r0, r3, #28
 80250a8:	d55e      	bpl.n	8025168 <_vfiprintf_r+0xe4>
 80250aa:	6923      	ldr	r3, [r4, #16]
 80250ac:	2b00      	cmp	r3, #0
 80250ae:	d05b      	beq.n	8025168 <_vfiprintf_r+0xe4>
 80250b0:	2300      	movs	r3, #0
 80250b2:	9309      	str	r3, [sp, #36]	; 0x24
 80250b4:	2320      	movs	r3, #32
 80250b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80250ba:	2330      	movs	r3, #48	; 0x30
 80250bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80250c0:	9503      	str	r5, [sp, #12]
 80250c2:	f04f 0b01 	mov.w	fp, #1
 80250c6:	46b8      	mov	r8, r7
 80250c8:	4645      	mov	r5, r8
 80250ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80250ce:	b10b      	cbz	r3, 80250d4 <_vfiprintf_r+0x50>
 80250d0:	2b25      	cmp	r3, #37	; 0x25
 80250d2:	d154      	bne.n	802517e <_vfiprintf_r+0xfa>
 80250d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80250d8:	d00b      	beq.n	80250f2 <_vfiprintf_r+0x6e>
 80250da:	4653      	mov	r3, sl
 80250dc:	463a      	mov	r2, r7
 80250de:	4621      	mov	r1, r4
 80250e0:	4630      	mov	r0, r6
 80250e2:	f7ff ffbc 	bl	802505e <__sfputs_r>
 80250e6:	3001      	adds	r0, #1
 80250e8:	f000 80c2 	beq.w	8025270 <_vfiprintf_r+0x1ec>
 80250ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250ee:	4453      	add	r3, sl
 80250f0:	9309      	str	r3, [sp, #36]	; 0x24
 80250f2:	f898 3000 	ldrb.w	r3, [r8]
 80250f6:	2b00      	cmp	r3, #0
 80250f8:	f000 80ba 	beq.w	8025270 <_vfiprintf_r+0x1ec>
 80250fc:	2300      	movs	r3, #0
 80250fe:	f04f 32ff 	mov.w	r2, #4294967295
 8025102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025106:	9304      	str	r3, [sp, #16]
 8025108:	9307      	str	r3, [sp, #28]
 802510a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802510e:	931a      	str	r3, [sp, #104]	; 0x68
 8025110:	46a8      	mov	r8, r5
 8025112:	2205      	movs	r2, #5
 8025114:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025118:	485e      	ldr	r0, [pc, #376]	; (8025294 <_vfiprintf_r+0x210>)
 802511a:	f7db f879 	bl	8000210 <memchr>
 802511e:	9b04      	ldr	r3, [sp, #16]
 8025120:	bb78      	cbnz	r0, 8025182 <_vfiprintf_r+0xfe>
 8025122:	06d9      	lsls	r1, r3, #27
 8025124:	bf44      	itt	mi
 8025126:	2220      	movmi	r2, #32
 8025128:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802512c:	071a      	lsls	r2, r3, #28
 802512e:	bf44      	itt	mi
 8025130:	222b      	movmi	r2, #43	; 0x2b
 8025132:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025136:	782a      	ldrb	r2, [r5, #0]
 8025138:	2a2a      	cmp	r2, #42	; 0x2a
 802513a:	d02a      	beq.n	8025192 <_vfiprintf_r+0x10e>
 802513c:	9a07      	ldr	r2, [sp, #28]
 802513e:	46a8      	mov	r8, r5
 8025140:	2000      	movs	r0, #0
 8025142:	250a      	movs	r5, #10
 8025144:	4641      	mov	r1, r8
 8025146:	f811 3b01 	ldrb.w	r3, [r1], #1
 802514a:	3b30      	subs	r3, #48	; 0x30
 802514c:	2b09      	cmp	r3, #9
 802514e:	d969      	bls.n	8025224 <_vfiprintf_r+0x1a0>
 8025150:	b360      	cbz	r0, 80251ac <_vfiprintf_r+0x128>
 8025152:	e024      	b.n	802519e <_vfiprintf_r+0x11a>
 8025154:	4b50      	ldr	r3, [pc, #320]	; (8025298 <_vfiprintf_r+0x214>)
 8025156:	429c      	cmp	r4, r3
 8025158:	d101      	bne.n	802515e <_vfiprintf_r+0xda>
 802515a:	68b4      	ldr	r4, [r6, #8]
 802515c:	e7a2      	b.n	80250a4 <_vfiprintf_r+0x20>
 802515e:	4b4f      	ldr	r3, [pc, #316]	; (802529c <_vfiprintf_r+0x218>)
 8025160:	429c      	cmp	r4, r3
 8025162:	bf08      	it	eq
 8025164:	68f4      	ldreq	r4, [r6, #12]
 8025166:	e79d      	b.n	80250a4 <_vfiprintf_r+0x20>
 8025168:	4621      	mov	r1, r4
 802516a:	4630      	mov	r0, r6
 802516c:	f000 face 	bl	802570c <__swsetup_r>
 8025170:	2800      	cmp	r0, #0
 8025172:	d09d      	beq.n	80250b0 <_vfiprintf_r+0x2c>
 8025174:	f04f 30ff 	mov.w	r0, #4294967295
 8025178:	b01d      	add	sp, #116	; 0x74
 802517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802517e:	46a8      	mov	r8, r5
 8025180:	e7a2      	b.n	80250c8 <_vfiprintf_r+0x44>
 8025182:	4a44      	ldr	r2, [pc, #272]	; (8025294 <_vfiprintf_r+0x210>)
 8025184:	1a80      	subs	r0, r0, r2
 8025186:	fa0b f000 	lsl.w	r0, fp, r0
 802518a:	4318      	orrs	r0, r3
 802518c:	9004      	str	r0, [sp, #16]
 802518e:	4645      	mov	r5, r8
 8025190:	e7be      	b.n	8025110 <_vfiprintf_r+0x8c>
 8025192:	9a03      	ldr	r2, [sp, #12]
 8025194:	1d11      	adds	r1, r2, #4
 8025196:	6812      	ldr	r2, [r2, #0]
 8025198:	9103      	str	r1, [sp, #12]
 802519a:	2a00      	cmp	r2, #0
 802519c:	db01      	blt.n	80251a2 <_vfiprintf_r+0x11e>
 802519e:	9207      	str	r2, [sp, #28]
 80251a0:	e004      	b.n	80251ac <_vfiprintf_r+0x128>
 80251a2:	4252      	negs	r2, r2
 80251a4:	f043 0302 	orr.w	r3, r3, #2
 80251a8:	9207      	str	r2, [sp, #28]
 80251aa:	9304      	str	r3, [sp, #16]
 80251ac:	f898 3000 	ldrb.w	r3, [r8]
 80251b0:	2b2e      	cmp	r3, #46	; 0x2e
 80251b2:	d10e      	bne.n	80251d2 <_vfiprintf_r+0x14e>
 80251b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80251b8:	2b2a      	cmp	r3, #42	; 0x2a
 80251ba:	d138      	bne.n	802522e <_vfiprintf_r+0x1aa>
 80251bc:	9b03      	ldr	r3, [sp, #12]
 80251be:	1d1a      	adds	r2, r3, #4
 80251c0:	681b      	ldr	r3, [r3, #0]
 80251c2:	9203      	str	r2, [sp, #12]
 80251c4:	2b00      	cmp	r3, #0
 80251c6:	bfb8      	it	lt
 80251c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80251cc:	f108 0802 	add.w	r8, r8, #2
 80251d0:	9305      	str	r3, [sp, #20]
 80251d2:	4d33      	ldr	r5, [pc, #204]	; (80252a0 <_vfiprintf_r+0x21c>)
 80251d4:	f898 1000 	ldrb.w	r1, [r8]
 80251d8:	2203      	movs	r2, #3
 80251da:	4628      	mov	r0, r5
 80251dc:	f7db f818 	bl	8000210 <memchr>
 80251e0:	b140      	cbz	r0, 80251f4 <_vfiprintf_r+0x170>
 80251e2:	2340      	movs	r3, #64	; 0x40
 80251e4:	1b40      	subs	r0, r0, r5
 80251e6:	fa03 f000 	lsl.w	r0, r3, r0
 80251ea:	9b04      	ldr	r3, [sp, #16]
 80251ec:	4303      	orrs	r3, r0
 80251ee:	f108 0801 	add.w	r8, r8, #1
 80251f2:	9304      	str	r3, [sp, #16]
 80251f4:	f898 1000 	ldrb.w	r1, [r8]
 80251f8:	482a      	ldr	r0, [pc, #168]	; (80252a4 <_vfiprintf_r+0x220>)
 80251fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80251fe:	2206      	movs	r2, #6
 8025200:	f108 0701 	add.w	r7, r8, #1
 8025204:	f7db f804 	bl	8000210 <memchr>
 8025208:	2800      	cmp	r0, #0
 802520a:	d037      	beq.n	802527c <_vfiprintf_r+0x1f8>
 802520c:	4b26      	ldr	r3, [pc, #152]	; (80252a8 <_vfiprintf_r+0x224>)
 802520e:	bb1b      	cbnz	r3, 8025258 <_vfiprintf_r+0x1d4>
 8025210:	9b03      	ldr	r3, [sp, #12]
 8025212:	3307      	adds	r3, #7
 8025214:	f023 0307 	bic.w	r3, r3, #7
 8025218:	3308      	adds	r3, #8
 802521a:	9303      	str	r3, [sp, #12]
 802521c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802521e:	444b      	add	r3, r9
 8025220:	9309      	str	r3, [sp, #36]	; 0x24
 8025222:	e750      	b.n	80250c6 <_vfiprintf_r+0x42>
 8025224:	fb05 3202 	mla	r2, r5, r2, r3
 8025228:	2001      	movs	r0, #1
 802522a:	4688      	mov	r8, r1
 802522c:	e78a      	b.n	8025144 <_vfiprintf_r+0xc0>
 802522e:	2300      	movs	r3, #0
 8025230:	f108 0801 	add.w	r8, r8, #1
 8025234:	9305      	str	r3, [sp, #20]
 8025236:	4619      	mov	r1, r3
 8025238:	250a      	movs	r5, #10
 802523a:	4640      	mov	r0, r8
 802523c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025240:	3a30      	subs	r2, #48	; 0x30
 8025242:	2a09      	cmp	r2, #9
 8025244:	d903      	bls.n	802524e <_vfiprintf_r+0x1ca>
 8025246:	2b00      	cmp	r3, #0
 8025248:	d0c3      	beq.n	80251d2 <_vfiprintf_r+0x14e>
 802524a:	9105      	str	r1, [sp, #20]
 802524c:	e7c1      	b.n	80251d2 <_vfiprintf_r+0x14e>
 802524e:	fb05 2101 	mla	r1, r5, r1, r2
 8025252:	2301      	movs	r3, #1
 8025254:	4680      	mov	r8, r0
 8025256:	e7f0      	b.n	802523a <_vfiprintf_r+0x1b6>
 8025258:	ab03      	add	r3, sp, #12
 802525a:	9300      	str	r3, [sp, #0]
 802525c:	4622      	mov	r2, r4
 802525e:	4b13      	ldr	r3, [pc, #76]	; (80252ac <_vfiprintf_r+0x228>)
 8025260:	a904      	add	r1, sp, #16
 8025262:	4630      	mov	r0, r6
 8025264:	f3af 8000 	nop.w
 8025268:	f1b0 3fff 	cmp.w	r0, #4294967295
 802526c:	4681      	mov	r9, r0
 802526e:	d1d5      	bne.n	802521c <_vfiprintf_r+0x198>
 8025270:	89a3      	ldrh	r3, [r4, #12]
 8025272:	065b      	lsls	r3, r3, #25
 8025274:	f53f af7e 	bmi.w	8025174 <_vfiprintf_r+0xf0>
 8025278:	9809      	ldr	r0, [sp, #36]	; 0x24
 802527a:	e77d      	b.n	8025178 <_vfiprintf_r+0xf4>
 802527c:	ab03      	add	r3, sp, #12
 802527e:	9300      	str	r3, [sp, #0]
 8025280:	4622      	mov	r2, r4
 8025282:	4b0a      	ldr	r3, [pc, #40]	; (80252ac <_vfiprintf_r+0x228>)
 8025284:	a904      	add	r1, sp, #16
 8025286:	4630      	mov	r0, r6
 8025288:	f000 f888 	bl	802539c <_printf_i>
 802528c:	e7ec      	b.n	8025268 <_vfiprintf_r+0x1e4>
 802528e:	bf00      	nop
 8025290:	0802a0d8 	.word	0x0802a0d8
 8025294:	0802a080 	.word	0x0802a080
 8025298:	0802a0f8 	.word	0x0802a0f8
 802529c:	0802a0b8 	.word	0x0802a0b8
 80252a0:	0802a086 	.word	0x0802a086
 80252a4:	0802a08a 	.word	0x0802a08a
 80252a8:	00000000 	.word	0x00000000
 80252ac:	0802505f 	.word	0x0802505f

080252b0 <_printf_common>:
 80252b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80252b4:	4691      	mov	r9, r2
 80252b6:	461f      	mov	r7, r3
 80252b8:	688a      	ldr	r2, [r1, #8]
 80252ba:	690b      	ldr	r3, [r1, #16]
 80252bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80252c0:	4293      	cmp	r3, r2
 80252c2:	bfb8      	it	lt
 80252c4:	4613      	movlt	r3, r2
 80252c6:	f8c9 3000 	str.w	r3, [r9]
 80252ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80252ce:	4606      	mov	r6, r0
 80252d0:	460c      	mov	r4, r1
 80252d2:	b112      	cbz	r2, 80252da <_printf_common+0x2a>
 80252d4:	3301      	adds	r3, #1
 80252d6:	f8c9 3000 	str.w	r3, [r9]
 80252da:	6823      	ldr	r3, [r4, #0]
 80252dc:	0699      	lsls	r1, r3, #26
 80252de:	bf42      	ittt	mi
 80252e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80252e4:	3302      	addmi	r3, #2
 80252e6:	f8c9 3000 	strmi.w	r3, [r9]
 80252ea:	6825      	ldr	r5, [r4, #0]
 80252ec:	f015 0506 	ands.w	r5, r5, #6
 80252f0:	d107      	bne.n	8025302 <_printf_common+0x52>
 80252f2:	f104 0a19 	add.w	sl, r4, #25
 80252f6:	68e3      	ldr	r3, [r4, #12]
 80252f8:	f8d9 2000 	ldr.w	r2, [r9]
 80252fc:	1a9b      	subs	r3, r3, r2
 80252fe:	42ab      	cmp	r3, r5
 8025300:	dc28      	bgt.n	8025354 <_printf_common+0xa4>
 8025302:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025306:	6822      	ldr	r2, [r4, #0]
 8025308:	3300      	adds	r3, #0
 802530a:	bf18      	it	ne
 802530c:	2301      	movne	r3, #1
 802530e:	0692      	lsls	r2, r2, #26
 8025310:	d42d      	bmi.n	802536e <_printf_common+0xbe>
 8025312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025316:	4639      	mov	r1, r7
 8025318:	4630      	mov	r0, r6
 802531a:	47c0      	blx	r8
 802531c:	3001      	adds	r0, #1
 802531e:	d020      	beq.n	8025362 <_printf_common+0xb2>
 8025320:	6823      	ldr	r3, [r4, #0]
 8025322:	68e5      	ldr	r5, [r4, #12]
 8025324:	f8d9 2000 	ldr.w	r2, [r9]
 8025328:	f003 0306 	and.w	r3, r3, #6
 802532c:	2b04      	cmp	r3, #4
 802532e:	bf08      	it	eq
 8025330:	1aad      	subeq	r5, r5, r2
 8025332:	68a3      	ldr	r3, [r4, #8]
 8025334:	6922      	ldr	r2, [r4, #16]
 8025336:	bf0c      	ite	eq
 8025338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802533c:	2500      	movne	r5, #0
 802533e:	4293      	cmp	r3, r2
 8025340:	bfc4      	itt	gt
 8025342:	1a9b      	subgt	r3, r3, r2
 8025344:	18ed      	addgt	r5, r5, r3
 8025346:	f04f 0900 	mov.w	r9, #0
 802534a:	341a      	adds	r4, #26
 802534c:	454d      	cmp	r5, r9
 802534e:	d11a      	bne.n	8025386 <_printf_common+0xd6>
 8025350:	2000      	movs	r0, #0
 8025352:	e008      	b.n	8025366 <_printf_common+0xb6>
 8025354:	2301      	movs	r3, #1
 8025356:	4652      	mov	r2, sl
 8025358:	4639      	mov	r1, r7
 802535a:	4630      	mov	r0, r6
 802535c:	47c0      	blx	r8
 802535e:	3001      	adds	r0, #1
 8025360:	d103      	bne.n	802536a <_printf_common+0xba>
 8025362:	f04f 30ff 	mov.w	r0, #4294967295
 8025366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802536a:	3501      	adds	r5, #1
 802536c:	e7c3      	b.n	80252f6 <_printf_common+0x46>
 802536e:	18e1      	adds	r1, r4, r3
 8025370:	1c5a      	adds	r2, r3, #1
 8025372:	2030      	movs	r0, #48	; 0x30
 8025374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025378:	4422      	add	r2, r4
 802537a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802537e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025382:	3302      	adds	r3, #2
 8025384:	e7c5      	b.n	8025312 <_printf_common+0x62>
 8025386:	2301      	movs	r3, #1
 8025388:	4622      	mov	r2, r4
 802538a:	4639      	mov	r1, r7
 802538c:	4630      	mov	r0, r6
 802538e:	47c0      	blx	r8
 8025390:	3001      	adds	r0, #1
 8025392:	d0e6      	beq.n	8025362 <_printf_common+0xb2>
 8025394:	f109 0901 	add.w	r9, r9, #1
 8025398:	e7d8      	b.n	802534c <_printf_common+0x9c>
	...

0802539c <_printf_i>:
 802539c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80253a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80253a4:	460c      	mov	r4, r1
 80253a6:	7e09      	ldrb	r1, [r1, #24]
 80253a8:	b085      	sub	sp, #20
 80253aa:	296e      	cmp	r1, #110	; 0x6e
 80253ac:	4617      	mov	r7, r2
 80253ae:	4606      	mov	r6, r0
 80253b0:	4698      	mov	r8, r3
 80253b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80253b4:	f000 80b3 	beq.w	802551e <_printf_i+0x182>
 80253b8:	d822      	bhi.n	8025400 <_printf_i+0x64>
 80253ba:	2963      	cmp	r1, #99	; 0x63
 80253bc:	d036      	beq.n	802542c <_printf_i+0x90>
 80253be:	d80a      	bhi.n	80253d6 <_printf_i+0x3a>
 80253c0:	2900      	cmp	r1, #0
 80253c2:	f000 80b9 	beq.w	8025538 <_printf_i+0x19c>
 80253c6:	2958      	cmp	r1, #88	; 0x58
 80253c8:	f000 8083 	beq.w	80254d2 <_printf_i+0x136>
 80253cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80253d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80253d4:	e032      	b.n	802543c <_printf_i+0xa0>
 80253d6:	2964      	cmp	r1, #100	; 0x64
 80253d8:	d001      	beq.n	80253de <_printf_i+0x42>
 80253da:	2969      	cmp	r1, #105	; 0x69
 80253dc:	d1f6      	bne.n	80253cc <_printf_i+0x30>
 80253de:	6820      	ldr	r0, [r4, #0]
 80253e0:	6813      	ldr	r3, [r2, #0]
 80253e2:	0605      	lsls	r5, r0, #24
 80253e4:	f103 0104 	add.w	r1, r3, #4
 80253e8:	d52a      	bpl.n	8025440 <_printf_i+0xa4>
 80253ea:	681b      	ldr	r3, [r3, #0]
 80253ec:	6011      	str	r1, [r2, #0]
 80253ee:	2b00      	cmp	r3, #0
 80253f0:	da03      	bge.n	80253fa <_printf_i+0x5e>
 80253f2:	222d      	movs	r2, #45	; 0x2d
 80253f4:	425b      	negs	r3, r3
 80253f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80253fa:	486f      	ldr	r0, [pc, #444]	; (80255b8 <_printf_i+0x21c>)
 80253fc:	220a      	movs	r2, #10
 80253fe:	e039      	b.n	8025474 <_printf_i+0xd8>
 8025400:	2973      	cmp	r1, #115	; 0x73
 8025402:	f000 809d 	beq.w	8025540 <_printf_i+0x1a4>
 8025406:	d808      	bhi.n	802541a <_printf_i+0x7e>
 8025408:	296f      	cmp	r1, #111	; 0x6f
 802540a:	d020      	beq.n	802544e <_printf_i+0xb2>
 802540c:	2970      	cmp	r1, #112	; 0x70
 802540e:	d1dd      	bne.n	80253cc <_printf_i+0x30>
 8025410:	6823      	ldr	r3, [r4, #0]
 8025412:	f043 0320 	orr.w	r3, r3, #32
 8025416:	6023      	str	r3, [r4, #0]
 8025418:	e003      	b.n	8025422 <_printf_i+0x86>
 802541a:	2975      	cmp	r1, #117	; 0x75
 802541c:	d017      	beq.n	802544e <_printf_i+0xb2>
 802541e:	2978      	cmp	r1, #120	; 0x78
 8025420:	d1d4      	bne.n	80253cc <_printf_i+0x30>
 8025422:	2378      	movs	r3, #120	; 0x78
 8025424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025428:	4864      	ldr	r0, [pc, #400]	; (80255bc <_printf_i+0x220>)
 802542a:	e055      	b.n	80254d8 <_printf_i+0x13c>
 802542c:	6813      	ldr	r3, [r2, #0]
 802542e:	1d19      	adds	r1, r3, #4
 8025430:	681b      	ldr	r3, [r3, #0]
 8025432:	6011      	str	r1, [r2, #0]
 8025434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802543c:	2301      	movs	r3, #1
 802543e:	e08c      	b.n	802555a <_printf_i+0x1be>
 8025440:	681b      	ldr	r3, [r3, #0]
 8025442:	6011      	str	r1, [r2, #0]
 8025444:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025448:	bf18      	it	ne
 802544a:	b21b      	sxthne	r3, r3
 802544c:	e7cf      	b.n	80253ee <_printf_i+0x52>
 802544e:	6813      	ldr	r3, [r2, #0]
 8025450:	6825      	ldr	r5, [r4, #0]
 8025452:	1d18      	adds	r0, r3, #4
 8025454:	6010      	str	r0, [r2, #0]
 8025456:	0628      	lsls	r0, r5, #24
 8025458:	d501      	bpl.n	802545e <_printf_i+0xc2>
 802545a:	681b      	ldr	r3, [r3, #0]
 802545c:	e002      	b.n	8025464 <_printf_i+0xc8>
 802545e:	0668      	lsls	r0, r5, #25
 8025460:	d5fb      	bpl.n	802545a <_printf_i+0xbe>
 8025462:	881b      	ldrh	r3, [r3, #0]
 8025464:	4854      	ldr	r0, [pc, #336]	; (80255b8 <_printf_i+0x21c>)
 8025466:	296f      	cmp	r1, #111	; 0x6f
 8025468:	bf14      	ite	ne
 802546a:	220a      	movne	r2, #10
 802546c:	2208      	moveq	r2, #8
 802546e:	2100      	movs	r1, #0
 8025470:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025474:	6865      	ldr	r5, [r4, #4]
 8025476:	60a5      	str	r5, [r4, #8]
 8025478:	2d00      	cmp	r5, #0
 802547a:	f2c0 8095 	blt.w	80255a8 <_printf_i+0x20c>
 802547e:	6821      	ldr	r1, [r4, #0]
 8025480:	f021 0104 	bic.w	r1, r1, #4
 8025484:	6021      	str	r1, [r4, #0]
 8025486:	2b00      	cmp	r3, #0
 8025488:	d13d      	bne.n	8025506 <_printf_i+0x16a>
 802548a:	2d00      	cmp	r5, #0
 802548c:	f040 808e 	bne.w	80255ac <_printf_i+0x210>
 8025490:	4665      	mov	r5, ip
 8025492:	2a08      	cmp	r2, #8
 8025494:	d10b      	bne.n	80254ae <_printf_i+0x112>
 8025496:	6823      	ldr	r3, [r4, #0]
 8025498:	07db      	lsls	r3, r3, #31
 802549a:	d508      	bpl.n	80254ae <_printf_i+0x112>
 802549c:	6923      	ldr	r3, [r4, #16]
 802549e:	6862      	ldr	r2, [r4, #4]
 80254a0:	429a      	cmp	r2, r3
 80254a2:	bfde      	ittt	le
 80254a4:	2330      	movle	r3, #48	; 0x30
 80254a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80254aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80254ae:	ebac 0305 	sub.w	r3, ip, r5
 80254b2:	6123      	str	r3, [r4, #16]
 80254b4:	f8cd 8000 	str.w	r8, [sp]
 80254b8:	463b      	mov	r3, r7
 80254ba:	aa03      	add	r2, sp, #12
 80254bc:	4621      	mov	r1, r4
 80254be:	4630      	mov	r0, r6
 80254c0:	f7ff fef6 	bl	80252b0 <_printf_common>
 80254c4:	3001      	adds	r0, #1
 80254c6:	d14d      	bne.n	8025564 <_printf_i+0x1c8>
 80254c8:	f04f 30ff 	mov.w	r0, #4294967295
 80254cc:	b005      	add	sp, #20
 80254ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80254d2:	4839      	ldr	r0, [pc, #228]	; (80255b8 <_printf_i+0x21c>)
 80254d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80254d8:	6813      	ldr	r3, [r2, #0]
 80254da:	6821      	ldr	r1, [r4, #0]
 80254dc:	1d1d      	adds	r5, r3, #4
 80254de:	681b      	ldr	r3, [r3, #0]
 80254e0:	6015      	str	r5, [r2, #0]
 80254e2:	060a      	lsls	r2, r1, #24
 80254e4:	d50b      	bpl.n	80254fe <_printf_i+0x162>
 80254e6:	07ca      	lsls	r2, r1, #31
 80254e8:	bf44      	itt	mi
 80254ea:	f041 0120 	orrmi.w	r1, r1, #32
 80254ee:	6021      	strmi	r1, [r4, #0]
 80254f0:	b91b      	cbnz	r3, 80254fa <_printf_i+0x15e>
 80254f2:	6822      	ldr	r2, [r4, #0]
 80254f4:	f022 0220 	bic.w	r2, r2, #32
 80254f8:	6022      	str	r2, [r4, #0]
 80254fa:	2210      	movs	r2, #16
 80254fc:	e7b7      	b.n	802546e <_printf_i+0xd2>
 80254fe:	064d      	lsls	r5, r1, #25
 8025500:	bf48      	it	mi
 8025502:	b29b      	uxthmi	r3, r3
 8025504:	e7ef      	b.n	80254e6 <_printf_i+0x14a>
 8025506:	4665      	mov	r5, ip
 8025508:	fbb3 f1f2 	udiv	r1, r3, r2
 802550c:	fb02 3311 	mls	r3, r2, r1, r3
 8025510:	5cc3      	ldrb	r3, [r0, r3]
 8025512:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025516:	460b      	mov	r3, r1
 8025518:	2900      	cmp	r1, #0
 802551a:	d1f5      	bne.n	8025508 <_printf_i+0x16c>
 802551c:	e7b9      	b.n	8025492 <_printf_i+0xf6>
 802551e:	6813      	ldr	r3, [r2, #0]
 8025520:	6825      	ldr	r5, [r4, #0]
 8025522:	6961      	ldr	r1, [r4, #20]
 8025524:	1d18      	adds	r0, r3, #4
 8025526:	6010      	str	r0, [r2, #0]
 8025528:	0628      	lsls	r0, r5, #24
 802552a:	681b      	ldr	r3, [r3, #0]
 802552c:	d501      	bpl.n	8025532 <_printf_i+0x196>
 802552e:	6019      	str	r1, [r3, #0]
 8025530:	e002      	b.n	8025538 <_printf_i+0x19c>
 8025532:	066a      	lsls	r2, r5, #25
 8025534:	d5fb      	bpl.n	802552e <_printf_i+0x192>
 8025536:	8019      	strh	r1, [r3, #0]
 8025538:	2300      	movs	r3, #0
 802553a:	6123      	str	r3, [r4, #16]
 802553c:	4665      	mov	r5, ip
 802553e:	e7b9      	b.n	80254b4 <_printf_i+0x118>
 8025540:	6813      	ldr	r3, [r2, #0]
 8025542:	1d19      	adds	r1, r3, #4
 8025544:	6011      	str	r1, [r2, #0]
 8025546:	681d      	ldr	r5, [r3, #0]
 8025548:	6862      	ldr	r2, [r4, #4]
 802554a:	2100      	movs	r1, #0
 802554c:	4628      	mov	r0, r5
 802554e:	f7da fe5f 	bl	8000210 <memchr>
 8025552:	b108      	cbz	r0, 8025558 <_printf_i+0x1bc>
 8025554:	1b40      	subs	r0, r0, r5
 8025556:	6060      	str	r0, [r4, #4]
 8025558:	6863      	ldr	r3, [r4, #4]
 802555a:	6123      	str	r3, [r4, #16]
 802555c:	2300      	movs	r3, #0
 802555e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025562:	e7a7      	b.n	80254b4 <_printf_i+0x118>
 8025564:	6923      	ldr	r3, [r4, #16]
 8025566:	462a      	mov	r2, r5
 8025568:	4639      	mov	r1, r7
 802556a:	4630      	mov	r0, r6
 802556c:	47c0      	blx	r8
 802556e:	3001      	adds	r0, #1
 8025570:	d0aa      	beq.n	80254c8 <_printf_i+0x12c>
 8025572:	6823      	ldr	r3, [r4, #0]
 8025574:	079b      	lsls	r3, r3, #30
 8025576:	d413      	bmi.n	80255a0 <_printf_i+0x204>
 8025578:	68e0      	ldr	r0, [r4, #12]
 802557a:	9b03      	ldr	r3, [sp, #12]
 802557c:	4298      	cmp	r0, r3
 802557e:	bfb8      	it	lt
 8025580:	4618      	movlt	r0, r3
 8025582:	e7a3      	b.n	80254cc <_printf_i+0x130>
 8025584:	2301      	movs	r3, #1
 8025586:	464a      	mov	r2, r9
 8025588:	4639      	mov	r1, r7
 802558a:	4630      	mov	r0, r6
 802558c:	47c0      	blx	r8
 802558e:	3001      	adds	r0, #1
 8025590:	d09a      	beq.n	80254c8 <_printf_i+0x12c>
 8025592:	3501      	adds	r5, #1
 8025594:	68e3      	ldr	r3, [r4, #12]
 8025596:	9a03      	ldr	r2, [sp, #12]
 8025598:	1a9b      	subs	r3, r3, r2
 802559a:	42ab      	cmp	r3, r5
 802559c:	dcf2      	bgt.n	8025584 <_printf_i+0x1e8>
 802559e:	e7eb      	b.n	8025578 <_printf_i+0x1dc>
 80255a0:	2500      	movs	r5, #0
 80255a2:	f104 0919 	add.w	r9, r4, #25
 80255a6:	e7f5      	b.n	8025594 <_printf_i+0x1f8>
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	d1ac      	bne.n	8025506 <_printf_i+0x16a>
 80255ac:	7803      	ldrb	r3, [r0, #0]
 80255ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80255b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80255b6:	e76c      	b.n	8025492 <_printf_i+0xf6>
 80255b8:	0802a091 	.word	0x0802a091
 80255bc:	0802a0a2 	.word	0x0802a0a2

080255c0 <_sbrk_r>:
 80255c0:	b538      	push	{r3, r4, r5, lr}
 80255c2:	4c06      	ldr	r4, [pc, #24]	; (80255dc <_sbrk_r+0x1c>)
 80255c4:	2300      	movs	r3, #0
 80255c6:	4605      	mov	r5, r0
 80255c8:	4608      	mov	r0, r1
 80255ca:	6023      	str	r3, [r4, #0]
 80255cc:	f7de f8f0 	bl	80037b0 <_sbrk>
 80255d0:	1c43      	adds	r3, r0, #1
 80255d2:	d102      	bne.n	80255da <_sbrk_r+0x1a>
 80255d4:	6823      	ldr	r3, [r4, #0]
 80255d6:	b103      	cbz	r3, 80255da <_sbrk_r+0x1a>
 80255d8:	602b      	str	r3, [r5, #0]
 80255da:	bd38      	pop	{r3, r4, r5, pc}
 80255dc:	2000cc2c 	.word	0x2000cc2c

080255e0 <_raise_r>:
 80255e0:	291f      	cmp	r1, #31
 80255e2:	b538      	push	{r3, r4, r5, lr}
 80255e4:	4604      	mov	r4, r0
 80255e6:	460d      	mov	r5, r1
 80255e8:	d904      	bls.n	80255f4 <_raise_r+0x14>
 80255ea:	2316      	movs	r3, #22
 80255ec:	6003      	str	r3, [r0, #0]
 80255ee:	f04f 30ff 	mov.w	r0, #4294967295
 80255f2:	bd38      	pop	{r3, r4, r5, pc}
 80255f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80255f6:	b112      	cbz	r2, 80255fe <_raise_r+0x1e>
 80255f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80255fc:	b94b      	cbnz	r3, 8025612 <_raise_r+0x32>
 80255fe:	4620      	mov	r0, r4
 8025600:	f000 f830 	bl	8025664 <_getpid_r>
 8025604:	462a      	mov	r2, r5
 8025606:	4601      	mov	r1, r0
 8025608:	4620      	mov	r0, r4
 802560a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802560e:	f000 b817 	b.w	8025640 <_kill_r>
 8025612:	2b01      	cmp	r3, #1
 8025614:	d00a      	beq.n	802562c <_raise_r+0x4c>
 8025616:	1c59      	adds	r1, r3, #1
 8025618:	d103      	bne.n	8025622 <_raise_r+0x42>
 802561a:	2316      	movs	r3, #22
 802561c:	6003      	str	r3, [r0, #0]
 802561e:	2001      	movs	r0, #1
 8025620:	e7e7      	b.n	80255f2 <_raise_r+0x12>
 8025622:	2400      	movs	r4, #0
 8025624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025628:	4628      	mov	r0, r5
 802562a:	4798      	blx	r3
 802562c:	2000      	movs	r0, #0
 802562e:	e7e0      	b.n	80255f2 <_raise_r+0x12>

08025630 <raise>:
 8025630:	4b02      	ldr	r3, [pc, #8]	; (802563c <raise+0xc>)
 8025632:	4601      	mov	r1, r0
 8025634:	6818      	ldr	r0, [r3, #0]
 8025636:	f7ff bfd3 	b.w	80255e0 <_raise_r>
 802563a:	bf00      	nop
 802563c:	200000b0 	.word	0x200000b0

08025640 <_kill_r>:
 8025640:	b538      	push	{r3, r4, r5, lr}
 8025642:	4c07      	ldr	r4, [pc, #28]	; (8025660 <_kill_r+0x20>)
 8025644:	2300      	movs	r3, #0
 8025646:	4605      	mov	r5, r0
 8025648:	4608      	mov	r0, r1
 802564a:	4611      	mov	r1, r2
 802564c:	6023      	str	r3, [r4, #0]
 802564e:	f7de f827 	bl	80036a0 <_kill>
 8025652:	1c43      	adds	r3, r0, #1
 8025654:	d102      	bne.n	802565c <_kill_r+0x1c>
 8025656:	6823      	ldr	r3, [r4, #0]
 8025658:	b103      	cbz	r3, 802565c <_kill_r+0x1c>
 802565a:	602b      	str	r3, [r5, #0]
 802565c:	bd38      	pop	{r3, r4, r5, pc}
 802565e:	bf00      	nop
 8025660:	2000cc2c 	.word	0x2000cc2c

08025664 <_getpid_r>:
 8025664:	f7de b814 	b.w	8003690 <_getpid>

08025668 <__swbuf_r>:
 8025668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802566a:	460e      	mov	r6, r1
 802566c:	4614      	mov	r4, r2
 802566e:	4605      	mov	r5, r0
 8025670:	b118      	cbz	r0, 802567a <__swbuf_r+0x12>
 8025672:	6983      	ldr	r3, [r0, #24]
 8025674:	b90b      	cbnz	r3, 802567a <__swbuf_r+0x12>
 8025676:	f000 fa0b 	bl	8025a90 <__sinit>
 802567a:	4b21      	ldr	r3, [pc, #132]	; (8025700 <__swbuf_r+0x98>)
 802567c:	429c      	cmp	r4, r3
 802567e:	d12a      	bne.n	80256d6 <__swbuf_r+0x6e>
 8025680:	686c      	ldr	r4, [r5, #4]
 8025682:	69a3      	ldr	r3, [r4, #24]
 8025684:	60a3      	str	r3, [r4, #8]
 8025686:	89a3      	ldrh	r3, [r4, #12]
 8025688:	071a      	lsls	r2, r3, #28
 802568a:	d52e      	bpl.n	80256ea <__swbuf_r+0x82>
 802568c:	6923      	ldr	r3, [r4, #16]
 802568e:	b363      	cbz	r3, 80256ea <__swbuf_r+0x82>
 8025690:	6923      	ldr	r3, [r4, #16]
 8025692:	6820      	ldr	r0, [r4, #0]
 8025694:	1ac0      	subs	r0, r0, r3
 8025696:	6963      	ldr	r3, [r4, #20]
 8025698:	b2f6      	uxtb	r6, r6
 802569a:	4283      	cmp	r3, r0
 802569c:	4637      	mov	r7, r6
 802569e:	dc04      	bgt.n	80256aa <__swbuf_r+0x42>
 80256a0:	4621      	mov	r1, r4
 80256a2:	4628      	mov	r0, r5
 80256a4:	f000 f98a 	bl	80259bc <_fflush_r>
 80256a8:	bb28      	cbnz	r0, 80256f6 <__swbuf_r+0x8e>
 80256aa:	68a3      	ldr	r3, [r4, #8]
 80256ac:	3b01      	subs	r3, #1
 80256ae:	60a3      	str	r3, [r4, #8]
 80256b0:	6823      	ldr	r3, [r4, #0]
 80256b2:	1c5a      	adds	r2, r3, #1
 80256b4:	6022      	str	r2, [r4, #0]
 80256b6:	701e      	strb	r6, [r3, #0]
 80256b8:	6963      	ldr	r3, [r4, #20]
 80256ba:	3001      	adds	r0, #1
 80256bc:	4283      	cmp	r3, r0
 80256be:	d004      	beq.n	80256ca <__swbuf_r+0x62>
 80256c0:	89a3      	ldrh	r3, [r4, #12]
 80256c2:	07db      	lsls	r3, r3, #31
 80256c4:	d519      	bpl.n	80256fa <__swbuf_r+0x92>
 80256c6:	2e0a      	cmp	r6, #10
 80256c8:	d117      	bne.n	80256fa <__swbuf_r+0x92>
 80256ca:	4621      	mov	r1, r4
 80256cc:	4628      	mov	r0, r5
 80256ce:	f000 f975 	bl	80259bc <_fflush_r>
 80256d2:	b190      	cbz	r0, 80256fa <__swbuf_r+0x92>
 80256d4:	e00f      	b.n	80256f6 <__swbuf_r+0x8e>
 80256d6:	4b0b      	ldr	r3, [pc, #44]	; (8025704 <__swbuf_r+0x9c>)
 80256d8:	429c      	cmp	r4, r3
 80256da:	d101      	bne.n	80256e0 <__swbuf_r+0x78>
 80256dc:	68ac      	ldr	r4, [r5, #8]
 80256de:	e7d0      	b.n	8025682 <__swbuf_r+0x1a>
 80256e0:	4b09      	ldr	r3, [pc, #36]	; (8025708 <__swbuf_r+0xa0>)
 80256e2:	429c      	cmp	r4, r3
 80256e4:	bf08      	it	eq
 80256e6:	68ec      	ldreq	r4, [r5, #12]
 80256e8:	e7cb      	b.n	8025682 <__swbuf_r+0x1a>
 80256ea:	4621      	mov	r1, r4
 80256ec:	4628      	mov	r0, r5
 80256ee:	f000 f80d 	bl	802570c <__swsetup_r>
 80256f2:	2800      	cmp	r0, #0
 80256f4:	d0cc      	beq.n	8025690 <__swbuf_r+0x28>
 80256f6:	f04f 37ff 	mov.w	r7, #4294967295
 80256fa:	4638      	mov	r0, r7
 80256fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80256fe:	bf00      	nop
 8025700:	0802a0d8 	.word	0x0802a0d8
 8025704:	0802a0f8 	.word	0x0802a0f8
 8025708:	0802a0b8 	.word	0x0802a0b8

0802570c <__swsetup_r>:
 802570c:	4b32      	ldr	r3, [pc, #200]	; (80257d8 <__swsetup_r+0xcc>)
 802570e:	b570      	push	{r4, r5, r6, lr}
 8025710:	681d      	ldr	r5, [r3, #0]
 8025712:	4606      	mov	r6, r0
 8025714:	460c      	mov	r4, r1
 8025716:	b125      	cbz	r5, 8025722 <__swsetup_r+0x16>
 8025718:	69ab      	ldr	r3, [r5, #24]
 802571a:	b913      	cbnz	r3, 8025722 <__swsetup_r+0x16>
 802571c:	4628      	mov	r0, r5
 802571e:	f000 f9b7 	bl	8025a90 <__sinit>
 8025722:	4b2e      	ldr	r3, [pc, #184]	; (80257dc <__swsetup_r+0xd0>)
 8025724:	429c      	cmp	r4, r3
 8025726:	d10f      	bne.n	8025748 <__swsetup_r+0x3c>
 8025728:	686c      	ldr	r4, [r5, #4]
 802572a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802572e:	b29a      	uxth	r2, r3
 8025730:	0715      	lsls	r5, r2, #28
 8025732:	d42c      	bmi.n	802578e <__swsetup_r+0x82>
 8025734:	06d0      	lsls	r0, r2, #27
 8025736:	d411      	bmi.n	802575c <__swsetup_r+0x50>
 8025738:	2209      	movs	r2, #9
 802573a:	6032      	str	r2, [r6, #0]
 802573c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025740:	81a3      	strh	r3, [r4, #12]
 8025742:	f04f 30ff 	mov.w	r0, #4294967295
 8025746:	e03e      	b.n	80257c6 <__swsetup_r+0xba>
 8025748:	4b25      	ldr	r3, [pc, #148]	; (80257e0 <__swsetup_r+0xd4>)
 802574a:	429c      	cmp	r4, r3
 802574c:	d101      	bne.n	8025752 <__swsetup_r+0x46>
 802574e:	68ac      	ldr	r4, [r5, #8]
 8025750:	e7eb      	b.n	802572a <__swsetup_r+0x1e>
 8025752:	4b24      	ldr	r3, [pc, #144]	; (80257e4 <__swsetup_r+0xd8>)
 8025754:	429c      	cmp	r4, r3
 8025756:	bf08      	it	eq
 8025758:	68ec      	ldreq	r4, [r5, #12]
 802575a:	e7e6      	b.n	802572a <__swsetup_r+0x1e>
 802575c:	0751      	lsls	r1, r2, #29
 802575e:	d512      	bpl.n	8025786 <__swsetup_r+0x7a>
 8025760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025762:	b141      	cbz	r1, 8025776 <__swsetup_r+0x6a>
 8025764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025768:	4299      	cmp	r1, r3
 802576a:	d002      	beq.n	8025772 <__swsetup_r+0x66>
 802576c:	4630      	mov	r0, r6
 802576e:	f7ff fbb7 	bl	8024ee0 <_free_r>
 8025772:	2300      	movs	r3, #0
 8025774:	6363      	str	r3, [r4, #52]	; 0x34
 8025776:	89a3      	ldrh	r3, [r4, #12]
 8025778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802577c:	81a3      	strh	r3, [r4, #12]
 802577e:	2300      	movs	r3, #0
 8025780:	6063      	str	r3, [r4, #4]
 8025782:	6923      	ldr	r3, [r4, #16]
 8025784:	6023      	str	r3, [r4, #0]
 8025786:	89a3      	ldrh	r3, [r4, #12]
 8025788:	f043 0308 	orr.w	r3, r3, #8
 802578c:	81a3      	strh	r3, [r4, #12]
 802578e:	6923      	ldr	r3, [r4, #16]
 8025790:	b94b      	cbnz	r3, 80257a6 <__swsetup_r+0x9a>
 8025792:	89a3      	ldrh	r3, [r4, #12]
 8025794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802579c:	d003      	beq.n	80257a6 <__swsetup_r+0x9a>
 802579e:	4621      	mov	r1, r4
 80257a0:	4630      	mov	r0, r6
 80257a2:	f000 fa23 	bl	8025bec <__smakebuf_r>
 80257a6:	89a2      	ldrh	r2, [r4, #12]
 80257a8:	f012 0301 	ands.w	r3, r2, #1
 80257ac:	d00c      	beq.n	80257c8 <__swsetup_r+0xbc>
 80257ae:	2300      	movs	r3, #0
 80257b0:	60a3      	str	r3, [r4, #8]
 80257b2:	6963      	ldr	r3, [r4, #20]
 80257b4:	425b      	negs	r3, r3
 80257b6:	61a3      	str	r3, [r4, #24]
 80257b8:	6923      	ldr	r3, [r4, #16]
 80257ba:	b953      	cbnz	r3, 80257d2 <__swsetup_r+0xc6>
 80257bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80257c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80257c4:	d1ba      	bne.n	802573c <__swsetup_r+0x30>
 80257c6:	bd70      	pop	{r4, r5, r6, pc}
 80257c8:	0792      	lsls	r2, r2, #30
 80257ca:	bf58      	it	pl
 80257cc:	6963      	ldrpl	r3, [r4, #20]
 80257ce:	60a3      	str	r3, [r4, #8]
 80257d0:	e7f2      	b.n	80257b8 <__swsetup_r+0xac>
 80257d2:	2000      	movs	r0, #0
 80257d4:	e7f7      	b.n	80257c6 <__swsetup_r+0xba>
 80257d6:	bf00      	nop
 80257d8:	200000b0 	.word	0x200000b0
 80257dc:	0802a0d8 	.word	0x0802a0d8
 80257e0:	0802a0f8 	.word	0x0802a0f8
 80257e4:	0802a0b8 	.word	0x0802a0b8

080257e8 <__register_exitproc>:
 80257e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80257ec:	4d2c      	ldr	r5, [pc, #176]	; (80258a0 <__register_exitproc+0xb8>)
 80257ee:	682c      	ldr	r4, [r5, #0]
 80257f0:	4607      	mov	r7, r0
 80257f2:	460e      	mov	r6, r1
 80257f4:	4691      	mov	r9, r2
 80257f6:	4698      	mov	r8, r3
 80257f8:	b934      	cbnz	r4, 8025808 <__register_exitproc+0x20>
 80257fa:	4b2a      	ldr	r3, [pc, #168]	; (80258a4 <__register_exitproc+0xbc>)
 80257fc:	4c2a      	ldr	r4, [pc, #168]	; (80258a8 <__register_exitproc+0xc0>)
 80257fe:	602c      	str	r4, [r5, #0]
 8025800:	b113      	cbz	r3, 8025808 <__register_exitproc+0x20>
 8025802:	681b      	ldr	r3, [r3, #0]
 8025804:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025808:	6863      	ldr	r3, [r4, #4]
 802580a:	2b1f      	cmp	r3, #31
 802580c:	dd3d      	ble.n	802588a <__register_exitproc+0xa2>
 802580e:	4b27      	ldr	r3, [pc, #156]	; (80258ac <__register_exitproc+0xc4>)
 8025810:	b91b      	cbnz	r3, 802581a <__register_exitproc+0x32>
 8025812:	f04f 30ff 	mov.w	r0, #4294967295
 8025816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802581a:	208c      	movs	r0, #140	; 0x8c
 802581c:	f7ff fb3c 	bl	8024e98 <malloc>
 8025820:	4604      	mov	r4, r0
 8025822:	2800      	cmp	r0, #0
 8025824:	d0f5      	beq.n	8025812 <__register_exitproc+0x2a>
 8025826:	2300      	movs	r3, #0
 8025828:	682a      	ldr	r2, [r5, #0]
 802582a:	6002      	str	r2, [r0, #0]
 802582c:	6043      	str	r3, [r0, #4]
 802582e:	6028      	str	r0, [r5, #0]
 8025830:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025834:	b30f      	cbz	r7, 802587a <__register_exitproc+0x92>
 8025836:	f44f 7084 	mov.w	r0, #264	; 0x108
 802583a:	f7ff fb2d 	bl	8024e98 <malloc>
 802583e:	2800      	cmp	r0, #0
 8025840:	d0e7      	beq.n	8025812 <__register_exitproc+0x2a>
 8025842:	2300      	movs	r3, #0
 8025844:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025848:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802584c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025850:	6862      	ldr	r2, [r4, #4]
 8025852:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8025856:	2301      	movs	r3, #1
 8025858:	4093      	lsls	r3, r2
 802585a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802585e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8025862:	431a      	orrs	r2, r3
 8025864:	2f02      	cmp	r7, #2
 8025866:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802586a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802586e:	bf02      	ittt	eq
 8025870:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8025874:	4313      	orreq	r3, r2
 8025876:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802587a:	6863      	ldr	r3, [r4, #4]
 802587c:	1c5a      	adds	r2, r3, #1
 802587e:	3302      	adds	r3, #2
 8025880:	6062      	str	r2, [r4, #4]
 8025882:	2000      	movs	r0, #0
 8025884:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025888:	e7c5      	b.n	8025816 <__register_exitproc+0x2e>
 802588a:	2f00      	cmp	r7, #0
 802588c:	d0f5      	beq.n	802587a <__register_exitproc+0x92>
 802588e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025892:	2800      	cmp	r0, #0
 8025894:	d1dc      	bne.n	8025850 <__register_exitproc+0x68>
 8025896:	4b05      	ldr	r3, [pc, #20]	; (80258ac <__register_exitproc+0xc4>)
 8025898:	2b00      	cmp	r3, #0
 802589a:	d0ba      	beq.n	8025812 <__register_exitproc+0x2a>
 802589c:	e7cb      	b.n	8025836 <__register_exitproc+0x4e>
 802589e:	bf00      	nop
 80258a0:	2000c024 	.word	0x2000c024
 80258a4:	0802a0b4 	.word	0x0802a0b4
 80258a8:	2000bf98 	.word	0x2000bf98
 80258ac:	08024e99 	.word	0x08024e99

080258b0 <__sflush_r>:
 80258b0:	898a      	ldrh	r2, [r1, #12]
 80258b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80258b6:	4605      	mov	r5, r0
 80258b8:	0710      	lsls	r0, r2, #28
 80258ba:	460c      	mov	r4, r1
 80258bc:	d458      	bmi.n	8025970 <__sflush_r+0xc0>
 80258be:	684b      	ldr	r3, [r1, #4]
 80258c0:	2b00      	cmp	r3, #0
 80258c2:	dc05      	bgt.n	80258d0 <__sflush_r+0x20>
 80258c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80258c6:	2b00      	cmp	r3, #0
 80258c8:	dc02      	bgt.n	80258d0 <__sflush_r+0x20>
 80258ca:	2000      	movs	r0, #0
 80258cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80258d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80258d2:	2e00      	cmp	r6, #0
 80258d4:	d0f9      	beq.n	80258ca <__sflush_r+0x1a>
 80258d6:	2300      	movs	r3, #0
 80258d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80258dc:	682f      	ldr	r7, [r5, #0]
 80258de:	6a21      	ldr	r1, [r4, #32]
 80258e0:	602b      	str	r3, [r5, #0]
 80258e2:	d032      	beq.n	802594a <__sflush_r+0x9a>
 80258e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80258e6:	89a3      	ldrh	r3, [r4, #12]
 80258e8:	075a      	lsls	r2, r3, #29
 80258ea:	d505      	bpl.n	80258f8 <__sflush_r+0x48>
 80258ec:	6863      	ldr	r3, [r4, #4]
 80258ee:	1ac0      	subs	r0, r0, r3
 80258f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80258f2:	b10b      	cbz	r3, 80258f8 <__sflush_r+0x48>
 80258f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80258f6:	1ac0      	subs	r0, r0, r3
 80258f8:	2300      	movs	r3, #0
 80258fa:	4602      	mov	r2, r0
 80258fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80258fe:	6a21      	ldr	r1, [r4, #32]
 8025900:	4628      	mov	r0, r5
 8025902:	47b0      	blx	r6
 8025904:	1c43      	adds	r3, r0, #1
 8025906:	89a3      	ldrh	r3, [r4, #12]
 8025908:	d106      	bne.n	8025918 <__sflush_r+0x68>
 802590a:	6829      	ldr	r1, [r5, #0]
 802590c:	291d      	cmp	r1, #29
 802590e:	d848      	bhi.n	80259a2 <__sflush_r+0xf2>
 8025910:	4a29      	ldr	r2, [pc, #164]	; (80259b8 <__sflush_r+0x108>)
 8025912:	40ca      	lsrs	r2, r1
 8025914:	07d6      	lsls	r6, r2, #31
 8025916:	d544      	bpl.n	80259a2 <__sflush_r+0xf2>
 8025918:	2200      	movs	r2, #0
 802591a:	6062      	str	r2, [r4, #4]
 802591c:	04d9      	lsls	r1, r3, #19
 802591e:	6922      	ldr	r2, [r4, #16]
 8025920:	6022      	str	r2, [r4, #0]
 8025922:	d504      	bpl.n	802592e <__sflush_r+0x7e>
 8025924:	1c42      	adds	r2, r0, #1
 8025926:	d101      	bne.n	802592c <__sflush_r+0x7c>
 8025928:	682b      	ldr	r3, [r5, #0]
 802592a:	b903      	cbnz	r3, 802592e <__sflush_r+0x7e>
 802592c:	6560      	str	r0, [r4, #84]	; 0x54
 802592e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025930:	602f      	str	r7, [r5, #0]
 8025932:	2900      	cmp	r1, #0
 8025934:	d0c9      	beq.n	80258ca <__sflush_r+0x1a>
 8025936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802593a:	4299      	cmp	r1, r3
 802593c:	d002      	beq.n	8025944 <__sflush_r+0x94>
 802593e:	4628      	mov	r0, r5
 8025940:	f7ff face 	bl	8024ee0 <_free_r>
 8025944:	2000      	movs	r0, #0
 8025946:	6360      	str	r0, [r4, #52]	; 0x34
 8025948:	e7c0      	b.n	80258cc <__sflush_r+0x1c>
 802594a:	2301      	movs	r3, #1
 802594c:	4628      	mov	r0, r5
 802594e:	47b0      	blx	r6
 8025950:	1c41      	adds	r1, r0, #1
 8025952:	d1c8      	bne.n	80258e6 <__sflush_r+0x36>
 8025954:	682b      	ldr	r3, [r5, #0]
 8025956:	2b00      	cmp	r3, #0
 8025958:	d0c5      	beq.n	80258e6 <__sflush_r+0x36>
 802595a:	2b1d      	cmp	r3, #29
 802595c:	d001      	beq.n	8025962 <__sflush_r+0xb2>
 802595e:	2b16      	cmp	r3, #22
 8025960:	d101      	bne.n	8025966 <__sflush_r+0xb6>
 8025962:	602f      	str	r7, [r5, #0]
 8025964:	e7b1      	b.n	80258ca <__sflush_r+0x1a>
 8025966:	89a3      	ldrh	r3, [r4, #12]
 8025968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802596c:	81a3      	strh	r3, [r4, #12]
 802596e:	e7ad      	b.n	80258cc <__sflush_r+0x1c>
 8025970:	690f      	ldr	r7, [r1, #16]
 8025972:	2f00      	cmp	r7, #0
 8025974:	d0a9      	beq.n	80258ca <__sflush_r+0x1a>
 8025976:	0793      	lsls	r3, r2, #30
 8025978:	680e      	ldr	r6, [r1, #0]
 802597a:	bf08      	it	eq
 802597c:	694b      	ldreq	r3, [r1, #20]
 802597e:	600f      	str	r7, [r1, #0]
 8025980:	bf18      	it	ne
 8025982:	2300      	movne	r3, #0
 8025984:	eba6 0807 	sub.w	r8, r6, r7
 8025988:	608b      	str	r3, [r1, #8]
 802598a:	f1b8 0f00 	cmp.w	r8, #0
 802598e:	dd9c      	ble.n	80258ca <__sflush_r+0x1a>
 8025990:	4643      	mov	r3, r8
 8025992:	463a      	mov	r2, r7
 8025994:	6a21      	ldr	r1, [r4, #32]
 8025996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025998:	4628      	mov	r0, r5
 802599a:	47b0      	blx	r6
 802599c:	2800      	cmp	r0, #0
 802599e:	dc06      	bgt.n	80259ae <__sflush_r+0xfe>
 80259a0:	89a3      	ldrh	r3, [r4, #12]
 80259a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80259a6:	81a3      	strh	r3, [r4, #12]
 80259a8:	f04f 30ff 	mov.w	r0, #4294967295
 80259ac:	e78e      	b.n	80258cc <__sflush_r+0x1c>
 80259ae:	4407      	add	r7, r0
 80259b0:	eba8 0800 	sub.w	r8, r8, r0
 80259b4:	e7e9      	b.n	802598a <__sflush_r+0xda>
 80259b6:	bf00      	nop
 80259b8:	20400001 	.word	0x20400001

080259bc <_fflush_r>:
 80259bc:	b538      	push	{r3, r4, r5, lr}
 80259be:	690b      	ldr	r3, [r1, #16]
 80259c0:	4605      	mov	r5, r0
 80259c2:	460c      	mov	r4, r1
 80259c4:	b1db      	cbz	r3, 80259fe <_fflush_r+0x42>
 80259c6:	b118      	cbz	r0, 80259d0 <_fflush_r+0x14>
 80259c8:	6983      	ldr	r3, [r0, #24]
 80259ca:	b90b      	cbnz	r3, 80259d0 <_fflush_r+0x14>
 80259cc:	f000 f860 	bl	8025a90 <__sinit>
 80259d0:	4b0c      	ldr	r3, [pc, #48]	; (8025a04 <_fflush_r+0x48>)
 80259d2:	429c      	cmp	r4, r3
 80259d4:	d109      	bne.n	80259ea <_fflush_r+0x2e>
 80259d6:	686c      	ldr	r4, [r5, #4]
 80259d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80259dc:	b17b      	cbz	r3, 80259fe <_fflush_r+0x42>
 80259de:	4621      	mov	r1, r4
 80259e0:	4628      	mov	r0, r5
 80259e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80259e6:	f7ff bf63 	b.w	80258b0 <__sflush_r>
 80259ea:	4b07      	ldr	r3, [pc, #28]	; (8025a08 <_fflush_r+0x4c>)
 80259ec:	429c      	cmp	r4, r3
 80259ee:	d101      	bne.n	80259f4 <_fflush_r+0x38>
 80259f0:	68ac      	ldr	r4, [r5, #8]
 80259f2:	e7f1      	b.n	80259d8 <_fflush_r+0x1c>
 80259f4:	4b05      	ldr	r3, [pc, #20]	; (8025a0c <_fflush_r+0x50>)
 80259f6:	429c      	cmp	r4, r3
 80259f8:	bf08      	it	eq
 80259fa:	68ec      	ldreq	r4, [r5, #12]
 80259fc:	e7ec      	b.n	80259d8 <_fflush_r+0x1c>
 80259fe:	2000      	movs	r0, #0
 8025a00:	bd38      	pop	{r3, r4, r5, pc}
 8025a02:	bf00      	nop
 8025a04:	0802a0d8 	.word	0x0802a0d8
 8025a08:	0802a0f8 	.word	0x0802a0f8
 8025a0c:	0802a0b8 	.word	0x0802a0b8

08025a10 <std>:
 8025a10:	2300      	movs	r3, #0
 8025a12:	b510      	push	{r4, lr}
 8025a14:	4604      	mov	r4, r0
 8025a16:	e9c0 3300 	strd	r3, r3, [r0]
 8025a1a:	6083      	str	r3, [r0, #8]
 8025a1c:	8181      	strh	r1, [r0, #12]
 8025a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8025a20:	81c2      	strh	r2, [r0, #14]
 8025a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025a26:	6183      	str	r3, [r0, #24]
 8025a28:	4619      	mov	r1, r3
 8025a2a:	2208      	movs	r2, #8
 8025a2c:	305c      	adds	r0, #92	; 0x5c
 8025a2e:	f7ff fa4e 	bl	8024ece <memset>
 8025a32:	4b05      	ldr	r3, [pc, #20]	; (8025a48 <std+0x38>)
 8025a34:	6263      	str	r3, [r4, #36]	; 0x24
 8025a36:	4b05      	ldr	r3, [pc, #20]	; (8025a4c <std+0x3c>)
 8025a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8025a3a:	4b05      	ldr	r3, [pc, #20]	; (8025a50 <std+0x40>)
 8025a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025a3e:	4b05      	ldr	r3, [pc, #20]	; (8025a54 <std+0x44>)
 8025a40:	6224      	str	r4, [r4, #32]
 8025a42:	6323      	str	r3, [r4, #48]	; 0x30
 8025a44:	bd10      	pop	{r4, pc}
 8025a46:	bf00      	nop
 8025a48:	08025c71 	.word	0x08025c71
 8025a4c:	08025c93 	.word	0x08025c93
 8025a50:	08025ccb 	.word	0x08025ccb
 8025a54:	08025cef 	.word	0x08025cef

08025a58 <_cleanup_r>:
 8025a58:	4901      	ldr	r1, [pc, #4]	; (8025a60 <_cleanup_r+0x8>)
 8025a5a:	f000 b885 	b.w	8025b68 <_fwalk_reent>
 8025a5e:	bf00      	nop
 8025a60:	080259bd 	.word	0x080259bd

08025a64 <__sfmoreglue>:
 8025a64:	b570      	push	{r4, r5, r6, lr}
 8025a66:	1e4a      	subs	r2, r1, #1
 8025a68:	2568      	movs	r5, #104	; 0x68
 8025a6a:	4355      	muls	r5, r2
 8025a6c:	460e      	mov	r6, r1
 8025a6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025a72:	f7ff fa83 	bl	8024f7c <_malloc_r>
 8025a76:	4604      	mov	r4, r0
 8025a78:	b140      	cbz	r0, 8025a8c <__sfmoreglue+0x28>
 8025a7a:	2100      	movs	r1, #0
 8025a7c:	e9c0 1600 	strd	r1, r6, [r0]
 8025a80:	300c      	adds	r0, #12
 8025a82:	60a0      	str	r0, [r4, #8]
 8025a84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025a88:	f7ff fa21 	bl	8024ece <memset>
 8025a8c:	4620      	mov	r0, r4
 8025a8e:	bd70      	pop	{r4, r5, r6, pc}

08025a90 <__sinit>:
 8025a90:	6983      	ldr	r3, [r0, #24]
 8025a92:	b510      	push	{r4, lr}
 8025a94:	4604      	mov	r4, r0
 8025a96:	bb33      	cbnz	r3, 8025ae6 <__sinit+0x56>
 8025a98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025a9c:	6503      	str	r3, [r0, #80]	; 0x50
 8025a9e:	4b12      	ldr	r3, [pc, #72]	; (8025ae8 <__sinit+0x58>)
 8025aa0:	4a12      	ldr	r2, [pc, #72]	; (8025aec <__sinit+0x5c>)
 8025aa2:	681b      	ldr	r3, [r3, #0]
 8025aa4:	6282      	str	r2, [r0, #40]	; 0x28
 8025aa6:	4298      	cmp	r0, r3
 8025aa8:	bf04      	itt	eq
 8025aaa:	2301      	moveq	r3, #1
 8025aac:	6183      	streq	r3, [r0, #24]
 8025aae:	f000 f81f 	bl	8025af0 <__sfp>
 8025ab2:	6060      	str	r0, [r4, #4]
 8025ab4:	4620      	mov	r0, r4
 8025ab6:	f000 f81b 	bl	8025af0 <__sfp>
 8025aba:	60a0      	str	r0, [r4, #8]
 8025abc:	4620      	mov	r0, r4
 8025abe:	f000 f817 	bl	8025af0 <__sfp>
 8025ac2:	2200      	movs	r2, #0
 8025ac4:	60e0      	str	r0, [r4, #12]
 8025ac6:	2104      	movs	r1, #4
 8025ac8:	6860      	ldr	r0, [r4, #4]
 8025aca:	f7ff ffa1 	bl	8025a10 <std>
 8025ace:	2201      	movs	r2, #1
 8025ad0:	2109      	movs	r1, #9
 8025ad2:	68a0      	ldr	r0, [r4, #8]
 8025ad4:	f7ff ff9c 	bl	8025a10 <std>
 8025ad8:	2202      	movs	r2, #2
 8025ada:	2112      	movs	r1, #18
 8025adc:	68e0      	ldr	r0, [r4, #12]
 8025ade:	f7ff ff97 	bl	8025a10 <std>
 8025ae2:	2301      	movs	r3, #1
 8025ae4:	61a3      	str	r3, [r4, #24]
 8025ae6:	bd10      	pop	{r4, pc}
 8025ae8:	0802a07c 	.word	0x0802a07c
 8025aec:	08025a59 	.word	0x08025a59

08025af0 <__sfp>:
 8025af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025af2:	4b1b      	ldr	r3, [pc, #108]	; (8025b60 <__sfp+0x70>)
 8025af4:	681e      	ldr	r6, [r3, #0]
 8025af6:	69b3      	ldr	r3, [r6, #24]
 8025af8:	4607      	mov	r7, r0
 8025afa:	b913      	cbnz	r3, 8025b02 <__sfp+0x12>
 8025afc:	4630      	mov	r0, r6
 8025afe:	f7ff ffc7 	bl	8025a90 <__sinit>
 8025b02:	3648      	adds	r6, #72	; 0x48
 8025b04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025b08:	3b01      	subs	r3, #1
 8025b0a:	d503      	bpl.n	8025b14 <__sfp+0x24>
 8025b0c:	6833      	ldr	r3, [r6, #0]
 8025b0e:	b133      	cbz	r3, 8025b1e <__sfp+0x2e>
 8025b10:	6836      	ldr	r6, [r6, #0]
 8025b12:	e7f7      	b.n	8025b04 <__sfp+0x14>
 8025b14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025b18:	b16d      	cbz	r5, 8025b36 <__sfp+0x46>
 8025b1a:	3468      	adds	r4, #104	; 0x68
 8025b1c:	e7f4      	b.n	8025b08 <__sfp+0x18>
 8025b1e:	2104      	movs	r1, #4
 8025b20:	4638      	mov	r0, r7
 8025b22:	f7ff ff9f 	bl	8025a64 <__sfmoreglue>
 8025b26:	6030      	str	r0, [r6, #0]
 8025b28:	2800      	cmp	r0, #0
 8025b2a:	d1f1      	bne.n	8025b10 <__sfp+0x20>
 8025b2c:	230c      	movs	r3, #12
 8025b2e:	603b      	str	r3, [r7, #0]
 8025b30:	4604      	mov	r4, r0
 8025b32:	4620      	mov	r0, r4
 8025b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b36:	4b0b      	ldr	r3, [pc, #44]	; (8025b64 <__sfp+0x74>)
 8025b38:	6665      	str	r5, [r4, #100]	; 0x64
 8025b3a:	e9c4 5500 	strd	r5, r5, [r4]
 8025b3e:	60a5      	str	r5, [r4, #8]
 8025b40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025b44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025b48:	2208      	movs	r2, #8
 8025b4a:	4629      	mov	r1, r5
 8025b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025b50:	f7ff f9bd 	bl	8024ece <memset>
 8025b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025b5c:	e7e9      	b.n	8025b32 <__sfp+0x42>
 8025b5e:	bf00      	nop
 8025b60:	0802a07c 	.word	0x0802a07c
 8025b64:	ffff0001 	.word	0xffff0001

08025b68 <_fwalk_reent>:
 8025b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025b6c:	4680      	mov	r8, r0
 8025b6e:	4689      	mov	r9, r1
 8025b70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025b74:	2600      	movs	r6, #0
 8025b76:	b914      	cbnz	r4, 8025b7e <_fwalk_reent+0x16>
 8025b78:	4630      	mov	r0, r6
 8025b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025b7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025b82:	3f01      	subs	r7, #1
 8025b84:	d501      	bpl.n	8025b8a <_fwalk_reent+0x22>
 8025b86:	6824      	ldr	r4, [r4, #0]
 8025b88:	e7f5      	b.n	8025b76 <_fwalk_reent+0xe>
 8025b8a:	89ab      	ldrh	r3, [r5, #12]
 8025b8c:	2b01      	cmp	r3, #1
 8025b8e:	d907      	bls.n	8025ba0 <_fwalk_reent+0x38>
 8025b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025b94:	3301      	adds	r3, #1
 8025b96:	d003      	beq.n	8025ba0 <_fwalk_reent+0x38>
 8025b98:	4629      	mov	r1, r5
 8025b9a:	4640      	mov	r0, r8
 8025b9c:	47c8      	blx	r9
 8025b9e:	4306      	orrs	r6, r0
 8025ba0:	3568      	adds	r5, #104	; 0x68
 8025ba2:	e7ee      	b.n	8025b82 <_fwalk_reent+0x1a>

08025ba4 <__swhatbuf_r>:
 8025ba4:	b570      	push	{r4, r5, r6, lr}
 8025ba6:	460e      	mov	r6, r1
 8025ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025bac:	2900      	cmp	r1, #0
 8025bae:	b096      	sub	sp, #88	; 0x58
 8025bb0:	4614      	mov	r4, r2
 8025bb2:	461d      	mov	r5, r3
 8025bb4:	da07      	bge.n	8025bc6 <__swhatbuf_r+0x22>
 8025bb6:	2300      	movs	r3, #0
 8025bb8:	602b      	str	r3, [r5, #0]
 8025bba:	89b3      	ldrh	r3, [r6, #12]
 8025bbc:	061a      	lsls	r2, r3, #24
 8025bbe:	d410      	bmi.n	8025be2 <__swhatbuf_r+0x3e>
 8025bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025bc4:	e00e      	b.n	8025be4 <__swhatbuf_r+0x40>
 8025bc6:	466a      	mov	r2, sp
 8025bc8:	f000 f8b8 	bl	8025d3c <_fstat_r>
 8025bcc:	2800      	cmp	r0, #0
 8025bce:	dbf2      	blt.n	8025bb6 <__swhatbuf_r+0x12>
 8025bd0:	9a01      	ldr	r2, [sp, #4]
 8025bd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025bd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025bda:	425a      	negs	r2, r3
 8025bdc:	415a      	adcs	r2, r3
 8025bde:	602a      	str	r2, [r5, #0]
 8025be0:	e7ee      	b.n	8025bc0 <__swhatbuf_r+0x1c>
 8025be2:	2340      	movs	r3, #64	; 0x40
 8025be4:	2000      	movs	r0, #0
 8025be6:	6023      	str	r3, [r4, #0]
 8025be8:	b016      	add	sp, #88	; 0x58
 8025bea:	bd70      	pop	{r4, r5, r6, pc}

08025bec <__smakebuf_r>:
 8025bec:	898b      	ldrh	r3, [r1, #12]
 8025bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025bf0:	079d      	lsls	r5, r3, #30
 8025bf2:	4606      	mov	r6, r0
 8025bf4:	460c      	mov	r4, r1
 8025bf6:	d507      	bpl.n	8025c08 <__smakebuf_r+0x1c>
 8025bf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025bfc:	6023      	str	r3, [r4, #0]
 8025bfe:	6123      	str	r3, [r4, #16]
 8025c00:	2301      	movs	r3, #1
 8025c02:	6163      	str	r3, [r4, #20]
 8025c04:	b002      	add	sp, #8
 8025c06:	bd70      	pop	{r4, r5, r6, pc}
 8025c08:	ab01      	add	r3, sp, #4
 8025c0a:	466a      	mov	r2, sp
 8025c0c:	f7ff ffca 	bl	8025ba4 <__swhatbuf_r>
 8025c10:	9900      	ldr	r1, [sp, #0]
 8025c12:	4605      	mov	r5, r0
 8025c14:	4630      	mov	r0, r6
 8025c16:	f7ff f9b1 	bl	8024f7c <_malloc_r>
 8025c1a:	b948      	cbnz	r0, 8025c30 <__smakebuf_r+0x44>
 8025c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025c20:	059a      	lsls	r2, r3, #22
 8025c22:	d4ef      	bmi.n	8025c04 <__smakebuf_r+0x18>
 8025c24:	f023 0303 	bic.w	r3, r3, #3
 8025c28:	f043 0302 	orr.w	r3, r3, #2
 8025c2c:	81a3      	strh	r3, [r4, #12]
 8025c2e:	e7e3      	b.n	8025bf8 <__smakebuf_r+0xc>
 8025c30:	4b0d      	ldr	r3, [pc, #52]	; (8025c68 <__smakebuf_r+0x7c>)
 8025c32:	62b3      	str	r3, [r6, #40]	; 0x28
 8025c34:	89a3      	ldrh	r3, [r4, #12]
 8025c36:	6020      	str	r0, [r4, #0]
 8025c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025c3c:	81a3      	strh	r3, [r4, #12]
 8025c3e:	9b00      	ldr	r3, [sp, #0]
 8025c40:	6163      	str	r3, [r4, #20]
 8025c42:	9b01      	ldr	r3, [sp, #4]
 8025c44:	6120      	str	r0, [r4, #16]
 8025c46:	b15b      	cbz	r3, 8025c60 <__smakebuf_r+0x74>
 8025c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025c4c:	4630      	mov	r0, r6
 8025c4e:	f000 f887 	bl	8025d60 <_isatty_r>
 8025c52:	b128      	cbz	r0, 8025c60 <__smakebuf_r+0x74>
 8025c54:	89a3      	ldrh	r3, [r4, #12]
 8025c56:	f023 0303 	bic.w	r3, r3, #3
 8025c5a:	f043 0301 	orr.w	r3, r3, #1
 8025c5e:	81a3      	strh	r3, [r4, #12]
 8025c60:	89a3      	ldrh	r3, [r4, #12]
 8025c62:	431d      	orrs	r5, r3
 8025c64:	81a5      	strh	r5, [r4, #12]
 8025c66:	e7cd      	b.n	8025c04 <__smakebuf_r+0x18>
 8025c68:	08025a59 	.word	0x08025a59

08025c6c <__malloc_lock>:
 8025c6c:	4770      	bx	lr

08025c6e <__malloc_unlock>:
 8025c6e:	4770      	bx	lr

08025c70 <__sread>:
 8025c70:	b510      	push	{r4, lr}
 8025c72:	460c      	mov	r4, r1
 8025c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c78:	f000 f894 	bl	8025da4 <_read_r>
 8025c7c:	2800      	cmp	r0, #0
 8025c7e:	bfab      	itete	ge
 8025c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025c82:	89a3      	ldrhlt	r3, [r4, #12]
 8025c84:	181b      	addge	r3, r3, r0
 8025c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025c8a:	bfac      	ite	ge
 8025c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8025c8e:	81a3      	strhlt	r3, [r4, #12]
 8025c90:	bd10      	pop	{r4, pc}

08025c92 <__swrite>:
 8025c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c96:	461f      	mov	r7, r3
 8025c98:	898b      	ldrh	r3, [r1, #12]
 8025c9a:	05db      	lsls	r3, r3, #23
 8025c9c:	4605      	mov	r5, r0
 8025c9e:	460c      	mov	r4, r1
 8025ca0:	4616      	mov	r6, r2
 8025ca2:	d505      	bpl.n	8025cb0 <__swrite+0x1e>
 8025ca4:	2302      	movs	r3, #2
 8025ca6:	2200      	movs	r2, #0
 8025ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025cac:	f000 f868 	bl	8025d80 <_lseek_r>
 8025cb0:	89a3      	ldrh	r3, [r4, #12]
 8025cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025cba:	81a3      	strh	r3, [r4, #12]
 8025cbc:	4632      	mov	r2, r6
 8025cbe:	463b      	mov	r3, r7
 8025cc0:	4628      	mov	r0, r5
 8025cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025cc6:	f000 b817 	b.w	8025cf8 <_write_r>

08025cca <__sseek>:
 8025cca:	b510      	push	{r4, lr}
 8025ccc:	460c      	mov	r4, r1
 8025cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025cd2:	f000 f855 	bl	8025d80 <_lseek_r>
 8025cd6:	1c43      	adds	r3, r0, #1
 8025cd8:	89a3      	ldrh	r3, [r4, #12]
 8025cda:	bf15      	itete	ne
 8025cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8025cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025ce6:	81a3      	strheq	r3, [r4, #12]
 8025ce8:	bf18      	it	ne
 8025cea:	81a3      	strhne	r3, [r4, #12]
 8025cec:	bd10      	pop	{r4, pc}

08025cee <__sclose>:
 8025cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025cf2:	f000 b813 	b.w	8025d1c <_close_r>
	...

08025cf8 <_write_r>:
 8025cf8:	b538      	push	{r3, r4, r5, lr}
 8025cfa:	4c07      	ldr	r4, [pc, #28]	; (8025d18 <_write_r+0x20>)
 8025cfc:	4605      	mov	r5, r0
 8025cfe:	4608      	mov	r0, r1
 8025d00:	4611      	mov	r1, r2
 8025d02:	2200      	movs	r2, #0
 8025d04:	6022      	str	r2, [r4, #0]
 8025d06:	461a      	mov	r2, r3
 8025d08:	f7dd fd01 	bl	800370e <_write>
 8025d0c:	1c43      	adds	r3, r0, #1
 8025d0e:	d102      	bne.n	8025d16 <_write_r+0x1e>
 8025d10:	6823      	ldr	r3, [r4, #0]
 8025d12:	b103      	cbz	r3, 8025d16 <_write_r+0x1e>
 8025d14:	602b      	str	r3, [r5, #0]
 8025d16:	bd38      	pop	{r3, r4, r5, pc}
 8025d18:	2000cc2c 	.word	0x2000cc2c

08025d1c <_close_r>:
 8025d1c:	b538      	push	{r3, r4, r5, lr}
 8025d1e:	4c06      	ldr	r4, [pc, #24]	; (8025d38 <_close_r+0x1c>)
 8025d20:	2300      	movs	r3, #0
 8025d22:	4605      	mov	r5, r0
 8025d24:	4608      	mov	r0, r1
 8025d26:	6023      	str	r3, [r4, #0]
 8025d28:	f7dd fd0d 	bl	8003746 <_close>
 8025d2c:	1c43      	adds	r3, r0, #1
 8025d2e:	d102      	bne.n	8025d36 <_close_r+0x1a>
 8025d30:	6823      	ldr	r3, [r4, #0]
 8025d32:	b103      	cbz	r3, 8025d36 <_close_r+0x1a>
 8025d34:	602b      	str	r3, [r5, #0]
 8025d36:	bd38      	pop	{r3, r4, r5, pc}
 8025d38:	2000cc2c 	.word	0x2000cc2c

08025d3c <_fstat_r>:
 8025d3c:	b538      	push	{r3, r4, r5, lr}
 8025d3e:	4c07      	ldr	r4, [pc, #28]	; (8025d5c <_fstat_r+0x20>)
 8025d40:	2300      	movs	r3, #0
 8025d42:	4605      	mov	r5, r0
 8025d44:	4608      	mov	r0, r1
 8025d46:	4611      	mov	r1, r2
 8025d48:	6023      	str	r3, [r4, #0]
 8025d4a:	f7dd fd08 	bl	800375e <_fstat>
 8025d4e:	1c43      	adds	r3, r0, #1
 8025d50:	d102      	bne.n	8025d58 <_fstat_r+0x1c>
 8025d52:	6823      	ldr	r3, [r4, #0]
 8025d54:	b103      	cbz	r3, 8025d58 <_fstat_r+0x1c>
 8025d56:	602b      	str	r3, [r5, #0]
 8025d58:	bd38      	pop	{r3, r4, r5, pc}
 8025d5a:	bf00      	nop
 8025d5c:	2000cc2c 	.word	0x2000cc2c

08025d60 <_isatty_r>:
 8025d60:	b538      	push	{r3, r4, r5, lr}
 8025d62:	4c06      	ldr	r4, [pc, #24]	; (8025d7c <_isatty_r+0x1c>)
 8025d64:	2300      	movs	r3, #0
 8025d66:	4605      	mov	r5, r0
 8025d68:	4608      	mov	r0, r1
 8025d6a:	6023      	str	r3, [r4, #0]
 8025d6c:	f7dd fd07 	bl	800377e <_isatty>
 8025d70:	1c43      	adds	r3, r0, #1
 8025d72:	d102      	bne.n	8025d7a <_isatty_r+0x1a>
 8025d74:	6823      	ldr	r3, [r4, #0]
 8025d76:	b103      	cbz	r3, 8025d7a <_isatty_r+0x1a>
 8025d78:	602b      	str	r3, [r5, #0]
 8025d7a:	bd38      	pop	{r3, r4, r5, pc}
 8025d7c:	2000cc2c 	.word	0x2000cc2c

08025d80 <_lseek_r>:
 8025d80:	b538      	push	{r3, r4, r5, lr}
 8025d82:	4c07      	ldr	r4, [pc, #28]	; (8025da0 <_lseek_r+0x20>)
 8025d84:	4605      	mov	r5, r0
 8025d86:	4608      	mov	r0, r1
 8025d88:	4611      	mov	r1, r2
 8025d8a:	2200      	movs	r2, #0
 8025d8c:	6022      	str	r2, [r4, #0]
 8025d8e:	461a      	mov	r2, r3
 8025d90:	f7dd fd00 	bl	8003794 <_lseek>
 8025d94:	1c43      	adds	r3, r0, #1
 8025d96:	d102      	bne.n	8025d9e <_lseek_r+0x1e>
 8025d98:	6823      	ldr	r3, [r4, #0]
 8025d9a:	b103      	cbz	r3, 8025d9e <_lseek_r+0x1e>
 8025d9c:	602b      	str	r3, [r5, #0]
 8025d9e:	bd38      	pop	{r3, r4, r5, pc}
 8025da0:	2000cc2c 	.word	0x2000cc2c

08025da4 <_read_r>:
 8025da4:	b538      	push	{r3, r4, r5, lr}
 8025da6:	4c07      	ldr	r4, [pc, #28]	; (8025dc4 <_read_r+0x20>)
 8025da8:	4605      	mov	r5, r0
 8025daa:	4608      	mov	r0, r1
 8025dac:	4611      	mov	r1, r2
 8025dae:	2200      	movs	r2, #0
 8025db0:	6022      	str	r2, [r4, #0]
 8025db2:	461a      	mov	r2, r3
 8025db4:	f7dd fc8e 	bl	80036d4 <_read>
 8025db8:	1c43      	adds	r3, r0, #1
 8025dba:	d102      	bne.n	8025dc2 <_read_r+0x1e>
 8025dbc:	6823      	ldr	r3, [r4, #0]
 8025dbe:	b103      	cbz	r3, 8025dc2 <_read_r+0x1e>
 8025dc0:	602b      	str	r3, [r5, #0]
 8025dc2:	bd38      	pop	{r3, r4, r5, pc}
 8025dc4:	2000cc2c 	.word	0x2000cc2c

08025dc8 <_init>:
 8025dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dca:	bf00      	nop
 8025dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025dce:	bc08      	pop	{r3}
 8025dd0:	469e      	mov	lr, r3
 8025dd2:	4770      	bx	lr

08025dd4 <_fini>:
 8025dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dd6:	bf00      	nop
 8025dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025dda:	bc08      	pop	{r3}
 8025ddc:	469e      	mov	lr, r3
 8025dde:	4770      	bx	lr
