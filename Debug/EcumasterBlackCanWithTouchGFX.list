
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002920c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ab8  080293dc  080293dc  000393dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003f1a  0802de94  0802de94  0003de94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  08031db0  08031db0  00041db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000240  080652a8  080652a8  000752a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080654e8  080654e8  0008013c  2**0
                  CONTENTS
  7 .ARM          00000008  080654e8  080654e8  000754e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080654f0  080654f0  0008013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080654f0  080654f0  000754f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08065504  08065504  00075504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000013c  20000000  0806550c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cc74  2000013c  08065648  0008013c  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000cdb0  08065648  0008cdb0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0008013c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006a74b  00000000  00000000  0008016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00010c29  00000000  00000000  000ea8b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004ec0  00000000  00000000  000fb4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004830  00000000  00000000  001003a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003d935  00000000  00000000  00104bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004b9cf  00000000  00000000  00142505  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00136638  00000000  00000000  0018ded4  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002c450c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000154b4  00000000  00000000  002c4608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080293c4 	.word	0x080293c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000140 	.word	0x20000140
 800020c:	080293c4 	.word	0x080293c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000158 	.word	0x20000158
 8000b3c:	200001b0 	.word	0x200001b0

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09a      	sub	sp, #104	; 0x68
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4b83      	ldr	r3, [pc, #524]	; (8000d58 <SecondTask+0x218>)
 8000b4a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b7e      	ldr	r3, [pc, #504]	; (8000d5c <SecondTask+0x21c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00c fc0a 	bl	800d384 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00c f919 	bl	800cda8 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <SecondTask+0x220>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8127 	beq.w	8000dce <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b78      	ldr	r3, [pc, #480]	; (8000d64 <SecondTask+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b76      	ldr	r3, [pc, #472]	; (8000d64 <SecondTask+0x224>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a73      	ldr	r2, [pc, #460]	; (8000d64 <SecondTask+0x224>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b73      	ldr	r3, [pc, #460]	; (8000d68 <SecondTask+0x228>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b71      	ldr	r3, [pc, #452]	; (8000d68 <SecondTask+0x228>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a6e      	ldr	r2, [pc, #440]	; (8000d68 <SecondTask+0x228>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <SecondTask+0x22c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <SecondTask+0x22c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a69      	ldr	r2, [pc, #420]	; (8000d6c <SecondTask+0x22c>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <SecondTask+0x230>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a359      	add	r3, pc, #356	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <SecondTask+0x234>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <SecondTask+0x230>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a353      	add	r3, pc, #332	; (adr r3, 8000d40 <SecondTask+0x200>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <SecondTask+0x230>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <SecondTask+0x238>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a348      	add	r3, pc, #288	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <SecondTask+0x23c>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <SecondTask+0x238>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a344      	add	r3, pc, #272	; (adr r3, 8000d48 <SecondTask+0x208>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	; (8000d78 <SecondTask+0x238>)
 8000c4e:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c50:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <SecondTask+0x240>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b9f      	cmp	r3, #159	; 0x9f
 8000c56:	dc03      	bgt.n	8000c60 <SecondTask+0x120>
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <SecondTask+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e000      	b.n	8000c62 <SecondTask+0x122>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a47      	ldr	r2, [pc, #284]	; (8000d80 <SecondTask+0x240>)
 8000c64:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <SecondTask+0x244>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	db01      	blt.n	8000c7e <SecondTask+0x13e>
 8000c7a:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <SecondTask+0x248>)
 8000c7c:	e010      	b.n	8000ca0 <SecondTask+0x160>
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <SecondTask+0x244>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc78 	bl	8000578 <__aeabi_f2d>
 8000c88:	a331      	add	r3, pc, #196	; (adr r3, 8000d50 <SecondTask+0x210>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fb15 	bl	80002bc <__adddf3>
 8000c92:	4603      	mov	r3, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	4618      	mov	r0, r3
 8000c98:	4621      	mov	r1, r4
 8000c9a:	f7ff fd4d 	bl	8000738 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <SecondTask+0x244>)
 8000ca2:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <SecondTask+0x24c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc03      	bgt.n	8000cb4 <SecondTask+0x174>
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <SecondTask+0x250>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	e000      	b.n	8000cb6 <SecondTask+0x176>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <SecondTask+0x24c>)
 8000cb8:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <SecondTask+0x250>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dc03      	bgt.n	8000cca <SecondTask+0x18a>
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SecondTask+0x250>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SecondTask+0x18c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <SecondTask+0x250>)
 8000cce:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <SecondTask+0x254>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd8:	da03      	bge.n	8000ce2 <SecondTask+0x1a2>
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SecondTask+0x254>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	e001      	b.n	8000ce6 <SecondTask+0x1a6>
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <SecondTask+0x254>)
 8000ce8:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <SecondTask+0x254>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cf2:	da03      	bge.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SecondTask+0x258>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	e001      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d00:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <SecondTask+0x258>)
 8000d02:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <SecondTask+0x25c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dc03      	bgt.n	8000d14 <SecondTask+0x1d4>
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <SecondTask+0x25c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	e000      	b.n	8000d16 <SecondTask+0x1d6>
 8000d14:	2300      	movs	r3, #0
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SecondTask+0x25c>)
 8000d18:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <SecondTask+0x260>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	db3c      	blt.n	8000da8 <SecondTask+0x268>
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <SecondTask+0x264>)
 8000d30:	e04b      	b.n	8000dca <SecondTask+0x28a>
 8000d32:	bf00      	nop
 8000d34:	f3af 8000 	nop.w
 8000d38:	66666666 	.word	0x66666666
 8000d3c:	3ff66666 	.word	0x3ff66666
 8000d40:	9999999a 	.word	0x9999999a
 8000d44:	3fa99999 	.word	0x3fa99999
 8000d48:	eb851eb8 	.word	0xeb851eb8
 8000d4c:	3faeb851 	.word	0x3faeb851
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fb99999 	.word	0x3fb99999
 8000d58:	080293dc 	.word	0x080293dc
 8000d5c:	200087a4 	.word	0x200087a4
 8000d60:	08029b5c 	.word	0x08029b5c
 8000d64:	20000004 	.word	0x20000004
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000010 	.word	0x20000010
 8000d74:	3f19999a 	.word	0x3f19999a
 8000d78:	20000014 	.word	0x20000014
 8000d7c:	3f266666 	.word	0x3f266666
 8000d80:	200003c0 	.word	0x200003c0
 8000d84:	200003c4 	.word	0x200003c4
 8000d88:	3dcccccd 	.word	0x3dcccccd
 8000d8c:	200003c8 	.word	0x200003c8
 8000d90:	200003cc 	.word	0x200003cc
 8000d94:	200003d0 	.word	0x200003d0
 8000d98:	200003d4 	.word	0x200003d4
 8000d9c:	200003d8 	.word	0x200003d8
 8000da0:	200003dc 	.word	0x200003dc
 8000da4:	41200000 	.word	0x41200000
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SecondTask+0x300>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fbe3 	bl	8000578 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	; (adr r3, 8000e38 <SecondTask+0x2f8>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fa80 	bl	80002bc <__adddf3>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	f7ff fcb8 	bl	8000738 <__aeabi_d2f>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <SecondTask+0x300>)
 8000dcc:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v};
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <SecondTask+0x304>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <SecondTask+0x308>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <SecondTask+0x30c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <SecondTask+0x310>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <SecondTask+0x314>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <SecondTask+0x318>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <SecondTask+0x31c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <SecondTask+0x320>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <SecondTask+0x324>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <SecondTask+0x328>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <SecondTask+0x32c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <SecondTask+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SecondTask+0x300>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SecondTask+0x334>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f107 010c 	add.w	r1, r7, #12
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	f00c faac 	bl	800d384 <xQueueGenericSend>
		osDelay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f00b ffbb 	bl	800cda8 <osDelay>
	{
 8000e32:	e6a0      	b.n	8000b76 <SecondTask+0x36>
 8000e34:	f3af 8000 	nop.w
 8000e38:	33333333 	.word	0x33333333
 8000e3c:	3fe33333 	.word	0x3fe33333
 8000e40:	200003dc 	.word	0x200003dc
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000014 	.word	0x20000014
 8000e58:	200003c0 	.word	0x200003c0
 8000e5c:	200003c4 	.word	0x200003c4
 8000e60:	200003c8 	.word	0x200003c8
 8000e64:	200003cc 	.word	0x200003cc
 8000e68:	200003d0 	.word	0x200003d0
 8000e6c:	200003d4 	.word	0x200003d4
 8000e70:	200003d8 	.word	0x200003d8
 8000e74:	200087a0 	.word	0x200087a0

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f002 fd02 	bl	8003886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f85f 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f001 f9d5 	bl	8002234 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e8a:	f000 f917 	bl	80010bc <MX_ADC3_Init>
  MX_CRC_Init();
 8000e8e:	f000 fb0d 	bl	80014ac <MX_CRC_Init>
  MX_DCMI_Init();
 8000e92:	f000 fb2d 	bl	80014f0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e96:	f000 fb5f 	bl	8001558 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e9a:	f001 f91f 	bl	80020dc <MX_FMC_Init>
  MX_LTDC_Init();
 8000e9e:	f000 fb8d 	bl	80015bc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000ea2:	f000 fc0d 	bl	80016c0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000ea6:	f000 fc37 	bl	8001718 <MX_RTC_Init>
  MX_SAI2_Init();
 8000eaa:	f000 fcdd 	bl	8001868 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000eae:	f000 fd83 	bl	80019b8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000eb2:	f000 fda1 	bl	80019f8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000eb6:	f000 fdcf 	bl	8001a58 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000eba:	f000 fe0b 	bl	8001ad4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ebe:	f000 feb5 	bl	8001c2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ec2:	f000 ff29 	bl	8001d18 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ec6:	f000 ff9d 	bl	8001e04 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000eca:	f001 f811 	bl	8001ef0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ece:	f001 f861 	bl	8001f94 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ed2:	f001 f8a3 	bl	800201c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ed6:	f001 f8d1 	bl	800207c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000eda:	f00b fc21 	bl	800c720 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000ede:	f000 f93f 	bl	8001160 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000ee2:	f00f f893 	bl	801000c <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <main+0xbc>)
 8000ee8:	f107 041c 	add.w	r4, r7, #28
 8000eec:	461d      	mov	r5, r3
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00b ff05 	bl	800cd10 <osThreadCreate>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <main+0xc0>)
 8000f0a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <main+0xc4>)
 8000f0e:	463c      	mov	r4, r7
 8000f10:	461d      	mov	r5, r3
 8000f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00b fef4 	bl	800cd10 <osThreadCreate>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <main+0xc8>)
 8000f2c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f2e:	f00b fecc 	bl	800ccca <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0xba>
 8000f34:	08029410 	.word	0x08029410
 8000f38:	2000c230 	.word	0x2000c230
 8000f3c:	08029434 	.word	0x08029434
 8000f40:	2000c22c 	.word	0x2000c22c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b4      	sub	sp, #208	; 0xd0
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f027 fab9 	bl	80284ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2284      	movs	r2, #132	; 0x84
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f027 faaa 	bl	80284ca <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f76:	f005 fe87 	bl	8006c88 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <SystemClock_Config+0x170>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <SystemClock_Config+0x170>)
 8000f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <SystemClock_Config+0x170>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000faa:	2309      	movs	r3, #9
 8000fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fcc:	2319      	movs	r3, #25
 8000fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 ff6e 	bl	8006ecc <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ff6:	f001 fb51 	bl	800269c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ffa:	f005 fe55 	bl	8006ca8 <HAL_PWREx_EnableOverDrive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001004:	f001 fb4a 	bl	800269c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800102a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800102e:	2106      	movs	r1, #6
 8001030:	4618      	mov	r0, r3
 8001032:	f006 f9ef 	bl	8007414 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800103c:	f001 fb2e 	bl	800269c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <SystemClock_Config+0x174>)
 8001042:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001054:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001058:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800106e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800107a:	2300      	movs	r3, #0
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107e:	2300      	movs	r3, #0
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001082:	2300      	movs	r3, #0
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800108a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f006 fbbf 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010a4:	f001 fafa 	bl	800269c <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	37d0      	adds	r7, #208	; 0xd0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000
 80010b8:	01b00868 	.word	0x01b00868

080010bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC3_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC3_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC3_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_ADC3_Init+0x98>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC3_Init+0xa0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC3_Init+0x98>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC3_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC3_Init+0x98>)
 800111e:	f002 fc01 	bl	8003924 <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001128:	f001 fab8 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800112c:	2304      	movs	r3, #4
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC3_Init+0x98>)
 800113e:	f002 fc35 	bl	80039ac <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001148:	f001 faa8 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000c578 	.word	0x2000c578
 8001158:	40012200 	.word	0x40012200
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <MX_CAN1_Init+0xcc>)
 800116a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_CAN1_Init+0xc8>)
 800116e:	2214      	movs	r2, #20
 8001170:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_CAN1_Init+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001180:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001184:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_CAN1_Init+0xc8>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_CAN1_Init+0xc8>)
 800119a:	2200      	movs	r2, #0
 800119c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b0:	481d      	ldr	r0, [pc, #116]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011b2:	f002 fe3f 	bl	8003e34 <HAL_CAN_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011bc:	f001 fa6e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011e4:	230e      	movs	r3, #14
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ee:	f002 ff1d 	bl	800402c <HAL_CAN_ConfigFilter>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011f8:	f001 fa50 	bl	800269c <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011fe:	f002 fff5 	bl	80041ec <HAL_CAN_Start>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001208:	f001 fa48 	bl	800269c <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800120c:	2102      	movs	r1, #2
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001210:	f003 f942 	bl	8004498 <HAL_CAN_ActivateNotification>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800121a:	f001 fa3f 	bl	800269c <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000c7f8 	.word	0x2000c7f8
 800122c:	40006400 	.word	0x40006400

08001230 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001238:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800123a:	4a8a      	ldr	r2, [pc, #552]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800123c:	2100      	movs	r1, #0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f003 f818 	bl	8004274 <HAL_CAN_GetRxMessage>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800124a:	f001 fa27 	bl	800269c <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800124e:	4b85      	ldr	r3, [pc, #532]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001256:	d145      	bne.n	80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001258:	4b82      	ldr	r3, [pc, #520]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d141      	bne.n	80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001260:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d13d      	bne.n	80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8001268:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b21a      	sxth	r2, r3
 800126e:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 800127c:	4b78      	ldr	r3, [pc, #480]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 8001284:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[5] << 8);
 800128c:	4b74      	ldr	r3, [pc, #464]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	b21a      	sxth	r2, r3
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001294:	795b      	ldrb	r3, [r3, #5]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 80012a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012a2:	4a71      	ldr	r2, [pc, #452]	; (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80012a4:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 80012a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	4b6c      	ldr	r3, [pc, #432]	; (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80012ba:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 80012bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012c0:	4a6b      	ldr	r2, [pc, #428]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80012c2:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 80012c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 2a90 	vmov	r2, s15
 80012e0:	4b64      	ldr	r3, [pc, #400]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80012e2:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012e4:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f240 6202 	movw	r2, #1538	; 0x602
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d12d      	bne.n	800134c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 80012f0:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d129      	bne.n	800134c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 80012f8:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d125      	bne.n	800134c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
  {
	 uint8_t oil_tmp_in = RxData[3];
 8001300:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 uint8_t oil_press_in = RxData[4];
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	f887 3020 	strb.w	r3, [r7, #32]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001310:	4b53      	ldr	r3, [pc, #332]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001312:	799b      	ldrb	r3, [r3, #6]
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001318:	79db      	ldrb	r3, [r3, #7]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	83fb      	strh	r3, [r7, #30]

	 oil_tmp = ((int)oil_tmp_in) * 1;
 8001324:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001328:	4a53      	ldr	r2, [pc, #332]	; (8001478 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800132a:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 800132c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001338:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800147c <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 800133c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001342:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 8001346:	8bfb      	ldrh	r3, [r7, #30]
 8001348:	4a4e      	ldr	r2, [pc, #312]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800134a:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f240 6203 	movw	r2, #1539	; 0x603
 8001354:	4293      	cmp	r3, r2
 8001356:	d130      	bne.n	80013ba <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d12c      	bne.n	80013ba <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001360:	4b40      	ldr	r3, [pc, #256]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d128      	bne.n	80013ba <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
  {
	 uint8_t lambda_in = RxData[2];
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	777b      	strb	r3, [r7, #29]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001370:	791b      	ldrb	r3, [r3, #4]
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001376:	795b      	ldrb	r3, [r3, #5]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	837b      	strh	r3, [r7, #26]
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001384:	799b      	ldrb	r3, [r3, #6]
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800138a:	79db      	ldrb	r3, [r3, #7]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	833b      	strh	r3, [r7, #24]
	 lambda = ((float)lambda_in)*0.0078125f;
 8001396:	7f7b      	ldrb	r3, [r7, #29]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001488 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 80013ae:	8b7b      	ldrh	r3, [r7, #26]
 80013b0:	4a37      	ldr	r2, [pc, #220]	; (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 80013b2:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 80013b4:	8b3b      	ldrh	r3, [r7, #24]
 80013b6:	4a37      	ldr	r2, [pc, #220]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 80013b8:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f240 6204 	movw	r2, #1540	; 0x604
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d11f      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11b      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d117      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013d8:	789b      	ldrb	r3, [r3, #2]
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013de:	78db      	ldrb	r3, [r3, #3]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	82fb      	strh	r3, [r7, #22]
	 float battery_voltage = ((float)batt_in)*0.027f;
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
 80013f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fc:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800140e:	d123      	bne.n	8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d11f      	bne.n	8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d11b      	bne.n	8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	73fb      	strb	r3, [r7, #15]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	81bb      	strh	r3, [r7, #12]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001444:	eddf 6a16 	vldr	s13, [pc, #88]	; 80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>
 8001448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 8001452:	89bb      	ldrh	r3, [r7, #12]
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001456:	6013      	str	r3, [r2, #0]
    }
}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000c7b0 	.word	0x2000c7b0
 8001464:	2000c894 	.word	0x2000c894
 8001468:	20000004 	.word	0x20000004
 800146c:	20000008 	.word	0x20000008
 8001470:	200003cc 	.word	0x200003cc
 8001474:	200003d8 	.word	0x200003d8
 8001478:	200003c0 	.word	0x200003c0
 800147c:	3d800000 	.word	0x3d800000
 8001480:	200003c4 	.word	0x200003c4
 8001484:	2000000c 	.word	0x2000000c
 8001488:	3c000000 	.word	0x3c000000
 800148c:	20000010 	.word	0x20000010
 8001490:	200003d0 	.word	0x200003d0
 8001494:	200003d4 	.word	0x200003d4
 8001498:	3cdd2f1b 	.word	0x3cdd2f1b
 800149c:	200003dc 	.word	0x200003dc
 80014a0:	42c80000 	.word	0x42c80000
 80014a4:	20000014 	.word	0x20000014
 80014a8:	200003c8 	.word	0x200003c8

080014ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <MX_CRC_Init+0x40>)
 80014b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_CRC_Init+0x3c>)
 80014d6:	f003 fb41 	bl	8004b5c <HAL_CRC_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014e0:	f001 f8dc 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000c3a8 	.word	0x2000c3a8
 80014ec:	40023000 	.word	0x40023000

080014f0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_DCMI_Init+0x60>)
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <MX_DCMI_Init+0x64>)
 80014f8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_DCMI_Init+0x60>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_DCMI_Init+0x60>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_DCMI_Init+0x60>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_DCMI_Init+0x60>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_DCMI_Init+0x60>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_DCMI_Init+0x60>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_DCMI_Init+0x60>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_DCMI_Init+0x60>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_DCMI_Init+0x60>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_DCMI_Init+0x60>)
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_DCMI_Init+0x60>)
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_DCMI_Init+0x60>)
 800153e:	f003 fbf7 	bl	8004d30 <HAL_DCMI_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001548:	f001 f8a8 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000c5c0 	.word	0x2000c5c0
 8001554:	50050000 	.word	0x50050000

08001558 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <MX_DMA2D_Init+0x60>)
 8001560:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001582:	2200      	movs	r2, #0
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 8001588:	2200      	movs	r2, #0
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 800158e:	f003 fce3 	bl	8004f58 <HAL_DMA2D_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001598:	f001 f880 	bl	800269c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800159c:	2101      	movs	r1, #1
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_DMA2D_Init+0x5c>)
 80015a0:	f003 ffa4 	bl	80054ec <HAL_DMA2D_ConfigLayer>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80015aa:	f001 f877 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000c770 	.word	0x2000c770
 80015b8:	4002b000 	.word	0x4002b000

080015bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2234      	movs	r2, #52	; 0x34
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f026 ff7e 	bl	80284ca <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015d0:	4a3a      	ldr	r2, [pc, #232]	; (80016bc <MX_LTDC_Init+0x100>)
 80015d2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015d4:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015f4:	2209      	movs	r2, #9
 80015f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80015fa:	2235      	movs	r2, #53	; 0x35
 80015fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001600:	220b      	movs	r2, #11
 8001602:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001606:	f240 2215 	movw	r2, #533	; 0x215
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800160e:	f240 121b 	movw	r2, #283	; 0x11b
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001616:	f240 2235 	movw	r2, #565	; 0x235
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800161e:	f240 121d 	movw	r2, #285	; 0x11d
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <MX_LTDC_Init+0xfc>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800163c:	481e      	ldr	r0, [pc, #120]	; (80016b8 <MX_LTDC_Init+0xfc>)
 800163e:	f004 ff8b 	bl	8006558 <HAL_LTDC_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001648:	f001 f828 	bl	800269c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001650:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001654:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800165a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800165e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001660:	2301      	movs	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001664:	23ff      	movs	r3, #255	; 0xff
 8001666:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800166c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001670:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001672:	2305      	movs	r3, #5
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001676:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800167c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001682:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_LTDC_Init+0xfc>)
 80016a2:	f005 f8e1 	bl	8006868 <HAL_LTDC_ConfigLayer>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80016ac:	f000 fff6 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3738      	adds	r7, #56	; 0x38
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2000c4d0 	.word	0x2000c4d0
 80016bc:	40016800 	.word	0x40016800

080016c0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_QUADSPI_Init+0x54>)
 80016c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016cc:	22ff      	movs	r2, #255	; 0xff
 80016ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016de:	2201      	movs	r2, #1
 80016e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_QUADSPI_Init+0x50>)
 80016fc:	f005 fb24 	bl	8006d48 <HAL_QSPI_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001706:	f000 ffc9 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000c8b0 	.word	0x2000c8b0
 8001714:	a0001000 	.word	0xa0001000

08001718 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b092      	sub	sp, #72	; 0x48
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800171e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	222c      	movs	r2, #44	; 0x2c
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f026 fec5 	bl	80284ca <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <MX_RTC_Init+0x148>)
 8001742:	4a48      	ldr	r2, [pc, #288]	; (8001864 <MX_RTC_Init+0x14c>)
 8001744:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <MX_RTC_Init+0x148>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <MX_RTC_Init+0x148>)
 800174e:	227f      	movs	r2, #127	; 0x7f
 8001750:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <MX_RTC_Init+0x148>)
 8001754:	22ff      	movs	r2, #255	; 0xff
 8001756:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <MX_RTC_Init+0x148>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800175e:	4b40      	ldr	r3, [pc, #256]	; (8001860 <MX_RTC_Init+0x148>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001764:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <MX_RTC_Init+0x148>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800176a:	483d      	ldr	r0, [pc, #244]	; (8001860 <MX_RTC_Init+0x148>)
 800176c:	f006 fd78 	bl	8008260 <HAL_RTC_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001776:	f000 ff91 	bl	800269c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001798:	2201      	movs	r2, #1
 800179a:	4619      	mov	r1, r3
 800179c:	4830      	ldr	r0, [pc, #192]	; (8001860 <MX_RTC_Init+0x148>)
 800179e:	f006 fddb 	bl	8008358 <HAL_RTC_SetTime>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80017a8:	f000 ff78 	bl	800269c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c8:	2201      	movs	r2, #1
 80017ca:	4619      	mov	r1, r3
 80017cc:	4824      	ldr	r0, [pc, #144]	; (8001860 <MX_RTC_Init+0x148>)
 80017ce:	f006 fe81 	bl	80084d4 <HAL_RTC_SetDate>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80017d8:	f000 ff60 	bl	800269c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017dc:	2300      	movs	r3, #0
 80017de:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	2201      	movs	r2, #1
 8001810:	4619      	mov	r1, r3
 8001812:	4813      	ldr	r0, [pc, #76]	; (8001860 <MX_RTC_Init+0x148>)
 8001814:	f006 ff06 	bl	8008624 <HAL_RTC_SetAlarm>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800181e:	f000 ff3d 	bl	800269c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <MX_RTC_Init+0x148>)
 8001836:	f006 fef5 	bl	8008624 <HAL_RTC_SetAlarm>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001840:	f000 ff2c 	bl	800269c <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001844:	2202      	movs	r2, #2
 8001846:	2100      	movs	r1, #0
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_RTC_Init+0x148>)
 800184a:	f007 f875 	bl	8008938 <HAL_RTCEx_SetTimeStamp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001854:	f000 ff22 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3748      	adds	r7, #72	; 0x48
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000c690 	.word	0x2000c690
 8001864:	40002800 	.word	0x40002800

08001868 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800186e:	4a4e      	ldr	r2, [pc, #312]	; (80019a8 <MX_SAI2_Init+0x140>)
 8001870:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001872:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800187e:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001880:	2240      	movs	r2, #64	; 0x40
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001886:	2200      	movs	r2, #0
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800188c:	2200      	movs	r2, #0
 800188e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001890:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <MX_SAI2_Init+0x13c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <MX_SAI2_Init+0x13c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018a2:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018a8:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <MX_SAI2_Init+0x144>)
 80018ac:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018c8:	2208      	movs	r2, #8
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80018fc:	4829      	ldr	r0, [pc, #164]	; (80019a4 <MX_SAI2_Init+0x13c>)
 80018fe:	f007 f871 	bl	80089e4 <HAL_SAI_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001908:	f000 fec8 	bl	800269c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_SAI2_Init+0x148>)
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <MX_SAI2_Init+0x14c>)
 8001910:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_SAI2_Init+0x148>)
 800191a:	2203      	movs	r2, #3
 800191c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001926:	2200      	movs	r2, #0
 8001928:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_SAI2_Init+0x148>)
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001932:	2201      	movs	r2, #1
 8001934:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_SAI2_Init+0x148>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_SAI2_Init+0x148>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001956:	2200      	movs	r2, #0
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_SAI2_Init+0x148>)
 800195c:	2208      	movs	r2, #8
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001962:	2201      	movs	r2, #1
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001968:	2200      	movs	r2, #0
 800196a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_SAI2_Init+0x148>)
 800196e:	2200      	movs	r2, #0
 8001970:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001974:	2200      	movs	r2, #0
 8001976:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_SAI2_Init+0x148>)
 800197a:	2200      	movs	r2, #0
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001980:	2200      	movs	r2, #0
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001986:	2201      	movs	r2, #1
 8001988:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_SAI2_Init+0x148>)
 800198c:	2200      	movs	r2, #0
 800198e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_SAI2_Init+0x148>)
 8001992:	f007 f827 	bl	80089e4 <HAL_SAI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800199c:	f000 fe7e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000c324 	.word	0x2000c324
 80019a8:	40015c04 	.word	0x40015c04
 80019ac:	0002ee00 	.word	0x0002ee00
 80019b0:	2000c1a8 	.word	0x2000c1a8
 80019b4:	40015c24 	.word	0x40015c24

080019b8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <MX_SDMMC1_SD_Init+0x3c>)
 80019c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <MX_SDMMC1_SD_Init+0x38>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	2000c3cc 	.word	0x2000c3cc
 80019f4:	40012c00 	.word	0x40012c00

080019f8 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 80019fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a02:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <MX_SPDIFRX_Init+0x5c>)
 8001a42:	f008 fa63 	bl	8009f0c <HAL_SPDIFRX_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f000 fe26 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000c2d8 	.word	0x2000c2d8

08001a58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <MX_SPI2_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_SPI2_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_SPI2_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_SPI2_Init+0x74>)
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_SPI2_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_SPI2_Init+0x74>)
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_SPI2_Init+0x74>)
 8001ab8:	f008 fa84 	bl	8009fc4 <HAL_SPI_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 fdeb 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000c234 	.word	0x2000c234
 8001ad0:	40003800 	.word	0x40003800

08001ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b09a      	sub	sp, #104	; 0x68
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	222c      	movs	r2, #44	; 0x2c
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f026 fcdb 	bl	80284ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <MX_TIM1_Init+0x154>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b3e:	4839      	ldr	r0, [pc, #228]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b40:	f008 fad2 	bl	800a0e8 <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b4a:	f000 fda7 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4832      	ldr	r0, [pc, #200]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b5c:	f008 fd7c 	bl	800a658 <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b66:	f000 fd99 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b6a:	482e      	ldr	r0, [pc, #184]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b6c:	f008 fb12 	bl	800a194 <HAL_TIM_PWM_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b76:	f000 fd91 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4825      	ldr	r0, [pc, #148]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001b8e:	f009 f9dd 	bl	800af4c <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b98:	f000 fd80 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9c:	2360      	movs	r3, #96	; 0x60
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4818      	ldr	r0, [pc, #96]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001bc2:	f008 fc31 	bl	800a428 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001bcc:	f000 fd66 	bl	800269c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001c06:	f009 fa2f 	bl	800b068 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c10:	f000 fd44 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MX_TIM1_Init+0x150>)
 8001c16:	f001 fa3b 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001c1a:	bf00      	nop
 8001c1c:	3768      	adds	r7, #104	; 0x68
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000c6b0 	.word	0x2000c6b0
 8001c28:	40010000 	.word	0x40010000

08001c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	; 0x38
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c84:	4823      	ldr	r0, [pc, #140]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001c86:	f008 fa2f 	bl	800a0e8 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c90:	f000 fd04 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481c      	ldr	r0, [pc, #112]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001ca2:	f008 fcd9 	bl	800a658 <HAL_TIM_ConfigClockSource>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cac:	f000 fcf6 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb0:	4818      	ldr	r0, [pc, #96]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001cb2:	f008 fa6f 	bl	800a194 <HAL_TIM_PWM_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cbc:	f000 fcee 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001cd0:	f009 f93c 	bl	800af4c <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cda:	f000 fcdf 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cde:	2360      	movs	r3, #96	; 0x60
 8001ce0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4807      	ldr	r0, [pc, #28]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001cf6:	f008 fb97 	bl	800a428 <HAL_TIM_PWM_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d00:	f000 fccc 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <MX_TIM2_Init+0xe8>)
 8001d06:	f001 f9c3 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001d0a:	bf00      	nop
 8001d0c:	3738      	adds	r7, #56	; 0x38
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000c7b8 	.word	0x2000c7b8

08001d18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <MX_TIM3_Init+0xe8>)
 8001d4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6e:	4823      	ldr	r0, [pc, #140]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d70:	f008 f9ba 	bl	800a0e8 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d7a:	f000 fc8f 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	481c      	ldr	r0, [pc, #112]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d8c:	f008 fc64 	bl	800a658 <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d96:	f000 fc81 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d9a:	4818      	ldr	r0, [pc, #96]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001d9c:	f008 f9fa 	bl	800a194 <HAL_TIM_PWM_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001da6:	f000 fc79 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4810      	ldr	r0, [pc, #64]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001dba:	f009 f8c7 	bl	800af4c <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001dc4:	f000 fc6a 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4807      	ldr	r0, [pc, #28]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001de0:	f008 fb22 	bl	800a428 <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001dea:	f000 fc57 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <MX_TIM3_Init+0xe4>)
 8001df0:	f001 f94e 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001df4:	bf00      	nop
 8001df6:	3738      	adds	r7, #56	; 0x38
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000c490 	.word	0x2000c490
 8001e00:	40000400 	.word	0x40000400

08001e04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <MX_TIM5_Init+0xe8>)
 8001e3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e5a:	4823      	ldr	r0, [pc, #140]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e5c:	f008 f944 	bl	800a0e8 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001e66:	f000 fc19 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	4619      	mov	r1, r3
 8001e76:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e78:	f008 fbee 	bl	800a658 <HAL_TIM_ConfigClockSource>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e82:	f000 fc0b 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e86:	4818      	ldr	r0, [pc, #96]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001e88:	f008 f984 	bl	800a194 <HAL_TIM_PWM_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e92:	f000 fc03 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001ea6:	f009 f851 	bl	800af4c <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001eb0:	f000 fbf4 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb4:	2360      	movs	r3, #96	; 0x60
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001ecc:	f008 faac 	bl	800a428 <HAL_TIM_PWM_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001ed6:	f000 fbe1 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <MX_TIM5_Init+0xe4>)
 8001edc:	f001 f8d8 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001ee0:	bf00      	nop
 8001ee2:	3738      	adds	r7, #56	; 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000c450 	.word	0x2000c450
 8001eec:	40000c00 	.word	0x40000c00

08001ef0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f10:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <MX_TIM8_Init+0xa0>)
 8001f12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f3a:	f008 f8d5 	bl	800a0e8 <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 fbaa 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f56:	f008 fb7f 	bl	800a658 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001f60:	f000 fb9c 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_TIM8_Init+0x9c>)
 8001f76:	f008 ffe9 	bl	800af4c <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001f80:	f000 fb8c 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000c298 	.word	0x2000c298
 8001f90:	40010400 	.word	0x40010400

08001f94 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	615a      	str	r2, [r3, #20]
 8001faa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <MX_TIM12_Init+0x84>)
 8001fb0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001fd0:	4810      	ldr	r0, [pc, #64]	; (8002014 <MX_TIM12_Init+0x80>)
 8001fd2:	f008 f8df 	bl	800a194 <HAL_TIM_PWM_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001fdc:	f000 fb5e 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <MX_TIM12_Init+0x80>)
 8001ff8:	f008 fa16 	bl	800a428 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002002:	f000 fb4b 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002006:	4803      	ldr	r0, [pc, #12]	; (8002014 <MX_TIM12_Init+0x80>)
 8002008:	f001 f842 	bl	8003090 <HAL_TIM_MspPostInit>

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000c820 	.word	0x2000c820
 8002018:	40001800 	.word	0x40001800

0800201c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <MX_USART1_UART_Init+0x5c>)
 8002024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART1_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART1_UART_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART1_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_USART1_UART_Init+0x58>)
 8002060:	f009 f89e 	bl	800b1a0 <HAL_UART_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800206a:	f000 fb17 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000c610 	.word	0x2000c610
 8002078:	40011000 	.word	0x40011000

0800207c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <MX_USART6_UART_Init+0x5c>)
 8002084:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_USART6_UART_Init+0x58>)
 80020c0:	f009 f86e 	bl	800b1a0 <HAL_UART_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80020ca:	f000 fae7 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000c6f0 	.word	0x2000c6f0
 80020d8:	40011400 	.word	0x40011400

080020dc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <MX_FMC_Init+0x14c>)
 80020f6:	4a4d      	ldr	r2, [pc, #308]	; (800222c <MX_FMC_Init+0x150>)
 80020f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80020fa:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <MX_FMC_Init+0x14c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002100:	4b49      	ldr	r3, [pc, #292]	; (8002228 <MX_FMC_Init+0x14c>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002106:	4b48      	ldr	r3, [pc, #288]	; (8002228 <MX_FMC_Init+0x14c>)
 8002108:	2204      	movs	r2, #4
 800210a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800210c:	4b46      	ldr	r3, [pc, #280]	; (8002228 <MX_FMC_Init+0x14c>)
 800210e:	2210      	movs	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002112:	4b45      	ldr	r3, [pc, #276]	; (8002228 <MX_FMC_Init+0x14c>)
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002118:	4b43      	ldr	r3, [pc, #268]	; (8002228 <MX_FMC_Init+0x14c>)
 800211a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800211e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <MX_FMC_Init+0x14c>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <MX_FMC_Init+0x14c>)
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <MX_FMC_Init+0x14c>)
 8002130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <MX_FMC_Init+0x14c>)
 8002138:	2200      	movs	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800213c:	2302      	movs	r3, #2
 800213e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002140:	2307      	movs	r3, #7
 8002142:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002144:	2304      	movs	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002148:	2307      	movs	r3, #7
 800214a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800214c:	2303      	movs	r3, #3
 800214e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002154:	2302      	movs	r3, #2
 8002156:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4832      	ldr	r0, [pc, #200]	; (8002228 <MX_FMC_Init+0x14c>)
 800215e:	f007 fe55 	bl	8009e0c <HAL_SDRAM_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002168:	f000 fa98 	bl	800269c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <MX_FMC_Init+0x154>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <MX_FMC_Init+0x154>)
 8002178:	2210      	movs	r2, #16
 800217a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <MX_FMC_Init+0x154>)
 800217e:	2201      	movs	r2, #1
 8002180:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <MX_FMC_Init+0x154>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218c:	4928      	ldr	r1, [pc, #160]	; (8002230 <MX_FMC_Init+0x154>)
 800218e:	4826      	ldr	r0, [pc, #152]	; (8002228 <MX_FMC_Init+0x14c>)
 8002190:	f007 fe70 	bl	8009e74 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002194:	2001      	movs	r0, #1
 8002196:	f001 fba3 	bl	80038e0 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <MX_FMC_Init+0x154>)
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <MX_FMC_Init+0x154>)
 80021a2:	2210      	movs	r2, #16
 80021a4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <MX_FMC_Init+0x154>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021ac:	4b20      	ldr	r3, [pc, #128]	; (8002230 <MX_FMC_Init+0x154>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b6:	491e      	ldr	r1, [pc, #120]	; (8002230 <MX_FMC_Init+0x154>)
 80021b8:	481b      	ldr	r0, [pc, #108]	; (8002228 <MX_FMC_Init+0x14c>)
 80021ba:	f007 fe5b 	bl	8009e74 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <MX_FMC_Init+0x154>)
 80021c0:	2203      	movs	r2, #3
 80021c2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_FMC_Init+0x154>)
 80021c6:	2210      	movs	r2, #16
 80021c8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <MX_FMC_Init+0x154>)
 80021cc:	2208      	movs	r2, #8
 80021ce:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_FMC_Init+0x154>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021da:	4915      	ldr	r1, [pc, #84]	; (8002230 <MX_FMC_Init+0x154>)
 80021dc:	4812      	ldr	r0, [pc, #72]	; (8002228 <MX_FMC_Init+0x14c>)
 80021de:	f007 fe49 	bl	8009e74 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80021e2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80021e6:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_FMC_Init+0x154>)
 80021ea:	2204      	movs	r2, #4
 80021ec:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <MX_FMC_Init+0x154>)
 80021f0:	2210      	movs	r2, #16
 80021f2:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_FMC_Init+0x154>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <MX_FMC_Init+0x154>)
 80021fe:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	490a      	ldr	r1, [pc, #40]	; (8002230 <MX_FMC_Init+0x154>)
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <MX_FMC_Init+0x14c>)
 8002208:	f007 fe34 	bl	8009e74 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800220c:	f240 712b 	movw	r1, #1835	; 0x72b
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_FMC_Init+0x14c>)
 8002212:	f007 fe5a 	bl	8009eca <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8002216:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800221a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800221e:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000c860 	.word	0x2000c860
 800222c:	a0000140 	.word	0xa0000140
 8002230:	200003b0 	.word	0x200003b0

08002234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	; 0x40
 8002238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800224a:	4baf      	ldr	r3, [pc, #700]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4aae      	ldr	r2, [pc, #696]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4bac      	ldr	r3, [pc, #688]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002262:	4ba9      	ldr	r3, [pc, #676]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4aa8      	ldr	r2, [pc, #672]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4ba6      	ldr	r3, [pc, #664]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	4ba3      	ldr	r3, [pc, #652]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4aa2      	ldr	r2, [pc, #648]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4ba0      	ldr	r3, [pc, #640]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002292:	4b9d      	ldr	r3, [pc, #628]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a9c      	ldr	r2, [pc, #624]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b9a      	ldr	r3, [pc, #616]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	4b97      	ldr	r3, [pc, #604]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a96      	ldr	r2, [pc, #600]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b94      	ldr	r3, [pc, #592]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b91      	ldr	r3, [pc, #580]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a90      	ldr	r2, [pc, #576]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b8e      	ldr	r3, [pc, #568]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022da:	4b8b      	ldr	r3, [pc, #556]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a8a      	ldr	r2, [pc, #552]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80022f2:	4b85      	ldr	r3, [pc, #532]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a84      	ldr	r2, [pc, #528]	; (8002508 <MX_GPIO_Init+0x2d4>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b82      	ldr	r3, [pc, #520]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800230a:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a7e      	ldr	r2, [pc, #504]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b7c      	ldr	r3, [pc, #496]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002322:	4b79      	ldr	r3, [pc, #484]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a78      	ldr	r2, [pc, #480]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b76      	ldr	r3, [pc, #472]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <MX_GPIO_Init+0x2d4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a72      	ldr	r2, [pc, #456]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b70      	ldr	r3, [pc, #448]	; (8002508 <MX_GPIO_Init+0x2d4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2120      	movs	r1, #32
 8002356:	486d      	ldr	r0, [pc, #436]	; (800250c <MX_GPIO_Init+0x2d8>)
 8002358:	f003 fbb8 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	210c      	movs	r1, #12
 8002360:	486b      	ldr	r0, [pc, #428]	; (8002510 <MX_GPIO_Init+0x2dc>)
 8002362:	f003 fbb3 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	2108      	movs	r1, #8
 800236a:	486a      	ldr	r0, [pc, #424]	; (8002514 <MX_GPIO_Init+0x2e0>)
 800236c:	f003 fbae 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002376:	4866      	ldr	r0, [pc, #408]	; (8002510 <MX_GPIO_Init+0x2dc>)
 8002378:	f003 fba8 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002382:	4865      	ldr	r0, [pc, #404]	; (8002518 <MX_GPIO_Init+0x2e4>)
 8002384:	f003 fba2 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	21c8      	movs	r1, #200	; 0xc8
 800238c:	4863      	ldr	r0, [pc, #396]	; (800251c <MX_GPIO_Init+0x2e8>)
 800238e:	f003 fb9d 	bl	8005acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002392:	2308      	movs	r3, #8
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a2:	4619      	mov	r1, r3
 80023a4:	485e      	ldr	r0, [pc, #376]	; (8002520 <MX_GPIO_Init+0x2ec>)
 80023a6:	f003 f9cf 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80023aa:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023bc:	230b      	movs	r3, #11
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	4855      	ldr	r0, [pc, #340]	; (800251c <MX_GPIO_Init+0x2e8>)
 80023c8:	f003 f9be 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80023cc:	f643 4323 	movw	r3, #15395	; 0x3c23
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023de:	230a      	movs	r3, #10
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	484e      	ldr	r0, [pc, #312]	; (8002524 <MX_GPIO_Init+0x2f0>)
 80023ea:	f003 f9ad 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002400:	4619      	mov	r1, r3
 8002402:	4849      	ldr	r0, [pc, #292]	; (8002528 <MX_GPIO_Init+0x2f4>)
 8002404:	f003 f9a0 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002408:	2340      	movs	r3, #64	; 0x40
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <MX_GPIO_Init+0x2f8>)
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002418:	4619      	mov	r1, r3
 800241a:	483c      	ldr	r0, [pc, #240]	; (800250c <MX_GPIO_Init+0x2d8>)
 800241c:	f003 f994 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002420:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002432:	230a      	movs	r3, #10
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	483c      	ldr	r0, [pc, #240]	; (8002530 <MX_GPIO_Init+0x2fc>)
 800243e:	f003 f983 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002442:	2320      	movs	r3, #32
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002456:	4619      	mov	r1, r3
 8002458:	482c      	ldr	r0, [pc, #176]	; (800250c <MX_GPIO_Init+0x2d8>)
 800245a:	f003 f975 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800245e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002474:	4619      	mov	r1, r3
 8002476:	4826      	ldr	r0, [pc, #152]	; (8002510 <MX_GPIO_Init+0x2dc>)
 8002478:	f003 f966 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800247c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002482:	2300      	movs	r3, #0
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248e:	4619      	mov	r1, r3
 8002490:	4828      	ldr	r0, [pc, #160]	; (8002534 <MX_GPIO_Init+0x300>)
 8002492:	f003 f959 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002496:	2308      	movs	r3, #8
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	4819      	ldr	r0, [pc, #100]	; (8002514 <MX_GPIO_Init+0x2e0>)
 80024ae:	f003 f94b 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024b2:	2310      	movs	r3, #16
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c2:	4619      	mov	r1, r3
 80024c4:	4811      	ldr	r0, [pc, #68]	; (800250c <MX_GPIO_Init+0x2d8>)
 80024c6:	f003 f93f 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80024ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d0:	2300      	movs	r3, #0
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <MX_GPIO_Init+0x2e4>)
 80024e0:	f003 f932 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80024e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fa:	4619      	mov	r1, r3
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <MX_GPIO_Init+0x2e4>)
 80024fe:	f003 f923 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	e017      	b.n	8002538 <MX_GPIO_Init+0x304>
 8002508:	40023800 	.word	0x40023800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40022000 	.word	0x40022000
 8002514:	40022800 	.word	0x40022800
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40021800 	.word	0x40021800
 8002520:	40021000 	.word	0x40021000
 8002524:	40020400 	.word	0x40020400
 8002528:	40022400 	.word	0x40022400
 800252c:	10120000 	.word	0x10120000
 8002530:	40020000 	.word	0x40020000
 8002534:	40020800 	.word	0x40020800
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800253a:	4b44      	ldr	r3, [pc, #272]	; (800264c <MX_GPIO_Init+0x418>)
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	4841      	ldr	r0, [pc, #260]	; (8002650 <MX_GPIO_Init+0x41c>)
 800254a:	f003 f8fd 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800254e:	2310      	movs	r3, #16
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800255e:	230a      	movs	r3, #10
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	483a      	ldr	r0, [pc, #232]	; (8002654 <MX_GPIO_Init+0x420>)
 800256a:	f003 f8ed 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800256e:	23c8      	movs	r3, #200	; 0xc8
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	4834      	ldr	r0, [pc, #208]	; (8002658 <MX_GPIO_Init+0x424>)
 8002586:	f003 f8df 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800258a:	2305      	movs	r3, #5
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800259a:	230a      	movs	r3, #10
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a2:	4619      	mov	r1, r3
 80025a4:	482d      	ldr	r0, [pc, #180]	; (800265c <MX_GPIO_Init+0x428>)
 80025a6:	f003 f8cf 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025aa:	2332      	movs	r3, #50	; 0x32
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ba:	230b      	movs	r3, #11
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c2:	4619      	mov	r1, r3
 80025c4:	4825      	ldr	r0, [pc, #148]	; (800265c <MX_GPIO_Init+0x428>)
 80025c6:	f003 f8bf 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025ca:	2304      	movs	r3, #4
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	481e      	ldr	r0, [pc, #120]	; (8002658 <MX_GPIO_Init+0x424>)
 80025de:	f003 f8b3 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025e2:	2386      	movs	r3, #134	; 0x86
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025f2:	230b      	movs	r3, #11
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fa:	4619      	mov	r1, r3
 80025fc:	4818      	ldr	r0, [pc, #96]	; (8002660 <MX_GPIO_Init+0x42c>)
 80025fe:	f003 f8a3 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002602:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002608:	2312      	movs	r3, #18
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002614:	2304      	movs	r3, #4
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261c:	4619      	mov	r1, r3
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_GPIO_Init+0x420>)
 8002620:	f003 f892 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002624:	2328      	movs	r3, #40	; 0x28
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002634:	230a      	movs	r3, #10
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263c:	4619      	mov	r1, r3
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <MX_GPIO_Init+0x42c>)
 8002640:	f003 f882 	bl	8005748 <HAL_GPIO_Init>

}
 8002644:	bf00      	nop
 8002646:	3740      	adds	r7, #64	; 0x40
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	10120000 	.word	0x10120000
 8002650:	40022000 	.word	0x40022000
 8002654:	40021c00 	.word	0x40021c00
 8002658:	40021800 	.word	0x40021800
 800265c:	40020800 	.word	0x40020800
 8002660:	40020000 	.word	0x40020000

08002664 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 800266c:	f00d fcd4 	bl	8010018 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002670:	2001      	movs	r0, #1
 8002672:	f00a fb99 	bl	800cda8 <osDelay>
 8002676:	e7fb      	b.n	8002670 <StartDefaultTask+0xc>

08002678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800268a:	f001 f909 	bl	80038a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40001000 	.word	0x40001000

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_MspInit+0x4c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_MspInit+0x4c>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_MspInit+0x4c>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_MspInit+0x4c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	210f      	movs	r1, #15
 80026e6:	f06f 0001 	mvn.w	r0, #1
 80026ea:	f002 f9ff 	bl	8004aec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <HAL_ADC_MspInit+0xa4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d13c      	bne.n	8002798 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_ADC_MspInit+0xa8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002766:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800276a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276c:	2303      	movs	r3, #3
 800276e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	480b      	ldr	r0, [pc, #44]	; (80027a8 <HAL_ADC_MspInit+0xac>)
 800277c:	f002 ffe4 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002780:	2301      	movs	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002784:	2303      	movs	r3, #3
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	4806      	ldr	r0, [pc, #24]	; (80027ac <HAL_ADC_MspInit+0xb0>)
 8002794:	f002 ffd8 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012200 	.word	0x40012200
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40020000 	.word	0x40020000

080027b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_CAN_MspInit+0x8c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d130      	bne.n	8002834 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a14      	ldr	r2, [pc, #80]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_CAN_MspInit+0x90>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002814:	2309      	movs	r3, #9
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4809      	ldr	r0, [pc, #36]	; (8002844 <HAL_CAN_MspInit+0x94>)
 8002820:	f002 ff92 	bl	8005748 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2105      	movs	r1, #5
 8002828:	2014      	movs	r0, #20
 800282a:	f002 f95f 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800282e:	2014      	movs	r0, #20
 8002830:	f002 f978 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40006400 	.word	0x40006400
 8002840:	40023800 	.word	0x40023800
 8002844:	40020400 	.word	0x40020400

08002848 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_CRC_MspInit+0x38>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10b      	bne.n	8002872 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_CRC_MspInit+0x3c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_CRC_MspInit+0x3c>)
 8002860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_CRC_MspInit+0x3c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023000 	.word	0x40023000
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_DCMI_MspInit+0x160>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f040 809a 	bne.w	80029e0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6353      	str	r3, [r2, #52]	; 0x34
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c4:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ca:	f043 0310 	orr.w	r3, r3, #16
 80028ce:	6313      	str	r3, [r2, #48]	; 0x30
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6313      	str	r3, [r2, #48]	; 0x30
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f4:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a3c      	ldr	r2, [pc, #240]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800290c:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b31      	ldr	r3, [pc, #196]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a30      	ldr	r2, [pc, #192]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_DCMI_MspInit+0x164>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800293c:	2360      	movs	r3, #96	; 0x60
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800294c:	230d      	movs	r3, #13
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	4619      	mov	r1, r3
 8002956:	4826      	ldr	r0, [pc, #152]	; (80029f0 <HAL_DCMI_MspInit+0x168>)
 8002958:	f002 fef6 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800295c:	2308      	movs	r3, #8
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800296c:	230d      	movs	r3, #13
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	481f      	ldr	r0, [pc, #124]	; (80029f4 <HAL_DCMI_MspInit+0x16c>)
 8002978:	f002 fee6 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800297c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800298e:	230d      	movs	r3, #13
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	4817      	ldr	r0, [pc, #92]	; (80029f8 <HAL_DCMI_MspInit+0x170>)
 800299a:	f002 fed5 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800299e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029b0:	230d      	movs	r3, #13
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	4810      	ldr	r0, [pc, #64]	; (80029fc <HAL_DCMI_MspInit+0x174>)
 80029bc:	f002 fec4 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029c0:	2350      	movs	r3, #80	; 0x50
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029d0:	230d      	movs	r3, #13
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d8:	4619      	mov	r1, r3
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <HAL_DCMI_MspInit+0x178>)
 80029dc:	f002 feb4 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80029e0:	bf00      	nop
 80029e2:	3738      	adds	r7, #56	; 0x38
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	50050000 	.word	0x50050000
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40021c00 	.word	0x40021c00
 8002a00:	40020000 	.word	0x40020000

08002a04 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <HAL_DMA2D_MspInit+0x44>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d113      	bne.n	8002a3e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_DMA2D_MspInit+0x48>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <HAL_DMA2D_MspInit+0x48>)
 8002a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_DMA2D_MspInit+0x48>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2105      	movs	r1, #5
 8002a32:	205a      	movs	r0, #90	; 0x5a
 8002a34:	f002 f85a 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a38:	205a      	movs	r0, #90	; 0x5a
 8002a3a:	f002 f873 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	4002b000 	.word	0x4002b000
 8002a4c:	40023800 	.word	0x40023800

08002a50 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_DMA2D_MspDeInit+0x2c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_DMA2D_MspDeInit+0x30>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_DMA2D_MspDeInit+0x30>)
 8002a68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002a6e:	205a      	movs	r0, #90	; 0x5a
 8002a70:	f002 f866 	bl	8004b40 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	4002b000 	.word	0x4002b000
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_LTDC_MspInit+0x174>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f040 80a3 	bne.w	8002bee <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aa8:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	4a53      	ldr	r2, [pc, #332]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab4:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ac6:	f043 0310 	orr.w	r3, r3, #16
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b38:	2310      	movs	r3, #16
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b48:	230e      	movs	r3, #14
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	4619      	mov	r1, r3
 8002b52:	482b      	ldr	r0, [pc, #172]	; (8002c00 <HAL_LTDC_MspInit+0x17c>)
 8002b54:	f002 fdf8 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002b58:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b6a:	230e      	movs	r3, #14
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	4823      	ldr	r0, [pc, #140]	; (8002c04 <HAL_LTDC_MspInit+0x180>)
 8002b76:	f002 fde7 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002b7a:	23f7      	movs	r3, #247	; 0xf7
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b8a:	230e      	movs	r3, #14
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b92:	4619      	mov	r1, r3
 8002b94:	481c      	ldr	r0, [pc, #112]	; (8002c08 <HAL_LTDC_MspInit+0x184>)
 8002b96:	f002 fdd7 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bac:	2309      	movs	r3, #9
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4815      	ldr	r0, [pc, #84]	; (8002c0c <HAL_LTDC_MspInit+0x188>)
 8002bb8:	f002 fdc6 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bbc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bce:	230e      	movs	r3, #14
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <HAL_LTDC_MspInit+0x18c>)
 8002bda:	f002 fdb5 	bl	8005748 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2105      	movs	r1, #5
 8002be2:	2058      	movs	r0, #88	; 0x58
 8002be4:	f001 ff82 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002be8:	2058      	movs	r0, #88	; 0x58
 8002bea:	f001 ff9b 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002bee:	bf00      	nop
 8002bf0:	3738      	adds	r7, #56	; 0x38
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40016800 	.word	0x40016800
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40022400 	.word	0x40022400
 8002c08:	40022800 	.word	0x40022800
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40022000 	.word	0x40022000

08002c14 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_QSPI_MspInit+0x10c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d170      	bne.n	8002d18 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6393      	str	r3, [r2, #56]	; 0x38
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c4e:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c54:	f043 0310 	orr.w	r3, r3, #16
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c96:	2304      	movs	r3, #4
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ca6:	2309      	movs	r3, #9
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481d      	ldr	r0, [pc, #116]	; (8002d28 <HAL_QSPI_MspInit+0x114>)
 8002cb2:	f002 fd49 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4816      	ldr	r0, [pc, #88]	; (8002d2c <HAL_QSPI_MspInit+0x118>)
 8002cd2:	f002 fd39 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 031c 	add.w	r3, r7, #28
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480e      	ldr	r0, [pc, #56]	; (8002d2c <HAL_QSPI_MspInit+0x118>)
 8002cf2:	f002 fd29 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002cf6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d08:	2309      	movs	r3, #9
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4807      	ldr	r0, [pc, #28]	; (8002d30 <HAL_QSPI_MspInit+0x11c>)
 8002d14:	f002 fd18 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3730      	adds	r7, #48	; 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	a0001000 	.word	0xa0001000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020c00 	.word	0x40020c00

08002d34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_RTC_MspInit+0x2c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d105      	bne.n	8002d52 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RTC_MspInit+0x30>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_RTC_MspInit+0x30>)
 8002d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40002800 	.word	0x40002800
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <HAL_SD_MspInit+0xb4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d144      	bne.n	8002e14 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_SD_MspInit+0xb8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002dd2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002dd6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002de4:	230c      	movs	r3, #12
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4619      	mov	r1, r3
 8002dee:	480d      	ldr	r0, [pc, #52]	; (8002e24 <HAL_SD_MspInit+0xbc>)
 8002df0:	f002 fcaa 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002df4:	2304      	movs	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e00:	2303      	movs	r3, #3
 8002e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e04:	230c      	movs	r3, #12
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4806      	ldr	r0, [pc, #24]	; (8002e28 <HAL_SD_MspInit+0xc0>)
 8002e10:	f002 fc9a 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e14:	bf00      	nop
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020800 	.word	0x40020800
 8002e28:	40020c00 	.word	0x40020c00

08002e2c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002e4c:	d127      	bne.n	8002e9e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e8e:	2308      	movs	r3, #8
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e92:	f107 0314 	add.w	r3, r7, #20
 8002e96:	4619      	mov	r1, r3
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <HAL_SPDIFRX_MspInit+0x80>)
 8002e9a:	f002 fc55 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020c00 	.word	0x40020c00

08002eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <HAL_SPI_MspInit+0xb4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d144      	bne.n	8002f5c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed2:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_SPI_MspInit+0xb8>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	4619      	mov	r1, r3
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <HAL_SPI_MspInit+0xbc>)
 8002f36:	f002 fc07 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002f3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <HAL_SPI_MspInit+0xc0>)
 8002f58:	f002 fbf6 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40003800 	.word	0x40003800
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	40020400 	.word	0x40020400

08002f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_TIM_Base_MspInit+0xc8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10c      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f9e:	e046      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a24      	ldr	r2, [pc, #144]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
}
 8002fc2:	e034      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_TIM_Base_MspInit+0xd0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
}
 8002fe6:	e022      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_TIM_Base_MspInit+0xd4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
}
 800300a:	e010      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_TIM_Base_MspInit+0xd8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10b      	bne.n	800302e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
}
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40023800 	.word	0x40023800
 8003044:	40000400 	.word	0x40000400
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_TIM_PWM_MspInit+0x38>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10b      	bne.n	800307a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40001800 	.word	0x40001800
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_TIM_MspPostInit+0x178>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11d      	bne.n	80030ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a55      	ldr	r2, [pc, #340]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80030ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030dc:	2301      	movs	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	484a      	ldr	r0, [pc, #296]	; (8003210 <HAL_TIM_MspPostInit+0x180>)
 80030e8:	f002 fb2e 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030ec:	e087      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d11d      	bne.n	8003134 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a43      	ldr	r2, [pc, #268]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003122:	2301      	movs	r3, #1
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	4838      	ldr	r0, [pc, #224]	; (8003210 <HAL_TIM_MspPostInit+0x180>)
 800312e:	f002 fb0b 	bl	8005748 <HAL_GPIO_Init>
}
 8003132:	e064      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a36      	ldr	r2, [pc, #216]	; (8003214 <HAL_TIM_MspPostInit+0x184>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d11c      	bne.n	8003178 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313e:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a32      	ldr	r2, [pc, #200]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003156:	2310      	movs	r3, #16
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003166:	2302      	movs	r3, #2
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	4829      	ldr	r0, [pc, #164]	; (8003218 <HAL_TIM_MspPostInit+0x188>)
 8003172:	f002 fae9 	bl	8005748 <HAL_GPIO_Init>
}
 8003176:	e042      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_TIM_MspPostInit+0x18c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d11c      	bne.n	80031bc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a21      	ldr	r2, [pc, #132]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031aa:	2302      	movs	r3, #2
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	4619      	mov	r1, r3
 80031b4:	481a      	ldr	r0, [pc, #104]	; (8003220 <HAL_TIM_MspPostInit+0x190>)
 80031b6:	f002 fac7 	bl	8005748 <HAL_GPIO_Init>
}
 80031ba:	e020      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a18      	ldr	r2, [pc, #96]	; (8003224 <HAL_TIM_MspPostInit+0x194>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d11b      	bne.n	80031fe <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80031de:	2340      	movs	r3, #64	; 0x40
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80031ee:	2309      	movs	r3, #9
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	4619      	mov	r1, r3
 80031f8:	480b      	ldr	r0, [pc, #44]	; (8003228 <HAL_TIM_MspPostInit+0x198>)
 80031fa:	f002 faa5 	bl	8005748 <HAL_GPIO_Init>
}
 80031fe:	bf00      	nop
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40023800 	.word	0x40023800
 8003210:	40020000 	.word	0x40020000
 8003214:	40000400 	.word	0x40000400
 8003218:	40020400 	.word	0x40020400
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40022000 	.word	0x40022000
 8003224:	40001800 	.word	0x40001800
 8003228:	40021c00 	.word	0x40021c00

0800322c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3c      	ldr	r2, [pc, #240]	; (800333c <HAL_UART_MspInit+0x110>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d145      	bne.n	80032da <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800324e:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_UART_MspInit+0x114>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_UART_MspInit+0x114>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_UART_MspInit+0x114>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a6:	2307      	movs	r3, #7
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032aa:	f107 031c 	add.w	r3, r7, #28
 80032ae:	4619      	mov	r1, r3
 80032b0:	4824      	ldr	r0, [pc, #144]	; (8003344 <HAL_UART_MspInit+0x118>)
 80032b2:	f002 fa49 	bl	8005748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80032b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c8:	2307      	movs	r3, #7
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4619      	mov	r1, r3
 80032d2:	481d      	ldr	r0, [pc, #116]	; (8003348 <HAL_UART_MspInit+0x11c>)
 80032d4:	f002 fa38 	bl	8005748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032d8:	e02c      	b.n	8003334 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_UART_MspInit+0x120>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d127      	bne.n	8003334 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032ea:	f043 0320 	orr.w	r3, r3, #32
 80032ee:	6453      	str	r3, [r2, #68]	; 0x44
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_UART_MspInit+0x114>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003320:	2303      	movs	r3, #3
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003324:	2308      	movs	r3, #8
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	4619      	mov	r1, r3
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <HAL_UART_MspInit+0x124>)
 8003330:	f002 fa0a 	bl	8005748 <HAL_GPIO_Init>
}
 8003334:	bf00      	nop
 8003336:	3730      	adds	r7, #48	; 0x30
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40011000 	.word	0x40011000
 8003340:	40023800 	.word	0x40023800
 8003344:	40020400 	.word	0x40020400
 8003348:	40020000 	.word	0x40020000
 800334c:	40011400 	.word	0x40011400
 8003350:	40020800 	.word	0x40020800

08003354 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003368:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_FMC_MspInit+0x100>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d16d      	bne.n	800344c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003370:	4b38      	ldr	r3, [pc, #224]	; (8003454 <HAL_FMC_MspInit+0x100>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_FMC_MspInit+0x104>)
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4a37      	ldr	r2, [pc, #220]	; (8003458 <HAL_FMC_MspInit+0x104>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6393      	str	r3, [r2, #56]	; 0x38
 8003382:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_FMC_MspInit+0x104>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800338e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003392:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a0:	230c      	movs	r3, #12
 80033a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	482c      	ldr	r0, [pc, #176]	; (800345c <HAL_FMC_MspInit+0x108>)
 80033aa:	f002 f9cd 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80033ae:	f248 1333 	movw	r3, #33075	; 0x8133
 80033b2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033c0:	230c      	movs	r3, #12
 80033c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4825      	ldr	r0, [pc, #148]	; (8003460 <HAL_FMC_MspInit+0x10c>)
 80033ca:	f002 f9bd 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80033ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033d2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e0:	230c      	movs	r3, #12
 80033e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	481e      	ldr	r0, [pc, #120]	; (8003464 <HAL_FMC_MspInit+0x110>)
 80033ea:	f002 f9ad 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80033ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033f2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fc:	2303      	movs	r3, #3
 80033fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003400:	230c      	movs	r3, #12
 8003402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4817      	ldr	r0, [pc, #92]	; (8003468 <HAL_FMC_MspInit+0x114>)
 800340a:	f002 f99d 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800340e:	2328      	movs	r3, #40	; 0x28
 8003410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800341e:	230c      	movs	r3, #12
 8003420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4811      	ldr	r0, [pc, #68]	; (800346c <HAL_FMC_MspInit+0x118>)
 8003428:	f002 f98e 	bl	8005748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800342c:	2308      	movs	r3, #8
 800342e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800343c:	230c      	movs	r3, #12
 800343e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	480a      	ldr	r0, [pc, #40]	; (8003470 <HAL_FMC_MspInit+0x11c>)
 8003446:	f002 f97f 	bl	8005748 <HAL_GPIO_Init>
 800344a:	e000      	b.n	800344e <HAL_FMC_MspInit+0xfa>
    return;
 800344c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200003e0 	.word	0x200003e0
 8003458:	40023800 	.word	0x40023800
 800345c:	40021000 	.word	0x40021000
 8003460:	40021800 	.word	0x40021800
 8003464:	40020c00 	.word	0x40020c00
 8003468:	40021400 	.word	0x40021400
 800346c:	40021c00 	.word	0x40021c00
 8003470:	40020800 	.word	0x40020800

08003474 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800347c:	f7ff ff6a 	bl	8003354 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <HAL_SAI_MspInit+0xbc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d124      	bne.n	80034e4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034a2:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a21      	ldr	r2, [pc, #132]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 80034c2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034c4:	23f0      	movs	r3, #240	; 0xf0
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034d4:	230a      	movs	r3, #10
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	481c      	ldr	r0, [pc, #112]	; (8003550 <HAL_SAI_MspInit+0xc8>)
 80034e0:	f002 f932 	bl	8005748 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <HAL_SAI_MspInit+0xcc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d125      	bne.n	800353a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4a14      	ldr	r2, [pc, #80]	; (800354c <HAL_SAI_MspInit+0xc4>)
 80034fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003500:	6453      	str	r3, [r2, #68]	; 0x44
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_SAI_MspInit+0xc4>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <HAL_SAI_MspInit+0xc0>)
 8003516:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800352a:	230a      	movs	r3, #10
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	4808      	ldr	r0, [pc, #32]	; (8003558 <HAL_SAI_MspInit+0xd0>)
 8003536:	f002 f907 	bl	8005748 <HAL_GPIO_Init>

    }
}
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	; 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40015c04 	.word	0x40015c04
 8003548:	200003e4 	.word	0x200003e4
 800354c:	40023800 	.word	0x40023800
 8003550:	40022000 	.word	0x40022000
 8003554:	40015c24 	.word	0x40015c24
 8003558:	40021800 	.word	0x40021800

0800355c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800356c:	2200      	movs	r2, #0
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	2036      	movs	r0, #54	; 0x36
 8003572:	f001 fabb 	bl	8004aec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003576:	2036      	movs	r0, #54	; 0x36
 8003578:	f001 fad4 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <HAL_InitTick+0xa0>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <HAL_InitTick+0xa0>)
 8003582:	f043 0310 	orr.w	r3, r3, #16
 8003586:	6413      	str	r3, [r2, #64]	; 0x40
 8003588:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_InitTick+0xa0>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003594:	f107 0210 	add.w	r2, r7, #16
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 f90a 	bl	80077b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80035a4:	f004 f8e0 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 80035a8:	4603      	mov	r3, r0
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <HAL_InitTick+0xa4>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	3b01      	subs	r3, #1
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_InitTick+0xa8>)
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <HAL_InitTick+0xac>)
 80035c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_InitTick+0xa8>)
 80035c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_InitTick+0xa8>)
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_InitTick+0xa8>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_InitTick+0xa8>)
 80035d8:	2200      	movs	r2, #0
 80035da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80035dc:	4809      	ldr	r0, [pc, #36]	; (8003604 <HAL_InitTick+0xa8>)
 80035de:	f006 fd83 	bl	800a0e8 <HAL_TIM_Base_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035e8:	4806      	ldr	r0, [pc, #24]	; (8003604 <HAL_InitTick+0xa8>)
 80035ea:	f006 fda9 	bl	800a140 <HAL_TIM_Base_Start_IT>
 80035ee:	4603      	mov	r3, r0
 80035f0:	e000      	b.n	80035f4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3730      	adds	r7, #48	; 0x30
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	431bde83 	.word	0x431bde83
 8003604:	2000c8fc 	.word	0x2000c8fc
 8003608:	40001000 	.word	0x40001000

0800360c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800361e:	e7fe      	b.n	800361e <HardFault_Handler+0x4>

08003620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003624:	e7fe      	b.n	8003624 <MemManage_Handler+0x4>

08003626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362a:	e7fe      	b.n	800362a <BusFault_Handler+0x4>

0800362c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003630:	e7fe      	b.n	8003630 <UsageFault_Handler+0x4>

08003632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003644:	4802      	ldr	r0, [pc, #8]	; (8003650 <CAN1_RX0_IRQHandler+0x10>)
 8003646:	f000 ff4d 	bl	80044e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	2000c7f8 	.word	0x2000c7f8

08003654 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <TIM6_DAC_IRQHandler+0x10>)
 800365a:	f006 fdc6 	bl	800a1ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	2000c8fc 	.word	0x2000c8fc

08003668 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800366c:	4802      	ldr	r0, [pc, #8]	; (8003678 <LTDC_IRQHandler+0x10>)
 800366e:	f003 f843 	bl	80066f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000c4d0 	.word	0x2000c4d0

0800367c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003680:	4802      	ldr	r0, [pc, #8]	; (800368c <DMA2D_IRQHandler+0x10>)
 8003682:	f001 fe22 	bl	80052ca <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000c770 	.word	0x2000c770

08003690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
	return 1;
 8003694:	2301      	movs	r3, #1
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_kill>:

int _kill(int pid, int sig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036aa:	f024 feb7 	bl	802841c <__errno>
 80036ae:	4602      	mov	r2, r0
 80036b0:	2316      	movs	r3, #22
 80036b2:	6013      	str	r3, [r2, #0]
	return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_exit>:

void _exit (int status)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036c8:	f04f 31ff 	mov.w	r1, #4294967295
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffe7 	bl	80036a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036d2:	e7fe      	b.n	80036d2 <_exit+0x12>

080036d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e00a      	b.n	80036fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036e6:	f3af 8000 	nop.w
 80036ea:	4601      	mov	r1, r0
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	60ba      	str	r2, [r7, #8]
 80036f2:	b2ca      	uxtb	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	dbf0      	blt.n	80036e6 <_read+0x12>
	}

return len;
 8003704:	687b      	ldr	r3, [r7, #4]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e009      	b.n	8003734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	60ba      	str	r2, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf1      	blt.n	8003720 <_write+0x12>
	}
	return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_close>:

int _close(int file)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
	return -1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800376e:	605a      	str	r2, [r3, #4]
	return 0;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <_isatty>:

int _isatty(int file)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
	return 1;
 8003786:	2301      	movs	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	return 0;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <_sbrk+0x50>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <_sbrk+0x16>
		heap_end = &end;
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <_sbrk+0x50>)
 80037c2:	4a10      	ldr	r2, [pc, #64]	; (8003804 <_sbrk+0x54>)
 80037c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <_sbrk+0x50>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <_sbrk+0x50>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	466a      	mov	r2, sp
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d907      	bls.n	80037ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037da:	f024 fe1f 	bl	802841c <__errno>
 80037de:	4602      	mov	r2, r0
 80037e0:	230c      	movs	r3, #12
 80037e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	e006      	b.n	80037f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <_sbrk+0x50>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	4a03      	ldr	r2, [pc, #12]	; (8003800 <_sbrk+0x50>)
 80037f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037f6:	68fb      	ldr	r3, [r7, #12]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200003e8 	.word	0x200003e8
 8003804:	2000cdb0 	.word	0x2000cdb0

08003808 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <SystemInit+0x28>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <SystemInit+0x28>)
 8003814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <SystemInit+0x28>)
 800381e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003822:	609a      	str	r2, [r3, #8]
#endif
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800386c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003838:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800383a:	e003      	b.n	8003844 <LoopCopyDataInit>

0800383c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800383e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003840:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003842:	3104      	adds	r1, #4

08003844 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003844:	480b      	ldr	r0, [pc, #44]	; (8003874 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003848:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800384a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800384c:	d3f6      	bcc.n	800383c <CopyDataInit>
  ldr  r2, =_sbss
 800384e:	4a0b      	ldr	r2, [pc, #44]	; (800387c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003850:	e002      	b.n	8003858 <LoopFillZerobss>

08003852 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003852:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003854:	f842 3b04 	str.w	r3, [r2], #4

08003858 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800385a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800385c:	d3f9      	bcc.n	8003852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800385e:	f7ff ffd3 	bl	8003808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003862:	f024 fdf3 	bl	802844c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003866:	f7fd fb07 	bl	8000e78 <main>
  bx  lr    
 800386a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800386c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003870:	0806550c 	.word	0x0806550c
  ldr  r0, =_sdata
 8003874:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003878:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 800387c:	2000013c 	.word	0x2000013c
  ldr  r3, = _ebss
 8003880:	2000cdb0 	.word	0x2000cdb0

08003884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003884:	e7fe      	b.n	8003884 <ADC_IRQHandler>

08003886 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800388a:	2003      	movs	r0, #3
 800388c:	f001 f923 	bl	8004ad6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff fe63 	bl	800355c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003896:	f7fe ff09 	bl	80026ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_IncTick+0x20>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_IncTick+0x24>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_IncTick+0x24>)
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000020 	.word	0x20000020
 80038c4:	2000c93c 	.word	0x2000c93c

080038c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return uwTick;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_GetTick+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	2000c93c 	.word	0x2000c93c

080038e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e8:	f7ff ffee 	bl	80038c8 <HAL_GetTick>
 80038ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d005      	beq.n	8003906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_Delay+0x40>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003906:	bf00      	nop
 8003908:	f7ff ffde 	bl	80038c8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	d8f7      	bhi.n	8003908 <HAL_Delay+0x28>
  {
  }
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000020 	.word	0x20000020

08003924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e031      	b.n	800399e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe feda 	bl	80026fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_ADC_Init+0x84>)
 8003968:	4013      	ands	r3, r2
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f964 	bl	8003c40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
 800398e:	e001      	b.n	8003994 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	ffffeefd 	.word	0xffffeefd

080039ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e12a      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x272>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d93a      	bls.n	8003a4e <HAL_ADC_ConfigChannel+0xa2>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e0:	d035      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	3b1e      	subs	r3, #30
 80039f8:	2207      	movs	r2, #7
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	400a      	ands	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a87      	ldr	r2, [pc, #540]	; (8003c2c <HAL_ADC_ConfigChannel+0x280>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10a      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68d9      	ldr	r1, [r3, #12]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	061a      	lsls	r2, r3, #24
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a26:	e035      	b.n	8003a94 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68d9      	ldr	r1, [r3, #12]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4403      	add	r3, r0
 8003a40:	3b1e      	subs	r3, #30
 8003a42:	409a      	lsls	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a4c:	e022      	b.n	8003a94 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6919      	ldr	r1, [r3, #16]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	2207      	movs	r2, #7
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	400a      	ands	r2, r1
 8003a70:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6919      	ldr	r1, [r3, #16]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4403      	add	r3, r0
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b06      	cmp	r3, #6
 8003a9a:	d824      	bhi.n	8003ae6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b05      	subs	r3, #5
 8003aae:	221f      	movs	r2, #31
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	400a      	ands	r2, r1
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4618      	mov	r0, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b05      	subs	r3, #5
 8003ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ae4:	e04c      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d824      	bhi.n	8003b38 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	3b23      	subs	r3, #35	; 0x23
 8003b00:	221f      	movs	r2, #31
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	3b23      	subs	r3, #35	; 0x23
 8003b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
 8003b36:	e023      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	3b41      	subs	r3, #65	; 0x41
 8003b4a:	221f      	movs	r2, #31
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43da      	mvns	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	400a      	ands	r2, r1
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4618      	mov	r0, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	3b41      	subs	r3, #65	; 0x41
 8003b74:	fa00 f203 	lsl.w	r2, r0, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <HAL_ADC_ConfigChannel+0x284>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10a      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x1f4>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b92:	d105      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003b9a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b9e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <HAL_ADC_ConfigChannel+0x284>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d109      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x212>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b12      	cmp	r3, #18
 8003bb0:	d105      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bbc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_ADC_ConfigChannel+0x284>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d125      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x268>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_ADC_ConfigChannel+0x280>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x22e>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b11      	cmp	r3, #17
 8003bd8:	d11c      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <HAL_ADC_ConfigChannel+0x288>)
 8003be0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003be4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_ADC_ConfigChannel+0x280>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_ADC_ConfigChannel+0x28c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <HAL_ADC_ConfigChannel+0x290>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9a      	lsrs	r2, r3, #18
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c06:	e002      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f9      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	10000012 	.word	0x10000012
 8003c30:	40012000 	.word	0x40012000
 8003c34:	40012300 	.word	0x40012300
 8003c38:	20000018 	.word	0x20000018
 8003c3c:	431bde83 	.word	0x431bde83

08003c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c48:	4b78      	ldr	r3, [pc, #480]	; (8003e2c <ADC_Init+0x1ec>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <ADC_Init+0x1ec>)
 8003c4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <ADC_Init+0x1ec>)
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4973      	ldr	r1, [pc, #460]	; (8003e2c <ADC_Init+0x1ec>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6899      	ldr	r1, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <ADC_Init+0x1f0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6899      	ldr	r1, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	e00f      	b.n	8003d3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0202 	bic.w	r2, r2, #2
 8003d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	005a      	lsls	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	3b01      	subs	r3, #1
 8003d94:	035a      	lsls	r2, r3, #13
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	e007      	b.n	8003db0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	051a      	lsls	r2, r3, #20
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003df2:	025a      	lsls	r2, r3, #9
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6899      	ldr	r1, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	029a      	lsls	r2, r3, #10
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40012300 	.word	0x40012300
 8003e30:	0f000001 	.word	0x0f000001

08003e34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0ed      	b.n	8004022 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fe fcac 	bl	80027b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0202 	bic.w	r2, r2, #2
 8003e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e68:	f7ff fd2e 	bl	80038c8 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e6e:	e012      	b.n	8003e96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e70:	f7ff fd2a 	bl	80038c8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b0a      	cmp	r3, #10
 8003e7c:	d90b      	bls.n	8003e96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0c5      	b.n	8004022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb4:	f7ff fd08 	bl	80038c8 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003eba:	e012      	b.n	8003ee2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ebc:	f7ff fd04 	bl	80038c8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b0a      	cmp	r3, #10
 8003ec8:	d90b      	bls.n	8003ee2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2205      	movs	r2, #5
 8003eda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e09f      	b.n	8004022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0e5      	beq.n	8003ebc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7e1b      	ldrb	r3, [r3, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d108      	bne.n	8003f0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e007      	b.n	8003f1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	7e5b      	ldrb	r3, [r3, #25]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d108      	bne.n	8003f34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e007      	b.n	8003f44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7e9b      	ldrb	r3, [r3, #26]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d108      	bne.n	8003f5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0220 	orr.w	r2, r2, #32
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e007      	b.n	8003f6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0220 	bic.w	r2, r2, #32
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	7edb      	ldrb	r3, [r3, #27]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d108      	bne.n	8003f88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0210 	bic.w	r2, r2, #16
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e007      	b.n	8003f98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0210 	orr.w	r2, r2, #16
 8003f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7f1b      	ldrb	r3, [r3, #28]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d108      	bne.n	8003fb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0208 	orr.w	r2, r2, #8
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e007      	b.n	8003fc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0208 	bic.w	r2, r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7f5b      	ldrb	r3, [r3, #29]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d108      	bne.n	8003fdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0204 	orr.w	r2, r2, #4
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e007      	b.n	8003fec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0204 	bic.w	r2, r2, #4
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	ea42 0103 	orr.w	r1, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	1e5a      	subs	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004042:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d003      	beq.n	8004052 <HAL_CAN_ConfigFilter+0x26>
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b02      	cmp	r3, #2
 800404e:	f040 80be 	bne.w	80041ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004052:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004054:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800406c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	431a      	orrs	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2201      	movs	r2, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	43db      	mvns	r3, r3
 80040a4:	401a      	ands	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d123      	bne.n	80040fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3248      	adds	r2, #72	; 0x48
 80040dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	3348      	adds	r3, #72	; 0x48
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d122      	bne.n	800414a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	431a      	orrs	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004124:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	3248      	adds	r2, #72	; 0x48
 800412a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800413e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004140:	6979      	ldr	r1, [r7, #20]
 8004142:	3348      	adds	r3, #72	; 0x48
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	43db      	mvns	r3, r3
 800415c:	401a      	ands	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004164:	e007      	b.n	8004176 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	431a      	orrs	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43db      	mvns	r3, r3
 8004188:	401a      	ands	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004190:	e007      	b.n	80041a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	431a      	orrs	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041c0:	f023 0201 	bic.w	r2, r3, #1
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e006      	b.n	80041dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40006400 	.word	0x40006400

080041ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d12e      	bne.n	800425e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004218:	f7ff fb56 	bl	80038c8 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800421e:	e012      	b.n	8004246 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004220:	f7ff fb52 	bl	80038c8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b0a      	cmp	r3, #10
 800422c:	d90b      	bls.n	8004246 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2205      	movs	r2, #5
 800423e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e012      	b.n	800426c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e006      	b.n	800426c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004288:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d003      	beq.n	8004298 <HAL_CAN_GetRxMessage+0x24>
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b02      	cmp	r3, #2
 8004294:	f040 80f3 	bne.w	800447e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10e      	bne.n	80042bc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d116      	bne.n	80042da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0e7      	b.n	800448c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0d8      	b.n	800448c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	331b      	adds	r3, #27
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0204 	and.w	r2, r3, #4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10c      	bne.n	8004312 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	331b      	adds	r3, #27
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	0d5b      	lsrs	r3, r3, #21
 8004308:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e00b      	b.n	800432a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	331b      	adds	r3, #27
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	4413      	add	r3, r2
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	331b      	adds	r3, #27
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4413      	add	r3, r2
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0202 	and.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	331b      	adds	r3, #27
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 020f 	and.w	r2, r3, #15
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	331b      	adds	r3, #27
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	b2da      	uxtb	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	331b      	adds	r3, #27
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	4413      	add	r3, r2
 800437c:	3304      	adds	r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	4413      	add	r3, r2
 8004392:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0a1a      	lsrs	r2, r3, #8
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0c1a      	lsrs	r2, r3, #16
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3302      	adds	r3, #2
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	4413      	add	r3, r2
 80043dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0e1a      	lsrs	r2, r3, #24
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	3303      	adds	r3, #3
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	3304      	adds	r3, #4
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	4413      	add	r3, r2
 800440e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0a1a      	lsrs	r2, r3, #8
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	3305      	adds	r3, #5
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4413      	add	r3, r2
 8004428:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0c1a      	lsrs	r2, r3, #16
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	3306      	adds	r3, #6
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4413      	add	r3, r2
 8004442:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0e1a      	lsrs	r2, r3, #24
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	3307      	adds	r3, #7
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d108      	bne.n	800446a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0220 	orr.w	r2, r2, #32
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	e007      	b.n	800447a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0220 	orr.w	r2, r2, #32
 8004478:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e006      	b.n	800448c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
  }
}
 800448c:	4618      	mov	r0, r3
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d002      	beq.n	80044b6 <HAL_CAN_ActivateNotification+0x1e>
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d109      	bne.n	80044ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6959      	ldr	r1, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e006      	b.n	80044d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d07c      	beq.n	8004624 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d023      	beq.n	800457c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f97d 	bl	8004846 <HAL_CAN_TxMailbox0CompleteCallback>
 800454c:	e016      	b.n	800457c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
 8004560:	e00c      	b.n	800457c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	e002      	b.n	800457c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f983 	bl	8004882 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d024      	beq.n	80045d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800458e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f95d 	bl	800485a <HAL_CAN_TxMailbox1CompleteCallback>
 80045a0:	e016      	b.n	80045d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	e00c      	b.n	80045d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	e002      	b.n	80045d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f963 	bl	8004896 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d024      	beq.n	8004624 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f93d 	bl	800486e <HAL_CAN_TxMailbox2CompleteCallback>
 80045f4:	e016      	b.n	8004624 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	e00c      	b.n	8004624 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e002      	b.n	8004624 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f943 	bl	80048aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800463e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2210      	movs	r2, #16
 8004646:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f92a 	bl	80048be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fdd4 	bl	8001230 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2210      	movs	r2, #16
 80046aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2208      	movs	r2, #8
 80046c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f90c 	bl	80048e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8f3 	bl	80048d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2210      	movs	r2, #16
 8004706:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8f6 	bl	80048fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d006      	beq.n	8004730 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2208      	movs	r2, #8
 8004728:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8ef 	bl	800490e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d06c      	beq.n	800481e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	f043 0304 	orr.w	r3, r3, #4
 8004796:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d03d      	beq.n	800481e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d038      	beq.n	800481e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b2:	2b30      	cmp	r3, #48	; 0x30
 80047b4:	d017      	beq.n	80047e6 <HAL_CAN_IRQHandler+0x302>
 80047b6:	2b30      	cmp	r3, #48	; 0x30
 80047b8:	d804      	bhi.n	80047c4 <HAL_CAN_IRQHandler+0x2e0>
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d009      	beq.n	80047d2 <HAL_CAN_IRQHandler+0x2ee>
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d00c      	beq.n	80047dc <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047c2:	e024      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80047c4:	2b50      	cmp	r3, #80	; 0x50
 80047c6:	d018      	beq.n	80047fa <HAL_CAN_IRQHandler+0x316>
 80047c8:	2b60      	cmp	r3, #96	; 0x60
 80047ca:	d01b      	beq.n	8004804 <HAL_CAN_IRQHandler+0x320>
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d00f      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x30c>
            break;
 80047d0:	e01d      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	f043 0308 	orr.w	r3, r3, #8
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047da:	e018      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f043 0310 	orr.w	r3, r3, #16
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047e4:	e013      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f043 0320 	orr.w	r3, r3, #32
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ee:	e00e      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047f8:	e009      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004802:	e004      	b.n	800480e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800480c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800481c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2204      	movs	r2, #4
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f872 	bl	8004922 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800483e:	bf00      	nop
 8004840:	3728      	adds	r7, #40	; 0x28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <__NVIC_SetPriorityGrouping+0x44>)
 8004962:	4313      	orrs	r3, r2
 8004964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004966:	4a04      	ldr	r2, [pc, #16]	; (8004978 <__NVIC_SetPriorityGrouping+0x40>)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	60d3      	str	r3, [r2, #12]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000ed00 	.word	0xe000ed00
 800497c:	05fa0000 	.word	0x05fa0000

08004980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <__NVIC_GetPriorityGrouping+0x18>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	f003 0307 	and.w	r3, r3, #7
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db0b      	blt.n	80049c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	f003 021f 	and.w	r2, r3, #31
 80049b4:	4907      	ldr	r1, [pc, #28]	; (80049d4 <__NVIC_EnableIRQ+0x38>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2001      	movs	r0, #1
 80049be:	fa00 f202 	lsl.w	r2, r0, r2
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000e100 	.word	0xe000e100

080049d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db10      	blt.n	8004a0c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4909      	ldr	r1, [pc, #36]	; (8004a18 <__NVIC_DisableIRQ+0x40>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2001      	movs	r0, #1
 80049fa:	fa00 f202 	lsl.w	r2, r0, r2
 80049fe:	3320      	adds	r3, #32
 8004a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db0a      	blt.n	8004a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	490c      	ldr	r1, [pc, #48]	; (8004a68 <__NVIC_SetPriority+0x4c>)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a44:	e00a      	b.n	8004a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4908      	ldr	r1, [pc, #32]	; (8004a6c <__NVIC_SetPriority+0x50>)
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	3b04      	subs	r3, #4
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	440b      	add	r3, r1
 8004a5a:	761a      	strb	r2, [r3, #24]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000e100 	.word	0xe000e100
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f1c3 0307 	rsb	r3, r3, #7
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	bf28      	it	cs
 8004a8e:	2304      	movcs	r3, #4
 8004a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d902      	bls.n	8004aa0 <NVIC_EncodePriority+0x30>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3b03      	subs	r3, #3
 8004a9e:	e000      	b.n	8004aa2 <NVIC_EncodePriority+0x32>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac2:	43d9      	mvns	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	4313      	orrs	r3, r2
         );
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3724      	adds	r7, #36	; 0x24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ff2a 	bl	8004938 <__NVIC_SetPriorityGrouping>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004afe:	f7ff ff3f 	bl	8004980 <__NVIC_GetPriorityGrouping>
 8004b02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f7ff ffb1 	bl	8004a70 <NVIC_EncodePriority>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff ff80 	bl	8004a1c <__NVIC_SetPriority>
}
 8004b1c:	bf00      	nop
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff32 	bl	800499c <__NVIC_EnableIRQ>
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff42 	bl	80049d8 <__NVIC_DisableIRQ>
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e054      	b.n	8004c18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7f5b      	ldrb	r3, [r3, #29]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd fe62 	bl	8002848 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <HAL_CRC_Init+0xc4>)
 8004b98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0218 	bic.w	r2, r2, #24
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	e00c      	b.n	8004bc6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f834 	bl	8004c24 <HAL_CRCEx_Polynomial_Set>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e028      	b.n	8004c18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	795b      	ldrb	r3, [r3, #5]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	611a      	str	r2, [r3, #16]
 8004bd8:	e004      	b.n	8004be4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6912      	ldr	r2, [r2, #16]
 8004be2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	04c11db7 	.word	0x04c11db7

08004c24 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c34:	231f      	movs	r3, #31
 8004c36:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c38:	bf00      	nop
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1e5a      	subs	r2, r3, #1
 8004c3e:	613a      	str	r2, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <HAL_CRCEx_Polynomial_Set+0x34>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b18      	cmp	r3, #24
 8004c5c:	d846      	bhi.n	8004cec <HAL_CRCEx_Polynomial_Set+0xc8>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004cf3 	.word	0x08004cf3
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004ced 	.word	0x08004ced
 8004c70:	08004ced 	.word	0x08004ced
 8004c74:	08004ced 	.word	0x08004ced
 8004c78:	08004ced 	.word	0x08004ced
 8004c7c:	08004ced 	.word	0x08004ced
 8004c80:	08004ced 	.word	0x08004ced
 8004c84:	08004ce1 	.word	0x08004ce1
 8004c88:	08004ced 	.word	0x08004ced
 8004c8c:	08004ced 	.word	0x08004ced
 8004c90:	08004ced 	.word	0x08004ced
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004cd5 	.word	0x08004cd5
 8004ca8:	08004ced 	.word	0x08004ced
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004ced 	.word	0x08004ced
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004cc9 	.word	0x08004cc9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d913      	bls.n	8004cf6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cd2:	e010      	b.n	8004cf6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b07      	cmp	r3, #7
 8004cd8:	d90f      	bls.n	8004cfa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cde:	e00c      	b.n	8004cfa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d90b      	bls.n	8004cfe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cea:	e008      	b.n	8004cfe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf0:	e006      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cfe:	bf00      	nop
  }
  if (status == HAL_OK)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 0118 	bic.w	r1, r3, #24
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e069      	b.n	8004e16 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd fd9a 	bl	8002888 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <HAL_DCMI_Init+0xf0>)
 8004d76:	400b      	ands	r3, r1
 8004d78:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004da6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004db2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004dbe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d112      	bne.n	8004df6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7f1b      	ldrb	r3, [r3, #28]
 8004dd4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7f5b      	ldrb	r3, [r3, #29]
 8004dda:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ddc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7f9b      	ldrb	r3, [r3, #30]
 8004de2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004de4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7fdb      	ldrb	r3, [r3, #31]
 8004dec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004df2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004df4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 021e 	orr.w	r2, r2, #30
 8004e04:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	ffe0f007 	.word	0xffe0f007

08004e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_DMA_Start_IT+0x26>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e048      	b.n	8004edc <HAL_DMA_Start_IT+0xb8>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d137      	bne.n	8004ece <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f842 	bl	8004efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	223f      	movs	r2, #63	; 0x3f
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0216 	orr.w	r2, r2, #22
 8004e92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ea2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0208 	orr.w	r2, r2, #8
 8004eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e005      	b.n	8004eda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d108      	bne.n	8004f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f3a:	e007      	b.n	8004f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e039      	b.n	8004fde <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd fd40 	bl	8002a04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	f023 0107 	bic.w	r1, r3, #7
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <HAL_DMA2D_Init+0x90>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68d1      	ldr	r1, [r2, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	ffffc000 	.word	0xffffc000

08004fec <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e05f      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004ffe:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_DMA2D_DeInit+0xdc>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d02e      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8c1 	bl	80051a0 <HAL_DMA2D_Abort>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d021      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e04a      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d108      	bne.n	8005048 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8005036:	2100      	movs	r1, #0
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8f7 	bl	800522c <HAL_DMA2D_CLUTLoading_Abort>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d011      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e03a      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d108      	bne.n	8005068 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8005056:	2101      	movs	r1, #1
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8e7 	bl	800522c <HAL_DMA2D_CLUTLoading_Abort>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e02a      	b.n	80050be <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	223f      	movs	r2, #63	; 0x3f
 8005076:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fd fcd5 	bl	8002a50 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_DMA2D_Start_IT+0x1c>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e020      	b.n	800512a <HAL_DMA2D_Start_IT+0x5e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fa84 	bl	8005610 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005116:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_DMA2D_BlendingStart_IT+0x1c>
 800514a:	2302      	movs	r3, #2
 800514c:	e024      	b.n	8005198 <HAL_DMA2D_BlendingStart_IT+0x66>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fa4d 	bl	8005610 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005184:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 0205 	bic.w	r2, r3, #5
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0204 	orr.w	r2, r2, #4
 80051ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051bc:	f7fe fb84 	bl	80038c8 <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051c2:	e017      	b.n	80051f4 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80051c4:	f7fe fb80 	bl	80038c8 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051d2:	d90f      	bls.n	80051f4 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2203      	movs	r2, #3
 80051e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e017      	b.n	8005224 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e0      	bne.n	80051c4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005210:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3324      	adds	r3, #36	; 0x24
 800523c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0204 	orr.w	r2, r2, #4
 800524c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d103      	bne.n	800525c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	331c      	adds	r3, #28
 800525a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800525c:	f7fe fb34 	bl	80038c8 <HAL_GetTick>
 8005260:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005262:	e017      	b.n	8005294 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005264:	f7fe fb30 	bl	80038c8 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005272:	d90f      	bls.n	8005294 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2203      	movs	r2, #3
 8005284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e016      	b.n	80052c2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e1      	bne.n	8005264 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80052ae:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d026      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005304:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	f043 0201 	orr.w	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2201      	movs	r2, #1
 8005318:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d026      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d021      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2220      	movs	r2, #32
 8005364:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	f043 0202 	orr.w	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2204      	movs	r2, #4
 8005376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d026      	beq.n	80053ea <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d021      	beq.n	80053ea <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2208      	movs	r2, #8
 80053bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	f043 0204 	orr.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d013      	beq.n	800541c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00e      	beq.n	800541c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2204      	movs	r2, #4
 8005414:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f853 	bl	80054c2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d024      	beq.n	8005470 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01f      	beq.n	8005470 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800543e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2202      	movs	r2, #2
 8005446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01f      	beq.n	80054ba <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01a      	beq.n	80054ba <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005492:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2210      	movs	r2, #16
 800549a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f80e 	bl	80054d6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_DMA2D_ConfigLayer+0x20>
 8005508:	2302      	movs	r3, #2
 800550a:	e079      	b.n	8005600 <HAL_DMA2D_ConfigLayer+0x114>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	3318      	adds	r3, #24
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005536:	4b35      	ldr	r3, [pc, #212]	; (800560c <HAL_DMA2D_ConfigLayer+0x120>)
 8005538:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b0a      	cmp	r3, #10
 8005540:	d003      	beq.n	800554a <HAL_DMA2D_ConfigLayer+0x5e>
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b09      	cmp	r3, #9
 8005548:	d107      	bne.n	800555a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e005      	b.n	8005566 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	061b      	lsls	r3, r3, #24
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d120      	bne.n	80055ae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	43db      	mvns	r3, r3
 8005576:	ea02 0103 	and.w	r1, r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	430a      	orrs	r2, r1
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b0a      	cmp	r3, #10
 8005594:	d003      	beq.n	800559e <HAL_DMA2D_ConfigLayer+0xb2>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b09      	cmp	r3, #9
 800559c:	d127      	bne.n	80055ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28
 80055ac:	e01f      	b.n	80055ee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	43db      	mvns	r3, r3
 80055b8:	ea02 0103 	and.w	r1, r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b0a      	cmp	r3, #10
 80055d6:	d003      	beq.n	80055e0 <HAL_DMA2D_ConfigLayer+0xf4>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b09      	cmp	r3, #9
 80055de:	d106      	bne.n	80055ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055ec:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	ff03000f 	.word	0xff03000f

08005610 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005610:	b480      	push	{r7}
 8005612:	b08b      	sub	sp, #44	; 0x2c
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	041a      	lsls	r2, r3, #16
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	431a      	orrs	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005648:	d174      	bne.n	8005734 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005650:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005658:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005660:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	431a      	orrs	r2, r3
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	4313      	orrs	r3, r2
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	e053      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d106      	bne.n	8005698 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4313      	orrs	r3, r2
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
 8005696:	e048      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d111      	bne.n	80056c4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	0cdb      	lsrs	r3, r3, #19
 80056a4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	0a9b      	lsrs	r3, r3, #10
 80056aa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	02db      	lsls	r3, r3, #11
 80056ba:	4313      	orrs	r3, r2
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	e032      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d117      	bne.n	80056fc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	0fdb      	lsrs	r3, r3, #31
 80056d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	0cdb      	lsrs	r3, r3, #19
 80056d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	0adb      	lsrs	r3, r3, #11
 80056dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	08db      	lsrs	r3, r3, #3
 80056e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	029b      	lsls	r3, r3, #10
 80056ec:	431a      	orrs	r2, r3
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	03db      	lsls	r3, r3, #15
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	e016      	b.n	800572a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	0f1b      	lsrs	r3, r3, #28
 8005700:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	0d1b      	lsrs	r3, r3, #20
 8005706:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	0b1b      	lsrs	r3, r3, #12
 800570c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	431a      	orrs	r2, r3
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	031b      	lsls	r3, r3, #12
 8005722:	4313      	orrs	r3, r2
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005732:	e003      	b.n	800573c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	60da      	str	r2, [r3, #12]
}
 800573c:	bf00      	nop
 800573e:	372c      	adds	r7, #44	; 0x2c
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e175      	b.n	8005a54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005768:	2201      	movs	r2, #1
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	429a      	cmp	r2, r3
 8005782:	f040 8164 	bne.w	8005a4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d00b      	beq.n	80057a6 <HAL_GPIO_Init+0x5e>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d007      	beq.n	80057a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800579a:	2b11      	cmp	r3, #17
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b12      	cmp	r3, #18
 80057a4:	d130      	bne.n	8005808 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	2203      	movs	r2, #3
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057dc:	2201      	movs	r2, #1
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4013      	ands	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 0201 	and.w	r2, r3, #1
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d003      	beq.n	8005848 <HAL_GPIO_Init+0x100>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b12      	cmp	r3, #18
 8005846:	d123      	bne.n	8005890 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	08da      	lsrs	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3208      	adds	r2, #8
 8005850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	220f      	movs	r2, #15
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4313      	orrs	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	08da      	lsrs	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3208      	adds	r2, #8
 800588a:	69b9      	ldr	r1, [r7, #24]
 800588c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	2203      	movs	r2, #3
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 0203 	and.w	r2, r3, #3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80be 	beq.w	8005a4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058d2:	4b65      	ldr	r3, [pc, #404]	; (8005a68 <HAL_GPIO_Init+0x320>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	4a64      	ldr	r2, [pc, #400]	; (8005a68 <HAL_GPIO_Init+0x320>)
 80058d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058dc:	6453      	str	r3, [r2, #68]	; 0x44
 80058de:	4b62      	ldr	r3, [pc, #392]	; (8005a68 <HAL_GPIO_Init+0x320>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80058ea:	4a60      	ldr	r2, [pc, #384]	; (8005a6c <HAL_GPIO_Init+0x324>)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	3302      	adds	r3, #2
 80058f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	220f      	movs	r2, #15
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a57      	ldr	r2, [pc, #348]	; (8005a70 <HAL_GPIO_Init+0x328>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d037      	beq.n	8005986 <HAL_GPIO_Init+0x23e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a56      	ldr	r2, [pc, #344]	; (8005a74 <HAL_GPIO_Init+0x32c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d031      	beq.n	8005982 <HAL_GPIO_Init+0x23a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a55      	ldr	r2, [pc, #340]	; (8005a78 <HAL_GPIO_Init+0x330>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d02b      	beq.n	800597e <HAL_GPIO_Init+0x236>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a54      	ldr	r2, [pc, #336]	; (8005a7c <HAL_GPIO_Init+0x334>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d025      	beq.n	800597a <HAL_GPIO_Init+0x232>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a53      	ldr	r2, [pc, #332]	; (8005a80 <HAL_GPIO_Init+0x338>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01f      	beq.n	8005976 <HAL_GPIO_Init+0x22e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a52      	ldr	r2, [pc, #328]	; (8005a84 <HAL_GPIO_Init+0x33c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d019      	beq.n	8005972 <HAL_GPIO_Init+0x22a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a51      	ldr	r2, [pc, #324]	; (8005a88 <HAL_GPIO_Init+0x340>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_GPIO_Init+0x226>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a50      	ldr	r2, [pc, #320]	; (8005a8c <HAL_GPIO_Init+0x344>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00d      	beq.n	800596a <HAL_GPIO_Init+0x222>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a4f      	ldr	r2, [pc, #316]	; (8005a90 <HAL_GPIO_Init+0x348>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <HAL_GPIO_Init+0x21e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a4e      	ldr	r2, [pc, #312]	; (8005a94 <HAL_GPIO_Init+0x34c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_GPIO_Init+0x21a>
 800595e:	2309      	movs	r3, #9
 8005960:	e012      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005962:	230a      	movs	r3, #10
 8005964:	e010      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005966:	2308      	movs	r3, #8
 8005968:	e00e      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800596a:	2307      	movs	r3, #7
 800596c:	e00c      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800596e:	2306      	movs	r3, #6
 8005970:	e00a      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005972:	2305      	movs	r3, #5
 8005974:	e008      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005976:	2304      	movs	r3, #4
 8005978:	e006      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800597a:	2303      	movs	r3, #3
 800597c:	e004      	b.n	8005988 <HAL_GPIO_Init+0x240>
 800597e:	2302      	movs	r3, #2
 8005980:	e002      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_GPIO_Init+0x240>
 8005986:	2300      	movs	r3, #0
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	f002 0203 	and.w	r2, r2, #3
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	4093      	lsls	r3, r2
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4313      	orrs	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005998:	4934      	ldr	r1, [pc, #208]	; (8005a6c <HAL_GPIO_Init+0x324>)
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	089b      	lsrs	r3, r3, #2
 800599e:	3302      	adds	r3, #2
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059a6:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059ca:	4a33      	ldr	r2, [pc, #204]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059d0:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059fa:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <HAL_GPIO_Init+0x350>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <HAL_GPIO_Init+0x350>)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_GPIO_Init+0x350>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a48:	4a13      	ldr	r2, [pc, #76]	; (8005a98 <HAL_GPIO_Init+0x350>)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	f67f ae86 	bls.w	8005768 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3724      	adds	r7, #36	; 0x24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	40013800 	.word	0x40013800
 8005a70:	40020000 	.word	0x40020000
 8005a74:	40020400 	.word	0x40020400
 8005a78:	40020800 	.word	0x40020800
 8005a7c:	40020c00 	.word	0x40020c00
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40021400 	.word	0x40021400
 8005a88:	40021800 	.word	0x40021800
 8005a8c:	40021c00 	.word	0x40021c00
 8005a90:	40022000 	.word	0x40022000
 8005a94:	40022400 	.word	0x40022400
 8005a98:	40013c00 	.word	0x40013c00

08005a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	887b      	ldrh	r3, [r7, #2]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
 8005ab8:	e001      	b.n	8005abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	807b      	strh	r3, [r7, #2]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005adc:	787b      	ldrb	r3, [r7, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ae8:	e003      	b.n	8005af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005aea:	887b      	ldrh	r3, [r7, #2]
 8005aec:	041a      	lsls	r2, r3, #16
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	619a      	str	r2, [r3, #24]
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e07f      	b.n	8005c12 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8a9 	bl	8005c7e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	; 0x24
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d107      	bne.n	8005b7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b76:	609a      	str	r2, [r3, #8]
 8005b78:	e006      	b.n	8005b88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d104      	bne.n	8005b9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <HAL_I2C_Init+0x11c>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	ea42 0103 	orr.w	r1, r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69d9      	ldr	r1, [r3, #28]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1a      	ldr	r2, [r3, #32]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	02008000 	.word	0x02008000

08005c20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e021      	b.n	8005c76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2224      	movs	r2, #36	; 0x24
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f821 	bl	8005c92 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	817b      	strh	r3, [r7, #10]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	813b      	strh	r3, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	f040 80f9 	bne.w	8005ec2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x34>
 8005cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0ed      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_I2C_Mem_Write+0x4e>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e0e6      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cfe:	f7fd fde3 	bl	80038c8 <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	2319      	movs	r3, #25
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fad1 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0d1      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2221      	movs	r2, #33	; 0x21
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d48:	88f8      	ldrh	r0, [r7, #6]
 8005d4a:	893a      	ldrh	r2, [r7, #8]
 8005d4c:	8979      	ldrh	r1, [r7, #10]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4603      	mov	r3, r0
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f9e1 	bl	8006120 <I2C_RequestMemoryWrite>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0a9      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2bff      	cmp	r3, #255	; 0xff
 8005d78:	d90e      	bls.n	8005d98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	8979      	ldrh	r1, [r7, #10]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 fbb3 	bl	80064fc <I2C_TransferConfig>
 8005d96:	e00f      	b.n	8005db8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	8979      	ldrh	r1, [r7, #10]
 8005daa:	2300      	movs	r3, #0
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fba2 	bl	80064fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fabb 	bl	8006338 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e07b      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d034      	beq.n	8005e70 <HAL_I2C_Mem_Write+0x1c8>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d130      	bne.n	8005e70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	2200      	movs	r2, #0
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fa4d 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e04d      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2bff      	cmp	r3, #255	; 0xff
 8005e30:	d90e      	bls.n	8005e50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	8979      	ldrh	r1, [r7, #10]
 8005e40:	2300      	movs	r3, #0
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fb57 	bl	80064fc <I2C_TransferConfig>
 8005e4e:	e00f      	b.n	8005e70 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	8979      	ldrh	r1, [r7, #10]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fb46 	bl	80064fc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d19e      	bne.n	8005db8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fa9a 	bl	80063b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e01a      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2220      	movs	r2, #32
 8005e94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6859      	ldr	r1, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <HAL_I2C_Mem_Write+0x224>)
 8005ea2:	400b      	ands	r3, r1
 8005ea4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	fe00e800 	.word	0xfe00e800

08005ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	817b      	strh	r3, [r7, #10]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	813b      	strh	r3, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	f040 80fd 	bne.w	80060f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_I2C_Mem_Read+0x34>
 8005efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0f1      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_I2C_Mem_Read+0x4e>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0ea      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f26:	f7fd fccf 	bl	80038c8 <HAL_GetTick>
 8005f2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	2319      	movs	r3, #25
 8005f32:	2201      	movs	r2, #1
 8005f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f9bd 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0d5      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2222      	movs	r2, #34	; 0x22
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2240      	movs	r2, #64	; 0x40
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f70:	88f8      	ldrh	r0, [r7, #6]
 8005f72:	893a      	ldrh	r2, [r7, #8]
 8005f74:	8979      	ldrh	r1, [r7, #10]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f921 	bl	80061c8 <I2C_RequestMemoryRead>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0ad      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2bff      	cmp	r3, #255	; 0xff
 8005fa0:	d90e      	bls.n	8005fc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	8979      	ldrh	r1, [r7, #10]
 8005fb0:	4b52      	ldr	r3, [pc, #328]	; (80060fc <HAL_I2C_Mem_Read+0x22c>)
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fa9f 	bl	80064fc <I2C_TransferConfig>
 8005fbe:	e00f      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	8979      	ldrh	r1, [r7, #10]
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <HAL_I2C_Mem_Read+0x22c>)
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fa8e 	bl	80064fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2104      	movs	r1, #4
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f964 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e07c      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d034      	beq.n	80060a0 <HAL_I2C_Mem_Read+0x1d0>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d130      	bne.n	80060a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	2200      	movs	r2, #0
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f935 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e04d      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2bff      	cmp	r3, #255	; 0xff
 8006060:	d90e      	bls.n	8006080 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606c:	b2da      	uxtb	r2, r3
 800606e:	8979      	ldrh	r1, [r7, #10]
 8006070:	2300      	movs	r3, #0
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fa3f 	bl	80064fc <I2C_TransferConfig>
 800607e:	e00f      	b.n	80060a0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	b2da      	uxtb	r2, r3
 8006090:	8979      	ldrh	r1, [r7, #10]
 8006092:	2300      	movs	r3, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fa2e 	bl	80064fc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d19a      	bne.n	8005fe0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f982 	bl	80063b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e01a      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2220      	movs	r2, #32
 80060c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_I2C_Mem_Read+0x230>)
 80060d2:	400b      	ands	r3, r1
 80060d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	80002400 	.word	0x80002400
 8006100:	fe00e800 	.word	0xfe00e800

08006104 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006112:	b2db      	uxtb	r3, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	4608      	mov	r0, r1
 800612a:	4611      	mov	r1, r2
 800612c:	461a      	mov	r2, r3
 800612e:	4603      	mov	r3, r0
 8006130:	817b      	strh	r3, [r7, #10]
 8006132:	460b      	mov	r3, r1
 8006134:	813b      	strh	r3, [r7, #8]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	8979      	ldrh	r1, [r7, #10]
 8006140:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <I2C_RequestMemoryWrite+0xa4>)
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f9d7 	bl	80064fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	69b9      	ldr	r1, [r7, #24]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f8f0 	bl	8006338 <I2C_WaitOnTXISFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e02c      	b.n	80061bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006168:	893b      	ldrh	r3, [r7, #8]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	629a      	str	r2, [r3, #40]	; 0x28
 8006172:	e015      	b.n	80061a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006174:	893b      	ldrh	r3, [r7, #8]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	b29b      	uxth	r3, r3
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f8d6 	bl	8006338 <I2C_WaitOnTXISFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e012      	b.n	80061bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006196:	893b      	ldrh	r3, [r7, #8]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f884 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	80002000 	.word	0x80002000

080061c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	817b      	strh	r3, [r7, #10]
 80061da:	460b      	mov	r3, r1
 80061dc:	813b      	strh	r3, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	8979      	ldrh	r1, [r7, #10]
 80061e8:	4b20      	ldr	r3, [pc, #128]	; (800626c <I2C_RequestMemoryRead+0xa4>)
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	2300      	movs	r3, #0
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f984 	bl	80064fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	69b9      	ldr	r1, [r7, #24]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f89d 	bl	8006338 <I2C_WaitOnTXISFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e02c      	b.n	8006262 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d105      	bne.n	800621a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800620e:	893b      	ldrh	r3, [r7, #8]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	629a      	str	r2, [r3, #40]	; 0x28
 8006218:	e015      	b.n	8006246 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	0a1b      	lsrs	r3, r3, #8
 800621e:	b29b      	uxth	r3, r3
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	69b9      	ldr	r1, [r7, #24]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f883 	bl	8006338 <I2C_WaitOnTXISFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e012      	b.n	8006262 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800623c:	893b      	ldrh	r3, [r7, #8]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2200      	movs	r2, #0
 800624e:	2140      	movs	r1, #64	; 0x40
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f831 	bl	80062b8 <I2C_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	80002000 	.word	0x80002000

08006270 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d103      	bne.n	800628e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d007      	beq.n	80062ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	619a      	str	r2, [r3, #24]
  }
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c8:	e022      	b.n	8006310 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d01e      	beq.n	8006310 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fd faf9 	bl	80038c8 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d113      	bne.n	8006310 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ec:	f043 0220 	orr.w	r2, r3, #32
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e00f      	b.n	8006330 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	429a      	cmp	r2, r3
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	429a      	cmp	r2, r3
 800632c:	d0cd      	beq.n	80062ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006344:	e02c      	b.n	80063a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f870 	bl	8006430 <I2C_IsAcknowledgeFailed>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e02a      	b.n	80063b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d01e      	beq.n	80063a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006362:	f7fd fab1 	bl	80038c8 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	d302      	bcc.n	8006378 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d113      	bne.n	80063a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e007      	b.n	80063b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d1cb      	bne.n	8006346 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063c4:	e028      	b.n	8006418 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f830 	bl	8006430 <I2C_IsAcknowledgeFailed>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e026      	b.n	8006428 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fd fa75 	bl	80038c8 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d113      	bne.n	8006418 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e007      	b.n	8006428 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b20      	cmp	r3, #32
 8006424:	d1cf      	bne.n	80063c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b10      	cmp	r3, #16
 8006448:	d151      	bne.n	80064ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800644a:	e022      	b.n	8006492 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d01e      	beq.n	8006492 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006454:	f7fd fa38 	bl	80038c8 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <I2C_IsAcknowledgeFailed+0x3a>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d113      	bne.n	8006492 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646e:	f043 0220 	orr.w	r2, r3, #32
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e02e      	b.n	80064f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b20      	cmp	r3, #32
 800649e:	d1d5      	bne.n	800644c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2210      	movs	r2, #16
 80064a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2220      	movs	r2, #32
 80064ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff fedd 	bl	8006270 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6859      	ldr	r1, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80064c2:	400b      	ands	r3, r1
 80064c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ca:	f043 0204 	orr.w	r2, r3, #4
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	fe00e800 	.word	0xfe00e800

080064fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	817b      	strh	r3, [r7, #10]
 800650a:	4613      	mov	r3, r2
 800650c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	0d5b      	lsrs	r3, r3, #21
 8006518:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800651c:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <I2C_TransferConfig+0x58>)
 800651e:	430b      	orrs	r3, r1
 8006520:	43db      	mvns	r3, r3
 8006522:	ea02 0103 	and.w	r1, r2, r3
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800652c:	7a7b      	ldrb	r3, [r7, #9]
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	431a      	orrs	r2, r3
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	431a      	orrs	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	03ff63ff 	.word	0x03ff63ff

08006558 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e0bf      	b.n	80066ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fc fa80 	bl	8002a84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800659a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6899      	ldr	r1, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b4a      	ldr	r3, [pc, #296]	; (80066f4 <HAL_LTDC_Init+0x19c>)
 80065cc:	400b      	ands	r3, r1
 80065ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6899      	ldr	r1, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68d9      	ldr	r1, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b3e      	ldr	r3, [pc, #248]	; (80066f4 <HAL_LTDC_Init+0x19c>)
 80065fa:	400b      	ands	r3, r1
 80065fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	041b      	lsls	r3, r3, #16
 8006604:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68d9      	ldr	r1, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6919      	ldr	r1, [r3, #16]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <HAL_LTDC_Init+0x19c>)
 8006628:	400b      	ands	r3, r1
 800662a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6919      	ldr	r1, [r3, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6959      	ldr	r1, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <HAL_LTDC_Init+0x19c>)
 8006656:	400b      	ands	r3, r1
 8006658:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6959      	ldr	r1, [r3, #20]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006688:	041b      	lsls	r3, r3, #16
 800668a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0206 	orr.w	r2, r2, #6
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	f000f800 	.word	0xf000f800

080066f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	d023      	beq.n	8006762 <HAL_LTDC_IRQHandler+0x6a>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01e      	beq.n	8006762 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0204 	bic.w	r2, r2, #4
 8006732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2204      	movs	r2, #4
 800673a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006742:	f043 0201 	orr.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2204      	movs	r2, #4
 8006750:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f86f 	bl	8006840 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d023      	beq.n	80067b4 <HAL_LTDC_IRQHandler+0xbc>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01e      	beq.n	80067b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0202 	bic.w	r2, r2, #2
 8006784:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2202      	movs	r2, #2
 800678c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006794:	f043 0202 	orr.w	r2, r3, #2
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2204      	movs	r2, #4
 80067a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f846 	bl	8006840 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01b      	beq.n	80067f6 <HAL_LTDC_IRQHandler+0xfe>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d016      	beq.n	80067f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2201      	movs	r2, #1
 80067de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f011 fb71 	bl	8017ed8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01b      	beq.n	8006838 <HAL_LTDC_IRQHandler+0x140>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0208 	bic.w	r2, r2, #8
 8006818:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2208      	movs	r2, #8
 8006820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f80e 	bl	8006854 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006868:	b5b0      	push	{r4, r5, r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_LTDC_ConfigLayer+0x1a>
 800687e:	2302      	movs	r3, #2
 8006880:	e02c      	b.n	80068dc <HAL_LTDC_ConfigLayer+0x74>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2134      	movs	r1, #52	; 0x34
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	4614      	mov	r4, r2
 80068a6:	461d      	mov	r5, r3
 80068a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f849 	bl	8006954 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2201      	movs	r2, #1
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bdb0      	pop	{r4, r5, r7, pc}

080068e4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_LTDC_ProgramLineEvent+0x18>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e023      	b.n	8006944 <HAL_LTDC_ProgramLineEvent+0x60>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800691c:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	40016800 	.word	0x40016800

08006954 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	0c1b      	lsrs	r3, r3, #16
 800696c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006970:	4413      	add	r3, r2
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	01db      	lsls	r3, r3, #7
 8006980:	4413      	add	r3, r2
 8006982:	3384      	adds	r3, #132	; 0x84
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	4611      	mov	r1, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	01d2      	lsls	r2, r2, #7
 8006990:	440a      	add	r2, r1
 8006992:	3284      	adds	r2, #132	; 0x84
 8006994:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006998:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	0c1b      	lsrs	r3, r3, #16
 80069a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069aa:	4413      	add	r3, r2
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4619      	mov	r1, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	01db      	lsls	r3, r3, #7
 80069b8:	440b      	add	r3, r1
 80069ba:	3384      	adds	r3, #132	; 0x84
 80069bc:	4619      	mov	r1, r3
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069d2:	4413      	add	r3, r2
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	01db      	lsls	r3, r3, #7
 80069e2:	4413      	add	r3, r2
 80069e4:	3384      	adds	r3, #132	; 0x84
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	4611      	mov	r1, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	01d2      	lsls	r2, r2, #7
 80069f2:	440a      	add	r2, r1
 80069f4:	3284      	adds	r2, #132	; 0x84
 80069f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0a:	4413      	add	r3, r2
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	01db      	lsls	r3, r3, #7
 8006a18:	440b      	add	r3, r1
 8006a1a:	3384      	adds	r3, #132	; 0x84
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	01db      	lsls	r3, r3, #7
 8006a2e:	4413      	add	r3, r2
 8006a30:	3384      	adds	r3, #132	; 0x84
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	4611      	mov	r1, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	01d2      	lsls	r2, r2, #7
 8006a3e:	440a      	add	r2, r1
 8006a40:	3284      	adds	r2, #132	; 0x84
 8006a42:	f023 0307 	bic.w	r3, r3, #7
 8006a46:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	01db      	lsls	r3, r3, #7
 8006a52:	4413      	add	r3, r2
 8006a54:	3384      	adds	r3, #132	; 0x84
 8006a56:	461a      	mov	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	061b      	lsls	r3, r3, #24
 8006a78:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	4413      	add	r3, r2
 8006a86:	3384      	adds	r3, #132	; 0x84
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	01db      	lsls	r3, r3, #7
 8006a94:	4413      	add	r3, r2
 8006a96:	3384      	adds	r3, #132	; 0x84
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	431a      	orrs	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	01db      	lsls	r3, r3, #7
 8006ab8:	440b      	add	r3, r1
 8006aba:	3384      	adds	r3, #132	; 0x84
 8006abc:	4619      	mov	r1, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	01db      	lsls	r3, r3, #7
 8006ace:	4413      	add	r3, r2
 8006ad0:	3384      	adds	r3, #132	; 0x84
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	01d2      	lsls	r2, r2, #7
 8006ade:	440a      	add	r2, r1
 8006ae0:	3284      	adds	r2, #132	; 0x84
 8006ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ae6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	01db      	lsls	r3, r3, #7
 8006af2:	4413      	add	r3, r2
 8006af4:	3384      	adds	r3, #132	; 0x84
 8006af6:	461a      	mov	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	4413      	add	r3, r2
 8006b0a:	3384      	adds	r3, #132	; 0x84
 8006b0c:	69da      	ldr	r2, [r3, #28]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	01db      	lsls	r3, r3, #7
 8006b18:	440b      	add	r3, r1
 8006b1a:	3384      	adds	r3, #132	; 0x84
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4b58      	ldr	r3, [pc, #352]	; (8006c80 <LTDC_SetConfig+0x32c>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	6809      	ldr	r1, [r1, #0]
 8006b30:	4608      	mov	r0, r1
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	01c9      	lsls	r1, r1, #7
 8006b36:	4401      	add	r1, r0
 8006b38:	3184      	adds	r1, #132	; 0x84
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	01db      	lsls	r3, r3, #7
 8006b48:	4413      	add	r3, r2
 8006b4a:	3384      	adds	r3, #132	; 0x84
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	01db      	lsls	r3, r3, #7
 8006b58:	4413      	add	r3, r2
 8006b5a:	3384      	adds	r3, #132	; 0x84
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	01db      	lsls	r3, r3, #7
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3384      	adds	r3, #132	; 0x84
 8006b70:	461a      	mov	r2, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006b80:	2304      	movs	r3, #4
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e01b      	b.n	8006bbe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d102      	bne.n	8006b94 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	e014      	b.n	8006bbe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d00b      	beq.n	8006bb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d007      	beq.n	8006bb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d003      	beq.n	8006bb4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	d102      	bne.n	8006bba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e001      	b.n	8006bbe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	01db      	lsls	r3, r3, #7
 8006bc8:	4413      	add	r3, r2
 8006bca:	3384      	adds	r3, #132	; 0x84
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	01d2      	lsls	r2, r2, #7
 8006bd8:	440a      	add	r2, r1
 8006bda:	3284      	adds	r2, #132	; 0x84
 8006bdc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006be0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	041a      	lsls	r2, r3, #16
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6859      	ldr	r1, [r3, #4]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	1acb      	subs	r3, r1, r3
 8006bf8:	69f9      	ldr	r1, [r7, #28]
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	3303      	adds	r3, #3
 8006c00:	68f9      	ldr	r1, [r7, #12]
 8006c02:	6809      	ldr	r1, [r1, #0]
 8006c04:	4608      	mov	r0, r1
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	01c9      	lsls	r1, r1, #7
 8006c0a:	4401      	add	r1, r0
 8006c0c:	3184      	adds	r1, #132	; 0x84
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3384      	adds	r3, #132	; 0x84
 8006c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	01db      	lsls	r3, r3, #7
 8006c2c:	440b      	add	r3, r1
 8006c2e:	3384      	adds	r3, #132	; 0x84
 8006c30:	4619      	mov	r1, r3
 8006c32:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <LTDC_SetConfig+0x330>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	01db      	lsls	r3, r3, #7
 8006c42:	4413      	add	r3, r2
 8006c44:	3384      	adds	r3, #132	; 0x84
 8006c46:	461a      	mov	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	01db      	lsls	r3, r3, #7
 8006c58:	4413      	add	r3, r2
 8006c5a:	3384      	adds	r3, #132	; 0x84
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	4611      	mov	r1, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	01d2      	lsls	r2, r2, #7
 8006c68:	440a      	add	r2, r1
 8006c6a:	3284      	adds	r2, #132	; 0x84
 8006c6c:	f043 0301 	orr.w	r3, r3, #1
 8006c70:	6013      	str	r3, [r2, #0]
}
 8006c72:	bf00      	nop
 8006c74:	3724      	adds	r7, #36	; 0x24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	fffff8f8 	.word	0xfffff8f8
 8006c84:	fffff800 	.word	0xfffff800

08006c88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a04      	ldr	r2, [pc, #16]	; (8006ca4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c96:	6013      	str	r3, [r2, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40007000 	.word	0x40007000

08006ca8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006cb2:	4b23      	ldr	r3, [pc, #140]	; (8006d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cbe:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006cca:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cd6:	f7fc fdf7 	bl	80038c8 <HAL_GetTick>
 8006cda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006cdc:	e009      	b.n	8006cf2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006cde:	f7fc fdf3 	bl	80038c8 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cec:	d901      	bls.n	8006cf2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e022      	b.n	8006d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfe:	d1ee      	bne.n	8006cde <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a0f      	ldr	r2, [pc, #60]	; (8006d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d0c:	f7fc fddc 	bl	80038c8 <HAL_GetTick>
 8006d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d12:	e009      	b.n	8006d28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d14:	f7fc fdd8 	bl	80038c8 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d22:	d901      	bls.n	8006d28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e007      	b.n	8006d38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d28:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d34:	d1ee      	bne.n	8006d14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40023800 	.word	0x40023800
 8006d44:	40007000 	.word	0x40007000

08006d48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006d50:	f7fc fdba 	bl	80038c8 <HAL_GetTick>
 8006d54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e067      	b.n	8006e30 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fb ff4d 	bl	8002c14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006d7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f85e 	bl	8006e40 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	021a      	lsls	r2, r3, #8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	2120      	movs	r1, #32
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f856 	bl	8006e5c <QSPI_WaitFlagStateUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d135      	bne.n	8006e26 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <HAL_QSPI_Init+0xf0>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6852      	ldr	r2, [r2, #4]
 8006dc8:	0611      	lsls	r1, r2, #24
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	68d2      	ldr	r2, [r2, #12]
 8006dce:	4311      	orrs	r1, r2
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	69d2      	ldr	r2, [r2, #28]
 8006dd4:	4311      	orrs	r1, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6a12      	ldr	r2, [r2, #32]
 8006dda:	4311      	orrs	r1, r2
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	430b      	orrs	r3, r1
 8006de2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <HAL_QSPI_Init+0xf4>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6912      	ldr	r2, [r2, #16]
 8006df2:	0411      	lsls	r1, r2, #16
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6952      	ldr	r2, [r2, #20]
 8006df8:	4311      	orrs	r1, r2
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6992      	ldr	r2, [r2, #24]
 8006dfe:	4311      	orrs	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	00ffff2f 	.word	0x00ffff2f
 8006e3c:	ffe0f8fe 	.word	0xffe0f8fe

08006e40 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006e6c:	e01a      	b.n	8006ea4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d016      	beq.n	8006ea4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e76:	f7fc fd27 	bl	80038c8 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2204      	movs	r2, #4
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e98:	f043 0201 	orr.w	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e00e      	b.n	8006ec2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bf14      	ite	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	2300      	moveq	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d1d6      	bne.n	8006e6e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e291      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8087 	beq.w	8006ffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ef0:	4b96      	ldr	r3, [pc, #600]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 030c 	and.w	r3, r3, #12
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d00c      	beq.n	8006f16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006efc:	4b93      	ldr	r3, [pc, #588]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 030c 	and.w	r3, r3, #12
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d112      	bne.n	8006f2e <HAL_RCC_OscConfig+0x62>
 8006f08:	4b90      	ldr	r3, [pc, #576]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f14:	d10b      	bne.n	8006f2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f16:	4b8d      	ldr	r3, [pc, #564]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d06c      	beq.n	8006ffc <HAL_RCC_OscConfig+0x130>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d168      	bne.n	8006ffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e26b      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f36:	d106      	bne.n	8006f46 <HAL_RCC_OscConfig+0x7a>
 8006f38:	4b84      	ldr	r3, [pc, #528]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a83      	ldr	r2, [pc, #524]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e02e      	b.n	8006fa4 <HAL_RCC_OscConfig+0xd8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCC_OscConfig+0x9c>
 8006f4e:	4b7f      	ldr	r3, [pc, #508]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a7e      	ldr	r2, [pc, #504]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	4b7c      	ldr	r3, [pc, #496]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a7b      	ldr	r2, [pc, #492]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e01d      	b.n	8006fa4 <HAL_RCC_OscConfig+0xd8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f70:	d10c      	bne.n	8006f8c <HAL_RCC_OscConfig+0xc0>
 8006f72:	4b76      	ldr	r3, [pc, #472]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a75      	ldr	r2, [pc, #468]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	4b73      	ldr	r3, [pc, #460]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a72      	ldr	r2, [pc, #456]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	e00b      	b.n	8006fa4 <HAL_RCC_OscConfig+0xd8>
 8006f8c:	4b6f      	ldr	r3, [pc, #444]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6e      	ldr	r2, [pc, #440]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	4b6c      	ldr	r3, [pc, #432]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a6b      	ldr	r2, [pc, #428]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d013      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fc fc8c 	bl	80038c8 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb4:	f7fc fc88 	bl	80038c8 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b64      	cmp	r3, #100	; 0x64
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e21f      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fc6:	4b61      	ldr	r3, [pc, #388]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCC_OscConfig+0xe8>
 8006fd2:	e014      	b.n	8006ffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fc fc78 	bl	80038c8 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fdc:	f7fc fc74 	bl	80038c8 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b64      	cmp	r3, #100	; 0x64
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e20b      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fee:	4b57      	ldr	r3, [pc, #348]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f0      	bne.n	8006fdc <HAL_RCC_OscConfig+0x110>
 8006ffa:	e000      	b.n	8006ffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d069      	beq.n	80070de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800700a:	4b50      	ldr	r3, [pc, #320]	; (800714c <HAL_RCC_OscConfig+0x280>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 030c 	and.w	r3, r3, #12
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007016:	4b4d      	ldr	r3, [pc, #308]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 030c 	and.w	r3, r3, #12
 800701e:	2b08      	cmp	r3, #8
 8007020:	d11c      	bne.n	800705c <HAL_RCC_OscConfig+0x190>
 8007022:	4b4a      	ldr	r3, [pc, #296]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d116      	bne.n	800705c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800702e:	4b47      	ldr	r3, [pc, #284]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <HAL_RCC_OscConfig+0x17a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d001      	beq.n	8007046 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e1df      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007046:	4b41      	ldr	r3, [pc, #260]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	493d      	ldr	r1, [pc, #244]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007056:	4313      	orrs	r3, r2
 8007058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705a:	e040      	b.n	80070de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d023      	beq.n	80070ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007064:	4b39      	ldr	r3, [pc, #228]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a38      	ldr	r2, [pc, #224]	; (800714c <HAL_RCC_OscConfig+0x280>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007070:	f7fc fc2a 	bl	80038c8 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007078:	f7fc fc26 	bl	80038c8 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e1bd      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708a:	4b30      	ldr	r3, [pc, #192]	; (800714c <HAL_RCC_OscConfig+0x280>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007096:	4b2d      	ldr	r3, [pc, #180]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4929      	ldr	r1, [pc, #164]	; (800714c <HAL_RCC_OscConfig+0x280>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]
 80070aa:	e018      	b.n	80070de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070ac:	4b27      	ldr	r3, [pc, #156]	; (800714c <HAL_RCC_OscConfig+0x280>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a26      	ldr	r2, [pc, #152]	; (800714c <HAL_RCC_OscConfig+0x280>)
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fc fc06 	bl	80038c8 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c0:	f7fc fc02 	bl	80038c8 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e199      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070d2:	4b1e      	ldr	r3, [pc, #120]	; (800714c <HAL_RCC_OscConfig+0x280>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d038      	beq.n	800715c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d019      	beq.n	8007126 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070f2:	4b16      	ldr	r3, [pc, #88]	; (800714c <HAL_RCC_OscConfig+0x280>)
 80070f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f6:	4a15      	ldr	r2, [pc, #84]	; (800714c <HAL_RCC_OscConfig+0x280>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fe:	f7fc fbe3 	bl	80038c8 <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007104:	e008      	b.n	8007118 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007106:	f7fc fbdf 	bl	80038c8 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e176      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007118:	4b0c      	ldr	r3, [pc, #48]	; (800714c <HAL_RCC_OscConfig+0x280>)
 800711a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0f0      	beq.n	8007106 <HAL_RCC_OscConfig+0x23a>
 8007124:	e01a      	b.n	800715c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <HAL_RCC_OscConfig+0x280>)
 8007128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712a:	4a08      	ldr	r2, [pc, #32]	; (800714c <HAL_RCC_OscConfig+0x280>)
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007132:	f7fc fbc9 	bl	80038c8 <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007138:	e00a      	b.n	8007150 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800713a:	f7fc fbc5 	bl	80038c8 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d903      	bls.n	8007150 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e15c      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
 800714c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007150:	4b91      	ldr	r3, [pc, #580]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1ee      	bne.n	800713a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80a4 	beq.w	80072b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800716a:	4b8b      	ldr	r3, [pc, #556]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10d      	bne.n	8007192 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007176:	4b88      	ldr	r3, [pc, #544]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	4a87      	ldr	r2, [pc, #540]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800717c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007180:	6413      	str	r3, [r2, #64]	; 0x40
 8007182:	4b85      	ldr	r3, [pc, #532]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800718a:	60bb      	str	r3, [r7, #8]
 800718c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007192:	4b82      	ldr	r3, [pc, #520]	; (800739c <HAL_RCC_OscConfig+0x4d0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d118      	bne.n	80071d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800719e:	4b7f      	ldr	r3, [pc, #508]	; (800739c <HAL_RCC_OscConfig+0x4d0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a7e      	ldr	r2, [pc, #504]	; (800739c <HAL_RCC_OscConfig+0x4d0>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071aa:	f7fc fb8d 	bl	80038c8 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b2:	f7fc fb89 	bl	80038c8 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b64      	cmp	r3, #100	; 0x64
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e120      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c4:	4b75      	ldr	r3, [pc, #468]	; (800739c <HAL_RCC_OscConfig+0x4d0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d106      	bne.n	80071e6 <HAL_RCC_OscConfig+0x31a>
 80071d8:	4b6f      	ldr	r3, [pc, #444]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071dc:	4a6e      	ldr	r2, [pc, #440]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	6713      	str	r3, [r2, #112]	; 0x70
 80071e4:	e02d      	b.n	8007242 <HAL_RCC_OscConfig+0x376>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10c      	bne.n	8007208 <HAL_RCC_OscConfig+0x33c>
 80071ee:	4b6a      	ldr	r3, [pc, #424]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f2:	4a69      	ldr	r2, [pc, #420]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	6713      	str	r3, [r2, #112]	; 0x70
 80071fa:	4b67      	ldr	r3, [pc, #412]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	4a66      	ldr	r2, [pc, #408]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007200:	f023 0304 	bic.w	r3, r3, #4
 8007204:	6713      	str	r3, [r2, #112]	; 0x70
 8007206:	e01c      	b.n	8007242 <HAL_RCC_OscConfig+0x376>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b05      	cmp	r3, #5
 800720e:	d10c      	bne.n	800722a <HAL_RCC_OscConfig+0x35e>
 8007210:	4b61      	ldr	r3, [pc, #388]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007214:	4a60      	ldr	r2, [pc, #384]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007216:	f043 0304 	orr.w	r3, r3, #4
 800721a:	6713      	str	r3, [r2, #112]	; 0x70
 800721c:	4b5e      	ldr	r3, [pc, #376]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	4a5d      	ldr	r2, [pc, #372]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	6713      	str	r3, [r2, #112]	; 0x70
 8007228:	e00b      	b.n	8007242 <HAL_RCC_OscConfig+0x376>
 800722a:	4b5b      	ldr	r3, [pc, #364]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	4a5a      	ldr	r2, [pc, #360]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	6713      	str	r3, [r2, #112]	; 0x70
 8007236:	4b58      	ldr	r3, [pc, #352]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	4a57      	ldr	r2, [pc, #348]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800723c:	f023 0304 	bic.w	r3, r3, #4
 8007240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d015      	beq.n	8007276 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724a:	f7fc fb3d 	bl	80038c8 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007250:	e00a      	b.n	8007268 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007252:	f7fc fb39 	bl	80038c8 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007260:	4293      	cmp	r3, r2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e0ce      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007268:	4b4b      	ldr	r3, [pc, #300]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0ee      	beq.n	8007252 <HAL_RCC_OscConfig+0x386>
 8007274:	e014      	b.n	80072a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007276:	f7fc fb27 	bl	80038c8 <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800727c:	e00a      	b.n	8007294 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727e:	f7fc fb23 	bl	80038c8 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f241 3288 	movw	r2, #5000	; 0x1388
 800728c:	4293      	cmp	r3, r2
 800728e:	d901      	bls.n	8007294 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e0b8      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007294:	4b40      	ldr	r3, [pc, #256]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1ee      	bne.n	800727e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d105      	bne.n	80072b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072a6:	4b3c      	ldr	r3, [pc, #240]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	4a3b      	ldr	r2, [pc, #236]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80072ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80a4 	beq.w	8007404 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072bc:	4b36      	ldr	r3, [pc, #216]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 030c 	and.w	r3, r3, #12
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d06b      	beq.n	80073a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d149      	bne.n	8007364 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d0:	4b31      	ldr	r3, [pc, #196]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a30      	ldr	r2, [pc, #192]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80072d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072dc:	f7fc faf4 	bl	80038c8 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e4:	f7fc faf0 	bl	80038c8 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e087      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f6:	4b28      	ldr	r3, [pc, #160]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f0      	bne.n	80072e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69da      	ldr	r2, [r3, #28]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	019b      	lsls	r3, r3, #6
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	3b01      	subs	r3, #1
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	4313      	orrs	r3, r2
 8007328:	4a1b      	ldr	r2, [pc, #108]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800732a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800732e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007330:	4b19      	ldr	r3, [pc, #100]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a18      	ldr	r2, [pc, #96]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800733a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fc fac4 	bl	80038c8 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007344:	f7fc fac0 	bl	80038c8 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e057      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007356:	4b10      	ldr	r3, [pc, #64]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0x478>
 8007362:	e04f      	b.n	8007404 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a0b      	ldr	r2, [pc, #44]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800736a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800736e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007370:	f7fc faaa 	bl	80038c8 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007378:	f7fc faa6 	bl	80038c8 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e03d      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738a:	4b03      	ldr	r3, [pc, #12]	; (8007398 <HAL_RCC_OscConfig+0x4cc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0x4ac>
 8007396:	e035      	b.n	8007404 <HAL_RCC_OscConfig+0x538>
 8007398:	40023800 	.word	0x40023800
 800739c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073a0:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <HAL_RCC_OscConfig+0x544>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d028      	beq.n	8007400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d121      	bne.n	8007400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d11a      	bne.n	8007400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073d0:	4013      	ands	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073d8:	4293      	cmp	r3, r2
 80073da:	d111      	bne.n	8007400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	3b01      	subs	r3, #1
 80073ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d107      	bne.n	8007400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d001      	beq.n	8007404 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40023800 	.word	0x40023800

08007414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e0d0      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800742c:	4b6a      	ldr	r3, [pc, #424]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d910      	bls.n	800745c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743a:	4b67      	ldr	r3, [pc, #412]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f023 020f 	bic.w	r2, r3, #15
 8007442:	4965      	ldr	r1, [pc, #404]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	4313      	orrs	r3, r2
 8007448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800744a:	4b63      	ldr	r3, [pc, #396]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d001      	beq.n	800745c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0b8      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d020      	beq.n	80074aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007474:	4b59      	ldr	r3, [pc, #356]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a58      	ldr	r2, [pc, #352]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 800747a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800747e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800748c:	4b53      	ldr	r3, [pc, #332]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4a52      	ldr	r2, [pc, #328]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 8007492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007498:	4b50      	ldr	r3, [pc, #320]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	494d      	ldr	r1, [pc, #308]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d040      	beq.n	8007538 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d107      	bne.n	80074ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074be:	4b47      	ldr	r3, [pc, #284]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d115      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e07f      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d107      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d6:	4b41      	ldr	r3, [pc, #260]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e073      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e6:	4b3d      	ldr	r3, [pc, #244]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e06b      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074f6:	4b39      	ldr	r3, [pc, #228]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f023 0203 	bic.w	r2, r3, #3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	4936      	ldr	r1, [pc, #216]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 8007504:	4313      	orrs	r3, r2
 8007506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007508:	f7fc f9de 	bl	80038c8 <HAL_GetTick>
 800750c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750e:	e00a      	b.n	8007526 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007510:	f7fc f9da 	bl	80038c8 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	f241 3288 	movw	r2, #5000	; 0x1388
 800751e:	4293      	cmp	r3, r2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e053      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007526:	4b2d      	ldr	r3, [pc, #180]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 020c 	and.w	r2, r3, #12
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	429a      	cmp	r2, r3
 8007536:	d1eb      	bne.n	8007510 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007538:	4b27      	ldr	r3, [pc, #156]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d210      	bcs.n	8007568 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007546:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f023 020f 	bic.w	r2, r3, #15
 800754e:	4922      	ldr	r1, [pc, #136]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	4b20      	ldr	r3, [pc, #128]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e032      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	4916      	ldr	r1, [pc, #88]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 8007582:	4313      	orrs	r3, r2
 8007584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007592:	4b12      	ldr	r3, [pc, #72]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	490e      	ldr	r1, [pc, #56]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075a6:	f000 f821 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 80075aa:	4601      	mov	r1, r0
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	4a0a      	ldr	r2, [pc, #40]	; (80075e0 <HAL_RCC_ClockConfig+0x1cc>)
 80075b8:	5cd3      	ldrb	r3, [r2, r3]
 80075ba:	fa21 f303 	lsr.w	r3, r1, r3
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <HAL_RCC_ClockConfig+0x1d0>)
 80075c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <HAL_RCC_ClockConfig+0x1d4>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fb ffc8 	bl	800355c <HAL_InitTick>

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40023c00 	.word	0x40023c00
 80075dc:	40023800 	.word	0x40023800
 80075e0:	08029b60 	.word	0x08029b60
 80075e4:	20000018 	.word	0x20000018
 80075e8:	2000001c 	.word	0x2000001c

080075ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	2300      	movs	r3, #0
 80075fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007602:	4b50      	ldr	r3, [pc, #320]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 030c 	and.w	r3, r3, #12
 800760a:	2b04      	cmp	r3, #4
 800760c:	d007      	beq.n	800761e <HAL_RCC_GetSysClockFreq+0x32>
 800760e:	2b08      	cmp	r3, #8
 8007610:	d008      	beq.n	8007624 <HAL_RCC_GetSysClockFreq+0x38>
 8007612:	2b00      	cmp	r3, #0
 8007614:	f040 808d 	bne.w	8007732 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007618:	4b4b      	ldr	r3, [pc, #300]	; (8007748 <HAL_RCC_GetSysClockFreq+0x15c>)
 800761a:	60bb      	str	r3, [r7, #8]
      break;
 800761c:	e08c      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800761e:	4b4b      	ldr	r3, [pc, #300]	; (800774c <HAL_RCC_GetSysClockFreq+0x160>)
 8007620:	60bb      	str	r3, [r7, #8]
      break;
 8007622:	e089      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007624:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800762c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800762e:	4b45      	ldr	r3, [pc, #276]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d023      	beq.n	8007682 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800763a:	4b42      	ldr	r3, [pc, #264]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	099b      	lsrs	r3, r3, #6
 8007640:	f04f 0400 	mov.w	r4, #0
 8007644:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	ea03 0501 	and.w	r5, r3, r1
 8007650:	ea04 0602 	and.w	r6, r4, r2
 8007654:	4a3d      	ldr	r2, [pc, #244]	; (800774c <HAL_RCC_GetSysClockFreq+0x160>)
 8007656:	fb02 f106 	mul.w	r1, r2, r6
 800765a:	2200      	movs	r2, #0
 800765c:	fb02 f205 	mul.w	r2, r2, r5
 8007660:	440a      	add	r2, r1
 8007662:	493a      	ldr	r1, [pc, #232]	; (800774c <HAL_RCC_GetSysClockFreq+0x160>)
 8007664:	fba5 0101 	umull	r0, r1, r5, r1
 8007668:	1853      	adds	r3, r2, r1
 800766a:	4619      	mov	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f04f 0400 	mov.w	r4, #0
 8007672:	461a      	mov	r2, r3
 8007674:	4623      	mov	r3, r4
 8007676:	f7f9 f8af 	bl	80007d8 <__aeabi_uldivmod>
 800767a:	4603      	mov	r3, r0
 800767c:	460c      	mov	r4, r1
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e049      	b.n	8007716 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007682:	4b30      	ldr	r3, [pc, #192]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	099b      	lsrs	r3, r3, #6
 8007688:	f04f 0400 	mov.w	r4, #0
 800768c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	ea03 0501 	and.w	r5, r3, r1
 8007698:	ea04 0602 	and.w	r6, r4, r2
 800769c:	4629      	mov	r1, r5
 800769e:	4632      	mov	r2, r6
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	f04f 0400 	mov.w	r4, #0
 80076a8:	0154      	lsls	r4, r2, #5
 80076aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076ae:	014b      	lsls	r3, r1, #5
 80076b0:	4619      	mov	r1, r3
 80076b2:	4622      	mov	r2, r4
 80076b4:	1b49      	subs	r1, r1, r5
 80076b6:	eb62 0206 	sbc.w	r2, r2, r6
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	f04f 0400 	mov.w	r4, #0
 80076c2:	0194      	lsls	r4, r2, #6
 80076c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076c8:	018b      	lsls	r3, r1, #6
 80076ca:	1a5b      	subs	r3, r3, r1
 80076cc:	eb64 0402 	sbc.w	r4, r4, r2
 80076d0:	f04f 0100 	mov.w	r1, #0
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	00e2      	lsls	r2, r4, #3
 80076da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076de:	00d9      	lsls	r1, r3, #3
 80076e0:	460b      	mov	r3, r1
 80076e2:	4614      	mov	r4, r2
 80076e4:	195b      	adds	r3, r3, r5
 80076e6:	eb44 0406 	adc.w	r4, r4, r6
 80076ea:	f04f 0100 	mov.w	r1, #0
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	02a2      	lsls	r2, r4, #10
 80076f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80076f8:	0299      	lsls	r1, r3, #10
 80076fa:	460b      	mov	r3, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	4621      	mov	r1, r4
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f04f 0400 	mov.w	r4, #0
 8007708:	461a      	mov	r2, r3
 800770a:	4623      	mov	r3, r4
 800770c:	f7f9 f864 	bl	80007d8 <__aeabi_uldivmod>
 8007710:	4603      	mov	r3, r0
 8007712:	460c      	mov	r4, r1
 8007714:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	3301      	adds	r3, #1
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	fbb2 f3f3 	udiv	r3, r2, r3
 800772e:	60bb      	str	r3, [r7, #8]
      break;
 8007730:	e002      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007734:	60bb      	str	r3, [r7, #8]
      break;
 8007736:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007738:	68bb      	ldr	r3, [r7, #8]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007742:	bf00      	nop
 8007744:	40023800 	.word	0x40023800
 8007748:	00f42400 	.word	0x00f42400
 800774c:	017d7840 	.word	0x017d7840

08007750 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007754:	4b03      	ldr	r3, [pc, #12]	; (8007764 <HAL_RCC_GetHCLKFreq+0x14>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20000018 	.word	0x20000018

08007768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800776c:	f7ff fff0 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007770:	4601      	mov	r1, r0
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	0a9b      	lsrs	r3, r3, #10
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4a03      	ldr	r2, [pc, #12]	; (800778c <HAL_RCC_GetPCLK1Freq+0x24>)
 800777e:	5cd3      	ldrb	r3, [r2, r3]
 8007780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007784:	4618      	mov	r0, r3
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40023800 	.word	0x40023800
 800778c:	08029b70 	.word	0x08029b70

08007790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007794:	f7ff ffdc 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007798:	4601      	mov	r1, r0
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0b5b      	lsrs	r3, r3, #13
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	4a03      	ldr	r2, [pc, #12]	; (80077b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a6:	5cd3      	ldrb	r3, [r2, r3]
 80077a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40023800 	.word	0x40023800
 80077b4:	08029b70 	.word	0x08029b70

080077b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	220f      	movs	r2, #15
 80077c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077c8:	4b12      	ldr	r3, [pc, #72]	; (8007814 <HAL_RCC_GetClockConfig+0x5c>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 0203 	and.w	r2, r3, #3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <HAL_RCC_GetClockConfig+0x5c>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077e0:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <HAL_RCC_GetClockConfig+0x5c>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80077ec:	4b09      	ldr	r3, [pc, #36]	; (8007814 <HAL_RCC_GetClockConfig+0x5c>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <HAL_RCC_GetClockConfig+0x60>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 020f 	and.w	r2, r3, #15
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	40023800 	.word	0x40023800
 8007818:	40023c00 	.word	0x40023c00

0800781c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d012      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007844:	4b69      	ldr	r3, [pc, #420]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4a68      	ldr	r2, [pc, #416]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800784e:	6093      	str	r3, [r2, #8]
 8007850:	4b66      	ldr	r3, [pc, #408]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007858:	4964      	ldr	r1, [pc, #400]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800785a:	4313      	orrs	r3, r2
 800785c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d017      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007876:	4b5d      	ldr	r3, [pc, #372]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007884:	4959      	ldr	r1, [pc, #356]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007894:	d101      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007896:	2301      	movs	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d017      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078b2:	4b4e      	ldr	r3, [pc, #312]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	494a      	ldr	r1, [pc, #296]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d0:	d101      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078de:	2301      	movs	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078ee:	2301      	movs	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 808b 	beq.w	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007900:	4b3a      	ldr	r3, [pc, #232]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	4a39      	ldr	r2, [pc, #228]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790a:	6413      	str	r3, [r2, #64]	; 0x40
 800790c:	4b37      	ldr	r3, [pc, #220]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007918:	4b35      	ldr	r3, [pc, #212]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a34      	ldr	r2, [pc, #208]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800791e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007924:	f7fb ffd0 	bl	80038c8 <HAL_GetTick>
 8007928:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800792a:	e008      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792c:	f7fb ffcc 	bl	80038c8 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b64      	cmp	r3, #100	; 0x64
 8007938:	d901      	bls.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e355      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800793e:	4b2c      	ldr	r3, [pc, #176]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800794a:	4b28      	ldr	r3, [pc, #160]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007952:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d035      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d02e      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007968:	4b20      	ldr	r3, [pc, #128]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007970:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007972:	4b1e      	ldr	r3, [pc, #120]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	4a1d      	ldr	r2, [pc, #116]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800797c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800797e:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007988:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800798a:	4a18      	ldr	r2, [pc, #96]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b01      	cmp	r3, #1
 800799a:	d114      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fb ff94 	bl	80038c8 <HAL_GetTick>
 80079a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a2:	e00a      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a4:	f7fb ff90 	bl	80038c8 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d901      	bls.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e317      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0ee      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d2:	d111      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079e0:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079e2:	400b      	ands	r3, r1
 80079e4:	4901      	ldr	r1, [pc, #4]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	608b      	str	r3, [r1, #8]
 80079ea:	e00b      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079ec:	40023800 	.word	0x40023800
 80079f0:	40007000 	.word	0x40007000
 80079f4:	0ffffcff 	.word	0x0ffffcff
 80079f8:	4bb0      	ldr	r3, [pc, #704]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	4aaf      	ldr	r2, [pc, #700]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a02:	6093      	str	r3, [r2, #8]
 8007a04:	4bad      	ldr	r3, [pc, #692]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a10:	49aa      	ldr	r1, [pc, #680]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d010      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a22:	4ba6      	ldr	r3, [pc, #664]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a28:	4aa4      	ldr	r2, [pc, #656]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007a32:	4ba2      	ldr	r3, [pc, #648]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	499f      	ldr	r1, [pc, #636]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a50:	4b9a      	ldr	r3, [pc, #616]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a5e:	4997      	ldr	r1, [pc, #604]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a72:	4b92      	ldr	r3, [pc, #584]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a80:	498e      	ldr	r1, [pc, #568]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a94:	4b89      	ldr	r3, [pc, #548]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa2:	4986      	ldr	r1, [pc, #536]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ab6:	4b81      	ldr	r3, [pc, #516]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	497d      	ldr	r1, [pc, #500]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ad8:	4b78      	ldr	r3, [pc, #480]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ade:	f023 0203 	bic.w	r2, r3, #3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae6:	4975      	ldr	r1, [pc, #468]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007afa:	4b70      	ldr	r3, [pc, #448]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b00:	f023 020c 	bic.w	r2, r3, #12
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b08:	496c      	ldr	r1, [pc, #432]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b1c:	4b67      	ldr	r3, [pc, #412]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	4964      	ldr	r1, [pc, #400]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b3e:	4b5f      	ldr	r3, [pc, #380]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4c:	495b      	ldr	r1, [pc, #364]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b60:	4b56      	ldr	r3, [pc, #344]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	4953      	ldr	r1, [pc, #332]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b82:	4b4e      	ldr	r3, [pc, #312]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b90:	494a      	ldr	r1, [pc, #296]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007ba4:	4b45      	ldr	r3, [pc, #276]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007baa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bb2:	4942      	ldr	r1, [pc, #264]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007bc6:	4b3d      	ldr	r3, [pc, #244]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd4:	4939      	ldr	r1, [pc, #228]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007be8:	4b34      	ldr	r3, [pc, #208]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf6:	4931      	ldr	r1, [pc, #196]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d011      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c0a:	4b2c      	ldr	r3, [pc, #176]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c18:	4928      	ldr	r1, [pc, #160]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c28:	d101      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c4a:	4b1c      	ldr	r3, [pc, #112]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c58:	4918      	ldr	r1, [pc, #96]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c6c:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c7c:	490f      	ldr	r1, [pc, #60]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d005      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c92:	f040 80d8 	bne.w	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca2:	f7fb fe11 	bl	80038c8 <HAL_GetTick>
 8007ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ca8:	e00a      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007caa:	f7fb fe0d 	bl	80038c8 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b64      	cmp	r3, #100	; 0x64
 8007cb6:	d903      	bls.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e196      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cc0:	4b6c      	ldr	r3, [pc, #432]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ee      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d021      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d11d      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ce0:	4b64      	ldr	r3, [pc, #400]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cee:	4b61      	ldr	r3, [pc, #388]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf4:	0e1b      	lsrs	r3, r3, #24
 8007cf6:	f003 030f 	and.w	r3, r3, #15
 8007cfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	019a      	lsls	r2, r3, #6
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	431a      	orrs	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	061b      	lsls	r3, r3, #24
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	071b      	lsls	r3, r3, #28
 8007d14:	4957      	ldr	r1, [pc, #348]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d004      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d30:	d00a      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d02e      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d46:	d129      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d48:	4b4a      	ldr	r3, [pc, #296]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4e:	0c1b      	lsrs	r3, r3, #16
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d56:	4b47      	ldr	r3, [pc, #284]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5c:	0f1b      	lsrs	r3, r3, #28
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	019a      	lsls	r2, r3, #6
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	041b      	lsls	r3, r3, #16
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	061b      	lsls	r3, r3, #24
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	071b      	lsls	r3, r3, #28
 8007d7c:	493d      	ldr	r1, [pc, #244]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d84:	4b3b      	ldr	r3, [pc, #236]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d8a:	f023 021f 	bic.w	r2, r3, #31
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	3b01      	subs	r3, #1
 8007d94:	4937      	ldr	r1, [pc, #220]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01d      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007da8:	4b32      	ldr	r3, [pc, #200]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dae:	0e1b      	lsrs	r3, r3, #24
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007db6:	4b2f      	ldr	r3, [pc, #188]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbc:	0f1b      	lsrs	r3, r3, #28
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	019a      	lsls	r2, r3, #6
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	061b      	lsls	r3, r3, #24
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	071b      	lsls	r3, r3, #28
 8007ddc:	4925      	ldr	r1, [pc, #148]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d011      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	019a      	lsls	r2, r3, #6
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	041b      	lsls	r3, r3, #16
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	061b      	lsls	r3, r3, #24
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	071b      	lsls	r3, r3, #28
 8007e0c:	4919      	ldr	r1, [pc, #100]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e14:	4b17      	ldr	r3, [pc, #92]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e20:	f7fb fd52 	bl	80038c8 <HAL_GetTick>
 8007e24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e26:	e008      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e28:	f7fb fd4e 	bl	80038c8 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b64      	cmp	r3, #100	; 0x64
 8007e34:	d901      	bls.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e0d7      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e3a:	4b0e      	ldr	r3, [pc, #56]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	f040 80cd 	bne.w	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a08      	ldr	r2, [pc, #32]	; (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e5a:	f7fb fd35 	bl	80038c8 <HAL_GetTick>
 8007e5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e60:	e00a      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e62:	f7fb fd31 	bl	80038c8 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b64      	cmp	r3, #100	; 0x64
 8007e6e:	d903      	bls.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e0ba      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007e74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e78:	4b5e      	ldr	r3, [pc, #376]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e84:	d0ed      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d02e      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d12a      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007eae:	4b51      	ldr	r3, [pc, #324]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb4:	0c1b      	lsrs	r3, r3, #16
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ebc:	4b4d      	ldr	r3, [pc, #308]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec2:	0f1b      	lsrs	r3, r3, #28
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	019a      	lsls	r2, r3, #6
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	061b      	lsls	r3, r3, #24
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	071b      	lsls	r3, r3, #28
 8007ee2:	4944      	ldr	r1, [pc, #272]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007eea:	4b42      	ldr	r3, [pc, #264]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	493d      	ldr	r1, [pc, #244]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d022      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f18:	d11d      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f1a:	4b36      	ldr	r3, [pc, #216]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	0e1b      	lsrs	r3, r3, #24
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f28:	4b32      	ldr	r3, [pc, #200]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2e:	0f1b      	lsrs	r3, r3, #28
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	019a      	lsls	r2, r3, #6
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	431a      	orrs	r2, r3
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	061b      	lsls	r3, r3, #24
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	071b      	lsls	r3, r3, #28
 8007f4e:	4929      	ldr	r1, [pc, #164]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d028      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f62:	4b24      	ldr	r3, [pc, #144]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f68:	0e1b      	lsrs	r3, r3, #24
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f70:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	f003 0303 	and.w	r3, r3, #3
 8007f7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	019a      	lsls	r2, r3, #6
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	061b      	lsls	r3, r3, #24
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	071b      	lsls	r3, r3, #28
 8007f96:	4917      	ldr	r1, [pc, #92]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007f9e:	4b15      	ldr	r3, [pc, #84]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	4911      	ldr	r1, [pc, #68]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a0e      	ldr	r2, [pc, #56]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc0:	f7fb fc82 	bl	80038c8 <HAL_GetTick>
 8007fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fc8:	f7fb fc7e 	bl	80038c8 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b64      	cmp	r3, #100	; 0x64
 8007fd4:	d901      	bls.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e007      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe6:	d1ef      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40023800 	.word	0x40023800

08007ff8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008016:	f040 8086 	bne.w	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800801a:	4b8d      	ldr	r3, [pc, #564]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800801c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008020:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008028:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008030:	d03e      	beq.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8008032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008036:	d073      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d000      	beq.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800803c:	e074      	b.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800803e:	4b84      	ldr	r3, [pc, #528]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d108      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800804a:	4b81      	ldr	r3, [pc, #516]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008052:	4a80      	ldr	r2, [pc, #512]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008054:	fbb2 f3f3 	udiv	r3, r2, r3
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	e007      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800805c:	4b7c      	ldr	r3, [pc, #496]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008064:	4a7c      	ldr	r2, [pc, #496]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008066:	fbb2 f3f3 	udiv	r3, r2, r3
 800806a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800806c:	4b78      	ldr	r3, [pc, #480]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008072:	0e1b      	lsrs	r3, r3, #24
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800807a:	4b75      	ldr	r3, [pc, #468]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800807c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008080:	099b      	lsrs	r3, r3, #6
 8008082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	fb02 f203 	mul.w	r2, r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008092:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008094:	4b6e      	ldr	r3, [pc, #440]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	f003 031f 	and.w	r3, r3, #31
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ac:	617b      	str	r3, [r7, #20]
        break;
 80080ae:	e03b      	b.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080b0:	4b67      	ldr	r3, [pc, #412]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d108      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080bc:	4b64      	ldr	r3, [pc, #400]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c4:	4a63      	ldr	r2, [pc, #396]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80080c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ca:	613b      	str	r3, [r7, #16]
 80080cc:	e007      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080ce:	4b60      	ldr	r3, [pc, #384]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d6:	4a60      	ldr	r2, [pc, #384]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80080d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080dc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080de:	4b5c      	ldr	r3, [pc, #368]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e4:	0e1b      	lsrs	r3, r3, #24
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080ec:	4b58      	ldr	r3, [pc, #352]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f2:	099b      	lsrs	r3, r3, #6
 80080f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	fb02 f203 	mul.w	r2, r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	fbb2 f3f3 	udiv	r3, r2, r3
 8008104:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008106:	4b52      	ldr	r3, [pc, #328]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800810c:	f003 031f 	and.w	r3, r3, #31
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	fbb2 f3f3 	udiv	r3, r2, r3
 800811c:	617b      	str	r3, [r7, #20]
        break;
 800811e:	e003      	b.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008120:	4b4e      	ldr	r3, [pc, #312]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008122:	617b      	str	r3, [r7, #20]
        break;
 8008124:	e000      	b.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008126:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812e:	f040 8086 	bne.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008132:	4b47      	ldr	r3, [pc, #284]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008138:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008140:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008148:	d03e      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800814a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800814e:	d073      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d000      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008154:	e074      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008156:	4b3e      	ldr	r3, [pc, #248]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d108      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008162:	4b3b      	ldr	r3, [pc, #236]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800816a:	4a3a      	ldr	r2, [pc, #232]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e007      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008174:	4b36      	ldr	r3, [pc, #216]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800817c:	4a36      	ldr	r2, [pc, #216]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008184:	4b32      	ldr	r3, [pc, #200]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818a:	0e1b      	lsrs	r3, r3, #24
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008192:	4b2f      	ldr	r3, [pc, #188]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008198:	099b      	lsrs	r3, r3, #6
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	fb02 f203 	mul.w	r2, r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081aa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80081ac:	4b28      	ldr	r3, [pc, #160]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b2:	0a1b      	lsrs	r3, r3, #8
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	3301      	adds	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c4:	617b      	str	r3, [r7, #20]
        break;
 80081c6:	e03b      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081c8:	4b21      	ldr	r3, [pc, #132]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d108      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081d4:	4b1e      	ldr	r3, [pc, #120]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80081de:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	e007      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081e6:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ee:	4a1a      	ldr	r2, [pc, #104]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80081f6:	4b16      	ldr	r3, [pc, #88]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008204:	4b12      	ldr	r3, [pc, #72]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	fb02 f203 	mul.w	r2, r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	fbb2 f3f3 	udiv	r3, r2, r3
 800821c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	3301      	adds	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	fbb2 f3f3 	udiv	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]
        break;
 8008236:	e003      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008238:	4b08      	ldr	r3, [pc, #32]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800823a:	617b      	str	r3, [r7, #20]
        break;
 800823c:	e000      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800823e:	bf00      	nop

  return frequency;
 8008240:	697b      	ldr	r3, [r7, #20]
}
 8008242:	4618      	mov	r0, r3
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	40023800 	.word	0x40023800
 8008254:	00f42400 	.word	0x00f42400
 8008258:	017d7840 	.word	0x017d7840
 800825c:	00bb8000 	.word	0x00bb8000

08008260 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e06b      	b.n	800834a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	7f5b      	ldrb	r3, [r3, #29]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fa fd56 	bl	8002d34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	22ca      	movs	r2, #202	; 0xca
 8008294:	625a      	str	r2, [r3, #36]	; 0x24
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2253      	movs	r2, #83	; 0x53
 800829c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fb00 	bl	80088a4 <RTC_EnterInitMode>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	22ff      	movs	r2, #255	; 0xff
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2204      	movs	r2, #4
 80082b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e046      	b.n	800834a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6899      	ldr	r1, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b23      	ldr	r3, [pc, #140]	; (8008354 <HAL_RTC_Init+0xf4>)
 80082c8:	400b      	ands	r3, r1
 80082ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6899      	ldr	r1, [r3, #8]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	431a      	orrs	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	68d2      	ldr	r2, [r2, #12]
 80082f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6919      	ldr	r1, [r3, #16]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	041a      	lsls	r2, r3, #16
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008316:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0208 	bic.w	r2, r2, #8
 8008326:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	22ff      	movs	r2, #255	; 0xff
 8008340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008348:	2300      	movs	r3, #0
  }
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	ff8fffbf 	.word	0xff8fffbf

08008358 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008358:	b590      	push	{r4, r7, lr}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	7f1b      	ldrb	r3, [r3, #28]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d101      	bne.n	8008374 <HAL_RTC_SetTime+0x1c>
 8008370:	2302      	movs	r3, #2
 8008372:	e0a8      	b.n	80084c6 <HAL_RTC_SetTime+0x16e>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2201      	movs	r2, #1
 8008378:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2202      	movs	r2, #2
 800837e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d126      	bne.n	80083d4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2200      	movs	r2, #0
 8008398:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 faac 	bl	80088fc <RTC_ByteToBcd2>
 80083a4:	4603      	mov	r3, r0
 80083a6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 faa5 	bl	80088fc <RTC_ByteToBcd2>
 80083b2:	4603      	mov	r3, r0
 80083b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083b6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	789b      	ldrb	r3, [r3, #2]
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fa9d 	bl	80088fc <RTC_ByteToBcd2>
 80083c2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	7b1b      	ldrb	r3, [r3, #12]
 80083cc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083ce:	4313      	orrs	r3, r2
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	e018      	b.n	8008406 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80083f4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80083fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	7b1b      	ldrb	r3, [r3, #12]
 8008400:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	22ca      	movs	r2, #202	; 0xca
 800840c:	625a      	str	r2, [r3, #36]	; 0x24
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2253      	movs	r2, #83	; 0x53
 8008414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fa44 	bl	80088a4 <RTC_EnterInitMode>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	22ff      	movs	r2, #255	; 0xff
 8008428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2204      	movs	r2, #4
 800842e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e045      	b.n	80084c6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	6979      	ldr	r1, [r7, #20]
 8008440:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <HAL_RTC_SetTime+0x178>)
 8008442:	400b      	ands	r3, r1
 8008444:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008454:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6899      	ldr	r1, [r3, #8]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	431a      	orrs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800847c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d111      	bne.n	80084b0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 f9e1 	bl	8008854 <HAL_RTC_WaitForSynchro>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	22ff      	movs	r2, #255	; 0xff
 800849e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2204      	movs	r2, #4
 80084a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e00a      	b.n	80084c6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80084c4:	2300      	movs	r3, #0
  }
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd90      	pop	{r4, r7, pc}
 80084ce:	bf00      	nop
 80084d0:	007f7f7f 	.word	0x007f7f7f

080084d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084d4:	b590      	push	{r4, r7, lr}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	7f1b      	ldrb	r3, [r3, #28]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_RTC_SetDate+0x1c>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e092      	b.n	8008616 <HAL_RTC_SetDate+0x142>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2202      	movs	r2, #2
 80084fa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10e      	bne.n	8008520 <HAL_RTC_SetDate+0x4c>
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	785b      	ldrb	r3, [r3, #1]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	d008      	beq.n	8008520 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	f023 0310 	bic.w	r3, r3, #16
 8008516:	b2db      	uxtb	r3, r3
 8008518:	330a      	adds	r3, #10
 800851a:	b2da      	uxtb	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d11c      	bne.n	8008560 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f9e6 	bl	80088fc <RTC_ByteToBcd2>
 8008530:	4603      	mov	r3, r0
 8008532:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	785b      	ldrb	r3, [r3, #1]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f9df 	bl	80088fc <RTC_ByteToBcd2>
 800853e:	4603      	mov	r3, r0
 8008540:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008542:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	789b      	ldrb	r3, [r3, #2]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f9d7 	bl	80088fc <RTC_ByteToBcd2>
 800854e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008550:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	e00e      	b.n	800857e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	78db      	ldrb	r3, [r3, #3]
 8008564:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	785b      	ldrb	r3, [r3, #1]
 800856a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800856c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008572:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	22ca      	movs	r2, #202	; 0xca
 8008584:	625a      	str	r2, [r3, #36]	; 0x24
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2253      	movs	r2, #83	; 0x53
 800858c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 f988 	bl	80088a4 <RTC_EnterInitMode>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	22ff      	movs	r2, #255	; 0xff
 80085a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2204      	movs	r2, #4
 80085a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e031      	b.n	8008616 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	6979      	ldr	r1, [r7, #20]
 80085b8:	4b19      	ldr	r3, [pc, #100]	; (8008620 <HAL_RTC_SetDate+0x14c>)
 80085ba:	400b      	ands	r3, r1
 80085bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d111      	bne.n	8008600 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 f939 	bl	8008854 <HAL_RTC_WaitForSynchro>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	22ff      	movs	r2, #255	; 0xff
 80085ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2204      	movs	r2, #4
 80085f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e00a      	b.n	8008616 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2201      	movs	r2, #1
 800860c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
  }
}
 8008616:	4618      	mov	r0, r3
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	bd90      	pop	{r4, r7, pc}
 800861e:	bf00      	nop
 8008620:	00ffff3f 	.word	0x00ffff3f

08008624 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008624:	b590      	push	{r4, r7, lr}
 8008626:	b089      	sub	sp, #36	; 0x24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	7f1b      	ldrb	r3, [r3, #28]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d101      	bne.n	8008648 <HAL_RTC_SetAlarm+0x24>
 8008644:	2302      	movs	r3, #2
 8008646:	e101      	b.n	800884c <HAL_RTC_SetAlarm+0x228>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2202      	movs	r2, #2
 8008652:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d137      	bne.n	80086ca <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f942 	bl	80088fc <RTC_ByteToBcd2>
 8008678:	4603      	mov	r3, r0
 800867a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	785b      	ldrb	r3, [r3, #1]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f93b 	bl	80088fc <RTC_ByteToBcd2>
 8008686:	4603      	mov	r3, r0
 8008688:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800868a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	789b      	ldrb	r3, [r3, #2]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 f933 	bl	80088fc <RTC_ByteToBcd2>
 8008696:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008698:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	7b1b      	ldrb	r3, [r3, #12]
 80086a0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086a2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 f925 	bl	80088fc <RTC_ByteToBcd2>
 80086b2:	4603      	mov	r3, r0
 80086b4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086b6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	e023      	b.n	8008712 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d102      	bne.n	80086de <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80086ea:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80086f0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	7b1b      	ldrb	r3, [r3, #12]
 80086f6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80086f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008700:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008702:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008708:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800870e:	4313      	orrs	r3, r2
 8008710:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	4313      	orrs	r3, r2
 800871c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	22ca      	movs	r2, #202	; 0xca
 8008724:	625a      	str	r2, [r3, #36]	; 0x24
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2253      	movs	r2, #83	; 0x53
 800872c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008736:	d13f      	bne.n	80087b8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008746:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008756:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008758:	f7fb f8b6 	bl	80038c8 <HAL_GetTick>
 800875c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800875e:	e013      	b.n	8008788 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008760:	f7fb f8b2 	bl	80038c8 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800876e:	d90b      	bls.n	8008788 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	22ff      	movs	r2, #255	; 0xff
 8008776:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2203      	movs	r2, #3
 800877c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e061      	b.n	800884c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0e4      	beq.n	8008760 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087b4:	609a      	str	r2, [r3, #8]
 80087b6:	e03e      	b.n	8008836 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087c6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087d6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087d8:	f7fb f876 	bl	80038c8 <HAL_GetTick>
 80087dc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80087de:	e013      	b.n	8008808 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087e0:	f7fb f872 	bl	80038c8 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087ee:	d90b      	bls.n	8008808 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2203      	movs	r2, #3
 80087fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e021      	b.n	800884c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0e4      	beq.n	80087e0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008834:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	22ff      	movs	r2, #255	; 0xff
 800883c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3724      	adds	r7, #36	; 0x24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd90      	pop	{r4, r7, pc}

08008854 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800886e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008870:	f7fb f82a 	bl	80038c8 <HAL_GetTick>
 8008874:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008876:	e009      	b.n	800888c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008878:	f7fb f826 	bl	80038c8 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008886:	d901      	bls.n	800888c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e007      	b.n	800889c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0ee      	beq.n	8008878 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d119      	bne.n	80088f2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f04f 32ff 	mov.w	r2, #4294967295
 80088c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088c8:	f7fa fffe 	bl	80038c8 <HAL_GetTick>
 80088cc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088ce:	e009      	b.n	80088e4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088d0:	f7fa fffa 	bl	80038c8 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088de:	d901      	bls.n	80088e4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e007      	b.n	80088f4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0ee      	beq.n	80088d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800890a:	e005      	b.n	8008918 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	3b0a      	subs	r3, #10
 8008916:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	2b09      	cmp	r3, #9
 800891c:	d8f6      	bhi.n	800890c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	b2da      	uxtb	r2, r3
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	4313      	orrs	r3, r2
 800892a:	b2db      	uxtb	r3, r3
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	7f1b      	ldrb	r3, [r3, #28]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008950:	2302      	movs	r3, #2
 8008952:	e03e      	b.n	80089d2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2202      	movs	r2, #2
 800895e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	4b1e      	ldr	r3, [pc, #120]	; (80089e0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008968:	4013      	ands	r3, r2
 800896a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	22ca      	movs	r2, #202	; 0xca
 800897a:	625a      	str	r2, [r3, #36]	; 0x24
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2253      	movs	r2, #83	; 0x53
 8008982:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0206 	bic.w	r2, r2, #6
 8008992:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	22ff      	movs	r2, #255	; 0xff
 80089c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	fffff7f7 	.word	0xfffff7f7

080089e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b088      	sub	sp, #32
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e149      	b.n	8008c96 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fa fd36 	bl	8003488 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f94f 	bl	8008cc8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d007      	beq.n	8008a42 <HAL_SAI_Init+0x5e>
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d302      	bcc.n	8008a3c <HAL_SAI_Init+0x58>
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d006      	beq.n	8008a48 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008a3a:	e008      	b.n	8008a4e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]
      break;
 8008a40:	e005      	b.n	8008a4e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a42:	2310      	movs	r3, #16
 8008a44:	61fb      	str	r3, [r7, #28]
      break;
 8008a46:	e002      	b.n	8008a4e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a48:	2320      	movs	r3, #32
 8008a4a:	61fb      	str	r3, [r7, #28]
      break;
 8008a4c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d81d      	bhi.n	8008a92 <HAL_SAI_Init+0xae>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <HAL_SAI_Init+0x78>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a73 	.word	0x08008a73
 8008a64:	08008a7b 	.word	0x08008a7b
 8008a68:	08008a83 	.word	0x08008a83
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008a70:	e010      	b.n	8008a94 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a76:	617b      	str	r3, [r7, #20]
      }
      break;
 8008a78:	e00c      	b.n	8008a94 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a7e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008a80:	e008      	b.n	8008a94 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a86:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008a90:	e000      	b.n	8008a94 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008a92:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a81      	ldr	r2, [pc, #516]	; (8008ca0 <HAL_SAI_Init+0x2bc>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d004      	beq.n	8008aa8 <HAL_SAI_Init+0xc4>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a80      	ldr	r2, [pc, #512]	; (8008ca4 <HAL_SAI_Init+0x2c0>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d103      	bne.n	8008ab0 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008aa8:	4a7f      	ldr	r2, [pc, #508]	; (8008ca8 <HAL_SAI_Init+0x2c4>)
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	e002      	b.n	8008ab6 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008ab0:	4a7e      	ldr	r2, [pc, #504]	; (8008cac <HAL_SAI_Init+0x2c8>)
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d043      	beq.n	8008b46 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a76      	ldr	r2, [pc, #472]	; (8008ca0 <HAL_SAI_Init+0x2bc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d004      	beq.n	8008ad6 <HAL_SAI_Init+0xf2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a74      	ldr	r2, [pc, #464]	; (8008ca4 <HAL_SAI_Init+0x2c0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d104      	bne.n	8008ae0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008ad6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008ada:	f7ff fa8d 	bl	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ade:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a72      	ldr	r2, [pc, #456]	; (8008cb0 <HAL_SAI_Init+0x2cc>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_SAI_Init+0x110>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a71      	ldr	r2, [pc, #452]	; (8008cb4 <HAL_SAI_Init+0x2d0>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d104      	bne.n	8008afe <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008af4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008af8:	f7ff fa7e 	bl	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008afc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	461a      	mov	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	025b      	lsls	r3, r3, #9
 8008b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b14:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4a67      	ldr	r2, [pc, #412]	; (8008cb8 <HAL_SAI_Init+0x2d4>)
 8008b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1e:	08da      	lsrs	r2, r3, #3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008b24:	68f9      	ldr	r1, [r7, #12]
 8008b26:	4b64      	ldr	r3, [pc, #400]	; (8008cb8 <HAL_SAI_Init+0x2d4>)
 8008b28:	fba3 2301 	umull	r2, r3, r3, r1
 8008b2c:	08da      	lsrs	r2, r3, #3
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	1aca      	subs	r2, r1, r3
 8008b38:	2a08      	cmp	r2, #8
 8008b3a:	d904      	bls.n	8008b46 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_SAI_Init+0x172>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d109      	bne.n	8008b6a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d101      	bne.n	8008b62 <HAL_SAI_Init+0x17e>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e001      	b.n	8008b66 <HAL_SAI_Init+0x182>
 8008b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b66:	61bb      	str	r3, [r7, #24]
 8008b68:	e008      	b.n	8008b7c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d102      	bne.n	8008b78 <HAL_SAI_Init+0x194>
 8008b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b76:	e000      	b.n	8008b7a <HAL_SAI_Init+0x196>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6819      	ldr	r1, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b4d      	ldr	r3, [pc, #308]	; (8008cbc <HAL_SAI_Init+0x2d8>)
 8008b88:	400b      	ands	r3, r1
 8008b8a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6819      	ldr	r1, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ba0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008bb4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bc0:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	051b      	lsls	r3, r3, #20
 8008bc8:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6859      	ldr	r1, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b38      	ldr	r3, [pc, #224]	; (8008cc0 <HAL_SAI_Init+0x2dc>)
 8008bde:	400b      	ands	r3, r1
 8008be0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6859      	ldr	r1, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6899      	ldr	r1, [r3, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b2e      	ldr	r3, [pc, #184]	; (8008cc4 <HAL_SAI_Init+0x2e0>)
 8008c0c:	400b      	ands	r3, r1
 8008c0e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6899      	ldr	r1, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c20:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008c26:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008c2c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c32:	3b01      	subs	r3, #1
 8008c34:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008c36:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008c4e:	400b      	ands	r3, r1
 8008c50:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68d9      	ldr	r1, [r3, #12]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c60:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c66:	041b      	lsls	r3, r3, #16
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3720      	adds	r7, #32
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40015804 	.word	0x40015804
 8008ca4:	40015824 	.word	0x40015824
 8008ca8:	40015800 	.word	0x40015800
 8008cac:	40015c00 	.word	0x40015c00
 8008cb0:	40015c04 	.word	0x40015c04
 8008cb4:	40015c24 	.word	0x40015c24
 8008cb8:	cccccccd 	.word	0xcccccccd
 8008cbc:	ff05c010 	.word	0xff05c010
 8008cc0:	ffff1ff0 	.word	0xffff1ff0
 8008cc4:	fff88000 	.word	0xfff88000

08008cc8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008cc8:	b490      	push	{r4, r7}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008cd0:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <SAI_Disable+0x64>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <SAI_Disable+0x68>)
 8008cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cda:	0b1b      	lsrs	r3, r3, #12
 8008cdc:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cf0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	1e5c      	subs	r4, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0e:	e006      	b.n	8008d1e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e9      	bne.n	8008cf2 <SAI_Disable+0x2a>

  return status;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc90      	pop	{r4, r7}
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000018 	.word	0x20000018
 8008d30:	95cbec1b 	.word	0x95cbec1b

08008d34 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e022      	b.n	8008d8c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d105      	bne.n	8008d5e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fa f805 	bl	8002d68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2203      	movs	r2, #3
 8008d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f814 	bl	8008d94 <HAL_SD_InitCard>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e00a      	b.n	8008d8c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d94:	b5b0      	push	{r4, r5, r7, lr}
 8008d96:	b08e      	sub	sp, #56	; 0x38
 8008d98:	af04      	add	r7, sp, #16
 8008d9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008db0:	2376      	movs	r3, #118	; 0x76
 8008db2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681d      	ldr	r5, [r3, #0]
 8008db8:	466c      	mov	r4, sp
 8008dba:	f107 0314 	add.w	r3, r7, #20
 8008dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dc6:	f107 0308 	add.w	r3, r7, #8
 8008dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dcc:	4628      	mov	r0, r5
 8008dce:	f002 ff51 	bl	800bc74 <SDMMC_Init>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e03b      	b.n	8008e5c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008df2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f002 ff74 	bl	800bce6 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e0c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fde6 	bl	80099e0 <SD_PowerON>
 8008e14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e013      	b.n	8008e5c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fd05 	bl	8009844 <SD_InitCard>
 8008e3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	431a      	orrs	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3728      	adds	r7, #40	; 0x28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bdb0      	pop	{r4, r5, r7, pc}

08008e64 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08c      	sub	sp, #48	; 0x30
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d107      	bne.n	8008e8c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e0cc      	b.n	8009026 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	f040 80c5 	bne.w	8009024 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	441a      	add	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d907      	bls.n	8008ebe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e0b3      	b.n	8009026 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2203      	movs	r2, #3
 8008ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008edc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	4a53      	ldr	r2, [pc, #332]	; (8009030 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	4a52      	ldr	r2, [pc, #328]	; (8009034 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008eec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3380      	adds	r3, #128	; 0x80
 8008f00:	4619      	mov	r1, r3
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	025b      	lsls	r3, r3, #9
 8008f08:	089b      	lsrs	r3, r3, #2
 8008f0a:	f7fb ff8b 	bl	8004e24 <HAL_DMA_Start_IT>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d017      	beq.n	8008f44 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f22:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a43      	ldr	r2, [pc, #268]	; (8009038 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e070      	b.n	8009026 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0208 	orr.w	r2, r2, #8
 8008f52:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d002      	beq.n	8008f62 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	025b      	lsls	r3, r3, #9
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 ff4e 	bl	800be0c <SDMMC_CmdBlockLength>
 8008f70:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00f      	beq.n	8008f98 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a2e      	ldr	r2, [pc, #184]	; (8009038 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	431a      	orrs	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e046      	b.n	8009026 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	025b      	lsls	r3, r3, #9
 8008fa2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008fa4:	2390      	movs	r3, #144	; 0x90
 8008fa6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008fa8:	2302      	movs	r3, #2
 8008faa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f107 0210 	add.w	r2, r7, #16
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f002 fef8 	bl	800bdb4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d90a      	bls.n	8008fe0 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2282      	movs	r2, #130	; 0x82
 8008fce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f002 ff5c 	bl	800be94 <SDMMC_CmdReadMultiBlock>
 8008fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fde:	e009      	b.n	8008ff4 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2281      	movs	r2, #129	; 0x81
 8008fe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fec:	4618      	mov	r0, r3
 8008fee:	f002 ff2f 	bl	800be50 <SDMMC_CmdReadSingleBlock>
 8008ff2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d012      	beq.n	8009020 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8009000:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	431a      	orrs	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e002      	b.n	8009026 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	e000      	b.n	8009026 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8009024:	2302      	movs	r3, #2
  }
}
 8009026:	4618      	mov	r0, r3
 8009028:	3730      	adds	r7, #48	; 0x30
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	0800972f 	.word	0x0800972f
 8009034:	080097a1 	.word	0x080097a1
 8009038:	004005ff 	.word	0x004005ff

0800903c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08c      	sub	sp, #48	; 0x30
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d107      	bne.n	8009064 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e0cf      	b.n	8009204 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b01      	cmp	r3, #1
 800906e:	f040 80c8 	bne.w	8009202 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009082:	429a      	cmp	r2, r3
 8009084:	d907      	bls.n	8009096 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e0b6      	b.n	8009204 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2203      	movs	r2, #3
 800909a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2200      	movs	r2, #0
 80090a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 021a 	orr.w	r2, r2, #26
 80090b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ba:	4a54      	ldr	r2, [pc, #336]	; (800920c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80090bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	4a53      	ldr	r2, [pc, #332]	; (8009210 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80090c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ca:	2200      	movs	r2, #0
 80090cc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d002      	beq.n	80090dc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	025b      	lsls	r3, r3, #9
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090e4:	4618      	mov	r0, r3
 80090e6:	f002 fe91 	bl	800be0c <SDMMC_CmdBlockLength>
 80090ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00f      	beq.n	8009112 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a47      	ldr	r2, [pc, #284]	; (8009214 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	431a      	orrs	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e078      	b.n	8009204 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d90a      	bls.n	800912e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	22a0      	movs	r2, #160	; 0xa0
 800911c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009124:	4618      	mov	r0, r3
 8009126:	f002 fef9 	bl	800bf1c <SDMMC_CmdWriteMultiBlock>
 800912a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800912c:	e009      	b.n	8009142 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2290      	movs	r2, #144	; 0x90
 8009132:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800913a:	4618      	mov	r0, r3
 800913c:	f002 fecc 	bl	800bed8 <SDMMC_CmdWriteSingleBlock>
 8009140:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d012      	beq.n	800916e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a31      	ldr	r2, [pc, #196]	; (8009214 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009156:	431a      	orrs	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e04a      	b.n	8009204 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0208 	orr.w	r2, r2, #8
 800917c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3380      	adds	r3, #128	; 0x80
 800918a:	461a      	mov	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	025b      	lsls	r3, r3, #9
 8009190:	089b      	lsrs	r3, r3, #2
 8009192:	f7fb fe47 	bl	8004e24 <HAL_DMA_Start_IT>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01a      	beq.n	80091d2 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 021a 	bic.w	r2, r2, #26
 80091aa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a18      	ldr	r2, [pc, #96]	; (8009214 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e018      	b.n	8009204 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	025b      	lsls	r3, r3, #9
 80091dc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80091de:	2390      	movs	r3, #144	; 0x90
 80091e0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80091e2:	2300      	movs	r3, #0
 80091e4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80091ea:	2301      	movs	r3, #1
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f107 0210 	add.w	r2, r7, #16
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 fddb 	bl	800bdb4 <SDMMC_ConfigData>

      return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e000      	b.n	8009204 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009202:	2302      	movs	r3, #2
  }
}
 8009204:	4618      	mov	r0, r3
 8009206:	3730      	adds	r7, #48	; 0x30
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	08009705 	.word	0x08009705
 8009210:	080097a1 	.word	0x080097a1
 8009214:	004005ff 	.word	0x004005ff

08009218 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800923a:	0f9b      	lsrs	r3, r3, #30
 800923c:	b2da      	uxtb	r2, r3
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009246:	0e9b      	lsrs	r3, r3, #26
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	b2da      	uxtb	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009258:	0e1b      	lsrs	r3, r3, #24
 800925a:	b2db      	uxtb	r3, r3
 800925c:	f003 0303 	and.w	r3, r3, #3
 8009260:	b2da      	uxtb	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800926a:	0c1b      	lsrs	r3, r3, #16
 800926c:	b2da      	uxtb	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	b2da      	uxtb	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009282:	b2da      	uxtb	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	b29a      	uxth	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092aa:	0bdb      	lsrs	r3, r3, #15
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092bc:	0b9b      	lsrs	r3, r3, #14
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ce:	0b5b      	lsrs	r3, r3, #13
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e0:	0b1b      	lsrs	r3, r3, #12
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d163      	bne.n	80093c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009300:	009a      	lsls	r2, r3, #2
 8009302:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009306:	4013      	ands	r3, r2
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800930c:	0f92      	lsrs	r2, r2, #30
 800930e:	431a      	orrs	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009318:	0edb      	lsrs	r3, r3, #27
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932a:	0e1b      	lsrs	r3, r3, #24
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933c:	0d5b      	lsrs	r3, r3, #21
 800933e:	b2db      	uxtb	r3, r3
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	b2da      	uxtb	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934e:	0c9b      	lsrs	r3, r3, #18
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	b2da      	uxtb	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009360:	0bdb      	lsrs	r3, r3, #15
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	7e1b      	ldrb	r3, [r3, #24]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	3302      	adds	r3, #2
 8009384:	2201      	movs	r2, #1
 8009386:	fa02 f303 	lsl.w	r3, r2, r3
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800938e:	fb02 f203 	mul.w	r2, r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	7a1b      	ldrb	r3, [r3, #8]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	2201      	movs	r2, #1
 80093a2:	409a      	lsls	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80093b0:	0a52      	lsrs	r2, r2, #9
 80093b2:	fb02 f203 	mul.w	r2, r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093c0:	661a      	str	r2, [r3, #96]	; 0x60
 80093c2:	e031      	b.n	8009428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d11d      	bne.n	8009408 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d0:	041b      	lsls	r3, r3, #16
 80093d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093da:	0c1b      	lsrs	r3, r3, #16
 80093dc:	431a      	orrs	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	3301      	adds	r3, #1
 80093e8:	029a      	lsls	r2, r3, #10
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	661a      	str	r2, [r3, #96]	; 0x60
 8009406:	e00f      	b.n	8009428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a58      	ldr	r2, [pc, #352]	; (8009570 <HAL_SD_GetCardCSD+0x344>)
 800940e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e09d      	b.n	8009564 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800942c:	0b9b      	lsrs	r3, r3, #14
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943e:	09db      	lsrs	r3, r3, #7
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	b2da      	uxtb	r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	b2da      	uxtb	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009460:	0fdb      	lsrs	r3, r3, #31
 8009462:	b2da      	uxtb	r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946c:	0f5b      	lsrs	r3, r3, #29
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	b2da      	uxtb	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	0e9b      	lsrs	r3, r3, #26
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	b2da      	uxtb	r2, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009490:	0d9b      	lsrs	r3, r3, #22
 8009492:	b2db      	uxtb	r3, r3
 8009494:	f003 030f 	and.w	r3, r3, #15
 8009498:	b2da      	uxtb	r2, r3
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a2:	0d5b      	lsrs	r3, r3, #21
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d2:	0bdb      	lsrs	r3, r3, #15
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	0b9b      	lsrs	r3, r3, #14
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fa:	0b5b      	lsrs	r3, r3, #13
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	b2da      	uxtb	r2, r3
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950e:	0b1b      	lsrs	r3, r3, #12
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009522:	0a9b      	lsrs	r3, r3, #10
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	004005ff 	.word	0x004005ff

08009574 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80095cc:	b5b0      	push	{r4, r5, r7, lr}
 80095ce:	b08e      	sub	sp, #56	; 0x38
 80095d0:	af04      	add	r7, sp, #16
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2203      	movs	r2, #3
 80095da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d02e      	beq.n	8009644 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ec:	d106      	bne.n	80095fc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	639a      	str	r2, [r3, #56]	; 0x38
 80095fa:	e029      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009602:	d10a      	bne.n	800961a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 faa1 	bl	8009b4c <SD_WideBus_Enable>
 800960a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	431a      	orrs	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
 8009618:	e01a      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fade 	bl	8009be2 <SD_WideBus_Disable>
 8009626:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	431a      	orrs	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	639a      	str	r2, [r3, #56]	; 0x38
 8009634:	e00c      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
 8009642:	e005      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	2b00      	cmp	r3, #0
 8009656:	d009      	beq.n	800966c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a18      	ldr	r2, [pc, #96]	; (80096c0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e024      	b.n	80096b6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681d      	ldr	r5, [r3, #0]
 8009692:	466c      	mov	r4, sp
 8009694:	f107 0318 	add.w	r3, r7, #24
 8009698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800969c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096a0:	f107 030c 	add.w	r3, r7, #12
 80096a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096a6:	4628      	mov	r0, r5
 80096a8:	f002 fae4 	bl	800bc74 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3728      	adds	r7, #40	; 0x28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bdb0      	pop	{r4, r5, r7, pc}
 80096be:	bf00      	nop
 80096c0:	004005ff 	.word	0x004005ff

080096c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80096d0:	f107 030c 	add.w	r3, r7, #12
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa10 	bl	8009afc <SD_SendStatus>
 80096dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0a5b      	lsrs	r3, r3, #9
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80096fa:	693b      	ldr	r3, [r7, #16]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009720:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009722:	bf00      	nop
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	2b82      	cmp	r3, #130	; 0x82
 8009742:	d111      	bne.n	8009768 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4618      	mov	r0, r3
 800974a:	f002 fc09 	bl	800bf60 <SDMMC_CmdStopTransfer>
 800974e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d008      	beq.n	8009768 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	431a      	orrs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff fd58 	bl	8009218 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0208 	bic.w	r2, r2, #8
 8009776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009780:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f003 f84f 	bl	800c834 <HAL_SD_RxCpltCallback>
#endif
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fb fb98 	bl	8004ee4 <HAL_DMA_GetError>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d03e      	beq.n	8009838 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d002      	beq.n	80097d6 <SD_DMAError+0x36>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d12d      	bne.n	8009832 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a19      	ldr	r2, [pc, #100]	; (8009840 <SD_DMAError+0xa0>)
 80097dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80097ec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f7ff ff62 	bl	80096c4 <HAL_SD_GetCardState>
 8009800:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b06      	cmp	r3, #6
 8009806:	d002      	beq.n	800980e <SD_DMAError+0x6e>
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b05      	cmp	r3, #5
 800980c:	d10a      	bne.n	8009824 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f002 fba4 	bl	800bf60 <SDMMC_CmdStopTransfer>
 8009818:	4602      	mov	r2, r0
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981e:	431a      	orrs	r2, r3
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2200      	movs	r2, #0
 8009830:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f7ff fcf0 	bl	8009218 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009838:	bf00      	nop
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	004005ff 	.word	0x004005ff

08009844 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009844:	b5b0      	push	{r4, r5, r7, lr}
 8009846:	b094      	sub	sp, #80	; 0x50
 8009848:	af04      	add	r7, sp, #16
 800984a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800984c:	2301      	movs	r3, #1
 800984e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4618      	mov	r0, r3
 8009856:	f002 fa55 	bl	800bd04 <SDMMC_GetPowerState>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009860:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009864:	e0b7      	b.n	80099d6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986a:	2b03      	cmp	r3, #3
 800986c:	d02f      	beq.n	80098ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f002 fc7f 	bl	800c176 <SDMMC_CmdSendCID>
 8009878:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800987a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <SD_InitCard+0x40>
    {
      return errorstate;
 8009880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009882:	e0a8      	b.n	80099d6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f002 fa7f 	bl	800bd8e <SDMMC_GetResponse>
 8009890:	4602      	mov	r2, r0
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2104      	movs	r1, #4
 800989c:	4618      	mov	r0, r3
 800989e:	f002 fa76 	bl	800bd8e <SDMMC_GetResponse>
 80098a2:	4602      	mov	r2, r0
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2108      	movs	r1, #8
 80098ae:	4618      	mov	r0, r3
 80098b0:	f002 fa6d 	bl	800bd8e <SDMMC_GetResponse>
 80098b4:	4602      	mov	r2, r0
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	210c      	movs	r1, #12
 80098c0:	4618      	mov	r0, r3
 80098c2:	f002 fa64 	bl	800bd8e <SDMMC_GetResponse>
 80098c6:	4602      	mov	r2, r0
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d00d      	beq.n	80098f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f107 020e 	add.w	r2, r7, #14
 80098de:	4611      	mov	r1, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f002 fc85 	bl	800c1f0 <SDMMC_CmdSetRelAdd>
 80098e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80098e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80098ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f0:	e071      	b.n	80099d6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d036      	beq.n	8009968 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80098fa:	89fb      	ldrh	r3, [r7, #14]
 80098fc:	461a      	mov	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990a:	041b      	lsls	r3, r3, #16
 800990c:	4619      	mov	r1, r3
 800990e:	4610      	mov	r0, r2
 8009910:	f002 fc4f 	bl	800c1b2 <SDMMC_CmdSendCSD>
 8009914:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <SD_InitCard+0xdc>
    {
      return errorstate;
 800991c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991e:	e05a      	b.n	80099d6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2100      	movs	r1, #0
 8009926:	4618      	mov	r0, r3
 8009928:	f002 fa31 	bl	800bd8e <SDMMC_GetResponse>
 800992c:	4602      	mov	r2, r0
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2104      	movs	r1, #4
 8009938:	4618      	mov	r0, r3
 800993a:	f002 fa28 	bl	800bd8e <SDMMC_GetResponse>
 800993e:	4602      	mov	r2, r0
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2108      	movs	r1, #8
 800994a:	4618      	mov	r0, r3
 800994c:	f002 fa1f 	bl	800bd8e <SDMMC_GetResponse>
 8009950:	4602      	mov	r2, r0
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	210c      	movs	r1, #12
 800995c:	4618      	mov	r0, r3
 800995e:	f002 fa16 	bl	800bd8e <SDMMC_GetResponse>
 8009962:	4602      	mov	r2, r0
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2104      	movs	r1, #4
 800996e:	4618      	mov	r0, r3
 8009970:	f002 fa0d 	bl	800bd8e <SDMMC_GetResponse>
 8009974:	4603      	mov	r3, r0
 8009976:	0d1a      	lsrs	r2, r3, #20
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800997c:	f107 0310 	add.w	r3, r7, #16
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fc52 	bl	800922c <HAL_SD_GetCardCSD>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800998e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009992:	e020      	b.n	80099d6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6819      	ldr	r1, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	f04f 0400 	mov.w	r4, #0
 80099a2:	461a      	mov	r2, r3
 80099a4:	4623      	mov	r3, r4
 80099a6:	4608      	mov	r0, r1
 80099a8:	f002 fafc 	bl	800bfa4 <SDMMC_CmdSelDesel>
 80099ac:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <SD_InitCard+0x174>
  {
    return errorstate;
 80099b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b6:	e00e      	b.n	80099d6 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681d      	ldr	r5, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	466c      	mov	r4, sp
 80099c0:	f103 0210 	add.w	r2, r3, #16
 80099c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80099c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099ca:	3304      	adds	r3, #4
 80099cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099ce:	4628      	mov	r0, r5
 80099d0:	f002 f950 	bl	800bc74 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3740      	adds	r7, #64	; 0x40
 80099da:	46bd      	mov	sp, r7
 80099dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080099e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f002 faf6 	bl	800bfea <SDMMC_CmdGoIdleState>
 80099fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	e072      	b.n	8009af0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f002 fb09 	bl	800c026 <SDMMC_CmdOperCond>
 8009a14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00d      	beq.n	8009a38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 fadf 	bl	800bfea <SDMMC_CmdGoIdleState>
 8009a2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	e05b      	b.n	8009af0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d137      	bne.n	8009ab6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 fb09 	bl	800c064 <SDMMC_CmdAppCommand>
 8009a52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d02d      	beq.n	8009ab6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a5e:	e047      	b.n	8009af0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2100      	movs	r1, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f002 fafc 	bl	800c064 <SDMMC_CmdAppCommand>
 8009a6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <SD_PowerON+0x98>
    {
      return errorstate;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	e03b      	b.n	8009af0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	491e      	ldr	r1, [pc, #120]	; (8009af8 <SD_PowerON+0x118>)
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f002 fb12 	bl	800c0a8 <SDMMC_CmdAppOperCommand>
 8009a84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a90:	e02e      	b.n	8009af0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2100      	movs	r1, #0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f002 f978 	bl	800bd8e <SDMMC_GetResponse>
 8009a9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	0fdb      	lsrs	r3, r3, #31
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d101      	bne.n	8009aac <SD_PowerON+0xcc>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e000      	b.n	8009aae <SD_PowerON+0xce>
 8009aac:	2300      	movs	r3, #0
 8009aae:	613b      	str	r3, [r7, #16]

    count++;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d802      	bhi.n	8009ac6 <SD_PowerON+0xe6>
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0cc      	beq.n	8009a60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d902      	bls.n	8009ad6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ad4:	e00c      	b.n	8009af0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	645a      	str	r2, [r3, #68]	; 0x44
 8009ae6:	e002      	b.n	8009aee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	c1100000 	.word	0xc1100000

08009afc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d102      	bne.n	8009b12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b10:	e018      	b.n	8009b44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f002 fb87 	bl	800c232 <SDMMC_CmdSendStatus>
 8009b24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	e009      	b.n	8009b44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f002 f929 	bl	800bd8e <SDMMC_GetResponse>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f002 f913 	bl	800bd8e <SDMMC_GetResponse>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b72:	d102      	bne.n	8009b7a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b78:	e02f      	b.n	8009bda <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b7a:	f107 030c 	add.w	r3, r7, #12
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f879 	bl	8009c78 <SD_FindSCR>
 8009b86:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	e023      	b.n	8009bda <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d01c      	beq.n	8009bd6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f002 fa5b 	bl	800c064 <SDMMC_CmdAppCommand>
 8009bae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	e00f      	b.n	8009bda <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2102      	movs	r1, #2
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f002 fa95 	bl	800c0f0 <SDMMC_CmdBusWidth>
 8009bc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	e003      	b.n	8009bda <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e001      	b.n	8009bda <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009bea:	2300      	movs	r3, #0
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 f8c8 	bl	800bd8e <SDMMC_GetResponse>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c08:	d102      	bne.n	8009c10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c0e:	e02f      	b.n	8009c70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c10:	f107 030c 	add.w	r3, r7, #12
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f82e 	bl	8009c78 <SD_FindSCR>
 8009c1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	e023      	b.n	8009c70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d01c      	beq.n	8009c6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3a:	041b      	lsls	r3, r3, #16
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	f002 fa10 	bl	800c064 <SDMMC_CmdAppCommand>
 8009c44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	e00f      	b.n	8009c70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f002 fa4a 	bl	800c0f0 <SDMMC_CmdBusWidth>
 8009c5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	e003      	b.n	8009c70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e001      	b.n	8009c70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009c78:	b590      	push	{r4, r7, lr}
 8009c7a:	b08f      	sub	sp, #60	; 0x3c
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c82:	f7f9 fe21 	bl	80038c8 <HAL_GetTick>
 8009c86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	60bb      	str	r3, [r7, #8]
 8009c90:	2300      	movs	r3, #0
 8009c92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2108      	movs	r1, #8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f002 f8b4 	bl	800be0c <SDMMC_CmdBlockLength>
 8009ca4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	e0a9      	b.n	8009e04 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	f002 f9d1 	bl	800c064 <SDMMC_CmdAppCommand>
 8009cc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <SD_FindSCR+0x56>
  {
    return errorstate;
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	e09a      	b.n	8009e04 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cce:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009cd8:	2330      	movs	r3, #48	; 0x30
 8009cda:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f107 0210 	add.w	r2, r7, #16
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f002 f85e 	bl	800bdb4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f002 fa19 	bl	800c134 <SDMMC_CmdSendSCR>
 8009d02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d022      	beq.n	8009d50 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	e07a      	b.n	8009e04 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00e      	beq.n	8009d3a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6819      	ldr	r1, [r3, #0]
 8009d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	f107 0208 	add.w	r2, r7, #8
 8009d28:	18d4      	adds	r4, r2, r3
 8009d2a:	4608      	mov	r0, r1
 8009d2c:	f001 ffce 	bl	800bccc <SDMMC_ReadFIFO>
 8009d30:	4603      	mov	r3, r0
 8009d32:	6023      	str	r3, [r4, #0]
      index++;
 8009d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d36:	3301      	adds	r3, #1
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d3a:	f7f9 fdc5 	bl	80038c8 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d102      	bne.n	8009d50 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d4e:	e059      	b.n	8009e04 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d56:	f240 432a 	movw	r3, #1066	; 0x42a
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0d6      	beq.n	8009d0e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d005      	beq.n	8009d7a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2208      	movs	r2, #8
 8009d74:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d76:	2308      	movs	r3, #8
 8009d78:	e044      	b.n	8009e04 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d90:	2302      	movs	r3, #2
 8009d92:	e037      	b.n	8009e04 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d005      	beq.n	8009dae <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2220      	movs	r2, #32
 8009da8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009daa:	2320      	movs	r3, #32
 8009dac:	e02a      	b.n	8009e04 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009db6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	061a      	lsls	r2, r3, #24
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	021b      	lsls	r3, r3, #8
 8009dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009dc4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	0a1b      	lsrs	r3, r3, #8
 8009dca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	0e1b      	lsrs	r3, r3, #24
 8009dd4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd8:	601a      	str	r2, [r3, #0]
    scr++;
 8009dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ddc:	3304      	adds	r3, #4
 8009dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	061a      	lsls	r2, r3, #24
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009dec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	0a1b      	lsrs	r3, r3, #8
 8009df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009df6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	0e1b      	lsrs	r3, r3, #24
 8009dfc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	373c      	adds	r7, #60	; 0x3c
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd90      	pop	{r4, r7, pc}

08009e0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e025      	b.n	8009e6c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7f9 fb1d 	bl	8003474 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	f001 fdeb 	bl	800ba28 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	f001 fe55 	bl	800bb0c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d101      	bne.n	8009e90 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e018      	b.n	8009ec2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2202      	movs	r2, #2
 8009e94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 feb3 	bl	800bc0c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d104      	bne.n	8009eb8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2205      	movs	r2, #5
 8009eb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009eb6:	e003      	b.n	8009ec0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d101      	bne.n	8009ee4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e00e      	b.n	8009f02 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 feab 	bl	800bc4e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e04c      	b.n	8009fb8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7f8 ff7a 	bl	8002e2c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0203 	bic.w	r2, r2, #3
 8009f4e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <HAL_SPDIFRX_Init+0xb4>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009f68:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009f6e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009f74:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009f7a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009f80:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009f86:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009f8c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009f92:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009f98:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	fff88407 	.word	0xfff88407

08009fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e084      	b.n	800a0e0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7f8 ff5d 	bl	8002eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a00c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a016:	d902      	bls.n	800a01e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e002      	b.n	800a024 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a01e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a022:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a02c:	d007      	beq.n	800a03e <HAL_SPI_Init+0x7a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a036:	d002      	beq.n	800a03e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a04e:	d903      	bls.n	800a058 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	631a      	str	r2, [r3, #48]	; 0x30
 800a056:	e002      	b.n	800a05e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	431a      	orrs	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	ea42 0103 	orr.w	r1, r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	f003 0204 	and.w	r2, r3, #4
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	ea42 0103 	orr.w	r1, r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	69da      	ldr	r2, [r3, #28]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e01d      	b.n	800a136 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7f8 ff30 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f000 fb78 	bl	800a81c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0201 	orr.w	r2, r2, #1
 800a156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <HAL_TIM_Base_Start_IT+0x50>)
 800a160:	4013      	ands	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b06      	cmp	r3, #6
 800a168:	d00b      	beq.n	800a182 <HAL_TIM_Base_Start_IT+0x42>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a170:	d007      	beq.n	800a182 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0201 	orr.w	r2, r2, #1
 800a180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	00010007 	.word	0x00010007

0800a194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e01d      	b.n	800a1e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7f8 ff48 	bl	8003050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f000 fb22 	bl	800a81c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d122      	bne.n	800a246 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d11b      	bne.n	800a246 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f06f 0202 	mvn.w	r2, #2
 800a216:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	f003 0303 	and.w	r3, r3, #3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fad7 	bl	800a7e0 <HAL_TIM_IC_CaptureCallback>
 800a232:	e005      	b.n	800a240 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fac9 	bl	800a7cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fada 	bl	800a7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b04      	cmp	r3, #4
 800a252:	d122      	bne.n	800a29a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f003 0304 	and.w	r3, r3, #4
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d11b      	bne.n	800a29a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f06f 0204 	mvn.w	r2, #4
 800a26a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 faad 	bl	800a7e0 <HAL_TIM_IC_CaptureCallback>
 800a286:	e005      	b.n	800a294 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fa9f 	bl	800a7cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fab0 	bl	800a7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	f003 0308 	and.w	r3, r3, #8
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d122      	bne.n	800a2ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	f003 0308 	and.w	r3, r3, #8
 800a2b2:	2b08      	cmp	r3, #8
 800a2b4:	d11b      	bne.n	800a2ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f06f 0208 	mvn.w	r2, #8
 800a2be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2204      	movs	r2, #4
 800a2c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d003      	beq.n	800a2dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fa83 	bl	800a7e0 <HAL_TIM_IC_CaptureCallback>
 800a2da:	e005      	b.n	800a2e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fa75 	bl	800a7cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa86 	bl	800a7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f003 0310 	and.w	r3, r3, #16
 800a2f8:	2b10      	cmp	r3, #16
 800a2fa:	d122      	bne.n	800a342 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f003 0310 	and.w	r3, r3, #16
 800a306:	2b10      	cmp	r3, #16
 800a308:	d11b      	bne.n	800a342 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f06f 0210 	mvn.w	r2, #16
 800a312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2208      	movs	r2, #8
 800a318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a324:	2b00      	cmp	r3, #0
 800a326:	d003      	beq.n	800a330 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa59 	bl	800a7e0 <HAL_TIM_IC_CaptureCallback>
 800a32e:	e005      	b.n	800a33c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fa4b 	bl	800a7cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa5c 	bl	800a7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d10e      	bne.n	800a36e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d107      	bne.n	800a36e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f06f 0201 	mvn.w	r2, #1
 800a366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7f8 f985 	bl	8002678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a378:	2b80      	cmp	r3, #128	; 0x80
 800a37a:	d10e      	bne.n	800a39a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a386:	2b80      	cmp	r3, #128	; 0x80
 800a388:	d107      	bne.n	800a39a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 feef 	bl	800b178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a8:	d10e      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b4:	2b80      	cmp	r3, #128	; 0x80
 800a3b6:	d107      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fee2 	bl	800b18c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d2:	2b40      	cmp	r3, #64	; 0x40
 800a3d4:	d10e      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e0:	2b40      	cmp	r3, #64	; 0x40
 800a3e2:	d107      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fa0a 	bl	800a808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	d10e      	bne.n	800a420 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f003 0320 	and.w	r3, r3, #32
 800a40c:	2b20      	cmp	r3, #32
 800a40e:	d107      	bne.n	800a420 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f06f 0220 	mvn.w	r2, #32
 800a418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fea2 	bl	800b164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a43e:	2302      	movs	r3, #2
 800a440:	e105      	b.n	800a64e <HAL_TIM_PWM_ConfigChannel+0x226>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b14      	cmp	r3, #20
 800a456:	f200 80f0 	bhi.w	800a63a <HAL_TIM_PWM_ConfigChannel+0x212>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a4b5 	.word	0x0800a4b5
 800a464:	0800a63b 	.word	0x0800a63b
 800a468:	0800a63b 	.word	0x0800a63b
 800a46c:	0800a63b 	.word	0x0800a63b
 800a470:	0800a4f5 	.word	0x0800a4f5
 800a474:	0800a63b 	.word	0x0800a63b
 800a478:	0800a63b 	.word	0x0800a63b
 800a47c:	0800a63b 	.word	0x0800a63b
 800a480:	0800a537 	.word	0x0800a537
 800a484:	0800a63b 	.word	0x0800a63b
 800a488:	0800a63b 	.word	0x0800a63b
 800a48c:	0800a63b 	.word	0x0800a63b
 800a490:	0800a577 	.word	0x0800a577
 800a494:	0800a63b 	.word	0x0800a63b
 800a498:	0800a63b 	.word	0x0800a63b
 800a49c:	0800a63b 	.word	0x0800a63b
 800a4a0:	0800a5b9 	.word	0x0800a5b9
 800a4a4:	0800a63b 	.word	0x0800a63b
 800a4a8:	0800a63b 	.word	0x0800a63b
 800a4ac:	0800a63b 	.word	0x0800a63b
 800a4b0:	0800a5f9 	.word	0x0800a5f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fa4e 	bl	800a95c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699a      	ldr	r2, [r3, #24]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f042 0208 	orr.w	r2, r2, #8
 800a4ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699a      	ldr	r2, [r3, #24]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 0204 	bic.w	r2, r2, #4
 800a4de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6999      	ldr	r1, [r3, #24]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	691a      	ldr	r2, [r3, #16]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	619a      	str	r2, [r3, #24]
      break;
 800a4f2:	e0a3      	b.n	800a63c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 faa0 	bl	800aa40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	699a      	ldr	r2, [r3, #24]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a50e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	699a      	ldr	r2, [r3, #24]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a51e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6999      	ldr	r1, [r3, #24]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	021a      	lsls	r2, r3, #8
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	619a      	str	r2, [r3, #24]
      break;
 800a534:	e082      	b.n	800a63c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 faf7 	bl	800ab30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69da      	ldr	r2, [r3, #28]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f042 0208 	orr.w	r2, r2, #8
 800a550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69da      	ldr	r2, [r3, #28]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0204 	bic.w	r2, r2, #4
 800a560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69d9      	ldr	r1, [r3, #28]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	691a      	ldr	r2, [r3, #16]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	61da      	str	r2, [r3, #28]
      break;
 800a574:	e062      	b.n	800a63c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fb4d 	bl	800ac1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	69da      	ldr	r2, [r3, #28]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69da      	ldr	r2, [r3, #28]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	69d9      	ldr	r1, [r3, #28]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	021a      	lsls	r2, r3, #8
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	61da      	str	r2, [r3, #28]
      break;
 800a5b6:	e041      	b.n	800a63c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68b9      	ldr	r1, [r7, #8]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fb84 	bl	800accc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0208 	orr.w	r2, r2, #8
 800a5d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f022 0204 	bic.w	r2, r2, #4
 800a5e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	691a      	ldr	r2, [r3, #16]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5f6:	e021      	b.n	800a63c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68b9      	ldr	r1, [r7, #8]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 fbb6 	bl	800ad70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	021a      	lsls	r2, r3, #8
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a638:	e000      	b.n	800a63c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a63a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop

0800a658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_TIM_ConfigClockSource+0x18>
 800a66c:	2302      	movs	r3, #2
 800a66e:	e0a6      	b.n	800a7be <HAL_TIM_ConfigClockSource+0x166>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4b4f      	ldr	r3, [pc, #316]	; (800a7c8 <HAL_TIM_ConfigClockSource+0x170>)
 800a68c:	4013      	ands	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a696:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b40      	cmp	r3, #64	; 0x40
 800a6a6:	d067      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x120>
 800a6a8:	2b40      	cmp	r3, #64	; 0x40
 800a6aa:	d80b      	bhi.n	800a6c4 <HAL_TIM_ConfigClockSource+0x6c>
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d073      	beq.n	800a798 <HAL_TIM_ConfigClockSource+0x140>
 800a6b0:	2b10      	cmp	r3, #16
 800a6b2:	d802      	bhi.n	800a6ba <HAL_TIM_ConfigClockSource+0x62>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d06f      	beq.n	800a798 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a6b8:	e078      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a6ba:	2b20      	cmp	r3, #32
 800a6bc:	d06c      	beq.n	800a798 <HAL_TIM_ConfigClockSource+0x140>
 800a6be:	2b30      	cmp	r3, #48	; 0x30
 800a6c0:	d06a      	beq.n	800a798 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a6c2:	e073      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a6c4:	2b70      	cmp	r3, #112	; 0x70
 800a6c6:	d00d      	beq.n	800a6e4 <HAL_TIM_ConfigClockSource+0x8c>
 800a6c8:	2b70      	cmp	r3, #112	; 0x70
 800a6ca:	d804      	bhi.n	800a6d6 <HAL_TIM_ConfigClockSource+0x7e>
 800a6cc:	2b50      	cmp	r3, #80	; 0x50
 800a6ce:	d033      	beq.n	800a738 <HAL_TIM_ConfigClockSource+0xe0>
 800a6d0:	2b60      	cmp	r3, #96	; 0x60
 800a6d2:	d041      	beq.n	800a758 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a6d4:	e06a      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6da:	d066      	beq.n	800a7aa <HAL_TIM_ConfigClockSource+0x152>
 800a6dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e0:	d017      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a6e2:	e063      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6818      	ldr	r0, [r3, #0]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	6899      	ldr	r1, [r3, #8]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f000 fc0a 	bl	800af0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a706:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	609a      	str	r2, [r3, #8]
      break;
 800a710:	e04c      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6899      	ldr	r1, [r3, #8]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f000 fbf3 	bl	800af0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689a      	ldr	r2, [r3, #8]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a734:	609a      	str	r2, [r3, #8]
      break;
 800a736:	e039      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	6859      	ldr	r1, [r3, #4]
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	461a      	mov	r2, r3
 800a746:	f000 fb67 	bl	800ae18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2150      	movs	r1, #80	; 0x50
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fbc0 	bl	800aed6 <TIM_ITRx_SetConfig>
      break;
 800a756:	e029      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	6859      	ldr	r1, [r3, #4]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	461a      	mov	r2, r3
 800a766:	f000 fb86 	bl	800ae76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2160      	movs	r1, #96	; 0x60
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fbb0 	bl	800aed6 <TIM_ITRx_SetConfig>
      break;
 800a776:	e019      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	6859      	ldr	r1, [r3, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	461a      	mov	r2, r3
 800a786:	f000 fb47 	bl	800ae18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2140      	movs	r1, #64	; 0x40
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fba0 	bl	800aed6 <TIM_ITRx_SetConfig>
      break;
 800a796:	e009      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f000 fb97 	bl	800aed6 <TIM_ITRx_SetConfig>
      break;
 800a7a8:	e000      	b.n	800a7ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a7aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	fffeff88 	.word	0xfffeff88

0800a7cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a40      	ldr	r2, [pc, #256]	; (800a930 <TIM_Base_SetConfig+0x114>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d013      	beq.n	800a85c <TIM_Base_SetConfig+0x40>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83a:	d00f      	beq.n	800a85c <TIM_Base_SetConfig+0x40>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a3d      	ldr	r2, [pc, #244]	; (800a934 <TIM_Base_SetConfig+0x118>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00b      	beq.n	800a85c <TIM_Base_SetConfig+0x40>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a3c      	ldr	r2, [pc, #240]	; (800a938 <TIM_Base_SetConfig+0x11c>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d007      	beq.n	800a85c <TIM_Base_SetConfig+0x40>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a3b      	ldr	r2, [pc, #236]	; (800a93c <TIM_Base_SetConfig+0x120>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d003      	beq.n	800a85c <TIM_Base_SetConfig+0x40>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a3a      	ldr	r2, [pc, #232]	; (800a940 <TIM_Base_SetConfig+0x124>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d108      	bne.n	800a86e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a2f      	ldr	r2, [pc, #188]	; (800a930 <TIM_Base_SetConfig+0x114>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d02b      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a87c:	d027      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a2c      	ldr	r2, [pc, #176]	; (800a934 <TIM_Base_SetConfig+0x118>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d023      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a2b      	ldr	r2, [pc, #172]	; (800a938 <TIM_Base_SetConfig+0x11c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d01f      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a2a      	ldr	r2, [pc, #168]	; (800a93c <TIM_Base_SetConfig+0x120>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d01b      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a29      	ldr	r2, [pc, #164]	; (800a940 <TIM_Base_SetConfig+0x124>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d017      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a28      	ldr	r2, [pc, #160]	; (800a944 <TIM_Base_SetConfig+0x128>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d013      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a27      	ldr	r2, [pc, #156]	; (800a948 <TIM_Base_SetConfig+0x12c>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00f      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	; (800a94c <TIM_Base_SetConfig+0x130>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d00b      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a25      	ldr	r2, [pc, #148]	; (800a950 <TIM_Base_SetConfig+0x134>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d007      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a24      	ldr	r2, [pc, #144]	; (800a954 <TIM_Base_SetConfig+0x138>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d003      	beq.n	800a8ce <TIM_Base_SetConfig+0xb2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a23      	ldr	r2, [pc, #140]	; (800a958 <TIM_Base_SetConfig+0x13c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d108      	bne.n	800a8e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a0a      	ldr	r2, [pc, #40]	; (800a930 <TIM_Base_SetConfig+0x114>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d003      	beq.n	800a914 <TIM_Base_SetConfig+0xf8>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a0c      	ldr	r2, [pc, #48]	; (800a940 <TIM_Base_SetConfig+0x124>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d103      	bne.n	800a91c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	691a      	ldr	r2, [r3, #16]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	615a      	str	r2, [r3, #20]
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	40010000 	.word	0x40010000
 800a934:	40000400 	.word	0x40000400
 800a938:	40000800 	.word	0x40000800
 800a93c:	40000c00 	.word	0x40000c00
 800a940:	40010400 	.word	0x40010400
 800a944:	40014000 	.word	0x40014000
 800a948:	40014400 	.word	0x40014400
 800a94c:	40014800 	.word	0x40014800
 800a950:	40001800 	.word	0x40001800
 800a954:	40001c00 	.word	0x40001c00
 800a958:	40002000 	.word	0x40002000

0800a95c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f023 0201 	bic.w	r2, r3, #1
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4b2b      	ldr	r3, [pc, #172]	; (800aa34 <TIM_OC1_SetConfig+0xd8>)
 800a988:	4013      	ands	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f023 0303 	bic.w	r3, r3, #3
 800a992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f023 0302 	bic.w	r3, r3, #2
 800a9a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a21      	ldr	r2, [pc, #132]	; (800aa38 <TIM_OC1_SetConfig+0xdc>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d003      	beq.n	800a9c0 <TIM_OC1_SetConfig+0x64>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a20      	ldr	r2, [pc, #128]	; (800aa3c <TIM_OC1_SetConfig+0xe0>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d10c      	bne.n	800a9da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f023 0308 	bic.w	r3, r3, #8
 800a9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f023 0304 	bic.w	r3, r3, #4
 800a9d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a16      	ldr	r2, [pc, #88]	; (800aa38 <TIM_OC1_SetConfig+0xdc>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d003      	beq.n	800a9ea <TIM_OC1_SetConfig+0x8e>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a15      	ldr	r2, [pc, #84]	; (800aa3c <TIM_OC1_SetConfig+0xe0>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d111      	bne.n	800aa0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	621a      	str	r2, [r3, #32]
}
 800aa28:	bf00      	nop
 800aa2a:	371c      	adds	r7, #28
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	fffeff8f 	.word	0xfffeff8f
 800aa38:	40010000 	.word	0x40010000
 800aa3c:	40010400 	.word	0x40010400

0800aa40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	f023 0210 	bic.w	r2, r3, #16
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	4b2e      	ldr	r3, [pc, #184]	; (800ab24 <TIM_OC2_SetConfig+0xe4>)
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	021b      	lsls	r3, r3, #8
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f023 0320 	bic.w	r3, r3, #32
 800aa8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a23      	ldr	r2, [pc, #140]	; (800ab28 <TIM_OC2_SetConfig+0xe8>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d003      	beq.n	800aaa8 <TIM_OC2_SetConfig+0x68>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a22      	ldr	r2, [pc, #136]	; (800ab2c <TIM_OC2_SetConfig+0xec>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d10d      	bne.n	800aac4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	011b      	lsls	r3, r3, #4
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a18      	ldr	r2, [pc, #96]	; (800ab28 <TIM_OC2_SetConfig+0xe8>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d003      	beq.n	800aad4 <TIM_OC2_SetConfig+0x94>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a17      	ldr	r2, [pc, #92]	; (800ab2c <TIM_OC2_SetConfig+0xec>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d113      	bne.n	800aafc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	621a      	str	r2, [r3, #32]
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	feff8fff 	.word	0xfeff8fff
 800ab28:	40010000 	.word	0x40010000
 800ab2c:	40010400 	.word	0x40010400

0800ab30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4b2d      	ldr	r3, [pc, #180]	; (800ac10 <TIM_OC3_SetConfig+0xe0>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f023 0303 	bic.w	r3, r3, #3
 800ab66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	021b      	lsls	r3, r3, #8
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a22      	ldr	r2, [pc, #136]	; (800ac14 <TIM_OC3_SetConfig+0xe4>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d003      	beq.n	800ab96 <TIM_OC3_SetConfig+0x66>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a21      	ldr	r2, [pc, #132]	; (800ac18 <TIM_OC3_SetConfig+0xe8>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d10d      	bne.n	800abb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	021b      	lsls	r3, r3, #8
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a17      	ldr	r2, [pc, #92]	; (800ac14 <TIM_OC3_SetConfig+0xe4>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d003      	beq.n	800abc2 <TIM_OC3_SetConfig+0x92>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a16      	ldr	r2, [pc, #88]	; (800ac18 <TIM_OC3_SetConfig+0xe8>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d113      	bne.n	800abea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	621a      	str	r2, [r3, #32]
}
 800ac04:	bf00      	nop
 800ac06:	371c      	adds	r7, #28
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	fffeff8f 	.word	0xfffeff8f
 800ac14:	40010000 	.word	0x40010000
 800ac18:	40010400 	.word	0x40010400

0800ac1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	4b1e      	ldr	r3, [pc, #120]	; (800acc0 <TIM_OC4_SetConfig+0xa4>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	021b      	lsls	r3, r3, #8
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	031b      	lsls	r3, r3, #12
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a13      	ldr	r2, [pc, #76]	; (800acc4 <TIM_OC4_SetConfig+0xa8>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_OC4_SetConfig+0x68>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a12      	ldr	r2, [pc, #72]	; (800acc8 <TIM_OC4_SetConfig+0xac>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d109      	bne.n	800ac98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	019b      	lsls	r3, r3, #6
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	621a      	str	r2, [r3, #32]
}
 800acb2:	bf00      	nop
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	feff8fff 	.word	0xfeff8fff
 800acc4:	40010000 	.word	0x40010000
 800acc8:	40010400 	.word	0x40010400

0800accc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800accc:	b480      	push	{r7}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4b1b      	ldr	r3, [pc, #108]	; (800ad64 <TIM_OC5_SetConfig+0x98>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	041b      	lsls	r3, r3, #16
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a12      	ldr	r2, [pc, #72]	; (800ad68 <TIM_OC5_SetConfig+0x9c>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d003      	beq.n	800ad2a <TIM_OC5_SetConfig+0x5e>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a11      	ldr	r2, [pc, #68]	; (800ad6c <TIM_OC5_SetConfig+0xa0>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d109      	bne.n	800ad3e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	021b      	lsls	r3, r3, #8
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	621a      	str	r2, [r3, #32]
}
 800ad58:	bf00      	nop
 800ad5a:	371c      	adds	r7, #28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	fffeff8f 	.word	0xfffeff8f
 800ad68:	40010000 	.word	0x40010000
 800ad6c:	40010400 	.word	0x40010400

0800ad70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4b1c      	ldr	r3, [pc, #112]	; (800ae0c <TIM_OC6_SetConfig+0x9c>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	051b      	lsls	r3, r3, #20
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a13      	ldr	r2, [pc, #76]	; (800ae10 <TIM_OC6_SetConfig+0xa0>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d003      	beq.n	800add0 <TIM_OC6_SetConfig+0x60>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a12      	ldr	r2, [pc, #72]	; (800ae14 <TIM_OC6_SetConfig+0xa4>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d109      	bne.n	800ade4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800add6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	029b      	lsls	r3, r3, #10
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	621a      	str	r2, [r3, #32]
}
 800adfe:	bf00      	nop
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	feff8fff 	.word	0xfeff8fff
 800ae10:	40010000 	.word	0x40010000
 800ae14:	40010400 	.word	0x40010400

0800ae18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	f023 0201 	bic.w	r2, r3, #1
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f023 030a 	bic.w	r3, r3, #10
 800ae54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	621a      	str	r2, [r3, #32]
}
 800ae6a:	bf00      	nop
 800ae6c:	371c      	adds	r7, #28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b087      	sub	sp, #28
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	f023 0210 	bic.w	r2, r3, #16
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	031b      	lsls	r3, r3, #12
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aeb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	011b      	lsls	r3, r3, #4
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	621a      	str	r2, [r3, #32]
}
 800aeca:	bf00      	nop
 800aecc:	371c      	adds	r7, #28
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	f043 0307 	orr.w	r3, r3, #7
 800aef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	609a      	str	r2, [r3, #8]
}
 800af00:	bf00      	nop
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	021a      	lsls	r2, r3, #8
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	431a      	orrs	r2, r3
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	4313      	orrs	r3, r2
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	4313      	orrs	r3, r2
 800af38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	609a      	str	r2, [r3, #8]
}
 800af40:	bf00      	nop
 800af42:	371c      	adds	r7, #28
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d101      	bne.n	800af64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af60:	2302      	movs	r3, #2
 800af62:	e06d      	b.n	800b040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2202      	movs	r2, #2
 800af70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a30      	ldr	r2, [pc, #192]	; (800b04c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d004      	beq.n	800af98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a2f      	ldr	r2, [pc, #188]	; (800b050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d108      	bne.n	800afaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	4313      	orrs	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a20      	ldr	r2, [pc, #128]	; (800b04c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d022      	beq.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afd6:	d01d      	beq.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a1d      	ldr	r2, [pc, #116]	; (800b054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d018      	beq.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a1c      	ldr	r2, [pc, #112]	; (800b058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d013      	beq.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a1a      	ldr	r2, [pc, #104]	; (800b05c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d00e      	beq.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a15      	ldr	r2, [pc, #84]	; (800b050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d009      	beq.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a16      	ldr	r2, [pc, #88]	; (800b060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d004      	beq.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a15      	ldr	r2, [pc, #84]	; (800b064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d10c      	bne.n	800b02e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b01a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	4313      	orrs	r3, r2
 800b024:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	40010000 	.word	0x40010000
 800b050:	40010400 	.word	0x40010400
 800b054:	40000400 	.word	0x40000400
 800b058:	40000800 	.word	0x40000800
 800b05c:	40000c00 	.word	0x40000c00
 800b060:	40014000 	.word	0x40014000
 800b064:	40001800 	.word	0x40001800

0800b068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d101      	bne.n	800b084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b080:	2302      	movs	r3, #2
 800b082:	e065      	b.n	800b150 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	041b      	lsls	r3, r3, #16
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a16      	ldr	r2, [pc, #88]	; (800b15c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d004      	beq.n	800b112 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a14      	ldr	r2, [pc, #80]	; (800b160 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d115      	bne.n	800b13e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	051b      	lsls	r3, r3, #20
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	40010000 	.word	0x40010000
 800b160:	40010400 	.word	0x40010400

0800b164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e040      	b.n	800b234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d106      	bne.n	800b1c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f8 f832 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2224      	movs	r2, #36	; 0x24
 800b1cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f022 0201 	bic.w	r2, r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f82c 	bl	800b23c <UART_SetConfig>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d101      	bne.n	800b1ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e022      	b.n	800b234 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 faca 	bl	800b790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b20a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689a      	ldr	r2, [r3, #8]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b21a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f042 0201 	orr.w	r2, r2, #1
 800b22a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fb51 	bl	800b8d4 <UART_CheckIdleState>
 800b232:	4603      	mov	r3, r0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b244:	2300      	movs	r3, #0
 800b246:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	4313      	orrs	r3, r2
 800b262:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	4bb1      	ldr	r3, [pc, #708]	; (800b530 <UART_SetConfig+0x2f4>)
 800b26c:	4013      	ands	r3, r2
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	6812      	ldr	r2, [r2, #0]
 800b272:	6939      	ldr	r1, [r7, #16]
 800b274:	430b      	orrs	r3, r1
 800b276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68da      	ldr	r2, [r3, #12]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	430a      	orrs	r2, r1
 800b28c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a9f      	ldr	r2, [pc, #636]	; (800b534 <UART_SetConfig+0x2f8>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d121      	bne.n	800b300 <UART_SetConfig+0xc4>
 800b2bc:	4b9e      	ldr	r3, [pc, #632]	; (800b538 <UART_SetConfig+0x2fc>)
 800b2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d816      	bhi.n	800b2f8 <UART_SetConfig+0xbc>
 800b2ca:	a201      	add	r2, pc, #4	; (adr r2, 800b2d0 <UART_SetConfig+0x94>)
 800b2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d0:	0800b2e1 	.word	0x0800b2e1
 800b2d4:	0800b2ed 	.word	0x0800b2ed
 800b2d8:	0800b2e7 	.word	0x0800b2e7
 800b2dc:	0800b2f3 	.word	0x0800b2f3
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	77fb      	strb	r3, [r7, #31]
 800b2e4:	e151      	b.n	800b58a <UART_SetConfig+0x34e>
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	77fb      	strb	r3, [r7, #31]
 800b2ea:	e14e      	b.n	800b58a <UART_SetConfig+0x34e>
 800b2ec:	2304      	movs	r3, #4
 800b2ee:	77fb      	strb	r3, [r7, #31]
 800b2f0:	e14b      	b.n	800b58a <UART_SetConfig+0x34e>
 800b2f2:	2308      	movs	r3, #8
 800b2f4:	77fb      	strb	r3, [r7, #31]
 800b2f6:	e148      	b.n	800b58a <UART_SetConfig+0x34e>
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	77fb      	strb	r3, [r7, #31]
 800b2fc:	bf00      	nop
 800b2fe:	e144      	b.n	800b58a <UART_SetConfig+0x34e>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a8d      	ldr	r2, [pc, #564]	; (800b53c <UART_SetConfig+0x300>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d134      	bne.n	800b374 <UART_SetConfig+0x138>
 800b30a:	4b8b      	ldr	r3, [pc, #556]	; (800b538 <UART_SetConfig+0x2fc>)
 800b30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b310:	f003 030c 	and.w	r3, r3, #12
 800b314:	2b0c      	cmp	r3, #12
 800b316:	d829      	bhi.n	800b36c <UART_SetConfig+0x130>
 800b318:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <UART_SetConfig+0xe4>)
 800b31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31e:	bf00      	nop
 800b320:	0800b355 	.word	0x0800b355
 800b324:	0800b36d 	.word	0x0800b36d
 800b328:	0800b36d 	.word	0x0800b36d
 800b32c:	0800b36d 	.word	0x0800b36d
 800b330:	0800b361 	.word	0x0800b361
 800b334:	0800b36d 	.word	0x0800b36d
 800b338:	0800b36d 	.word	0x0800b36d
 800b33c:	0800b36d 	.word	0x0800b36d
 800b340:	0800b35b 	.word	0x0800b35b
 800b344:	0800b36d 	.word	0x0800b36d
 800b348:	0800b36d 	.word	0x0800b36d
 800b34c:	0800b36d 	.word	0x0800b36d
 800b350:	0800b367 	.word	0x0800b367
 800b354:	2300      	movs	r3, #0
 800b356:	77fb      	strb	r3, [r7, #31]
 800b358:	e117      	b.n	800b58a <UART_SetConfig+0x34e>
 800b35a:	2302      	movs	r3, #2
 800b35c:	77fb      	strb	r3, [r7, #31]
 800b35e:	e114      	b.n	800b58a <UART_SetConfig+0x34e>
 800b360:	2304      	movs	r3, #4
 800b362:	77fb      	strb	r3, [r7, #31]
 800b364:	e111      	b.n	800b58a <UART_SetConfig+0x34e>
 800b366:	2308      	movs	r3, #8
 800b368:	77fb      	strb	r3, [r7, #31]
 800b36a:	e10e      	b.n	800b58a <UART_SetConfig+0x34e>
 800b36c:	2310      	movs	r3, #16
 800b36e:	77fb      	strb	r3, [r7, #31]
 800b370:	bf00      	nop
 800b372:	e10a      	b.n	800b58a <UART_SetConfig+0x34e>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a71      	ldr	r2, [pc, #452]	; (800b540 <UART_SetConfig+0x304>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d120      	bne.n	800b3c0 <UART_SetConfig+0x184>
 800b37e:	4b6e      	ldr	r3, [pc, #440]	; (800b538 <UART_SetConfig+0x2fc>)
 800b380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b384:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b388:	2b10      	cmp	r3, #16
 800b38a:	d00f      	beq.n	800b3ac <UART_SetConfig+0x170>
 800b38c:	2b10      	cmp	r3, #16
 800b38e:	d802      	bhi.n	800b396 <UART_SetConfig+0x15a>
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <UART_SetConfig+0x164>
 800b394:	e010      	b.n	800b3b8 <UART_SetConfig+0x17c>
 800b396:	2b20      	cmp	r3, #32
 800b398:	d005      	beq.n	800b3a6 <UART_SetConfig+0x16a>
 800b39a:	2b30      	cmp	r3, #48	; 0x30
 800b39c:	d009      	beq.n	800b3b2 <UART_SetConfig+0x176>
 800b39e:	e00b      	b.n	800b3b8 <UART_SetConfig+0x17c>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	77fb      	strb	r3, [r7, #31]
 800b3a4:	e0f1      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	77fb      	strb	r3, [r7, #31]
 800b3aa:	e0ee      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3ac:	2304      	movs	r3, #4
 800b3ae:	77fb      	strb	r3, [r7, #31]
 800b3b0:	e0eb      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3b2:	2308      	movs	r3, #8
 800b3b4:	77fb      	strb	r3, [r7, #31]
 800b3b6:	e0e8      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	77fb      	strb	r3, [r7, #31]
 800b3bc:	bf00      	nop
 800b3be:	e0e4      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a5f      	ldr	r2, [pc, #380]	; (800b544 <UART_SetConfig+0x308>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d120      	bne.n	800b40c <UART_SetConfig+0x1d0>
 800b3ca:	4b5b      	ldr	r3, [pc, #364]	; (800b538 <UART_SetConfig+0x2fc>)
 800b3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b3d4:	2b40      	cmp	r3, #64	; 0x40
 800b3d6:	d00f      	beq.n	800b3f8 <UART_SetConfig+0x1bc>
 800b3d8:	2b40      	cmp	r3, #64	; 0x40
 800b3da:	d802      	bhi.n	800b3e2 <UART_SetConfig+0x1a6>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d005      	beq.n	800b3ec <UART_SetConfig+0x1b0>
 800b3e0:	e010      	b.n	800b404 <UART_SetConfig+0x1c8>
 800b3e2:	2b80      	cmp	r3, #128	; 0x80
 800b3e4:	d005      	beq.n	800b3f2 <UART_SetConfig+0x1b6>
 800b3e6:	2bc0      	cmp	r3, #192	; 0xc0
 800b3e8:	d009      	beq.n	800b3fe <UART_SetConfig+0x1c2>
 800b3ea:	e00b      	b.n	800b404 <UART_SetConfig+0x1c8>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	77fb      	strb	r3, [r7, #31]
 800b3f0:	e0cb      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	77fb      	strb	r3, [r7, #31]
 800b3f6:	e0c8      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	77fb      	strb	r3, [r7, #31]
 800b3fc:	e0c5      	b.n	800b58a <UART_SetConfig+0x34e>
 800b3fe:	2308      	movs	r3, #8
 800b400:	77fb      	strb	r3, [r7, #31]
 800b402:	e0c2      	b.n	800b58a <UART_SetConfig+0x34e>
 800b404:	2310      	movs	r3, #16
 800b406:	77fb      	strb	r3, [r7, #31]
 800b408:	bf00      	nop
 800b40a:	e0be      	b.n	800b58a <UART_SetConfig+0x34e>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a4d      	ldr	r2, [pc, #308]	; (800b548 <UART_SetConfig+0x30c>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d124      	bne.n	800b460 <UART_SetConfig+0x224>
 800b416:	4b48      	ldr	r3, [pc, #288]	; (800b538 <UART_SetConfig+0x2fc>)
 800b418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b424:	d012      	beq.n	800b44c <UART_SetConfig+0x210>
 800b426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b42a:	d802      	bhi.n	800b432 <UART_SetConfig+0x1f6>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d007      	beq.n	800b440 <UART_SetConfig+0x204>
 800b430:	e012      	b.n	800b458 <UART_SetConfig+0x21c>
 800b432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b436:	d006      	beq.n	800b446 <UART_SetConfig+0x20a>
 800b438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b43c:	d009      	beq.n	800b452 <UART_SetConfig+0x216>
 800b43e:	e00b      	b.n	800b458 <UART_SetConfig+0x21c>
 800b440:	2300      	movs	r3, #0
 800b442:	77fb      	strb	r3, [r7, #31]
 800b444:	e0a1      	b.n	800b58a <UART_SetConfig+0x34e>
 800b446:	2302      	movs	r3, #2
 800b448:	77fb      	strb	r3, [r7, #31]
 800b44a:	e09e      	b.n	800b58a <UART_SetConfig+0x34e>
 800b44c:	2304      	movs	r3, #4
 800b44e:	77fb      	strb	r3, [r7, #31]
 800b450:	e09b      	b.n	800b58a <UART_SetConfig+0x34e>
 800b452:	2308      	movs	r3, #8
 800b454:	77fb      	strb	r3, [r7, #31]
 800b456:	e098      	b.n	800b58a <UART_SetConfig+0x34e>
 800b458:	2310      	movs	r3, #16
 800b45a:	77fb      	strb	r3, [r7, #31]
 800b45c:	bf00      	nop
 800b45e:	e094      	b.n	800b58a <UART_SetConfig+0x34e>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a39      	ldr	r2, [pc, #228]	; (800b54c <UART_SetConfig+0x310>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d124      	bne.n	800b4b4 <UART_SetConfig+0x278>
 800b46a:	4b33      	ldr	r3, [pc, #204]	; (800b538 <UART_SetConfig+0x2fc>)
 800b46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b470:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b478:	d012      	beq.n	800b4a0 <UART_SetConfig+0x264>
 800b47a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b47e:	d802      	bhi.n	800b486 <UART_SetConfig+0x24a>
 800b480:	2b00      	cmp	r3, #0
 800b482:	d007      	beq.n	800b494 <UART_SetConfig+0x258>
 800b484:	e012      	b.n	800b4ac <UART_SetConfig+0x270>
 800b486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b48a:	d006      	beq.n	800b49a <UART_SetConfig+0x25e>
 800b48c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b490:	d009      	beq.n	800b4a6 <UART_SetConfig+0x26a>
 800b492:	e00b      	b.n	800b4ac <UART_SetConfig+0x270>
 800b494:	2301      	movs	r3, #1
 800b496:	77fb      	strb	r3, [r7, #31]
 800b498:	e077      	b.n	800b58a <UART_SetConfig+0x34e>
 800b49a:	2302      	movs	r3, #2
 800b49c:	77fb      	strb	r3, [r7, #31]
 800b49e:	e074      	b.n	800b58a <UART_SetConfig+0x34e>
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	77fb      	strb	r3, [r7, #31]
 800b4a4:	e071      	b.n	800b58a <UART_SetConfig+0x34e>
 800b4a6:	2308      	movs	r3, #8
 800b4a8:	77fb      	strb	r3, [r7, #31]
 800b4aa:	e06e      	b.n	800b58a <UART_SetConfig+0x34e>
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	77fb      	strb	r3, [r7, #31]
 800b4b0:	bf00      	nop
 800b4b2:	e06a      	b.n	800b58a <UART_SetConfig+0x34e>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a25      	ldr	r2, [pc, #148]	; (800b550 <UART_SetConfig+0x314>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d124      	bne.n	800b508 <UART_SetConfig+0x2cc>
 800b4be:	4b1e      	ldr	r3, [pc, #120]	; (800b538 <UART_SetConfig+0x2fc>)
 800b4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4cc:	d012      	beq.n	800b4f4 <UART_SetConfig+0x2b8>
 800b4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4d2:	d802      	bhi.n	800b4da <UART_SetConfig+0x29e>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d007      	beq.n	800b4e8 <UART_SetConfig+0x2ac>
 800b4d8:	e012      	b.n	800b500 <UART_SetConfig+0x2c4>
 800b4da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4de:	d006      	beq.n	800b4ee <UART_SetConfig+0x2b2>
 800b4e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4e4:	d009      	beq.n	800b4fa <UART_SetConfig+0x2be>
 800b4e6:	e00b      	b.n	800b500 <UART_SetConfig+0x2c4>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	77fb      	strb	r3, [r7, #31]
 800b4ec:	e04d      	b.n	800b58a <UART_SetConfig+0x34e>
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	77fb      	strb	r3, [r7, #31]
 800b4f2:	e04a      	b.n	800b58a <UART_SetConfig+0x34e>
 800b4f4:	2304      	movs	r3, #4
 800b4f6:	77fb      	strb	r3, [r7, #31]
 800b4f8:	e047      	b.n	800b58a <UART_SetConfig+0x34e>
 800b4fa:	2308      	movs	r3, #8
 800b4fc:	77fb      	strb	r3, [r7, #31]
 800b4fe:	e044      	b.n	800b58a <UART_SetConfig+0x34e>
 800b500:	2310      	movs	r3, #16
 800b502:	77fb      	strb	r3, [r7, #31]
 800b504:	bf00      	nop
 800b506:	e040      	b.n	800b58a <UART_SetConfig+0x34e>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a11      	ldr	r2, [pc, #68]	; (800b554 <UART_SetConfig+0x318>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d139      	bne.n	800b586 <UART_SetConfig+0x34a>
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <UART_SetConfig+0x2fc>)
 800b514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b51c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b520:	d027      	beq.n	800b572 <UART_SetConfig+0x336>
 800b522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b526:	d817      	bhi.n	800b558 <UART_SetConfig+0x31c>
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d01c      	beq.n	800b566 <UART_SetConfig+0x32a>
 800b52c:	e027      	b.n	800b57e <UART_SetConfig+0x342>
 800b52e:	bf00      	nop
 800b530:	efff69f3 	.word	0xefff69f3
 800b534:	40011000 	.word	0x40011000
 800b538:	40023800 	.word	0x40023800
 800b53c:	40004400 	.word	0x40004400
 800b540:	40004800 	.word	0x40004800
 800b544:	40004c00 	.word	0x40004c00
 800b548:	40005000 	.word	0x40005000
 800b54c:	40011400 	.word	0x40011400
 800b550:	40007800 	.word	0x40007800
 800b554:	40007c00 	.word	0x40007c00
 800b558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b55c:	d006      	beq.n	800b56c <UART_SetConfig+0x330>
 800b55e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b562:	d009      	beq.n	800b578 <UART_SetConfig+0x33c>
 800b564:	e00b      	b.n	800b57e <UART_SetConfig+0x342>
 800b566:	2300      	movs	r3, #0
 800b568:	77fb      	strb	r3, [r7, #31]
 800b56a:	e00e      	b.n	800b58a <UART_SetConfig+0x34e>
 800b56c:	2302      	movs	r3, #2
 800b56e:	77fb      	strb	r3, [r7, #31]
 800b570:	e00b      	b.n	800b58a <UART_SetConfig+0x34e>
 800b572:	2304      	movs	r3, #4
 800b574:	77fb      	strb	r3, [r7, #31]
 800b576:	e008      	b.n	800b58a <UART_SetConfig+0x34e>
 800b578:	2308      	movs	r3, #8
 800b57a:	77fb      	strb	r3, [r7, #31]
 800b57c:	e005      	b.n	800b58a <UART_SetConfig+0x34e>
 800b57e:	2310      	movs	r3, #16
 800b580:	77fb      	strb	r3, [r7, #31]
 800b582:	bf00      	nop
 800b584:	e001      	b.n	800b58a <UART_SetConfig+0x34e>
 800b586:	2310      	movs	r3, #16
 800b588:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b592:	d17f      	bne.n	800b694 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b594:	7ffb      	ldrb	r3, [r7, #31]
 800b596:	2b08      	cmp	r3, #8
 800b598:	d85c      	bhi.n	800b654 <UART_SetConfig+0x418>
 800b59a:	a201      	add	r2, pc, #4	; (adr r2, 800b5a0 <UART_SetConfig+0x364>)
 800b59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a0:	0800b5c5 	.word	0x0800b5c5
 800b5a4:	0800b5e5 	.word	0x0800b5e5
 800b5a8:	0800b605 	.word	0x0800b605
 800b5ac:	0800b655 	.word	0x0800b655
 800b5b0:	0800b61d 	.word	0x0800b61d
 800b5b4:	0800b655 	.word	0x0800b655
 800b5b8:	0800b655 	.word	0x0800b655
 800b5bc:	0800b655 	.word	0x0800b655
 800b5c0:	0800b63d 	.word	0x0800b63d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5c4:	f7fc f8d0 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 800b5c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	005a      	lsls	r2, r3, #1
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	085b      	lsrs	r3, r3, #1
 800b5d4:	441a      	add	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	61bb      	str	r3, [r7, #24]
        break;
 800b5e2:	e03a      	b.n	800b65a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5e4:	f7fc f8d4 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 800b5e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	005a      	lsls	r2, r3, #1
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	085b      	lsrs	r3, r3, #1
 800b5f4:	441a      	add	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	61bb      	str	r3, [r7, #24]
        break;
 800b602:	e02a      	b.n	800b65a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	085a      	lsrs	r2, r3, #1
 800b60a:	4b5f      	ldr	r3, [pc, #380]	; (800b788 <UART_SetConfig+0x54c>)
 800b60c:	4413      	add	r3, r2
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	6852      	ldr	r2, [r2, #4]
 800b612:	fbb3 f3f2 	udiv	r3, r3, r2
 800b616:	b29b      	uxth	r3, r3
 800b618:	61bb      	str	r3, [r7, #24]
        break;
 800b61a:	e01e      	b.n	800b65a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b61c:	f7fb ffe6 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 800b620:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	005a      	lsls	r2, r3, #1
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	085b      	lsrs	r3, r3, #1
 800b62c:	441a      	add	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	fbb2 f3f3 	udiv	r3, r2, r3
 800b636:	b29b      	uxth	r3, r3
 800b638:	61bb      	str	r3, [r7, #24]
        break;
 800b63a:	e00e      	b.n	800b65a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	085b      	lsrs	r3, r3, #1
 800b642:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64e:	b29b      	uxth	r3, r3
 800b650:	61bb      	str	r3, [r7, #24]
        break;
 800b652:	e002      	b.n	800b65a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
        break;
 800b658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	2b0f      	cmp	r3, #15
 800b65e:	d916      	bls.n	800b68e <UART_SetConfig+0x452>
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b666:	d212      	bcs.n	800b68e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	f023 030f 	bic.w	r3, r3, #15
 800b670:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	085b      	lsrs	r3, r3, #1
 800b676:	b29b      	uxth	r3, r3
 800b678:	f003 0307 	and.w	r3, r3, #7
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	897b      	ldrh	r3, [r7, #10]
 800b680:	4313      	orrs	r3, r2
 800b682:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	897a      	ldrh	r2, [r7, #10]
 800b68a:	60da      	str	r2, [r3, #12]
 800b68c:	e070      	b.n	800b770 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	75fb      	strb	r3, [r7, #23]
 800b692:	e06d      	b.n	800b770 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b694:	7ffb      	ldrb	r3, [r7, #31]
 800b696:	2b08      	cmp	r3, #8
 800b698:	d859      	bhi.n	800b74e <UART_SetConfig+0x512>
 800b69a:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <UART_SetConfig+0x464>)
 800b69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a0:	0800b6c5 	.word	0x0800b6c5
 800b6a4:	0800b6e3 	.word	0x0800b6e3
 800b6a8:	0800b701 	.word	0x0800b701
 800b6ac:	0800b74f 	.word	0x0800b74f
 800b6b0:	0800b719 	.word	0x0800b719
 800b6b4:	0800b74f 	.word	0x0800b74f
 800b6b8:	0800b74f 	.word	0x0800b74f
 800b6bc:	0800b74f 	.word	0x0800b74f
 800b6c0:	0800b737 	.word	0x0800b737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6c4:	f7fc f850 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 800b6c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	085a      	lsrs	r2, r3, #1
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	441a      	add	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	61bb      	str	r3, [r7, #24]
        break;
 800b6e0:	e038      	b.n	800b754 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6e2:	f7fc f855 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 800b6e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	085a      	lsrs	r2, r3, #1
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	441a      	add	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	61bb      	str	r3, [r7, #24]
        break;
 800b6fe:	e029      	b.n	800b754 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	085a      	lsrs	r2, r3, #1
 800b706:	4b21      	ldr	r3, [pc, #132]	; (800b78c <UART_SetConfig+0x550>)
 800b708:	4413      	add	r3, r2
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	6852      	ldr	r2, [r2, #4]
 800b70e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b712:	b29b      	uxth	r3, r3
 800b714:	61bb      	str	r3, [r7, #24]
        break;
 800b716:	e01d      	b.n	800b754 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b718:	f7fb ff68 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 800b71c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	085a      	lsrs	r2, r3, #1
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	441a      	add	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b730:	b29b      	uxth	r3, r3
 800b732:	61bb      	str	r3, [r7, #24]
        break;
 800b734:	e00e      	b.n	800b754 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	085b      	lsrs	r3, r3, #1
 800b73c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	fbb2 f3f3 	udiv	r3, r2, r3
 800b748:	b29b      	uxth	r3, r3
 800b74a:	61bb      	str	r3, [r7, #24]
        break;
 800b74c:	e002      	b.n	800b754 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	75fb      	strb	r3, [r7, #23]
        break;
 800b752:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	2b0f      	cmp	r3, #15
 800b758:	d908      	bls.n	800b76c <UART_SetConfig+0x530>
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b760:	d204      	bcs.n	800b76c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	60da      	str	r2, [r3, #12]
 800b76a:	e001      	b.n	800b770 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3720      	adds	r7, #32
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	01e84800 	.word	0x01e84800
 800b78c:	00f42400 	.word	0x00f42400

0800b790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00a      	beq.n	800b7ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00a      	beq.n	800b7dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00a      	beq.n	800b7fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b802:	f003 0308 	and.w	r3, r3, #8
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00a      	beq.n	800b820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	430a      	orrs	r2, r1
 800b81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b824:	f003 0310 	and.w	r3, r3, #16
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00a      	beq.n	800b842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	430a      	orrs	r2, r1
 800b840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	f003 0320 	and.w	r3, r3, #32
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d01a      	beq.n	800b8a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b88e:	d10a      	bne.n	800b8a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00a      	beq.n	800b8c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	605a      	str	r2, [r3, #4]
  }
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b8e2:	f7f7 fff1 	bl	80038c8 <HAL_GetTick>
 800b8e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0308 	and.w	r3, r3, #8
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	d10e      	bne.n	800b914 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f814 	bl	800b932 <UART_WaitOnFlagUntilTimeout>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e00a      	b.n	800b92a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2220      	movs	r2, #32
 800b918:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2220      	movs	r2, #32
 800b91e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	603b      	str	r3, [r7, #0]
 800b93e:	4613      	mov	r3, r2
 800b940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b942:	e05d      	b.n	800ba00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94a:	d059      	beq.n	800ba00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b94c:	f7f7 ffbc 	bl	80038c8 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d302      	bcc.n	800b962 <UART_WaitOnFlagUntilTimeout+0x30>
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d11b      	bne.n	800b99a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b970:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689a      	ldr	r2, [r3, #8]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f022 0201 	bic.w	r2, r2, #1
 800b980:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2220      	movs	r2, #32
 800b986:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2220      	movs	r2, #32
 800b98c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e042      	b.n	800ba20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 0304 	and.w	r3, r3, #4
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d02b      	beq.n	800ba00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b6:	d123      	bne.n	800ba00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0201 	bic.w	r2, r2, #1
 800b9e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2220      	movs	r2, #32
 800b9f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e00f      	b.n	800ba20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	69da      	ldr	r2, [r3, #28]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4013      	ands	r3, r2
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	bf0c      	ite	eq
 800ba10:	2301      	moveq	r3, #1
 800ba12:	2300      	movne	r3, #0
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d092      	beq.n	800b944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d027      	beq.n	800ba92 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	4b2f      	ldr	r3, [pc, #188]	; (800bb08 <FMC_SDRAM_Init+0xe0>)
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba58:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ba5e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ba64:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ba6a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ba70:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ba76:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ba7c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ba82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	e032      	b.n	800baf8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba9e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800baa8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800baae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	4b12      	ldr	r3, [pc, #72]	; (800bb08 <FMC_SDRAM_Init+0xe0>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bacc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bad2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bad8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bade:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bae4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	4313      	orrs	r3, r2
 800baea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	ffff8000 	.word	0xffff8000

0800bb0c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d02e      	beq.n	800bb84 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb32:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb42:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb4c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb56:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb60:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb6a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb74:	4313      	orrs	r3, r2
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	609a      	str	r2, [r3, #8]
 800bb82:	e039      	b.n	800bbf8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	4b1e      	ldr	r3, [pc, #120]	; (800bc08 <FMC_SDRAM_Timing_Init+0xfc>)
 800bb8e:	4013      	ands	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bba2:	4313      	orrs	r3, r2
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bbb6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbc6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbd0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbda:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	ff0f0fff 	.word	0xff0f0fff

0800bc0c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bc24:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bc2e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bc36:	4313      	orrs	r3, r2
 800bc38:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	695a      	ldr	r2, [r3, #20]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	431a      	orrs	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc74:	b084      	sub	sp, #16
 800bc76:	b480      	push	{r7}
 800bc78:	b085      	sub	sp, #20
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	f107 001c 	add.w	r0, r7, #28
 800bc82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bc8a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bc8c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bc8e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bc92:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bc96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bc9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bc9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <SDMMC_Init+0x54>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	431a      	orrs	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	b004      	add	sp, #16
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	ffff8100 	.word	0xffff8100

0800bccc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bcf4:	2002      	movs	r0, #2
 800bcf6:	f7f7 fdf3 	bl	80038e0 <HAL_Delay>
  
  return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0303 	and.w	r3, r3, #3
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bd44:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bd4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	4b06      	ldr	r3, [pc, #24]	; (800bd70 <SDMMC_SendCommand+0x50>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	fffff000 	.word	0xfffff000

0800bd74 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	b2db      	uxtb	r3, r3
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3314      	adds	r3, #20
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	4413      	add	r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
}  
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bdda:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bde0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bde6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0

}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b088      	sub	sp, #32
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800be1a:	2310      	movs	r3, #16
 800be1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be1e:	2340      	movs	r3, #64	; 0x40
 800be20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be2c:	f107 0308 	add.w	r3, r7, #8
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff ff74 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800be38:	f241 3288 	movw	r2, #5000	; 0x1388
 800be3c:	2110      	movs	r1, #16
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa42 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800be44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be46:	69fb      	ldr	r3, [r7, #28]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3720      	adds	r7, #32
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be5e:	2311      	movs	r3, #17
 800be60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be62:	2340      	movs	r3, #64	; 0x40
 800be64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be70:	f107 0308 	add.w	r3, r7, #8
 800be74:	4619      	mov	r1, r3
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff ff52 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be80:	2111      	movs	r1, #17
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa20 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800be88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be8a:	69fb      	ldr	r3, [r7, #28]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3720      	adds	r7, #32
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bea2:	2312      	movs	r3, #18
 800bea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bea6:	2340      	movs	r3, #64	; 0x40
 800bea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb4:	f107 0308 	add.w	r3, r7, #8
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff ff30 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bec0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec4:	2112      	movs	r1, #18
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f9fe 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800becc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bece:	69fb      	ldr	r3, [r7, #28]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bee6:	2318      	movs	r3, #24
 800bee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beea:	2340      	movs	r3, #64	; 0x40
 800beec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beee:	2300      	movs	r3, #0
 800bef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef8:	f107 0308 	add.w	r3, r7, #8
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff ff0e 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf04:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf08:	2118      	movs	r1, #24
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f9dc 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800bf10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf12:	69fb      	ldr	r3, [r7, #28]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3720      	adds	r7, #32
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bf2a:	2319      	movs	r3, #25
 800bf2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf2e:	2340      	movs	r3, #64	; 0x40
 800bf30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf32:	2300      	movs	r3, #0
 800bf34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf3c:	f107 0308 	add.w	r3, r7, #8
 800bf40:	4619      	mov	r1, r3
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff feec 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf48:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf4c:	2119      	movs	r1, #25
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f9ba 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800bf54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf56:	69fb      	ldr	r3, [r7, #28]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3720      	adds	r7, #32
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf6c:	230c      	movs	r3, #12
 800bf6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf70:	2340      	movs	r3, #64	; 0x40
 800bf72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf74:	2300      	movs	r3, #0
 800bf76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf7e:	f107 0308 	add.w	r3, r7, #8
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff fecb 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf8a:	4a05      	ldr	r2, [pc, #20]	; (800bfa0 <SDMMC_CmdStopTransfer+0x40>)
 800bf8c:	210c      	movs	r1, #12
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f99a 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800bf94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf96:	69fb      	ldr	r3, [r7, #28]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	05f5e100 	.word	0x05f5e100

0800bfa4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08a      	sub	sp, #40	; 0x28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bfb4:	2307      	movs	r3, #7
 800bfb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfc4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfc6:	f107 0310 	add.w	r3, r7, #16
 800bfca:	4619      	mov	r1, r3
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f7ff fea7 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bfd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfd6:	2107      	movs	r1, #7
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 f975 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800bfde:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3728      	adds	r7, #40	; 0x28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b088      	sub	sp, #32
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bff2:	2300      	movs	r3, #0
 800bff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bff6:	2300      	movs	r3, #0
 800bff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bffa:	2300      	movs	r3, #0
 800bffc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c006:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c008:	f107 0308 	add.w	r3, r7, #8
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff fe86 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f92f 	bl	800c278 <SDMMC_GetCmdError>
 800c01a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c01c:	69fb      	ldr	r3, [r7, #28]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3720      	adds	r7, #32
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b088      	sub	sp, #32
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c02e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c034:	2308      	movs	r3, #8
 800c036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c038:	2340      	movs	r3, #64	; 0x40
 800c03a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c03c:	2300      	movs	r3, #0
 800c03e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c046:	f107 0308 	add.w	r3, r7, #8
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff fe67 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fb18 	bl	800c688 <SDMMC_GetCmdResp7>
 800c058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c05a:	69fb      	ldr	r3, [r7, #28]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3720      	adds	r7, #32
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c072:	2337      	movs	r3, #55	; 0x37
 800c074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c076:	2340      	movs	r3, #64	; 0x40
 800c078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c082:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c084:	f107 0308 	add.w	r3, r7, #8
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff fe48 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c090:	f241 3288 	movw	r2, #5000	; 0x1388
 800c094:	2137      	movs	r1, #55	; 0x37
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f916 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800c09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c09e:	69fb      	ldr	r3, [r7, #28]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3720      	adds	r7, #32
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	4b0d      	ldr	r3, [pc, #52]	; (800c0ec <SDMMC_CmdAppOperCommand+0x44>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c0ba:	2329      	movs	r3, #41	; 0x29
 800c0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0be:	2340      	movs	r3, #64	; 0x40
 800c0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0cc:	f107 0308 	add.w	r3, r7, #8
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff fe24 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fa27 	bl	800c52c <SDMMC_GetCmdResp3>
 800c0de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0e0:	69fb      	ldr	r3, [r7, #28]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	80100000 	.word	0x80100000

0800c0f0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c0fe:	2306      	movs	r3, #6
 800c100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c102:	2340      	movs	r3, #64	; 0x40
 800c104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c10e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c110:	f107 0308 	add.w	r3, r7, #8
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fe02 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c120:	2106      	movs	r1, #6
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f8d0 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800c128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c12a:	69fb      	ldr	r3, [r7, #28]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3720      	adds	r7, #32
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b088      	sub	sp, #32
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c13c:	2300      	movs	r3, #0
 800c13e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c140:	2333      	movs	r3, #51	; 0x33
 800c142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c144:	2340      	movs	r3, #64	; 0x40
 800c146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c148:	2300      	movs	r3, #0
 800c14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c14c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c152:	f107 0308 	add.w	r3, r7, #8
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff fde1 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c162:	2133      	movs	r1, #51	; 0x33
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f8af 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800c16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c16c:	69fb      	ldr	r3, [r7, #28]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3720      	adds	r7, #32
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b088      	sub	sp, #32
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c17e:	2300      	movs	r3, #0
 800c180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c182:	2302      	movs	r3, #2
 800c184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c186:	23c0      	movs	r3, #192	; 0xc0
 800c188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c194:	f107 0308 	add.w	r3, r7, #8
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff fdc0 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f97d 	bl	800c4a0 <SDMMC_GetCmdResp2>
 800c1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a8:	69fb      	ldr	r3, [r7, #28]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3720      	adds	r7, #32
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b088      	sub	sp, #32
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c1c0:	2309      	movs	r3, #9
 800c1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c1c4:	23c0      	movs	r3, #192	; 0xc0
 800c1c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1d2:	f107 0308 	add.w	r3, r7, #8
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff fda1 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f95e 	bl	800c4a0 <SDMMC_GetCmdResp2>
 800c1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c1fe:	2303      	movs	r3, #3
 800c200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c202:	2340      	movs	r3, #64	; 0x40
 800c204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c206:	2300      	movs	r3, #0
 800c208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c20e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fd82 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	2103      	movs	r1, #3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f9bd 	bl	800c5a0 <SDMMC_GetCmdResp6>
 800c226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c228:	69fb      	ldr	r3, [r7, #28]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3720      	adds	r7, #32
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b088      	sub	sp, #32
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c240:	230d      	movs	r3, #13
 800c242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c244:	2340      	movs	r3, #64	; 0x40
 800c246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c248:	2300      	movs	r3, #0
 800c24a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c24c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c250:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c252:	f107 0308 	add.w	r3, r7, #8
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7ff fd61 	bl	800bd20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c262:	210d      	movs	r1, #13
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f82f 	bl	800c2c8 <SDMMC_GetCmdResp1>
 800c26a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c26c:	69fb      	ldr	r3, [r7, #28]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3720      	adds	r7, #32
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
	...

0800c278 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c278:	b490      	push	{r4, r7}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <SDMMC_GetCmdError+0x48>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a0f      	ldr	r2, [pc, #60]	; (800c2c4 <SDMMC_GetCmdError+0x4c>)
 800c286:	fba2 2303 	umull	r2, r3, r2, r3
 800c28a:	0a5b      	lsrs	r3, r3, #9
 800c28c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c290:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c294:	4623      	mov	r3, r4
 800c296:	1e5c      	subs	r4, r3, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d102      	bne.n	800c2a2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c29c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2a0:	e009      	b.n	800c2b6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d0f2      	beq.n	800c294 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	22c5      	movs	r2, #197	; 0xc5
 800c2b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bc90      	pop	{r4, r7}
 800c2be:	4770      	bx	lr
 800c2c0:	20000018 	.word	0x20000018
 800c2c4:	10624dd3 	.word	0x10624dd3

0800c2c8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c2c8:	b590      	push	{r4, r7, lr}
 800c2ca:	b087      	sub	sp, #28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c2d6:	4b6f      	ldr	r3, [pc, #444]	; (800c494 <SDMMC_GetCmdResp1+0x1cc>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a6f      	ldr	r2, [pc, #444]	; (800c498 <SDMMC_GetCmdResp1+0x1d0>)
 800c2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e0:	0a5b      	lsrs	r3, r3, #9
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	1e5c      	subs	r4, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d102      	bne.n	800c2f6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2f4:	e0c9      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2fa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0f0      	beq.n	800c2e8 <SDMMC_GetCmdResp1+0x20>
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1eb      	bne.n	800c2e8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c314:	f003 0304 	and.w	r3, r3, #4
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2204      	movs	r2, #4
 800c320:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c322:	2304      	movs	r3, #4
 800c324:	e0b1      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d004      	beq.n	800c33c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2201      	movs	r2, #1
 800c336:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c338:	2301      	movs	r3, #1
 800c33a:	e0a6      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	22c5      	movs	r2, #197	; 0xc5
 800c340:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff fd16 	bl	800bd74 <SDMMC_GetCommandResponse>
 800c348:	4603      	mov	r3, r0
 800c34a:	461a      	mov	r2, r3
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	4293      	cmp	r3, r2
 800c350:	d001      	beq.n	800c356 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c352:	2301      	movs	r3, #1
 800c354:	e099      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c356:	2100      	movs	r1, #0
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f7ff fd18 	bl	800bd8e <SDMMC_GetResponse>
 800c35e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c360:	693a      	ldr	r2, [r7, #16]
 800c362:	4b4e      	ldr	r3, [pc, #312]	; (800c49c <SDMMC_GetCmdResp1+0x1d4>)
 800c364:	4013      	ands	r3, r2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d101      	bne.n	800c36e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c36a:	2300      	movs	r3, #0
 800c36c:	e08d      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	da02      	bge.n	800c37a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c378:	e087      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c384:	2340      	movs	r3, #64	; 0x40
 800c386:	e080      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c392:	2380      	movs	r3, #128	; 0x80
 800c394:	e079      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3a4:	e071      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c3b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3b4:	e069      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c3c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3c4:	e061      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c3d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c3d4:	e059      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3e4:	e051      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3f4:	e049      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c404:	e041      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c414:	e039      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c424:	e031      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c430:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c434:	e029      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c440:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c444:	e021      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c450:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c454:	e019      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c460:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c464:	e011      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c470:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c474:	e009      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	f003 0308 	and.w	r3, r3, #8
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c480:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c484:	e001      	b.n	800c48a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd90      	pop	{r4, r7, pc}
 800c492:	bf00      	nop
 800c494:	20000018 	.word	0x20000018
 800c498:	10624dd3 	.word	0x10624dd3
 800c49c:	fdffe008 	.word	0xfdffe008

0800c4a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c4a0:	b490      	push	{r4, r7}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4a8:	4b1e      	ldr	r3, [pc, #120]	; (800c524 <SDMMC_GetCmdResp2+0x84>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a1e      	ldr	r2, [pc, #120]	; (800c528 <SDMMC_GetCmdResp2+0x88>)
 800c4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b2:	0a5b      	lsrs	r3, r3, #9
 800c4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c4bc:	4623      	mov	r3, r4
 800c4be:	1e5c      	subs	r4, r3, #1
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4c8:	e026      	b.n	800c518 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d0f0      	beq.n	800c4bc <SDMMC_GetCmdResp2+0x1c>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1eb      	bne.n	800c4bc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e8:	f003 0304 	and.w	r3, r3, #4
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d004      	beq.n	800c4fa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2204      	movs	r2, #4
 800c4f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4f6:	2304      	movs	r3, #4
 800c4f8:	e00e      	b.n	800c518 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c50c:	2301      	movs	r3, #1
 800c50e:	e003      	b.n	800c518 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	22c5      	movs	r2, #197	; 0xc5
 800c514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bc90      	pop	{r4, r7}
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	20000018 	.word	0x20000018
 800c528:	10624dd3 	.word	0x10624dd3

0800c52c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c52c:	b490      	push	{r4, r7}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c534:	4b18      	ldr	r3, [pc, #96]	; (800c598 <SDMMC_GetCmdResp3+0x6c>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a18      	ldr	r2, [pc, #96]	; (800c59c <SDMMC_GetCmdResp3+0x70>)
 800c53a:	fba2 2303 	umull	r2, r3, r2, r3
 800c53e:	0a5b      	lsrs	r3, r3, #9
 800c540:	f241 3288 	movw	r2, #5000	; 0x1388
 800c544:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c548:	4623      	mov	r3, r4
 800c54a:	1e5c      	subs	r4, r3, #1
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c554:	e01b      	b.n	800c58e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c55a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0f0      	beq.n	800c548 <SDMMC_GetCmdResp3+0x1c>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1eb      	bne.n	800c548 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2204      	movs	r2, #4
 800c580:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c582:	2304      	movs	r3, #4
 800c584:	e003      	b.n	800c58e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	22c5      	movs	r2, #197	; 0xc5
 800c58a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bc90      	pop	{r4, r7}
 800c596:	4770      	bx	lr
 800c598:	20000018 	.word	0x20000018
 800c59c:	10624dd3 	.word	0x10624dd3

0800c5a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5ae:	4b34      	ldr	r3, [pc, #208]	; (800c680 <SDMMC_GetCmdResp6+0xe0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a34      	ldr	r2, [pc, #208]	; (800c684 <SDMMC_GetCmdResp6+0xe4>)
 800c5b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b8:	0a5b      	lsrs	r3, r3, #9
 800c5ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5be:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5c2:	4623      	mov	r3, r4
 800c5c4:	1e5c      	subs	r4, r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5ce:	e052      	b.n	800c676 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d0f0      	beq.n	800c5c2 <SDMMC_GetCmdResp6+0x22>
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1eb      	bne.n	800c5c2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ee:	f003 0304 	and.w	r3, r3, #4
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d004      	beq.n	800c600 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	e03a      	b.n	800c676 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c604:	f003 0301 	and.w	r3, r3, #1
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d004      	beq.n	800c616 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2201      	movs	r2, #1
 800c610:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c612:	2301      	movs	r3, #1
 800c614:	e02f      	b.n	800c676 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fbac 	bl	800bd74 <SDMMC_GetCommandResponse>
 800c61c:	4603      	mov	r3, r0
 800c61e:	461a      	mov	r2, r3
 800c620:	7afb      	ldrb	r3, [r7, #11]
 800c622:	4293      	cmp	r3, r2
 800c624:	d001      	beq.n	800c62a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c626:	2301      	movs	r3, #1
 800c628:	e025      	b.n	800c676 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	22c5      	movs	r2, #197	; 0xc5
 800c62e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c630:	2100      	movs	r1, #0
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff fbab 	bl	800bd8e <SDMMC_GetResponse>
 800c638:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c640:	2b00      	cmp	r3, #0
 800c642:	d106      	bne.n	800c652 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	0c1b      	lsrs	r3, r3, #16
 800c648:	b29a      	uxth	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c64e:	2300      	movs	r3, #0
 800c650:	e011      	b.n	800c676 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c65c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c660:	e009      	b.n	800c676 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c670:	e001      	b.n	800c676 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c676:	4618      	mov	r0, r3
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd90      	pop	{r4, r7, pc}
 800c67e:	bf00      	nop
 800c680:	20000018 	.word	0x20000018
 800c684:	10624dd3 	.word	0x10624dd3

0800c688 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c688:	b490      	push	{r4, r7}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c690:	4b21      	ldr	r3, [pc, #132]	; (800c718 <SDMMC_GetCmdResp7+0x90>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a21      	ldr	r2, [pc, #132]	; (800c71c <SDMMC_GetCmdResp7+0x94>)
 800c696:	fba2 2303 	umull	r2, r3, r2, r3
 800c69a:	0a5b      	lsrs	r3, r3, #9
 800c69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c6a4:	4623      	mov	r3, r4
 800c6a6:	1e5c      	subs	r4, r3, #1
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6b0:	e02c      	b.n	800c70c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0f0      	beq.n	800c6a4 <SDMMC_GetCmdResp7+0x1c>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1eb      	bne.n	800c6a4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2204      	movs	r2, #4
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6de:	2304      	movs	r3, #4
 800c6e0:	e014      	b.n	800c70c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d004      	beq.n	800c6f8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e009      	b.n	800c70c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2240      	movs	r2, #64	; 0x40
 800c708:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c70a:	2300      	movs	r3, #0
  
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bc90      	pop	{r4, r7}
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20000018 	.word	0x20000018
 800c71c:	10624dd3 	.word	0x10624dd3

0800c720 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c720:	b580      	push	{r7, lr}
 800c722:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c724:	4904      	ldr	r1, [pc, #16]	; (800c738 <MX_FATFS_Init+0x18>)
 800c726:	4805      	ldr	r0, [pc, #20]	; (800c73c <MX_FATFS_Init+0x1c>)
 800c728:	f000 fa96 	bl	800cc58 <FATFS_LinkDriver>
 800c72c:	4603      	mov	r3, r0
 800c72e:	461a      	mov	r2, r3
 800c730:	4b03      	ldr	r3, [pc, #12]	; (800c740 <MX_FATFS_Init+0x20>)
 800c732:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c734:	bf00      	nop
 800c736:	bd80      	pop	{r7, pc}
 800c738:	2000c944 	.word	0x2000c944
 800c73c:	08029b78 	.word	0x08029b78
 800c740:	2000c940 	.word	0x2000c940

0800c744 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c74e:	f000 f87b 	bl	800c848 <BSP_SD_IsDetected>
 800c752:	4603      	mov	r3, r0
 800c754:	2b01      	cmp	r3, #1
 800c756:	d001      	beq.n	800c75c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c758:	2302      	movs	r3, #2
 800c75a:	e012      	b.n	800c782 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c75c:	480b      	ldr	r0, [pc, #44]	; (800c78c <BSP_SD_Init+0x48>)
 800c75e:	f7fc fae9 	bl	8008d34 <HAL_SD_Init>
 800c762:	4603      	mov	r3, r0
 800c764:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c766:	79fb      	ldrb	r3, [r7, #7]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d109      	bne.n	800c780 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c76c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c770:	4806      	ldr	r0, [pc, #24]	; (800c78c <BSP_SD_Init+0x48>)
 800c772:	f7fc ff2b 	bl	80095cc <HAL_SD_ConfigWideBusOperation>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c780:	79fb      	ldrb	r3, [r7, #7]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	2000c3cc 	.word	0x2000c3cc

0800c790 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	68f9      	ldr	r1, [r7, #12]
 800c7a6:	4806      	ldr	r0, [pc, #24]	; (800c7c0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c7a8:	f7fc fb5c 	bl	8008e64 <HAL_SD_ReadBlocks_DMA>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	2000c3cc 	.word	0x2000c3cc

0800c7c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	68f9      	ldr	r1, [r7, #12]
 800c7da:	4806      	ldr	r0, [pc, #24]	; (800c7f4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c7dc:	f7fc fc2e 	bl	800903c <HAL_SD_WriteBlocks_DMA>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3718      	adds	r7, #24
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	2000c3cc 	.word	0x2000c3cc

0800c7f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c7fc:	4805      	ldr	r0, [pc, #20]	; (800c814 <BSP_SD_GetCardState+0x1c>)
 800c7fe:	f7fc ff61 	bl	80096c4 <HAL_SD_GetCardState>
 800c802:	4603      	mov	r3, r0
 800c804:	2b04      	cmp	r3, #4
 800c806:	bf14      	ite	ne
 800c808:	2301      	movne	r3, #1
 800c80a:	2300      	moveq	r3, #0
 800c80c:	b2db      	uxtb	r3, r3
}
 800c80e:	4618      	mov	r0, r3
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	2000c3cc 	.word	0x2000c3cc

0800c818 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c820:	6879      	ldr	r1, [r7, #4]
 800c822:	4803      	ldr	r0, [pc, #12]	; (800c830 <BSP_SD_GetCardInfo+0x18>)
 800c824:	f7fc fea6 	bl	8009574 <HAL_SD_GetCardInfo>
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	2000c3cc 	.word	0x2000c3cc

0800c834 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c83c:	f000 f9b2 	bl	800cba4 <BSP_SD_ReadCpltCallback>
}
 800c840:	bf00      	nop
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c84e:	2301      	movs	r3, #1
 800c850:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c852:	f000 f80b 	bl	800c86c <BSP_PlatformIsDetected>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c85c:	2300      	movs	r3, #0
 800c85e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	b2db      	uxtb	r3, r3
}
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c872:	2301      	movs	r3, #1
 800c874:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c87a:	4806      	ldr	r0, [pc, #24]	; (800c894 <BSP_PlatformIsDetected+0x28>)
 800c87c:	f7f9 f90e 	bl	8005a9c <HAL_GPIO_ReadPin>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c886:	2300      	movs	r3, #0
 800c888:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c88a:	79fb      	ldrb	r3, [r7, #7]
}  
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	40020800 	.word	0x40020800

0800c898 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c8a0:	f000 fa26 	bl	800ccf0 <osKernelSysTick>
 800c8a4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c8a6:	e006      	b.n	800c8b6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c8a8:	f7ff ffa6 	bl	800c7f8 <BSP_SD_GetCardState>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e009      	b.n	800c8ca <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c8b6:	f000 fa1b 	bl	800ccf0 <osKernelSysTick>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d8f0      	bhi.n	800c8a8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c8c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	4603      	mov	r3, r0
 800c8dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c8de:	4b0b      	ldr	r3, [pc, #44]	; (800c90c <SD_CheckStatus+0x38>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c8e4:	f7ff ff88 	bl	800c7f8 <BSP_SD_GetCardState>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d107      	bne.n	800c8fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c8ee:	4b07      	ldr	r3, [pc, #28]	; (800c90c <SD_CheckStatus+0x38>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f023 0301 	bic.w	r3, r3, #1
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	4b04      	ldr	r3, [pc, #16]	; (800c90c <SD_CheckStatus+0x38>)
 800c8fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c8fe:	4b03      	ldr	r3, [pc, #12]	; (800c90c <SD_CheckStatus+0x38>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	b2db      	uxtb	r3, r3
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20000021 	.word	0x20000021

0800c910 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c910:	b590      	push	{r4, r7, lr}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	4603      	mov	r3, r0
 800c918:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c91a:	4b20      	ldr	r3, [pc, #128]	; (800c99c <SD_initialize+0x8c>)
 800c91c:	2201      	movs	r2, #1
 800c91e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c920:	f000 f9da 	bl	800ccd8 <osKernelRunning>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d030      	beq.n	800c98c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c92a:	f7ff ff0b 	bl	800c744 <BSP_SD_Init>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d107      	bne.n	800c944 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c934:	79fb      	ldrb	r3, [r7, #7]
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff ffcc 	bl	800c8d4 <SD_CheckStatus>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	4b16      	ldr	r3, [pc, #88]	; (800c99c <SD_initialize+0x8c>)
 800c942:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c944:	4b15      	ldr	r3, [pc, #84]	; (800c99c <SD_initialize+0x8c>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d01e      	beq.n	800c98c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c94e:	4b14      	ldr	r3, [pc, #80]	; (800c9a0 <SD_initialize+0x90>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10e      	bne.n	800c974 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c956:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <SD_initialize+0x94>)
 800c958:	f107 0408 	add.w	r4, r7, #8
 800c95c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c95e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c962:	f107 0308 	add.w	r3, r7, #8
 800c966:	2100      	movs	r1, #0
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fa31 	bl	800cdd0 <osMessageCreate>
 800c96e:	4602      	mov	r2, r0
 800c970:	4b0b      	ldr	r3, [pc, #44]	; (800c9a0 <SD_initialize+0x90>)
 800c972:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c974:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <SD_initialize+0x90>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d107      	bne.n	800c98c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c97c:	4b07      	ldr	r3, [pc, #28]	; (800c99c <SD_initialize+0x8c>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	b2db      	uxtb	r3, r3
 800c982:	f043 0301 	orr.w	r3, r3, #1
 800c986:	b2da      	uxtb	r2, r3
 800c988:	4b04      	ldr	r3, [pc, #16]	; (800c99c <SD_initialize+0x8c>)
 800c98a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c98c:	4b03      	ldr	r3, [pc, #12]	; (800c99c <SD_initialize+0x8c>)
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	b2db      	uxtb	r3, r3
}
 800c992:	4618      	mov	r0, r3
 800c994:	371c      	adds	r7, #28
 800c996:	46bd      	mov	sp, r7
 800c998:	bd90      	pop	{r4, r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20000021 	.word	0x20000021
 800c9a0:	200003ec 	.word	0x200003ec
 800c9a4:	08029450 	.word	0x08029450

0800c9a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff ff8d 	bl	800c8d4 <SD_CheckStatus>
 800c9ba:	4603      	mov	r3, r0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08a      	sub	sp, #40	; 0x28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	607a      	str	r2, [r7, #4]
 800c9ce:	603b      	str	r3, [r7, #0]
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c9da:	f247 5030 	movw	r0, #30000	; 0x7530
 800c9de:	f7ff ff5b 	bl	800c898 <SD_CheckStatusWithTimeout>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	da02      	bge.n	800c9ee <SD_read+0x2a>
  {
    return res;
 800c9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ec:	e032      	b.n	800ca54 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c9ee:	683a      	ldr	r2, [r7, #0]
 800c9f0:	6879      	ldr	r1, [r7, #4]
 800c9f2:	68b8      	ldr	r0, [r7, #8]
 800c9f4:	f7ff fecc 	bl	800c790 <BSP_SD_ReadBlocks_DMA>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c9fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d124      	bne.n	800ca50 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ca06:	4b15      	ldr	r3, [pc, #84]	; (800ca5c <SD_read+0x98>)
 800ca08:	6819      	ldr	r1, [r3, #0]
 800ca0a:	f107 0314 	add.w	r3, r7, #20
 800ca0e:	f247 5230 	movw	r2, #30000	; 0x7530
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 fa46 	bl	800cea4 <osMessageGet>

    if (event.status == osEventMessage)
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	2b10      	cmp	r3, #16
 800ca1c:	d118      	bne.n	800ca50 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d115      	bne.n	800ca50 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ca24:	f000 f964 	bl	800ccf0 <osKernelSysTick>
 800ca28:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ca2a:	e008      	b.n	800ca3e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ca2c:	f7ff fee4 	bl	800c7f8 <BSP_SD_GetCardState>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d103      	bne.n	800ca3e <SD_read+0x7a>
              {
                res = RES_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ca3c:	e008      	b.n	800ca50 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ca3e:	f000 f957 	bl	800ccf0 <osKernelSysTick>
 800ca42:	4602      	mov	r2, r0
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	f247 522f 	movw	r2, #29999	; 0x752f
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d9ed      	bls.n	800ca2c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ca50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3728      	adds	r7, #40	; 0x28
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	200003ec 	.word	0x200003ec

0800ca60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b08a      	sub	sp, #40	; 0x28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	607a      	str	r2, [r7, #4]
 800ca6a:	603b      	str	r3, [r7, #0]
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca76:	f247 5030 	movw	r0, #30000	; 0x7530
 800ca7a:	f7ff ff0d 	bl	800c898 <SD_CheckStatusWithTimeout>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	da02      	bge.n	800ca8a <SD_write+0x2a>
  {
    return res;
 800ca84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca88:	e02e      	b.n	800cae8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	68b8      	ldr	r0, [r7, #8]
 800ca90:	f7ff fe98 	bl	800c7c4 <BSP_SD_WriteBlocks_DMA>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d124      	bne.n	800cae4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ca9a:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <SD_write+0x90>)
 800ca9c:	6819      	ldr	r1, [r3, #0]
 800ca9e:	f107 0314 	add.w	r3, r7, #20
 800caa2:	f247 5230 	movw	r2, #30000	; 0x7530
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 f9fc 	bl	800cea4 <osMessageGet>

    if (event.status == osEventMessage)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2b10      	cmp	r3, #16
 800cab0:	d118      	bne.n	800cae4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d115      	bne.n	800cae4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800cab8:	f000 f91a 	bl	800ccf0 <osKernelSysTick>
 800cabc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cabe:	e008      	b.n	800cad2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cac0:	f7ff fe9a 	bl	800c7f8 <BSP_SD_GetCardState>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d103      	bne.n	800cad2 <SD_write+0x72>
          {
            res = RES_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cad0:	e008      	b.n	800cae4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cad2:	f000 f90d 	bl	800ccf0 <osKernelSysTick>
 800cad6:	4602      	mov	r2, r0
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	f247 522f 	movw	r2, #29999	; 0x752f
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d9ed      	bls.n	800cac0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3728      	adds	r7, #40	; 0x28
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	200003ec 	.word	0x200003ec

0800caf4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08c      	sub	sp, #48	; 0x30
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	603a      	str	r2, [r7, #0]
 800cafe:	71fb      	strb	r3, [r7, #7]
 800cb00:	460b      	mov	r3, r1
 800cb02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb0a:	4b25      	ldr	r3, [pc, #148]	; (800cba0 <SD_ioctl+0xac>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d001      	beq.n	800cb1c <SD_ioctl+0x28>
 800cb18:	2303      	movs	r3, #3
 800cb1a:	e03c      	b.n	800cb96 <SD_ioctl+0xa2>

  switch (cmd)
 800cb1c:	79bb      	ldrb	r3, [r7, #6]
 800cb1e:	2b03      	cmp	r3, #3
 800cb20:	d834      	bhi.n	800cb8c <SD_ioctl+0x98>
 800cb22:	a201      	add	r2, pc, #4	; (adr r2, 800cb28 <SD_ioctl+0x34>)
 800cb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb28:	0800cb39 	.word	0x0800cb39
 800cb2c:	0800cb41 	.word	0x0800cb41
 800cb30:	0800cb59 	.word	0x0800cb59
 800cb34:	0800cb73 	.word	0x0800cb73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb3e:	e028      	b.n	800cb92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb40:	f107 030c 	add.w	r3, r7, #12
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff fe67 	bl	800c818 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb56:	e01c      	b.n	800cb92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb58:	f107 030c 	add.w	r3, r7, #12
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7ff fe5b 	bl	800c818 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb70:	e00f      	b.n	800cb92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb72:	f107 030c 	add.w	r3, r7, #12
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7ff fe4e 	bl	800c818 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	0a5a      	lsrs	r2, r3, #9
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb8a:	e002      	b.n	800cb92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cb8c:	2304      	movs	r3, #4
 800cb8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cb92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3730      	adds	r7, #48	; 0x30
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000021 	.word	0x20000021

0800cba4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800cba8:	4b04      	ldr	r3, [pc, #16]	; (800cbbc <BSP_SD_ReadCpltCallback+0x18>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2200      	movs	r2, #0
 800cbae:	2101      	movs	r1, #1
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f937 	bl	800ce24 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800cbb6:	bf00      	nop
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	200003ec 	.word	0x200003ec

0800cbc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b087      	sub	sp, #28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cbd6:	4b1f      	ldr	r3, [pc, #124]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cbd8:	7a5b      	ldrb	r3, [r3, #9]
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d131      	bne.n	800cc44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cbe0:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cbe2:	7a5b      	ldrb	r3, [r3, #9]
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4b1a      	ldr	r3, [pc, #104]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cbea:	2100      	movs	r1, #0
 800cbec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cbee:	4b19      	ldr	r3, [pc, #100]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cbf0:	7a5b      	ldrb	r3, [r3, #9]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	4a17      	ldr	r2, [pc, #92]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cbfe:	4b15      	ldr	r3, [pc, #84]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cc00:	7a5b      	ldrb	r3, [r3, #9]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	461a      	mov	r2, r3
 800cc06:	4b13      	ldr	r3, [pc, #76]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cc08:	4413      	add	r3, r2
 800cc0a:	79fa      	ldrb	r2, [r7, #7]
 800cc0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc0e:	4b11      	ldr	r3, [pc, #68]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cc10:	7a5b      	ldrb	r3, [r3, #9]
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	1c5a      	adds	r2, r3, #1
 800cc16:	b2d1      	uxtb	r1, r2
 800cc18:	4a0e      	ldr	r2, [pc, #56]	; (800cc54 <FATFS_LinkDriverEx+0x94>)
 800cc1a:	7251      	strb	r1, [r2, #9]
 800cc1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc1e:	7dbb      	ldrb	r3, [r7, #22]
 800cc20:	3330      	adds	r3, #48	; 0x30
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	223a      	movs	r2, #58	; 0x3a
 800cc2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	3302      	adds	r3, #2
 800cc34:	222f      	movs	r2, #47	; 0x2f
 800cc36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	3303      	adds	r3, #3
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc40:	2300      	movs	r3, #0
 800cc42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	200003f0 	.word	0x200003f0

0800cc58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc62:	2200      	movs	r2, #0
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff ffaa 	bl	800cbc0 <FATFS_LinkDriverEx>
 800cc6c:	4603      	mov	r3, r0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b085      	sub	sp, #20
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cc80:	2300      	movs	r3, #0
 800cc82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cc84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc88:	2b84      	cmp	r3, #132	; 0x84
 800cc8a:	d005      	beq.n	800cc98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cc8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4413      	add	r3, r2
 800cc94:	3303      	adds	r3, #3
 800cc96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cc98:	68fb      	ldr	r3, [r7, #12]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccac:	f3ef 8305 	mrs	r3, IPSR
 800ccb0:	607b      	str	r3, [r7, #4]
  return(result);
 800ccb2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	bf14      	ite	ne
 800ccb8:	2301      	movne	r3, #1
 800ccba:	2300      	moveq	r3, #0
 800ccbc:	b2db      	uxtb	r3, r3
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	370c      	adds	r7, #12
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ccce:	f001 faff 	bl	800e2d0 <vTaskStartScheduler>
  
  return osOK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800ccdc:	f001 ff4a 	bl	800eb74 <xTaskGetSchedulerState>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d101      	bne.n	800ccea <osKernelRunning+0x12>
    return 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	e000      	b.n	800ccec <osKernelRunning+0x14>
  else
    return 1;
 800ccea:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ccf4:	f7ff ffd7 	bl	800cca6 <inHandlerMode>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ccfe:	f001 fc05 	bl	800e50c <xTaskGetTickCountFromISR>
 800cd02:	4603      	mov	r3, r0
 800cd04:	e002      	b.n	800cd0c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cd06:	f001 fbf1 	bl	800e4ec <xTaskGetTickCount>
 800cd0a:	4603      	mov	r3, r0
  }
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd12:	b089      	sub	sp, #36	; 0x24
 800cd14:	af04      	add	r7, sp, #16
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d020      	beq.n	800cd64 <osThreadCreate+0x54>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d01c      	beq.n	800cd64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685c      	ldr	r4, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681d      	ldr	r5, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	691e      	ldr	r6, [r3, #16]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff ff9a 	bl	800cc76 <makeFreeRtosPriority>
 800cd42:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	695b      	ldr	r3, [r3, #20]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd4c:	9202      	str	r2, [sp, #8]
 800cd4e:	9301      	str	r3, [sp, #4]
 800cd50:	9100      	str	r1, [sp, #0]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	4632      	mov	r2, r6
 800cd56:	4629      	mov	r1, r5
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f001 f8e0 	bl	800df1e <xTaskCreateStatic>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	60fb      	str	r3, [r7, #12]
 800cd62:	e01c      	b.n	800cd9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685c      	ldr	r4, [r3, #4]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd70:	b29e      	uxth	r6, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff ff7c 	bl	800cc76 <makeFreeRtosPriority>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	f107 030c 	add.w	r3, r7, #12
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	9200      	str	r2, [sp, #0]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	4632      	mov	r2, r6
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f001 f925 	bl	800dfde <xTaskCreate>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d001      	beq.n	800cd9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e000      	b.n	800cda0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cda8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <osDelay+0x16>
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	e000      	b.n	800cdc0 <osDelay+0x18>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f001 fa4f 	bl	800e264 <vTaskDelay>
  
  return osOK;
 800cdc6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cdd0:	b590      	push	{r4, r7, lr}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af02      	add	r7, sp, #8
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d012      	beq.n	800ce08 <osMessageCreate+0x38>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00e      	beq.n	800ce08 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6859      	ldr	r1, [r3, #4]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68dc      	ldr	r4, [r3, #12]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	4623      	mov	r3, r4
 800ce00:	f000 f9e2 	bl	800d1c8 <xQueueGenericCreateStatic>
 800ce04:	4603      	mov	r3, r0
 800ce06:	e008      	b.n	800ce1a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6818      	ldr	r0, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	4619      	mov	r1, r3
 800ce14:	f000 fa55 	bl	800d2c2 <xQueueGenericCreate>
 800ce18:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	370c      	adds	r7, #12
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd90      	pop	{r4, r7, pc}
	...

0800ce24 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b086      	sub	sp, #24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ce30:	2300      	movs	r3, #0
 800ce32:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <osMessagePut+0x1e>
    ticks = 1;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ce42:	f7ff ff30 	bl	800cca6 <inHandlerMode>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d018      	beq.n	800ce7e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ce4c:	f107 0210 	add.w	r2, r7, #16
 800ce50:	f107 0108 	add.w	r1, r7, #8
 800ce54:	2300      	movs	r3, #0
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f000 fb96 	bl	800d588 <xQueueGenericSendFromISR>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d001      	beq.n	800ce66 <osMessagePut+0x42>
      return osErrorOS;
 800ce62:	23ff      	movs	r3, #255	; 0xff
 800ce64:	e018      	b.n	800ce98 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d014      	beq.n	800ce96 <osMessagePut+0x72>
 800ce6c:	4b0c      	ldr	r3, [pc, #48]	; (800cea0 <osMessagePut+0x7c>)
 800ce6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	e00b      	b.n	800ce96 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ce7e:	f107 0108 	add.w	r1, r7, #8
 800ce82:	2300      	movs	r3, #0
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 fa7c 	bl	800d384 <xQueueGenericSend>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d001      	beq.n	800ce96 <osMessagePut+0x72>
      return osErrorOS;
 800ce92:	23ff      	movs	r3, #255	; 0xff
 800ce94:	e000      	b.n	800ce98 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3718      	adds	r7, #24
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	e000ed04 	.word	0xe000ed04

0800cea4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cea4:	b590      	push	{r4, r7, lr}
 800cea6:	b08b      	sub	sp, #44	; 0x2c
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10a      	bne.n	800ced4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cebe:	2380      	movs	r3, #128	; 0x80
 800cec0:	617b      	str	r3, [r7, #20]
    return event;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	461c      	mov	r4, r3
 800cec6:	f107 0314 	add.w	r3, r7, #20
 800ceca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ced2:	e054      	b.n	800cf7e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee2:	d103      	bne.n	800ceec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cee4:	f04f 33ff 	mov.w	r3, #4294967295
 800cee8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceea:	e009      	b.n	800cf00 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d006      	beq.n	800cf00 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <osMessageGet+0x5c>
      ticks = 1;
 800cefc:	2301      	movs	r3, #1
 800cefe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cf00:	f7ff fed1 	bl	800cca6 <inHandlerMode>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d01c      	beq.n	800cf44 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cf0a:	f107 0220 	add.w	r2, r7, #32
 800cf0e:	f107 0314 	add.w	r3, r7, #20
 800cf12:	3304      	adds	r3, #4
 800cf14:	4619      	mov	r1, r3
 800cf16:	68b8      	ldr	r0, [r7, #8]
 800cf18:	f000 fe56 	bl	800dbc8 <xQueueReceiveFromISR>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d102      	bne.n	800cf28 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cf22:	2310      	movs	r3, #16
 800cf24:	617b      	str	r3, [r7, #20]
 800cf26:	e001      	b.n	800cf2c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d01d      	beq.n	800cf6e <osMessageGet+0xca>
 800cf32:	4b15      	ldr	r3, [pc, #84]	; (800cf88 <osMessageGet+0xe4>)
 800cf34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	e014      	b.n	800cf6e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cf44:	f107 0314 	add.w	r3, r7, #20
 800cf48:	3304      	adds	r3, #4
 800cf4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	68b8      	ldr	r0, [r7, #8]
 800cf50:	f000 fc48 	bl	800d7e4 <xQueueReceive>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d102      	bne.n	800cf60 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cf5a:	2310      	movs	r3, #16
 800cf5c:	617b      	str	r3, [r7, #20]
 800cf5e:	e006      	b.n	800cf6e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <osMessageGet+0xc6>
 800cf66:	2300      	movs	r3, #0
 800cf68:	e000      	b.n	800cf6c <osMessageGet+0xc8>
 800cf6a:	2340      	movs	r3, #64	; 0x40
 800cf6c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	461c      	mov	r4, r3
 800cf72:	f107 0314 	add.w	r3, r7, #20
 800cf76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	372c      	adds	r7, #44	; 0x2c
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd90      	pop	{r4, r7, pc}
 800cf86:	bf00      	nop
 800cf88:	e000ed04 	.word	0xe000ed04

0800cf8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f103 0208 	add.w	r2, r3, #8
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f103 0208 	add.w	r2, r3, #8
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f103 0208 	add.w	r2, r3, #8
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cfda:	bf00      	nop
 800cfdc:	370c      	adds	r7, #12
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr

0800cfe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfe6:	b480      	push	{r7}
 800cfe8:	b085      	sub	sp, #20
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	689a      	ldr	r2, [r3, #8]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	1c5a      	adds	r2, r3, #1
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	601a      	str	r2, [r3, #0]
}
 800d022:	bf00      	nop
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d02e:	b480      	push	{r7}
 800d030:	b085      	sub	sp, #20
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d044:	d103      	bne.n	800d04e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	e00c      	b.n	800d068 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	3308      	adds	r3, #8
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	e002      	b.n	800d05c <vListInsert+0x2e>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	429a      	cmp	r2, r3
 800d066:	d2f6      	bcs.n	800d056 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	1c5a      	adds	r2, r3, #1
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	601a      	str	r2, [r3, #0]
}
 800d094:	bf00      	nop
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	6892      	ldr	r2, [r2, #8]
 800d0b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	6852      	ldr	r2, [r2, #4]
 800d0c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d103      	bne.n	800d0d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	689a      	ldr	r2, [r3, #8]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	1e5a      	subs	r2, r3, #1
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10b      	bne.n	800d120 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	b672      	cpsid	i
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	b662      	cpsie	i
 800d11c:	60bb      	str	r3, [r7, #8]
 800d11e:	e7fe      	b.n	800d11e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d120:	f002 f86a 	bl	800f1f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d12c:	68f9      	ldr	r1, [r7, #12]
 800d12e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d130:	fb01 f303 	mul.w	r3, r1, r3
 800d134:	441a      	add	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d150:	3b01      	subs	r3, #1
 800d152:	68f9      	ldr	r1, [r7, #12]
 800d154:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d156:	fb01 f303 	mul.w	r3, r1, r3
 800d15a:	441a      	add	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	22ff      	movs	r2, #255	; 0xff
 800d164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	22ff      	movs	r2, #255	; 0xff
 800d16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d114      	bne.n	800d1a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d01a      	beq.n	800d1b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	3310      	adds	r3, #16
 800d182:	4618      	mov	r0, r3
 800d184:	f001 fb36 	bl	800e7f4 <xTaskRemoveFromEventList>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d012      	beq.n	800d1b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d18e:	4b0d      	ldr	r3, [pc, #52]	; (800d1c4 <xQueueGenericReset+0xd0>)
 800d190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	e009      	b.n	800d1b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	3310      	adds	r3, #16
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff fef1 	bl	800cf8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3324      	adds	r3, #36	; 0x24
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff feec 	bl	800cf8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1b4:	f002 f852 	bl	800f25c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d1b8:	2301      	movs	r3, #1
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	e000ed04 	.word	0xe000ed04

0800d1c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08e      	sub	sp, #56	; 0x38
 800d1cc:	af02      	add	r7, sp, #8
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
 800d1d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10b      	bne.n	800d1f4 <xQueueGenericCreateStatic+0x2c>
 800d1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e0:	b672      	cpsid	i
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	b662      	cpsie	i
 800d1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1f2:	e7fe      	b.n	800d1f2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10b      	bne.n	800d212 <xQueueGenericCreateStatic+0x4a>
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	b672      	cpsid	i
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	b662      	cpsie	i
 800d20e:	627b      	str	r3, [r7, #36]	; 0x24
 800d210:	e7fe      	b.n	800d210 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <xQueueGenericCreateStatic+0x56>
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <xQueueGenericCreateStatic+0x5a>
 800d21e:	2301      	movs	r3, #1
 800d220:	e000      	b.n	800d224 <xQueueGenericCreateStatic+0x5c>
 800d222:	2300      	movs	r3, #0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10b      	bne.n	800d240 <xQueueGenericCreateStatic+0x78>
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	b672      	cpsid	i
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	b662      	cpsie	i
 800d23c:	623b      	str	r3, [r7, #32]
 800d23e:	e7fe      	b.n	800d23e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <xQueueGenericCreateStatic+0x84>
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d101      	bne.n	800d250 <xQueueGenericCreateStatic+0x88>
 800d24c:	2301      	movs	r3, #1
 800d24e:	e000      	b.n	800d252 <xQueueGenericCreateStatic+0x8a>
 800d250:	2300      	movs	r3, #0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10b      	bne.n	800d26e <xQueueGenericCreateStatic+0xa6>
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	b672      	cpsid	i
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	b662      	cpsie	i
 800d26a:	61fb      	str	r3, [r7, #28]
 800d26c:	e7fe      	b.n	800d26c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d26e:	2348      	movs	r3, #72	; 0x48
 800d270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2b48      	cmp	r3, #72	; 0x48
 800d276:	d00b      	beq.n	800d290 <xQueueGenericCreateStatic+0xc8>
 800d278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27c:	b672      	cpsid	i
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	b662      	cpsie	i
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	e7fe      	b.n	800d28e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d290:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00d      	beq.n	800d2b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	68b9      	ldr	r1, [r7, #8]
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f000 f846 	bl	800d344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3730      	adds	r7, #48	; 0x30
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b08a      	sub	sp, #40	; 0x28
 800d2c6:	af02      	add	r7, sp, #8
 800d2c8:	60f8      	str	r0, [r7, #12]
 800d2ca:	60b9      	str	r1, [r7, #8]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10b      	bne.n	800d2ee <xQueueGenericCreate+0x2c>
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	b672      	cpsid	i
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	b662      	cpsie	i
 800d2ea:	613b      	str	r3, [r7, #16]
 800d2ec:	e7fe      	b.n	800d2ec <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	61fb      	str	r3, [r7, #28]
 800d2f8:	e004      	b.n	800d304 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	fb02 f303 	mul.w	r3, r2, r3
 800d302:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	3348      	adds	r3, #72	; 0x48
 800d308:	4618      	mov	r0, r3
 800d30a:	f002 f897 	bl	800f43c <pvPortMalloc>
 800d30e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d011      	beq.n	800d33a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	3348      	adds	r3, #72	; 0x48
 800d31e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d328:	79fa      	ldrb	r2, [r7, #7]
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	4613      	mov	r3, r2
 800d330:	697a      	ldr	r2, [r7, #20]
 800d332:	68b9      	ldr	r1, [r7, #8]
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f000 f805 	bl	800d344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d33a:	69bb      	ldr	r3, [r7, #24]
	}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3720      	adds	r7, #32
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
 800d350:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d103      	bne.n	800d360 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	69ba      	ldr	r2, [r7, #24]
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	e002      	b.n	800d366 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d372:	2101      	movs	r1, #1
 800d374:	69b8      	ldr	r0, [r7, #24]
 800d376:	f7ff febd 	bl	800d0f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d37a:	bf00      	nop
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
	...

0800d384 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08e      	sub	sp, #56	; 0x38
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d392:	2300      	movs	r3, #0
 800d394:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10b      	bne.n	800d3b8 <xQueueGenericSend+0x34>
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	b672      	cpsid	i
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	b662      	cpsie	i
 800d3b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3b6:	e7fe      	b.n	800d3b6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d103      	bne.n	800d3c6 <xQueueGenericSend+0x42>
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <xQueueGenericSend+0x46>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e000      	b.n	800d3cc <xQueueGenericSend+0x48>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10b      	bne.n	800d3e8 <xQueueGenericSend+0x64>
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	b672      	cpsid	i
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	b662      	cpsie	i
 800d3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d3e6:	e7fe      	b.n	800d3e6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d103      	bne.n	800d3f6 <xQueueGenericSend+0x72>
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d101      	bne.n	800d3fa <xQueueGenericSend+0x76>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e000      	b.n	800d3fc <xQueueGenericSend+0x78>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10b      	bne.n	800d418 <xQueueGenericSend+0x94>
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	b672      	cpsid	i
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	b662      	cpsie	i
 800d414:	623b      	str	r3, [r7, #32]
 800d416:	e7fe      	b.n	800d416 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d418:	f001 fbac 	bl	800eb74 <xTaskGetSchedulerState>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d102      	bne.n	800d428 <xQueueGenericSend+0xa4>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <xQueueGenericSend+0xa8>
 800d428:	2301      	movs	r3, #1
 800d42a:	e000      	b.n	800d42e <xQueueGenericSend+0xaa>
 800d42c:	2300      	movs	r3, #0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10b      	bne.n	800d44a <xQueueGenericSend+0xc6>
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	b672      	cpsid	i
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	b662      	cpsie	i
 800d446:	61fb      	str	r3, [r7, #28]
 800d448:	e7fe      	b.n	800d448 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d44a:	f001 fed5 	bl	800f1f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d456:	429a      	cmp	r2, r3
 800d458:	d302      	bcc.n	800d460 <xQueueGenericSend+0xdc>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d129      	bne.n	800d4b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d460:	683a      	ldr	r2, [r7, #0]
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d466:	f000 fc4a 	bl	800dcfe <prvCopyDataToQueue>
 800d46a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d470:	2b00      	cmp	r3, #0
 800d472:	d010      	beq.n	800d496 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	3324      	adds	r3, #36	; 0x24
 800d478:	4618      	mov	r0, r3
 800d47a:	f001 f9bb 	bl	800e7f4 <xTaskRemoveFromEventList>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d013      	beq.n	800d4ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d484:	4b3f      	ldr	r3, [pc, #252]	; (800d584 <xQueueGenericSend+0x200>)
 800d486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	e00a      	b.n	800d4ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d007      	beq.n	800d4ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d49c:	4b39      	ldr	r3, [pc, #228]	; (800d584 <xQueueGenericSend+0x200>)
 800d49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4a2:	601a      	str	r2, [r3, #0]
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d4ac:	f001 fed6 	bl	800f25c <vPortExitCritical>
				return pdPASS;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e063      	b.n	800d57c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d103      	bne.n	800d4c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4ba:	f001 fecf 	bl	800f25c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e05c      	b.n	800d57c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d106      	bne.n	800d4d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4c8:	f107 0314 	add.w	r3, r7, #20
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f001 f9f5 	bl	800e8bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4d6:	f001 fec1 	bl	800f25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4da:	f000 ff5b 	bl	800e394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4de:	f001 fe8b 	bl	800f1f8 <vPortEnterCritical>
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4e8:	b25b      	sxtb	r3, r3
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d103      	bne.n	800d4f8 <xQueueGenericSend+0x174>
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4fe:	b25b      	sxtb	r3, r3
 800d500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d504:	d103      	bne.n	800d50e <xQueueGenericSend+0x18a>
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d50e:	f001 fea5 	bl	800f25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d512:	1d3a      	adds	r2, r7, #4
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	4611      	mov	r1, r2
 800d51a:	4618      	mov	r0, r3
 800d51c:	f001 f9e4 	bl	800e8e8 <xTaskCheckForTimeOut>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d124      	bne.n	800d570 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d528:	f000 fce1 	bl	800deee <prvIsQueueFull>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d018      	beq.n	800d564 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	3310      	adds	r3, #16
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	4611      	mov	r1, r2
 800d53a:	4618      	mov	r0, r3
 800d53c:	f001 f934 	bl	800e7a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d542:	f000 fc6c 	bl	800de1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d546:	f000 ff33 	bl	800e3b0 <xTaskResumeAll>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f47f af7c 	bne.w	800d44a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d552:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <xQueueGenericSend+0x200>)
 800d554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d558:	601a      	str	r2, [r3, #0]
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	e772      	b.n	800d44a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d566:	f000 fc5a 	bl	800de1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d56a:	f000 ff21 	bl	800e3b0 <xTaskResumeAll>
 800d56e:	e76c      	b.n	800d44a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d572:	f000 fc54 	bl	800de1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d576:	f000 ff1b 	bl	800e3b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d57a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3738      	adds	r7, #56	; 0x38
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	e000ed04 	.word	0xe000ed04

0800d588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08e      	sub	sp, #56	; 0x38
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10b      	bne.n	800d5b8 <xQueueGenericSendFromISR+0x30>
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	b672      	cpsid	i
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	b662      	cpsie	i
 800d5b4:	627b      	str	r3, [r7, #36]	; 0x24
 800d5b6:	e7fe      	b.n	800d5b6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d103      	bne.n	800d5c6 <xQueueGenericSendFromISR+0x3e>
 800d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <xQueueGenericSendFromISR+0x42>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e000      	b.n	800d5cc <xQueueGenericSendFromISR+0x44>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10b      	bne.n	800d5e8 <xQueueGenericSendFromISR+0x60>
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	b672      	cpsid	i
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	b662      	cpsie	i
 800d5e4:	623b      	str	r3, [r7, #32]
 800d5e6:	e7fe      	b.n	800d5e6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d103      	bne.n	800d5f6 <xQueueGenericSendFromISR+0x6e>
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d101      	bne.n	800d5fa <xQueueGenericSendFromISR+0x72>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e000      	b.n	800d5fc <xQueueGenericSendFromISR+0x74>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d10b      	bne.n	800d618 <xQueueGenericSendFromISR+0x90>
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	b672      	cpsid	i
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	b662      	cpsie	i
 800d614:	61fb      	str	r3, [r7, #28]
 800d616:	e7fe      	b.n	800d616 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d618:	f001 fece 	bl	800f3b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d61c:	f3ef 8211 	mrs	r2, BASEPRI
 800d620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d624:	b672      	cpsid	i
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	b662      	cpsie	i
 800d634:	61ba      	str	r2, [r7, #24]
 800d636:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d638:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d644:	429a      	cmp	r2, r3
 800d646:	d302      	bcc.n	800d64e <xQueueGenericSendFromISR+0xc6>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	d12c      	bne.n	800d6a8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	68b9      	ldr	r1, [r7, #8]
 800d65c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d65e:	f000 fb4e 	bl	800dcfe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d662:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d112      	bne.n	800d692 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d670:	2b00      	cmp	r3, #0
 800d672:	d016      	beq.n	800d6a2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d676:	3324      	adds	r3, #36	; 0x24
 800d678:	4618      	mov	r0, r3
 800d67a:	f001 f8bb 	bl	800e7f4 <xTaskRemoveFromEventList>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00e      	beq.n	800d6a2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00b      	beq.n	800d6a2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	601a      	str	r2, [r3, #0]
 800d690:	e007      	b.n	800d6a2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d696:	3301      	adds	r3, #1
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	b25a      	sxtb	r2, r3
 800d69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d6a6:	e001      	b.n	800d6ac <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	637b      	str	r3, [r7, #52]	; 0x34
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3738      	adds	r7, #56	; 0x38
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08e      	sub	sp, #56	; 0x38
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10b      	bne.n	800d6ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	b672      	cpsid	i
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	b662      	cpsie	i
 800d6e8:	623b      	str	r3, [r7, #32]
 800d6ea:	e7fe      	b.n	800d6ea <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00b      	beq.n	800d70c <xQueueGiveFromISR+0x4c>
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	b672      	cpsid	i
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	b662      	cpsie	i
 800d708:	61fb      	str	r3, [r7, #28]
 800d70a:	e7fe      	b.n	800d70a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <xQueueGiveFromISR+0x5c>
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <xQueueGiveFromISR+0x60>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e000      	b.n	800d722 <xQueueGiveFromISR+0x62>
 800d720:	2300      	movs	r3, #0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10b      	bne.n	800d73e <xQueueGiveFromISR+0x7e>
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	b672      	cpsid	i
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	b662      	cpsie	i
 800d73a:	61bb      	str	r3, [r7, #24]
 800d73c:	e7fe      	b.n	800d73c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d73e:	f001 fe3b 	bl	800f3b8 <vPortValidateInterruptPriority>
	__asm volatile
 800d742:	f3ef 8211 	mrs	r2, BASEPRI
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	b672      	cpsid	i
 800d74c:	f383 8811 	msr	BASEPRI, r3
 800d750:	f3bf 8f6f 	isb	sy
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	b662      	cpsie	i
 800d75a:	617a      	str	r2, [r7, #20]
 800d75c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d75e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d760:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d766:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d76e:	429a      	cmp	r2, r3
 800d770:	d22b      	bcs.n	800d7ca <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d784:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78c:	d112      	bne.n	800d7b4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d792:	2b00      	cmp	r3, #0
 800d794:	d016      	beq.n	800d7c4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	3324      	adds	r3, #36	; 0x24
 800d79a:	4618      	mov	r0, r3
 800d79c:	f001 f82a 	bl	800e7f4 <xTaskRemoveFromEventList>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00e      	beq.n	800d7c4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	e007      	b.n	800d7c4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	b25a      	sxtb	r2, r3
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d7c8:	e001      	b.n	800d7ce <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3738      	adds	r7, #56	; 0x38
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08c      	sub	sp, #48	; 0x30
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10b      	bne.n	800d816 <xQueueReceive+0x32>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	b672      	cpsid	i
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	b662      	cpsie	i
 800d812:	623b      	str	r3, [r7, #32]
 800d814:	e7fe      	b.n	800d814 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d103      	bne.n	800d824 <xQueueReceive+0x40>
 800d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d820:	2b00      	cmp	r3, #0
 800d822:	d101      	bne.n	800d828 <xQueueReceive+0x44>
 800d824:	2301      	movs	r3, #1
 800d826:	e000      	b.n	800d82a <xQueueReceive+0x46>
 800d828:	2300      	movs	r3, #0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10b      	bne.n	800d846 <xQueueReceive+0x62>
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	b672      	cpsid	i
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	b662      	cpsie	i
 800d842:	61fb      	str	r3, [r7, #28]
 800d844:	e7fe      	b.n	800d844 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d846:	f001 f995 	bl	800eb74 <xTaskGetSchedulerState>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d102      	bne.n	800d856 <xQueueReceive+0x72>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <xQueueReceive+0x76>
 800d856:	2301      	movs	r3, #1
 800d858:	e000      	b.n	800d85c <xQueueReceive+0x78>
 800d85a:	2300      	movs	r3, #0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d10b      	bne.n	800d878 <xQueueReceive+0x94>
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	b672      	cpsid	i
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	b662      	cpsie	i
 800d874:	61bb      	str	r3, [r7, #24]
 800d876:	e7fe      	b.n	800d876 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d878:	f001 fcbe 	bl	800f1f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d880:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01f      	beq.n	800d8c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d88c:	f000 faa1 	bl	800ddd2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	1e5a      	subs	r2, r3, #1
 800d894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d896:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00f      	beq.n	800d8c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	3310      	adds	r3, #16
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 ffa5 	bl	800e7f4 <xTaskRemoveFromEventList>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d007      	beq.n	800d8c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8b0:	4b3c      	ldr	r3, [pc, #240]	; (800d9a4 <xQueueReceive+0x1c0>)
 800d8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b6:	601a      	str	r2, [r3, #0]
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8c0:	f001 fccc 	bl	800f25c <vPortExitCritical>
				return pdPASS;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e069      	b.n	800d99c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d103      	bne.n	800d8d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8ce:	f001 fcc5 	bl	800f25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	e062      	b.n	800d99c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d106      	bne.n	800d8ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8dc:	f107 0310 	add.w	r3, r7, #16
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f000 ffeb 	bl	800e8bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8ea:	f001 fcb7 	bl	800f25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8ee:	f000 fd51 	bl	800e394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8f2:	f001 fc81 	bl	800f1f8 <vPortEnterCritical>
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8fc:	b25b      	sxtb	r3, r3
 800d8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d902:	d103      	bne.n	800d90c <xQueueReceive+0x128>
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d912:	b25b      	sxtb	r3, r3
 800d914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d918:	d103      	bne.n	800d922 <xQueueReceive+0x13e>
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d922:	f001 fc9b 	bl	800f25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d926:	1d3a      	adds	r2, r7, #4
 800d928:	f107 0310 	add.w	r3, r7, #16
 800d92c:	4611      	mov	r1, r2
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 ffda 	bl	800e8e8 <xTaskCheckForTimeOut>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d123      	bne.n	800d982 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d93c:	f000 fac1 	bl	800dec2 <prvIsQueueEmpty>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d017      	beq.n	800d976 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d948:	3324      	adds	r3, #36	; 0x24
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	4611      	mov	r1, r2
 800d94e:	4618      	mov	r0, r3
 800d950:	f000 ff2a 	bl	800e7a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d956:	f000 fa62 	bl	800de1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d95a:	f000 fd29 	bl	800e3b0 <xTaskResumeAll>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d189      	bne.n	800d878 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d964:	4b0f      	ldr	r3, [pc, #60]	; (800d9a4 <xQueueReceive+0x1c0>)
 800d966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	f3bf 8f6f 	isb	sy
 800d974:	e780      	b.n	800d878 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d978:	f000 fa51 	bl	800de1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d97c:	f000 fd18 	bl	800e3b0 <xTaskResumeAll>
 800d980:	e77a      	b.n	800d878 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d984:	f000 fa4b 	bl	800de1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d988:	f000 fd12 	bl	800e3b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d98c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d98e:	f000 fa98 	bl	800dec2 <prvIsQueueEmpty>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	f43f af6f 	beq.w	800d878 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d99a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3730      	adds	r7, #48	; 0x30
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	e000ed04 	.word	0xe000ed04

0800d9a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08e      	sub	sp, #56	; 0x38
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10b      	bne.n	800d9dc <xQueueSemaphoreTake+0x34>
 800d9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c8:	b672      	cpsid	i
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	b662      	cpsie	i
 800d9d8:	623b      	str	r3, [r7, #32]
 800d9da:	e7fe      	b.n	800d9da <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <xQueueSemaphoreTake+0x54>
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	b672      	cpsid	i
 800d9ea:	f383 8811 	msr	BASEPRI, r3
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f3bf 8f4f 	dsb	sy
 800d9f6:	b662      	cpsie	i
 800d9f8:	61fb      	str	r3, [r7, #28]
 800d9fa:	e7fe      	b.n	800d9fa <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9fc:	f001 f8ba 	bl	800eb74 <xTaskGetSchedulerState>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d102      	bne.n	800da0c <xQueueSemaphoreTake+0x64>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d101      	bne.n	800da10 <xQueueSemaphoreTake+0x68>
 800da0c:	2301      	movs	r3, #1
 800da0e:	e000      	b.n	800da12 <xQueueSemaphoreTake+0x6a>
 800da10:	2300      	movs	r3, #0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d10b      	bne.n	800da2e <xQueueSemaphoreTake+0x86>
 800da16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1a:	b672      	cpsid	i
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	b662      	cpsie	i
 800da2a:	61bb      	str	r3, [r7, #24]
 800da2c:	e7fe      	b.n	800da2c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da2e:	f001 fbe3 	bl	800f1f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da36:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d024      	beq.n	800da88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da40:	1e5a      	subs	r2, r3, #1
 800da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da44:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d104      	bne.n	800da58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800da4e:	f001 fa53 	bl	800eef8 <pvTaskIncrementMutexHeldCount>
 800da52:	4602      	mov	r2, r0
 800da54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00f      	beq.n	800da80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da62:	3310      	adds	r3, #16
 800da64:	4618      	mov	r0, r3
 800da66:	f000 fec5 	bl	800e7f4 <xTaskRemoveFromEventList>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d007      	beq.n	800da80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da70:	4b54      	ldr	r3, [pc, #336]	; (800dbc4 <xQueueSemaphoreTake+0x21c>)
 800da72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da80:	f001 fbec 	bl	800f25c <vPortExitCritical>
				return pdPASS;
 800da84:	2301      	movs	r3, #1
 800da86:	e098      	b.n	800dbba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d112      	bne.n	800dab4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00b      	beq.n	800daac <xQueueSemaphoreTake+0x104>
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	b672      	cpsid	i
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	b662      	cpsie	i
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e7fe      	b.n	800daaa <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800daac:	f001 fbd6 	bl	800f25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dab0:	2300      	movs	r3, #0
 800dab2:	e082      	b.n	800dbba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d106      	bne.n	800dac8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daba:	f107 030c 	add.w	r3, r7, #12
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 fefc 	bl	800e8bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dac4:	2301      	movs	r3, #1
 800dac6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dac8:	f001 fbc8 	bl	800f25c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dacc:	f000 fc62 	bl	800e394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dad0:	f001 fb92 	bl	800f1f8 <vPortEnterCritical>
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dada:	b25b      	sxtb	r3, r3
 800dadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae0:	d103      	bne.n	800daea <xQueueSemaphoreTake+0x142>
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800daea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daf0:	b25b      	sxtb	r3, r3
 800daf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf6:	d103      	bne.n	800db00 <xQueueSemaphoreTake+0x158>
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db00:	f001 fbac 	bl	800f25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db04:	463a      	mov	r2, r7
 800db06:	f107 030c 	add.w	r3, r7, #12
 800db0a:	4611      	mov	r1, r2
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 feeb 	bl	800e8e8 <xTaskCheckForTimeOut>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d132      	bne.n	800db7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db1a:	f000 f9d2 	bl	800dec2 <prvIsQueueEmpty>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d026      	beq.n	800db72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d109      	bne.n	800db40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800db2c:	f001 fb64 	bl	800f1f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	4618      	mov	r0, r3
 800db36:	f001 f83b 	bl	800ebb0 <xTaskPriorityInherit>
 800db3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800db3c:	f001 fb8e 	bl	800f25c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db42:	3324      	adds	r3, #36	; 0x24
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	4611      	mov	r1, r2
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 fe2d 	bl	800e7a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db50:	f000 f965 	bl	800de1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db54:	f000 fc2c 	bl	800e3b0 <xTaskResumeAll>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f47f af67 	bne.w	800da2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800db60:	4b18      	ldr	r3, [pc, #96]	; (800dbc4 <xQueueSemaphoreTake+0x21c>)
 800db62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db66:	601a      	str	r2, [r3, #0]
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	e75d      	b.n	800da2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800db72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db74:	f000 f953 	bl	800de1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db78:	f000 fc1a 	bl	800e3b0 <xTaskResumeAll>
 800db7c:	e757      	b.n	800da2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800db7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db80:	f000 f94d 	bl	800de1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db84:	f000 fc14 	bl	800e3b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db8a:	f000 f99a 	bl	800dec2 <prvIsQueueEmpty>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	f43f af4c 	beq.w	800da2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00d      	beq.n	800dbb8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800db9c:	f001 fb2c 	bl	800f1f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba2:	f000 f894 	bl	800dcce <prvGetDisinheritPriorityAfterTimeout>
 800dba6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f001 f906 	bl	800edc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dbb4:	f001 fb52 	bl	800f25c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dbb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3738      	adds	r7, #56	; 0x38
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	e000ed04 	.word	0xe000ed04

0800dbc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08e      	sub	sp, #56	; 0x38
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10b      	bne.n	800dbf6 <xQueueReceiveFromISR+0x2e>
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	b672      	cpsid	i
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	b662      	cpsie	i
 800dbf2:	623b      	str	r3, [r7, #32]
 800dbf4:	e7fe      	b.n	800dbf4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d103      	bne.n	800dc04 <xQueueReceiveFromISR+0x3c>
 800dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <xQueueReceiveFromISR+0x40>
 800dc04:	2301      	movs	r3, #1
 800dc06:	e000      	b.n	800dc0a <xQueueReceiveFromISR+0x42>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d10b      	bne.n	800dc26 <xQueueReceiveFromISR+0x5e>
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	b672      	cpsid	i
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	b662      	cpsie	i
 800dc22:	61fb      	str	r3, [r7, #28]
 800dc24:	e7fe      	b.n	800dc24 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc26:	f001 fbc7 	bl	800f3b8 <vPortValidateInterruptPriority>
	__asm volatile
 800dc2a:	f3ef 8211 	mrs	r2, BASEPRI
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	b672      	cpsid	i
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	b662      	cpsie	i
 800dc42:	61ba      	str	r2, [r7, #24]
 800dc44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dc46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d02f      	beq.n	800dcb6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc60:	68b9      	ldr	r1, [r7, #8]
 800dc62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc64:	f000 f8b5 	bl	800ddd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6a:	1e5a      	subs	r2, r3, #1
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dc70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc78:	d112      	bne.n	800dca0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d016      	beq.n	800dcb0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc84:	3310      	adds	r3, #16
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 fdb4 	bl	800e7f4 <xTaskRemoveFromEventList>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00e      	beq.n	800dcb0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00b      	beq.n	800dcb0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	e007      	b.n	800dcb0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dca4:	3301      	adds	r3, #1
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	b25a      	sxtb	r2, r3
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800dcb4:	e001      	b.n	800dcba <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3738      	adds	r7, #56	; 0x38
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dcce:	b480      	push	{r7}
 800dcd0:	b085      	sub	sp, #20
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d006      	beq.n	800dcec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f1c3 0307 	rsb	r3, r3, #7
 800dce8:	60fb      	str	r3, [r7, #12]
 800dcea:	e001      	b.n	800dcf0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
	}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3714      	adds	r7, #20
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b086      	sub	sp, #24
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	60f8      	str	r0, [r7, #12]
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10d      	bne.n	800dd38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d14d      	bne.n	800ddc0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 ffc1 	bl	800ecb0 <xTaskPriorityDisinherit>
 800dd2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	609a      	str	r2, [r3, #8]
 800dd36:	e043      	b.n	800ddc0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d119      	bne.n	800dd72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6858      	ldr	r0, [r3, #4]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd46:	461a      	mov	r2, r3
 800dd48:	68b9      	ldr	r1, [r7, #8]
 800dd4a:	f01a fbb3 	bl	80284b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	685a      	ldr	r2, [r3, #4]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd56:	441a      	add	r2, r3
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d32b      	bcc.n	800ddc0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	605a      	str	r2, [r3, #4]
 800dd70:	e026      	b.n	800ddc0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	68d8      	ldr	r0, [r3, #12]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	f01a fb99 	bl	80284b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	68da      	ldr	r2, [r3, #12]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8a:	425b      	negs	r3, r3
 800dd8c:	441a      	add	r2, r3
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	68da      	ldr	r2, [r3, #12]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d207      	bcs.n	800ddae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	689a      	ldr	r2, [r3, #8]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda6:	425b      	negs	r3, r3
 800dda8:	441a      	add	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2b02      	cmp	r3, #2
 800ddb2:	d105      	bne.n	800ddc0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ddc8:	697b      	ldr	r3, [r7, #20]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3718      	adds	r7, #24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d018      	beq.n	800de16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68da      	ldr	r2, [r3, #12]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddec:	441a      	add	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	68da      	ldr	r2, [r3, #12]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d303      	bcc.n	800de06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68d9      	ldr	r1, [r3, #12]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de0e:	461a      	mov	r2, r3
 800de10:	6838      	ldr	r0, [r7, #0]
 800de12:	f01a fb4f 	bl	80284b4 <memcpy>
	}
}
 800de16:	bf00      	nop
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b084      	sub	sp, #16
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de26:	f001 f9e7 	bl	800f1f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de32:	e011      	b.n	800de58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d012      	beq.n	800de62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3324      	adds	r3, #36	; 0x24
 800de40:	4618      	mov	r0, r3
 800de42:	f000 fcd7 	bl	800e7f4 <xTaskRemoveFromEventList>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de4c:	f000 fdb0 	bl	800e9b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
 800de52:	3b01      	subs	r3, #1
 800de54:	b2db      	uxtb	r3, r3
 800de56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	dce9      	bgt.n	800de34 <prvUnlockQueue+0x16>
 800de60:	e000      	b.n	800de64 <prvUnlockQueue+0x46>
					break;
 800de62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	22ff      	movs	r2, #255	; 0xff
 800de68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800de6c:	f001 f9f6 	bl	800f25c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de70:	f001 f9c2 	bl	800f1f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de7c:	e011      	b.n	800dea2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d012      	beq.n	800deac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	3310      	adds	r3, #16
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 fcb2 	bl	800e7f4 <xTaskRemoveFromEventList>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de96:	f000 fd8b 	bl	800e9b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de9a:	7bbb      	ldrb	r3, [r7, #14]
 800de9c:	3b01      	subs	r3, #1
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	dce9      	bgt.n	800de7e <prvUnlockQueue+0x60>
 800deaa:	e000      	b.n	800deae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800deac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	22ff      	movs	r2, #255	; 0xff
 800deb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800deb6:	f001 f9d1 	bl	800f25c <vPortExitCritical>
}
 800deba:	bf00      	nop
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b084      	sub	sp, #16
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800deca:	f001 f995 	bl	800f1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d102      	bne.n	800dedc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ded6:	2301      	movs	r3, #1
 800ded8:	60fb      	str	r3, [r7, #12]
 800deda:	e001      	b.n	800dee0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dedc:	2300      	movs	r3, #0
 800dede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dee0:	f001 f9bc 	bl	800f25c <vPortExitCritical>

	return xReturn;
 800dee4:	68fb      	ldr	r3, [r7, #12]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b084      	sub	sp, #16
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800def6:	f001 f97f 	bl	800f1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df02:	429a      	cmp	r2, r3
 800df04:	d102      	bne.n	800df0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df06:	2301      	movs	r3, #1
 800df08:	60fb      	str	r3, [r7, #12]
 800df0a:	e001      	b.n	800df10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df0c:	2300      	movs	r3, #0
 800df0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df10:	f001 f9a4 	bl	800f25c <vPortExitCritical>

	return xReturn;
 800df14:	68fb      	ldr	r3, [r7, #12]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b08e      	sub	sp, #56	; 0x38
 800df22:	af04      	add	r7, sp, #16
 800df24:	60f8      	str	r0, [r7, #12]
 800df26:	60b9      	str	r1, [r7, #8]
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10b      	bne.n	800df4a <xTaskCreateStatic+0x2c>
	__asm volatile
 800df32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df36:	b672      	cpsid	i
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	b662      	cpsie	i
 800df46:	623b      	str	r3, [r7, #32]
 800df48:	e7fe      	b.n	800df48 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800df4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10b      	bne.n	800df68 <xTaskCreateStatic+0x4a>
 800df50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df54:	b672      	cpsid	i
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	b662      	cpsie	i
 800df64:	61fb      	str	r3, [r7, #28]
 800df66:	e7fe      	b.n	800df66 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df68:	2358      	movs	r3, #88	; 0x58
 800df6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	2b58      	cmp	r3, #88	; 0x58
 800df70:	d00b      	beq.n	800df8a <xTaskCreateStatic+0x6c>
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	b672      	cpsid	i
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	b662      	cpsie	i
 800df86:	61bb      	str	r3, [r7, #24]
 800df88:	e7fe      	b.n	800df88 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d01e      	beq.n	800dfd0 <xTaskCreateStatic+0xb2>
 800df92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df94:	2b00      	cmp	r3, #0
 800df96:	d01b      	beq.n	800dfd0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	2202      	movs	r2, #2
 800dfa6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfaa:	2300      	movs	r3, #0
 800dfac:	9303      	str	r3, [sp, #12]
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	9302      	str	r3, [sp, #8]
 800dfb2:	f107 0314 	add.w	r3, r7, #20
 800dfb6:	9301      	str	r3, [sp, #4]
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f000 f850 	bl	800e068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfca:	f000 f8e1 	bl	800e190 <prvAddNewTaskToReadyList>
 800dfce:	e001      	b.n	800dfd4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfd4:	697b      	ldr	r3, [r7, #20]
	}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3728      	adds	r7, #40	; 0x28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b08c      	sub	sp, #48	; 0x30
 800dfe2:	af04      	add	r7, sp, #16
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	603b      	str	r3, [r7, #0]
 800dfea:	4613      	mov	r3, r2
 800dfec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfee:	88fb      	ldrh	r3, [r7, #6]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f001 fa22 	bl	800f43c <pvPortMalloc>
 800dff8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00e      	beq.n	800e01e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e000:	2058      	movs	r0, #88	; 0x58
 800e002:	f001 fa1b 	bl	800f43c <pvPortMalloc>
 800e006:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d003      	beq.n	800e016 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	631a      	str	r2, [r3, #48]	; 0x30
 800e014:	e005      	b.n	800e022 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e016:	6978      	ldr	r0, [r7, #20]
 800e018:	f001 fadc 	bl	800f5d4 <vPortFree>
 800e01c:	e001      	b.n	800e022 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d017      	beq.n	800e058 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e030:	88fa      	ldrh	r2, [r7, #6]
 800e032:	2300      	movs	r3, #0
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	9302      	str	r3, [sp, #8]
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f000 f80e 	bl	800e068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e04c:	69f8      	ldr	r0, [r7, #28]
 800e04e:	f000 f89f 	bl	800e190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e052:	2301      	movs	r3, #1
 800e054:	61bb      	str	r3, [r7, #24]
 800e056:	e002      	b.n	800e05e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e058:	f04f 33ff 	mov.w	r3, #4294967295
 800e05c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e05e:	69bb      	ldr	r3, [r7, #24]
	}
 800e060:	4618      	mov	r0, r3
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b088      	sub	sp, #32
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e078:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	461a      	mov	r2, r3
 800e080:	21a5      	movs	r1, #165	; 0xa5
 800e082:	f01a fa22 	bl	80284ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e08a:	6879      	ldr	r1, [r7, #4]
 800e08c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e090:	440b      	add	r3, r1
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4413      	add	r3, r2
 800e096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	f023 0307 	bic.w	r3, r3, #7
 800e09e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	f003 0307 	and.w	r3, r3, #7
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00b      	beq.n	800e0c2 <prvInitialiseNewTask+0x5a>
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	b672      	cpsid	i
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	b662      	cpsie	i
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	e7fe      	b.n	800e0c0 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d01f      	beq.n	800e108 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	61fb      	str	r3, [r7, #28]
 800e0cc:	e012      	b.n	800e0f4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0ce:	68ba      	ldr	r2, [r7, #8]
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	7819      	ldrb	r1, [r3, #0]
 800e0d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	4413      	add	r3, r2
 800e0dc:	3334      	adds	r3, #52	; 0x34
 800e0de:	460a      	mov	r2, r1
 800e0e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d006      	beq.n	800e0fc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	61fb      	str	r3, [r7, #28]
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	2b0f      	cmp	r3, #15
 800e0f8:	d9e9      	bls.n	800e0ce <prvInitialiseNewTask+0x66>
 800e0fa:	e000      	b.n	800e0fe <prvInitialiseNewTask+0x96>
			{
				break;
 800e0fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e100:	2200      	movs	r2, #0
 800e102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e106:	e003      	b.n	800e110 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	2b06      	cmp	r3, #6
 800e114:	d901      	bls.n	800e11a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e116:	2306      	movs	r3, #6
 800e118:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e11e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e124:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e128:	2200      	movs	r2, #0
 800e12a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	3304      	adds	r3, #4
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe ff4b 	bl	800cfcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e138:	3318      	adds	r3, #24
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe ff46 	bl	800cfcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e144:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	f1c3 0207 	rsb	r2, r3, #7
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e154:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	2200      	movs	r2, #0
 800e15a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15e:	2200      	movs	r2, #0
 800e160:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	68f9      	ldr	r1, [r7, #12]
 800e16e:	69b8      	ldr	r0, [r7, #24]
 800e170:	f000 ff3c 	bl	800efec <pxPortInitialiseStack>
 800e174:	4602      	mov	r2, r0
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e186:	bf00      	nop
 800e188:	3720      	adds	r7, #32
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
	...

0800e190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e198:	f001 f82e 	bl	800f1f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e19c:	4b2a      	ldr	r3, [pc, #168]	; (800e248 <prvAddNewTaskToReadyList+0xb8>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	4a29      	ldr	r2, [pc, #164]	; (800e248 <prvAddNewTaskToReadyList+0xb8>)
 800e1a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1a6:	4b29      	ldr	r3, [pc, #164]	; (800e24c <prvAddNewTaskToReadyList+0xbc>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d109      	bne.n	800e1c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1ae:	4a27      	ldr	r2, [pc, #156]	; (800e24c <prvAddNewTaskToReadyList+0xbc>)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1b4:	4b24      	ldr	r3, [pc, #144]	; (800e248 <prvAddNewTaskToReadyList+0xb8>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d110      	bne.n	800e1de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1bc:	f000 fc1e 	bl	800e9fc <prvInitialiseTaskLists>
 800e1c0:	e00d      	b.n	800e1de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1c2:	4b23      	ldr	r3, [pc, #140]	; (800e250 <prvAddNewTaskToReadyList+0xc0>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d109      	bne.n	800e1de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1ca:	4b20      	ldr	r3, [pc, #128]	; (800e24c <prvAddNewTaskToReadyList+0xbc>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d802      	bhi.n	800e1de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1d8:	4a1c      	ldr	r2, [pc, #112]	; (800e24c <prvAddNewTaskToReadyList+0xbc>)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e1de:	4b1d      	ldr	r3, [pc, #116]	; (800e254 <prvAddNewTaskToReadyList+0xc4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	4a1b      	ldr	r2, [pc, #108]	; (800e254 <prvAddNewTaskToReadyList+0xc4>)
 800e1e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	409a      	lsls	r2, r3
 800e1f0:	4b19      	ldr	r3, [pc, #100]	; (800e258 <prvAddNewTaskToReadyList+0xc8>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	4a18      	ldr	r2, [pc, #96]	; (800e258 <prvAddNewTaskToReadyList+0xc8>)
 800e1f8:	6013      	str	r3, [r2, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4a15      	ldr	r2, [pc, #84]	; (800e25c <prvAddNewTaskToReadyList+0xcc>)
 800e208:	441a      	add	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4619      	mov	r1, r3
 800e210:	4610      	mov	r0, r2
 800e212:	f7fe fee8 	bl	800cfe6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e216:	f001 f821 	bl	800f25c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e21a:	4b0d      	ldr	r3, [pc, #52]	; (800e250 <prvAddNewTaskToReadyList+0xc0>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00e      	beq.n	800e240 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e222:	4b0a      	ldr	r3, [pc, #40]	; (800e24c <prvAddNewTaskToReadyList+0xbc>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d207      	bcs.n	800e240 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e230:	4b0b      	ldr	r3, [pc, #44]	; (800e260 <prvAddNewTaskToReadyList+0xd0>)
 800e232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	200004fc 	.word	0x200004fc
 800e24c:	200003fc 	.word	0x200003fc
 800e250:	20000508 	.word	0x20000508
 800e254:	20000518 	.word	0x20000518
 800e258:	20000504 	.word	0x20000504
 800e25c:	20000400 	.word	0x20000400
 800e260:	e000ed04 	.word	0xe000ed04

0800e264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e26c:	2300      	movs	r3, #0
 800e26e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d018      	beq.n	800e2a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e276:	4b14      	ldr	r3, [pc, #80]	; (800e2c8 <vTaskDelay+0x64>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00b      	beq.n	800e296 <vTaskDelay+0x32>
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	b672      	cpsid	i
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	b662      	cpsie	i
 800e292:	60bb      	str	r3, [r7, #8]
 800e294:	e7fe      	b.n	800e294 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e296:	f000 f87d 	bl	800e394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e29a:	2100      	movs	r1, #0
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fe3f 	bl	800ef20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2a2:	f000 f885 	bl	800e3b0 <xTaskResumeAll>
 800e2a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d107      	bne.n	800e2be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e2ae:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <vTaskDelay+0x68>)
 800e2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2be:	bf00      	nop
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	20000524 	.word	0x20000524
 800e2cc:	e000ed04 	.word	0xe000ed04

0800e2d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08a      	sub	sp, #40	; 0x28
 800e2d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2de:	463a      	mov	r2, r7
 800e2e0:	1d39      	adds	r1, r7, #4
 800e2e2:	f107 0308 	add.w	r3, r7, #8
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f2 fc10 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	9202      	str	r2, [sp, #8]
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	460a      	mov	r2, r1
 800e2fe:	491f      	ldr	r1, [pc, #124]	; (800e37c <vTaskStartScheduler+0xac>)
 800e300:	481f      	ldr	r0, [pc, #124]	; (800e380 <vTaskStartScheduler+0xb0>)
 800e302:	f7ff fe0c 	bl	800df1e <xTaskCreateStatic>
 800e306:	4602      	mov	r2, r0
 800e308:	4b1e      	ldr	r3, [pc, #120]	; (800e384 <vTaskStartScheduler+0xb4>)
 800e30a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e30c:	4b1d      	ldr	r3, [pc, #116]	; (800e384 <vTaskStartScheduler+0xb4>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e314:	2301      	movs	r3, #1
 800e316:	617b      	str	r3, [r7, #20]
 800e318:	e001      	b.n	800e31e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e31a:	2300      	movs	r3, #0
 800e31c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d117      	bne.n	800e354 <vTaskStartScheduler+0x84>
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	b672      	cpsid	i
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	b662      	cpsie	i
 800e338:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e33a:	4b13      	ldr	r3, [pc, #76]	; (800e388 <vTaskStartScheduler+0xb8>)
 800e33c:	f04f 32ff 	mov.w	r2, #4294967295
 800e340:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e342:	4b12      	ldr	r3, [pc, #72]	; (800e38c <vTaskStartScheduler+0xbc>)
 800e344:	2201      	movs	r2, #1
 800e346:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e348:	4b11      	ldr	r3, [pc, #68]	; (800e390 <vTaskStartScheduler+0xc0>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e34e:	f000 fed7 	bl	800f100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e352:	e00f      	b.n	800e374 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35a:	d10b      	bne.n	800e374 <vTaskStartScheduler+0xa4>
 800e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e360:	b672      	cpsid	i
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	b662      	cpsie	i
 800e370:	60fb      	str	r3, [r7, #12]
 800e372:	e7fe      	b.n	800e372 <vTaskStartScheduler+0xa2>
}
 800e374:	bf00      	nop
 800e376:	3718      	adds	r7, #24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	08029460 	.word	0x08029460
 800e380:	0800e9c9 	.word	0x0800e9c9
 800e384:	20000520 	.word	0x20000520
 800e388:	2000051c 	.word	0x2000051c
 800e38c:	20000508 	.word	0x20000508
 800e390:	20000500 	.word	0x20000500

0800e394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e394:	b480      	push	{r7}
 800e396:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e398:	4b04      	ldr	r3, [pc, #16]	; (800e3ac <vTaskSuspendAll+0x18>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	3301      	adds	r3, #1
 800e39e:	4a03      	ldr	r2, [pc, #12]	; (800e3ac <vTaskSuspendAll+0x18>)
 800e3a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e3a2:	bf00      	nop
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	20000524 	.word	0x20000524

0800e3b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3be:	4b42      	ldr	r3, [pc, #264]	; (800e4c8 <xTaskResumeAll+0x118>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d10b      	bne.n	800e3de <xTaskResumeAll+0x2e>
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	b672      	cpsid	i
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	b662      	cpsie	i
 800e3da:	603b      	str	r3, [r7, #0]
 800e3dc:	e7fe      	b.n	800e3dc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3de:	f000 ff0b 	bl	800f1f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3e2:	4b39      	ldr	r3, [pc, #228]	; (800e4c8 <xTaskResumeAll+0x118>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	4a37      	ldr	r2, [pc, #220]	; (800e4c8 <xTaskResumeAll+0x118>)
 800e3ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3ec:	4b36      	ldr	r3, [pc, #216]	; (800e4c8 <xTaskResumeAll+0x118>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d161      	bne.n	800e4b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3f4:	4b35      	ldr	r3, [pc, #212]	; (800e4cc <xTaskResumeAll+0x11c>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d05d      	beq.n	800e4b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3fc:	e02e      	b.n	800e45c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3fe:	4b34      	ldr	r3, [pc, #208]	; (800e4d0 <xTaskResumeAll+0x120>)
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3318      	adds	r3, #24
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe fe48 	bl	800d0a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	3304      	adds	r3, #4
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe fe43 	bl	800d0a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e41e:	2201      	movs	r2, #1
 800e420:	409a      	lsls	r2, r3
 800e422:	4b2c      	ldr	r3, [pc, #176]	; (800e4d4 <xTaskResumeAll+0x124>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4313      	orrs	r3, r2
 800e428:	4a2a      	ldr	r2, [pc, #168]	; (800e4d4 <xTaskResumeAll+0x124>)
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e430:	4613      	mov	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4a27      	ldr	r2, [pc, #156]	; (800e4d8 <xTaskResumeAll+0x128>)
 800e43a:	441a      	add	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3304      	adds	r3, #4
 800e440:	4619      	mov	r1, r3
 800e442:	4610      	mov	r0, r2
 800e444:	f7fe fdcf 	bl	800cfe6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44c:	4b23      	ldr	r3, [pc, #140]	; (800e4dc <xTaskResumeAll+0x12c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e452:	429a      	cmp	r2, r3
 800e454:	d302      	bcc.n	800e45c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e456:	4b22      	ldr	r3, [pc, #136]	; (800e4e0 <xTaskResumeAll+0x130>)
 800e458:	2201      	movs	r2, #1
 800e45a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e45c:	4b1c      	ldr	r3, [pc, #112]	; (800e4d0 <xTaskResumeAll+0x120>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1cc      	bne.n	800e3fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e46a:	f000 fb63 	bl	800eb34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e46e:	4b1d      	ldr	r3, [pc, #116]	; (800e4e4 <xTaskResumeAll+0x134>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d010      	beq.n	800e49c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e47a:	f000 f859 	bl	800e530 <xTaskIncrementTick>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e484:	4b16      	ldr	r3, [pc, #88]	; (800e4e0 <xTaskResumeAll+0x130>)
 800e486:	2201      	movs	r2, #1
 800e488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1f1      	bne.n	800e47a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e496:	4b13      	ldr	r3, [pc, #76]	; (800e4e4 <xTaskResumeAll+0x134>)
 800e498:	2200      	movs	r2, #0
 800e49a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e49c:	4b10      	ldr	r3, [pc, #64]	; (800e4e0 <xTaskResumeAll+0x130>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d009      	beq.n	800e4b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4a8:	4b0f      	ldr	r3, [pc, #60]	; (800e4e8 <xTaskResumeAll+0x138>)
 800e4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4b8:	f000 fed0 	bl	800f25c <vPortExitCritical>

	return xAlreadyYielded;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20000524 	.word	0x20000524
 800e4cc:	200004fc 	.word	0x200004fc
 800e4d0:	200004bc 	.word	0x200004bc
 800e4d4:	20000504 	.word	0x20000504
 800e4d8:	20000400 	.word	0x20000400
 800e4dc:	200003fc 	.word	0x200003fc
 800e4e0:	20000510 	.word	0x20000510
 800e4e4:	2000050c 	.word	0x2000050c
 800e4e8:	e000ed04 	.word	0xe000ed04

0800e4ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4f2:	4b05      	ldr	r3, [pc, #20]	; (800e508 <xTaskGetTickCount+0x1c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4f8:	687b      	ldr	r3, [r7, #4]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop
 800e508:	20000500 	.word	0x20000500

0800e50c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e512:	f000 ff51 	bl	800f3b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e516:	2300      	movs	r3, #0
 800e518:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e51a:	4b04      	ldr	r3, [pc, #16]	; (800e52c <xTaskGetTickCountFromISR+0x20>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e520:	683b      	ldr	r3, [r7, #0]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	20000500 	.word	0x20000500

0800e530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e536:	2300      	movs	r3, #0
 800e538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e53a:	4b4f      	ldr	r3, [pc, #316]	; (800e678 <xTaskIncrementTick+0x148>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	f040 8089 	bne.w	800e656 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e544:	4b4d      	ldr	r3, [pc, #308]	; (800e67c <xTaskIncrementTick+0x14c>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3301      	adds	r3, #1
 800e54a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e54c:	4a4b      	ldr	r2, [pc, #300]	; (800e67c <xTaskIncrementTick+0x14c>)
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d121      	bne.n	800e59c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e558:	4b49      	ldr	r3, [pc, #292]	; (800e680 <xTaskIncrementTick+0x150>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00b      	beq.n	800e57a <xTaskIncrementTick+0x4a>
 800e562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e566:	b672      	cpsid	i
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	b662      	cpsie	i
 800e576:	603b      	str	r3, [r7, #0]
 800e578:	e7fe      	b.n	800e578 <xTaskIncrementTick+0x48>
 800e57a:	4b41      	ldr	r3, [pc, #260]	; (800e680 <xTaskIncrementTick+0x150>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	60fb      	str	r3, [r7, #12]
 800e580:	4b40      	ldr	r3, [pc, #256]	; (800e684 <xTaskIncrementTick+0x154>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a3e      	ldr	r2, [pc, #248]	; (800e680 <xTaskIncrementTick+0x150>)
 800e586:	6013      	str	r3, [r2, #0]
 800e588:	4a3e      	ldr	r2, [pc, #248]	; (800e684 <xTaskIncrementTick+0x154>)
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	4b3e      	ldr	r3, [pc, #248]	; (800e688 <xTaskIncrementTick+0x158>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3301      	adds	r3, #1
 800e594:	4a3c      	ldr	r2, [pc, #240]	; (800e688 <xTaskIncrementTick+0x158>)
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	f000 facc 	bl	800eb34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e59c:	4b3b      	ldr	r3, [pc, #236]	; (800e68c <xTaskIncrementTick+0x15c>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	693a      	ldr	r2, [r7, #16]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d348      	bcc.n	800e638 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5a6:	4b36      	ldr	r3, [pc, #216]	; (800e680 <xTaskIncrementTick+0x150>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d104      	bne.n	800e5ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5b0:	4b36      	ldr	r3, [pc, #216]	; (800e68c <xTaskIncrementTick+0x15c>)
 800e5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b6:	601a      	str	r2, [r3, #0]
					break;
 800e5b8:	e03e      	b.n	800e638 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5ba:	4b31      	ldr	r3, [pc, #196]	; (800e680 <xTaskIncrementTick+0x150>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d203      	bcs.n	800e5da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5d2:	4a2e      	ldr	r2, [pc, #184]	; (800e68c <xTaskIncrementTick+0x15c>)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5d8:	e02e      	b.n	800e638 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe fd5e 	bl	800d0a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d004      	beq.n	800e5f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	3318      	adds	r3, #24
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fe fd55 	bl	800d0a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	409a      	lsls	r2, r3
 800e5fe:	4b24      	ldr	r3, [pc, #144]	; (800e690 <xTaskIncrementTick+0x160>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4313      	orrs	r3, r2
 800e604:	4a22      	ldr	r2, [pc, #136]	; (800e690 <xTaskIncrementTick+0x160>)
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60c:	4613      	mov	r3, r2
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	4413      	add	r3, r2
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	4a1f      	ldr	r2, [pc, #124]	; (800e694 <xTaskIncrementTick+0x164>)
 800e616:	441a      	add	r2, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	3304      	adds	r3, #4
 800e61c:	4619      	mov	r1, r3
 800e61e:	4610      	mov	r0, r2
 800e620:	f7fe fce1 	bl	800cfe6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e628:	4b1b      	ldr	r3, [pc, #108]	; (800e698 <xTaskIncrementTick+0x168>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e62e:	429a      	cmp	r2, r3
 800e630:	d3b9      	bcc.n	800e5a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e632:	2301      	movs	r3, #1
 800e634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e636:	e7b6      	b.n	800e5a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e638:	4b17      	ldr	r3, [pc, #92]	; (800e698 <xTaskIncrementTick+0x168>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63e:	4915      	ldr	r1, [pc, #84]	; (800e694 <xTaskIncrementTick+0x164>)
 800e640:	4613      	mov	r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	440b      	add	r3, r1
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d907      	bls.n	800e660 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e650:	2301      	movs	r3, #1
 800e652:	617b      	str	r3, [r7, #20]
 800e654:	e004      	b.n	800e660 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e656:	4b11      	ldr	r3, [pc, #68]	; (800e69c <xTaskIncrementTick+0x16c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3301      	adds	r3, #1
 800e65c:	4a0f      	ldr	r2, [pc, #60]	; (800e69c <xTaskIncrementTick+0x16c>)
 800e65e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e660:	4b0f      	ldr	r3, [pc, #60]	; (800e6a0 <xTaskIncrementTick+0x170>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e668:	2301      	movs	r3, #1
 800e66a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e66c:	697b      	ldr	r3, [r7, #20]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3718      	adds	r7, #24
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20000524 	.word	0x20000524
 800e67c:	20000500 	.word	0x20000500
 800e680:	200004b4 	.word	0x200004b4
 800e684:	200004b8 	.word	0x200004b8
 800e688:	20000514 	.word	0x20000514
 800e68c:	2000051c 	.word	0x2000051c
 800e690:	20000504 	.word	0x20000504
 800e694:	20000400 	.word	0x20000400
 800e698:	200003fc 	.word	0x200003fc
 800e69c:	2000050c 	.word	0x2000050c
 800e6a0:	20000510 	.word	0x20000510

0800e6a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b088      	sub	sp, #32
 800e6a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6aa:	4b3a      	ldr	r3, [pc, #232]	; (800e794 <vTaskSwitchContext+0xf0>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d003      	beq.n	800e6ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6b2:	4b39      	ldr	r3, [pc, #228]	; (800e798 <vTaskSwitchContext+0xf4>)
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6b8:	e067      	b.n	800e78a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e6ba:	4b37      	ldr	r3, [pc, #220]	; (800e798 <vTaskSwitchContext+0xf4>)
 800e6bc:	2200      	movs	r2, #0
 800e6be:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e6c0:	4b36      	ldr	r3, [pc, #216]	; (800e79c <vTaskSwitchContext+0xf8>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c6:	61fb      	str	r3, [r7, #28]
 800e6c8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e6cc:	61bb      	str	r3, [r7, #24]
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	69ba      	ldr	r2, [r7, #24]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d111      	bne.n	800e6fc <vTaskSwitchContext+0x58>
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	3304      	adds	r3, #4
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	69ba      	ldr	r2, [r7, #24]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d10b      	bne.n	800e6fc <vTaskSwitchContext+0x58>
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	69ba      	ldr	r2, [r7, #24]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d105      	bne.n	800e6fc <vTaskSwitchContext+0x58>
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	330c      	adds	r3, #12
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	69ba      	ldr	r2, [r7, #24]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d008      	beq.n	800e70e <vTaskSwitchContext+0x6a>
 800e6fc:	4b27      	ldr	r3, [pc, #156]	; (800e79c <vTaskSwitchContext+0xf8>)
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	4b26      	ldr	r3, [pc, #152]	; (800e79c <vTaskSwitchContext+0xf8>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	3334      	adds	r3, #52	; 0x34
 800e706:	4619      	mov	r1, r3
 800e708:	4610      	mov	r0, r2
 800e70a:	f7f2 f9ec 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70e:	4b24      	ldr	r3, [pc, #144]	; (800e7a0 <vTaskSwitchContext+0xfc>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	fab3 f383 	clz	r3, r3
 800e71a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e71c:	7afb      	ldrb	r3, [r7, #11]
 800e71e:	f1c3 031f 	rsb	r3, r3, #31
 800e722:	617b      	str	r3, [r7, #20]
 800e724:	491f      	ldr	r1, [pc, #124]	; (800e7a4 <vTaskSwitchContext+0x100>)
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	4613      	mov	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	4413      	add	r3, r2
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	440b      	add	r3, r1
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d10b      	bne.n	800e750 <vTaskSwitchContext+0xac>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	b672      	cpsid	i
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	b662      	cpsie	i
 800e74c:	607b      	str	r3, [r7, #4]
 800e74e:	e7fe      	b.n	800e74e <vTaskSwitchContext+0xaa>
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	4613      	mov	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4413      	add	r3, r2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	4a12      	ldr	r2, [pc, #72]	; (800e7a4 <vTaskSwitchContext+0x100>)
 800e75c:	4413      	add	r3, r2
 800e75e:	613b      	str	r3, [r7, #16]
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	605a      	str	r2, [r3, #4]
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	3308      	adds	r3, #8
 800e772:	429a      	cmp	r2, r3
 800e774:	d104      	bne.n	800e780 <vTaskSwitchContext+0xdc>
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	605a      	str	r2, [r3, #4]
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	4a05      	ldr	r2, [pc, #20]	; (800e79c <vTaskSwitchContext+0xf8>)
 800e788:	6013      	str	r3, [r2, #0]
}
 800e78a:	bf00      	nop
 800e78c:	3720      	adds	r7, #32
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	20000524 	.word	0x20000524
 800e798:	20000510 	.word	0x20000510
 800e79c:	200003fc 	.word	0x200003fc
 800e7a0:	20000504 	.word	0x20000504
 800e7a4:	20000400 	.word	0x20000400

0800e7a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10b      	bne.n	800e7d0 <vTaskPlaceOnEventList+0x28>
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	b672      	cpsid	i
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	b662      	cpsie	i
 800e7cc:	60fb      	str	r3, [r7, #12]
 800e7ce:	e7fe      	b.n	800e7ce <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7d0:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <vTaskPlaceOnEventList+0x48>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	3318      	adds	r3, #24
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7fe fc28 	bl	800d02e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7de:	2101      	movs	r1, #1
 800e7e0:	6838      	ldr	r0, [r7, #0]
 800e7e2:	f000 fb9d 	bl	800ef20 <prvAddCurrentTaskToDelayedList>
}
 800e7e6:	bf00      	nop
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	200003fc 	.word	0x200003fc

0800e7f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10b      	bne.n	800e822 <xTaskRemoveFromEventList+0x2e>
 800e80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80e:	b672      	cpsid	i
 800e810:	f383 8811 	msr	BASEPRI, r3
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	b662      	cpsie	i
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	e7fe      	b.n	800e820 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	3318      	adds	r3, #24
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fc3a 	bl	800d0a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e82c:	4b1d      	ldr	r3, [pc, #116]	; (800e8a4 <xTaskRemoveFromEventList+0xb0>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d11c      	bne.n	800e86e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	3304      	adds	r3, #4
 800e838:	4618      	mov	r0, r3
 800e83a:	f7fe fc31 	bl	800d0a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e842:	2201      	movs	r2, #1
 800e844:	409a      	lsls	r2, r3
 800e846:	4b18      	ldr	r3, [pc, #96]	; (800e8a8 <xTaskRemoveFromEventList+0xb4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	4a16      	ldr	r2, [pc, #88]	; (800e8a8 <xTaskRemoveFromEventList+0xb4>)
 800e84e:	6013      	str	r3, [r2, #0]
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4a13      	ldr	r2, [pc, #76]	; (800e8ac <xTaskRemoveFromEventList+0xb8>)
 800e85e:	441a      	add	r2, r3
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	3304      	adds	r3, #4
 800e864:	4619      	mov	r1, r3
 800e866:	4610      	mov	r0, r2
 800e868:	f7fe fbbd 	bl	800cfe6 <vListInsertEnd>
 800e86c:	e005      	b.n	800e87a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	3318      	adds	r3, #24
 800e872:	4619      	mov	r1, r3
 800e874:	480e      	ldr	r0, [pc, #56]	; (800e8b0 <xTaskRemoveFromEventList+0xbc>)
 800e876:	f7fe fbb6 	bl	800cfe6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87e:	4b0d      	ldr	r3, [pc, #52]	; (800e8b4 <xTaskRemoveFromEventList+0xc0>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e884:	429a      	cmp	r2, r3
 800e886:	d905      	bls.n	800e894 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e888:	2301      	movs	r3, #1
 800e88a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e88c:	4b0a      	ldr	r3, [pc, #40]	; (800e8b8 <xTaskRemoveFromEventList+0xc4>)
 800e88e:	2201      	movs	r2, #1
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	e001      	b.n	800e898 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e894:	2300      	movs	r3, #0
 800e896:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e898:	697b      	ldr	r3, [r7, #20]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20000524 	.word	0x20000524
 800e8a8:	20000504 	.word	0x20000504
 800e8ac:	20000400 	.word	0x20000400
 800e8b0:	200004bc 	.word	0x200004bc
 800e8b4:	200003fc 	.word	0x200003fc
 800e8b8:	20000510 	.word	0x20000510

0800e8bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8c4:	4b06      	ldr	r3, [pc, #24]	; (800e8e0 <vTaskInternalSetTimeOutState+0x24>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8cc:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <vTaskInternalSetTimeOutState+0x28>)
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	605a      	str	r2, [r3, #4]
}
 800e8d4:	bf00      	nop
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	20000514 	.word	0x20000514
 800e8e4:	20000500 	.word	0x20000500

0800e8e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b088      	sub	sp, #32
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10b      	bne.n	800e910 <xTaskCheckForTimeOut+0x28>
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	b672      	cpsid	i
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	b662      	cpsie	i
 800e90c:	613b      	str	r3, [r7, #16]
 800e90e:	e7fe      	b.n	800e90e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10b      	bne.n	800e92e <xTaskCheckForTimeOut+0x46>
 800e916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91a:	b672      	cpsid	i
 800e91c:	f383 8811 	msr	BASEPRI, r3
 800e920:	f3bf 8f6f 	isb	sy
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	b662      	cpsie	i
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	e7fe      	b.n	800e92c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e92e:	f000 fc63 	bl	800f1f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e932:	4b1d      	ldr	r3, [pc, #116]	; (800e9a8 <xTaskCheckForTimeOut+0xc0>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	69ba      	ldr	r2, [r7, #24]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94a:	d102      	bne.n	800e952 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e94c:	2300      	movs	r3, #0
 800e94e:	61fb      	str	r3, [r7, #28]
 800e950:	e023      	b.n	800e99a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	4b15      	ldr	r3, [pc, #84]	; (800e9ac <xTaskCheckForTimeOut+0xc4>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d007      	beq.n	800e96e <xTaskCheckForTimeOut+0x86>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	69ba      	ldr	r2, [r7, #24]
 800e964:	429a      	cmp	r2, r3
 800e966:	d302      	bcc.n	800e96e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e968:	2301      	movs	r3, #1
 800e96a:	61fb      	str	r3, [r7, #28]
 800e96c:	e015      	b.n	800e99a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	697a      	ldr	r2, [r7, #20]
 800e974:	429a      	cmp	r2, r3
 800e976:	d20b      	bcs.n	800e990 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	1ad2      	subs	r2, r2, r3
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff ff99 	bl	800e8bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e98a:	2300      	movs	r3, #0
 800e98c:	61fb      	str	r3, [r7, #28]
 800e98e:	e004      	b.n	800e99a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	2200      	movs	r2, #0
 800e994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e996:	2301      	movs	r3, #1
 800e998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e99a:	f000 fc5f 	bl	800f25c <vPortExitCritical>

	return xReturn;
 800e99e:	69fb      	ldr	r3, [r7, #28]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3720      	adds	r7, #32
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	20000500 	.word	0x20000500
 800e9ac:	20000514 	.word	0x20000514

0800e9b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9b4:	4b03      	ldr	r3, [pc, #12]	; (800e9c4 <vTaskMissedYield+0x14>)
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	601a      	str	r2, [r3, #0]
}
 800e9ba:	bf00      	nop
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr
 800e9c4:	20000510 	.word	0x20000510

0800e9c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9d0:	f000 f854 	bl	800ea7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9d4:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <prvIdleTask+0x2c>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d907      	bls.n	800e9ec <prvIdleTask+0x24>
			{
				taskYIELD();
 800e9dc:	4b06      	ldr	r3, [pc, #24]	; (800e9f8 <prvIdleTask+0x30>)
 800e9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e9ec:	f7f2 f874 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e9f0:	e7ee      	b.n	800e9d0 <prvIdleTask+0x8>
 800e9f2:	bf00      	nop
 800e9f4:	20000400 	.word	0x20000400
 800e9f8:	e000ed04 	.word	0xe000ed04

0800e9fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea02:	2300      	movs	r3, #0
 800ea04:	607b      	str	r3, [r7, #4]
 800ea06:	e00c      	b.n	800ea22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4413      	add	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4a12      	ldr	r2, [pc, #72]	; (800ea5c <prvInitialiseTaskLists+0x60>)
 800ea14:	4413      	add	r3, r2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fe fab8 	bl	800cf8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	607b      	str	r3, [r7, #4]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2b06      	cmp	r3, #6
 800ea26:	d9ef      	bls.n	800ea08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea28:	480d      	ldr	r0, [pc, #52]	; (800ea60 <prvInitialiseTaskLists+0x64>)
 800ea2a:	f7fe faaf 	bl	800cf8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea2e:	480d      	ldr	r0, [pc, #52]	; (800ea64 <prvInitialiseTaskLists+0x68>)
 800ea30:	f7fe faac 	bl	800cf8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea34:	480c      	ldr	r0, [pc, #48]	; (800ea68 <prvInitialiseTaskLists+0x6c>)
 800ea36:	f7fe faa9 	bl	800cf8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea3a:	480c      	ldr	r0, [pc, #48]	; (800ea6c <prvInitialiseTaskLists+0x70>)
 800ea3c:	f7fe faa6 	bl	800cf8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea40:	480b      	ldr	r0, [pc, #44]	; (800ea70 <prvInitialiseTaskLists+0x74>)
 800ea42:	f7fe faa3 	bl	800cf8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea46:	4b0b      	ldr	r3, [pc, #44]	; (800ea74 <prvInitialiseTaskLists+0x78>)
 800ea48:	4a05      	ldr	r2, [pc, #20]	; (800ea60 <prvInitialiseTaskLists+0x64>)
 800ea4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	; (800ea78 <prvInitialiseTaskLists+0x7c>)
 800ea4e:	4a05      	ldr	r2, [pc, #20]	; (800ea64 <prvInitialiseTaskLists+0x68>)
 800ea50:	601a      	str	r2, [r3, #0]
}
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20000400 	.word	0x20000400
 800ea60:	2000048c 	.word	0x2000048c
 800ea64:	200004a0 	.word	0x200004a0
 800ea68:	200004bc 	.word	0x200004bc
 800ea6c:	200004d0 	.word	0x200004d0
 800ea70:	200004e8 	.word	0x200004e8
 800ea74:	200004b4 	.word	0x200004b4
 800ea78:	200004b8 	.word	0x200004b8

0800ea7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea82:	e019      	b.n	800eab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea84:	f000 fbb8 	bl	800f1f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea88:	4b0f      	ldr	r3, [pc, #60]	; (800eac8 <prvCheckTasksWaitingTermination+0x4c>)
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	3304      	adds	r3, #4
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fe fb03 	bl	800d0a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea9a:	4b0c      	ldr	r3, [pc, #48]	; (800eacc <prvCheckTasksWaitingTermination+0x50>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	4a0a      	ldr	r2, [pc, #40]	; (800eacc <prvCheckTasksWaitingTermination+0x50>)
 800eaa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eaa4:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <prvCheckTasksWaitingTermination+0x54>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	4a09      	ldr	r2, [pc, #36]	; (800ead0 <prvCheckTasksWaitingTermination+0x54>)
 800eaac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eaae:	f000 fbd5 	bl	800f25c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f80e 	bl	800ead4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eab8:	4b05      	ldr	r3, [pc, #20]	; (800ead0 <prvCheckTasksWaitingTermination+0x54>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1e1      	bne.n	800ea84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	200004d0 	.word	0x200004d0
 800eacc:	200004fc 	.word	0x200004fc
 800ead0:	200004e4 	.word	0x200004e4

0800ead4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d108      	bne.n	800eaf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaea:	4618      	mov	r0, r3
 800eaec:	f000 fd72 	bl	800f5d4 <vPortFree>
				vPortFree( pxTCB );
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fd6f 	bl	800f5d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eaf6:	e019      	b.n	800eb2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d103      	bne.n	800eb0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fd66 	bl	800f5d4 <vPortFree>
	}
 800eb08:	e010      	b.n	800eb2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800eb10:	2b02      	cmp	r3, #2
 800eb12:	d00b      	beq.n	800eb2c <prvDeleteTCB+0x58>
 800eb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb18:	b672      	cpsid	i
 800eb1a:	f383 8811 	msr	BASEPRI, r3
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	b662      	cpsie	i
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	e7fe      	b.n	800eb2a <prvDeleteTCB+0x56>
	}
 800eb2c:	bf00      	nop
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb3a:	4b0c      	ldr	r3, [pc, #48]	; (800eb6c <prvResetNextTaskUnblockTime+0x38>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d104      	bne.n	800eb4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb44:	4b0a      	ldr	r3, [pc, #40]	; (800eb70 <prvResetNextTaskUnblockTime+0x3c>)
 800eb46:	f04f 32ff 	mov.w	r2, #4294967295
 800eb4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb4c:	e008      	b.n	800eb60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb4e:	4b07      	ldr	r3, [pc, #28]	; (800eb6c <prvResetNextTaskUnblockTime+0x38>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	4a04      	ldr	r2, [pc, #16]	; (800eb70 <prvResetNextTaskUnblockTime+0x3c>)
 800eb5e:	6013      	str	r3, [r2, #0]
}
 800eb60:	bf00      	nop
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	200004b4 	.word	0x200004b4
 800eb70:	2000051c 	.word	0x2000051c

0800eb74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb7a:	4b0b      	ldr	r3, [pc, #44]	; (800eba8 <xTaskGetSchedulerState+0x34>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d102      	bne.n	800eb88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb82:	2301      	movs	r3, #1
 800eb84:	607b      	str	r3, [r7, #4]
 800eb86:	e008      	b.n	800eb9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb88:	4b08      	ldr	r3, [pc, #32]	; (800ebac <xTaskGetSchedulerState+0x38>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d102      	bne.n	800eb96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb90:	2302      	movs	r3, #2
 800eb92:	607b      	str	r3, [r7, #4]
 800eb94:	e001      	b.n	800eb9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb96:	2300      	movs	r3, #0
 800eb98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb9a:	687b      	ldr	r3, [r7, #4]
	}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	20000508 	.word	0x20000508
 800ebac:	20000524 	.word	0x20000524

0800ebb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d069      	beq.n	800ec9a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebca:	4b36      	ldr	r3, [pc, #216]	; (800eca4 <xTaskPriorityInherit+0xf4>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d259      	bcs.n	800ec88 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	699b      	ldr	r3, [r3, #24]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	db06      	blt.n	800ebea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebdc:	4b31      	ldr	r3, [pc, #196]	; (800eca4 <xTaskPriorityInherit+0xf4>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe2:	f1c3 0207 	rsb	r2, r3, #7
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	6959      	ldr	r1, [r3, #20]
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	4413      	add	r3, r2
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	4a2b      	ldr	r2, [pc, #172]	; (800eca8 <xTaskPriorityInherit+0xf8>)
 800ebfc:	4413      	add	r3, r2
 800ebfe:	4299      	cmp	r1, r3
 800ec00:	d13a      	bne.n	800ec78 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	3304      	adds	r3, #4
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fe fa4a 	bl	800d0a0 <uxListRemove>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d115      	bne.n	800ec3e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec16:	4924      	ldr	r1, [pc, #144]	; (800eca8 <xTaskPriorityInherit+0xf8>)
 800ec18:	4613      	mov	r3, r2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	4413      	add	r3, r2
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	440b      	add	r3, r1
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10a      	bne.n	800ec3e <xTaskPriorityInherit+0x8e>
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec32:	43da      	mvns	r2, r3
 800ec34:	4b1d      	ldr	r3, [pc, #116]	; (800ecac <xTaskPriorityInherit+0xfc>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4013      	ands	r3, r2
 800ec3a:	4a1c      	ldr	r2, [pc, #112]	; (800ecac <xTaskPriorityInherit+0xfc>)
 800ec3c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec3e:	4b19      	ldr	r3, [pc, #100]	; (800eca4 <xTaskPriorityInherit+0xf4>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	409a      	lsls	r2, r3
 800ec50:	4b16      	ldr	r3, [pc, #88]	; (800ecac <xTaskPriorityInherit+0xfc>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	4a15      	ldr	r2, [pc, #84]	; (800ecac <xTaskPriorityInherit+0xfc>)
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5e:	4613      	mov	r3, r2
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4413      	add	r3, r2
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	4a10      	ldr	r2, [pc, #64]	; (800eca8 <xTaskPriorityInherit+0xf8>)
 800ec68:	441a      	add	r2, r3
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	4619      	mov	r1, r3
 800ec70:	4610      	mov	r0, r2
 800ec72:	f7fe f9b8 	bl	800cfe6 <vListInsertEnd>
 800ec76:	e004      	b.n	800ec82 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec78:	4b0a      	ldr	r3, [pc, #40]	; (800eca4 <xTaskPriorityInherit+0xf4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec82:	2301      	movs	r3, #1
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	e008      	b.n	800ec9a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec8c:	4b05      	ldr	r3, [pc, #20]	; (800eca4 <xTaskPriorityInherit+0xf4>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d201      	bcs.n	800ec9a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec96:	2301      	movs	r3, #1
 800ec98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
	}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	200003fc 	.word	0x200003fc
 800eca8:	20000400 	.word	0x20000400
 800ecac:	20000504 	.word	0x20000504

0800ecb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d070      	beq.n	800eda8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecc6:	4b3b      	ldr	r3, [pc, #236]	; (800edb4 <xTaskPriorityDisinherit+0x104>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	693a      	ldr	r2, [r7, #16]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d00b      	beq.n	800ece8 <xTaskPriorityDisinherit+0x38>
 800ecd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd4:	b672      	cpsid	i
 800ecd6:	f383 8811 	msr	BASEPRI, r3
 800ecda:	f3bf 8f6f 	isb	sy
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	b662      	cpsie	i
 800ece4:	60fb      	str	r3, [r7, #12]
 800ece6:	e7fe      	b.n	800ece6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10b      	bne.n	800ed08 <xTaskPriorityDisinherit+0x58>
 800ecf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf4:	b672      	cpsid	i
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	b662      	cpsie	i
 800ed04:	60bb      	str	r3, [r7, #8]
 800ed06:	e7fe      	b.n	800ed06 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed0c:	1e5a      	subs	r2, r3, #1
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d044      	beq.n	800eda8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d140      	bne.n	800eda8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fe f9b8 	bl	800d0a0 <uxListRemove>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d115      	bne.n	800ed62 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3a:	491f      	ldr	r1, [pc, #124]	; (800edb8 <xTaskPriorityDisinherit+0x108>)
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4413      	add	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	440b      	add	r3, r1
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d10a      	bne.n	800ed62 <xTaskPriorityDisinherit+0xb2>
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed50:	2201      	movs	r2, #1
 800ed52:	fa02 f303 	lsl.w	r3, r2, r3
 800ed56:	43da      	mvns	r2, r3
 800ed58:	4b18      	ldr	r3, [pc, #96]	; (800edbc <xTaskPriorityDisinherit+0x10c>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4013      	ands	r3, r2
 800ed5e:	4a17      	ldr	r2, [pc, #92]	; (800edbc <xTaskPriorityDisinherit+0x10c>)
 800ed60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6e:	f1c3 0207 	rsb	r2, r3, #7
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	409a      	lsls	r2, r3
 800ed7e:	4b0f      	ldr	r3, [pc, #60]	; (800edbc <xTaskPriorityDisinherit+0x10c>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	4a0d      	ldr	r2, [pc, #52]	; (800edbc <xTaskPriorityDisinherit+0x10c>)
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4413      	add	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4a08      	ldr	r2, [pc, #32]	; (800edb8 <xTaskPriorityDisinherit+0x108>)
 800ed96:	441a      	add	r2, r3
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4610      	mov	r0, r2
 800eda0:	f7fe f921 	bl	800cfe6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eda4:	2301      	movs	r3, #1
 800eda6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eda8:	697b      	ldr	r3, [r7, #20]
	}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	200003fc 	.word	0x200003fc
 800edb8:	20000400 	.word	0x20000400
 800edbc:	20000504 	.word	0x20000504

0800edc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b088      	sub	sp, #32
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800edce:	2301      	movs	r3, #1
 800edd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 8085 	beq.w	800eee4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10b      	bne.n	800edfa <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ede2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede6:	b672      	cpsid	i
 800ede8:	f383 8811 	msr	BASEPRI, r3
 800edec:	f3bf 8f6f 	isb	sy
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	b662      	cpsie	i
 800edf6:	60fb      	str	r3, [r7, #12]
 800edf8:	e7fe      	b.n	800edf8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d902      	bls.n	800ee0a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	61fb      	str	r3, [r7, #28]
 800ee08:	e002      	b.n	800ee10 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee14:	69fa      	ldr	r2, [r7, #28]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d064      	beq.n	800eee4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d15f      	bne.n	800eee4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee24:	4b31      	ldr	r3, [pc, #196]	; (800eeec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	69ba      	ldr	r2, [r7, #24]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d10b      	bne.n	800ee46 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ee2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee32:	b672      	cpsid	i
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	b662      	cpsie	i
 800ee42:	60bb      	str	r3, [r7, #8]
 800ee44:	e7fe      	b.n	800ee44 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	69fa      	ldr	r2, [r7, #28]
 800ee50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	db04      	blt.n	800ee64 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	f1c3 0207 	rsb	r2, r3, #7
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	6959      	ldr	r1, [r3, #20]
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4a1f      	ldr	r2, [pc, #124]	; (800eef0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ee74:	4413      	add	r3, r2
 800ee76:	4299      	cmp	r1, r3
 800ee78:	d134      	bne.n	800eee4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fe f90e 	bl	800d0a0 <uxListRemove>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d115      	bne.n	800eeb6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8e:	4918      	ldr	r1, [pc, #96]	; (800eef0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ee90:	4613      	mov	r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	4413      	add	r3, r2
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	440b      	add	r3, r1
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10a      	bne.n	800eeb6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea4:	2201      	movs	r2, #1
 800eea6:	fa02 f303 	lsl.w	r3, r2, r3
 800eeaa:	43da      	mvns	r2, r3
 800eeac:	4b11      	ldr	r3, [pc, #68]	; (800eef4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4013      	ands	r3, r2
 800eeb2:	4a10      	ldr	r2, [pc, #64]	; (800eef4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eeb4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeba:	2201      	movs	r2, #1
 800eebc:	409a      	lsls	r2, r3
 800eebe:	4b0d      	ldr	r3, [pc, #52]	; (800eef4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	4a0b      	ldr	r2, [pc, #44]	; (800eef4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4a06      	ldr	r2, [pc, #24]	; (800eef0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eed6:	441a      	add	r2, r3
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	3304      	adds	r3, #4
 800eedc:	4619      	mov	r1, r3
 800eede:	4610      	mov	r0, r2
 800eee0:	f7fe f881 	bl	800cfe6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eee4:	bf00      	nop
 800eee6:	3720      	adds	r7, #32
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	200003fc 	.word	0x200003fc
 800eef0:	20000400 	.word	0x20000400
 800eef4:	20000504 	.word	0x20000504

0800eef8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eef8:	b480      	push	{r7}
 800eefa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eefc:	4b07      	ldr	r3, [pc, #28]	; (800ef1c <pvTaskIncrementMutexHeldCount+0x24>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d004      	beq.n	800ef0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef04:	4b05      	ldr	r3, [pc, #20]	; (800ef1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef0a:	3201      	adds	r2, #1
 800ef0c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ef0e:	4b03      	ldr	r3, [pc, #12]	; (800ef1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ef10:	681b      	ldr	r3, [r3, #0]
	}
 800ef12:	4618      	mov	r0, r3
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	200003fc 	.word	0x200003fc

0800ef20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef2a:	4b29      	ldr	r3, [pc, #164]	; (800efd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef30:	4b28      	ldr	r3, [pc, #160]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	3304      	adds	r3, #4
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe f8b2 	bl	800d0a0 <uxListRemove>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d10b      	bne.n	800ef5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef42:	4b24      	ldr	r3, [pc, #144]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef48:	2201      	movs	r2, #1
 800ef4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef4e:	43da      	mvns	r2, r3
 800ef50:	4b21      	ldr	r3, [pc, #132]	; (800efd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4013      	ands	r3, r2
 800ef56:	4a20      	ldr	r2, [pc, #128]	; (800efd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef60:	d10a      	bne.n	800ef78 <prvAddCurrentTaskToDelayedList+0x58>
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d007      	beq.n	800ef78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef68:	4b1a      	ldr	r3, [pc, #104]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	4619      	mov	r1, r3
 800ef70:	481a      	ldr	r0, [pc, #104]	; (800efdc <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef72:	f7fe f838 	bl	800cfe6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef76:	e026      	b.n	800efc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef80:	4b14      	ldr	r3, [pc, #80]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef88:	68ba      	ldr	r2, [r7, #8]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d209      	bcs.n	800efa4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef90:	4b13      	ldr	r3, [pc, #76]	; (800efe0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	4b0f      	ldr	r3, [pc, #60]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	3304      	adds	r3, #4
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	f7fe f846 	bl	800d02e <vListInsert>
}
 800efa2:	e010      	b.n	800efc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efa4:	4b0f      	ldr	r3, [pc, #60]	; (800efe4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	4b0a      	ldr	r3, [pc, #40]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3304      	adds	r3, #4
 800efae:	4619      	mov	r1, r3
 800efb0:	4610      	mov	r0, r2
 800efb2:	f7fe f83c 	bl	800d02e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efb6:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d202      	bcs.n	800efc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800efc0:	4a09      	ldr	r2, [pc, #36]	; (800efe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	6013      	str	r3, [r2, #0]
}
 800efc6:	bf00      	nop
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	20000500 	.word	0x20000500
 800efd4:	200003fc 	.word	0x200003fc
 800efd8:	20000504 	.word	0x20000504
 800efdc:	200004e8 	.word	0x200004e8
 800efe0:	200004b8 	.word	0x200004b8
 800efe4:	200004b4 	.word	0x200004b4
 800efe8:	2000051c 	.word	0x2000051c

0800efec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	3b04      	subs	r3, #4
 800effc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3b04      	subs	r3, #4
 800f00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	f023 0201 	bic.w	r2, r3, #1
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	3b04      	subs	r3, #4
 800f01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f01c:	4a0c      	ldr	r2, [pc, #48]	; (800f050 <pxPortInitialiseStack+0x64>)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	3b14      	subs	r3, #20
 800f026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3b04      	subs	r3, #4
 800f032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f06f 0202 	mvn.w	r2, #2
 800f03a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	3b20      	subs	r3, #32
 800f040:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f042:	68fb      	ldr	r3, [r7, #12]
}
 800f044:	4618      	mov	r0, r3
 800f046:	3714      	adds	r7, #20
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	0800f055 	.word	0x0800f055

0800f054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f05a:	2300      	movs	r3, #0
 800f05c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f05e:	4b13      	ldr	r3, [pc, #76]	; (800f0ac <prvTaskExitError+0x58>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d00b      	beq.n	800f080 <prvTaskExitError+0x2c>
 800f068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06c:	b672      	cpsid	i
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	b662      	cpsie	i
 800f07c:	60fb      	str	r3, [r7, #12]
 800f07e:	e7fe      	b.n	800f07e <prvTaskExitError+0x2a>
 800f080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f084:	b672      	cpsid	i
 800f086:	f383 8811 	msr	BASEPRI, r3
 800f08a:	f3bf 8f6f 	isb	sy
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	b662      	cpsie	i
 800f094:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f096:	bf00      	nop
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d0fc      	beq.n	800f098 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f09e:	bf00      	nop
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr
 800f0aa:	bf00      	nop
 800f0ac:	20000024 	.word	0x20000024

0800f0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0b0:	4b07      	ldr	r3, [pc, #28]	; (800f0d0 <pxCurrentTCBConst2>)
 800f0b2:	6819      	ldr	r1, [r3, #0]
 800f0b4:	6808      	ldr	r0, [r1, #0]
 800f0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ba:	f380 8809 	msr	PSP, r0
 800f0be:	f3bf 8f6f 	isb	sy
 800f0c2:	f04f 0000 	mov.w	r0, #0
 800f0c6:	f380 8811 	msr	BASEPRI, r0
 800f0ca:	4770      	bx	lr
 800f0cc:	f3af 8000 	nop.w

0800f0d0 <pxCurrentTCBConst2>:
 800f0d0:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0d4:	bf00      	nop
 800f0d6:	bf00      	nop

0800f0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0d8:	4808      	ldr	r0, [pc, #32]	; (800f0fc <prvPortStartFirstTask+0x24>)
 800f0da:	6800      	ldr	r0, [r0, #0]
 800f0dc:	6800      	ldr	r0, [r0, #0]
 800f0de:	f380 8808 	msr	MSP, r0
 800f0e2:	f04f 0000 	mov.w	r0, #0
 800f0e6:	f380 8814 	msr	CONTROL, r0
 800f0ea:	b662      	cpsie	i
 800f0ec:	b661      	cpsie	f
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	df00      	svc	0
 800f0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0fa:	bf00      	nop
 800f0fc:	e000ed08 	.word	0xe000ed08

0800f100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f106:	4b36      	ldr	r3, [pc, #216]	; (800f1e0 <xPortStartScheduler+0xe0>)
 800f108:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	22ff      	movs	r2, #255	; 0xff
 800f116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	b2db      	uxtb	r3, r3
 800f124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	4b2e      	ldr	r3, [pc, #184]	; (800f1e4 <xPortStartScheduler+0xe4>)
 800f12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f12e:	4b2e      	ldr	r3, [pc, #184]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f130:	2207      	movs	r2, #7
 800f132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f134:	e009      	b.n	800f14a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f136:	4b2c      	ldr	r3, [pc, #176]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	4a2a      	ldr	r2, [pc, #168]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	b2db      	uxtb	r3, r3
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	b2db      	uxtb	r3, r3
 800f148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f14a:	78fb      	ldrb	r3, [r7, #3]
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f152:	2b80      	cmp	r3, #128	; 0x80
 800f154:	d0ef      	beq.n	800f136 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f156:	4b24      	ldr	r3, [pc, #144]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f1c3 0307 	rsb	r3, r3, #7
 800f15e:	2b04      	cmp	r3, #4
 800f160:	d00b      	beq.n	800f17a <xPortStartScheduler+0x7a>
 800f162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f166:	b672      	cpsid	i
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	b662      	cpsie	i
 800f176:	60bb      	str	r3, [r7, #8]
 800f178:	e7fe      	b.n	800f178 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f17a:	4b1b      	ldr	r3, [pc, #108]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	021b      	lsls	r3, r3, #8
 800f180:	4a19      	ldr	r2, [pc, #100]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f182:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f184:	4b18      	ldr	r3, [pc, #96]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f18c:	4a16      	ldr	r2, [pc, #88]	; (800f1e8 <xPortStartScheduler+0xe8>)
 800f18e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	b2da      	uxtb	r2, r3
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f198:	4b14      	ldr	r3, [pc, #80]	; (800f1ec <xPortStartScheduler+0xec>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a13      	ldr	r2, [pc, #76]	; (800f1ec <xPortStartScheduler+0xec>)
 800f19e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f1a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1a4:	4b11      	ldr	r3, [pc, #68]	; (800f1ec <xPortStartScheduler+0xec>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a10      	ldr	r2, [pc, #64]	; (800f1ec <xPortStartScheduler+0xec>)
 800f1aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f1ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1b0:	f000 f8d4 	bl	800f35c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1b4:	4b0e      	ldr	r3, [pc, #56]	; (800f1f0 <xPortStartScheduler+0xf0>)
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1ba:	f000 f8f3 	bl	800f3a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1be:	4b0d      	ldr	r3, [pc, #52]	; (800f1f4 <xPortStartScheduler+0xf4>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a0c      	ldr	r2, [pc, #48]	; (800f1f4 <xPortStartScheduler+0xf4>)
 800f1c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f1c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1ca:	f7ff ff85 	bl	800f0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1ce:	f7ff fa69 	bl	800e6a4 <vTaskSwitchContext>
	prvTaskExitError();
 800f1d2:	f7ff ff3f 	bl	800f054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	e000e400 	.word	0xe000e400
 800f1e4:	20000528 	.word	0x20000528
 800f1e8:	2000052c 	.word	0x2000052c
 800f1ec:	e000ed20 	.word	0xe000ed20
 800f1f0:	20000024 	.word	0x20000024
 800f1f4:	e000ef34 	.word	0xe000ef34

0800f1f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f202:	b672      	cpsid	i
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	b662      	cpsie	i
 800f212:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f214:	4b0f      	ldr	r3, [pc, #60]	; (800f254 <vPortEnterCritical+0x5c>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	3301      	adds	r3, #1
 800f21a:	4a0e      	ldr	r2, [pc, #56]	; (800f254 <vPortEnterCritical+0x5c>)
 800f21c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f21e:	4b0d      	ldr	r3, [pc, #52]	; (800f254 <vPortEnterCritical+0x5c>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d110      	bne.n	800f248 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f226:	4b0c      	ldr	r3, [pc, #48]	; (800f258 <vPortEnterCritical+0x60>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00b      	beq.n	800f248 <vPortEnterCritical+0x50>
 800f230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f234:	b672      	cpsid	i
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	b662      	cpsie	i
 800f244:	603b      	str	r3, [r7, #0]
 800f246:	e7fe      	b.n	800f246 <vPortEnterCritical+0x4e>
	}
}
 800f248:	bf00      	nop
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr
 800f254:	20000024 	.word	0x20000024
 800f258:	e000ed04 	.word	0xe000ed04

0800f25c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f262:	4b12      	ldr	r3, [pc, #72]	; (800f2ac <vPortExitCritical+0x50>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10b      	bne.n	800f282 <vPortExitCritical+0x26>
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	b672      	cpsid	i
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	b662      	cpsie	i
 800f27e:	607b      	str	r3, [r7, #4]
 800f280:	e7fe      	b.n	800f280 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800f282:	4b0a      	ldr	r3, [pc, #40]	; (800f2ac <vPortExitCritical+0x50>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3b01      	subs	r3, #1
 800f288:	4a08      	ldr	r2, [pc, #32]	; (800f2ac <vPortExitCritical+0x50>)
 800f28a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f28c:	4b07      	ldr	r3, [pc, #28]	; (800f2ac <vPortExitCritical+0x50>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d104      	bne.n	800f29e <vPortExitCritical+0x42>
 800f294:	2300      	movs	r3, #0
 800f296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f29e:	bf00      	nop
 800f2a0:	370c      	adds	r7, #12
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	20000024 	.word	0x20000024

0800f2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2b0:	f3ef 8009 	mrs	r0, PSP
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	4b15      	ldr	r3, [pc, #84]	; (800f310 <pxCurrentTCBConst>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	f01e 0f10 	tst.w	lr, #16
 800f2c0:	bf08      	it	eq
 800f2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ca:	6010      	str	r0, [r2, #0]
 800f2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2d4:	b672      	cpsid	i
 800f2d6:	f380 8811 	msr	BASEPRI, r0
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	b662      	cpsie	i
 800f2e4:	f7ff f9de 	bl	800e6a4 <vTaskSwitchContext>
 800f2e8:	f04f 0000 	mov.w	r0, #0
 800f2ec:	f380 8811 	msr	BASEPRI, r0
 800f2f0:	bc09      	pop	{r0, r3}
 800f2f2:	6819      	ldr	r1, [r3, #0]
 800f2f4:	6808      	ldr	r0, [r1, #0]
 800f2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fa:	f01e 0f10 	tst.w	lr, #16
 800f2fe:	bf08      	it	eq
 800f300:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f304:	f380 8809 	msr	PSP, r0
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop

0800f310 <pxCurrentTCBConst>:
 800f310:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f314:	bf00      	nop
 800f316:	bf00      	nop

0800f318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
	__asm volatile
 800f31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f322:	b672      	cpsid	i
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	f3bf 8f6f 	isb	sy
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	b662      	cpsie	i
 800f332:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f334:	f7ff f8fc 	bl	800e530 <xTaskIncrementTick>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d003      	beq.n	800f346 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f33e:	4b06      	ldr	r3, [pc, #24]	; (800f358 <SysTick_Handler+0x40>)
 800f340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	2300      	movs	r3, #0
 800f348:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	e000ed04 	.word	0xe000ed04

0800f35c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f35c:	b480      	push	{r7}
 800f35e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f360:	4b0b      	ldr	r3, [pc, #44]	; (800f390 <vPortSetupTimerInterrupt+0x34>)
 800f362:	2200      	movs	r2, #0
 800f364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f366:	4b0b      	ldr	r3, [pc, #44]	; (800f394 <vPortSetupTimerInterrupt+0x38>)
 800f368:	2200      	movs	r2, #0
 800f36a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f36c:	4b0a      	ldr	r3, [pc, #40]	; (800f398 <vPortSetupTimerInterrupt+0x3c>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <vPortSetupTimerInterrupt+0x40>)
 800f372:	fba2 2303 	umull	r2, r3, r2, r3
 800f376:	099b      	lsrs	r3, r3, #6
 800f378:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <vPortSetupTimerInterrupt+0x44>)
 800f37a:	3b01      	subs	r3, #1
 800f37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f37e:	4b04      	ldr	r3, [pc, #16]	; (800f390 <vPortSetupTimerInterrupt+0x34>)
 800f380:	2207      	movs	r2, #7
 800f382:	601a      	str	r2, [r3, #0]
}
 800f384:	bf00      	nop
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	e000e010 	.word	0xe000e010
 800f394:	e000e018 	.word	0xe000e018
 800f398:	20000018 	.word	0x20000018
 800f39c:	10624dd3 	.word	0x10624dd3
 800f3a0:	e000e014 	.word	0xe000e014

0800f3a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f3b4 <vPortEnableVFP+0x10>
 800f3a8:	6801      	ldr	r1, [r0, #0]
 800f3aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f3ae:	6001      	str	r1, [r0, #0]
 800f3b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3b2:	bf00      	nop
 800f3b4:	e000ed88 	.word	0xe000ed88

0800f3b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3be:	f3ef 8305 	mrs	r3, IPSR
 800f3c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b0f      	cmp	r3, #15
 800f3c8:	d915      	bls.n	800f3f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3ca:	4a18      	ldr	r2, [pc, #96]	; (800f42c <vPortValidateInterruptPriority+0x74>)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3d4:	4b16      	ldr	r3, [pc, #88]	; (800f430 <vPortValidateInterruptPriority+0x78>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	7afa      	ldrb	r2, [r7, #11]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d20b      	bcs.n	800f3f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	b672      	cpsid	i
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	b662      	cpsie	i
 800f3f2:	607b      	str	r3, [r7, #4]
 800f3f4:	e7fe      	b.n	800f3f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3f6:	4b0f      	ldr	r3, [pc, #60]	; (800f434 <vPortValidateInterruptPriority+0x7c>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3fe:	4b0e      	ldr	r3, [pc, #56]	; (800f438 <vPortValidateInterruptPriority+0x80>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	429a      	cmp	r2, r3
 800f404:	d90b      	bls.n	800f41e <vPortValidateInterruptPriority+0x66>
 800f406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40a:	b672      	cpsid	i
 800f40c:	f383 8811 	msr	BASEPRI, r3
 800f410:	f3bf 8f6f 	isb	sy
 800f414:	f3bf 8f4f 	dsb	sy
 800f418:	b662      	cpsie	i
 800f41a:	603b      	str	r3, [r7, #0]
 800f41c:	e7fe      	b.n	800f41c <vPortValidateInterruptPriority+0x64>
	}
 800f41e:	bf00      	nop
 800f420:	3714      	adds	r7, #20
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	e000e3f0 	.word	0xe000e3f0
 800f430:	20000528 	.word	0x20000528
 800f434:	e000ed0c 	.word	0xe000ed0c
 800f438:	2000052c 	.word	0x2000052c

0800f43c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08a      	sub	sp, #40	; 0x28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f444:	2300      	movs	r3, #0
 800f446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f448:	f7fe ffa4 	bl	800e394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f44c:	4b5c      	ldr	r3, [pc, #368]	; (800f5c0 <pvPortMalloc+0x184>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d101      	bne.n	800f458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f454:	f000 f91a 	bl	800f68c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f458:	4b5a      	ldr	r3, [pc, #360]	; (800f5c4 <pvPortMalloc+0x188>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4013      	ands	r3, r2
 800f460:	2b00      	cmp	r3, #0
 800f462:	f040 8090 	bne.w	800f586 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d01e      	beq.n	800f4aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f46c:	2208      	movs	r2, #8
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4413      	add	r3, r2
 800f472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f003 0307 	and.w	r3, r3, #7
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d015      	beq.n	800f4aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f023 0307 	bic.w	r3, r3, #7
 800f484:	3308      	adds	r3, #8
 800f486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f003 0307 	and.w	r3, r3, #7
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00b      	beq.n	800f4aa <pvPortMalloc+0x6e>
 800f492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f496:	b672      	cpsid	i
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	b662      	cpsie	i
 800f4a6:	617b      	str	r3, [r7, #20]
 800f4a8:	e7fe      	b.n	800f4a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d06a      	beq.n	800f586 <pvPortMalloc+0x14a>
 800f4b0:	4b45      	ldr	r3, [pc, #276]	; (800f5c8 <pvPortMalloc+0x18c>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d865      	bhi.n	800f586 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4ba:	4b44      	ldr	r3, [pc, #272]	; (800f5cc <pvPortMalloc+0x190>)
 800f4bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4be:	4b43      	ldr	r3, [pc, #268]	; (800f5cc <pvPortMalloc+0x190>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4c4:	e004      	b.n	800f4d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d903      	bls.n	800f4e2 <pvPortMalloc+0xa6>
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1f1      	bne.n	800f4c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4e2:	4b37      	ldr	r3, [pc, #220]	; (800f5c0 <pvPortMalloc+0x184>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d04c      	beq.n	800f586 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2208      	movs	r2, #8
 800f4f2:	4413      	add	r3, r2
 800f4f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f500:	685a      	ldr	r2, [r3, #4]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	1ad2      	subs	r2, r2, r3
 800f506:	2308      	movs	r3, #8
 800f508:	005b      	lsls	r3, r3, #1
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d920      	bls.n	800f550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4413      	add	r3, r2
 800f514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	f003 0307 	and.w	r3, r3, #7
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00b      	beq.n	800f538 <pvPortMalloc+0xfc>
 800f520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f524:	b672      	cpsid	i
 800f526:	f383 8811 	msr	BASEPRI, r3
 800f52a:	f3bf 8f6f 	isb	sy
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	b662      	cpsie	i
 800f534:	613b      	str	r3, [r7, #16]
 800f536:	e7fe      	b.n	800f536 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53a:	685a      	ldr	r2, [r3, #4]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	1ad2      	subs	r2, r2, r3
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f54a:	69b8      	ldr	r0, [r7, #24]
 800f54c:	f000 f900 	bl	800f750 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f550:	4b1d      	ldr	r3, [pc, #116]	; (800f5c8 <pvPortMalloc+0x18c>)
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	4a1b      	ldr	r2, [pc, #108]	; (800f5c8 <pvPortMalloc+0x18c>)
 800f55c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f55e:	4b1a      	ldr	r3, [pc, #104]	; (800f5c8 <pvPortMalloc+0x18c>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	4b1b      	ldr	r3, [pc, #108]	; (800f5d0 <pvPortMalloc+0x194>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	429a      	cmp	r2, r3
 800f568:	d203      	bcs.n	800f572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f56a:	4b17      	ldr	r3, [pc, #92]	; (800f5c8 <pvPortMalloc+0x18c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4a18      	ldr	r2, [pc, #96]	; (800f5d0 <pvPortMalloc+0x194>)
 800f570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f574:	685a      	ldr	r2, [r3, #4]
 800f576:	4b13      	ldr	r3, [pc, #76]	; (800f5c4 <pvPortMalloc+0x188>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	431a      	orrs	r2, r3
 800f57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f586:	f7fe ff13 	bl	800e3b0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d101      	bne.n	800f594 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f590:	f7f1 fab4 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	f003 0307 	and.w	r3, r3, #7
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00b      	beq.n	800f5b6 <pvPortMalloc+0x17a>
 800f59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a2:	b672      	cpsid	i
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	b662      	cpsie	i
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	e7fe      	b.n	800f5b4 <pvPortMalloc+0x178>
	return pvReturn;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3728      	adds	r7, #40	; 0x28
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	20008538 	.word	0x20008538
 800f5c4:	20008544 	.word	0x20008544
 800f5c8:	2000853c 	.word	0x2000853c
 800f5cc:	20008530 	.word	0x20008530
 800f5d0:	20008540 	.word	0x20008540

0800f5d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d04a      	beq.n	800f67c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5e6:	2308      	movs	r3, #8
 800f5e8:	425b      	negs	r3, r3
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	685a      	ldr	r2, [r3, #4]
 800f5f8:	4b22      	ldr	r3, [pc, #136]	; (800f684 <vPortFree+0xb0>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10b      	bne.n	800f61a <vPortFree+0x46>
 800f602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f606:	b672      	cpsid	i
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	b662      	cpsie	i
 800f616:	60fb      	str	r3, [r7, #12]
 800f618:	e7fe      	b.n	800f618 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00b      	beq.n	800f63a <vPortFree+0x66>
 800f622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f626:	b672      	cpsid	i
 800f628:	f383 8811 	msr	BASEPRI, r3
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	b662      	cpsie	i
 800f636:	60bb      	str	r3, [r7, #8]
 800f638:	e7fe      	b.n	800f638 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	4b11      	ldr	r3, [pc, #68]	; (800f684 <vPortFree+0xb0>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4013      	ands	r3, r2
 800f644:	2b00      	cmp	r3, #0
 800f646:	d019      	beq.n	800f67c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d115      	bne.n	800f67c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	685a      	ldr	r2, [r3, #4]
 800f654:	4b0b      	ldr	r3, [pc, #44]	; (800f684 <vPortFree+0xb0>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	43db      	mvns	r3, r3
 800f65a:	401a      	ands	r2, r3
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f660:	f7fe fe98 	bl	800e394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	4b07      	ldr	r3, [pc, #28]	; (800f688 <vPortFree+0xb4>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4413      	add	r3, r2
 800f66e:	4a06      	ldr	r2, [pc, #24]	; (800f688 <vPortFree+0xb4>)
 800f670:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f672:	6938      	ldr	r0, [r7, #16]
 800f674:	f000 f86c 	bl	800f750 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f678:	f7fe fe9a 	bl	800e3b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f67c:	bf00      	nop
 800f67e:	3718      	adds	r7, #24
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	20008544 	.word	0x20008544
 800f688:	2000853c 	.word	0x2000853c

0800f68c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f68c:	b480      	push	{r7}
 800f68e:	b085      	sub	sp, #20
 800f690:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f696:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f698:	4b27      	ldr	r3, [pc, #156]	; (800f738 <prvHeapInit+0xac>)
 800f69a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f003 0307 	and.w	r3, r3, #7
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00c      	beq.n	800f6c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3307      	adds	r3, #7
 800f6aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f023 0307 	bic.w	r3, r3, #7
 800f6b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6b4:	68ba      	ldr	r2, [r7, #8]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	4a1f      	ldr	r2, [pc, #124]	; (800f738 <prvHeapInit+0xac>)
 800f6bc:	4413      	add	r3, r2
 800f6be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6c4:	4a1d      	ldr	r2, [pc, #116]	; (800f73c <prvHeapInit+0xb0>)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6ca:	4b1c      	ldr	r3, [pc, #112]	; (800f73c <prvHeapInit+0xb0>)
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	68ba      	ldr	r2, [r7, #8]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6d8:	2208      	movs	r2, #8
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	1a9b      	subs	r3, r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f023 0307 	bic.w	r3, r3, #7
 800f6e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	4a15      	ldr	r2, [pc, #84]	; (800f740 <prvHeapInit+0xb4>)
 800f6ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6ee:	4b14      	ldr	r3, [pc, #80]	; (800f740 <prvHeapInit+0xb4>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6f6:	4b12      	ldr	r3, [pc, #72]	; (800f740 <prvHeapInit+0xb4>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	1ad2      	subs	r2, r2, r3
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f70c:	4b0c      	ldr	r3, [pc, #48]	; (800f740 <prvHeapInit+0xb4>)
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	4a0a      	ldr	r2, [pc, #40]	; (800f744 <prvHeapInit+0xb8>)
 800f71a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	4a09      	ldr	r2, [pc, #36]	; (800f748 <prvHeapInit+0xbc>)
 800f722:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f724:	4b09      	ldr	r3, [pc, #36]	; (800f74c <prvHeapInit+0xc0>)
 800f726:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f72a:	601a      	str	r2, [r3, #0]
}
 800f72c:	bf00      	nop
 800f72e:	3714      	adds	r7, #20
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	20000530 	.word	0x20000530
 800f73c:	20008530 	.word	0x20008530
 800f740:	20008538 	.word	0x20008538
 800f744:	20008540 	.word	0x20008540
 800f748:	2000853c 	.word	0x2000853c
 800f74c:	20008544 	.word	0x20008544

0800f750 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f758:	4b28      	ldr	r3, [pc, #160]	; (800f7fc <prvInsertBlockIntoFreeList+0xac>)
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	e002      	b.n	800f764 <prvInsertBlockIntoFreeList+0x14>
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d8f7      	bhi.n	800f75e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	68ba      	ldr	r2, [r7, #8]
 800f778:	4413      	add	r3, r2
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d108      	bne.n	800f792 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	685a      	ldr	r2, [r3, #4]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	441a      	add	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	441a      	add	r2, r3
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d118      	bne.n	800f7d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	4b15      	ldr	r3, [pc, #84]	; (800f800 <prvInsertBlockIntoFreeList+0xb0>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d00d      	beq.n	800f7ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	685a      	ldr	r2, [r3, #4]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	441a      	add	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	601a      	str	r2, [r3, #0]
 800f7cc:	e008      	b.n	800f7e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7ce:	4b0c      	ldr	r3, [pc, #48]	; (800f800 <prvInsertBlockIntoFreeList+0xb0>)
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	e003      	b.n	800f7e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d002      	beq.n	800f7ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7ee:	bf00      	nop
 800f7f0:	3714      	adds	r7, #20
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	20008530 	.word	0x20008530
 800f800:	20008538 	.word	0x20008538

0800f804 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08c      	sub	sp, #48	; 0x30
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4a51      	ldr	r2, [pc, #324]	; (800f954 <I2Cx_MspInit+0x150>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d14d      	bne.n	800f8b0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f814:	4b50      	ldr	r3, [pc, #320]	; (800f958 <I2Cx_MspInit+0x154>)
 800f816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f818:	4a4f      	ldr	r2, [pc, #316]	; (800f958 <I2Cx_MspInit+0x154>)
 800f81a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f81e:	6313      	str	r3, [r2, #48]	; 0x30
 800f820:	4b4d      	ldr	r3, [pc, #308]	; (800f958 <I2Cx_MspInit+0x154>)
 800f822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f828:	61bb      	str	r3, [r7, #24]
 800f82a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800f82c:	2380      	movs	r3, #128	; 0x80
 800f82e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f830:	2312      	movs	r3, #18
 800f832:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f834:	2300      	movs	r3, #0
 800f836:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f838:	2302      	movs	r3, #2
 800f83a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800f83c:	2304      	movs	r3, #4
 800f83e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f840:	f107 031c 	add.w	r3, r7, #28
 800f844:	4619      	mov	r1, r3
 800f846:	4845      	ldr	r0, [pc, #276]	; (800f95c <I2Cx_MspInit+0x158>)
 800f848:	f7f5 ff7e 	bl	8005748 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800f84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f852:	f107 031c 	add.w	r3, r7, #28
 800f856:	4619      	mov	r1, r3
 800f858:	4840      	ldr	r0, [pc, #256]	; (800f95c <I2Cx_MspInit+0x158>)
 800f85a:	f7f5 ff75 	bl	8005748 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800f85e:	4b3e      	ldr	r3, [pc, #248]	; (800f958 <I2Cx_MspInit+0x154>)
 800f860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f862:	4a3d      	ldr	r2, [pc, #244]	; (800f958 <I2Cx_MspInit+0x154>)
 800f864:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f868:	6413      	str	r3, [r2, #64]	; 0x40
 800f86a:	4b3b      	ldr	r3, [pc, #236]	; (800f958 <I2Cx_MspInit+0x154>)
 800f86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f86e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f872:	617b      	str	r3, [r7, #20]
 800f874:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800f876:	4b38      	ldr	r3, [pc, #224]	; (800f958 <I2Cx_MspInit+0x154>)
 800f878:	6a1b      	ldr	r3, [r3, #32]
 800f87a:	4a37      	ldr	r2, [pc, #220]	; (800f958 <I2Cx_MspInit+0x154>)
 800f87c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f880:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800f882:	4b35      	ldr	r3, [pc, #212]	; (800f958 <I2Cx_MspInit+0x154>)
 800f884:	6a1b      	ldr	r3, [r3, #32]
 800f886:	4a34      	ldr	r2, [pc, #208]	; (800f958 <I2Cx_MspInit+0x154>)
 800f888:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f88c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800f88e:	2200      	movs	r2, #0
 800f890:	210f      	movs	r1, #15
 800f892:	2048      	movs	r0, #72	; 0x48
 800f894:	f7f5 f92a 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800f898:	2048      	movs	r0, #72	; 0x48
 800f89a:	f7f5 f943 	bl	8004b24 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800f89e:	2200      	movs	r2, #0
 800f8a0:	210f      	movs	r1, #15
 800f8a2:	2049      	movs	r0, #73	; 0x49
 800f8a4:	f7f5 f922 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800f8a8:	2049      	movs	r0, #73	; 0x49
 800f8aa:	f7f5 f93b 	bl	8004b24 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800f8ae:	e04d      	b.n	800f94c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f8b0:	4b29      	ldr	r3, [pc, #164]	; (800f958 <I2Cx_MspInit+0x154>)
 800f8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b4:	4a28      	ldr	r2, [pc, #160]	; (800f958 <I2Cx_MspInit+0x154>)
 800f8b6:	f043 0302 	orr.w	r3, r3, #2
 800f8ba:	6313      	str	r3, [r2, #48]	; 0x30
 800f8bc:	4b26      	ldr	r3, [pc, #152]	; (800f958 <I2Cx_MspInit+0x154>)
 800f8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8c0:	f003 0302 	and.w	r3, r3, #2
 800f8c4:	613b      	str	r3, [r7, #16]
 800f8c6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800f8c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f8cc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f8ce:	2312      	movs	r3, #18
 800f8d0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f8d6:	2302      	movs	r3, #2
 800f8d8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800f8da:	2304      	movs	r3, #4
 800f8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f8de:	f107 031c 	add.w	r3, r7, #28
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	481e      	ldr	r0, [pc, #120]	; (800f960 <I2Cx_MspInit+0x15c>)
 800f8e6:	f7f5 ff2f 	bl	8005748 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800f8ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f8f0:	f107 031c 	add.w	r3, r7, #28
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	481a      	ldr	r0, [pc, #104]	; (800f960 <I2Cx_MspInit+0x15c>)
 800f8f8:	f7f5 ff26 	bl	8005748 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800f8fc:	4b16      	ldr	r3, [pc, #88]	; (800f958 <I2Cx_MspInit+0x154>)
 800f8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f900:	4a15      	ldr	r2, [pc, #84]	; (800f958 <I2Cx_MspInit+0x154>)
 800f902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f906:	6413      	str	r3, [r2, #64]	; 0x40
 800f908:	4b13      	ldr	r3, [pc, #76]	; (800f958 <I2Cx_MspInit+0x154>)
 800f90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f90c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800f914:	4b10      	ldr	r3, [pc, #64]	; (800f958 <I2Cx_MspInit+0x154>)
 800f916:	6a1b      	ldr	r3, [r3, #32]
 800f918:	4a0f      	ldr	r2, [pc, #60]	; (800f958 <I2Cx_MspInit+0x154>)
 800f91a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f91e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800f920:	4b0d      	ldr	r3, [pc, #52]	; (800f958 <I2Cx_MspInit+0x154>)
 800f922:	6a1b      	ldr	r3, [r3, #32]
 800f924:	4a0c      	ldr	r2, [pc, #48]	; (800f958 <I2Cx_MspInit+0x154>)
 800f926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f92a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800f92c:	2200      	movs	r2, #0
 800f92e:	210f      	movs	r1, #15
 800f930:	201f      	movs	r0, #31
 800f932:	f7f5 f8db 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800f936:	201f      	movs	r0, #31
 800f938:	f7f5 f8f4 	bl	8004b24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800f93c:	2200      	movs	r2, #0
 800f93e:	210f      	movs	r1, #15
 800f940:	2020      	movs	r0, #32
 800f942:	f7f5 f8d3 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800f946:	2020      	movs	r0, #32
 800f948:	f7f5 f8ec 	bl	8004b24 <HAL_NVIC_EnableIRQ>
}
 800f94c:	bf00      	nop
 800f94e:	3730      	adds	r7, #48	; 0x30
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	20008548 	.word	0x20008548
 800f958:	40023800 	.word	0x40023800
 800f95c:	40021c00 	.word	0x40021c00
 800f960:	40020400 	.word	0x40020400

0800f964 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7f6 fbc9 	bl	8006104 <HAL_I2C_GetState>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d125      	bne.n	800f9c4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a14      	ldr	r2, [pc, #80]	; (800f9cc <I2Cx_Init+0x68>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d103      	bne.n	800f988 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a13      	ldr	r2, [pc, #76]	; (800f9d0 <I2Cx_Init+0x6c>)
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	e002      	b.n	800f98e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a12      	ldr	r2, [pc, #72]	; (800f9d4 <I2Cx_Init+0x70>)
 800f98c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a11      	ldr	r2, [pc, #68]	; (800f9d8 <I2Cx_Init+0x74>)
 800f992:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2200      	movs	r2, #0
 800f998:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2201      	movs	r2, #1
 800f99e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff ff23 	bl	800f804 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7f6 f89e 	bl	8005b00 <HAL_I2C_Init>
  }
}
 800f9c4:	bf00      	nop
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	20008548 	.word	0x20008548
 800f9d0:	40005c00 	.word	0x40005c00
 800f9d4:	40005400 	.word	0x40005400
 800f9d8:	40912732 	.word	0x40912732

0800f9dc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b08a      	sub	sp, #40	; 0x28
 800f9e0:	af04      	add	r7, sp, #16
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	4608      	mov	r0, r1
 800f9e6:	4611      	mov	r1, r2
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	72fb      	strb	r3, [r7, #11]
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	813b      	strh	r3, [r7, #8]
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800f9fa:	7afb      	ldrb	r3, [r7, #11]
 800f9fc:	b299      	uxth	r1, r3
 800f9fe:	88f8      	ldrh	r0, [r7, #6]
 800fa00:	893a      	ldrh	r2, [r7, #8]
 800fa02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa06:	9302      	str	r3, [sp, #8]
 800fa08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa0a:	9301      	str	r3, [sp, #4]
 800fa0c:	6a3b      	ldr	r3, [r7, #32]
 800fa0e:	9300      	str	r3, [sp, #0]
 800fa10:	4603      	mov	r3, r0
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f7f6 fa5c 	bl	8005ed0 <HAL_I2C_Mem_Read>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800fa1c:	7dfb      	ldrb	r3, [r7, #23]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d004      	beq.n	800fa2c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800fa22:	7afb      	ldrb	r3, [r7, #11]
 800fa24:	4619      	mov	r1, r3
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f000 f832 	bl	800fa90 <I2Cx_Error>
  }
  return status;    
 800fa2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3718      	adds	r7, #24
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b08a      	sub	sp, #40	; 0x28
 800fa3a:	af04      	add	r7, sp, #16
 800fa3c:	60f8      	str	r0, [r7, #12]
 800fa3e:	4608      	mov	r0, r1
 800fa40:	4611      	mov	r1, r2
 800fa42:	461a      	mov	r2, r3
 800fa44:	4603      	mov	r3, r0
 800fa46:	72fb      	strb	r3, [r7, #11]
 800fa48:	460b      	mov	r3, r1
 800fa4a:	813b      	strh	r3, [r7, #8]
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fa50:	2300      	movs	r3, #0
 800fa52:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fa54:	7afb      	ldrb	r3, [r7, #11]
 800fa56:	b299      	uxth	r1, r3
 800fa58:	88f8      	ldrh	r0, [r7, #6]
 800fa5a:	893a      	ldrh	r2, [r7, #8]
 800fa5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa60:	9302      	str	r3, [sp, #8]
 800fa62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	6a3b      	ldr	r3, [r7, #32]
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f7f6 f91b 	bl	8005ca8 <HAL_I2C_Mem_Write>
 800fa72:	4603      	mov	r3, r0
 800fa74:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800fa76:	7dfb      	ldrb	r3, [r7, #23]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d004      	beq.n	800fa86 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800fa7c:	7afb      	ldrb	r3, [r7, #11]
 800fa7e:	4619      	mov	r1, r3
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 f805 	bl	800fa90 <I2Cx_Error>
  }
  return status;
 800fa86:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3718      	adds	r7, #24
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}

0800fa90 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7f6 f8bf 	bl	8005c20 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7ff ff5e 	bl	800f964 <I2Cx_Init>
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800fab4:	4802      	ldr	r0, [pc, #8]	; (800fac0 <TS_IO_Init+0x10>)
 800fab6:	f7ff ff55 	bl	800f964 <I2Cx_Init>
}
 800faba:	bf00      	nop
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	20008548 	.word	0x20008548

0800fac4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af02      	add	r7, sp, #8
 800faca:	4603      	mov	r3, r0
 800facc:	71fb      	strb	r3, [r7, #7]
 800face:	460b      	mov	r3, r1
 800fad0:	71bb      	strb	r3, [r7, #6]
 800fad2:	4613      	mov	r3, r2
 800fad4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800fad6:	79bb      	ldrb	r3, [r7, #6]
 800fad8:	b29a      	uxth	r2, r3
 800fada:	79f9      	ldrb	r1, [r7, #7]
 800fadc:	2301      	movs	r3, #1
 800fade:	9301      	str	r3, [sp, #4]
 800fae0:	1d7b      	adds	r3, r7, #5
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	2301      	movs	r3, #1
 800fae6:	4803      	ldr	r0, [pc, #12]	; (800faf4 <TS_IO_Write+0x30>)
 800fae8:	f7ff ffa5 	bl	800fa36 <I2Cx_WriteMultiple>
}
 800faec:	bf00      	nop
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	20008548 	.word	0x20008548

0800faf8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b086      	sub	sp, #24
 800fafc:	af02      	add	r7, sp, #8
 800fafe:	4603      	mov	r3, r0
 800fb00:	460a      	mov	r2, r1
 800fb02:	71fb      	strb	r3, [r7, #7]
 800fb04:	4613      	mov	r3, r2
 800fb06:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800fb0c:	79bb      	ldrb	r3, [r7, #6]
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	79f9      	ldrb	r1, [r7, #7]
 800fb12:	2301      	movs	r3, #1
 800fb14:	9301      	str	r3, [sp, #4]
 800fb16:	f107 030f 	add.w	r3, r7, #15
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	4804      	ldr	r0, [pc, #16]	; (800fb30 <TS_IO_Read+0x38>)
 800fb20:	f7ff ff5c 	bl	800f9dc <I2Cx_ReadMultiple>

  return read_value;
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20008548 	.word	0x20008548

0800fb34 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7f3 fecf 	bl	80038e0 <HAL_Delay>
}
 800fb42:	bf00      	nop
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
	...

0800fb4c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	4603      	mov	r3, r0
 800fb54:	460a      	mov	r2, r1
 800fb56:	80fb      	strh	r3, [r7, #6]
 800fb58:	4613      	mov	r3, r2
 800fb5a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800fb60:	4a14      	ldr	r2, [pc, #80]	; (800fbb4 <BSP_TS_Init+0x68>)
 800fb62:	88fb      	ldrh	r3, [r7, #6]
 800fb64:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800fb66:	4a14      	ldr	r2, [pc, #80]	; (800fbb8 <BSP_TS_Init+0x6c>)
 800fb68:	88bb      	ldrh	r3, [r7, #4]
 800fb6a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800fb6c:	4b13      	ldr	r3, [pc, #76]	; (800fbbc <BSP_TS_Init+0x70>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	2070      	movs	r0, #112	; 0x70
 800fb72:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800fb74:	4b11      	ldr	r3, [pc, #68]	; (800fbbc <BSP_TS_Init+0x70>)
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	2070      	movs	r0, #112	; 0x70
 800fb7a:	4798      	blx	r3
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b51      	cmp	r3, #81	; 0x51
 800fb80:	d111      	bne.n	800fba6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fb82:	4b0f      	ldr	r3, [pc, #60]	; (800fbc0 <BSP_TS_Init+0x74>)
 800fb84:	4a0d      	ldr	r2, [pc, #52]	; (800fbbc <BSP_TS_Init+0x70>)
 800fb86:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800fb88:	4b0e      	ldr	r3, [pc, #56]	; (800fbc4 <BSP_TS_Init+0x78>)
 800fb8a:	2270      	movs	r2, #112	; 0x70
 800fb8c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800fb8e:	4b0e      	ldr	r3, [pc, #56]	; (800fbc8 <BSP_TS_Init+0x7c>)
 800fb90:	2208      	movs	r2, #8
 800fb92:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800fb94:	4b0a      	ldr	r3, [pc, #40]	; (800fbc0 <BSP_TS_Init+0x74>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	4a0a      	ldr	r2, [pc, #40]	; (800fbc4 <BSP_TS_Init+0x78>)
 800fb9c:	7812      	ldrb	r2, [r2, #0]
 800fb9e:	b292      	uxth	r2, r2
 800fba0:	4610      	mov	r0, r2
 800fba2:	4798      	blx	r3
 800fba4:	e001      	b.n	800fbaa <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800fba6:	2303      	movs	r3, #3
 800fba8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3710      	adds	r7, #16
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20008598 	.word	0x20008598
 800fbb8:	2000859a 	.word	0x2000859a
 800fbbc:	20000058 	.word	0x20000058
 800fbc0:	20008594 	.word	0x20008594
 800fbc4:	2000859d 	.word	0x2000859d
 800fbc8:	2000859c 	.word	0x2000859c

0800fbcc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800fbcc:	b590      	push	{r4, r7, lr}
 800fbce:	b097      	sub	sp, #92	; 0x5c
 800fbd0:	af02      	add	r7, sp, #8
 800fbd2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800fbe6:	4b97      	ldr	r3, [pc, #604]	; (800fe44 <BSP_TS_GetState+0x278>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	4a96      	ldr	r2, [pc, #600]	; (800fe48 <BSP_TS_GetState+0x27c>)
 800fbee:	7812      	ldrb	r2, [r2, #0]
 800fbf0:	b292      	uxth	r2, r2
 800fbf2:	4610      	mov	r0, r2
 800fbf4:	4798      	blx	r3
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f000 81a8 	beq.w	800ff58 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800fc08:	2300      	movs	r3, #0
 800fc0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc0c:	e197      	b.n	800ff3e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800fc0e:	4b8d      	ldr	r3, [pc, #564]	; (800fe44 <BSP_TS_GetState+0x278>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	695b      	ldr	r3, [r3, #20]
 800fc14:	4a8c      	ldr	r2, [pc, #560]	; (800fe48 <BSP_TS_GetState+0x27c>)
 800fc16:	7812      	ldrb	r2, [r2, #0]
 800fc18:	b290      	uxth	r0, r2
 800fc1a:	f107 0120 	add.w	r1, r7, #32
 800fc1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc20:	0052      	lsls	r2, r2, #1
 800fc22:	188c      	adds	r4, r1, r2
 800fc24:	f107 0114 	add.w	r1, r7, #20
 800fc28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc2a:	0052      	lsls	r2, r2, #1
 800fc2c:	440a      	add	r2, r1
 800fc2e:	4621      	mov	r1, r4
 800fc30:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800fc32:	4b86      	ldr	r3, [pc, #536]	; (800fe4c <BSP_TS_GetState+0x280>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d11b      	bne.n	800fc72 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800fc3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc3c:	005b      	lsls	r3, r3, #1
 800fc3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fc42:	4413      	add	r3, r2
 800fc44:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc4a:	005b      	lsls	r3, r3, #1
 800fc4c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fc50:	440b      	add	r3, r1
 800fc52:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800fc56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc58:	005b      	lsls	r3, r3, #1
 800fc5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fc5e:	4413      	add	r3, r2
 800fc60:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc66:	005b      	lsls	r3, r3, #1
 800fc68:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fc6c:	440b      	add	r3, r1
 800fc6e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800fc72:	4b76      	ldr	r3, [pc, #472]	; (800fe4c <BSP_TS_GetState+0x280>)
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	f003 0302 	and.w	r3, r3, #2
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d010      	beq.n	800fca0 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800fc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fc86:	4413      	add	r3, r2
 800fc88:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800fc8c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc94:	005b      	lsls	r3, r3, #1
 800fc96:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fc9a:	440b      	add	r3, r1
 800fc9c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800fca0:	4b6a      	ldr	r3, [pc, #424]	; (800fe4c <BSP_TS_GetState+0x280>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f003 0304 	and.w	r3, r3, #4
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d010      	beq.n	800fcce <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800fcac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcae:	005b      	lsls	r3, r3, #1
 800fcb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fcb4:	4413      	add	r3, r2
 800fcb6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800fcba:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fcc8:	440b      	add	r3, r1
 800fcca:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800fcce:	4b5f      	ldr	r3, [pc, #380]	; (800fe4c <BSP_TS_GetState+0x280>)
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	f003 0308 	and.w	r3, r3, #8
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d01b      	beq.n	800fd12 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800fcda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcdc:	005b      	lsls	r3, r3, #1
 800fcde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fce2:	4413      	add	r3, r2
 800fce4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fcf0:	440b      	add	r3, r1
 800fcf2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800fcf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fcfe:	4413      	add	r3, r2
 800fd00:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fd04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd0c:	440b      	add	r3, r1
 800fd0e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800fd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd14:	005b      	lsls	r3, r3, #1
 800fd16:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd1a:	4413      	add	r3, r2
 800fd1c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fd20:	4619      	mov	r1, r3
 800fd22:	4a4b      	ldr	r2, [pc, #300]	; (800fe50 <BSP_TS_GetState+0x284>)
 800fd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd2a:	4299      	cmp	r1, r3
 800fd2c:	d90e      	bls.n	800fd4c <BSP_TS_GetState+0x180>
 800fd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd30:	005b      	lsls	r3, r3, #1
 800fd32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd36:	4413      	add	r3, r2
 800fd38:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800fd3c:	4944      	ldr	r1, [pc, #272]	; (800fe50 <BSP_TS_GetState+0x284>)
 800fd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	e00d      	b.n	800fd68 <BSP_TS_GetState+0x19c>
 800fd4c:	4a40      	ldr	r2, [pc, #256]	; (800fe50 <BSP_TS_GetState+0x284>)
 800fd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd58:	005b      	lsls	r3, r3, #1
 800fd5a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd5e:	440b      	add	r3, r1
 800fd60:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800fd6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd6e:	005b      	lsls	r3, r3, #1
 800fd70:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd74:	4413      	add	r3, r2
 800fd76:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4a35      	ldr	r2, [pc, #212]	; (800fe54 <BSP_TS_GetState+0x288>)
 800fd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd84:	4299      	cmp	r1, r3
 800fd86:	d90e      	bls.n	800fda6 <BSP_TS_GetState+0x1da>
 800fd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd8a:	005b      	lsls	r3, r3, #1
 800fd8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd90:	4413      	add	r3, r2
 800fd92:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800fd96:	492f      	ldr	r1, [pc, #188]	; (800fe54 <BSP_TS_GetState+0x288>)
 800fd98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	e00d      	b.n	800fdc2 <BSP_TS_GetState+0x1f6>
 800fda6:	4a2b      	ldr	r2, [pc, #172]	; (800fe54 <BSP_TS_GetState+0x288>)
 800fda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdb8:	440b      	add	r3, r1
 800fdba:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fdbe:	1ad3      	subs	r3, r2, r3
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800fdc6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fdca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fdce:	4413      	add	r3, r2
 800fdd0:	2b05      	cmp	r3, #5
 800fdd2:	dd17      	ble.n	800fe04 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800fdd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdd6:	005b      	lsls	r3, r3, #1
 800fdd8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fddc:	4413      	add	r3, r2
 800fdde:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fde2:	4619      	mov	r1, r3
 800fde4:	4a1a      	ldr	r2, [pc, #104]	; (800fe50 <BSP_TS_GetState+0x284>)
 800fde6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fde8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800fdec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdee:	005b      	lsls	r3, r3, #1
 800fdf0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fdf4:	4413      	add	r3, r2
 800fdf6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4a15      	ldr	r2, [pc, #84]	; (800fe54 <BSP_TS_GetState+0x288>)
 800fdfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800fe04:	4b10      	ldr	r3, [pc, #64]	; (800fe48 <BSP_TS_GetState+0x27c>)
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	2b70      	cmp	r3, #112	; 0x70
 800fe0a:	d125      	bne.n	800fe58 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800fe0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe0e:	005b      	lsls	r3, r3, #1
 800fe10:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe14:	4413      	add	r3, r2
 800fe16:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	4413      	add	r3, r2
 800fe22:	460a      	mov	r2, r1
 800fe24:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800fe26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe28:	005b      	lsls	r3, r3, #1
 800fe2a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe2e:	4413      	add	r3, r2
 800fe30:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe38:	3304      	adds	r3, #4
 800fe3a:	005b      	lsls	r3, r3, #1
 800fe3c:	4413      	add	r3, r2
 800fe3e:	460a      	mov	r2, r1
 800fe40:	809a      	strh	r2, [r3, #4]
 800fe42:	e02c      	b.n	800fe9e <BSP_TS_GetState+0x2d2>
 800fe44:	20008594 	.word	0x20008594
 800fe48:	2000859d 	.word	0x2000859d
 800fe4c:	2000859c 	.word	0x2000859c
 800fe50:	200085a0 	.word	0x200085a0
 800fe54:	200085b4 	.word	0x200085b4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800fe58:	4b42      	ldr	r3, [pc, #264]	; (800ff64 <BSP_TS_GetState+0x398>)
 800fe5a:	881b      	ldrh	r3, [r3, #0]
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	4a42      	ldr	r2, [pc, #264]	; (800ff68 <BSP_TS_GetState+0x39c>)
 800fe60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe66:	fb03 f301 	mul.w	r3, r3, r1
 800fe6a:	0b1b      	lsrs	r3, r3, #12
 800fe6c:	b299      	uxth	r1, r3
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe72:	005b      	lsls	r3, r3, #1
 800fe74:	4413      	add	r3, r2
 800fe76:	460a      	mov	r2, r1
 800fe78:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800fe7a:	4b3c      	ldr	r3, [pc, #240]	; (800ff6c <BSP_TS_GetState+0x3a0>)
 800fe7c:	881b      	ldrh	r3, [r3, #0]
 800fe7e:	4619      	mov	r1, r3
 800fe80:	4a3b      	ldr	r2, [pc, #236]	; (800ff70 <BSP_TS_GetState+0x3a4>)
 800fe82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe88:	fb03 f301 	mul.w	r3, r3, r1
 800fe8c:	0b1b      	lsrs	r3, r3, #12
 800fe8e:	b299      	uxth	r1, r3
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe94:	3304      	adds	r3, #4
 800fe96:	005b      	lsls	r3, r3, #1
 800fe98:	4413      	add	r3, r2
 800fe9a:	460a      	mov	r2, r1
 800fe9c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800fe9e:	4b35      	ldr	r3, [pc, #212]	; (800ff74 <BSP_TS_GetState+0x3a8>)
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	b298      	uxth	r0, r3
 800fea4:	f107 010c 	add.w	r1, r7, #12
 800fea8:	f107 0210 	add.w	r2, r7, #16
 800feac:	f107 0308 	add.w	r3, r7, #8
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	460b      	mov	r3, r1
 800feb4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800feb6:	f008 fa19 	bl	80182ec <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	b2d9      	uxtb	r1, r3
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fec2:	4413      	add	r3, r2
 800fec4:	3316      	adds	r3, #22
 800fec6:	460a      	mov	r2, r1
 800fec8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	b2d9      	uxtb	r1, r3
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fed2:	4413      	add	r3, r2
 800fed4:	3320      	adds	r3, #32
 800fed6:	460a      	mov	r2, r1
 800fed8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	2b03      	cmp	r3, #3
 800fede:	d827      	bhi.n	800ff30 <BSP_TS_GetState+0x364>
 800fee0:	a201      	add	r2, pc, #4	; (adr r2, 800fee8 <BSP_TS_GetState+0x31c>)
 800fee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee6:	bf00      	nop
 800fee8:	0800fef9 	.word	0x0800fef9
 800feec:	0800ff07 	.word	0x0800ff07
 800fef0:	0800ff15 	.word	0x0800ff15
 800fef4:	0800ff23 	.word	0x0800ff23
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fefc:	4413      	add	r3, r2
 800fefe:	331b      	adds	r3, #27
 800ff00:	2201      	movs	r2, #1
 800ff02:	701a      	strb	r2, [r3, #0]
          break;
 800ff04:	e018      	b.n	800ff38 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff0a:	4413      	add	r3, r2
 800ff0c:	331b      	adds	r3, #27
 800ff0e:	2202      	movs	r2, #2
 800ff10:	701a      	strb	r2, [r3, #0]
          break;
 800ff12:	e011      	b.n	800ff38 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff18:	4413      	add	r3, r2
 800ff1a:	331b      	adds	r3, #27
 800ff1c:	2203      	movs	r2, #3
 800ff1e:	701a      	strb	r2, [r3, #0]
          break;
 800ff20:	e00a      	b.n	800ff38 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff26:	4413      	add	r3, r2
 800ff28:	331b      	adds	r3, #27
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	701a      	strb	r2, [r3, #0]
          break;
 800ff2e:	e003      	b.n	800ff38 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800ff36:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800ff38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	461a      	mov	r2, r3
 800ff44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff46:	4293      	cmp	r3, r2
 800ff48:	f4ff ae61 	bcc.w	800fc0e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 f813 	bl	800ff78 <BSP_TS_Get_GestureId>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800ff58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3754      	adds	r7, #84	; 0x54
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd90      	pop	{r4, r7, pc}
 800ff64:	20008598 	.word	0x20008598
 800ff68:	200085a0 	.word	0x200085a0
 800ff6c:	2000859a 	.word	0x2000859a
 800ff70:	200085b4 	.word	0x200085b4
 800ff74:	2000859d 	.word	0x2000859d

0800ff78 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800ff80:	2300      	movs	r3, #0
 800ff82:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800ff84:	2300      	movs	r3, #0
 800ff86:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800ff88:	4b1f      	ldr	r3, [pc, #124]	; (8010008 <BSP_TS_Get_GestureId+0x90>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	f107 0208 	add.w	r2, r7, #8
 800ff92:	4611      	mov	r1, r2
 800ff94:	4618      	mov	r0, r3
 800ff96:	f008 f990 	bl	80182ba <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2b18      	cmp	r3, #24
 800ff9e:	d01b      	beq.n	800ffd8 <BSP_TS_Get_GestureId+0x60>
 800ffa0:	2b18      	cmp	r3, #24
 800ffa2:	d806      	bhi.n	800ffb2 <BSP_TS_Get_GestureId+0x3a>
 800ffa4:	2b10      	cmp	r3, #16
 800ffa6:	d00f      	beq.n	800ffc8 <BSP_TS_Get_GestureId+0x50>
 800ffa8:	2b14      	cmp	r3, #20
 800ffaa:	d011      	beq.n	800ffd0 <BSP_TS_Get_GestureId+0x58>
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d007      	beq.n	800ffc0 <BSP_TS_Get_GestureId+0x48>
 800ffb0:	e022      	b.n	800fff8 <BSP_TS_Get_GestureId+0x80>
 800ffb2:	2b40      	cmp	r3, #64	; 0x40
 800ffb4:	d018      	beq.n	800ffe8 <BSP_TS_Get_GestureId+0x70>
 800ffb6:	2b49      	cmp	r3, #73	; 0x49
 800ffb8:	d01a      	beq.n	800fff0 <BSP_TS_Get_GestureId+0x78>
 800ffba:	2b1c      	cmp	r3, #28
 800ffbc:	d010      	beq.n	800ffe0 <BSP_TS_Get_GestureId+0x68>
 800ffbe:	e01b      	b.n	800fff8 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800ffc6:	e01a      	b.n	800fffe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800ffce:	e016      	b.n	800fffe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2202      	movs	r2, #2
 800ffd4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800ffd6:	e012      	b.n	800fffe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2203      	movs	r2, #3
 800ffdc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800ffde:	e00e      	b.n	800fffe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2204      	movs	r2, #4
 800ffe4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800ffe6:	e00a      	b.n	800fffe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2205      	movs	r2, #5
 800ffec:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800ffee:	e006      	b.n	800fffe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2206      	movs	r2, #6
 800fff4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fff6:	e002      	b.n	800fffe <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800fff8:	2301      	movs	r3, #1
 800fffa:	73fb      	strb	r3, [r7, #15]
      break;
 800fffc:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800fffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010000:	4618      	mov	r0, r3
 8010002:	3710      	adds	r7, #16
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	2000859d 	.word	0x2000859d

0801000c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8010010:	f007 fb78 	bl	8017704 <touchgfx_init>
}
 8010014:	bf00      	nop
 8010016:	bd80      	pop	{r7, pc}

08010018 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 801001c:	f007 fb9c 	bl	8017758 <touchgfx_taskEntry>
}
 8010020:	bf00      	nop
 8010022:	bd80      	pop	{r7, pc}

08010024 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
    {
 801002c:	4a04      	ldr	r2, [pc, #16]	; (8010040 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	601a      	str	r2, [r3, #0]
    }
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4618      	mov	r0, r3
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	08029ba8 	.word	0x08029ba8

08010044 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
    }
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f7ff ffe9 	bl	8010024 <_ZN8touchgfx12FontProviderD1Ev>
 8010052:	2104      	movs	r1, #4
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f018 f984 	bl	8028362 <_ZdlPvj>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	460b      	mov	r3, r1
 801006e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8010070:	887b      	ldrh	r3, [r7, #2]
 8010072:	2b07      	cmp	r3, #7
 8010074:	d83a      	bhi.n	80100ec <_ZN23ApplicationFontProvider7getFontEt+0x88>
 8010076:	a201      	add	r2, pc, #4	; (adr r2, 801007c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8010078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007c:	0801009d 	.word	0x0801009d
 8010080:	080100a7 	.word	0x080100a7
 8010084:	080100b1 	.word	0x080100b1
 8010088:	080100bb 	.word	0x080100bb
 801008c:	080100c5 	.word	0x080100c5
 8010090:	080100cf 	.word	0x080100cf
 8010094:	080100d9 	.word	0x080100d9
 8010098:	080100e3 	.word	0x080100e3
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801009c:	f005 fa2e 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100a0:	4603      	mov	r3, r0
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	e023      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80100a6:	f005 fa29 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100aa:	4603      	mov	r3, r0
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	e01e      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80100b0:	f005 fa24 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100b4:	4603      	mov	r3, r0
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	e019      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80100ba:	f005 fa1f 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100be:	4603      	mov	r3, r0
 80100c0:	689b      	ldr	r3, [r3, #8]
 80100c2:	e014      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80100c4:	f005 fa1a 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100c8:	4603      	mov	r3, r0
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	e00f      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80100ce:	f005 fa15 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100d2:	4603      	mov	r3, r0
 80100d4:	691b      	ldr	r3, [r3, #16]
 80100d6:	e00a      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80100d8:	f005 fa10 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100dc:	4603      	mov	r3, r0
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	e005      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80100e2:	f005 fa0b 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 80100e6:	4603      	mov	r3, r0
 80100e8:	699b      	ldr	r3, [r3, #24]
 80100ea:	e000      	b.n	80100ee <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 80100ec:	2300      	movs	r3, #0
    }
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop

080100f8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	4a05      	ldr	r2, [pc, #20]	; (8010118 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	601a      	str	r2, [r3, #0]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4618      	mov	r0, r3
 801010a:	f7ff ff8b 	bl	8010024 <_ZN8touchgfx12FontProviderD1Ev>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4618      	mov	r0, r3
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	08029b94 	.word	0x08029b94

0801011c <_ZN23ApplicationFontProviderD0Ev>:
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7ff ffe7 	bl	80100f8 <_ZN23ApplicationFontProviderD1Ev>
 801012a:	2104      	movs	r1, #4
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f018 f918 	bl	8028362 <_ZdlPvj>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	4a04      	ldr	r2, [pc, #16]	; (8010158 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr
 8010158:	0802c5a4 	.word	0x0802c5a4

0801015c <_ZN8touchgfx4FontD0Ev>:
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff ffe9 	bl	801013c <_ZN8touchgfx4FontD1Ev>
 801016a:	2110      	movs	r1, #16
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f018 f8f8 	bl	8028362 <_ZdlPvj>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4618      	mov	r0, r3
 8010176:	3708      	adds	r7, #8
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801017c:	b590      	push	{r4, r7, lr}
 801017e:	b087      	sub	sp, #28
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	460b      	mov	r3, r1
 8010186:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8010188:	2300      	movs	r3, #0
 801018a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	3308      	adds	r3, #8
 8010196:	681c      	ldr	r4, [r3, #0]
 8010198:	f107 030f 	add.w	r3, r7, #15
 801019c:	f107 0210 	add.w	r2, r7, #16
 80101a0:	8879      	ldrh	r1, [r7, #2]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	47a0      	blx	r4
 80101a6:	6178      	str	r0, [r7, #20]
        return glyph;
 80101a8:	697b      	ldr	r3, [r7, #20]
    }
 80101aa:	4618      	mov	r0, r3
 80101ac:	371c      	adds	r7, #28
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd90      	pop	{r4, r7, pc}

080101b2 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80101b2:	b480      	push	{r7}
 80101b4:	b083      	sub	sp, #12
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	895b      	ldrh	r3, [r3, #10]
    }
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80101ca:	b480      	push	{r7}
 80101cc:	b083      	sub	sp, #12
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	899b      	ldrh	r3, [r3, #12]
    }
 80101d6:	4618      	mov	r0, r3
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	889b      	ldrh	r3, [r3, #4]
    }
 80101ee:	4618      	mov	r0, r3
 80101f0:	370c      	adds	r7, #12
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr

080101fa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 80101fa:	b480      	push	{r7}
 80101fc:	b083      	sub	sp, #12
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	889a      	ldrh	r2, [r3, #4]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	799b      	ldrb	r3, [r3, #6]
 801020a:	b29b      	uxth	r3, r3
 801020c:	4413      	add	r3, r2
 801020e:	b29b      	uxth	r3, r3
    }
 8010210:	4618      	mov	r0, r3
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	79db      	ldrb	r3, [r3, #7]
 8010228:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801022c:	b2db      	uxtb	r3, r3
    }
 801022e:	4618      	mov	r0, r3
 8010230:	370c      	adds	r7, #12
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 801023a:	b480      	push	{r7}
 801023c:	b083      	sub	sp, #12
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	79db      	ldrb	r3, [r3, #7]
 8010246:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801024a:	b2db      	uxtb	r3, r3
    }
 801024c:	4618      	mov	r0, r3
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	4a05      	ldr	r2, [pc, #20]	; (8010278 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	601a      	str	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	f7ff ff67 	bl	801013c <_ZN8touchgfx4FontD1Ev>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	0802c65c 	.word	0x0802c65c

0801027c <_ZN8touchgfx9ConstFontD0Ev>:
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7ff ffe7 	bl	8010258 <_ZN8touchgfx9ConstFontD1Ev>
 801028a:	2118      	movs	r1, #24
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f018 f868 	bl	8028362 <_ZdlPvj>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4618      	mov	r0, r3
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	4a05      	ldr	r2, [pc, #20]	; (80102bc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff ffd3 	bl	8010258 <_ZN8touchgfx9ConstFontD1Ev>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	08029bec 	.word	0x08029bec

080102c0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff ffe7 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 80102ce:	2124      	movs	r1, #36	; 0x24
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f018 f846 	bl	8028362 <_ZdlPvj>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 f82d 	bl	8010348 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 80102ee:	4b08      	ldr	r3, [pc, #32]	; (8010310 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	4b08      	ldr	r3, [pc, #32]	; (8010314 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 80102f4:	6819      	ldr	r1, [r3, #0]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	881b      	ldrh	r3, [r3, #0]
 80102fa:	005b      	lsls	r3, r3, #1
 80102fc:	440b      	add	r3, r1
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	4413      	add	r3, r2
 8010304:	681b      	ldr	r3, [r3, #0]
    }
 8010306:	4618      	mov	r0, r3
 8010308:	3708      	adds	r7, #8
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	2000bf84 	.word	0x2000bf84
 8010314:	2000bf7c 	.word	0x2000bf7c

08010318 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f811 	bl	8010348 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8010326:	4b07      	ldr	r3, [pc, #28]	; (8010344 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	4413      	add	r3, r2
 8010332:	785b      	ldrb	r3, [r3, #1]
 8010334:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010338:	b2db      	uxtb	r3, r3
    }
 801033a:	4618      	mov	r0, r3
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	2000bf7c 	.word	0x2000bf7c

08010348 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010350:	4b0c      	ldr	r3, [pc, #48]	; (8010384 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d105      	bne.n	8010364 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 8010358:	4b0b      	ldr	r3, [pc, #44]	; (8010388 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 801035a:	4a0c      	ldr	r2, [pc, #48]	; (801038c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 801035c:	21de      	movs	r1, #222	; 0xde
 801035e:	480c      	ldr	r0, [pc, #48]	; (8010390 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010360:	f018 f82a 	bl	80283b8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	881a      	ldrh	r2, [r3, #0]
 8010368:	4b0a      	ldr	r3, [pc, #40]	; (8010394 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	429a      	cmp	r2, r3
 801036e:	d305      	bcc.n	801037c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8010370:	4b09      	ldr	r3, [pc, #36]	; (8010398 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8010372:	4a06      	ldr	r2, [pc, #24]	; (801038c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8010374:	21df      	movs	r1, #223	; 0xdf
 8010376:	4806      	ldr	r0, [pc, #24]	; (8010390 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010378:	f018 f81e 	bl	80283b8 <__assert_func>
    }
 801037c:	bf00      	nop
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	2000bf7c 	.word	0x2000bf7c
 8010388:	08029468 	.word	0x08029468
 801038c:	08029bb4 	.word	0x08029bb4
 8010390:	080294ac 	.word	0x080294ac
 8010394:	2000bf80 	.word	0x2000bf80
 8010398:	080294f0 	.word	0x080294f0

0801039c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7b5b      	ldrb	r3, [r3, #13]
 80103a8:	021b      	lsls	r3, r3, #8
 80103aa:	b21b      	sxth	r3, r3
 80103ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80103b0:	b21a      	sxth	r2, r3
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	7adb      	ldrb	r3, [r3, #11]
 80103b6:	b21b      	sxth	r3, r3
 80103b8:	4313      	orrs	r3, r2
 80103ba:	b21b      	sxth	r3, r3
 80103bc:	b29b      	uxth	r3, r3
    }
 80103be:	4618      	mov	r0, r3
 80103c0:	370c      	adds	r7, #12
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80103ca:	b480      	push	{r7}
 80103cc:	b083      	sub	sp, #12
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
    }
 80103d6:	4618      	mov	r0, r3
 80103d8:	370c      	adds	r7, #12
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr
	...

080103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b08c      	sub	sp, #48	; 0x30
 80103e8:	af08      	add	r7, sp, #32
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	60b9      	str	r1, [r7, #8]
 80103ee:	4611      	mov	r1, r2
 80103f0:	461a      	mov	r2, r3
 80103f2:	460b      	mov	r3, r1
 80103f4:	80fb      	strh	r3, [r7, #6]
 80103f6:	4613      	mov	r3, r2
 80103f8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	88b9      	ldrh	r1, [r7, #4]
 80103fe:	88fa      	ldrh	r2, [r7, #6]
 8010400:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010402:	9306      	str	r3, [sp, #24]
 8010404:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010406:	9305      	str	r3, [sp, #20]
 8010408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801040c:	9304      	str	r3, [sp, #16]
 801040e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010412:	9303      	str	r3, [sp, #12]
 8010414:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010418:	9302      	str	r3, [sp, #8]
 801041a:	7f3b      	ldrb	r3, [r7, #28]
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	7e3b      	ldrb	r3, [r7, #24]
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	460b      	mov	r3, r1
 8010424:	68b9      	ldr	r1, [r7, #8]
 8010426:	f00c fc81 	bl	801cd2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 801042a:	4a08      	ldr	r2, [pc, #32]	; (801044c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	601a      	str	r2, [r3, #0]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010434:	619a      	str	r2, [r3, #24]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801043a:	61da      	str	r2, [r3, #28]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010440:	621a      	str	r2, [r3, #32]
{
}
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	4618      	mov	r0, r3
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	08029bec 	.word	0x08029bec

08010450 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010450:	b480      	push	{r7}
 8010452:	b085      	sub	sp, #20
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	699b      	ldr	r3, [r3, #24]
 801045e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	889b      	ldrh	r3, [r3, #4]
 8010464:	0adb      	lsrs	r3, r3, #11
 8010466:	b29b      	uxth	r3, r3
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	4413      	add	r3, r2
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4413      	add	r3, r2
}
 8010476:	4618      	mov	r0, r3
 8010478:	3714      	adds	r7, #20
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr

08010482 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b086      	sub	sp, #24
 8010486:	af00      	add	r7, sp, #0
 8010488:	60f8      	str	r0, [r7, #12]
 801048a:	460b      	mov	r3, r1
 801048c:	607a      	str	r2, [r7, #4]
 801048e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d003      	beq.n	801049e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	7b1b      	ldrb	r3, [r3, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d101      	bne.n	80104a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801049e:	2300      	movs	r3, #0
 80104a0:	e023      	b.n	80104ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7ff ff7a 	bl	801039c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 80104a8:	4603      	mov	r3, r0
 80104aa:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 80104ac:	8abb      	ldrh	r3, [r7, #20]
 80104ae:	82fb      	strh	r3, [r7, #22]
 80104b0:	8afa      	ldrh	r2, [r7, #22]
 80104b2:	8abb      	ldrh	r3, [r7, #20]
 80104b4:	6879      	ldr	r1, [r7, #4]
 80104b6:	7b09      	ldrb	r1, [r1, #12]
 80104b8:	440b      	add	r3, r1
 80104ba:	429a      	cmp	r2, r3
 80104bc:	da14      	bge.n	80104e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	69da      	ldr	r2, [r3, #28]
 80104c2:	8afb      	ldrh	r3, [r7, #22]
 80104c4:	009b      	lsls	r3, r3, #2
 80104c6:	4413      	add	r3, r2
 80104c8:	881b      	ldrh	r3, [r3, #0]
 80104ca:	897a      	ldrh	r2, [r7, #10]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d107      	bne.n	80104e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	69da      	ldr	r2, [r3, #28]
 80104d4:	8afb      	ldrh	r3, [r7, #22]
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	4413      	add	r3, r2
 80104da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80104de:	e004      	b.n	80104ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 80104e0:	8afb      	ldrh	r3, [r7, #22]
 80104e2:	3301      	adds	r3, #1
 80104e4:	82fb      	strh	r3, [r7, #22]
 80104e6:	e7e3      	b.n	80104b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 80104e8:	2300      	movs	r3, #0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3718      	adds	r7, #24
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80104f4:	b580      	push	{r7, lr}
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	4801      	ldr	r0, [pc, #4]	; (8010500 <__tcf_0+0xc>)
 80104fa:	f7ff fecf 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	200085c8 	.word	0x200085c8

08010504 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08a      	sub	sp, #40	; 0x28
 8010508:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 801050a:	4b15      	ldr	r3, [pc, #84]	; (8010560 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f003 0301 	and.w	r3, r3, #1
 8010512:	2b00      	cmp	r3, #0
 8010514:	d11f      	bne.n	8010556 <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 8010516:	2300      	movs	r3, #0
 8010518:	9309      	str	r3, [sp, #36]	; 0x24
 801051a:	2300      	movs	r3, #0
 801051c:	9308      	str	r3, [sp, #32]
 801051e:	233f      	movs	r3, #63	; 0x3f
 8010520:	9307      	str	r3, [sp, #28]
 8010522:	4b10      	ldr	r3, [pc, #64]	; (8010564 <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 8010524:	9306      	str	r3, [sp, #24]
 8010526:	4b10      	ldr	r3, [pc, #64]	; (8010568 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 8010528:	9305      	str	r3, [sp, #20]
 801052a:	2301      	movs	r3, #1
 801052c:	9304      	str	r3, [sp, #16]
 801052e:	2300      	movs	r3, #0
 8010530:	9303      	str	r3, [sp, #12]
 8010532:	2301      	movs	r3, #1
 8010534:	9302      	str	r3, [sp, #8]
 8010536:	2304      	movs	r3, #4
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	2300      	movs	r3, #0
 801053c:	9300      	str	r3, [sp, #0]
 801053e:	230a      	movs	r3, #10
 8010540:	2204      	movs	r2, #4
 8010542:	490a      	ldr	r1, [pc, #40]	; (801056c <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 8010544:	480a      	ldr	r0, [pc, #40]	; (8010570 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 8010546:	f7ff ff4d 	bl	80103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801054a:	4b05      	ldr	r3, [pc, #20]	; (8010560 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 801054c:	2201      	movs	r2, #1
 801054e:	601a      	str	r2, [r3, #0]
 8010550:	4808      	ldr	r0, [pc, #32]	; (8010574 <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 8010552:	f017 ff4f 	bl	80283f4 <atexit>
    return Asap_Bold_10_4bpp;
 8010556:	4b06      	ldr	r3, [pc, #24]	; (8010570 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 8010558:	4618      	mov	r0, r3
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	200085ec 	.word	0x200085ec
 8010564:	08031868 	.word	0x08031868
 8010568:	08029c38 	.word	0x08029c38
 801056c:	08031890 	.word	0x08031890
 8010570:	200085c8 	.word	0x200085c8
 8010574:	080104f5 	.word	0x080104f5

08010578 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 8010578:	b580      	push	{r7, lr}
 801057a:	af00      	add	r7, sp, #0
 801057c:	4801      	ldr	r0, [pc, #4]	; (8010584 <__tcf_0+0xc>)
 801057e:	f7ff fe8d 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010582:	bd80      	pop	{r7, pc}
 8010584:	200085f0 	.word	0x200085f0

08010588 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b08a      	sub	sp, #40	; 0x28
 801058c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 801058e:	4b15      	ldr	r3, [pc, #84]	; (80105e4 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f003 0301 	and.w	r3, r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	d11f      	bne.n	80105da <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 801059a:	2300      	movs	r3, #0
 801059c:	9309      	str	r3, [sp, #36]	; 0x24
 801059e:	2300      	movs	r3, #0
 80105a0:	9308      	str	r3, [sp, #32]
 80105a2:	233f      	movs	r3, #63	; 0x3f
 80105a4:	9307      	str	r3, [sp, #28]
 80105a6:	4b10      	ldr	r3, [pc, #64]	; (80105e8 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 80105a8:	9306      	str	r3, [sp, #24]
 80105aa:	4b10      	ldr	r3, [pc, #64]	; (80105ec <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 80105ac:	9305      	str	r3, [sp, #20]
 80105ae:	2301      	movs	r3, #1
 80105b0:	9304      	str	r3, [sp, #16]
 80105b2:	2300      	movs	r3, #0
 80105b4:	9303      	str	r3, [sp, #12]
 80105b6:	2301      	movs	r3, #1
 80105b8:	9302      	str	r3, [sp, #8]
 80105ba:	2304      	movs	r3, #4
 80105bc:	9301      	str	r3, [sp, #4]
 80105be:	2300      	movs	r3, #0
 80105c0:	9300      	str	r3, [sp, #0]
 80105c2:	230c      	movs	r3, #12
 80105c4:	2209      	movs	r2, #9
 80105c6:	490a      	ldr	r1, [pc, #40]	; (80105f0 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 80105c8:	480a      	ldr	r0, [pc, #40]	; (80105f4 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 80105ca:	f7ff ff0b 	bl	80103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80105ce:	4b05      	ldr	r3, [pc, #20]	; (80105e4 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 80105d0:	2201      	movs	r2, #1
 80105d2:	601a      	str	r2, [r3, #0]
 80105d4:	4808      	ldr	r0, [pc, #32]	; (80105f8 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 80105d6:	f017 ff0d 	bl	80283f4 <atexit>
    return Asap_Bold_12_4bpp;
 80105da:	4b06      	ldr	r3, [pc, #24]	; (80105f4 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 80105dc:	4618      	mov	r0, r3
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	20008614 	.word	0x20008614
 80105e8:	0803186c 	.word	0x0803186c
 80105ec:	08029c3c 	.word	0x08029c3c
 80105f0:	080318c8 	.word	0x080318c8
 80105f4:	200085f0 	.word	0x200085f0
 80105f8:	08010579 	.word	0x08010579

080105fc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80105fc:	b580      	push	{r7, lr}
 80105fe:	af00      	add	r7, sp, #0
 8010600:	4801      	ldr	r0, [pc, #4]	; (8010608 <__tcf_0+0xc>)
 8010602:	f7ff fe4b 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010606:	bd80      	pop	{r7, pc}
 8010608:	20008618 	.word	0x20008618

0801060c <_Z25getFont_Asap_Bold_18_4bppv>:
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b08a      	sub	sp, #40	; 0x28
 8010610:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 8010612:	4b15      	ldr	r3, [pc, #84]	; (8010668 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f003 0301 	and.w	r3, r3, #1
 801061a:	2b00      	cmp	r3, #0
 801061c:	d11f      	bne.n	801065e <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 801061e:	2300      	movs	r3, #0
 8010620:	9309      	str	r3, [sp, #36]	; 0x24
 8010622:	2300      	movs	r3, #0
 8010624:	9308      	str	r3, [sp, #32]
 8010626:	2300      	movs	r3, #0
 8010628:	9307      	str	r3, [sp, #28]
 801062a:	4b10      	ldr	r3, [pc, #64]	; (801066c <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 801062c:	9306      	str	r3, [sp, #24]
 801062e:	4b10      	ldr	r3, [pc, #64]	; (8010670 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 8010630:	9305      	str	r3, [sp, #20]
 8010632:	2301      	movs	r3, #1
 8010634:	9304      	str	r3, [sp, #16]
 8010636:	2300      	movs	r3, #0
 8010638:	9303      	str	r3, [sp, #12]
 801063a:	2301      	movs	r3, #1
 801063c:	9302      	str	r3, [sp, #8]
 801063e:	2304      	movs	r3, #4
 8010640:	9301      	str	r3, [sp, #4]
 8010642:	2300      	movs	r3, #0
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	2312      	movs	r3, #18
 8010648:	221d      	movs	r2, #29
 801064a:	490a      	ldr	r1, [pc, #40]	; (8010674 <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 801064c:	480a      	ldr	r0, [pc, #40]	; (8010678 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 801064e:	f7ff fec9 	bl	80103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010652:	4b05      	ldr	r3, [pc, #20]	; (8010668 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 8010654:	2201      	movs	r2, #1
 8010656:	601a      	str	r2, [r3, #0]
 8010658:	4808      	ldr	r0, [pc, #32]	; (801067c <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 801065a:	f017 fecb 	bl	80283f4 <atexit>
    return Asap_Bold_18_4bpp;
 801065e:	4b06      	ldr	r3, [pc, #24]	; (8010678 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 8010660:	4618      	mov	r0, r3
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	2000863c 	.word	0x2000863c
 801066c:	08031870 	.word	0x08031870
 8010670:	08029c40 	.word	0x08029c40
 8010674:	08031948 	.word	0x08031948
 8010678:	20008618 	.word	0x20008618
 801067c:	080105fd 	.word	0x080105fd

08010680 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
 8010684:	4801      	ldr	r0, [pc, #4]	; (801068c <__tcf_0+0xc>)
 8010686:	f7ff fe09 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 801068a:	bd80      	pop	{r7, pc}
 801068c:	20008640 	.word	0x20008640

08010690 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b08a      	sub	sp, #40	; 0x28
 8010694:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010696:	4b15      	ldr	r3, [pc, #84]	; (80106ec <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d11f      	bne.n	80106e2 <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 80106a2:	2300      	movs	r3, #0
 80106a4:	9309      	str	r3, [sp, #36]	; 0x24
 80106a6:	2300      	movs	r3, #0
 80106a8:	9308      	str	r3, [sp, #32]
 80106aa:	233f      	movs	r3, #63	; 0x3f
 80106ac:	9307      	str	r3, [sp, #28]
 80106ae:	4b10      	ldr	r3, [pc, #64]	; (80106f0 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 80106b0:	9306      	str	r3, [sp, #24]
 80106b2:	4b10      	ldr	r3, [pc, #64]	; (80106f4 <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 80106b4:	9305      	str	r3, [sp, #20]
 80106b6:	2301      	movs	r3, #1
 80106b8:	9304      	str	r3, [sp, #16]
 80106ba:	2300      	movs	r3, #0
 80106bc:	9303      	str	r3, [sp, #12]
 80106be:	2301      	movs	r3, #1
 80106c0:	9302      	str	r3, [sp, #8]
 80106c2:	2304      	movs	r3, #4
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	2300      	movs	r3, #0
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	2315      	movs	r3, #21
 80106cc:	220d      	movs	r2, #13
 80106ce:	490a      	ldr	r1, [pc, #40]	; (80106f8 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 80106d0:	480a      	ldr	r0, [pc, #40]	; (80106fc <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 80106d2:	f7ff fe87 	bl	80103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80106d6:	4b05      	ldr	r3, [pc, #20]	; (80106ec <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 80106d8:	2201      	movs	r2, #1
 80106da:	601a      	str	r2, [r3, #0]
 80106dc:	4808      	ldr	r0, [pc, #32]	; (8010700 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 80106de:	f017 fe89 	bl	80283f4 <atexit>
    return Asap_Bold_21_4bpp;
 80106e2:	4b06      	ldr	r3, [pc, #24]	; (80106fc <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	20008664 	.word	0x20008664
 80106f0:	08031880 	.word	0x08031880
 80106f4:	08029c44 	.word	0x08029c44
 80106f8:	08031ae0 	.word	0x08031ae0
 80106fc:	20008640 	.word	0x20008640
 8010700:	08010681 	.word	0x08010681

08010704 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 8010704:	b580      	push	{r7, lr}
 8010706:	af00      	add	r7, sp, #0
 8010708:	4801      	ldr	r0, [pc, #4]	; (8010710 <__tcf_0+0xc>)
 801070a:	f7ff fdc7 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 801070e:	bd80      	pop	{r7, pc}
 8010710:	20008668 	.word	0x20008668

08010714 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b08a      	sub	sp, #40	; 0x28
 8010718:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 801071a:	4b15      	ldr	r3, [pc, #84]	; (8010770 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f003 0301 	and.w	r3, r3, #1
 8010722:	2b00      	cmp	r3, #0
 8010724:	d11f      	bne.n	8010766 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 8010726:	2300      	movs	r3, #0
 8010728:	9309      	str	r3, [sp, #36]	; 0x24
 801072a:	2300      	movs	r3, #0
 801072c:	9308      	str	r3, [sp, #32]
 801072e:	233f      	movs	r3, #63	; 0x3f
 8010730:	9307      	str	r3, [sp, #28]
 8010732:	4b10      	ldr	r3, [pc, #64]	; (8010774 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 8010734:	9306      	str	r3, [sp, #24]
 8010736:	4b10      	ldr	r3, [pc, #64]	; (8010778 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 8010738:	9305      	str	r3, [sp, #20]
 801073a:	2301      	movs	r3, #1
 801073c:	9304      	str	r3, [sp, #16]
 801073e:	2300      	movs	r3, #0
 8010740:	9303      	str	r3, [sp, #12]
 8010742:	2301      	movs	r3, #1
 8010744:	9302      	str	r3, [sp, #8]
 8010746:	2304      	movs	r3, #4
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	2300      	movs	r3, #0
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	231e      	movs	r3, #30
 8010750:	220c      	movs	r2, #12
 8010752:	490a      	ldr	r1, [pc, #40]	; (801077c <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 8010754:	480a      	ldr	r0, [pc, #40]	; (8010780 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 8010756:	f7ff fe45 	bl	80103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801075a:	4b05      	ldr	r3, [pc, #20]	; (8010770 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 801075c:	2201      	movs	r2, #1
 801075e:	601a      	str	r2, [r3, #0]
 8010760:	4808      	ldr	r0, [pc, #32]	; (8010784 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 8010762:	f017 fe47 	bl	80283f4 <atexit>
    return Asap_Bold_30_4bpp;
 8010766:	4b06      	ldr	r3, [pc, #24]	; (8010780 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 8010768:	4618      	mov	r0, r3
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	2000868c 	.word	0x2000868c
 8010774:	08031884 	.word	0x08031884
 8010778:	08029c48 	.word	0x08029c48
 801077c:	08031b98 	.word	0x08031b98
 8010780:	20008668 	.word	0x20008668
 8010784:	08010705 	.word	0x08010705

08010788 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
 801078c:	4801      	ldr	r0, [pc, #4]	; (8010794 <__tcf_0+0xc>)
 801078e:	f7ff fd85 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010792:	bd80      	pop	{r7, pc}
 8010794:	20008690 	.word	0x20008690

08010798 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08a      	sub	sp, #40	; 0x28
 801079c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 801079e:	4b15      	ldr	r3, [pc, #84]	; (80107f4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f003 0301 	and.w	r3, r3, #1
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d11f      	bne.n	80107ea <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 80107aa:	2300      	movs	r3, #0
 80107ac:	9309      	str	r3, [sp, #36]	; 0x24
 80107ae:	2300      	movs	r3, #0
 80107b0:	9308      	str	r3, [sp, #32]
 80107b2:	233f      	movs	r3, #63	; 0x3f
 80107b4:	9307      	str	r3, [sp, #28]
 80107b6:	4b10      	ldr	r3, [pc, #64]	; (80107f8 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 80107b8:	9306      	str	r3, [sp, #24]
 80107ba:	4b10      	ldr	r3, [pc, #64]	; (80107fc <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 80107bc:	9305      	str	r3, [sp, #20]
 80107be:	2301      	movs	r3, #1
 80107c0:	9304      	str	r3, [sp, #16]
 80107c2:	2300      	movs	r3, #0
 80107c4:	9303      	str	r3, [sp, #12]
 80107c6:	2301      	movs	r3, #1
 80107c8:	9302      	str	r3, [sp, #8]
 80107ca:	2304      	movs	r3, #4
 80107cc:	9301      	str	r3, [sp, #4]
 80107ce:	2300      	movs	r3, #0
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	2328      	movs	r3, #40	; 0x28
 80107d4:	220d      	movs	r2, #13
 80107d6:	490a      	ldr	r1, [pc, #40]	; (8010800 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 80107d8:	480a      	ldr	r0, [pc, #40]	; (8010804 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 80107da:	f7ff fe03 	bl	80103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80107de:	4b05      	ldr	r3, [pc, #20]	; (80107f4 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 80107e0:	2201      	movs	r2, #1
 80107e2:	601a      	str	r2, [r3, #0]
 80107e4:	4808      	ldr	r0, [pc, #32]	; (8010808 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 80107e6:	f017 fe05 	bl	80283f4 <atexit>
    return Asap_Bold_40_4bpp;
 80107ea:	4b06      	ldr	r3, [pc, #24]	; (8010804 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	200086b4 	.word	0x200086b4
 80107f8:	08031888 	.word	0x08031888
 80107fc:	08029c4c 	.word	0x08029c4c
 8010800:	08031c40 	.word	0x08031c40
 8010804:	20008690 	.word	0x20008690
 8010808:	08010789 	.word	0x08010789

0801080c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 801080c:	b580      	push	{r7, lr}
 801080e:	af00      	add	r7, sp, #0
 8010810:	4801      	ldr	r0, [pc, #4]	; (8010818 <__tcf_0+0xc>)
 8010812:	f7ff fd43 	bl	801029c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010816:	bd80      	pop	{r7, pc}
 8010818:	200086b8 	.word	0x200086b8

0801081c <_Z25getFont_Asap_Bold_60_4bppv>:
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b08a      	sub	sp, #40	; 0x28
 8010820:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010822:	4b15      	ldr	r3, [pc, #84]	; (8010878 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f003 0301 	and.w	r3, r3, #1
 801082a:	2b00      	cmp	r3, #0
 801082c:	d11f      	bne.n	801086e <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 801082e:	2300      	movs	r3, #0
 8010830:	9309      	str	r3, [sp, #36]	; 0x24
 8010832:	2300      	movs	r3, #0
 8010834:	9308      	str	r3, [sp, #32]
 8010836:	233f      	movs	r3, #63	; 0x3f
 8010838:	9307      	str	r3, [sp, #28]
 801083a:	4b10      	ldr	r3, [pc, #64]	; (801087c <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 801083c:	9306      	str	r3, [sp, #24]
 801083e:	4b10      	ldr	r3, [pc, #64]	; (8010880 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 8010840:	9305      	str	r3, [sp, #20]
 8010842:	2300      	movs	r3, #0
 8010844:	9304      	str	r3, [sp, #16]
 8010846:	2300      	movs	r3, #0
 8010848:	9303      	str	r3, [sp, #12]
 801084a:	2301      	movs	r3, #1
 801084c:	9302      	str	r3, [sp, #8]
 801084e:	2304      	movs	r3, #4
 8010850:	9301      	str	r3, [sp, #4]
 8010852:	2300      	movs	r3, #0
 8010854:	9300      	str	r3, [sp, #0]
 8010856:	233c      	movs	r3, #60	; 0x3c
 8010858:	220d      	movs	r2, #13
 801085a:	490a      	ldr	r1, [pc, #40]	; (8010884 <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 801085c:	480a      	ldr	r0, [pc, #40]	; (8010888 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 801085e:	f7ff fdc1 	bl	80103e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010862:	4b05      	ldr	r3, [pc, #20]	; (8010878 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010864:	2201      	movs	r2, #1
 8010866:	601a      	str	r2, [r3, #0]
 8010868:	4808      	ldr	r0, [pc, #32]	; (801088c <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 801086a:	f017 fdc3 	bl	80283f4 <atexit>
    return Asap_Bold_60_4bpp;
 801086e:	4b06      	ldr	r3, [pc, #24]	; (8010888 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 8010870:	4618      	mov	r0, r3
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	200086dc 	.word	0x200086dc
 801087c:	0803188c 	.word	0x0803188c
 8010880:	08029c50 	.word	0x08029c50
 8010884:	08031cf8 	.word	0x08031cf8
 8010888:	200086b8 	.word	0x200086b8
 801088c:	0801080d 	.word	0x0801080d

08010890 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	4618      	mov	r0, r3
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
    {
    }
 80108b2:	bf00      	nop
 80108b4:	370c      	adds	r7, #12
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80108be:	b480      	push	{r7}
 80108c0:	b083      	sub	sp, #12
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	6039      	str	r1, [r7, #0]
    {
    }
 80108c8:	bf00      	nop
 80108ca:	370c      	adds	r7, #12
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
    {
    }
 80108de:	bf00      	nop
 80108e0:	370c      	adds	r7, #12
 80108e2:	46bd      	mov	sp, r7
 80108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e8:	4770      	bx	lr

080108ea <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80108ea:	b480      	push	{r7}
 80108ec:	b083      	sub	sp, #12
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	460b      	mov	r3, r1
 80108f4:	70fb      	strb	r3, [r7, #3]
    {
    }
 80108f6:	bf00      	nop
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr

08010902 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010902:	b480      	push	{r7}
 8010904:	b083      	sub	sp, #12
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
    {
    }
 801090a:	bf00      	nop
 801090c:	370c      	adds	r7, #12
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8010916:	b480      	push	{r7}
 8010918:	b083      	sub	sp, #12
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
    {
    }
 801091e:	bf00      	nop
 8010920:	370c      	adds	r7, #12
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr
	...

0801092c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 801092c:	b480      	push	{r7}
 801092e:	b083      	sub	sp, #12
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
    {
 8010934:	4a04      	ldr	r2, [pc, #16]	; (8010948 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	601a      	str	r2, [r3, #0]
    }
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4618      	mov	r0, r3
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr
 8010948:	08029d9c 	.word	0x08029d9c

0801094c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
    }
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff ffe9 	bl	801092c <_ZN8touchgfx15UIEventListenerD1Ev>
 801095a:	2104      	movs	r1, #4
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f017 fd00 	bl	8028362 <_ZdlPvj>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	4618      	mov	r0, r3
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8010974:	4a07      	ldr	r2, [pc, #28]	; (8010994 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	605a      	str	r2, [r3, #4]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2200      	movs	r2, #0
 8010984:	721a      	strb	r2, [r3, #8]
    {
    }
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	08029d7c 	.word	0x08029d7c

08010998 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
    {
 80109a0:	4a04      	ldr	r2, [pc, #16]	; (80109b4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]
    }
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr
 80109b4:	08029d7c 	.word	0x08029d7c

080109b8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
    }
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7ff ffe9 	bl	8010998 <_ZN8touchgfx10TransitionD1Ev>
 80109c6:	210c      	movs	r1, #12
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f017 fcca 	bl	8028362 <_ZdlPvj>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4618      	mov	r0, r3
 80109d2:	3708      	adds	r7, #8
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	bf00      	nop
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	bf00      	nop
 80109f6:	370c      	adds	r7, #12
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	bf00      	nop
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	605a      	str	r2, [r3, #4]
    }
 8010a24:	bf00      	nop
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010a3c:	bf00      	nop
 8010a3e:	370c      	adds	r7, #12
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr

08010a48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
    {
 8010a50:	4a04      	ldr	r2, [pc, #16]	; (8010a64 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
    }
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	08029d64 	.word	0x08029d64

08010a68 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
    }
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff ffe9 	bl	8010a48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010a76:	2104      	movs	r1, #4
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f017 fc72 	bl	8028362 <_ZdlPvj>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	4608      	mov	r0, r1
 8010a92:	4611      	mov	r1, r2
 8010a94:	461a      	mov	r2, r3
 8010a96:	4603      	mov	r3, r0
 8010a98:	817b      	strh	r3, [r7, #10]
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	813b      	strh	r3, [r7, #8]
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3334      	adds	r3, #52	; 0x34
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010aae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	4798      	blx	r3
        setWidth(width);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3338      	adds	r3, #56	; 0x38
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010ac2:	4611      	mov	r1, r2
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	4798      	blx	r3
        setHeight(height);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	333c      	adds	r3, #60	; 0x3c
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	68f8      	ldr	r0, [r7, #12]
 8010ad8:	4798      	blx	r3
    }
 8010ada:	bf00      	nop
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8010ae2:	b480      	push	{r7}
 8010ae4:	b083      	sub	sp, #12
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8010af0:	4618      	mov	r0, r3
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
	...

08010b18 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010b18:	b480      	push	{r7}
 8010b1a:	af00      	add	r7, sp, #0
    {
        return instance;
 8010b1c:	4b03      	ldr	r3, [pc, #12]	; (8010b2c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
    }
 8010b20:	4618      	mov	r0, r3
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	2000beec 	.word	0x2000beec

08010b30 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010b30:	b480      	push	{r7}
 8010b32:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010b34:	4b0b      	ldr	r3, [pc, #44]	; (8010b64 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d008      	beq.n	8010b52 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010b40:	4b08      	ldr	r3, [pc, #32]	; (8010b64 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010b4a:	4b06      	ldr	r3, [pc, #24]	; (8010b64 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b50:	e002      	b.n	8010b58 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8010b52:	4b04      	ldr	r3, [pc, #16]	; (8010b64 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010b58:	4618      	mov	r0, r3
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	2000beec 	.word	0x2000beec

08010b68 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	4a05      	ldr	r2, [pc, #20]	; (8010b88 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	601a      	str	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff fed7 	bl	801092c <_ZN8touchgfx15UIEventListenerD1Ev>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	0802c4bc 	.word	0x0802c4bc

08010b8c <_ZN8touchgfx11ApplicationD0Ev>:
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ffe7 	bl	8010b68 <_ZN8touchgfx11ApplicationD1Ev>
 8010b9a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f017 fbdf 	bl	8028362 <_ZdlPvj>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3708      	adds	r7, #8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
	...

08010bb0 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f00b fbf0 	bl	801c3a0 <_ZN8touchgfx11ApplicationC1Ev>
 8010bc0:	4a09      	ldr	r2, [pc, #36]	; (8010be8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4a04      	ldr	r2, [pc, #16]	; (8010bec <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010bda:	6013      	str	r3, [r2, #0]
    }
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	08029d28 	.word	0x08029d28
 8010bec:	2000bf78 	.word	0x2000bf78

08010bf0 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	4a05      	ldr	r2, [pc, #20]	; (8010c10 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff ffb1 	bl	8010b68 <_ZN8touchgfx11ApplicationD1Ev>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	08029d28 	.word	0x08029d28

08010c14 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f7ff ffe7 	bl	8010bf0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010c22:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f017 fb9b 	bl	8028362 <_ZdlPvj>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3708      	adds	r7, #8
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b082      	sub	sp, #8
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 f804 	bl	8010c4c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010c44:	bf00      	nop
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00f      	beq.n	8010c7e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	330c      	adds	r3, #12
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4610      	mov	r0, r2
 8010c72:	4798      	blx	r3
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d001      	beq.n	8010c7e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	e000      	b.n	8010c80 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00e      	beq.n	8010ca2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	3308      	adds	r3, #8
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4610      	mov	r0, r2
 8010c98:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010ca2:	bf00      	nop
 8010ca4:	3708      	adds	r7, #8
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}

08010caa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b084      	sub	sp, #16
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	60f8      	str	r0, [r7, #12]
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010cb6:	f00b fb51 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f00b fb53 	bl	801c368 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d008      	beq.n	8010cdc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	330c      	adds	r3, #12
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4610      	mov	r0, r2
 8010cda:	4798      	blx	r3
    }
    if (*currentTrans)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d007      	beq.n	8010cf4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	4610      	mov	r0, r2
 8010cf2:	4798      	blx	r3
    }
    if (*currentScreen)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d008      	beq.n	8010d0e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	3314      	adds	r3, #20
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d008      	beq.n	8010d28 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	3304      	adds	r3, #4
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4610      	mov	r0, r2
 8010d26:	4798      	blx	r3
    }
    if (*currentScreen)
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d007      	beq.n	8010d40 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4610      	mov	r0, r2
 8010d3e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d008      	beq.n	8010d5a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	681a      	ldr	r2, [r3, #0]
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	3308      	adds	r3, #8
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4610      	mov	r0, r2
 8010d58:	4798      	blx	r3
    }
}
 8010d5a:	bf00      	nop
 8010d5c:	3710      	adds	r7, #16
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b084      	sub	sp, #16
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	60f8      	str	r0, [r7, #12]
 8010d6a:	60b9      	str	r1, [r7, #8]
 8010d6c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	330c      	adds	r3, #12
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	4798      	blx	r3
    newPresenter->activate();
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	68b8      	ldr	r0, [r7, #8]
 8010d82:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f00c fbf8 	bl	801d57c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	3310      	adds	r3, #16
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	4798      	blx	r3

    Application::getInstance()->draw();
 8010d98:	f00b fae0 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	6813      	ldr	r3, [r2, #0]
 8010da0:	3328      	adds	r3, #40	; 0x28
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4610      	mov	r0, r2
 8010da6:	4798      	blx	r3
}
 8010da8:	bf00      	nop
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	683a      	ldr	r2, [r7, #0]
 8010dbe:	601a      	str	r2, [r3, #0]
    }
 8010dc0:	bf00      	nop
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	4a08      	ldr	r2, [pc, #32]	; (8010df8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	601a      	str	r2, [r3, #0]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010de0:	4618      	mov	r0, r3
 8010de2:	f000 fde7 	bl	80119b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7ff ff01 	bl	8010bf0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	4618      	mov	r0, r3
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	08029cd4 	.word	0x08029cd4

08010dfc <_ZN23FrontendApplicationBaseD0Ev>:
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f7ff ffe1 	bl	8010dcc <_ZN23FrontendApplicationBaseD1Ev>
 8010e0a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f017 faa7 	bl	8028362 <_ZdlPvj>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4618      	mov	r0, r3
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
	...

08010e20 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7ff fd9e 	bl	801096c <_ZN8touchgfx10TransitionC1Ev>
 8010e30:	4a03      	ldr	r2, [pc, #12]	; (8010e40 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	08029cb4 	.word	0x08029cb4

08010e44 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	4a05      	ldr	r2, [pc, #20]	; (8010e64 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	601a      	str	r2, [r3, #0]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7ff fd9f 	bl	8010998 <_ZN8touchgfx10TransitionD1Ev>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3708      	adds	r7, #8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	08029cb4 	.word	0x08029cb4

08010e68 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7ff ffe7 	bl	8010e44 <_ZN8touchgfx12NoTransitionD1Ev>
 8010e76:	210c      	movs	r1, #12
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f017 fa72 	bl	8028362 <_ZdlPvj>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8010e88:	b480      	push	{r7}
 8010e8a:	b083      	sub	sp, #12
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2201      	movs	r2, #1
 8010e94:	721a      	strb	r2, [r3, #8]
    }
 8010e96:	bf00      	nop
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr

08010ea2 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8010ea2:	b480      	push	{r7}
 8010ea4:	b083      	sub	sp, #12
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	683a      	ldr	r2, [r7, #0]
 8010eb0:	605a      	str	r2, [r3, #4]
    }
 8010eb2:	bf00      	nop
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
	...

08010ec0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff fe6e 	bl	8010bb0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8010ed4:	4a13      	ldr	r2, [pc, #76]	; (8010f24 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	601a      	str	r2, [r3, #0]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f000 f92b 	bl	801113c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	68ba      	ldr	r2, [r7, #8]
 8010ef2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8010ef6:	f7ff fe0f 	bl	8010b18 <_ZN8touchgfx3HAL11getInstanceEv>
 8010efa:	4602      	mov	r2, r0
 8010efc:	6813      	ldr	r3, [r2, #0]
 8010efe:	3308      	adds	r3, #8
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2100      	movs	r1, #0
 8010f04:	4610      	mov	r0, r2
 8010f06:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8010f08:	2000      	movs	r0, #0
 8010f0a:	f004 fa7f 	bl	801540c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010f0e:	f7ff fe0f 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8010f12:	4603      	mov	r3, r0
 8010f14:	4618      	mov	r0, r3
 8010f16:	f010 ff32 	bl	8021d7e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	08029cd4 	.word	0x08029cd4

08010f28 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	4618      	mov	r0, r3
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	683a      	ldr	r2, [r7, #0]
 8010f4e:	4611      	mov	r1, r2
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff ffe9 	bl	8010f28 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	685a      	ldr	r2, [r3, #4]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	605a      	str	r2, [r3, #4]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	683a      	ldr	r2, [r7, #0]
 8010f62:	3308      	adds	r3, #8
 8010f64:	3208      	adds	r2, #8
 8010f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4618      	mov	r0, r3
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8010f78:	b590      	push	{r4, r7, lr}
 8010f7a:	b089      	sub	sp, #36	; 0x24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8010f86:	4b10      	ldr	r3, [pc, #64]	; (8010fc8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8010f88:	61bb      	str	r3, [r7, #24]
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61fb      	str	r3, [r7, #28]
 8010f8e:	f107 0008 	add.w	r0, r7, #8
 8010f92:	f107 0318 	add.w	r3, r7, #24
 8010f96:	cb0c      	ldmia	r3, {r2, r3}
 8010f98:	6879      	ldr	r1, [r7, #4]
 8010f9a:	f000 f8eb 	bl	8011174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010f9e:	f107 0308 	add.w	r3, r7, #8
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f7ff ffcb 	bl	8010f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010faa:	f107 0308 	add.w	r3, r7, #8
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f000 fd00 	bl	80119b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010fc0:	bf00      	nop
 8010fc2:	3724      	adds	r7, #36	; 0x24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd90      	pop	{r4, r7, pc}
 8010fc8:	08010fcd 	.word	0x08010fcd

08010fcc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af02      	add	r7, sp, #8
 8010fd2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010fe8:	9300      	str	r3, [sp, #0]
 8010fea:	4b04      	ldr	r3, [pc, #16]	; (8010ffc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8010fec:	4804      	ldr	r0, [pc, #16]	; (8011000 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8010fee:	f000 f8e1 	bl	80111b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010ff2:	bf00      	nop
 8010ff4:	3708      	adds	r7, #8
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	2000bf6c 	.word	0x2000bf6c
 8011000:	2000bf68 	.word	0x2000bf68

08011004 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEast()
{
 8011004:	b590      	push	{r4, r7, lr}
 8011006:	b089      	sub	sp, #36	; 0x24
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionEastImpl);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8011012:	4b10      	ldr	r3, [pc, #64]	; (8011054 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv+0x50>)
 8011014:	61bb      	str	r3, [r7, #24]
 8011016:	2300      	movs	r3, #0
 8011018:	61fb      	str	r3, [r7, #28]
 801101a:	f107 0008 	add.w	r0, r7, #8
 801101e:	f107 0318 	add.w	r3, r7, #24
 8011022:	cb0c      	ldmia	r3, {r2, r3}
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	f000 f8a5 	bl	8011174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801102a:	f107 0308 	add.w	r3, r7, #8
 801102e:	4619      	mov	r1, r3
 8011030:	4620      	mov	r0, r4
 8011032:	f7ff ff85 	bl	8010f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011036:	f107 0308 	add.w	r3, r7, #8
 801103a:	4618      	mov	r0, r3
 801103c:	f000 fcba 	bl	80119b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801104c:	bf00      	nop
 801104e:	3724      	adds	r7, #36	; 0x24
 8011050:	46bd      	mov	sp, r7
 8011052:	bd90      	pop	{r4, r7, pc}
 8011054:	08011059 	.word	0x08011059

08011058 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEastImpl()
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af02      	add	r7, sp, #8
 801105e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801106c:	461a      	mov	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	4b04      	ldr	r3, [pc, #16]	; (8011088 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x30>)
 8011078:	4804      	ldr	r0, [pc, #16]	; (801108c <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x34>)
 801107a:	f000 f957 	bl	801132c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801107e:	bf00      	nop
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	2000bf6c 	.word	0x2000bf6c
 801108c:	2000bf68 	.word	0x2000bf68

08011090 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 8011090:	b590      	push	{r4, r7, lr}
 8011092:	b089      	sub	sp, #36	; 0x24
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801109e:	4b10      	ldr	r3, [pc, #64]	; (80110e0 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 80110a0:	61bb      	str	r3, [r7, #24]
 80110a2:	2300      	movs	r3, #0
 80110a4:	61fb      	str	r3, [r7, #28]
 80110a6:	f107 0008 	add.w	r0, r7, #8
 80110aa:	f107 0318 	add.w	r3, r7, #24
 80110ae:	cb0c      	ldmia	r3, {r2, r3}
 80110b0:	6879      	ldr	r1, [r7, #4]
 80110b2:	f000 f85f 	bl	8011174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80110b6:	f107 0308 	add.w	r3, r7, #8
 80110ba:	4619      	mov	r1, r3
 80110bc:	4620      	mov	r0, r4
 80110be:	f7ff ff3f 	bl	8010f40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80110c2:	f107 0308 	add.w	r3, r7, #8
 80110c6:	4618      	mov	r0, r3
 80110c8:	f000 fc74 	bl	80119b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80110d8:	bf00      	nop
 80110da:	3724      	adds	r7, #36	; 0x24
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd90      	pop	{r4, r7, pc}
 80110e0:	080110e5 	.word	0x080110e5

080110e4 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af02      	add	r7, sp, #8
 80110ea:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80110f8:	461a      	mov	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	4b04      	ldr	r3, [pc, #16]	; (8011114 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 8011104:	4804      	ldr	r0, [pc, #16]	; (8011118 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 8011106:	f000 f9cd 	bl	80114a4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801110a:	bf00      	nop
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	2000bf6c 	.word	0x2000bf6c
 8011118:	2000bf68 	.word	0x2000bf68

0801111c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801111c:	b480      	push	{r7}
 801111e:	b083      	sub	sp, #12
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	4a04      	ldr	r2, [pc, #16]	; (8011138 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	601a      	str	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr
 8011138:	08029d64 	.word	0x08029d64

0801113c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4618      	mov	r0, r3
 8011148:	f7ff ffe8 	bl	801111c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801114c:	4a08      	ldr	r2, [pc, #32]	; (8011170 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	601a      	str	r2, [r3, #0]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	605a      	str	r2, [r3, #4]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2200      	movs	r2, #0
 801115c:	609a      	str	r2, [r3, #8]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2200      	movs	r2, #0
 8011162:	60da      	str	r2, [r3, #12]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	4618      	mov	r0, r3
 8011168:	3708      	adds	r7, #8
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	08029d10 	.word	0x08029d10

08011174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	4639      	mov	r1, r7
 8011180:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	4618      	mov	r0, r3
 8011188:	f7ff ffc8 	bl	801111c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801118c:	4a08      	ldr	r2, [pc, #32]	; (80111b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	3308      	adds	r3, #8
 801119c:	463a      	mov	r2, r7
 801119e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	4618      	mov	r0, r3
 80111aa:	3710      	adds	r7, #16
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	08029d10 	.word	0x08029d10

080111b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80111b4:	b590      	push	{r4, r7, lr}
 80111b6:	b089      	sub	sp, #36	; 0x24
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
 80111c0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	689a      	ldr	r2, [r3, #8]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	689b      	ldr	r3, [r3, #8]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	3320      	adds	r3, #32
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4610      	mov	r0, r2
 80111d2:	4798      	blx	r3
 80111d4:	4602      	mov	r2, r0
 80111d6:	f642 0343 	movw	r3, #10307	; 0x2843
 80111da:	429a      	cmp	r2, r3
 80111dc:	d805      	bhi.n	80111ea <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80111de:	4b4e      	ldr	r3, [pc, #312]	; (8011318 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80111e0:	4a4e      	ldr	r2, [pc, #312]	; (801131c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80111e2:	21c2      	movs	r1, #194	; 0xc2
 80111e4:	484e      	ldr	r0, [pc, #312]	; (8011320 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80111e6:	f017 f8e7 	bl	80283b8 <__assert_func>
 80111ea:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	685a      	ldr	r2, [r3, #4]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	3320      	adds	r3, #32
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4610      	mov	r0, r2
 80111fc:	4798      	blx	r3
 80111fe:	4603      	mov	r3, r0
 8011200:	2b0f      	cmp	r3, #15
 8011202:	d805      	bhi.n	8011210 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8011204:	4b47      	ldr	r3, [pc, #284]	; (8011324 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8011206:	4a45      	ldr	r2, [pc, #276]	; (801131c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011208:	21c3      	movs	r1, #195	; 0xc3
 801120a:	4845      	ldr	r0, [pc, #276]	; (8011320 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801120c:	f017 f8d4 	bl	80283b8 <__assert_func>
 8011210:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	68da      	ldr	r2, [r3, #12]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	3320      	adds	r3, #32
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4610      	mov	r0, r2
 8011222:	4798      	blx	r3
 8011224:	4603      	mov	r3, r0
 8011226:	2b0b      	cmp	r3, #11
 8011228:	d805      	bhi.n	8011236 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801122a:	4b3f      	ldr	r3, [pc, #252]	; (8011328 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801122c:	4a3b      	ldr	r2, [pc, #236]	; (801131c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801122e:	21c4      	movs	r1, #196	; 0xc4
 8011230:	483b      	ldr	r0, [pc, #236]	; (8011320 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011232:	f017 f8c1 	bl	80283b8 <__assert_func>
 8011236:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011238:	683a      	ldr	r2, [r7, #0]
 801123a:	68b9      	ldr	r1, [r7, #8]
 801123c:	68f8      	ldr	r0, [r7, #12]
 801123e:	f7ff fd34 	bl	8010caa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	2100      	movs	r1, #0
 8011248:	4618      	mov	r0, r3
 801124a:	f000 f9e5 	bl	8011618 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801124e:	4603      	mov	r3, r0
 8011250:	4619      	mov	r1, r3
 8011252:	200c      	movs	r0, #12
 8011254:	f7ff fb1c 	bl	8010890 <_ZnwjPv>
 8011258:	4604      	mov	r4, r0
 801125a:	2c00      	cmp	r4, #0
 801125c:	d004      	beq.n	8011268 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801125e:	4620      	mov	r0, r4
 8011260:	f7ff fdde 	bl	8010e20 <_ZN8touchgfx12NoTransitionC1Ev>
 8011264:	4623      	mov	r3, r4
 8011266:	e000      	b.n	801126a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011268:	4623      	mov	r3, r4
 801126a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	689b      	ldr	r3, [r3, #8]
 8011270:	2100      	movs	r1, #0
 8011272:	4618      	mov	r0, r3
 8011274:	f000 f9e3 	bl	801163e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011278:	4603      	mov	r3, r0
 801127a:	4619      	mov	r1, r3
 801127c:	f642 0044 	movw	r0, #10308	; 0x2844
 8011280:	f7ff fb06 	bl	8010890 <_ZnwjPv>
 8011284:	4604      	mov	r4, r0
 8011286:	2c00      	cmp	r4, #0
 8011288:	d004      	beq.n	8011294 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801128a:	4620      	mov	r0, r4
 801128c:	f004 fb38 	bl	8015900 <_ZN8MainViewC1Ev>
 8011290:	4623      	mov	r3, r4
 8011292:	e000      	b.n	8011296 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011294:	4623      	mov	r3, r4
 8011296:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	2100      	movs	r1, #0
 801129e:	4618      	mov	r0, r3
 80112a0:	f000 f9e0 	bl	8011664 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80112a4:	4603      	mov	r3, r0
 80112a6:	4619      	mov	r1, r3
 80112a8:	2010      	movs	r0, #16
 80112aa:	f7ff faf1 	bl	8010890 <_ZnwjPv>
 80112ae:	4604      	mov	r4, r0
 80112b0:	2c00      	cmp	r4, #0
 80112b2:	d005      	beq.n	80112c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80112b4:	69b9      	ldr	r1, [r7, #24]
 80112b6:	4620      	mov	r0, r4
 80112b8:	f004 fa76 	bl	80157a8 <_ZN13MainPresenterC1ER8MainView>
 80112bc:	4623      	mov	r3, r4
 80112be:	e000      	b.n	80112c2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80112c0:	4623      	mov	r3, r4
 80112c2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	69fa      	ldr	r2, [r7, #28]
 80112c8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	697a      	ldr	r2, [r7, #20]
 80112ce:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	69ba      	ldr	r2, [r7, #24]
 80112d4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d002      	beq.n	80112e2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	3304      	adds	r3, #4
 80112e0:	e000      	b.n	80112e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80112e2:	2300      	movs	r3, #0
 80112e4:	4619      	mov	r1, r3
 80112e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112e8:	f7ff fd62 	bl	8010db0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	3304      	adds	r3, #4
 80112f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7ff fdd5 	bl	8010ea2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	6979      	ldr	r1, [r7, #20]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f000 f9c4 	bl	801168a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8011302:	69fa      	ldr	r2, [r7, #28]
 8011304:	6979      	ldr	r1, [r7, #20]
 8011306:	69b8      	ldr	r0, [r7, #24]
 8011308:	f7ff fd2b 	bl	8010d62 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801130c:	697b      	ldr	r3, [r7, #20]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3724      	adds	r7, #36	; 0x24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd90      	pop	{r4, r7, pc}
 8011316:	bf00      	nop
 8011318:	08029544 	.word	0x08029544
 801131c:	08029dbc 	.word	0x08029dbc
 8011320:	080295d4 	.word	0x080295d4
 8011324:	08029618 	.word	0x08029618
 8011328:	080296bc 	.word	0x080296bc

0801132c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801132c:	b590      	push	{r4, r7, lr}
 801132e:	b089      	sub	sp, #36	; 0x24
 8011330:	af00      	add	r7, sp, #0
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
 8011338:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	689a      	ldr	r2, [r3, #8]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	3320      	adds	r3, #32
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4610      	mov	r0, r2
 801134a:	4798      	blx	r3
 801134c:	4602      	mov	r2, r0
 801134e:	f642 0343 	movw	r3, #10307	; 0x2843
 8011352:	429a      	cmp	r2, r3
 8011354:	d805      	bhi.n	8011362 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8011356:	4b4e      	ldr	r3, [pc, #312]	; (8011490 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8011358:	4a4e      	ldr	r2, [pc, #312]	; (8011494 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801135a:	21c2      	movs	r1, #194	; 0xc2
 801135c:	484e      	ldr	r0, [pc, #312]	; (8011498 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801135e:	f017 f82b 	bl	80283b8 <__assert_func>
 8011362:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	685a      	ldr	r2, [r3, #4]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	3320      	adds	r3, #32
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4610      	mov	r0, r2
 8011374:	4798      	blx	r3
 8011376:	4603      	mov	r3, r0
 8011378:	2b0f      	cmp	r3, #15
 801137a:	d805      	bhi.n	8011388 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801137c:	4b47      	ldr	r3, [pc, #284]	; (801149c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801137e:	4a45      	ldr	r2, [pc, #276]	; (8011494 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011380:	21c3      	movs	r1, #195	; 0xc3
 8011382:	4845      	ldr	r0, [pc, #276]	; (8011498 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011384:	f017 f818 	bl	80283b8 <__assert_func>
 8011388:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	68da      	ldr	r2, [r3, #12]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	3320      	adds	r3, #32
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	4610      	mov	r0, r2
 801139a:	4798      	blx	r3
 801139c:	4603      	mov	r3, r0
 801139e:	2b53      	cmp	r3, #83	; 0x53
 80113a0:	d805      	bhi.n	80113ae <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80113a2:	4b3f      	ldr	r3, [pc, #252]	; (80114a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80113a4:	4a3b      	ldr	r2, [pc, #236]	; (8011494 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80113a6:	21c4      	movs	r1, #196	; 0xc4
 80113a8:	483b      	ldr	r0, [pc, #236]	; (8011498 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80113aa:	f017 f805 	bl	80283b8 <__assert_func>
 80113ae:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80113b0:	683a      	ldr	r2, [r7, #0]
 80113b2:	68b9      	ldr	r1, [r7, #8]
 80113b4:	68f8      	ldr	r0, [r7, #12]
 80113b6:	f7ff fc78 	bl	8010caa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	2100      	movs	r1, #0
 80113c0:	4618      	mov	r0, r3
 80113c2:	f000 f970 	bl	80116a6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 80113c6:	4603      	mov	r3, r0
 80113c8:	4619      	mov	r1, r3
 80113ca:	2054      	movs	r0, #84	; 0x54
 80113cc:	f7ff fa60 	bl	8010890 <_ZnwjPv>
 80113d0:	4604      	mov	r4, r0
 80113d2:	2c00      	cmp	r4, #0
 80113d4:	d005      	beq.n	80113e2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 80113d6:	2114      	movs	r1, #20
 80113d8:	4620      	mov	r0, r4
 80113da:	f000 f999 	bl	8011710 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80113de:	4623      	mov	r3, r4
 80113e0:	e000      	b.n	80113e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 80113e2:	4623      	mov	r3, r4
 80113e4:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	689b      	ldr	r3, [r3, #8]
 80113ea:	2100      	movs	r1, #0
 80113ec:	4618      	mov	r0, r3
 80113ee:	f000 f926 	bl	801163e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80113f2:	4603      	mov	r3, r0
 80113f4:	4619      	mov	r1, r3
 80113f6:	f642 0044 	movw	r0, #10308	; 0x2844
 80113fa:	f7ff fa49 	bl	8010890 <_ZnwjPv>
 80113fe:	4604      	mov	r4, r0
 8011400:	2c00      	cmp	r4, #0
 8011402:	d004      	beq.n	801140e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011404:	4620      	mov	r0, r4
 8011406:	f004 fa7b 	bl	8015900 <_ZN8MainViewC1Ev>
 801140a:	4623      	mov	r3, r4
 801140c:	e000      	b.n	8011410 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 801140e:	4623      	mov	r3, r4
 8011410:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	2100      	movs	r1, #0
 8011418:	4618      	mov	r0, r3
 801141a:	f000 f923 	bl	8011664 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 801141e:	4603      	mov	r3, r0
 8011420:	4619      	mov	r1, r3
 8011422:	2010      	movs	r0, #16
 8011424:	f7ff fa34 	bl	8010890 <_ZnwjPv>
 8011428:	4604      	mov	r4, r0
 801142a:	2c00      	cmp	r4, #0
 801142c:	d005      	beq.n	801143a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801142e:	69b9      	ldr	r1, [r7, #24]
 8011430:	4620      	mov	r0, r4
 8011432:	f004 f9b9 	bl	80157a8 <_ZN13MainPresenterC1ER8MainView>
 8011436:	4623      	mov	r3, r4
 8011438:	e000      	b.n	801143c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801143a:	4623      	mov	r3, r4
 801143c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	69fa      	ldr	r2, [r7, #28]
 8011442:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	69ba      	ldr	r2, [r7, #24]
 801144e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d002      	beq.n	801145c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	3304      	adds	r3, #4
 801145a:	e000      	b.n	801145e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 801145c:	2300      	movs	r3, #0
 801145e:	4619      	mov	r1, r3
 8011460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011462:	f7ff fca5 	bl	8010db0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	3304      	adds	r3, #4
 801146a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff fd18 	bl	8010ea2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	6979      	ldr	r1, [r7, #20]
 8011476:	4618      	mov	r0, r3
 8011478:	f000 f907 	bl	801168a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801147c:	69fa      	ldr	r2, [r7, #28]
 801147e:	6979      	ldr	r1, [r7, #20]
 8011480:	69b8      	ldr	r0, [r7, #24]
 8011482:	f7ff fc6e 	bl	8010d62 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011486:	697b      	ldr	r3, [r7, #20]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3724      	adds	r7, #36	; 0x24
 801148c:	46bd      	mov	sp, r7
 801148e:	bd90      	pop	{r4, r7, pc}
 8011490:	08029544 	.word	0x08029544
 8011494:	08029ebc 	.word	0x08029ebc
 8011498:	080295d4 	.word	0x080295d4
 801149c:	08029618 	.word	0x08029618
 80114a0:	080296bc 	.word	0x080296bc

080114a4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80114a4:	b590      	push	{r4, r7, lr}
 80114a6:	b089      	sub	sp, #36	; 0x24
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	607a      	str	r2, [r7, #4]
 80114b0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	689a      	ldr	r2, [r3, #8]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3320      	adds	r3, #32
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4610      	mov	r0, r2
 80114c2:	4798      	blx	r3
 80114c4:	4603      	mov	r3, r0
 80114c6:	2bf7      	cmp	r3, #247	; 0xf7
 80114c8:	d805      	bhi.n	80114d6 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80114ca:	4b4e      	ldr	r3, [pc, #312]	; (8011604 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 80114cc:	4a4e      	ldr	r2, [pc, #312]	; (8011608 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80114ce:	21c2      	movs	r1, #194	; 0xc2
 80114d0:	484e      	ldr	r0, [pc, #312]	; (801160c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80114d2:	f016 ff71 	bl	80283b8 <__assert_func>
 80114d6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	3320      	adds	r3, #32
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	4610      	mov	r0, r2
 80114e8:	4798      	blx	r3
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b0f      	cmp	r3, #15
 80114ee:	d805      	bhi.n	80114fc <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 80114f0:	4b47      	ldr	r3, [pc, #284]	; (8011610 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80114f2:	4a45      	ldr	r2, [pc, #276]	; (8011608 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80114f4:	21c3      	movs	r1, #195	; 0xc3
 80114f6:	4845      	ldr	r0, [pc, #276]	; (801160c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80114f8:	f016 ff5e 	bl	80283b8 <__assert_func>
 80114fc:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68da      	ldr	r2, [r3, #12]
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	3320      	adds	r3, #32
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4610      	mov	r0, r2
 801150e:	4798      	blx	r3
 8011510:	4603      	mov	r3, r0
 8011512:	2b53      	cmp	r3, #83	; 0x53
 8011514:	d805      	bhi.n	8011522 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8011516:	4b3f      	ldr	r3, [pc, #252]	; (8011614 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8011518:	4a3b      	ldr	r2, [pc, #236]	; (8011608 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801151a:	21c4      	movs	r1, #196	; 0xc4
 801151c:	483b      	ldr	r0, [pc, #236]	; (801160c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801151e:	f016 ff4b 	bl	80283b8 <__assert_func>
 8011522:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011524:	683a      	ldr	r2, [r7, #0]
 8011526:	68b9      	ldr	r1, [r7, #8]
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f7ff fbbe 	bl	8010caa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	2100      	movs	r1, #0
 8011534:	4618      	mov	r0, r3
 8011536:	f000 f8b6 	bl	80116a6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801153a:	4603      	mov	r3, r0
 801153c:	4619      	mov	r1, r3
 801153e:	2054      	movs	r0, #84	; 0x54
 8011540:	f7ff f9a6 	bl	8010890 <_ZnwjPv>
 8011544:	4604      	mov	r4, r0
 8011546:	2c00      	cmp	r4, #0
 8011548:	d005      	beq.n	8011556 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 801154a:	2114      	movs	r1, #20
 801154c:	4620      	mov	r0, r4
 801154e:	f000 f8df 	bl	8011710 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8011552:	4623      	mov	r3, r4
 8011554:	e000      	b.n	8011558 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8011556:	4623      	mov	r3, r4
 8011558:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	689b      	ldr	r3, [r3, #8]
 801155e:	2100      	movs	r1, #0
 8011560:	4618      	mov	r0, r3
 8011562:	f000 f969 	bl	8011838 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 8011566:	4603      	mov	r3, r0
 8011568:	4619      	mov	r1, r3
 801156a:	20f8      	movs	r0, #248	; 0xf8
 801156c:	f7ff f990 	bl	8010890 <_ZnwjPv>
 8011570:	4604      	mov	r4, r0
 8011572:	2c00      	cmp	r4, #0
 8011574:	d004      	beq.n	8011580 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 8011576:	4620      	mov	r0, r4
 8011578:	f004 fe1e 	bl	80161b8 <_ZN16SecondScreenViewC1Ev>
 801157c:	4623      	mov	r3, r4
 801157e:	e000      	b.n	8011582 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8011580:	4623      	mov	r3, r4
 8011582:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	2100      	movs	r1, #0
 801158a:	4618      	mov	r0, r3
 801158c:	f000 f967 	bl	801185e <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 8011590:	4603      	mov	r3, r0
 8011592:	4619      	mov	r1, r3
 8011594:	2010      	movs	r0, #16
 8011596:	f7ff f97b 	bl	8010890 <_ZnwjPv>
 801159a:	4604      	mov	r4, r0
 801159c:	2c00      	cmp	r4, #0
 801159e:	d005      	beq.n	80115ac <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 80115a0:	69b9      	ldr	r1, [r7, #24]
 80115a2:	4620      	mov	r0, r4
 80115a4:	f004 fdb2 	bl	801610c <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 80115a8:	4623      	mov	r3, r4
 80115aa:	e000      	b.n	80115ae <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 80115ac:	4623      	mov	r3, r4
 80115ae:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	69fa      	ldr	r2, [r7, #28]
 80115b4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	69ba      	ldr	r2, [r7, #24]
 80115c0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	3304      	adds	r3, #4
 80115cc:	e000      	b.n	80115d0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 80115ce:	2300      	movs	r3, #0
 80115d0:	4619      	mov	r1, r3
 80115d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115d4:	f7ff fbec 	bl	8010db0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	3304      	adds	r3, #4
 80115dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff fc5f 	bl	8010ea2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	6979      	ldr	r1, [r7, #20]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f000 f94b 	bl	8011884 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80115ee:	69fa      	ldr	r2, [r7, #28]
 80115f0:	6979      	ldr	r1, [r7, #20]
 80115f2:	69b8      	ldr	r0, [r7, #24]
 80115f4:	f7ff fbb5 	bl	8010d62 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80115f8:	697b      	ldr	r3, [r7, #20]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3724      	adds	r7, #36	; 0x24
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd90      	pop	{r4, r7, pc}
 8011602:	bf00      	nop
 8011604:	08029544 	.word	0x08029544
 8011608:	08029fd8 	.word	0x08029fd8
 801160c:	080295d4 	.word	0x080295d4
 8011610:	08029618 	.word	0x08029618
 8011614:	080296bc 	.word	0x080296bc

08011618 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	3324      	adds	r3, #36	; 0x24
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	887a      	ldrh	r2, [r7, #2]
 801162e:	4611      	mov	r1, r2
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	4798      	blx	r3
 8011634:	4603      	mov	r3, r0
    }
 8011636:	4618      	mov	r0, r3
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 801163e:	b580      	push	{r7, lr}
 8011640:	b082      	sub	sp, #8
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	460b      	mov	r3, r1
 8011648:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	3324      	adds	r3, #36	; 0x24
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	887a      	ldrh	r2, [r7, #2]
 8011654:	4611      	mov	r1, r2
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	4798      	blx	r3
 801165a:	4603      	mov	r3, r0
    }
 801165c:	4618      	mov	r0, r3
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	460b      	mov	r3, r1
 801166e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	3324      	adds	r3, #36	; 0x24
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	887a      	ldrh	r2, [r7, #2]
 801167a:	4611      	mov	r1, r2
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	4798      	blx	r3
 8011680:	4603      	mov	r3, r0
    }
 8011682:	4618      	mov	r0, r3
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801168a:	b480      	push	{r7}
 801168c:	b083      	sub	sp, #12
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	683a      	ldr	r2, [r7, #0]
 8011698:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801169a:	bf00      	nop
 801169c:	370c      	adds	r7, #12
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr

080116a6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b082      	sub	sp, #8
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	460b      	mov	r3, r1
 80116b0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	3324      	adds	r3, #36	; 0x24
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	887a      	ldrh	r2, [r7, #2]
 80116bc:	4611      	mov	r1, r2
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	4798      	blx	r3
 80116c2:	4603      	mov	r3, r0
    }
 80116c4:	4618      	mov	r0, r3
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	4a05      	ldr	r2, [pc, #20]	; (80116ec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	601a      	str	r2, [r3, #0]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4618      	mov	r0, r3
 80116de:	f000 f949 	bl	8011974 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4618      	mov	r0, r3
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	08029c84 	.word	0x08029c84

080116f0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7ff ffe7 	bl	80116cc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80116fe:	2110      	movs	r1, #16
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f016 fe2e 	bl	8028362 <_ZdlPvj>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8011710:	b590      	push	{r4, r7, lr}
 8011712:	b087      	sub	sp, #28
 8011714:	af02      	add	r7, sp, #8
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	460b      	mov	r3, r1
 801171a:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff f924 	bl	801096c <_ZN8touchgfx10TransitionC1Ev>
 8011724:	4a3f      	ldr	r2, [pc, #252]	; (8011824 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	330c      	adds	r3, #12
 801172e:	4618      	mov	r0, r3
 8011730:	f009 f914 	bl	801a95c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f103 020c 	add.w	r2, r3, #12
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	639a      	str	r2, [r3, #56]	; 0x38
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011744:	4a38      	ldr	r2, [pc, #224]	; (8011828 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 8011746:	f107 0308 	add.w	r3, r7, #8
 801174a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801174e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011752:	f107 0308 	add.w	r3, r7, #8
 8011756:	cb0c      	ldmia	r3, {r2, r3}
 8011758:	6879      	ldr	r1, [r7, #4]
 801175a:	4620      	mov	r0, r4
 801175c:	f000 f8ea 	bl	8011934 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2202      	movs	r2, #2
 8011764:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	78fa      	ldrb	r2, [r7, #3]
 801176c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2200      	movs	r2, #0
 8011774:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2200      	movs	r2, #0
 801177c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011780:	4b2a      	ldr	r3, [pc, #168]	; (801182c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d047      	beq.n	8011818 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f103 000c 	add.w	r0, r3, #12
 801178e:	4b28      	ldr	r3, [pc, #160]	; (8011830 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	b21a      	sxth	r2, r3
 8011794:	4b27      	ldr	r3, [pc, #156]	; (8011834 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	b21b      	sxth	r3, r3
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	4613      	mov	r3, r2
 801179e:	2200      	movs	r2, #0
 80117a0:	2100      	movs	r1, #0
 80117a2:	f7ff f971 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	330c      	adds	r3, #12
 80117aa:	4618      	mov	r0, r3
 80117ac:	f009 f852 	bl	801a854 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80117b6:	2b03      	cmp	r3, #3
 80117b8:	d82a      	bhi.n	8011810 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 80117ba:	a201      	add	r2, pc, #4	; (adr r2, 80117c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 80117bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c0:	080117f1 	.word	0x080117f1
 80117c4:	080117ff 	.word	0x080117ff
 80117c8:	080117d1 	.word	0x080117d1
 80117cc:	080117e3 	.word	0x080117e3
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 80117d0:	4b17      	ldr	r3, [pc, #92]	; (8011830 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80117d2:	881b      	ldrh	r3, [r3, #0]
 80117d4:	425b      	negs	r3, r3
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	b21a      	sxth	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80117e0:	e01a      	b.n	8011818 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 80117e2:	4b13      	ldr	r3, [pc, #76]	; (8011830 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80117e4:	881b      	ldrh	r3, [r3, #0]
 80117e6:	b21a      	sxth	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80117ee:	e013      	b.n	8011818 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 80117f0:	4b10      	ldr	r3, [pc, #64]	; (8011834 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80117f2:	881b      	ldrh	r3, [r3, #0]
 80117f4:	b21a      	sxth	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80117fc:	e00c      	b.n	8011818 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 80117fe:	4b0d      	ldr	r3, [pc, #52]	; (8011834 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	425b      	negs	r3, r3
 8011804:	b29b      	uxth	r3, r3
 8011806:	b21a      	sxth	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801180e:	e003      	b.n	8011818 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2201      	movs	r2, #1
 8011814:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8011816:	bf00      	nop
            }
        }
    }
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4618      	mov	r0, r3
 801181c:	3714      	adds	r7, #20
 801181e:	46bd      	mov	sp, r7
 8011820:	bd90      	pop	{r4, r7, pc}
 8011822:	bf00      	nop
 8011824:	08029c5c 	.word	0x08029c5c
 8011828:	08029760 	.word	0x08029760
 801182c:	2000bee9 	.word	0x2000bee9
 8011830:	2000bede 	.word	0x2000bede
 8011834:	2000bee0 	.word	0x2000bee0

08011838 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	460b      	mov	r3, r1
 8011842:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	3324      	adds	r3, #36	; 0x24
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	887a      	ldrh	r2, [r7, #2]
 801184e:	4611      	mov	r1, r2
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	4798      	blx	r3
 8011854:	4603      	mov	r3, r0
    }
 8011856:	4618      	mov	r0, r3
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 801185e:	b580      	push	{r7, lr}
 8011860:	b082      	sub	sp, #8
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
 8011866:	460b      	mov	r3, r1
 8011868:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3324      	adds	r3, #36	; 0x24
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	887a      	ldrh	r2, [r7, #2]
 8011874:	4611      	mov	r1, r2
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	4798      	blx	r3
 801187a:	4603      	mov	r3, r0
    }
 801187c:	4618      	mov	r0, r3
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	683a      	ldr	r2, [r7, #0]
 8011892:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011894:	bf00      	nop
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ae:	683a      	ldr	r2, [r7, #0]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d02a      	beq.n	801190a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80118ba:	2b03      	cmp	r3, #3
 80118bc:	d820      	bhi.n	8011900 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 80118be:	a201      	add	r2, pc, #4	; (adr r2, 80118c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 80118c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c4:	080118eb 	.word	0x080118eb
 80118c8:	080118eb 	.word	0x080118eb
 80118cc:	080118d5 	.word	0x080118d5
 80118d0:	080118d5 	.word	0x080118d5
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	3354      	adds	r3, #84	; 0x54
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 80118e2:	2200      	movs	r2, #0
 80118e4:	6838      	ldr	r0, [r7, #0]
 80118e6:	4798      	blx	r3
            break;
 80118e8:	e010      	b.n	801190c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	3354      	adds	r3, #84	; 0x54
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 80118f8:	2100      	movs	r1, #0
 80118fa:	6838      	ldr	r0, [r7, #0]
 80118fc:	4798      	blx	r3
            break;
 80118fe:	e005      	b.n	801190c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2201      	movs	r2, #1
 8011904:	721a      	strb	r2, [r3, #8]
            break;
 8011906:	bf00      	nop
 8011908:	e000      	b.n	801190c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 801190a:	bf00      	nop
        }
    }
 801190c:	3708      	adds	r7, #8
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop

08011914 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	4a04      	ldr	r2, [pc, #16]	; (8011930 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4618      	mov	r0, r3
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	08029c9c 	.word	0x08029c9c

08011934 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	4639      	mov	r1, r7
 8011940:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	4618      	mov	r0, r3
 8011948:	f7ff ffe4 	bl	8011914 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 801194c:	4a08      	ldr	r2, [pc, #32]	; (8011970 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	68ba      	ldr	r2, [r7, #8]
 8011956:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	3308      	adds	r3, #8
 801195c:	463a      	mov	r2, r7
 801195e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011962:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	4618      	mov	r0, r3
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	08029c84 	.word	0x08029c84

08011974 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
    }
 801197c:	4a04      	ldr	r2, [pc, #16]	; (8011990 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	601a      	str	r2, [r3, #0]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4618      	mov	r0, r3
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr
 8011990:	08029c9c 	.word	0x08029c9c

08011994 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
    }
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff ffe9 	bl	8011974 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80119a2:	2104      	movs	r1, #4
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f016 fcdc 	bl	8028362 <_ZdlPvj>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	4a05      	ldr	r2, [pc, #20]	; (80119d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	601a      	str	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7ff f83f 	bl	8010a48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	08029d10 	.word	0x08029d10

080119d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7ff ffe7 	bl	80119b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80119e6:	2110      	movs	r1, #16
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f016 fcba 	bl	8028362 <_ZdlPvj>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
    }
 8011a00:	4a0a      	ldr	r2, [pc, #40]	; (8011a2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	601a      	str	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	333c      	adds	r3, #60	; 0x3c
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff fe5e 	bl	80116cc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	330c      	adds	r3, #12
 8011a14:	4618      	mov	r0, r3
 8011a16:	f008 ff1c 	bl	801a852 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fe ffbb 	bl	8010998 <_ZN8touchgfx10TransitionD1Ev>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	08029c5c 	.word	0x08029c5c

08011a30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
    }
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7ff ffdd 	bl	80119f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8011a3e:	2154      	movs	r1, #84	; 0x54
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f016 fc8e 	bl	8028362 <_ZdlPvj>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3708      	adds	r7, #8
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011a58:	4b59      	ldr	r3, [pc, #356]	; (8011bc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	f083 0301 	eor.w	r3, r3, #1
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d003      	beq.n	8011a6e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	721a      	strb	r2, [r3, #8]
            return;
 8011a6c:	e0a5      	b.n	8011bba <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7fe ffb1 	bl	80109d8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d82f      	bhi.n	8011af6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011a9c:	b298      	uxth	r0, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	2100      	movs	r1, #0
 8011aae:	f00b fd7c 	bl	801d5aa <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	f003 0301 	and.w	r3, r3, #1
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d01b      	beq.n	8011b06 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011adc:	2a00      	cmp	r2, #0
 8011ade:	dd01      	ble.n	8011ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	e001      	b.n	8011ae8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8011ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ae8:	4413      	add	r3, r2
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	b21a      	sxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011af4:	e007      	b.n	8011b06 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2201      	movs	r2, #1
 8011afa:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2200      	movs	r2, #0
 8011b00:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011b04:	e059      	b.n	8011bba <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011b0c:	2b03      	cmp	r3, #3
 8011b0e:	d845      	bhi.n	8011b9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 8011b10:	a201      	add	r2, pc, #4	; (adr r2, 8011b18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 8011b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b16:	bf00      	nop
 8011b18:	08011b63 	.word	0x08011b63
 8011b1c:	08011b63 	.word	0x08011b63
 8011b20:	08011b29 	.word	0x08011b29
 8011b24:	08011b29 	.word	0x08011b29
            calculatedValue -= snapshot.getX();
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	330c      	adds	r3, #12
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fe ffd8 	bl	8010ae2 <_ZNK8touchgfx8Drawable4getXEv>
 8011b32:	4603      	mov	r3, r0
 8011b34:	4619      	mov	r1, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011b3c:	b29a      	uxth	r2, r3
 8011b3e:	b28b      	uxth	r3, r1
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	b21a      	sxth	r2, r3
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f103 000c 	add.w	r0, r3, #12
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011b58:	2200      	movs	r2, #0
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	f00b f85c 	bl	801cc18 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011b60:	e020      	b.n	8011ba4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	330c      	adds	r3, #12
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fe ffc8 	bl	8010afc <_ZNK8touchgfx8Drawable4getYEv>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	4619      	mov	r1, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	b28b      	uxth	r3, r1
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	b21a      	sxth	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f103 000c 	add.w	r0, r3, #12
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011b92:	461a      	mov	r2, r3
 8011b94:	2100      	movs	r1, #0
 8011b96:	f00b f83f 	bl	801cc18 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011b9a:	e003      	b.n	8011ba4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	721a      	strb	r2, [r3, #8]
            break;
 8011ba2:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6858      	ldr	r0, [r3, #4]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3378      	adds	r3, #120	; 0x78
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	323c      	adds	r2, #60	; 0x3c
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	4798      	blx	r3
    }
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	2000bee9 	.word	0x2000bee9

08011bc4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8011bcc:	4b0b      	ldr	r3, [pc, #44]	; (8011bfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d00e      	beq.n	8011bf2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00a      	beq.n	8011bf2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6858      	ldr	r0, [r3, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	3364      	adds	r3, #100	; 0x64
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	320c      	adds	r2, #12
 8011bee:	4611      	mov	r1, r2
 8011bf0:	4798      	blx	r3
    }
 8011bf2:	bf00      	nop
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	2000bee9 	.word	0x2000bee9

08011c00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b088      	sub	sp, #32
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8011c08:	4b1a      	ldr	r3, [pc, #104]	; (8011c74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d02d      	beq.n	8011c6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fe fef4 	bl	8010a00 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011c18:	4a17      	ldr	r2, [pc, #92]	; (8011c78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8011c1a:	f107 0318 	add.w	r3, r7, #24
 8011c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c22:	e883 0003 	stmia.w	r3, {r0, r1}
 8011c26:	f107 0008 	add.w	r0, r7, #8
 8011c2a:	f107 0318 	add.w	r3, r7, #24
 8011c2e:	cb0c      	ldmia	r3, {r2, r3}
 8011c30:	6879      	ldr	r1, [r7, #4]
 8011c32:	f7ff fe7f 	bl	8011934 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	685a      	ldr	r2, [r3, #4]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	3378      	adds	r3, #120	; 0x78
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f107 0108 	add.w	r1, r7, #8
 8011c48:	4610      	mov	r0, r2
 8011c4a:	4798      	blx	r3
            screenContainer->add(snapshot);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6858      	ldr	r0, [r3, #4]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	3360      	adds	r3, #96	; 0x60
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	320c      	adds	r2, #12
 8011c5e:	4611      	mov	r1, r2
 8011c60:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011c62:	f107 0308 	add.w	r3, r7, #8
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7ff fd30 	bl	80116cc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011c6c:	bf00      	nop
 8011c6e:	3720      	adds	r7, #32
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	2000bee9 	.word	0x2000bee9
 8011c78:	08029768 	.word	0x08029768

08011c7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011c8c:	2b03      	cmp	r3, #3
 8011c8e:	d83b      	bhi.n	8011d08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011c90:	a201      	add	r2, pc, #4	; (adr r2, 8011c98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8011c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c96:	bf00      	nop
 8011c98:	08011cd9 	.word	0x08011cd9
 8011c9c:	08011cf3 	.word	0x08011cf3
 8011ca0:	08011ca9 	.word	0x08011ca9
 8011ca4:	08011cbf 	.word	0x08011cbf
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	3354      	adds	r3, #84	; 0x54
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	4a18      	ldr	r2, [pc, #96]	; (8011d14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011cb2:	8812      	ldrh	r2, [r2, #0]
 8011cb4:	b211      	sxth	r1, r2
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	6838      	ldr	r0, [r7, #0]
 8011cba:	4798      	blx	r3
            break;
 8011cbc:	e025      	b.n	8011d0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	3354      	adds	r3, #84	; 0x54
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4a13      	ldr	r2, [pc, #76]	; (8011d14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011cc8:	8812      	ldrh	r2, [r2, #0]
 8011cca:	4252      	negs	r2, r2
 8011ccc:	b292      	uxth	r2, r2
 8011cce:	b211      	sxth	r1, r2
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	6838      	ldr	r0, [r7, #0]
 8011cd4:	4798      	blx	r3
            break;
 8011cd6:	e018      	b.n	8011d0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	3354      	adds	r3, #84	; 0x54
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4a0d      	ldr	r2, [pc, #52]	; (8011d18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011ce2:	8812      	ldrh	r2, [r2, #0]
 8011ce4:	4252      	negs	r2, r2
 8011ce6:	b292      	uxth	r2, r2
 8011ce8:	b212      	sxth	r2, r2
 8011cea:	2100      	movs	r1, #0
 8011cec:	6838      	ldr	r0, [r7, #0]
 8011cee:	4798      	blx	r3
            break;
 8011cf0:	e00b      	b.n	8011d0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	3354      	adds	r3, #84	; 0x54
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	4a07      	ldr	r2, [pc, #28]	; (8011d18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011cfc:	8812      	ldrh	r2, [r2, #0]
 8011cfe:	b212      	sxth	r2, r2
 8011d00:	2100      	movs	r1, #0
 8011d02:	6838      	ldr	r0, [r7, #0]
 8011d04:	4798      	blx	r3
            break;
 8011d06:	e000      	b.n	8011d0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8011d08:	bf00      	nop
    }
 8011d0a:	bf00      	nop
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	2000bede 	.word	0x2000bede
 8011d18:	2000bee0 	.word	0x2000bee0

08011d1c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	68d2      	ldr	r2, [r2, #12]
 8011d2e:	1052      	asrs	r2, r2, #1
 8011d30:	1898      	adds	r0, r3, r2
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	f003 0301 	and.w	r3, r3, #1
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d102      	bne.n	8011d44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	689b      	ldr	r3, [r3, #8]
 8011d42:	e00a      	b.n	8011d5a <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	68d2      	ldr	r2, [r2, #12]
 8011d4c:	1052      	asrs	r2, r2, #1
 8011d4e:	4413      	add	r3, r2
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	6892      	ldr	r2, [r2, #8]
 8011d56:	4413      	add	r3, r2
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	6839      	ldr	r1, [r7, #0]
 8011d5c:	4798      	blx	r3
    }
 8011d5e:	bf00      	nop
 8011d60:	3708      	adds	r7, #8
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011d66:	b480      	push	{r7}
 8011d68:	b083      	sub	sp, #12
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d010      	beq.n	8011d98 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	689b      	ldr	r3, [r3, #8]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d107      	bne.n	8011d8e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d101      	bne.n	8011d8e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e000      	b.n	8011d90 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d001      	beq.n	8011d98 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011d94:	2301      	movs	r3, #1
 8011d96:	e000      	b.n	8011d9a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011d98:	2300      	movs	r3, #0
    }
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	370c      	adds	r7, #12
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr

08011da6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b082      	sub	sp, #8
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	68d2      	ldr	r2, [r2, #12]
 8011db6:	1052      	asrs	r2, r2, #1
 8011db8:	1899      	adds	r1, r3, r2
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	f003 0301 	and.w	r3, r3, #1
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d102      	bne.n	8011dcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	e00a      	b.n	8011de2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	68d2      	ldr	r2, [r2, #12]
 8011dd4:	1052      	asrs	r2, r2, #1
 8011dd6:	4413      	add	r3, r2
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	6892      	ldr	r2, [r2, #8]
 8011dde:	4413      	add	r3, r2
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	4608      	mov	r0, r1
 8011de4:	4798      	blx	r3
    }
 8011de6:	bf00      	nop
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}

08011dee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011dee:	b480      	push	{r7}
 8011df0:	b083      	sub	sp, #12
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d010      	beq.n	8011e20 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d107      	bne.n	8011e16 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d101      	bne.n	8011e16 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011e12:	2301      	movs	r3, #1
 8011e14:	e000      	b.n	8011e18 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011e16:	2300      	movs	r3, #0
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d001      	beq.n	8011e20 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e000      	b.n	8011e22 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8011e20:	2300      	movs	r3, #0
    }
 8011e22:	4618      	mov	r0, r3
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr

08011e2e <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 8011e2e:	b480      	push	{r7}
 8011e30:	b083      	sub	sp, #12
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	6078      	str	r0, [r7, #4]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	601a      	str	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	370c      	adds	r7, #12
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr

08011e4a <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8011e4a:	b480      	push	{r7}
 8011e4c:	b083      	sub	sp, #12
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
 8011e52:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	601a      	str	r2, [r3, #0]
    }
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2200      	movs	r2, #0
 8011e86:	80da      	strh	r2, [r3, #6]
    }
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	370c      	adds	r7, #12
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr

08011e96 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8011e96:	b480      	push	{r7}
 8011e98:	b085      	sub	sp, #20
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	60f8      	str	r0, [r7, #12]
 8011e9e:	4608      	mov	r0, r1
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	817b      	strh	r3, [r7, #10]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	813b      	strh	r3, [r7, #8]
 8011eac:	4613      	mov	r3, r2
 8011eae:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	897a      	ldrh	r2, [r7, #10]
 8011eb4:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	893a      	ldrh	r2, [r7, #8]
 8011eba:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	88fa      	ldrh	r2, [r7, #6]
 8011ec0:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	8b3a      	ldrh	r2, [r7, #24]
 8011ec6:	80da      	strh	r2, [r3, #6]
    }
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3714      	adds	r7, #20
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8011ed6:	b480      	push	{r7}
 8011ed8:	b083      	sub	sp, #12
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
    {
        return _type;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	791b      	ldrb	r3, [r3, #4]
    }
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	370c      	adds	r7, #12
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8011eee:	b480      	push	{r7}
 8011ef0:	b083      	sub	sp, #12
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	887a      	ldrh	r2, [r7, #2]
 8011efe:	801a      	strh	r2, [r3, #0]
    {
    }
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	4618      	mov	r0, r3
 8011f04:	370c      	adds	r7, #12
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
	...

08011f10 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af02      	add	r7, sp, #8
 8011f16:	6078      	str	r0, [r7, #4]
        visible(true)
 8011f18:	4a13      	ldr	r2, [pc, #76]	; (8011f68 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	601a      	str	r2, [r3, #0]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	1d18      	adds	r0, r3, #4
 8011f22:	2300      	movs	r3, #0
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	2300      	movs	r3, #0
 8011f28:	2200      	movs	r2, #0
 8011f2a:	2100      	movs	r1, #0
 8011f2c:	f7ff ffb3 	bl	8011e96 <_ZN8touchgfx4RectC1Essss>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	330c      	adds	r3, #12
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7ff ff97 	bl	8011e68 <_ZN8touchgfx4RectC1Ev>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	615a      	str	r2, [r3, #20]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2200      	movs	r2, #0
 8011f44:	619a      	str	r2, [r3, #24]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	61da      	str	r2, [r3, #28]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2201      	movs	r2, #1
 8011f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3708      	adds	r7, #8
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	0802c5f4 	.word	0x0802c5f4

08011f6c <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	4a04      	ldr	r2, [pc, #16]	; (8011f88 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	0802c5f4 	.word	0x0802c5f4

08011f8c <_ZN8touchgfx8DrawableD0Ev>:
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff ffe9 	bl	8011f6c <_ZN8touchgfx8DrawableD1Ev>
 8011f9a:	2128      	movs	r1, #40	; 0x28
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f016 f9e0 	bl	8028362 <_ZdlPvj>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	887a      	ldrh	r2, [r7, #2]
 8011fbc:	809a      	strh	r2, [r3, #4]
    }
 8011fbe:	bf00      	nop
 8011fc0:	370c      	adds	r7, #12
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr

08011fca <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8011fca:	b480      	push	{r7}
 8011fcc:	b083      	sub	sp, #12
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
 8011fd2:	460b      	mov	r3, r1
 8011fd4:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	887a      	ldrh	r2, [r7, #2]
 8011fda:	80da      	strh	r2, [r3, #6]
    }
 8011fdc:	bf00      	nop
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr

08011fe8 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	807b      	strh	r3, [r7, #2]
 8011ff4:	4613      	mov	r3, r2
 8011ff6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	332c      	adds	r3, #44	; 0x2c
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012004:	4611      	mov	r1, r2
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	4798      	blx	r3
        setY(y);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	3330      	adds	r3, #48	; 0x30
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012016:	4611      	mov	r1, r2
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	4798      	blx	r3
    }
 801201c:	bf00      	nop
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	887a      	ldrh	r2, [r7, #2]
 8012034:	811a      	strh	r2, [r3, #8]
    }
 8012036:	bf00      	nop
 8012038:	370c      	adds	r7, #12
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr

08012042 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8012042:	b480      	push	{r7}
 8012044:	b083      	sub	sp, #12
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]
 801204a:	460b      	mov	r3, r1
 801204c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	887a      	ldrh	r2, [r7, #2]
 8012052:	815a      	strh	r2, [r3, #10]
    }
 8012054:	bf00      	nop
 8012056:	370c      	adds	r7, #12
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 8012060:	b480      	push	{r7}
 8012062:	b083      	sub	sp, #12
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	bf00      	nop
 801206a:	370c      	adds	r7, #12
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr

08012074 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
 801207e:	bf00      	nop
 8012080:	370c      	adds	r7, #12
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr

0801208a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 801208a:	b480      	push	{r7}
 801208c:	b083      	sub	sp, #12
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	6039      	str	r1, [r7, #0]
 8012094:	bf00      	nop
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
 80120aa:	bf00      	nop
 80120ac:	370c      	adds	r7, #12
 80120ae:	46bd      	mov	sp, r7
 80120b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b4:	4770      	bx	lr

080120b6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80120b6:	b480      	push	{r7}
 80120b8:	b083      	sub	sp, #12
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
 80120be:	bf00      	nop
 80120c0:	370c      	adds	r7, #12
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr

080120ca <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80120ca:	b480      	push	{r7}
 80120cc:	b083      	sub	sp, #12
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
 80120d2:	460b      	mov	r3, r1
 80120d4:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	78fa      	ldrb	r2, [r7, #3]
 80120da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80120de:	bf00      	nop
 80120e0:	370c      	adds	r7, #12
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr

080120ea <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80120ea:	b480      	push	{r7}
 80120ec:	b083      	sub	sp, #12
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
 80120f2:	460b      	mov	r3, r1
 80120f4:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	78fa      	ldrb	r2, [r7, #3]
 80120fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80120fe:	bf00      	nop
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8012132:	4618      	mov	r0, r3
 8012134:	370c      	adds	r7, #12
 8012136:	46bd      	mov	sp, r7
 8012138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213c:	4770      	bx	lr

0801213e <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801213e:	b580      	push	{r7, lr}
 8012140:	b082      	sub	sp, #8
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
 8012146:	460b      	mov	r3, r1
 8012148:	807b      	strh	r3, [r7, #2]
 801214a:	4613      	mov	r3, r2
 801214c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	3354      	adds	r3, #84	; 0x54
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	8879      	ldrh	r1, [r7, #2]
 8012158:	687a      	ldr	r2, [r7, #4]
 801215a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801215e:	b292      	uxth	r2, r2
 8012160:	1a8a      	subs	r2, r1, r2
 8012162:	b292      	uxth	r2, r2
 8012164:	b210      	sxth	r0, r2
 8012166:	8839      	ldrh	r1, [r7, #0]
 8012168:	687a      	ldr	r2, [r7, #4]
 801216a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801216e:	b292      	uxth	r2, r2
 8012170:	1a8a      	subs	r2, r1, r2
 8012172:	b292      	uxth	r2, r2
 8012174:	b212      	sxth	r2, r2
 8012176:	4601      	mov	r1, r0
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	4798      	blx	r3
    }
 801217c:	bf00      	nop
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012192:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801219a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121a2:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80121a4:	bf00      	nop
 80121a6:	370c      	adds	r7, #12
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr

080121b0 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80121bc:	68f8      	ldr	r0, [r7, #12]
 80121be:	f7ff ffe1 	bl	8012184 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	601a      	str	r2, [r3, #0]
    }
 80121d0:	bf00      	nop
 80121d2:	3710      	adds	r7, #16
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
        firstChild(0)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7ff fe94 	bl	8011f10 <_ZN8touchgfx8DrawableC1Ev>
 80121e8:	4a05      	ldr	r2, [pc, #20]	; (8012200 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	4618      	mov	r0, r3
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	0802b2e8 	.word	0x0802b2e8

08012204 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	4a05      	ldr	r2, [pc, #20]	; (8012224 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	601a      	str	r2, [r3, #0]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	f7ff fea9 	bl	8011f6c <_ZN8touchgfx8DrawableD1Ev>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	4618      	mov	r0, r3
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	0802b2e8 	.word	0x0802b2e8

08012228 <_ZN8touchgfx9ContainerD0Ev>:
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7ff ffe7 	bl	8012204 <_ZN8touchgfx9ContainerD1Ev>
 8012236:	212c      	movs	r1, #44	; 0x2c
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f016 f892 	bl	8028362 <_ZdlPvj>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4618      	mov	r0, r3
 8012242:	3708      	adds	r7, #8
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	4a06      	ldr	r2, [pc, #24]	; (801226c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	601a      	str	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	3304      	adds	r3, #4
 801225a:	4618      	mov	r0, r3
 801225c:	f7ff ffd2 	bl	8012204 <_ZN8touchgfx9ContainerD1Ev>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	0802c6ec 	.word	0x0802c6ec

08012270 <_ZN8touchgfx6ScreenD0Ev>:
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f7ff ffe5 	bl	8012248 <_ZN8touchgfx6ScreenD1Ev>
 801227e:	213c      	movs	r1, #60	; 0x3c
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f016 f86e 	bl	8028362 <_ZdlPvj>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	4618      	mov	r0, r3
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	bf00      	nop
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	bf00      	nop
 80122ae:	370c      	adds	r7, #12
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr

080122b8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80122b8:	b480      	push	{r7}
 80122ba:	b083      	sub	sp, #12
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	bf00      	nop
 80122c2:	370c      	adds	r7, #12
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
    {
    }
 80122d4:	bf00      	nop
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	460b      	mov	r3, r1
 80122ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 80122ec:	bf00      	nop
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	3304      	adds	r3, #4
 8012306:	6839      	ldr	r1, [r7, #0]
 8012308:	4618      	mov	r0, r3
 801230a:	f006 fd5d 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801230e:	bf00      	nop
 8012310:	3708      	adds	r7, #8
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
	...

08012318 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	4618      	mov	r0, r3
 8012324:	f7ff fdf4 	bl	8011f10 <_ZN8touchgfx8DrawableC1Ev>
 8012328:	4a03      	ldr	r2, [pc, #12]	; (8012338 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	0802a3dc 	.word	0x0802a3dc

0801233c <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	4a05      	ldr	r2, [pc, #20]	; (801235c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	601a      	str	r2, [r3, #0]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4618      	mov	r0, r3
 801234e:	f7ff fe0d 	bl	8011f6c <_ZN8touchgfx8DrawableD1Ev>
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	4618      	mov	r0, r3
 8012356:	3708      	adds	r7, #8
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}
 801235c:	0802a3dc 	.word	0x0802a3dc

08012360 <_ZN8touchgfx6WidgetD0Ev>:
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f7ff ffe7 	bl	801233c <_ZN8touchgfx6WidgetD1Ev>
 801236e:	2128      	movs	r1, #40	; 0x28
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f015 fff6 	bl	8028362 <_ZdlPvj>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	607b      	str	r3, [r7, #4]
 801238a:	460b      	mov	r3, r1
 801238c:	817b      	strh	r3, [r7, #10]
 801238e:	4613      	mov	r3, r2
 8012390:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff feb8 	bl	801210a <_ZNK8touchgfx8Drawable9isVisibleEv>
 801239a:	4603      	mov	r3, r0
 801239c:	2b00      	cmp	r3, #0
 801239e:	d008      	beq.n	80123b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7ff febe 	bl	8012124 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80123a8:	4603      	mov	r3, r0
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d001      	beq.n	80123b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80123ae:	2301      	movs	r3, #1
 80123b0:	e000      	b.n	80123b4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80123b2:	2300      	movs	r3, #0
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d002      	beq.n	80123be <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	601a      	str	r2, [r3, #0]
        }
    }
 80123be:	bf00      	nop
 80123c0:	3710      	adds	r7, #16
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
	...

080123c8 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7ff ffa0 	bl	8012318 <_ZN8touchgfx6WidgetC1Ev>
 80123d8:	4a0a      	ldr	r2, [pc, #40]	; (8012404 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	601a      	str	r2, [r3, #0]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	22ff      	movs	r2, #255	; 0xff
 80123e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	3328      	adds	r3, #40	; 0x28
 80123ea:	2100      	movs	r1, #0
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7ff fd2c 	bl	8011e4a <_ZN8touchgfx9colortypeC1Em>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2200      	movs	r2, #0
 80123f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4618      	mov	r0, r3
 80123fe:	3708      	adds	r7, #8
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	0802c090 	.word	0x0802c090

08012408 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	4a05      	ldr	r2, [pc, #20]	; (8012428 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	601a      	str	r2, [r3, #0]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	4618      	mov	r0, r3
 801241a:	f7ff ff8f 	bl	801233c <_ZN8touchgfx6WidgetD1Ev>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	4618      	mov	r0, r3
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	0802c090 	.word	0x0802c090

0801242c <_ZN8touchgfx3BoxD0Ev>:
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f7ff ffe7 	bl	8012408 <_ZN8touchgfx3BoxD1Ev>
 801243a:	2130      	movs	r1, #48	; 0x30
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f015 ff90 	bl	8028362 <_ZdlPvj>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4618      	mov	r0, r3
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	683a      	ldr	r2, [r7, #0]
 801245a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801245c:	bf00      	nop
 801245e:	370c      	adds	r7, #12
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr

08012468 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	460b      	mov	r3, r1
 8012472:	807b      	strh	r3, [r7, #2]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	887a      	ldrh	r2, [r7, #2]
 8012478:	801a      	strh	r2, [r3, #0]
    }
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4618      	mov	r0, r3
 801247e:	370c      	adds	r7, #12
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr

08012488 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
        assertValid();
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7fd ff59 	bl	8010348 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8012496:	4b06      	ldr	r3, [pc, #24]	; (80124b0 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	4619      	mov	r1, r3
 80124a0:	4610      	mov	r0, r2
 80124a2:	f003 f809 	bl	80154b8 <_ZNK8touchgfx5Texts7getTextEt>
 80124a6:	4603      	mov	r3, r0
    }
 80124a8:	4618      	mov	r0, r3
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	2000bf88 	.word	0x2000bf88

080124b4 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7ff ff2a 	bl	8012318 <_ZN8touchgfx6WidgetC1Ev>
 80124c4:	4a13      	ldr	r2, [pc, #76]	; (8012514 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	601a      	str	r2, [r3, #0]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	3326      	adds	r3, #38	; 0x26
 80124ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7ff ffc8 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	3328      	adds	r3, #40	; 0x28
 80124dc:	2100      	movs	r1, #0
 80124de:	4618      	mov	r0, r3
 80124e0:	f7ff fcb3 	bl	8011e4a <_ZN8touchgfx9colortypeC1Em>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	22ff      	movs	r2, #255	; 0xff
 80124ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2200      	movs	r2, #0
 80124fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2200      	movs	r2, #0
 8012506:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}
 8012514:	0802c014 	.word	0x0802c014

08012518 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af02      	add	r7, sp, #8
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8012522:	2300      	movs	r3, #0
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	2300      	movs	r3, #0
 8012528:	2200      	movs	r2, #0
 801252a:	2100      	movs	r1, #0
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7ff fcb2 	bl	8011e96 <_ZN8touchgfx4RectC1Essss>
    }
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	3708      	adds	r7, #8
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 801253a:	b480      	push	{r7}
 801253c:	b083      	sub	sp, #12
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	683a      	ldr	r2, [r7, #0]
 8012548:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801254a:	bf00      	nop
 801254c:	370c      	adds	r7, #12
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr

08012556 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012558:	b085      	sub	sp, #20
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	460b      	mov	r3, r1
 8012560:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8012562:	687e      	ldr	r6, [r7, #4]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	3330      	adds	r3, #48	; 0x30
 801256a:	681c      	ldr	r4, [r3, #0]
 801256c:	887d      	ldrh	r5, [r7, #2]
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f000 f845 	bl	80125fe <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8012574:	4603      	mov	r3, r0
 8012576:	81bb      	strh	r3, [r7, #12]
 8012578:	f107 030c 	add.w	r3, r7, #12
 801257c:	4618      	mov	r0, r3
 801257e:	f7fd feaf 	bl	80102e0 <_ZNK8touchgfx9TypedText7getFontEv>
 8012582:	4602      	mov	r2, r0
 8012584:	6813      	ldr	r3, [r2, #0]
 8012586:	332c      	adds	r3, #44	; 0x2c
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4610      	mov	r0, r2
 801258c:	4798      	blx	r3
 801258e:	4603      	mov	r3, r0
 8012590:	1aeb      	subs	r3, r5, r3
 8012592:	b29b      	uxth	r3, r3
 8012594:	b21b      	sxth	r3, r3
 8012596:	4619      	mov	r1, r3
 8012598:	4630      	mov	r0, r6
 801259a:	47a0      	blx	r4
    }
 801259c:	bf00      	nop
 801259e:	3714      	adds	r7, #20
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125a4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	460b      	mov	r3, r1
 80125ae:	807b      	strh	r3, [r7, #2]
 80125b0:	4613      	mov	r3, r2
 80125b2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	332c      	adds	r3, #44	; 0x2c
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80125c2:	4610      	mov	r0, r2
 80125c4:	4798      	blx	r3
        setBaselineY(baselineY);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	3360      	adds	r3, #96	; 0x60
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80125d2:	4611      	mov	r1, r2
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	4798      	blx	r3
    }
 80125d8:	bf00      	nop
 80125da:	3708      	adds	r7, #8
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 80125e0:	b480      	push	{r7}
 80125e2:	b083      	sub	sp, #12
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	460b      	mov	r3, r1
 80125ea:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	887a      	ldrh	r2, [r7, #2]
 80125f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 80125f2:	bf00      	nop
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 80125fe:	b480      	push	{r7}
 8012600:	b083      	sub	sp, #12
 8012602:	af00      	add	r7, sp, #0
 8012604:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 801260a:	4618      	mov	r0, r3
 801260c:	370c      	adds	r7, #12
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr
	...

08012618 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	4a05      	ldr	r2, [pc, #20]	; (8012638 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	601a      	str	r2, [r3, #0]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	4618      	mov	r0, r3
 801262a:	f7ff fe87 	bl	801233c <_ZN8touchgfx6WidgetD1Ev>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	3708      	adds	r7, #8
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}
 8012638:	0802c014 	.word	0x0802c014

0801263c <_ZN8touchgfx8TextAreaD0Ev>:
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff ffe7 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 801264a:	2134      	movs	r1, #52	; 0x34
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f015 fe88 	bl	8028362 <_ZdlPvj>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	4618      	mov	r0, r3
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4618      	mov	r0, r3
 8012668:	f7ff ff24 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 801266c:	4a03      	ldr	r2, [pc, #12]	; (801267c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	601a      	str	r2, [r3, #0]
    {
    }
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	0802a360 	.word	0x0802a360

08012680 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	4a05      	ldr	r2, [pc, #20]	; (80126a0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff ffc1 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}
 80126a0:	0802a360 	.word	0x0802a360

080126a4 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff ffe7 	bl	8012680 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80126b2:	2134      	movs	r1, #52	; 0x34
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f015 fe54 	bl	8028362 <_ZdlPvj>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7ff ffc4 	bl	801265c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 80126d4:	4a05      	ldr	r2, [pc, #20]	; (80126ec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	601a      	str	r2, [r3, #0]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2200      	movs	r2, #0
 80126de:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	0802c17c 	.word	0x0802c17c

080126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80126f0:	b480      	push	{r7}
 80126f2:	b083      	sub	sp, #12
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	683a      	ldr	r2, [r7, #0]
 80126fe:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012700:	bf00      	nop
 8012702:	370c      	adds	r7, #12
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr

0801270c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff fdfd 	bl	8012318 <_ZN8touchgfx6WidgetC1Ev>
 801271e:	4a0b      	ldr	r2, [pc, #44]	; (801274c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	601a      	str	r2, [r3, #0]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	3326      	adds	r3, #38	; 0x26
 8012728:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801272c:	4618      	mov	r0, r3
 801272e:	f7ff fbde 	bl	8011eee <_ZN8touchgfx6BitmapC1Et>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	22ff      	movs	r2, #255	; 0xff
 8012736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 801273a:	6839      	ldr	r1, [r7, #0]
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f008 fd5f 	bl	801b200 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	4618      	mov	r0, r3
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	0802c260 	.word	0x0802c260

08012750 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	683a      	ldr	r2, [r7, #0]
 801275e:	601a      	str	r2, [r3, #0]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	4618      	mov	r0, r3
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr

0801276e <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 801276e:	b480      	push	{r7}
 8012770:	b083      	sub	sp, #12
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
        {
            return v;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
        }
 801277a:	4618      	mov	r0, r3
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr

08012786 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8012786:	b590      	push	{r4, r7, lr}
 8012788:	b083      	sub	sp, #12
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
 801278e:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	3340      	adds	r3, #64	; 0x40
 8012794:	4618      	mov	r0, r3
 8012796:	f7ff ffea 	bl	801276e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801279a:	4604      	mov	r4, r0
 801279c:	463b      	mov	r3, r7
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff ffe5 	bl	801276e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80127a4:	4603      	mov	r3, r0
 80127a6:	429c      	cmp	r4, r3
 80127a8:	bf0c      	ite	eq
 80127aa:	2301      	moveq	r3, #1
 80127ac:	2300      	movne	r3, #0
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d106      	bne.n	80127c2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	683a      	ldr	r2, [r7, #0]
 80127b8:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f007 fe6c 	bl	801a498 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80127c0:	e000      	b.n	80127c4 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 80127c2:	bf00      	nop
    }
 80127c4:	370c      	adds	r7, #12
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd90      	pop	{r4, r7, pc}
	...

080127cc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	4a05      	ldr	r2, [pc, #20]	; (80127ec <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	4618      	mov	r0, r3
 80127de:	f007 fc6f 	bl	801a0c0 <_ZN8touchgfx15AbstractPainterD1Ev>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	4618      	mov	r0, r3
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	0802baf8 	.word	0x0802baf8

080127f0 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7ff ffe7 	bl	80127cc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80127fe:	2114      	movs	r1, #20
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f015 fdae 	bl	8028362 <_ZdlPvj>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	4a05      	ldr	r2, [pc, #20]	; (8012830 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	f7ff fd8b 	bl	801233c <_ZN8touchgfx6WidgetD1Ev>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	3708      	adds	r7, #8
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	0802c260 	.word	0x0802c260

08012834 <_ZN8touchgfx5ImageD0Ev>:
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f7ff ffe7 	bl	8012810 <_ZN8touchgfx5ImageD1Ev>
 8012842:	212c      	movs	r1, #44	; 0x2c
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f015 fd8c 	bl	8028362 <_ZdlPvj>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	4618      	mov	r0, r3
 8012860:	f7ff fcba 	bl	80121d8 <_ZN8touchgfx9ContainerC1Ev>
 8012864:	4a0b      	ldr	r2, [pc, #44]	; (8012894 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	601a      	str	r2, [r3, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2200      	movs	r2, #0
 801286e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	22ff      	movs	r2, #255	; 0xff
 8012876:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2200      	movs	r2, #0
 801287e:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2101      	movs	r1, #1
 8012884:	4618      	mov	r0, r3
 8012886:	f7ff fc30 	bl	80120ea <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4618      	mov	r0, r3
 801288e:	3708      	adds	r7, #8
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	0802a2cc 	.word	0x0802a2cc

08012898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	4a05      	ldr	r2, [pc, #20]	; (80128b8 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	601a      	str	r2, [r3, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7ff fcab 	bl	8012204 <_ZN8touchgfx9ContainerD1Ev>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	0802a2cc 	.word	0x0802a2cc

080128bc <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7ff ffe7 	bl	8012898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80128ca:	2134      	movs	r1, #52	; 0x34
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f015 fd48 	bl	8028362 <_ZdlPvj>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	460b      	mov	r3, r1
 80128e6:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	78fa      	ldrb	r2, [r7, #3]
 80128ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	3384      	adds	r3, #132	; 0x84
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	4798      	blx	r3
    }
 80128fc:	bf00      	nop
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8012912:	4618      	mov	r0, r3
 8012914:	370c      	adds	r7, #12
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr

0801291e <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 801291e:	b580      	push	{r7, lr}
 8012920:	b082      	sub	sp, #8
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
 8012926:	460b      	mov	r3, r1
 8012928:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	78fa      	ldrb	r2, [r7, #3]
 801292e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	3388      	adds	r3, #136	; 0x88
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	4798      	blx	r3
    }
 801293e:	bf00      	nop
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 8012946:	b480      	push	{r7}
 8012948:	b083      	sub	sp, #12
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8012954:	4618      	mov	r0, r3
 8012956:	370c      	adds	r7, #12
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	683a      	ldr	r2, [r7, #0]
 801296e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012970:	bf00      	nop
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	bf00      	nop
 8012986:	370c      	adds	r7, #12
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	bf00      	nop
 801299a:	370c      	adds	r7, #12
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr

080129a4 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ff ff50 	bl	8012854 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 80129b4:	4a03      	ldr	r2, [pc, #12]	; (80129c4 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	601a      	str	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4618      	mov	r0, r3
 80129be:	3708      	adds	r7, #8
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	0802a220 	.word	0x0802a220

080129c8 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	4a05      	ldr	r2, [pc, #20]	; (80129e8 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	601a      	str	r2, [r3, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7ff ff5d 	bl	8012898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	4618      	mov	r0, r3
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	0802a220 	.word	0x0802a220

080129ec <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7ff ffe7 	bl	80129c8 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 80129fa:	2134      	movs	r1, #52	; 0x34
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f015 fcb0 	bl	8028362 <_ZdlPvj>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7ff ff73 	bl	8012904 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8012a22:	6838      	ldr	r0, [r7, #0]
 8012a24:	f7ff fa57 	bl	8011ed6 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	bf0c      	ite	eq
 8012a2e:	2301      	moveq	r3, #1
 8012a30:	2300      	movne	r3, #0
 8012a32:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8012a34:	7bbb      	ldrb	r3, [r7, #14]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d005      	beq.n	8012a46 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8012a3a:	7bfb      	ldrb	r3, [r7, #15]
 8012a3c:	f083 0301 	eor.w	r3, r3, #1
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d108      	bne.n	8012a58 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8012a46:	7bbb      	ldrb	r3, [r7, #14]
 8012a48:	f083 0301 	eor.w	r3, r3, #1
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d00f      	beq.n	8012a72 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8012a52:	7bfb      	ldrb	r3, [r7, #15]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00c      	beq.n	8012a72 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	7bba      	ldrb	r2, [r7, #14]
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7ff ff3c 	bl	80128dc <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	3314      	adds	r3, #20
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4610      	mov	r0, r2
 8012a70:	4798      	blx	r3
        }
        if (newPressedValue && action)
 8012a72:	7bbb      	ldrb	r3, [r7, #14]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d019      	beq.n	8012aac <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d015      	beq.n	8012aac <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	330c      	adds	r3, #12
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4610      	mov	r0, r2
 8012a90:	4798      	blx	r3
 8012a92:	4603      	mov	r3, r0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d009      	beq.n	8012aac <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	3308      	adds	r3, #8
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	6879      	ldr	r1, [r7, #4]
 8012aa8:	4610      	mov	r0, r2
 8012aaa:	4798      	blx	r3
            }
        }
    }
 8012aac:	bf00      	nop
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7ff fc2a 	bl	8012318 <_ZN8touchgfx6WidgetC1Ev>
 8012ac4:	4a0d      	ldr	r2, [pc, #52]	; (8012afc <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	601a      	str	r2, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	22ff      	movs	r2, #255	; 0xff
 8012ace:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	3328      	adds	r3, #40	; 0x28
 8012ad6:	2100      	movs	r1, #0
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7ff f9b6 	bl	8011e4a <_ZN8touchgfx9colortypeC1Em>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	332c      	adds	r3, #44	; 0x2c
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7ff f9b0 	bl	8011e4a <_ZN8touchgfx9colortypeC1Em>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2200      	movs	r2, #0
 8012aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4618      	mov	r0, r3
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	0802c1f8 	.word	0x0802c1f8

08012b00 <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	4a05      	ldr	r2, [pc, #20]	; (8012b20 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	601a      	str	r2, [r3, #0]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7ff fc13 	bl	801233c <_ZN8touchgfx6WidgetD1Ev>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3708      	adds	r7, #8
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	0802c1f8 	.word	0x0802c1f8

08012b24 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7ff ffe7 	bl	8012b00 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8012b32:	2134      	movs	r1, #52	; 0x34
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f015 fc14 	bl	8028362 <_ZdlPvj>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	683a      	ldr	r2, [r7, #0]
 8012b52:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012b54:	bf00      	nop
 8012b56:	370c      	adds	r7, #12
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 8012b60:	b480      	push	{r7}
 8012b62:	b083      	sub	sp, #12
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	683a      	ldr	r2, [r7, #0]
 8012b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8012b70:	bf00      	nop
 8012b72:	370c      	adds	r7, #12
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr

08012b7c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8012b7c:	b480      	push	{r7}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	460b      	mov	r3, r1
 8012b86:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	78fa      	ldrb	r2, [r7, #3]
 8012b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8012b90:	bf00      	nop
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	78fa      	ldrb	r2, [r7, #3]
 8012bac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8012bb0:	bf00      	nop
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	4a05      	ldr	r2, [pc, #20]	; (8012bdc <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	601a      	str	r2, [r3, #0]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ff fb3b 	bl	8012248 <_ZN8touchgfx6ScreenD1Ev>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3708      	adds	r7, #8
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	0802a1ec 	.word	0x0802a1ec

08012be0 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7ff ffe7 	bl	8012bbc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8012bee:	2140      	movs	r1, #64	; 0x40
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f015 fbb6 	bl	8028362 <_ZdlPvj>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	4a8a      	ldr	r2, [pc, #552]	; (8012e34 <_ZN12MainViewBaseD1Ev+0x234>)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	601a      	str	r2, [r3, #0]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8012c14:	4618      	mov	r0, r3
 8012c16:	f001 ff97 	bl	8014b48 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8012c20:	4618      	mov	r0, r3
 8012c22:	f001 fde5 	bl	80147f0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f001 ffad 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7ff fced 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8012c44:	4618      	mov	r0, r3
 8012c46:	f001 ffa1 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7ff fce1 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f001 ff95 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f001 ff8f 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8012c74:	4618      	mov	r0, r3
 8012c76:	f001 ff89 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7ff fcc9 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f001 ff7d 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f005 fd99 	bl	80187d0 <_ZN8touchgfx13ImageProgressD1Ev>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f001 ff71 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f001 ffaf 	bl	8014c14 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f001 ff87 	bl	8014bd0 <_ZN8touchgfx4LineD1Ev>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f001 ffa3 	bl	8014c14 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f001 ff7b 	bl	8014bd0 <_ZN8touchgfx4LineD1Ev>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f005 fc75 	bl	80185d0 <_ZN8touchgfx11BoxProgressD1Ev>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7ff fc93 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f001 ff47 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8012d04:	4618      	mov	r0, r3
 8012d06:	f001 ff41 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7ff fc81 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7ff fc7b 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f001 ff2f 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012d34:	4618      	mov	r0, r3
 8012d36:	f001 ff29 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7ff fc69 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7ff fc63 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f001 ff5b 	bl	8014c14 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8012d64:	4618      	mov	r0, r3
 8012d66:	f001 ff33 	bl	8014bd0 <_ZN8touchgfx4LineD1Ev>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012d70:	4618      	mov	r0, r3
 8012d72:	f001 ff0b 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f001 ff05 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f001 feff 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012d94:	4618      	mov	r0, r3
 8012d96:	f001 fef9 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012da0:	4618      	mov	r0, r3
 8012da2:	f001 fef3 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012dac:	4618      	mov	r0, r3
 8012dae:	f001 feed 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012db8:	4618      	mov	r0, r3
 8012dba:	f001 fee7 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f001 fee1 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7ff fd1d 	bl	8012810 <_ZN8touchgfx5ImageD1Ev>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f001 fed5 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012de8:	4618      	mov	r0, r3
 8012dea:	f001 fecf 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7ff fc0f 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	33d8      	adds	r3, #216	; 0xd8
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7ff fc0a 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	33a4      	adds	r3, #164	; 0xa4
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7ff fc05 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	3370      	adds	r3, #112	; 0x70
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff fc00 	bl	8012618 <_ZN8touchgfx8TextAreaD1Ev>
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	3340      	adds	r3, #64	; 0x40
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7ff faf3 	bl	8012408 <_ZN8touchgfx3BoxD1Ev>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7ff fec9 	bl	8012bbc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	0802a10c 	.word	0x0802a10c

08012e38 <_ZN12MainViewBaseD0Ev>:
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f7ff fedd 	bl	8012c00 <_ZN12MainViewBaseD1Ev>
 8012e46:	f642 0144 	movw	r1, #10308	; 0x2844
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f015 fa89 	bl	8028362 <_ZdlPvj>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	4618      	mov	r0, r3
 8012e54:	3708      	adds	r7, #8
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}

08012e5a <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8012e5a:	b580      	push	{r7, lr}
 8012e5c:	b082      	sub	sp, #8
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8012e62:	f009 fa7b 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8012e66:	4603      	mov	r3, r0
    }
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3708      	adds	r7, #8
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}

08012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8012e70:	b590      	push	{r4, r7, lr}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	4603      	mov	r3, r0
 8012e78:	71fb      	strb	r3, [r7, #7]
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	71bb      	strb	r3, [r7, #6]
 8012e7e:	4613      	mov	r3, r2
 8012e80:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8012e82:	f7fd fe49 	bl	8010b18 <_ZN8touchgfx3HAL11getInstanceEv>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d105      	bne.n	8012e98 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8012e8c:	4b0a      	ldr	r3, [pc, #40]	; (8012eb8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8012e8e:	4a0b      	ldr	r2, [pc, #44]	; (8012ebc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8012e90:	2138      	movs	r1, #56	; 0x38
 8012e92:	480b      	ldr	r0, [pc, #44]	; (8012ec0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8012e94:	f015 fa90 	bl	80283b8 <__assert_func>
 8012e98:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8012e9a:	f7fd fe49 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8012e9e:	6803      	ldr	r3, [r0, #0]
 8012ea0:	332c      	adds	r3, #44	; 0x2c
 8012ea2:	681c      	ldr	r4, [r3, #0]
 8012ea4:	797b      	ldrb	r3, [r7, #5]
 8012ea6:	79ba      	ldrb	r2, [r7, #6]
 8012ea8:	79f9      	ldrb	r1, [r7, #7]
 8012eaa:	47a0      	blx	r4
 8012eac:	4603      	mov	r3, r0
    }
 8012eae:	4618      	mov	r0, r3
 8012eb0:	370c      	adds	r7, #12
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd90      	pop	{r4, r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	0802984c 	.word	0x0802984c
 8012ebc:	0802a43c 	.word	0x0802a43c
 8012ec0:	08029890 	.word	0x08029890

08012ec4 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 8012ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec8:	b0c2      	sub	sp, #264	; 0x108
 8012eca:	af02      	add	r7, sp, #8
 8012ecc:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f001 fcb5 	bl	8014840 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8012ed6:	4ada      	ldr	r2, [pc, #872]	; (8013240 <_ZN12MainViewBaseC1Ev+0x37c>)
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	601a      	str	r2, [r3, #0]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	3340      	adds	r3, #64	; 0x40
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7ff fa71 	bl	80123c8 <_ZN8touchgfx3BoxC1Ev>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	3370      	adds	r3, #112	; 0x70
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff fae2 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	33a4      	adds	r3, #164	; 0xa4
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7ff fadd 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	33d8      	adds	r3, #216	; 0xd8
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7ff fad8 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff fad2 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7ff fbd4 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7ff fbce 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8012f2e:	f107 030c 	add.w	r3, r7, #12
 8012f32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fe ffd9 	bl	8011eee <_ZN8touchgfx6BitmapC1Et>
 8012f3c:	f107 030c 	add.w	r3, r7, #12
 8012f40:	4619      	mov	r1, r3
 8012f42:	4620      	mov	r0, r4
 8012f44:	f7ff fbe2 	bl	801270c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7ff fbb8 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff fbb2 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ff fbac 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ff fba6 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7ff fba0 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7ff fb9a 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7ff fb94 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7ff fb8e 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f007 fa52 	bl	801a458 <_ZN8touchgfx4LineC1Ev>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8012fba:	f107 0310 	add.w	r3, r7, #16
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fe ff42 	bl	8011e4a <_ZN8touchgfx9colortypeC1Em>
 8012fc6:	22ff      	movs	r2, #255	; 0xff
 8012fc8:	6939      	ldr	r1, [r7, #16]
 8012fca:	4620      	mov	r0, r4
 8012fcc:	f007 f836 	bl	801a03c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7ff fa6c 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7ff fa66 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7ff fb68 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7ff fb62 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013006:	4618      	mov	r0, r3
 8013008:	f7ff fa54 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013012:	4618      	mov	r0, r3
 8013014:	f7ff fa4e 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801301e:	4618      	mov	r0, r3
 8013020:	f7ff fb50 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 801302a:	4618      	mov	r0, r3
 801302c:	f7ff fb4a 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013036:	4618      	mov	r0, r3
 8013038:	f7ff fa3c 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013042:	4618      	mov	r0, r3
 8013044:	f005 fad8 	bl	80185f8 <_ZN8touchgfx11BoxProgressC1Ev>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 801304e:	4618      	mov	r0, r3
 8013050:	f007 fa02 	bl	801a458 <_ZN8touchgfx4LineC1Ev>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 801305a:	f107 0314 	add.w	r3, r7, #20
 801305e:	2100      	movs	r1, #0
 8013060:	4618      	mov	r0, r3
 8013062:	f7fe fef2 	bl	8011e4a <_ZN8touchgfx9colortypeC1Em>
 8013066:	22ff      	movs	r2, #255	; 0xff
 8013068:	6979      	ldr	r1, [r7, #20]
 801306a:	4620      	mov	r0, r4
 801306c:	f006 ffe6 	bl	801a03c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013076:	4618      	mov	r0, r3
 8013078:	f007 f9ee 	bl	801a458 <_ZN8touchgfx4LineC1Ev>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8013082:	f107 0318 	add.w	r3, r7, #24
 8013086:	2100      	movs	r1, #0
 8013088:	4618      	mov	r0, r3
 801308a:	f7fe fede 	bl	8011e4a <_ZN8touchgfx9colortypeC1Em>
 801308e:	22ff      	movs	r2, #255	; 0xff
 8013090:	69b9      	ldr	r1, [r7, #24]
 8013092:	4620      	mov	r0, r4
 8013094:	f006 ffd2 	bl	801a03c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 801309e:	4618      	mov	r0, r3
 80130a0:	f7ff fb10 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80130aa:	4618      	mov	r0, r3
 80130ac:	f005 fbba 	bl	8018824 <_ZN8touchgfx13ImageProgressC1Ev>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff fb04 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7ff f9f6 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7ff faf8 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80130da:	4618      	mov	r0, r3
 80130dc:	f7ff faf2 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7ff faec 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff f9de 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80130fe:	4618      	mov	r0, r3
 8013100:	f7ff fae0 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801310a:	4618      	mov	r0, r3
 801310c:	f7ff f9d2 	bl	80124b4 <_ZN8touchgfx8TextAreaC1Ev>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff fad4 	bl	80126c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8013122:	4618      	mov	r0, r3
 8013124:	f001 fba2 	bl	801486c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 801312e:	4b45      	ldr	r3, [pc, #276]	; (8013244 <_ZN12MainViewBaseC1Ev+0x380>)
 8013130:	61fb      	str	r3, [r7, #28]
 8013132:	2300      	movs	r3, #0
 8013134:	623b      	str	r3, [r7, #32]
 8013136:	f107 031c 	add.w	r3, r7, #28
 801313a:	cb0c      	ldmia	r3, {r2, r3}
 801313c:	6879      	ldr	r1, [r7, #4]
 801313e:	f001 fbdf 	bl	8014900 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8013148:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801314c:	4618      	mov	r0, r3
 801314e:	f008 f8c5 	bl	801b2dc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013158:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801315c:	9300      	str	r3, [sp, #0]
 801315e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8013162:	2200      	movs	r2, #0
 8013164:	2100      	movs	r1, #0
 8013166:	f7fd fc8f 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013170:	2200      	movs	r2, #0
 8013172:	2100      	movs	r1, #0
 8013174:	2000      	movs	r0, #0
 8013176:	f7ff fe7b 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801317a:	4603      	mov	r3, r0
 801317c:	4619      	mov	r1, r3
 801317e:	4620      	mov	r0, r4
 8013180:	f7ff f964 	bl	801244c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	3370      	adds	r3, #112	; 0x70
 8013188:	22da      	movs	r2, #218	; 0xda
 801318a:	21e0      	movs	r1, #224	; 0xe0
 801318c:	4618      	mov	r0, r3
 801318e:	f7fe ff2b 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013198:	2200      	movs	r2, #0
 801319a:	21dc      	movs	r1, #220	; 0xdc
 801319c:	20ff      	movs	r0, #255	; 0xff
 801319e:	f7ff fe67 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80131a2:	4603      	mov	r3, r0
 80131a4:	4619      	mov	r1, r3
 80131a6:	4620      	mov	r0, r4
 80131a8:	f7ff f9c7 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	3370      	adds	r3, #112	; 0x70
 80131b0:	2100      	movs	r1, #0
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ff fa14 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80131be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80131c2:	211a      	movs	r1, #26
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7ff f94f 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80131ca:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80131cc:	4620      	mov	r0, r4
 80131ce:	f007 fceb 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	33a4      	adds	r3, #164	; 0xa4
 80131d6:	227e      	movs	r2, #126	; 0x7e
 80131d8:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80131dc:	4618      	mov	r0, r3
 80131de:	f7fe ff03 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80131e8:	2200      	movs	r2, #0
 80131ea:	21dc      	movs	r1, #220	; 0xdc
 80131ec:	20ff      	movs	r0, #255	; 0xff
 80131ee:	f7ff fe3f 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80131f2:	4603      	mov	r3, r0
 80131f4:	4619      	mov	r1, r3
 80131f6:	4620      	mov	r0, r4
 80131f8:	f7ff f99f 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	33a4      	adds	r3, #164	; 0xa4
 8013200:	2100      	movs	r1, #0
 8013202:	4618      	mov	r0, r3
 8013204:	f7ff f9ec 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801320e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013212:	2119      	movs	r1, #25
 8013214:	4618      	mov	r0, r3
 8013216:	f7ff f927 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801321a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 801321c:	4620      	mov	r0, r4
 801321e:	f007 fcc3 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	33d8      	adds	r3, #216	; 0xd8
 8013226:	2288      	movs	r2, #136	; 0x88
 8013228:	21d8      	movs	r1, #216	; 0xd8
 801322a:	4618      	mov	r0, r3
 801322c:	f7fe fedc 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013236:	2200      	movs	r2, #0
 8013238:	21dc      	movs	r1, #220	; 0xdc
 801323a:	20ff      	movs	r0, #255	; 0xff
 801323c:	e004      	b.n	8013248 <_ZN12MainViewBaseC1Ev+0x384>
 801323e:	bf00      	nop
 8013240:	0802a10c 	.word	0x0802a10c
 8013244:	080147c5 	.word	0x080147c5
 8013248:	f7ff fe12 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801324c:	4603      	mov	r3, r0
 801324e:	4619      	mov	r1, r3
 8013250:	4620      	mov	r0, r4
 8013252:	f7ff f972 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	33d8      	adds	r3, #216	; 0xd8
 801325a:	2100      	movs	r1, #0
 801325c:	4618      	mov	r0, r3
 801325e:	f7ff f9bf 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801326c:	2113      	movs	r1, #19
 801326e:	4618      	mov	r0, r3
 8013270:	f7ff f8fa 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013274:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013276:	4620      	mov	r0, r4
 8013278:	f007 fc96 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013282:	227e      	movs	r2, #126	; 0x7e
 8013284:	2174      	movs	r1, #116	; 0x74
 8013286:	4618      	mov	r0, r3
 8013288:	f7fe feae 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8013292:	2200      	movs	r2, #0
 8013294:	21dc      	movs	r1, #220	; 0xdc
 8013296:	20ff      	movs	r0, #255	; 0xff
 8013298:	f7ff fdea 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801329c:	4603      	mov	r3, r0
 801329e:	4619      	mov	r1, r3
 80132a0:	4620      	mov	r0, r4
 80132a2:	f7ff f94a 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80132ac:	2100      	movs	r1, #0
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7ff f996 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80132ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80132be:	2112      	movs	r1, #18
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7ff f8d1 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80132c6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80132c8:	4620      	mov	r0, r4
 80132ca:	f007 fc6d 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80132d4:	233e      	movs	r3, #62	; 0x3e
 80132d6:	9300      	str	r3, [sp, #0]
 80132d8:	2372      	movs	r3, #114	; 0x72
 80132da:	224d      	movs	r2, #77	; 0x4d
 80132dc:	21bb      	movs	r1, #187	; 0xbb
 80132de:	f7fd fbd3 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80132e8:	22ff      	movs	r2, #255	; 0xff
 80132ea:	21ff      	movs	r1, #255	; 0xff
 80132ec:	20ff      	movs	r0, #255	; 0xff
 80132ee:	f7ff fdbf 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80132f2:	4603      	mov	r3, r0
 80132f4:	4619      	mov	r1, r3
 80132f6:	4620      	mov	r0, r4
 80132f8:	f7ff f91f 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013302:	2100      	movs	r1, #0
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff f96b 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 8013310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013314:	2103      	movs	r1, #3
 8013316:	4618      	mov	r0, r3
 8013318:	f7ff f8a6 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801331c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff f8b1 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013326:	4603      	mov	r3, r0
 8013328:	4ae1      	ldr	r2, [pc, #900]	; (80136b0 <_ZN12MainViewBaseC1Ev+0x7ec>)
 801332a:	2105      	movs	r1, #5
 801332c:	4620      	mov	r0, r4
 801332e:	f00b f8ab 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 801333e:	4619      	mov	r1, r3
 8013340:	4610      	mov	r0, r2
 8013342:	f7ff f9d5 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801334c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013350:	2102      	movs	r1, #2
 8013352:	4618      	mov	r0, r3
 8013354:	f7ff f888 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013358:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 801335a:	4620      	mov	r0, r4
 801335c:	f007 fc24 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8013366:	2329      	movs	r3, #41	; 0x29
 8013368:	9300      	str	r3, [sp, #0]
 801336a:	2347      	movs	r3, #71	; 0x47
 801336c:	2255      	movs	r2, #85	; 0x55
 801336e:	2166      	movs	r1, #102	; 0x66
 8013370:	f7fd fb8a 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 801337a:	22ff      	movs	r2, #255	; 0xff
 801337c:	21ff      	movs	r1, #255	; 0xff
 801337e:	20ff      	movs	r0, #255	; 0xff
 8013380:	f7ff fd76 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013384:	4603      	mov	r3, r0
 8013386:	4619      	mov	r1, r3
 8013388:	4620      	mov	r0, r4
 801338a:	f7ff f8d6 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013394:	2100      	movs	r1, #0
 8013396:	4618      	mov	r0, r3
 8013398:	f7ff f922 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f603 347a 	addw	r4, r3, #2938	; 0xb7a
 80133a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80133a6:	2101      	movs	r1, #1
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff f85d 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80133ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7ff f868 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 80133b8:	4603      	mov	r3, r0
 80133ba:	4abd      	ldr	r2, [pc, #756]	; (80136b0 <_ZN12MainViewBaseC1Ev+0x7ec>)
 80133bc:	2105      	movs	r1, #5
 80133be:	4620      	mov	r0, r4
 80133c0:	f00b f862 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f603 337a 	addw	r3, r3, #2938	; 0xb7a
 80133d0:	4619      	mov	r1, r3
 80133d2:	4610      	mov	r0, r2
 80133d4:	f7ff f98c 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80133de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80133e2:	2100      	movs	r1, #0
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7ff f83f 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80133ea:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80133ee:	4620      	mov	r0, r4
 80133f0:	f007 fbda 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80133fa:	223f      	movs	r2, #63	; 0x3f
 80133fc:	21b3      	movs	r1, #179	; 0xb3
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fe fdf2 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801340a:	2100      	movs	r1, #0
 801340c:	4618      	mov	r0, r3
 801340e:	f7fe fe5c 	bl	80120ca <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8013418:	230e      	movs	r3, #14
 801341a:	9300      	str	r3, [sp, #0]
 801341c:	2312      	movs	r3, #18
 801341e:	223f      	movs	r2, #63	; 0x3f
 8013420:	2136      	movs	r1, #54	; 0x36
 8013422:	f7fd fb31 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 801342c:	22ff      	movs	r2, #255	; 0xff
 801342e:	21ff      	movs	r1, #255	; 0xff
 8013430:	20ff      	movs	r0, #255	; 0xff
 8013432:	f7ff fd1d 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013436:	4603      	mov	r3, r0
 8013438:	4619      	mov	r1, r3
 801343a:	4620      	mov	r0, r4
 801343c:	f7ff f87d 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013446:	2100      	movs	r1, #0
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff f8c9 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 8013454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013458:	2126      	movs	r1, #38	; 0x26
 801345a:	4618      	mov	r0, r3
 801345c:	f7ff f804 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013464:	4618      	mov	r0, r3
 8013466:	f7ff f80f 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 801346a:	4603      	mov	r3, r0
 801346c:	4a90      	ldr	r2, [pc, #576]	; (80136b0 <_ZN12MainViewBaseC1Ev+0x7ec>)
 801346e:	2102      	movs	r1, #2
 8013470:	4620      	mov	r0, r4
 8013472:	f00b f809 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8013482:	4619      	mov	r1, r3
 8013484:	4610      	mov	r0, r2
 8013486:	f7ff f933 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013490:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013494:	2104      	movs	r1, #4
 8013496:	4618      	mov	r0, r3
 8013498:	f7fe ffe6 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801349c:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80134a0:	4620      	mov	r0, r4
 80134a2:	f007 fb81 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80134ac:	230e      	movs	r3, #14
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	2312      	movs	r3, #18
 80134b2:	223f      	movs	r2, #63	; 0x3f
 80134b4:	2173      	movs	r1, #115	; 0x73
 80134b6:	f7fd fae7 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80134c0:	22ff      	movs	r2, #255	; 0xff
 80134c2:	21ff      	movs	r1, #255	; 0xff
 80134c4:	20ff      	movs	r0, #255	; 0xff
 80134c6:	f7ff fcd3 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134ca:	4603      	mov	r3, r0
 80134cc:	4619      	mov	r1, r3
 80134ce:	4620      	mov	r0, r4
 80134d0:	f7ff f833 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80134da:	2100      	movs	r1, #0
 80134dc:	4618      	mov	r0, r3
 80134de:	f7ff f87f 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 80134e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80134ec:	2127      	movs	r1, #39	; 0x27
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7fe ffba 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80134f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fe ffc5 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 80134fe:	4603      	mov	r3, r0
 8013500:	4a6b      	ldr	r2, [pc, #428]	; (80136b0 <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013502:	2102      	movs	r1, #2
 8013504:	4620      	mov	r0, r4
 8013506:	f00a ffbf 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8013516:	4619      	mov	r1, r3
 8013518:	4610      	mov	r0, r2
 801351a:	f7ff f8e9 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013528:	2105      	movs	r1, #5
 801352a:	4618      	mov	r0, r3
 801352c:	f7fe ff9c 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013530:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8013534:	4620      	mov	r0, r4
 8013536:	f007 fb37 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8013540:	230e      	movs	r3, #14
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	2312      	movs	r3, #18
 8013546:	223e      	movs	r2, #62	; 0x3e
 8013548:	21ad      	movs	r1, #173	; 0xad
 801354a:	f7fd fa9d 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013554:	22ff      	movs	r2, #255	; 0xff
 8013556:	21ff      	movs	r1, #255	; 0xff
 8013558:	20ff      	movs	r0, #255	; 0xff
 801355a:	f7ff fc89 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801355e:	4603      	mov	r3, r0
 8013560:	4619      	mov	r1, r3
 8013562:	4620      	mov	r0, r4
 8013564:	f7fe ffe9 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801356e:	2100      	movs	r1, #0
 8013570:	4618      	mov	r0, r3
 8013572:	f7ff f835 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 801357c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013580:	2128      	movs	r1, #40	; 0x28
 8013582:	4618      	mov	r0, r3
 8013584:	f7fe ff70 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801358c:	4618      	mov	r0, r3
 801358e:	f7fe ff7b 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013592:	4603      	mov	r3, r0
 8013594:	4a46      	ldr	r2, [pc, #280]	; (80136b0 <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013596:	2102      	movs	r1, #2
 8013598:	4620      	mov	r0, r4
 801359a:	f00a ff75 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 80135aa:	4619      	mov	r1, r3
 80135ac:	4610      	mov	r0, r2
 80135ae:	f7ff f89f 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 80135b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80135bc:	2106      	movs	r1, #6
 80135be:	4618      	mov	r0, r3
 80135c0:	f7fe ff52 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80135c4:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80135c8:	4620      	mov	r0, r4
 80135ca:	f007 faed 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f503 7021 	add.w	r0, r3, #644	; 0x284
 80135d4:	230e      	movs	r3, #14
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	2312      	movs	r3, #18
 80135da:	223e      	movs	r2, #62	; 0x3e
 80135dc:	21e7      	movs	r1, #231	; 0xe7
 80135de:	f7fd fa53 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f503 7421 	add.w	r4, r3, #644	; 0x284
 80135e8:	22ff      	movs	r2, #255	; 0xff
 80135ea:	21ff      	movs	r1, #255	; 0xff
 80135ec:	20ff      	movs	r0, #255	; 0xff
 80135ee:	f7ff fc3f 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80135f2:	4603      	mov	r3, r0
 80135f4:	4619      	mov	r1, r3
 80135f6:	4620      	mov	r0, r4
 80135f8:	f7fe ff9f 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013602:	2100      	movs	r1, #0
 8013604:	4618      	mov	r0, r3
 8013606:	f7fe ffeb 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 8013610:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013614:	2129      	movs	r1, #41	; 0x29
 8013616:	4618      	mov	r0, r3
 8013618:	f7fe ff26 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801361c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013620:	4618      	mov	r0, r3
 8013622:	f7fe ff31 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013626:	4603      	mov	r3, r0
 8013628:	4a21      	ldr	r2, [pc, #132]	; (80136b0 <_ZN12MainViewBaseC1Ev+0x7ec>)
 801362a:	2102      	movs	r1, #2
 801362c:	4620      	mov	r0, r4
 801362e:	f00a ff2b 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 801363e:	4619      	mov	r1, r3
 8013640:	4610      	mov	r0, r2
 8013642:	f7ff f855 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f503 7421 	add.w	r4, r3, #644	; 0x284
 801364c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013650:	2107      	movs	r1, #7
 8013652:	4618      	mov	r0, r3
 8013654:	f7fe ff08 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013658:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 801365c:	4620      	mov	r0, r4
 801365e:	f007 faa3 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8013668:	230e      	movs	r3, #14
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	2312      	movs	r3, #18
 801366e:	223f      	movs	r2, #63	; 0x3f
 8013670:	f44f 7192 	mov.w	r1, #292	; 0x124
 8013674:	f7fd fa08 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 801367e:	22ff      	movs	r2, #255	; 0xff
 8013680:	21ff      	movs	r1, #255	; 0xff
 8013682:	20ff      	movs	r0, #255	; 0xff
 8013684:	f7ff fbf4 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013688:	4603      	mov	r3, r0
 801368a:	4619      	mov	r1, r3
 801368c:	4620      	mov	r0, r4
 801368e:	f7fe ff54 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013698:	2100      	movs	r1, #0
 801369a:	4618      	mov	r0, r3
 801369c:	f7fe ffa0 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 80136a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80136aa:	212a      	movs	r1, #42	; 0x2a
 80136ac:	4618      	mov	r0, r3
 80136ae:	e001      	b.n	80136b4 <_ZN12MainViewBaseC1Ev+0x7f0>
 80136b0:	080298d0 	.word	0x080298d0
 80136b4:	f7fe fed8 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80136b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80136bc:	4618      	mov	r0, r3
 80136be:	f7fe fee3 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 80136c2:	4603      	mov	r3, r0
 80136c4:	4ae2      	ldr	r2, [pc, #904]	; (8013a50 <_ZN12MainViewBaseC1Ev+0xb8c>)
 80136c6:	2102      	movs	r1, #2
 80136c8:	4620      	mov	r0, r4
 80136ca:	f00a fedd 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80136da:	4619      	mov	r1, r3
 80136dc:	4610      	mov	r0, r2
 80136de:	f7ff f807 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80136e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80136ec:	2108      	movs	r1, #8
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fe feba 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80136f4:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 80136f8:	4620      	mov	r0, r4
 80136fa:	f007 fa55 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8013704:	230e      	movs	r3, #14
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	2312      	movs	r3, #18
 801370a:	223f      	movs	r2, #63	; 0x3f
 801370c:	f240 115d 	movw	r1, #349	; 0x15d
 8013710:	f7fd f9ba 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 801371a:	22ff      	movs	r2, #255	; 0xff
 801371c:	21ff      	movs	r1, #255	; 0xff
 801371e:	20ff      	movs	r0, #255	; 0xff
 8013720:	f7ff fba6 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013724:	4603      	mov	r3, r0
 8013726:	4619      	mov	r1, r3
 8013728:	4620      	mov	r0, r4
 801372a:	f7fe ff06 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013734:	2100      	movs	r1, #0
 8013736:	4618      	mov	r0, r3
 8013738:	f7fe ff52 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 8013742:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013746:	212b      	movs	r1, #43	; 0x2b
 8013748:	4618      	mov	r0, r3
 801374a:	f7fe fe8d 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801374e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013752:	4618      	mov	r0, r3
 8013754:	f7fe fe98 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013758:	4603      	mov	r3, r0
 801375a:	4abd      	ldr	r2, [pc, #756]	; (8013a50 <_ZN12MainViewBaseC1Ev+0xb8c>)
 801375c:	2102      	movs	r1, #2
 801375e:	4620      	mov	r0, r4
 8013760:	f00a fe92 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8013770:	4619      	mov	r1, r3
 8013772:	4610      	mov	r0, r2
 8013774:	f7fe ffbc 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 801377e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013782:	2109      	movs	r1, #9
 8013784:	4618      	mov	r0, r3
 8013786:	f7fe fe6f 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801378a:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 801378e:	4620      	mov	r0, r4
 8013790:	f007 fa0a 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 801379a:	230f      	movs	r3, #15
 801379c:	9300      	str	r3, [sp, #0]
 801379e:	2312      	movs	r3, #18
 80137a0:	223e      	movs	r2, #62	; 0x3e
 80137a2:	f240 119b 	movw	r1, #411	; 0x19b
 80137a6:	f7fd f96f 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80137b0:	22ff      	movs	r2, #255	; 0xff
 80137b2:	21ff      	movs	r1, #255	; 0xff
 80137b4:	20ff      	movs	r0, #255	; 0xff
 80137b6:	f7ff fb5b 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80137ba:	4603      	mov	r3, r0
 80137bc:	4619      	mov	r1, r3
 80137be:	4620      	mov	r0, r4
 80137c0:	f7fe febb 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80137ca:	2100      	movs	r1, #0
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fe ff07 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f603 349c 	addw	r4, r3, #2972	; 0xb9c
 80137d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80137dc:	212c      	movs	r1, #44	; 0x2c
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fe fe42 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80137e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7fe fe4d 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 80137ee:	4603      	mov	r3, r0
 80137f0:	4a97      	ldr	r2, [pc, #604]	; (8013a50 <_ZN12MainViewBaseC1Ev+0xb8c>)
 80137f2:	2102      	movs	r1, #2
 80137f4:	4620      	mov	r0, r4
 80137f6:	f00a fe47 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 8013806:	4619      	mov	r1, r3
 8013808:	4610      	mov	r0, r2
 801380a:	f7fe ff71 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8013814:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013818:	210a      	movs	r1, #10
 801381a:	4618      	mov	r0, r3
 801381c:	f7fe fe24 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013820:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8013824:	4620      	mov	r0, r4
 8013826:	f007 f9bf 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8013830:	230e      	movs	r3, #14
 8013832:	9300      	str	r3, [sp, #0]
 8013834:	2312      	movs	r3, #18
 8013836:	223e      	movs	r2, #62	; 0x3e
 8013838:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801383c:	f7fd f924 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8013846:	22ff      	movs	r2, #255	; 0xff
 8013848:	21ff      	movs	r1, #255	; 0xff
 801384a:	20ff      	movs	r0, #255	; 0xff
 801384c:	f7ff fb10 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013850:	4603      	mov	r3, r0
 8013852:	4619      	mov	r1, r3
 8013854:	4620      	mov	r0, r4
 8013856:	f7fe fe70 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8013860:	2100      	movs	r1, #0
 8013862:	4618      	mov	r0, r3
 8013864:	f7fe febc 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 801386e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013872:	212d      	movs	r1, #45	; 0x2d
 8013874:	4618      	mov	r0, r3
 8013876:	f7fe fdf7 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801387a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801387e:	4618      	mov	r0, r3
 8013880:	f7fe fe02 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013884:	4603      	mov	r3, r0
 8013886:	4a72      	ldr	r2, [pc, #456]	; (8013a50 <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013888:	2102      	movs	r1, #2
 801388a:	4620      	mov	r0, r4
 801388c:	f00a fdfc 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 801389c:	4619      	mov	r1, r3
 801389e:	4610      	mov	r0, r2
 80138a0:	f7fe ff26 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f503 7459 	add.w	r4, r3, #868	; 0x364
 80138aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138ae:	210b      	movs	r1, #11
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7fe fdd9 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80138b6:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 80138ba:	4620      	mov	r0, r4
 80138bc:	f007 f974 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 80138c6:	2305      	movs	r3, #5
 80138c8:	9300      	str	r3, [sp, #0]
 80138ca:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 80138ce:	223a      	movs	r2, #58	; 0x3a
 80138d0:	f06f 0101 	mvn.w	r1, #1
 80138d4:	f7fd f8d8 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 80138de:	22ff      	movs	r2, #255	; 0xff
 80138e0:	21ff      	movs	r1, #255	; 0xff
 80138e2:	20ff      	movs	r0, #255	; 0xff
 80138e4:	f7ff fac4 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80138e8:	4603      	mov	r3, r0
 80138ea:	22ff      	movs	r2, #255	; 0xff
 80138ec:	4619      	mov	r1, r3
 80138ee:	4620      	mov	r0, r4
 80138f0:	f006 fb89 	bl	801a006 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013900:	4619      	mov	r1, r3
 8013902:	4610      	mov	r0, r2
 8013904:	f006 fbe8 	bl	801a0d8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801390e:	2203      	movs	r2, #3
 8013910:	2100      	movs	r1, #0
 8013912:	4618      	mov	r0, r3
 8013914:	f001 f814 	bl	8014940 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801391e:	2203      	movs	r2, #3
 8013920:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8013924:	4618      	mov	r0, r3
 8013926:	f001 f831 	bl	801498c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013930:	2102      	movs	r1, #2
 8013932:	4618      	mov	r0, r3
 8013934:	f001 f850 	bl	80149d8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801393e:	2101      	movs	r1, #1
 8013940:	4618      	mov	r0, r3
 8013942:	f006 fee3 	bl	801a70c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801394c:	227e      	movs	r2, #126	; 0x7e
 801394e:	212b      	movs	r1, #43	; 0x2b
 8013950:	4618      	mov	r0, r3
 8013952:	f7fe fb49 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 801395c:	2200      	movs	r2, #0
 801395e:	21dc      	movs	r1, #220	; 0xdc
 8013960:	20ff      	movs	r0, #255	; 0xff
 8013962:	f7ff fa85 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013966:	4603      	mov	r3, r0
 8013968:	4619      	mov	r1, r3
 801396a:	4620      	mov	r0, r4
 801396c:	f7fe fde5 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013976:	2100      	movs	r1, #0
 8013978:	4618      	mov	r0, r3
 801397a:	f7fe fe31 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013984:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013988:	2110      	movs	r1, #16
 801398a:	4618      	mov	r0, r3
 801398c:	f7fe fd6c 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013990:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8013994:	4620      	mov	r0, r4
 8013996:	f007 f907 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80139a0:	22c1      	movs	r2, #193	; 0xc1
 80139a2:	212a      	movs	r1, #42	; 0x2a
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7fe fb1f 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 80139b0:	2200      	movs	r2, #0
 80139b2:	21dc      	movs	r1, #220	; 0xdc
 80139b4:	20ff      	movs	r0, #255	; 0xff
 80139b6:	f7ff fa5b 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80139ba:	4603      	mov	r3, r0
 80139bc:	4619      	mov	r1, r3
 80139be:	4620      	mov	r0, r4
 80139c0:	f7fe fdbb 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80139ca:	2100      	movs	r1, #0
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7fe fe07 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 80139d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80139dc:	2111      	movs	r1, #17
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fe fd42 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80139e4:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80139e8:	4620      	mov	r0, r4
 80139ea:	f007 f8dd 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 80139f4:	232a      	movs	r3, #42	; 0x2a
 80139f6:	9300      	str	r3, [sp, #0]
 80139f8:	233c      	movs	r3, #60	; 0x3c
 80139fa:	2255      	movs	r2, #85	; 0x55
 80139fc:	2119      	movs	r1, #25
 80139fe:	f7fd f843 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8013a08:	22ff      	movs	r2, #255	; 0xff
 8013a0a:	21ff      	movs	r1, #255	; 0xff
 8013a0c:	20ff      	movs	r0, #255	; 0xff
 8013a0e:	f7ff fa2f 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a12:	4603      	mov	r3, r0
 8013a14:	4619      	mov	r1, r3
 8013a16:	4620      	mov	r0, r4
 8013a18:	f7fe fd8f 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013a22:	2100      	movs	r1, #0
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7fe fddb 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f603 34a4 	addw	r4, r3, #2980	; 0xba4
 8013a30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013a34:	210d      	movs	r1, #13
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fe fd16 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013a3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fe fd21 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013a46:	4603      	mov	r3, r0
 8013a48:	4a01      	ldr	r2, [pc, #4]	; (8013a50 <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013a4a:	2105      	movs	r1, #5
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	e001      	b.n	8013a54 <_ZN12MainViewBaseC1Ev+0xb90>
 8013a50:	080298d0 	.word	0x080298d0
 8013a54:	f00a fd18 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8013a64:	4619      	mov	r1, r3
 8013a66:	4610      	mov	r0, r2
 8013a68:	f7fe fe42 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8013a72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013a76:	210c      	movs	r1, #12
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe fcf5 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013a7e:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8013a82:	4620      	mov	r0, r4
 8013a84:	f007 f890 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 8013a8e:	232a      	movs	r3, #42	; 0x2a
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	2343      	movs	r3, #67	; 0x43
 8013a94:	2299      	movs	r2, #153	; 0x99
 8013a96:	2119      	movs	r1, #25
 8013a98:	f7fc fff6 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013aa2:	22ff      	movs	r2, #255	; 0xff
 8013aa4:	21ff      	movs	r1, #255	; 0xff
 8013aa6:	20ff      	movs	r0, #255	; 0xff
 8013aa8:	f7ff f9e2 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013aac:	4603      	mov	r3, r0
 8013aae:	4619      	mov	r1, r3
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f7fe fd42 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013abc:	2100      	movs	r1, #0
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fe fd8e 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f603 34ae 	addw	r4, r3, #2990	; 0xbae
 8013aca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013ace:	210f      	movs	r1, #15
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7fe fcc9 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013ad6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7fe fcd4 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	4ae3      	ldr	r2, [pc, #908]	; (8013e70 <_ZN12MainViewBaseC1Ev+0xfac>)
 8013ae4:	2105      	movs	r1, #5
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f00a fcce 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f603 33ae 	addw	r3, r3, #2990	; 0xbae
 8013af8:	4619      	mov	r1, r3
 8013afa:	4610      	mov	r0, r2
 8013afc:	f7fe fdf8 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013b06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013b0a:	210e      	movs	r1, #14
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fe fcab 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013b12:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8013b16:	4620      	mov	r0, r4
 8013b18:	f007 f846 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b22:	22c1      	movs	r2, #193	; 0xc1
 8013b24:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7fe fa5d 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8013b34:	2200      	movs	r2, #0
 8013b36:	21dc      	movs	r1, #220	; 0xdc
 8013b38:	20ff      	movs	r0, #255	; 0xff
 8013b3a:	f7ff f999 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	4619      	mov	r1, r3
 8013b42:	4620      	mov	r0, r4
 8013b44:	f7fe fcf9 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b4e:	2100      	movs	r1, #0
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe fd45 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8013b5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013b60:	2114      	movs	r1, #20
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7fe fc80 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013b68:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f007 f81b 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013b78:	22c1      	movs	r2, #193	; 0xc1
 8013b7a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fe fa32 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	21dc      	movs	r1, #220	; 0xdc
 8013b8e:	20ff      	movs	r0, #255	; 0xff
 8013b90:	f7ff f96e 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b94:	4603      	mov	r3, r0
 8013b96:	4619      	mov	r1, r3
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f7fe fcce 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fe fd1a 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8013bb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013bb6:	2115      	movs	r1, #21
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fe fc55 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013bbe:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	f006 fff0 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 8013bce:	232a      	movs	r3, #42	; 0x2a
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	234b      	movs	r3, #75	; 0x4b
 8013bd4:	2299      	movs	r2, #153	; 0x99
 8013bd6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8013bda:	f7fc ff55 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8013be4:	22ff      	movs	r2, #255	; 0xff
 8013be6:	21ff      	movs	r1, #255	; 0xff
 8013be8:	20ff      	movs	r0, #255	; 0xff
 8013bea:	f7ff f941 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f7fe fca1 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8013bfe:	2100      	movs	r1, #0
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fe fced 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 8013c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013c10:	2117      	movs	r1, #23
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fe fc28 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013c18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7fe fc33 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013c22:	4603      	mov	r3, r0
 8013c24:	4a92      	ldr	r2, [pc, #584]	; (8013e70 <_ZN12MainViewBaseC1Ev+0xfac>)
 8013c26:	2105      	movs	r1, #5
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f00a fc2d 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	4610      	mov	r0, r2
 8013c3e:	f7fe fd57 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8013c48:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013c4c:	2116      	movs	r1, #22
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7fe fc0a 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013c54:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8013c58:	4620      	mov	r0, r4
 8013c5a:	f006 ffa5 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8013c64:	2328      	movs	r3, #40	; 0x28
 8013c66:	9300      	str	r3, [sp, #0]
 8013c68:	2347      	movs	r3, #71	; 0x47
 8013c6a:	2299      	movs	r2, #153	; 0x99
 8013c6c:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8013c70:	f7fc ff0a 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8013c7a:	22ff      	movs	r2, #255	; 0xff
 8013c7c:	21ff      	movs	r1, #255	; 0xff
 8013c7e:	20ff      	movs	r0, #255	; 0xff
 8013c80:	f7ff f8f6 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c84:	4603      	mov	r3, r0
 8013c86:	4619      	mov	r1, r3
 8013c88:	4620      	mov	r0, r4
 8013c8a:	f7fe fc56 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013c94:	2100      	movs	r1, #0
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fe fca2 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f603 34c2 	addw	r4, r3, #3010	; 0xbc2
 8013ca2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013ca6:	2125      	movs	r1, #37	; 0x25
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7fe fbdd 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fe fbe8 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	4a6d      	ldr	r2, [pc, #436]	; (8013e70 <_ZN12MainViewBaseC1Ev+0xfac>)
 8013cbc:	2105      	movs	r1, #5
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	f00a fbe2 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f603 33c2 	addw	r3, r3, #3010	; 0xbc2
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	4610      	mov	r0, r2
 8013cd4:	f7fe fd0c 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8013cde:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013ce2:	2118      	movs	r1, #24
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fe fbbf 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013cea:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8013cee:	4620      	mov	r0, r4
 8013cf0:	f006 ff5a 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013cfa:	22f0      	movs	r2, #240	; 0xf0
 8013cfc:	f240 1197 	movw	r1, #407	; 0x197
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7fe f971 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	21dc      	movs	r1, #220	; 0xdc
 8013d10:	20ff      	movs	r0, #255	; 0xff
 8013d12:	f7ff f8ad 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d16:	4603      	mov	r3, r0
 8013d18:	4619      	mov	r1, r3
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	f7fe fc0d 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013d26:	2100      	movs	r1, #0
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fe fc59 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8013d34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013d38:	211b      	movs	r1, #27
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fe fb94 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013d40:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8013d44:	4620      	mov	r0, r4
 8013d46:	f006 ff2f 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013d50:	22e2      	movs	r2, #226	; 0xe2
 8013d52:	f240 116f 	movw	r1, #367	; 0x16f
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7fe f946 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8013d62:	230a      	movs	r3, #10
 8013d64:	9300      	str	r3, [sp, #0]
 8013d66:	2364      	movs	r3, #100	; 0x64
 8013d68:	2202      	movs	r2, #2
 8013d6a:	2102      	movs	r1, #2
 8013d6c:	f004 fc7a 	bl	8018664 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8013d76:	2300      	movs	r3, #0
 8013d78:	9300      	str	r3, [sp, #0]
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	2264      	movs	r2, #100	; 0x64
 8013d7e:	2100      	movs	r1, #0
 8013d80:	f004 feee 	bl	8018b60 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f004 fcc9 	bl	8018724 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013d98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013d9c:	2100      	movs	r1, #0
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7fe f8a5 	bl	8011eee <_ZN8touchgfx6BitmapC1Et>
 8013da4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013da8:	4619      	mov	r1, r3
 8013daa:	4620      	mov	r0, r4
 8013dac:	f004 fecd 	bl	8018b4a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013db6:	2200      	movs	r2, #0
 8013db8:	21dc      	movs	r1, #220	; 0xdc
 8013dba:	20ff      	movs	r0, #255	; 0xff
 8013dbc:	f7ff f858 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f004 fbf7 	bl	80185b8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013dd0:	213c      	movs	r1, #60	; 0x3c
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f004 fc5e 	bl	8018694 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 8013dde:	230a      	movs	r3, #10
 8013de0:	9300      	str	r3, [sp, #0]
 8013de2:	23b4      	movs	r3, #180	; 0xb4
 8013de4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013de8:	210e      	movs	r1, #14
 8013dea:	f7fc fe4d 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8013df4:	22ff      	movs	r2, #255	; 0xff
 8013df6:	21ff      	movs	r1, #255	; 0xff
 8013df8:	20ff      	movs	r0, #255	; 0xff
 8013dfa:	f7ff f839 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	22ff      	movs	r2, #255	; 0xff
 8013e02:	4619      	mov	r1, r3
 8013e04:	4620      	mov	r0, r4
 8013e06:	f006 f8fe 	bl	801a006 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8013e16:	4619      	mov	r1, r3
 8013e18:	4610      	mov	r0, r2
 8013e1a:	f006 f95d 	bl	801a0d8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013e24:	2205      	movs	r2, #5
 8013e26:	2100      	movs	r1, #0
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f000 fd89 	bl	8014940 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013e34:	2205      	movs	r2, #5
 8013e36:	21b4      	movs	r1, #180	; 0xb4
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f000 fda7 	bl	801498c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013e44:	2102      	movs	r1, #2
 8013e46:	4618      	mov	r0, r3
 8013e48:	f000 fdc6 	bl	80149d8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013e52:	2100      	movs	r1, #0
 8013e54:	4618      	mov	r0, r3
 8013e56:	f006 fc59 	bl	801a70c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 8013e60:	230a      	movs	r3, #10
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	23b4      	movs	r3, #180	; 0xb4
 8013e66:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013e6a:	f240 111f 	movw	r1, #287	; 0x11f
 8013e6e:	e001      	b.n	8013e74 <_ZN12MainViewBaseC1Ev+0xfb0>
 8013e70:	080298d0 	.word	0x080298d0
 8013e74:	f7fc fe08 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8013e7e:	22ff      	movs	r2, #255	; 0xff
 8013e80:	21ff      	movs	r1, #255	; 0xff
 8013e82:	20ff      	movs	r0, #255	; 0xff
 8013e84:	f7fe fff4 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	22ff      	movs	r2, #255	; 0xff
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f006 f8b9 	bl	801a006 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8013ea0:	4619      	mov	r1, r3
 8013ea2:	4610      	mov	r0, r2
 8013ea4:	f006 f918 	bl	801a0d8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013eae:	2205      	movs	r2, #5
 8013eb0:	2100      	movs	r1, #0
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f000 fd44 	bl	8014940 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013ebe:	2205      	movs	r2, #5
 8013ec0:	21b4      	movs	r1, #180	; 0xb4
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f000 fd62 	bl	801498c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013ece:	2102      	movs	r1, #2
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f000 fd81 	bl	80149d8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013edc:	2100      	movs	r1, #0
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f006 fc14 	bl	801a70c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 8013eea:	2315      	movs	r3, #21
 8013eec:	9300      	str	r3, [sp, #0]
 8013eee:	233c      	movs	r3, #60	; 0x3c
 8013ef0:	22f7      	movs	r2, #247	; 0xf7
 8013ef2:	21d2      	movs	r1, #210	; 0xd2
 8013ef4:	f7fc fdc8 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8013efe:	22ff      	movs	r2, #255	; 0xff
 8013f00:	21ff      	movs	r1, #255	; 0xff
 8013f02:	20ff      	movs	r0, #255	; 0xff
 8013f04:	f7fe ffb4 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	f7fe fb14 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8013f18:	2100      	movs	r1, #0
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7fe fb60 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f603 34cc 	addw	r4, r3, #3020	; 0xbcc
 8013f26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013f2a:	211d      	movs	r1, #29
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe fa9b 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013f32:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7fe faa6 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	4ae2      	ldr	r2, [pc, #904]	; (80142c8 <_ZN12MainViewBaseC1Ev+0x1404>)
 8013f40:	2105      	movs	r1, #5
 8013f42:	4620      	mov	r0, r4
 8013f44:	f00a faa0 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 8013f54:	4619      	mov	r1, r3
 8013f56:	4610      	mov	r0, r2
 8013f58:	f7fe fbca 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8013f62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013f66:	211c      	movs	r1, #28
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7fe fa7d 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8013f6e:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8013f72:	4620      	mov	r0, r4
 8013f74:	f006 fe18 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013f7e:	2201      	movs	r2, #1
 8013f80:	2101      	movs	r1, #1
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7fe f830 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8013f8e:	2337      	movs	r3, #55	; 0x37
 8013f90:	9300      	str	r3, [sp, #0]
 8013f92:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8013f96:	2202      	movs	r2, #2
 8013f98:	2102      	movs	r1, #2
 8013f9a:	f004 fcb3 	bl	8018904 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	9300      	str	r3, [sp, #0]
 8013fa8:	2300      	movs	r3, #0
 8013faa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013fae:	2100      	movs	r1, #0
 8013fb0:	f004 fdd6 	bl	8018b60 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013fba:	2100      	movs	r1, #0
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f004 fbb1 	bl	8018724 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013fc8:	2101      	movs	r1, #1
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f004 fbf5 	bl	80187ba <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013fd6:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f004 fcaa 	bl	8018934 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013fe6:	2101      	movs	r1, #1
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f004 fbcf 	bl	801878c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8013ff4:	2316      	movs	r3, #22
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	2337      	movs	r3, #55	; 0x37
 8013ffa:	2204      	movs	r2, #4
 8013ffc:	2119      	movs	r1, #25
 8013ffe:	f7fc fd43 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014008:	22ff      	movs	r2, #255	; 0xff
 801400a:	21ff      	movs	r1, #255	; 0xff
 801400c:	20ff      	movs	r0, #255	; 0xff
 801400e:	f7fe ff2f 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014012:	4603      	mov	r3, r0
 8014014:	4619      	mov	r1, r3
 8014016:	4620      	mov	r0, r4
 8014018:	f7fe fa8f 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8014022:	2100      	movs	r1, #0
 8014024:	4618      	mov	r0, r3
 8014026:	f7fe fadb 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f603 34d6 	addw	r4, r3, #3030	; 0xbd6
 8014030:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014034:	211f      	movs	r1, #31
 8014036:	4618      	mov	r0, r3
 8014038:	f7fe fa16 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801403c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014040:	4618      	mov	r0, r3
 8014042:	f7fe fa21 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8014046:	4603      	mov	r3, r0
 8014048:	4a9f      	ldr	r2, [pc, #636]	; (80142c8 <_ZN12MainViewBaseC1Ev+0x1404>)
 801404a:	2105      	movs	r1, #5
 801404c:	4620      	mov	r0, r4
 801404e:	f00a fa1b 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f603 33d6 	addw	r3, r3, #3030	; 0xbd6
 801405e:	4619      	mov	r1, r3
 8014060:	4610      	mov	r0, r2
 8014062:	f7fe fb45 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 801406c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8014070:	211e      	movs	r1, #30
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe f9f8 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8014078:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 801407c:	4620      	mov	r0, r4
 801407e:	f006 fd93 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014088:	220f      	movs	r2, #15
 801408a:	2152      	movs	r1, #82	; 0x52
 801408c:	4618      	mov	r0, r3
 801408e:	f7fd ffab 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8014098:	22ff      	movs	r2, #255	; 0xff
 801409a:	21ff      	movs	r1, #255	; 0xff
 801409c:	20ff      	movs	r0, #255	; 0xff
 801409e:	f7fe fee7 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80140a2:	4603      	mov	r3, r0
 80140a4:	4619      	mov	r1, r3
 80140a6:	4620      	mov	r0, r4
 80140a8:	f7fe fa47 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80140b2:	2100      	movs	r1, #0
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7fe fa93 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f603 1444 	addw	r4, r3, #2372	; 0x944
 80140c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80140c4:	2120      	movs	r1, #32
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fe f9ce 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80140cc:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 80140d0:	4620      	mov	r0, r4
 80140d2:	f006 fd69 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f603 1078 	addw	r0, r3, #2424	; 0x978
 80140dc:	232a      	movs	r3, #42	; 0x2a
 80140de:	9300      	str	r3, [sp, #0]
 80140e0:	2348      	movs	r3, #72	; 0x48
 80140e2:	2255      	movs	r2, #85	; 0x55
 80140e4:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80140e8:	f7fc fcce 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f603 1478 	addw	r4, r3, #2424	; 0x978
 80140f2:	22ff      	movs	r2, #255	; 0xff
 80140f4:	21ff      	movs	r1, #255	; 0xff
 80140f6:	20ff      	movs	r0, #255	; 0xff
 80140f8:	f7fe feba 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80140fc:	4603      	mov	r3, r0
 80140fe:	4619      	mov	r1, r3
 8014100:	4620      	mov	r0, r4
 8014102:	f7fe fa1a 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801410c:	2100      	movs	r1, #0
 801410e:	4618      	mov	r0, r3
 8014110:	f7fe fa66 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 801411a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801411e:	2122      	movs	r1, #34	; 0x22
 8014120:	4618      	mov	r0, r3
 8014122:	f7fe f9a1 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8014126:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801412a:	4618      	mov	r0, r3
 801412c:	f7fe f9ac 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8014130:	4603      	mov	r3, r0
 8014132:	4a65      	ldr	r2, [pc, #404]	; (80142c8 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014134:	2105      	movs	r1, #5
 8014136:	4620      	mov	r0, r4
 8014138:	f00a f9a6 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f603 1278 	addw	r2, r3, #2424	; 0x978
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8014148:	4619      	mov	r1, r3
 801414a:	4610      	mov	r0, r2
 801414c:	f7fe fad0 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8014156:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801415a:	2121      	movs	r1, #33	; 0x21
 801415c:	4618      	mov	r0, r3
 801415e:	f7fe f983 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8014162:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8014166:	4620      	mov	r0, r4
 8014168:	f006 fd1e 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8014172:	233c      	movs	r3, #60	; 0x3c
 8014174:	9300      	str	r3, [sp, #0]
 8014176:	2360      	movs	r3, #96	; 0x60
 8014178:	229e      	movs	r2, #158	; 0x9e
 801417a:	21c3      	movs	r1, #195	; 0xc3
 801417c:	f7fc fc84 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014186:	22ff      	movs	r2, #255	; 0xff
 8014188:	21ff      	movs	r1, #255	; 0xff
 801418a:	20ff      	movs	r0, #255	; 0xff
 801418c:	f7fe fe70 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014190:	4603      	mov	r3, r0
 8014192:	4619      	mov	r1, r3
 8014194:	4620      	mov	r0, r4
 8014196:	f7fe f9d0 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80141a0:	2100      	movs	r1, #0
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7fe fa1c 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f603 34ea 	addw	r4, r3, #3050	; 0xbea
 80141ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80141b2:	2124      	movs	r1, #36	; 0x24
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7fe f957 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80141ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80141be:	4618      	mov	r0, r3
 80141c0:	f7fe f962 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 80141c4:	4603      	mov	r3, r0
 80141c6:	4a40      	ldr	r2, [pc, #256]	; (80142c8 <_ZN12MainViewBaseC1Ev+0x1404>)
 80141c8:	2105      	movs	r1, #5
 80141ca:	4620      	mov	r0, r4
 80141cc:	f00a f95c 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f603 33ea 	addw	r3, r3, #3050	; 0xbea
 80141dc:	4619      	mov	r1, r3
 80141de:	4610      	mov	r0, r2
 80141e0:	f7fe fa86 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 80141ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80141ee:	2123      	movs	r1, #35	; 0x23
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7fe f939 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80141f6:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 80141fa:	4620      	mov	r0, r4
 80141fc:	f006 fcd4 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 8014206:	232a      	movs	r3, #42	; 0x2a
 8014208:	9300      	str	r3, [sp, #0]
 801420a:	234e      	movs	r3, #78	; 0x4e
 801420c:	2299      	movs	r2, #153	; 0x99
 801420e:	2164      	movs	r1, #100	; 0x64
 8014210:	f7fc fc3a 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 801421a:	22ff      	movs	r2, #255	; 0xff
 801421c:	21ff      	movs	r1, #255	; 0xff
 801421e:	20ff      	movs	r0, #255	; 0xff
 8014220:	f7fe fe26 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014224:	4603      	mov	r3, r0
 8014226:	4619      	mov	r1, r3
 8014228:	4620      	mov	r0, r4
 801422a:	f7fe f986 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014234:	2100      	movs	r1, #0
 8014236:	4618      	mov	r0, r3
 8014238:	f7fe f9d2 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 8014242:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014246:	212f      	movs	r1, #47	; 0x2f
 8014248:	4618      	mov	r0, r3
 801424a:	f7fe f90d 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801424e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014252:	4618      	mov	r0, r3
 8014254:	f7fe f918 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8014258:	4603      	mov	r3, r0
 801425a:	4a1b      	ldr	r2, [pc, #108]	; (80142c8 <_ZN12MainViewBaseC1Ev+0x1404>)
 801425c:	2105      	movs	r1, #5
 801425e:	4620      	mov	r0, r4
 8014260:	f00a f912 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8014270:	4619      	mov	r1, r3
 8014272:	4610      	mov	r0, r2
 8014274:	f7fe fa3c 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 801427e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014282:	212e      	movs	r1, #46	; 0x2e
 8014284:	4618      	mov	r0, r3
 8014286:	f7fe f8ef 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801428a:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 801428e:	4620      	mov	r0, r4
 8014290:	f006 fc8a 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801429a:	22c1      	movs	r2, #193	; 0xc1
 801429c:	2172      	movs	r1, #114	; 0x72
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fd fea2 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 80142aa:	2200      	movs	r2, #0
 80142ac:	21dc      	movs	r1, #220	; 0xdc
 80142ae:	20ff      	movs	r0, #255	; 0xff
 80142b0:	f7fe fdde 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80142b4:	4603      	mov	r3, r0
 80142b6:	4619      	mov	r1, r3
 80142b8:	4620      	mov	r0, r4
 80142ba:	f7fe f93e 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80142c4:	2100      	movs	r1, #0
 80142c6:	e001      	b.n	80142cc <_ZN12MainViewBaseC1Ev+0x1408>
 80142c8:	080298d0 	.word	0x080298d0
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7fe f987 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 80142d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80142dc:	2130      	movs	r1, #48	; 0x30
 80142de:	4618      	mov	r0, r3
 80142e0:	f7fe f8c2 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80142e4:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 80142e8:	4620      	mov	r0, r4
 80142ea:	f006 fc5d 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 80142f4:	232a      	movs	r3, #42	; 0x2a
 80142f6:	9300      	str	r3, [sp, #0]
 80142f8:	2344      	movs	r3, #68	; 0x44
 80142fa:	2255      	movs	r2, #85	; 0x55
 80142fc:	f240 118f 	movw	r1, #399	; 0x18f
 8014300:	f7fc fbc2 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 801430a:	22ff      	movs	r2, #255	; 0xff
 801430c:	21ff      	movs	r1, #255	; 0xff
 801430e:	20ff      	movs	r0, #255	; 0xff
 8014310:	f7fe fdae 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014314:	4603      	mov	r3, r0
 8014316:	4619      	mov	r1, r3
 8014318:	4620      	mov	r0, r4
 801431a:	f7fe f90e 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8014324:	2100      	movs	r1, #0
 8014326:	4618      	mov	r0, r3
 8014328:	f7fe f95a 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f603 34fe 	addw	r4, r3, #3070	; 0xbfe
 8014332:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014336:	2132      	movs	r1, #50	; 0x32
 8014338:	4618      	mov	r0, r3
 801433a:	f7fe f895 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801433e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014342:	4618      	mov	r0, r3
 8014344:	f7fe f8a0 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8014348:	4603      	mov	r3, r0
 801434a:	4ad7      	ldr	r2, [pc, #860]	; (80146a8 <_ZN12MainViewBaseC1Ev+0x17e4>)
 801434c:	2105      	movs	r1, #5
 801434e:	4620      	mov	r0, r4
 8014350:	f00a f89a 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f603 33fe 	addw	r3, r3, #3070	; 0xbfe
 8014360:	4619      	mov	r1, r3
 8014362:	4610      	mov	r0, r2
 8014364:	f7fe f9c4 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 801436e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014372:	2131      	movs	r1, #49	; 0x31
 8014374:	4618      	mov	r0, r3
 8014376:	f7fe f877 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801437a:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 801437e:	4620      	mov	r0, r4
 8014380:	f006 fc12 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801438a:	227e      	movs	r2, #126	; 0x7e
 801438c:	f240 1197 	movw	r1, #407	; 0x197
 8014390:	4618      	mov	r0, r3
 8014392:	f7fd fe29 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 801439c:	2200      	movs	r2, #0
 801439e:	21dc      	movs	r1, #220	; 0xdc
 80143a0:	20ff      	movs	r0, #255	; 0xff
 80143a2:	f7fe fd65 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143a6:	4603      	mov	r3, r0
 80143a8:	4619      	mov	r1, r3
 80143aa:	4620      	mov	r0, r4
 80143ac:	f7fe f8c5 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80143b6:	2100      	movs	r1, #0
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fe f911 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 80143c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80143c8:	2133      	movs	r1, #51	; 0x33
 80143ca:	4618      	mov	r0, r3
 80143cc:	f7fe f84c 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 80143d0:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 80143d4:	4620      	mov	r0, r4
 80143d6:	f006 fbe7 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 80143e0:	2311      	movs	r3, #17
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	2313      	movs	r3, #19
 80143e6:	22e2      	movs	r2, #226	; 0xe2
 80143e8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80143ec:	f7fc fb4c 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 80143f6:	220d      	movs	r2, #13
 80143f8:	210d      	movs	r1, #13
 80143fa:	200d      	movs	r0, #13
 80143fc:	f7fe fd38 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014400:	4603      	mov	r3, r0
 8014402:	4619      	mov	r1, r3
 8014404:	4620      	mov	r0, r4
 8014406:	f7fe f898 	bl	801253a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014410:	2100      	movs	r1, #0
 8014412:	4618      	mov	r0, r3
 8014414:	f7fe f8e4 	bl	80125e0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 801441e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014422:	2135      	movs	r1, #53	; 0x35
 8014424:	4618      	mov	r0, r3
 8014426:	f7fe f81f 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 801442a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801442e:	4618      	mov	r0, r3
 8014430:	f7fe f82a 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 8014434:	4603      	mov	r3, r0
 8014436:	4a9c      	ldr	r2, [pc, #624]	; (80146a8 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014438:	2105      	movs	r1, #5
 801443a:	4620      	mov	r0, r4
 801443c:	f00a f824 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 801444c:	4619      	mov	r1, r3
 801444e:	4610      	mov	r0, r2
 8014450:	f7fe f94e 	bl	80126f0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 801445a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801445e:	2134      	movs	r1, #52	; 0x34
 8014460:	4618      	mov	r0, r3
 8014462:	f7fe f801 	bl	8012468 <_ZN8touchgfx9TypedTextC1Et>
 8014466:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 801446a:	4620      	mov	r0, r4
 801446c:	f006 fb9c 	bl	801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014476:	f44f 7388 	mov.w	r3, #272	; 0x110
 801447a:	9300      	str	r3, [sp, #0]
 801447c:	237a      	movs	r3, #122	; 0x7a
 801447e:	2200      	movs	r2, #0
 8014480:	2100      	movs	r1, #0
 8014482:	f000 fac1 	bl	8014a08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801448c:	2105      	movs	r1, #5
 801448e:	4618      	mov	r0, r3
 8014490:	f000 fada 	bl	8014a48 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 801449a:	2299      	movs	r2, #153	; 0x99
 801449c:	2166      	movs	r1, #102	; 0x66
 801449e:	2000      	movs	r0, #0
 80144a0:	f7fe fce6 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80144a4:	4605      	mov	r5, r0
 80144a6:	22cc      	movs	r2, #204	; 0xcc
 80144a8:	2199      	movs	r1, #153	; 0x99
 80144aa:	2000      	movs	r0, #0
 80144ac:	f7fe fce0 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80144b0:	4606      	mov	r6, r0
 80144b2:	2266      	movs	r2, #102	; 0x66
 80144b4:	2133      	movs	r1, #51	; 0x33
 80144b6:	2000      	movs	r0, #0
 80144b8:	f7fe fcda 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80144bc:	4680      	mov	r8, r0
 80144be:	2299      	movs	r2, #153	; 0x99
 80144c0:	2166      	movs	r1, #102	; 0x66
 80144c2:	2033      	movs	r0, #51	; 0x33
 80144c4:	f7fe fcd4 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80144c8:	4603      	mov	r3, r0
 80144ca:	9300      	str	r3, [sp, #0]
 80144cc:	4643      	mov	r3, r8
 80144ce:	4632      	mov	r2, r6
 80144d0:	4629      	mov	r1, r5
 80144d2:	4620      	mov	r0, r4
 80144d4:	f000 fac9 	bl	8014a6a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 80144de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	237a      	movs	r3, #122	; 0x7a
 80144e6:	2200      	movs	r2, #0
 80144e8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80144ec:	f7fc facc 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80144f6:	2100      	movs	r1, #0
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7fe fa10 	bl	801291e <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 801450a:	4619      	mov	r1, r3
 801450c:	4610      	mov	r0, r2
 801450e:	f7fe fa27 	bl	8012960 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	3340      	adds	r3, #64	; 0x40
 8014518:	4619      	mov	r1, r3
 801451a:	4610      	mov	r0, r2
 801451c:	f7fd feec 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8014520:	687a      	ldr	r2, [r7, #4]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	3370      	adds	r3, #112	; 0x70
 8014526:	4619      	mov	r1, r3
 8014528:	4610      	mov	r0, r2
 801452a:	f7fd fee5 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	33a4      	adds	r3, #164	; 0xa4
 8014534:	4619      	mov	r1, r3
 8014536:	4610      	mov	r0, r2
 8014538:	f7fd fede 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	33d8      	adds	r3, #216	; 0xd8
 8014542:	4619      	mov	r1, r3
 8014544:	4610      	mov	r0, r2
 8014546:	f7fd fed7 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8014552:	4619      	mov	r1, r3
 8014554:	4610      	mov	r0, r2
 8014556:	f7fd fecf 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014562:	4619      	mov	r1, r3
 8014564:	4610      	mov	r0, r2
 8014566:	f7fd fec7 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014572:	4619      	mov	r1, r3
 8014574:	4610      	mov	r0, r2
 8014576:	f7fd febf 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 801457a:	687a      	ldr	r2, [r7, #4]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8014582:	4619      	mov	r1, r3
 8014584:	4610      	mov	r0, r2
 8014586:	f7fd feb7 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 801458a:	687a      	ldr	r2, [r7, #4]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8014592:	4619      	mov	r1, r3
 8014594:	4610      	mov	r0, r2
 8014596:	f7fd feaf 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80145a2:	4619      	mov	r1, r3
 80145a4:	4610      	mov	r0, r2
 80145a6:	f7fd fea7 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80145b2:	4619      	mov	r1, r3
 80145b4:	4610      	mov	r0, r2
 80145b6:	f7fd fe9f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80145c2:	4619      	mov	r1, r3
 80145c4:	4610      	mov	r0, r2
 80145c6:	f7fd fe97 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80145d2:	4619      	mov	r1, r3
 80145d4:	4610      	mov	r0, r2
 80145d6:	f7fd fe8f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80145e2:	4619      	mov	r1, r3
 80145e4:	4610      	mov	r0, r2
 80145e6:	f7fd fe87 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80145ea:	687a      	ldr	r2, [r7, #4]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80145f2:	4619      	mov	r1, r3
 80145f4:	4610      	mov	r0, r2
 80145f6:	f7fd fe7f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80145fa:	687a      	ldr	r2, [r7, #4]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014602:	4619      	mov	r1, r3
 8014604:	4610      	mov	r0, r2
 8014606:	f7fd fe77 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8014612:	4619      	mov	r1, r3
 8014614:	4610      	mov	r0, r2
 8014616:	f7fd fe6f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014622:	4619      	mov	r1, r3
 8014624:	4610      	mov	r0, r2
 8014626:	f7fd fe67 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 801462a:	687a      	ldr	r2, [r7, #4]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8014632:	4619      	mov	r1, r3
 8014634:	4610      	mov	r0, r2
 8014636:	f7fd fe5f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8014642:	4619      	mov	r1, r3
 8014644:	4610      	mov	r0, r2
 8014646:	f7fd fe57 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014652:	4619      	mov	r1, r3
 8014654:	4610      	mov	r0, r2
 8014656:	f7fd fe4f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014662:	4619      	mov	r1, r3
 8014664:	4610      	mov	r0, r2
 8014666:	f7fd fe47 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014672:	4619      	mov	r1, r3
 8014674:	4610      	mov	r0, r2
 8014676:	f7fd fe3f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8014682:	4619      	mov	r1, r3
 8014684:	4610      	mov	r0, r2
 8014686:	f7fd fe37 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 801468a:	687a      	ldr	r2, [r7, #4]
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014692:	4619      	mov	r1, r3
 8014694:	4610      	mov	r0, r2
 8014696:	f7fd fe2f 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 801469a:	687a      	ldr	r2, [r7, #4]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80146a2:	4619      	mov	r1, r3
 80146a4:	e002      	b.n	80146ac <_ZN12MainViewBaseC1Ev+0x17e8>
 80146a6:	bf00      	nop
 80146a8:	080298d0 	.word	0x080298d0
 80146ac:	4610      	mov	r0, r2
 80146ae:	f7fd fe23 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80146ba:	4619      	mov	r1, r3
 80146bc:	4610      	mov	r0, r2
 80146be:	f7fd fe1b 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80146ca:	4619      	mov	r1, r3
 80146cc:	4610      	mov	r0, r2
 80146ce:	f7fd fe13 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 80146d2:	687a      	ldr	r2, [r7, #4]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80146da:	4619      	mov	r1, r3
 80146dc:	4610      	mov	r0, r2
 80146de:	f7fd fe0b 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80146ea:	4619      	mov	r1, r3
 80146ec:	4610      	mov	r0, r2
 80146ee:	f7fd fe03 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 80146f2:	687a      	ldr	r2, [r7, #4]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80146fa:	4619      	mov	r1, r3
 80146fc:	4610      	mov	r0, r2
 80146fe:	f7fd fdfb 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8014702:	687a      	ldr	r2, [r7, #4]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 801470a:	4619      	mov	r1, r3
 801470c:	4610      	mov	r0, r2
 801470e:	f7fd fdf3 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801471a:	4619      	mov	r1, r3
 801471c:	4610      	mov	r0, r2
 801471e:	f7fd fdeb 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801472a:	4619      	mov	r1, r3
 801472c:	4610      	mov	r0, r2
 801472e:	f7fd fde3 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801473a:	4619      	mov	r1, r3
 801473c:	4610      	mov	r0, r2
 801473e:	f7fd fddb 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 801474a:	4619      	mov	r1, r3
 801474c:	4610      	mov	r0, r2
 801474e:	f7fd fdd3 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801475a:	4619      	mov	r1, r3
 801475c:	4610      	mov	r0, r2
 801475e:	f7fd fdcb 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8014762:	687a      	ldr	r2, [r7, #4]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801476a:	4619      	mov	r1, r3
 801476c:	4610      	mov	r0, r2
 801476e:	f7fd fdc3 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8014772:	687a      	ldr	r2, [r7, #4]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801477a:	4619      	mov	r1, r3
 801477c:	4610      	mov	r0, r2
 801477e:	f7fd fdbb 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801478a:	4619      	mov	r1, r3
 801478c:	4610      	mov	r0, r2
 801478e:	f7fd fdb3 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801479a:	4619      	mov	r1, r3
 801479c:	4610      	mov	r0, r2
 801479e:	f7fd fdab 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80147aa:	46bd      	mov	sp, r7
 80147ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147b0 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80147b0:	b480      	push	{r7}
 80147b2:	b083      	sub	sp, #12
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]

}
 80147b8:	bf00      	nop
 80147ba:	370c      	adds	r7, #12
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr

080147c4 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d106      	bne.n	80147e8 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f7fe fb3d 	bl	8012e5a <_ZN12MainViewBase11applicationEv>
 80147e0:	4603      	mov	r3, r0
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fc fc54 	bl	8011090 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 80147e8:	bf00      	nop
 80147ea:	3708      	adds	r7, #8
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	4a08      	ldr	r2, [pc, #32]	; (801481c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	601a      	str	r2, [r3, #0]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	3334      	adds	r3, #52	; 0x34
 8014802:	4618      	mov	r0, r3
 8014804:	f7fe f97c 	bl	8012b00 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	4618      	mov	r0, r3
 801480c:	f7fe f8dc 	bl	80129c8 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	4618      	mov	r0, r3
 8014814:	3708      	adds	r7, #8
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	0802a158 	.word	0x0802a158

08014820 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f7ff ffe1 	bl	80147f0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 801482e:	2178      	movs	r1, #120	; 0x78
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f013 fd96 	bl	8028362 <_ZdlPvj>
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	4618      	mov	r0, r3
 801483a:	3708      	adds	r7, #8
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4618      	mov	r0, r3
 801484c:	f008 fd1c 	bl	801d288 <_ZN8touchgfx6ScreenC1Ev>
 8014850:	4a05      	ldr	r2, [pc, #20]	; (8014868 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	601a      	str	r2, [r3, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2200      	movs	r2, #0
 801485a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	4618      	mov	r0, r3
 8014860:	3708      	adds	r7, #8
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	0802a1ec 	.word	0x0802a1ec

0801486c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	4618      	mov	r0, r3
 8014878:	f7fe f894 	bl	80129a4 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 801487c:	4a17      	ldr	r2, [pc, #92]	; (80148dc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	3334      	adds	r3, #52	; 0x34
 8014886:	4618      	mov	r0, r3
 8014888:	f7fe f914 	bl	8012ab4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	3368      	adds	r3, #104	; 0x68
 8014890:	4618      	mov	r0, r3
 8014892:	f7fd facc 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	336c      	adds	r3, #108	; 0x6c
 801489a:	4618      	mov	r0, r3
 801489c:	f7fd fac7 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	3370      	adds	r3, #112	; 0x70
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7fd fac2 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	3374      	adds	r3, #116	; 0x74
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7fd fabd 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	3334      	adds	r3, #52	; 0x34
 80148b8:	2200      	movs	r2, #0
 80148ba:	2100      	movs	r1, #0
 80148bc:	4618      	mov	r0, r3
 80148be:	f7fd fb93 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	3334      	adds	r3, #52	; 0x34
 80148c8:	4619      	mov	r1, r3
 80148ca:	4610      	mov	r0, r2
 80148cc:	f004 fa7c 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	4618      	mov	r0, r3
 80148d4:	3708      	adds	r7, #8
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	0802a158 	.word	0x0802a158

080148e0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	4a04      	ldr	r2, [pc, #16]	; (80148fc <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	601a      	str	r2, [r3, #0]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4618      	mov	r0, r3
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr
 80148fc:	0802a2b4 	.word	0x0802a2b4

08014900 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	4639      	mov	r1, r7
 801490c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	4618      	mov	r0, r3
 8014914:	f7ff ffe4 	bl	80148e0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8014918:	4a08      	ldr	r2, [pc, #32]	; (801493c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	68ba      	ldr	r2, [r7, #8]
 8014922:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	3308      	adds	r3, #8
 8014928:	463a      	mov	r2, r7
 801492a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801492e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	4618      	mov	r0, r3
 8014936:	3710      	adds	r7, #16
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	0802a140 	.word	0x0802a140

08014940 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8014940:	b590      	push	{r4, r7, lr}
 8014942:	b089      	sub	sp, #36	; 0x24
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	015a      	lsls	r2, r3, #5
 8014954:	f107 0314 	add.w	r3, r7, #20
 8014958:	4611      	mov	r1, r2
 801495a:	4618      	mov	r0, r3
 801495c:	f7fd fef8 	bl	8012750 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	461c      	mov	r4, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	61fb      	str	r3, [r7, #28]
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	015a      	lsls	r2, r3, #5
 801496c:	f107 0310 	add.w	r3, r7, #16
 8014970:	4611      	mov	r1, r2
 8014972:	4618      	mov	r0, r3
 8014974:	f7fd feec 	bl	8012750 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014978:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801497a:	461a      	mov	r2, r3
 801497c:	4621      	mov	r1, r4
 801497e:	68f8      	ldr	r0, [r7, #12]
 8014980:	f005 feae 	bl	801a6e0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8014984:	bf00      	nop
 8014986:	3724      	adds	r7, #36	; 0x24
 8014988:	46bd      	mov	sp, r7
 801498a:	bd90      	pop	{r4, r7, pc}

0801498c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 801498c:	b590      	push	{r4, r7, lr}
 801498e:	b089      	sub	sp, #36	; 0x24
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	61bb      	str	r3, [r7, #24]
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	015a      	lsls	r2, r3, #5
 80149a0:	f107 0314 	add.w	r3, r7, #20
 80149a4:	4611      	mov	r1, r2
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7fd fed2 	bl	8012750 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	461c      	mov	r4, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	61fb      	str	r3, [r7, #28]
 80149b4:	69fb      	ldr	r3, [r7, #28]
 80149b6:	015a      	lsls	r2, r3, #5
 80149b8:	f107 0310 	add.w	r3, r7, #16
 80149bc:	4611      	mov	r1, r2
 80149be:	4618      	mov	r0, r3
 80149c0:	f7fd fec6 	bl	8012750 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80149c4:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80149c6:	461a      	mov	r2, r3
 80149c8:	4621      	mov	r1, r4
 80149ca:	68f8      	ldr	r0, [r7, #12]
 80149cc:	f005 fe93 	bl	801a6f6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80149d0:	bf00      	nop
 80149d2:	3724      	adds	r7, #36	; 0x24
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd90      	pop	{r4, r7, pc}

080149d8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80149d8:	b580      	push	{r7, lr}
 80149da:	b084      	sub	sp, #16
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	60fb      	str	r3, [r7, #12]
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	015a      	lsls	r2, r3, #5
 80149ea:	f107 0308 	add.w	r3, r7, #8
 80149ee:	4611      	mov	r1, r2
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fd fead 	bl	8012750 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80149f6:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80149f8:	4619      	mov	r1, r3
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f7fd fec3 	bl	8012786 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8014a00:	bf00      	nop
 8014a02:	3710      	adds	r7, #16
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8014a08:	b590      	push	{r4, r7, lr}
 8014a0a:	b087      	sub	sp, #28
 8014a0c:	af02      	add	r7, sp, #8
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	4608      	mov	r0, r1
 8014a12:	4611      	mov	r1, r2
 8014a14:	461a      	mov	r2, r3
 8014a16:	4603      	mov	r3, r0
 8014a18:	817b      	strh	r3, [r7, #10]
 8014a1a:	460b      	mov	r3, r1
 8014a1c:	813b      	strh	r3, [r7, #8]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8014a28:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8014a2c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014a30:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014a34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a38:	9300      	str	r3, [sp, #0]
 8014a3a:	4623      	mov	r3, r4
 8014a3c:	f7fc f824 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8014a40:	bf00      	nop
 8014a42:	3714      	adds	r7, #20
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd90      	pop	{r4, r7, pc}

08014a48 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	460b      	mov	r3, r1
 8014a52:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	3334      	adds	r3, #52	; 0x34
 8014a58:	78fa      	ldrb	r2, [r7, #3]
 8014a5a:	4611      	mov	r1, r2
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7fe f88d 	bl	8012b7c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8014a62:	bf00      	nop
 8014a64:	3708      	adds	r7, #8
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b084      	sub	sp, #16
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	60f8      	str	r0, [r7, #12]
 8014a72:	60b9      	str	r1, [r7, #8]
 8014a74:	607a      	str	r2, [r7, #4]
 8014a76:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	68ba      	ldr	r2, [r7, #8]
 8014a7c:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	683a      	ldr	r2, [r7, #0]
 8014a88:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	69ba      	ldr	r2, [r7, #24]
 8014a8e:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	3384      	adds	r3, #132	; 0x84
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	68f8      	ldr	r0, [r7, #12]
 8014a9a:	4798      	blx	r3
    }
 8014a9c:	bf00      	nop
 8014a9e:	3710      	adds	r7, #16
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
    }
 8014aac:	4a04      	ldr	r2, [pc, #16]	; (8014ac0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	601a      	str	r2, [r3, #0]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr
 8014ac0:	0802a2b4 	.word	0x0802a2b4

08014ac4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
    }
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f7ff ffe9 	bl	8014aa4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014ad2:	2104      	movs	r1, #4
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f013 fc44 	bl	8028362 <_ZdlPvj>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4618      	mov	r0, r3
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8014ae4:	b590      	push	{r4, r7, lr}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fd ff05 	bl	8012904 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d002      	beq.n	8014b06 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	336c      	adds	r3, #108	; 0x6c
 8014b04:	e001      	b.n	8014b0a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	3368      	adds	r3, #104	; 0x68
 8014b0a:	6819      	ldr	r1, [r3, #0]
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f7fe f819 	bl	8012b44 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7fd fef2 	bl	8012904 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d002      	beq.n	8014b2c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	3374      	adds	r3, #116	; 0x74
 8014b2a:	e001      	b.n	8014b30 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	3370      	adds	r3, #112	; 0x70
 8014b30:	6819      	ldr	r1, [r3, #0]
 8014b32:	4620      	mov	r0, r4
 8014b34:	f7fe f814 	bl	8012b60 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fd ff1e 	bl	801297c <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8014b40:	bf00      	nop
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd90      	pop	{r4, r7, pc}

08014b48 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	4a05      	ldr	r2, [pc, #20]	; (8014b68 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	601a      	str	r2, [r3, #0]
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7ff ffa3 	bl	8014aa4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	4618      	mov	r0, r3
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	0802a140 	.word	0x0802a140

08014b6c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f7ff ffe7 	bl	8014b48 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8014b7a:	2110      	movs	r1, #16
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f013 fbf0 	bl	8028362 <_ZdlPvj>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	4618      	mov	r0, r3
 8014b86:	3708      	adds	r7, #8
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b082      	sub	sp, #8
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	4a05      	ldr	r2, [pc, #20]	; (8014bac <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	601a      	str	r2, [r3, #0]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7fd fd6f 	bl	8012680 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3708      	adds	r7, #8
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	0802c17c 	.word	0x0802c17c

08014bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f7ff ffe7 	bl	8014b8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014bbe:	2138      	movs	r1, #56	; 0x38
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f013 fbce 	bl	8028362 <_ZdlPvj>
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	4a05      	ldr	r2, [pc, #20]	; (8014bf0 <_ZN8touchgfx4LineD1Ev+0x20>)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	601a      	str	r2, [r3, #0]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	4618      	mov	r0, r3
 8014be2:	f005 fb57 	bl	801a294 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	4618      	mov	r0, r3
 8014bea:	3708      	adds	r7, #8
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}
 8014bf0:	0802beb8 	.word	0x0802beb8

08014bf4 <_ZN8touchgfx4LineD0Ev>:
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f7ff ffe7 	bl	8014bd0 <_ZN8touchgfx4LineD1Ev>
 8014c02:	2174      	movs	r1, #116	; 0x74
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f013 fbac 	bl	8028362 <_ZdlPvj>
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3708      	adds	r7, #8
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	4a05      	ldr	r2, [pc, #20]	; (8014c34 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	601a      	str	r2, [r3, #0]
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7fd fdd1 	bl	80127cc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3708      	adds	r7, #8
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	0802bbbc 	.word	0x0802bbbc

08014c38 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f7ff ffe7 	bl	8014c14 <_ZN8touchgfx13PainterRGB888D1Ev>
 8014c46:	2118      	movs	r1, #24
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f013 fb8a 	bl	8028362 <_ZdlPvj>
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	4618      	mov	r0, r3
 8014c52:	3708      	adds	r7, #8
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	687a      	ldr	r2, [r7, #4]
 8014c68:	68d2      	ldr	r2, [r2, #12]
 8014c6a:	1052      	asrs	r2, r2, #1
 8014c6c:	1898      	adds	r0, r3, r2
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	f003 0301 	and.w	r3, r3, #1
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d102      	bne.n	8014c80 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	689b      	ldr	r3, [r3, #8]
 8014c7e:	e00a      	b.n	8014c96 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	68d2      	ldr	r2, [r2, #12]
 8014c88:	1052      	asrs	r2, r2, #1
 8014c8a:	4413      	add	r3, r2
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	687a      	ldr	r2, [r7, #4]
 8014c90:	6892      	ldr	r2, [r2, #8]
 8014c92:	4413      	add	r3, r2
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	6839      	ldr	r1, [r7, #0]
 8014c98:	4798      	blx	r3
    }
 8014c9a:	bf00      	nop
 8014c9c:	3708      	adds	r7, #8
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}

08014ca2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8014ca2:	b480      	push	{r7}
 8014ca4:	b083      	sub	sp, #12
 8014ca6:	af00      	add	r7, sp, #0
 8014ca8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d010      	beq.n	8014cd4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	689b      	ldr	r3, [r3, #8]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d107      	bne.n	8014cca <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	f003 0301 	and.w	r3, r3, #1
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d101      	bne.n	8014cca <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	e000      	b.n	8014ccc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	2b01      	cmp	r3, #1
 8014cce:	d001      	beq.n	8014cd4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	e000      	b.n	8014cd6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8014cd4:	2300      	movs	r3, #0
    }
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	370c      	adds	r7, #12
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce0:	4770      	bx	lr

08014ce2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 8014ce2:	b590      	push	{r4, r7, lr}
 8014ce4:	b083      	sub	sp, #12
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7fd fe27 	bl	8012946 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	4619      	mov	r1, r3
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	f7fd ff4d 	bl	8012b9c <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7fd fe43 	bl	8012990 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8014d0a:	bf00      	nop
 8014d0c:	370c      	adds	r7, #12
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd90      	pop	{r4, r7, pc}
	...

08014d14 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fd fd98 	bl	8012854 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8014d24:	4a03      	ldr	r2, [pc, #12]	; (8014d34 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	601a      	str	r2, [r3, #0]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	0802a5b4 	.word	0x0802a5b4

08014d38 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	4a05      	ldr	r2, [pc, #20]	; (8014d58 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	601a      	str	r2, [r3, #0]
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7fd fda5 	bl	8012898 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	4618      	mov	r0, r3
 8014d52:	3708      	adds	r7, #8
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	0802a5b4 	.word	0x0802a5b4

08014d5c <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f7ff ffe7 	bl	8014d38 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8014d6a:	2134      	movs	r1, #52	; 0x34
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f013 faf8 	bl	8028362 <_ZdlPvj>
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	4618      	mov	r0, r3
 8014d76:	3708      	adds	r7, #8
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}

08014d7c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7fd fdbb 	bl	8012904 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8014d92:	6838      	ldr	r0, [r7, #0]
 8014d94:	f7fd f89f 	bl	8011ed6 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	bf0c      	ite	eq
 8014d9e:	2301      	moveq	r3, #1
 8014da0:	2300      	movne	r3, #0
 8014da2:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8014da4:	7bbb      	ldrb	r3, [r7, #14]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d005      	beq.n	8014db6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8014daa:	7bfb      	ldrb	r3, [r7, #15]
 8014dac:	f083 0301 	eor.w	r3, r3, #1
 8014db0:	b2db      	uxtb	r3, r3
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d108      	bne.n	8014dc8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8014db6:	7bbb      	ldrb	r3, [r7, #14]
 8014db8:	f083 0301 	eor.w	r3, r3, #1
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d00f      	beq.n	8014de2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8014dc2:	7bfb      	ldrb	r3, [r7, #15]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d00c      	beq.n	8014de2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	7bba      	ldrb	r2, [r7, #14]
 8014dcc:	4611      	mov	r1, r2
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7fd fd84 	bl	80128dc <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	3314      	adds	r3, #20
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	4610      	mov	r0, r2
 8014de0:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8014de2:	7bfb      	ldrb	r3, [r7, #15]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d00b      	beq.n	8014e00 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014de8:	6838      	ldr	r0, [r7, #0]
 8014dea:	f7fd f874 	bl	8011ed6 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8014dee:	4603      	mov	r3, r0
 8014df0:	2b01      	cmp	r3, #1
 8014df2:	d105      	bne.n	8014e00 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d001      	beq.n	8014e00 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	e000      	b.n	8014e02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 8014e00:	2300      	movs	r3, #0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d015      	beq.n	8014e32 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	330c      	adds	r3, #12
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	4610      	mov	r0, r2
 8014e16:	4798      	blx	r3
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d009      	beq.n	8014e32 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	3308      	adds	r3, #8
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	6879      	ldr	r1, [r7, #4]
 8014e2e:	4610      	mov	r0, r2
 8014e30:	4798      	blx	r3
            }
        }
    }
 8014e32:	bf00      	nop
 8014e34:	3710      	adds	r7, #16
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}
	...

08014e3c <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	4a05      	ldr	r2, [pc, #20]	; (8014e5c <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	601a      	str	r2, [r3, #0]
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fd f9fb 	bl	8012248 <_ZN8touchgfx6ScreenD1Ev>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	4618      	mov	r0, r3
 8014e56:	3708      	adds	r7, #8
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	0802a580 	.word	0x0802a580

08014e60 <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f7ff ffe7 	bl	8014e3c <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8014e6e:	2140      	movs	r1, #64	; 0x40
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f013 fa76 	bl	8028362 <_ZdlPvj>
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	4a0d      	ldr	r2, [pc, #52]	; (8014ec0 <_ZN20SecondScreenViewBaseD1Ev+0x40>)
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	601a      	str	r2, [r3, #0]
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	33e8      	adds	r3, #232	; 0xe8
 8014e92:	4618      	mov	r0, r3
 8014e94:	f000 fa0c 	bl	80152b0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	3370      	adds	r3, #112	; 0x70
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 f8ef 	bl	8015080 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	3340      	adds	r3, #64	; 0x40
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7fd faae 	bl	8012408 <_ZN8touchgfx3BoxD1Ev>
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff ffc4 	bl	8014e3c <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3708      	adds	r7, #8
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	bf00      	nop
 8014ec0:	0802a4a0 	.word	0x0802a4a0

08014ec4 <_ZN20SecondScreenViewBaseD0Ev>:
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f7ff ffd7 	bl	8014e80 <_ZN20SecondScreenViewBaseD1Ev>
 8014ed2:	21f8      	movs	r1, #248	; 0xf8
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f013 fa44 	bl	8028362 <_ZdlPvj>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4618      	mov	r0, r3
 8014ede:	3708      	adds	r7, #8
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}

08014ee4 <_ZN20SecondScreenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8014eec:	f007 fa36 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8014ef0:	4603      	mov	r3, r0
    }
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3708      	adds	r7, #8
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}
	...

08014efc <_ZN20SecondScreenViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>

SecondScreenViewBase::SecondScreenViewBase() :
 8014efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f00:	b086      	sub	sp, #24
 8014f02:	af02      	add	r7, sp, #8
 8014f04:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f000 f8e1 	bl	80150d0 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 8014f0e:	4a4a      	ldr	r2, [pc, #296]	; (8015038 <_ZN20SecondScreenViewBaseC1Ev+0x13c>)
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	601a      	str	r2, [r3, #0]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	3340      	adds	r3, #64	; 0x40
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7fd fa55 	bl	80123c8 <_ZN8touchgfx3BoxC1Ev>
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	3370      	adds	r3, #112	; 0x70
 8014f22:	4618      	mov	r0, r3
 8014f24:	f000 f8ea 	bl	80150fc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8014f2e:	4b43      	ldr	r3, [pc, #268]	; (801503c <_ZN20SecondScreenViewBaseC1Ev+0x140>)
 8014f30:	60bb      	str	r3, [r7, #8]
 8014f32:	2300      	movs	r3, #0
 8014f34:	60fb      	str	r3, [r7, #12]
 8014f36:	f107 0308 	add.w	r3, r7, #8
 8014f3a:	cb0c      	ldmia	r3, {r2, r3}
 8014f3c:	6879      	ldr	r1, [r7, #4]
 8014f3e:	f000 f917 	bl	8015170 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014f48:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014f4c:	9300      	str	r3, [sp, #0]
 8014f4e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014f52:	2200      	movs	r2, #0
 8014f54:	2100      	movs	r1, #0
 8014f56:	f7fb fd97 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014f60:	2200      	movs	r2, #0
 8014f62:	2100      	movs	r1, #0
 8014f64:	2000      	movs	r0, #0
 8014f66:	f7fd ff83 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f7fd fa6c 	bl	801244c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014f7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014f7e:	9300      	str	r3, [sp, #0]
 8014f80:	2385      	movs	r3, #133	; 0x85
 8014f82:	2200      	movs	r2, #0
 8014f84:	2100      	movs	r1, #0
 8014f86:	f000 f913 	bl	80151b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	3370      	adds	r3, #112	; 0x70
 8014f8e:	2105      	movs	r1, #5
 8014f90:	4618      	mov	r0, r3
 8014f92:	f000 f92d 	bl	80151f0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014f9c:	2299      	movs	r2, #153	; 0x99
 8014f9e:	2166      	movs	r1, #102	; 0x66
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	f7fd ff65 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	22cc      	movs	r2, #204	; 0xcc
 8014faa:	2199      	movs	r1, #153	; 0x99
 8014fac:	2000      	movs	r0, #0
 8014fae:	f7fd ff5f 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014fb2:	4606      	mov	r6, r0
 8014fb4:	2266      	movs	r2, #102	; 0x66
 8014fb6:	2133      	movs	r1, #51	; 0x33
 8014fb8:	2000      	movs	r0, #0
 8014fba:	f7fd ff59 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014fbe:	4680      	mov	r8, r0
 8014fc0:	2299      	movs	r2, #153	; 0x99
 8014fc2:	2166      	movs	r1, #102	; 0x66
 8014fc4:	2033      	movs	r0, #51	; 0x33
 8014fc6:	f7fd ff53 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	9300      	str	r3, [sp, #0]
 8014fce:	4643      	mov	r3, r8
 8014fd0:	4632      	mov	r2, r6
 8014fd2:	4629      	mov	r1, r5
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	f000 f91c 	bl	8015212 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014fe0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014fe4:	9300      	str	r3, [sp, #0]
 8014fe6:	2385      	movs	r3, #133	; 0x85
 8014fe8:	2200      	movs	r2, #0
 8014fea:	2100      	movs	r1, #0
 8014fec:	f7fb fd4c 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	3370      	adds	r3, #112	; 0x70
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7fd fc91 	bl	801291e <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	33e8      	adds	r3, #232	; 0xe8
 8015006:	4619      	mov	r1, r3
 8015008:	4610      	mov	r0, r2
 801500a:	f7fd fca9 	bl	8012960 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	3340      	adds	r3, #64	; 0x40
 8015014:	4619      	mov	r1, r3
 8015016:	4610      	mov	r0, r2
 8015018:	f7fd f96e 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	3370      	adds	r3, #112	; 0x70
 8015022:	4619      	mov	r1, r3
 8015024:	4610      	mov	r0, r2
 8015026:	f7fd f967 	bl	80122f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	4618      	mov	r0, r3
 801502e:	3710      	adds	r7, #16
 8015030:	46bd      	mov	sp, r7
 8015032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015036:	bf00      	nop
 8015038:	0802a4a0 	.word	0x0802a4a0
 801503c:	08015055 	.word	0x08015055

08015040 <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 8015040:	b480      	push	{r7}
 8015042:	b083      	sub	sp, #12
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]

}
 8015048:	bf00      	nop
 801504a:	370c      	adds	r7, #12
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr

08015054 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	3370      	adds	r3, #112	; 0x70
 8015062:	683a      	ldr	r2, [r7, #0]
 8015064:	429a      	cmp	r2, r3
 8015066:	d106      	bne.n	8015076 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction1
        //When ButtonGoToMainScreen clicked change screen to Main
        //Go to Main with screen transition towards East
        application().gotoMainScreenSlideTransitionEast();
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f7ff ff3b 	bl	8014ee4 <_ZN20SecondScreenViewBase11applicationEv>
 801506e:	4603      	mov	r3, r0
 8015070:	4618      	mov	r0, r3
 8015072:	f7fb ffc7 	bl	8011004 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>
    }
}
 8015076:	bf00      	nop
 8015078:	3708      	adds	r7, #8
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
	...

08015080 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 8015080:	b580      	push	{r7, lr}
 8015082:	b082      	sub	sp, #8
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	4a08      	ldr	r2, [pc, #32]	; (80150ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	601a      	str	r2, [r3, #0]
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	3334      	adds	r3, #52	; 0x34
 8015092:	4618      	mov	r0, r3
 8015094:	f7fd fd34 	bl	8012b00 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	4618      	mov	r0, r3
 801509c:	f7ff fe4c 	bl	8014d38 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	4618      	mov	r0, r3
 80150a4:	3708      	adds	r7, #8
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop
 80150ac:	0802a4ec 	.word	0x0802a4ec

080150b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f7ff ffe1 	bl	8015080 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 80150be:	2178      	movs	r1, #120	; 0x78
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f013 f94e 	bl	8028362 <_ZdlPvj>
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	4618      	mov	r0, r3
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	4618      	mov	r0, r3
 80150dc:	f008 f8d4 	bl	801d288 <_ZN8touchgfx6ScreenC1Ev>
 80150e0:	4a05      	ldr	r2, [pc, #20]	; (80150f8 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	601a      	str	r2, [r3, #0]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2200      	movs	r2, #0
 80150ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	4618      	mov	r0, r3
 80150f0:	3708      	adds	r7, #8
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	bf00      	nop
 80150f8:	0802a580 	.word	0x0802a580

080150fc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	4618      	mov	r0, r3
 8015108:	f7ff fe04 	bl	8014d14 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 801510c:	4a17      	ldr	r2, [pc, #92]	; (801516c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	601a      	str	r2, [r3, #0]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	3334      	adds	r3, #52	; 0x34
 8015116:	4618      	mov	r0, r3
 8015118:	f7fd fccc 	bl	8012ab4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	3368      	adds	r3, #104	; 0x68
 8015120:	4618      	mov	r0, r3
 8015122:	f7fc fe84 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	336c      	adds	r3, #108	; 0x6c
 801512a:	4618      	mov	r0, r3
 801512c:	f7fc fe7f 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	3370      	adds	r3, #112	; 0x70
 8015134:	4618      	mov	r0, r3
 8015136:	f7fc fe7a 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	3374      	adds	r3, #116	; 0x74
 801513e:	4618      	mov	r0, r3
 8015140:	f7fc fe75 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	3334      	adds	r3, #52	; 0x34
 8015148:	2200      	movs	r2, #0
 801514a:	2100      	movs	r1, #0
 801514c:	4618      	mov	r0, r3
 801514e:	f7fc ff4b 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	3334      	adds	r3, #52	; 0x34
 8015158:	4619      	mov	r1, r3
 801515a:	4610      	mov	r0, r2
 801515c:	f003 fe34 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	4618      	mov	r0, r3
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	0802a4ec 	.word	0x0802a4ec

08015170 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8015170:	b580      	push	{r7, lr}
 8015172:	b084      	sub	sp, #16
 8015174:	af00      	add	r7, sp, #0
 8015176:	60f8      	str	r0, [r7, #12]
 8015178:	60b9      	str	r1, [r7, #8]
 801517a:	4639      	mov	r1, r7
 801517c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	4618      	mov	r0, r3
 8015184:	f7ff fbac 	bl	80148e0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8015188:	4a08      	ldr	r2, [pc, #32]	; (80151ac <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	68ba      	ldr	r2, [r7, #8]
 8015192:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	3308      	adds	r3, #8
 8015198:	463a      	mov	r2, r7
 801519a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801519e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	4618      	mov	r0, r3
 80151a6:	3710      	adds	r7, #16
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	0802a4d4 	.word	0x0802a4d4

080151b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80151b0:	b590      	push	{r4, r7, lr}
 80151b2:	b087      	sub	sp, #28
 80151b4:	af02      	add	r7, sp, #8
 80151b6:	60f8      	str	r0, [r7, #12]
 80151b8:	4608      	mov	r0, r1
 80151ba:	4611      	mov	r1, r2
 80151bc:	461a      	mov	r2, r3
 80151be:	4603      	mov	r3, r0
 80151c0:	817b      	strh	r3, [r7, #10]
 80151c2:	460b      	mov	r3, r1
 80151c4:	813b      	strh	r3, [r7, #8]
 80151c6:	4613      	mov	r3, r2
 80151c8:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80151d0:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80151d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151d8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80151dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	4623      	mov	r3, r4
 80151e4:	f7fb fc50 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80151e8:	bf00      	nop
 80151ea:	3714      	adds	r7, #20
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd90      	pop	{r4, r7, pc}

080151f0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	460b      	mov	r3, r1
 80151fa:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	3334      	adds	r3, #52	; 0x34
 8015200:	78fa      	ldrb	r2, [r7, #3]
 8015202:	4611      	mov	r1, r2
 8015204:	4618      	mov	r0, r3
 8015206:	f7fd fcb9 	bl	8012b7c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 801520a:	bf00      	nop
 801520c:	3708      	adds	r7, #8
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}

08015212 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8015212:	b580      	push	{r7, lr}
 8015214:	b084      	sub	sp, #16
 8015216:	af00      	add	r7, sp, #0
 8015218:	60f8      	str	r0, [r7, #12]
 801521a:	60b9      	str	r1, [r7, #8]
 801521c:	607a      	str	r2, [r7, #4]
 801521e:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	68ba      	ldr	r2, [r7, #8]
 8015224:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	69ba      	ldr	r2, [r7, #24]
 8015236:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	3384      	adds	r3, #132	; 0x84
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	68f8      	ldr	r0, [r7, #12]
 8015242:	4798      	blx	r3
    }
 8015244:	bf00      	nop
 8015246:	3710      	adds	r7, #16
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 801524c:	b590      	push	{r4, r7, lr}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	4618      	mov	r0, r3
 801525e:	f7fd fb51 	bl	8012904 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015262:	4603      	mov	r3, r0
 8015264:	2b00      	cmp	r3, #0
 8015266:	d002      	beq.n	801526e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	336c      	adds	r3, #108	; 0x6c
 801526c:	e001      	b.n	8015272 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	3368      	adds	r3, #104	; 0x68
 8015272:	6819      	ldr	r1, [r3, #0]
 8015274:	4620      	mov	r0, r4
 8015276:	f7fd fc65 	bl	8012b44 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	4618      	mov	r0, r3
 8015284:	f7fd fb3e 	bl	8012904 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	d002      	beq.n	8015294 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	3374      	adds	r3, #116	; 0x74
 8015292:	e001      	b.n	8015298 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	3370      	adds	r3, #112	; 0x70
 8015298:	6819      	ldr	r1, [r3, #0]
 801529a:	4620      	mov	r0, r4
 801529c:	f7fd fc60 	bl	8012b60 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fd fb6a 	bl	801297c <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80152a8:	bf00      	nop
 80152aa:	370c      	adds	r7, #12
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd90      	pop	{r4, r7, pc}

080152b0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	4a05      	ldr	r2, [pc, #20]	; (80152d0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	601a      	str	r2, [r3, #0]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7ff fbef 	bl	8014aa4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	4618      	mov	r0, r3
 80152ca:	3708      	adds	r7, #8
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	0802a4d4 	.word	0x0802a4d4

080152d4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	f7ff ffe7 	bl	80152b0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80152e2:	2110      	movs	r1, #16
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f013 f83c 	bl	8028362 <_ZdlPvj>
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4618      	mov	r0, r3
 80152ee:	3708      	adds	r7, #8
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	68d2      	ldr	r2, [r2, #12]
 8015306:	1052      	asrs	r2, r2, #1
 8015308:	1898      	adds	r0, r3, r2
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	f003 0301 	and.w	r3, r3, #1
 8015312:	2b00      	cmp	r3, #0
 8015314:	d102      	bne.n	801531c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	689b      	ldr	r3, [r3, #8]
 801531a:	e00a      	b.n	8015332 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	68d2      	ldr	r2, [r2, #12]
 8015324:	1052      	asrs	r2, r2, #1
 8015326:	4413      	add	r3, r2
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	6892      	ldr	r2, [r2, #8]
 801532e:	4413      	add	r3, r2
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	6839      	ldr	r1, [r7, #0]
 8015334:	4798      	blx	r3
    }
 8015336:	bf00      	nop
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}

0801533e <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801533e:	b480      	push	{r7}
 8015340:	b083      	sub	sp, #12
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d010      	beq.n	8015370 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	689b      	ldr	r3, [r3, #8]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d107      	bne.n	8015366 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	68db      	ldr	r3, [r3, #12]
 801535a:	f003 0301 	and.w	r3, r3, #1
 801535e:	2b00      	cmp	r3, #0
 8015360:	d101      	bne.n	8015366 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015362:	2301      	movs	r3, #1
 8015364:	e000      	b.n	8015368 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8015366:	2300      	movs	r3, #0
 8015368:	2b01      	cmp	r3, #1
 801536a:	d001      	beq.n	8015370 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801536c:	2301      	movs	r3, #1
 801536e:	e000      	b.n	8015372 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8015370:	2300      	movs	r3, #0
    }
 8015372:	4618      	mov	r0, r3
 8015374:	370c      	adds	r7, #12
 8015376:	46bd      	mov	sp, r7
 8015378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537c:	4770      	bx	lr

0801537e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 801537e:	b590      	push	{r4, r7, lr}
 8015380:	b083      	sub	sp, #12
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	4618      	mov	r0, r3
 8015390:	f7fd fad9 	bl	8012946 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8015394:	4603      	mov	r3, r0
 8015396:	4619      	mov	r1, r3
 8015398:	4620      	mov	r0, r4
 801539a:	f7fd fbff 	bl	8012b9c <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7fd faf5 	bl	8012990 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 80153a6:	bf00      	nop
 80153a8:	370c      	adds	r7, #12
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd90      	pop	{r4, r7, pc}
	...

080153b0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80153b0:	b480      	push	{r7}
 80153b2:	af00      	add	r7, sp, #0
    return bitmap_database;
 80153b4:	4b02      	ldr	r3, [pc, #8]	; (80153c0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	46bd      	mov	sp, r7
 80153ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153be:	4770      	bx	lr
 80153c0:	0802a640 	.word	0x0802a640

080153c4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80153c4:	b480      	push	{r7}
 80153c6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80153c8:	2303      	movs	r3, #3
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr

080153d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80153d4:	b480      	push	{r7}
 80153d6:	b085      	sub	sp, #20
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	4613      	mov	r3, r2
 80153e0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80153e2:	4a07      	ldr	r2, [pc, #28]	; (8015400 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	6013      	str	r3, [r2, #0]
        fonts = f;
 80153e8:	4a06      	ldr	r2, [pc, #24]	; (8015404 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80153ee:	4a06      	ldr	r2, [pc, #24]	; (8015408 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80153f0:	88fb      	ldrh	r3, [r7, #6]
 80153f2:	8013      	strh	r3, [r2, #0]
    }
 80153f4:	bf00      	nop
 80153f6:	3714      	adds	r7, #20
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr
 8015400:	2000bf7c 	.word	0x2000bf7c
 8015404:	2000bf84 	.word	0x2000bf84
 8015408:	2000bf80 	.word	0x2000bf80

0801540c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801540c:	b590      	push	{r4, r7, lr}
 801540e:	b085      	sub	sp, #20
 8015410:	af00      	add	r7, sp, #0
 8015412:	4603      	mov	r3, r0
 8015414:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801541a:	88fb      	ldrh	r3, [r7, #6]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d127      	bne.n	8015470 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8015420:	88fb      	ldrh	r3, [r7, #6]
 8015422:	4a1e      	ldr	r2, [pc, #120]	; (801549c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d016      	beq.n	801545a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801542c:	88fb      	ldrh	r3, [r7, #6]
 801542e:	4a1b      	ldr	r2, [pc, #108]	; (801549c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015434:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	68ba      	ldr	r2, [r7, #8]
 801543c:	4413      	add	r3, r2
 801543e:	4a18      	ldr	r2, [pc, #96]	; (80154a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015440:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	68ba      	ldr	r2, [r7, #8]
 8015448:	4413      	add	r3, r2
 801544a:	4a16      	ldr	r2, [pc, #88]	; (80154a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801544c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	689b      	ldr	r3, [r3, #8]
 8015452:	68ba      	ldr	r2, [r7, #8]
 8015454:	4413      	add	r3, r2
 8015456:	60fb      	str	r3, [r7, #12]
 8015458:	e00a      	b.n	8015470 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801545a:	4b11      	ldr	r3, [pc, #68]	; (80154a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801545c:	4a12      	ldr	r2, [pc, #72]	; (80154a8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801545e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8015460:	4a12      	ldr	r2, [pc, #72]	; (80154ac <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8015462:	4b10      	ldr	r3, [pc, #64]	; (80154a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015464:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015466:	88fb      	ldrh	r3, [r7, #6]
 8015468:	4a11      	ldr	r2, [pc, #68]	; (80154b0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801546a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801546e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d00d      	beq.n	8015492 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015476:	4a0f      	ldr	r2, [pc, #60]	; (80154b4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8015478:	88fb      	ldrh	r3, [r7, #6]
 801547a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801547c:	f000 f83e 	bl	80154fc <_ZN17TypedTextDatabase8getFontsEv>
 8015480:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015482:	f000 f833 	bl	80154ec <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015486:	4603      	mov	r3, r0
 8015488:	461a      	mov	r2, r3
 801548a:	4621      	mov	r1, r4
 801548c:	68f8      	ldr	r0, [r7, #12]
 801548e:	f7ff ffa1 	bl	80153d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015492:	bf00      	nop
 8015494:	3714      	adds	r7, #20
 8015496:	46bd      	mov	sp, r7
 8015498:	bd90      	pop	{r4, r7, pc}
 801549a:	bf00      	nop
 801549c:	200086f0 	.word	0x200086f0
 80154a0:	200086f8 	.word	0x200086f8
 80154a4:	200086fc 	.word	0x200086fc
 80154a8:	08065380 	.word	0x08065380
 80154ac:	080652a8 	.word	0x080652a8
 80154b0:	080654e4 	.word	0x080654e4
 80154b4:	200086f4 	.word	0x200086f4

080154b8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80154b8:	b480      	push	{r7}
 80154ba:	b083      	sub	sp, #12
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
 80154c0:	460b      	mov	r3, r1
 80154c2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80154c4:	4b07      	ldr	r3, [pc, #28]	; (80154e4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80154c6:	681a      	ldr	r2, [r3, #0]
 80154c8:	4b07      	ldr	r3, [pc, #28]	; (80154e8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80154ca:	6819      	ldr	r1, [r3, #0]
 80154cc:	887b      	ldrh	r3, [r7, #2]
 80154ce:	009b      	lsls	r3, r3, #2
 80154d0:	440b      	add	r3, r1
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	4413      	add	r3, r2
}
 80154d8:	4618      	mov	r0, r3
 80154da:	370c      	adds	r7, #12
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr
 80154e4:	200086f8 	.word	0x200086f8
 80154e8:	200086fc 	.word	0x200086fc

080154ec <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80154ec:	b480      	push	{r7}
 80154ee:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80154f0:	2336      	movs	r3, #54	; 0x36
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80154fc:	b480      	push	{r7}
 80154fe:	af00      	add	r7, sp, #0
    return _fonts;
 8015500:	4b02      	ldr	r3, [pc, #8]	; (801550c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015502:	4618      	mov	r0, r3
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr
 801550c:	20008700 	.word	0x20008700

08015510 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6039      	str	r1, [r7, #0]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2b01      	cmp	r3, #1
 801551e:	d127      	bne.n	8015570 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015526:	4293      	cmp	r3, r2
 8015528:	d122      	bne.n	8015570 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 801552a:	f7fb f86f 	bl	801060c <_Z25getFont_Asap_Bold_18_4bppv>
 801552e:	4602      	mov	r2, r0
};
 8015530:	4b11      	ldr	r3, [pc, #68]	; (8015578 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015532:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8015534:	f7fb f930 	bl	8010798 <_Z25getFont_Asap_Bold_40_4bppv>
 8015538:	4602      	mov	r2, r0
};
 801553a:	4b0f      	ldr	r3, [pc, #60]	; (8015578 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801553c:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 801553e:	f7fb f8e9 	bl	8010714 <_Z25getFont_Asap_Bold_30_4bppv>
 8015542:	4602      	mov	r2, r0
};
 8015544:	4b0c      	ldr	r3, [pc, #48]	; (8015578 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015546:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8015548:	f7fb f81e 	bl	8010588 <_Z25getFont_Asap_Bold_12_4bppv>
 801554c:	4602      	mov	r2, r0
};
 801554e:	4b0a      	ldr	r3, [pc, #40]	; (8015578 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015550:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8015552:	f7fb f963 	bl	801081c <_Z25getFont_Asap_Bold_60_4bppv>
 8015556:	4602      	mov	r2, r0
};
 8015558:	4b07      	ldr	r3, [pc, #28]	; (8015578 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801555a:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 801555c:	f7fb f898 	bl	8010690 <_Z25getFont_Asap_Bold_21_4bppv>
 8015560:	4602      	mov	r2, r0
};
 8015562:	4b05      	ldr	r3, [pc, #20]	; (8015578 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015564:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8015566:	f7fa ffcd 	bl	8010504 <_Z25getFont_Asap_Bold_10_4bppv>
 801556a:	4602      	mov	r2, r0
};
 801556c:	4b02      	ldr	r3, [pc, #8]	; (8015578 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801556e:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8015570:	bf00      	nop
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	20008700 	.word	0x20008700

0801557c <_GLOBAL__sub_I__fonts>:
 801557c:	b580      	push	{r7, lr}
 801557e:	af00      	add	r7, sp, #0
 8015580:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015584:	2001      	movs	r0, #1
 8015586:	f7ff ffc3 	bl	8015510 <_Z41__static_initialization_and_destruction_0ii>
 801558a:	bd80      	pop	{r7, pc}

0801558c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801558c:	b580      	push	{r7, lr}
 801558e:	b082      	sub	sp, #8
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	4a05      	ldr	r2, [pc, #20]	; (80155ac <_ZN19FrontendApplicationD1Ev+0x20>)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	601a      	str	r2, [r3, #0]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	4618      	mov	r0, r3
 801559e:	f7fb fc15 	bl	8010dcc <_ZN23FrontendApplicationBaseD1Ev>
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	4618      	mov	r0, r3
 80155a6:	3708      	adds	r7, #8
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}
 80155ac:	0802a684 	.word	0x0802a684

080155b0 <_ZN19FrontendApplicationD0Ev>:
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f7ff ffe7 	bl	801558c <_ZN19FrontendApplicationD1Ev>
 80155be:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	f012 fecd 	bl	8028362 <_ZdlPvj>
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	4618      	mov	r0, r3
 80155cc:	3708      	adds	r7, #8
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b082      	sub	sp, #8
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80155e0:	4618      	mov	r0, r3
 80155e2:	f000 fd1d 	bl	8016020 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	4618      	mov	r0, r3
 80155ea:	f006 fdd1 	bl	801c190 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80155ee:	bf00      	nop
 80155f0:	3708      	adds	r7, #8
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
	...

080155f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	60f8      	str	r0, [r7, #12]
 8015600:	60b9      	str	r1, [r7, #8]
 8015602:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	68b9      	ldr	r1, [r7, #8]
 801560a:	4618      	mov	r0, r3
 801560c:	f7fb fc58 	bl	8010ec0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8015610:	4a03      	ldr	r2, [pc, #12]	; (8015620 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	601a      	str	r2, [r3, #0]
{
}
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	4618      	mov	r0, r3
 801561a:	3710      	adds	r7, #16
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}
 8015620:	0802a684 	.word	0x0802a684

08015624 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8015624:	b480      	push	{r7}
 8015626:	b083      	sub	sp, #12
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
    {
    }
 801562c:	bf00      	nop
 801562e:	370c      	adds	r7, #12
 8015630:	46bd      	mov	sp, r7
 8015632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015636:	4770      	bx	lr

08015638 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8015638:	b480      	push	{r7}
 801563a:	b083      	sub	sp, #12
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
    {
    }
 8015640:	bf00      	nop
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
    {
 8015654:	4a04      	ldr	r2, [pc, #16]	; (8015668 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	601a      	str	r2, [r3, #0]
    }
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	4618      	mov	r0, r3
 801565e:	370c      	adds	r7, #12
 8015660:	46bd      	mov	sp, r7
 8015662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015666:	4770      	bx	lr
 8015668:	0802a710 	.word	0x0802a710

0801566c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801566c:	b580      	push	{r7, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
    }
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f7ff ffe9 	bl	801564c <_ZN8touchgfx9PresenterD1Ev>
 801567a:	2104      	movs	r1, #4
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f012 fe70 	bl	8028362 <_ZdlPvj>
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	4618      	mov	r0, r3
 8015686:	3708      	adds	r7, #8
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801568c:	b480      	push	{r7}
 801568e:	b083      	sub	sp, #12
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
    {
 8015694:	4a04      	ldr	r2, [pc, #16]	; (80156a8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	601a      	str	r2, [r3, #0]
    }
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	4618      	mov	r0, r3
 801569e:	370c      	adds	r7, #12
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr
 80156a8:	0802a710 	.word	0x0802a710

080156ac <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
 80156b4:	4a06      	ldr	r2, [pc, #24]	; (80156d0 <_ZN13ModelListenerC1Ev+0x24>)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	601a      	str	r2, [r3, #0]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2200      	movs	r2, #0
 80156be:	605a      	str	r2, [r3, #4]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	4618      	mov	r0, r3
 80156c4:	370c      	adds	r7, #12
 80156c6:	46bd      	mov	sp, r7
 80156c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	0802a6f8 	.word	0x0802a6f8

080156d4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80156d4:	b480      	push	{r7}
 80156d6:	b083      	sub	sp, #12
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	4a04      	ldr	r2, [pc, #16]	; (80156f0 <_ZN13ModelListenerD1Ev+0x1c>)
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	601a      	str	r2, [r3, #0]
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	4618      	mov	r0, r3
 80156e6:	370c      	adds	r7, #12
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr
 80156f0:	0802a6f8 	.word	0x0802a6f8

080156f4 <_ZN13ModelListenerD0Ev>:
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f7ff ffe9 	bl	80156d4 <_ZN13ModelListenerD1Ev>
 8015702:	2108      	movs	r1, #8
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f012 fe2c 	bl	8028362 <_ZdlPvj>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4618      	mov	r0, r3
 801570e:	3708      	adds	r7, #8
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
 801571e:	bf00      	nop
 8015720:	370c      	adds	r7, #12
 8015722:	46bd      	mov	sp, r7
 8015724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015728:	4770      	bx	lr

0801572a <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 801572a:	b480      	push	{r7}
 801572c:	b083      	sub	sp, #12
 801572e:	af00      	add	r7, sp, #0
 8015730:	6078      	str	r0, [r7, #4]
 8015732:	6039      	str	r1, [r7, #0]
 8015734:	bf00      	nop
 8015736:	370c      	adds	r7, #12
 8015738:	46bd      	mov	sp, r7
 801573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573e:	4770      	bx	lr

08015740 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	4a09      	ldr	r2, [pc, #36]	; (8015770 <_ZN13MainPresenterD1Ev+0x30>)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	601a      	str	r2, [r3, #0]
 801574e:	4a09      	ldr	r2, [pc, #36]	; (8015774 <_ZN13MainPresenterD1Ev+0x34>)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	605a      	str	r2, [r3, #4]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	3304      	adds	r3, #4
 8015758:	4618      	mov	r0, r3
 801575a:	f7ff ffbb 	bl	80156d4 <_ZN13ModelListenerD1Ev>
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	4618      	mov	r0, r3
 8015762:	f7ff ff73 	bl	801564c <_ZN8touchgfx9PresenterD1Ev>
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	4618      	mov	r0, r3
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	0802a6c0 	.word	0x0802a6c0
 8015774:	0802a6e0 	.word	0x0802a6e0

08015778 <_ZThn4_N13MainPresenterD1Ev>:
 8015778:	f1a0 0004 	sub.w	r0, r0, #4
 801577c:	e7e0      	b.n	8015740 <_ZN13MainPresenterD1Ev>
 801577e:	bf00      	nop

08015780 <_ZN13MainPresenterD0Ev>:
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f7ff ffd9 	bl	8015740 <_ZN13MainPresenterD1Ev>
 801578e:	2110      	movs	r1, #16
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f012 fde6 	bl	8028362 <_ZdlPvj>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	4618      	mov	r0, r3
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <_ZThn4_N13MainPresenterD0Ev>:
 80157a0:	f1a0 0004 	sub.w	r0, r0, #4
 80157a4:	e7ec      	b.n	8015780 <_ZN13MainPresenterD0Ev>
	...

080157a8 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	6039      	str	r1, [r7, #0]
    : view(v)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7ff ff69 	bl	801568c <_ZN8touchgfx9PresenterC1Ev>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	3304      	adds	r3, #4
 80157be:	4618      	mov	r0, r3
 80157c0:	f7ff ff74 	bl	80156ac <_ZN13ModelListenerC1Ev>
 80157c4:	4a06      	ldr	r2, [pc, #24]	; (80157e0 <_ZN13MainPresenterC1ER8MainView+0x38>)
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	601a      	str	r2, [r3, #0]
 80157ca:	4a06      	ldr	r2, [pc, #24]	; (80157e4 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	605a      	str	r2, [r3, #4]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	683a      	ldr	r2, [r7, #0]
 80157d4:	60da      	str	r2, [r3, #12]
{
}
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	4618      	mov	r0, r3
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	0802a6c0 	.word	0x0802a6c0
 80157e4:	0802a6e0 	.word	0x0802a6e0

080157e8 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80157e8:	b480      	push	{r7}
 80157ea:	b083      	sub	sp, #12
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
}
 80157f0:	bf00      	nop
 80157f2:	370c      	adds	r7, #12
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr

080157fc <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
}
 8015804:	bf00      	nop
 8015806:	370c      	adds	r7, #12
 8015808:	46bd      	mov	sp, r7
 801580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580e:	4770      	bx	lr

08015810 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	68db      	ldr	r3, [r3, #12]
 801581e:	6839      	ldr	r1, [r7, #0]
 8015820:	4618      	mov	r0, r3
 8015822:	f000 f9e9 	bl	8015bf8 <_ZN8MainView9updateValEPh>
}
 8015826:	bf00      	nop
 8015828:	3708      	adds	r7, #8
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}

0801582e <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 801582e:	f1a0 0004 	sub.w	r0, r0, #4
 8015832:	f7ff bfed 	b.w	8015810 <_ZN13MainPresenter11setNewValueEPh>

08015836 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8015836:	b580      	push	{r7, lr}
 8015838:	b082      	sub	sp, #8
 801583a:	af00      	add	r7, sp, #0
 801583c:	6078      	str	r0, [r7, #4]
 801583e:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	6839      	ldr	r1, [r7, #0]
 8015846:	4618      	mov	r0, r3
 8015848:	f000 f8fa 	bl	8015a40 <_ZN8MainView14updateSettingsEPh>
}
 801584c:	bf00      	nop
 801584e:	3708      	adds	r7, #8
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8015854:	f1a0 0004 	sub.w	r0, r0, #4
 8015858:	f7ff bfed 	b.w	8015836 <_ZN13MainPresenter21updateDisplaySettingsEPh>

0801585c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 801585c:	b580      	push	{r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	460b      	mov	r3, r1
 8015866:	607a      	str	r2, [r7, #4]
 8015868:	ed87 0a00 	vstr	s0, [r7]
 801586c:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 801586e:	463b      	mov	r3, r7
 8015870:	8979      	ldrh	r1, [r7, #10]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	f008 ff61 	bl	801e73c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 801587a:	4603      	mov	r3, r0
    }
 801587c:	4618      	mov	r0, r3
 801587e:	3710      	adds	r7, #16
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}

08015884 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
        return rect.width;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8015892:	4618      	mov	r0, r3
 8015894:	370c      	adds	r7, #12
 8015896:	46bd      	mov	sp, r7
 8015898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589c:	4770      	bx	lr

0801589e <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801589e:	b480      	push	{r7}
 80158a0:	b083      	sub	sp, #12
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
        return rect.height;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80158ac:	4618      	mov	r0, r3
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr

080158b8 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	4a05      	ldr	r2, [pc, #20]	; (80158d8 <_ZN8MainViewD1Ev+0x20>)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	601a      	str	r2, [r3, #0]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7fd f999 	bl	8012c00 <_ZN12MainViewBaseD1Ev>
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	4618      	mov	r0, r3
 80158d2:	3708      	adds	r7, #8
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	0802a728 	.word	0x0802a728

080158dc <_ZN8MainViewD0Ev>:
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f7ff ffe7 	bl	80158b8 <_ZN8MainViewD1Ev>
 80158ea:	f642 0144 	movw	r1, #10308	; 0x2844
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f012 fd37 	bl	8028362 <_ZdlPvj>
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	4618      	mov	r0, r3
 80158f8:	3708      	adds	r7, #8
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
	...

08015900 <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 8015900:	b590      	push	{r4, r7, lr}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	4618      	mov	r0, r3
 801590c:	f7fd fada 	bl	8012ec4 <_ZN12MainViewBaseC1Ev>
 8015910:	4a15      	ldr	r2, [pc, #84]	; (8015968 <_ZN8MainViewC1Ev+0x68>)
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8015916:	4b15      	ldr	r3, [pc, #84]	; (801596c <_ZN8MainViewC1Ev+0x6c>)
 8015918:	881b      	ldrh	r3, [r3, #0]
 801591a:	461c      	mov	r4, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8015922:	4618      	mov	r0, r3
 8015924:	f7ff ffae 	bl	8015884 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015928:	4603      	mov	r3, r0
 801592a:	429c      	cmp	r4, r3
 801592c:	dc0b      	bgt.n	8015946 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 801592e:	4b10      	ldr	r3, [pc, #64]	; (8015970 <_ZN8MainViewC1Ev+0x70>)
 8015930:	881b      	ldrh	r3, [r3, #0]
 8015932:	461c      	mov	r4, r3
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801593a:	4618      	mov	r0, r3
 801593c:	f7ff ffaf 	bl	801589e <_ZNK8touchgfx8Drawable9getHeightEv>
 8015940:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8015942:	429c      	cmp	r4, r3
 8015944:	dd01      	ble.n	801594a <_ZN8MainViewC1Ev+0x4a>
 8015946:	2301      	movs	r3, #1
 8015948:	e000      	b.n	801594c <_ZN8MainViewC1Ev+0x4c>
 801594a:	2300      	movs	r3, #0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d005      	beq.n	801595c <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	3340      	adds	r3, #64	; 0x40
 8015954:	2101      	movs	r1, #1
 8015956:	4618      	mov	r0, r3
 8015958:	f7fc fbb7 	bl	80120ca <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	4618      	mov	r0, r3
 8015960:	370c      	adds	r7, #12
 8015962:	46bd      	mov	sp, r7
 8015964:	bd90      	pop	{r4, r7, pc}
 8015966:	bf00      	nop
 8015968:	0802a728 	.word	0x0802a728
 801596c:	2000bede 	.word	0x2000bede
 8015970:	2000bee0 	.word	0x2000bee0

08015974 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8015974:	b480      	push	{r7}
 8015976:	b083      	sub	sp, #12
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
}
 801597c:	bf00      	nop
 801597e:	370c      	adds	r7, #12
 8015980:	46bd      	mov	sp, r7
 8015982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015986:	4770      	bx	lr

08015988 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8015988:	b480      	push	{r7}
 801598a:	b083      	sub	sp, #12
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
}
 8015990:	bf00      	nop
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr

0801599c <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 80159a2:	2200      	movs	r2, #0
 80159a4:	2100      	movs	r1, #0
 80159a6:	2000      	movs	r0, #0
 80159a8:	f7fd fa62 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80159ac:	4603      	mov	r3, r0
 80159ae:	607b      	str	r3, [r7, #4]
}
 80159b0:	bf00      	nop
 80159b2:	4618      	mov	r0, r3
 80159b4:	3708      	adds	r7, #8
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd80      	pop	{r7, pc}
	...

080159bc <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b084      	sub	sp, #16
 80159c0:	af00      	add	r7, sp, #0

	color_index ++;
 80159c2:	4b1e      	ldr	r3, [pc, #120]	; (8015a3c <_ZL20getColorFromRevLimitv+0x80>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	3301      	adds	r3, #1
 80159c8:	4a1c      	ldr	r2, [pc, #112]	; (8015a3c <_ZL20getColorFromRevLimitv+0x80>)
 80159ca:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 80159cc:	4b1b      	ldr	r3, [pc, #108]	; (8015a3c <_ZL20getColorFromRevLimitv+0x80>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2b02      	cmp	r3, #2
 80159d2:	dd02      	ble.n	80159da <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 80159d4:	4b19      	ldr	r3, [pc, #100]	; (8015a3c <_ZL20getColorFromRevLimitv+0x80>)
 80159d6:	2200      	movs	r2, #0
 80159d8:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 80159da:	2200      	movs	r2, #0
 80159dc:	2100      	movs	r1, #0
 80159de:	20ff      	movs	r0, #255	; 0xff
 80159e0:	f7fd fa46 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80159e4:	4603      	mov	r3, r0
 80159e6:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 80159e8:	2200      	movs	r2, #0
 80159ea:	2100      	movs	r1, #0
 80159ec:	2000      	movs	r0, #0
 80159ee:	f7fd fa3f 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80159f2:	4603      	mov	r3, r0
 80159f4:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 80159f6:	22ff      	movs	r2, #255	; 0xff
 80159f8:	21ff      	movs	r1, #255	; 0xff
 80159fa:	20ff      	movs	r0, #255	; 0xff
 80159fc:	f7fd fa38 	bl	8012e70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015a00:	4603      	mov	r3, r0
 8015a02:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8015a04:	463b      	mov	r3, r7
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7fc fa11 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8015a0c:	4b0b      	ldr	r3, [pc, #44]	; (8015a3c <_ZL20getColorFromRevLimitv+0x80>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d101      	bne.n	8015a18 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8015a18:	4b08      	ldr	r3, [pc, #32]	; (8015a3c <_ZL20getColorFromRevLimitv+0x80>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b01      	cmp	r3, #1
 8015a1e:	d101      	bne.n	8015a24 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8015a24:	4b05      	ldr	r3, [pc, #20]	; (8015a3c <_ZL20getColorFromRevLimitv+0x80>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	2b02      	cmp	r3, #2
 8015a2a:	d101      	bne.n	8015a30 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8015a30:	683b      	ldr	r3, [r7, #0]
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3710      	adds	r7, #16
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}
 8015a3a:	bf00      	nop
 8015a3c:	2000871c 	.word	0x2000871c

08015a40 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b086      	sub	sp, #24
 8015a44:	af02      	add	r7, sp, #8
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	4a66      	ldr	r2, [pc, #408]	; (8015bec <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8015a54:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	6a1b      	ldr	r3, [r3, #32]
 8015a60:	ee07 3a90 	vmov	s15, r3
 8015a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a68:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8015bf0 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8015a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015a74:	ee17 3a90 	vmov	r3, s15
 8015a78:	b21a      	sxth	r2, r3
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	9300      	str	r3, [sp, #0]
 8015a7e:	2300      	movs	r3, #0
 8015a80:	2100      	movs	r1, #0
 8015a82:	f003 f86d 	bl	8018b60 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f007 f893 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	4a55      	ldr	r2, [pc, #340]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015a9e:	2102      	movs	r1, #2
 8015aa0:	f008 fcf2 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f005 f852 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f007 f87e 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f603 3088 	addw	r0, r3, #2952	; 0xb88
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	689b      	ldr	r3, [r3, #8]
 8015ac6:	4a4b      	ldr	r2, [pc, #300]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015ac8:	2102      	movs	r1, #2
 8015aca:	f008 fcdd 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f005 f83d 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f007 f869 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	68db      	ldr	r3, [r3, #12]
 8015af0:	4a40      	ldr	r2, [pc, #256]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015af2:	2102      	movs	r1, #2
 8015af4:	f008 fcc8 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8015afe:	4618      	mov	r0, r3
 8015b00:	f005 f828 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f007 f854 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	691b      	ldr	r3, [r3, #16]
 8015b1a:	4a36      	ldr	r2, [pc, #216]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015b1c:	2102      	movs	r1, #2
 8015b1e:	f008 fcb3 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f005 f813 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8015b34:	4618      	mov	r0, r3
 8015b36:	f007 f83f 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	695b      	ldr	r3, [r3, #20]
 8015b44:	4a2b      	ldr	r2, [pc, #172]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015b46:	2102      	movs	r1, #2
 8015b48:	f008 fc9e 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015b52:	4618      	mov	r0, r3
 8015b54:	f004 fffe 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f007 f82a 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	699b      	ldr	r3, [r3, #24]
 8015b6e:	4a21      	ldr	r2, [pc, #132]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015b70:	2102      	movs	r1, #2
 8015b72:	f008 fc89 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f004 ffe9 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f007 f815 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f603 309c 	addw	r0, r3, #2972	; 0xb9c
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	69db      	ldr	r3, [r3, #28]
 8015b98:	4a16      	ldr	r2, [pc, #88]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015b9a:	2102      	movs	r1, #2
 8015b9c:	f008 fc74 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f004 ffd4 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f007 f800 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f503 603a 	add.w	r0, r3, #2976	; 0xba0
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	6a1b      	ldr	r3, [r3, #32]
 8015bc2:	4a0c      	ldr	r2, [pc, #48]	; (8015bf4 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015bc4:	2102      	movs	r1, #2
 8015bc6:	f008 fc5f 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f004 ffbf 	bl	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f006 ffeb 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015be2:	bf00      	nop
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}
 8015bea:	bf00      	nop
 8015bec:	20000038 	.word	0x20000038
 8015bf0:	447a0000 	.word	0x447a0000
 8015bf4:	08029a34 	.word	0x08029a34

08015bf8 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8015bf8:	b590      	push	{r4, r7, lr}
 8015bfa:	b085      	sub	sp, #20
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	681a      	ldr	r2, [r3, #0]
 8015c0a:	4b0e      	ldr	r3, [pc, #56]	; (8015c44 <_ZN8MainView9updateValEPh+0x4c>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	bfac      	ite	ge
 8015c12:	2301      	movge	r3, #1
 8015c14:	2300      	movlt	r3, #0
 8015c16:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8015c18:	7afb      	ldrb	r3, [r7, #11]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d016      	beq.n	8015c4c <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 8015c1e:	4b0a      	ldr	r3, [pc, #40]	; (8015c48 <_ZN8MainView9updateValEPh+0x50>)
 8015c20:	2200      	movs	r2, #0
 8015c22:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015c2a:	f7ff fec7 	bl	80159bc <_ZL20getColorFromRevLimitv>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	4619      	mov	r1, r3
 8015c32:	4620      	mov	r0, r4
 8015c34:	f7fc fc0a 	bl	801244c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	3340      	adds	r3, #64	; 0x40
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f006 ffbb 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015c42:	e01c      	b.n	8015c7e <_ZN8MainView9updateValEPh+0x86>
 8015c44:	20000038 	.word	0x20000038
 8015c48:	20008740 	.word	0x20008740
	}
	else if(!background_is_black){
 8015c4c:	4bac      	ldr	r3, [pc, #688]	; (8015f00 <_ZN8MainView9updateValEPh+0x308>)
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	f083 0301 	eor.w	r3, r3, #1
 8015c54:	b2db      	uxtb	r3, r3
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d011      	beq.n	8015c7e <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015c60:	f7ff fe9c 	bl	801599c <_ZL13getBlackColorv>
 8015c64:	4603      	mov	r3, r0
 8015c66:	4619      	mov	r1, r3
 8015c68:	4620      	mov	r0, r4
 8015c6a:	f7fc fbef 	bl	801244c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	3340      	adds	r3, #64	; 0x40
 8015c72:	4618      	mov	r0, r3
 8015c74:	f006 ffa0 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8015c78:	4ba1      	ldr	r3, [pc, #644]	; (8015f00 <_ZN8MainView9updateValEPh+0x308>)
 8015c7a:	2201      	movs	r2, #1
 8015c7c:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681a      	ldr	r2, [r3, #0]
 8015c82:	4ba0      	ldr	r3, [pc, #640]	; (8015f04 <_ZN8MainView9updateValEPh+0x30c>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d021      	beq.n	8015cce <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	4a9d      	ldr	r2, [pc, #628]	; (8015f04 <_ZN8MainView9updateValEPh+0x30c>)
 8015c90:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	4610      	mov	r0, r2
 8015ca0:	f002 fe48 	bl	8018934 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015caa:	4618      	mov	r0, r3
 8015cac:	f006 ff84 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f603 30d6 	addw	r0, r3, #3030	; 0xbd6
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	4a93      	ldr	r2, [pc, #588]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015cbc:	2105      	movs	r1, #5
 8015cbe:	f008 fbe3 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f006 ff75 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->map != prev_map) {
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	689a      	ldr	r2, [r3, #8]
 8015cd2:	4b8e      	ldr	r3, [pc, #568]	; (8015f0c <_ZN8MainView9updateValEPh+0x314>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d012      	beq.n	8015d00 <_ZN8MainView9updateValEPh+0x108>
		prev_map = values->map;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	689b      	ldr	r3, [r3, #8]
 8015cde:	4a8b      	ldr	r2, [pc, #556]	; (8015f0c <_ZN8MainView9updateValEPh+0x314>)
 8015ce0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f603 30ea 	addw	r0, r3, #3050	; 0xbea
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	689b      	ldr	r3, [r3, #8]
 8015cec:	4a86      	ldr	r2, [pc, #536]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015cee:	2105      	movs	r1, #5
 8015cf0:	f008 fbca 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f006 ff5c 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	685a      	ldr	r2, [r3, #4]
 8015d04:	4b82      	ldr	r3, [pc, #520]	; (8015f10 <_ZN8MainView9updateValEPh+0x318>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d012      	beq.n	8015d32 <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	4a7f      	ldr	r2, [pc, #508]	; (8015f10 <_ZN8MainView9updateValEPh+0x318>)
 8015d12:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	4a7a      	ldr	r2, [pc, #488]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015d20:	2105      	movs	r1, #5
 8015d22:	f008 fbb1 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f006 ff43 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	ed93 7a03 	vldr	s14, [r3, #12]
 8015d38:	4b76      	ldr	r3, [pc, #472]	; (8015f14 <_ZN8MainView9updateValEPh+0x31c>)
 8015d3a:	edd3 7a00 	vldr	s15, [r3]
 8015d3e:	eeb4 7a67 	vcmp.f32	s14, s15
 8015d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d46:	d015      	beq.n	8015d74 <_ZN8MainView9updateValEPh+0x17c>
		prev_lambda = values->lambda;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	68db      	ldr	r3, [r3, #12]
 8015d4c:	4a71      	ldr	r2, [pc, #452]	; (8015f14 <_ZN8MainView9updateValEPh+0x31c>)
 8015d4e:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8015d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8015d60:	4a6d      	ldr	r2, [pc, #436]	; (8015f18 <_ZN8MainView9updateValEPh+0x320>)
 8015d62:	2105      	movs	r1, #5
 8015d64:	f7ff fd7a 	bl	801585c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f006 ff22 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda_trgt != prev_lambda_targ) {
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	ed93 7a04 	vldr	s14, [r3, #16]
 8015d7a:	4b68      	ldr	r3, [pc, #416]	; (8015f1c <_ZN8MainView9updateValEPh+0x324>)
 8015d7c:	edd3 7a00 	vldr	s15, [r3]
 8015d80:	eeb4 7a67 	vcmp.f32	s14, s15
 8015d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d88:	d015      	beq.n	8015db6 <_ZN8MainView9updateValEPh+0x1be>
		prev_lambda_targ = values->lambda_trgt;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	691b      	ldr	r3, [r3, #16]
 8015d8e:	4a63      	ldr	r2, [pc, #396]	; (8015f1c <_ZN8MainView9updateValEPh+0x324>)
 8015d90:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f603 307a 	addw	r0, r3, #2938	; 0xb7a
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8015d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8015da2:	4a5d      	ldr	r2, [pc, #372]	; (8015f18 <_ZN8MainView9updateValEPh+0x320>)
 8015da4:	2105      	movs	r1, #5
 8015da6:	f7ff fd59 	bl	801585c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TrgtValue.invalidate();
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015db0:	4618      	mov	r0, r3
 8015db2:	f006 ff01 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	ed93 7a06 	vldr	s14, [r3, #24]
 8015dbc:	4b58      	ldr	r3, [pc, #352]	; (8015f20 <_ZN8MainView9updateValEPh+0x328>)
 8015dbe:	edd3 7a00 	vldr	s15, [r3]
 8015dc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8015dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dca:	d015      	beq.n	8015df8 <_ZN8MainView9updateValEPh+0x200>
		prev_oil_press = values->oil_press;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	699b      	ldr	r3, [r3, #24]
 8015dd0:	4a53      	ldr	r2, [pc, #332]	; (8015f20 <_ZN8MainView9updateValEPh+0x328>)
 8015dd2:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f603 30c2 	addw	r0, r3, #3010	; 0xbc2
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	edd3 7a06 	vldr	s15, [r3, #24]
 8015de0:	eeb0 0a67 	vmov.f32	s0, s15
 8015de4:	4a4f      	ldr	r2, [pc, #316]	; (8015f24 <_ZN8MainView9updateValEPh+0x32c>)
 8015de6:	2105      	movs	r1, #5
 8015de8:	f7ff fd38 	bl	801585c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8015df2:	4618      	mov	r0, r3
 8015df4:	f006 fee0 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	69da      	ldr	r2, [r3, #28]
 8015dfc:	4b4a      	ldr	r3, [pc, #296]	; (8015f28 <_ZN8MainView9updateValEPh+0x330>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d012      	beq.n	8015e2a <_ZN8MainView9updateValEPh+0x232>
		prev_fuel_press = values->fuel_press;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	69db      	ldr	r3, [r3, #28]
 8015e08:	4a47      	ldr	r2, [pc, #284]	; (8015f28 <_ZN8MainView9updateValEPh+0x330>)
 8015e0a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f603 30fe 	addw	r0, r3, #3070	; 0xbfe
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	69db      	ldr	r3, [r3, #28]
 8015e16:	4a3c      	ldr	r2, [pc, #240]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015e18:	2105      	movs	r1, #5
 8015e1a:	f008 fb35 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8015e24:	4618      	mov	r0, r3
 8015e26:	f006 fec7 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	695a      	ldr	r2, [r3, #20]
 8015e2e:	4b3f      	ldr	r3, [pc, #252]	; (8015f2c <_ZN8MainView9updateValEPh+0x334>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d012      	beq.n	8015e5c <_ZN8MainView9updateValEPh+0x264>
		prev_oil_tmp = values->oil_tmp;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	695b      	ldr	r3, [r3, #20]
 8015e3a:	4a3c      	ldr	r2, [pc, #240]	; (8015f2c <_ZN8MainView9updateValEPh+0x334>)
 8015e3c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f603 30b8 	addw	r0, r3, #3000	; 0xbb8
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	695b      	ldr	r3, [r3, #20]
 8015e48:	4a2f      	ldr	r2, [pc, #188]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015e4a:	2105      	movs	r1, #5
 8015e4c:	f008 fb1c 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8015e56:	4618      	mov	r0, r3
 8015e58:	f006 feae 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	6a1a      	ldr	r2, [r3, #32]
 8015e60:	4b33      	ldr	r3, [pc, #204]	; (8015f30 <_ZN8MainView9updateValEPh+0x338>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d012      	beq.n	8015e8e <_ZN8MainView9updateValEPh+0x296>
		prev_iat = values->iat;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	6a1b      	ldr	r3, [r3, #32]
 8015e6c:	4a30      	ldr	r2, [pc, #192]	; (8015f30 <_ZN8MainView9updateValEPh+0x338>)
 8015e6e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f603 30a4 	addw	r0, r3, #2980	; 0xba4
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	6a1b      	ldr	r3, [r3, #32]
 8015e7a:	4a23      	ldr	r2, [pc, #140]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015e7c:	2105      	movs	r1, #5
 8015e7e:	f008 fb03 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f006 fe95 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt != prev_egt) {
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e92:	4b28      	ldr	r3, [pc, #160]	; (8015f34 <_ZN8MainView9updateValEPh+0x33c>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d012      	beq.n	8015ec0 <_ZN8MainView9updateValEPh+0x2c8>
		prev_egt = values->egt;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e9e:	4a25      	ldr	r2, [pc, #148]	; (8015f34 <_ZN8MainView9updateValEPh+0x33c>)
 8015ea0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f603 30ae 	addw	r0, r3, #2990	; 0xbae
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eac:	4a16      	ldr	r2, [pc, #88]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015eae:	2105      	movs	r1, #5
 8015eb0:	f008 faea 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f006 fe7c 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt_2 != prev_egt_2) {
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015ec4:	4b1c      	ldr	r3, [pc, #112]	; (8015f38 <_ZN8MainView9updateValEPh+0x340>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	d012      	beq.n	8015ef2 <_ZN8MainView9updateValEPh+0x2fa>
		prev_egt_2 = values->egt_2;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ed0:	4a19      	ldr	r2, [pc, #100]	; (8015f38 <_ZN8MainView9updateValEPh+0x340>)
 8015ed2:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d",values->egt_2);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ede:	4a0a      	ldr	r2, [pc, #40]	; (8015f08 <_ZN8MainView9updateValEPh+0x310>)
 8015ee0:	2105      	movs	r1, #5
 8015ee2:	f008 fad1 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8015eec:	4618      	mov	r0, r3
 8015eee:	f006 fe63 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ef6:	4b11      	ldr	r3, [pc, #68]	; (8015f3c <_ZN8MainView9updateValEPh+0x344>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d042      	beq.n	8015f84 <_ZN8MainView9updateValEPh+0x38c>
 8015efe:	e01f      	b.n	8015f40 <_ZN8MainView9updateValEPh+0x348>
 8015f00:	20008740 	.word	0x20008740
 8015f04:	2000003c 	.word	0x2000003c
 8015f08:	08029a34 	.word	0x08029a34
 8015f0c:	20000040 	.word	0x20000040
 8015f10:	20000044 	.word	0x20000044
 8015f14:	20000048 	.word	0x20000048
 8015f18:	08029a38 	.word	0x08029a38
 8015f1c:	2000004c 	.word	0x2000004c
 8015f20:	20008724 	.word	0x20008724
 8015f24:	08029a40 	.word	0x08029a40
 8015f28:	20008728 	.word	0x20008728
 8015f2c:	20008720 	.word	0x20008720
 8015f30:	2000872c 	.word	0x2000872c
 8015f34:	20008730 	.word	0x20008730
 8015f38:	20008734 	.word	0x20008734
 8015f3c:	20008738 	.word	0x20008738
		prev_tps = values->tps;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f44:	4a22      	ldr	r2, [pc, #136]	; (8015fd0 <_ZN8MainView9updateValEPh+0x3d8>)
 8015f46:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f52:	4619      	mov	r1, r3
 8015f54:	4610      	mov	r0, r2
 8015f56:	f002 fb9d 	bl	8018694 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015f60:	4618      	mov	r0, r3
 8015f62:	f006 fe29 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f70:	4a18      	ldr	r2, [pc, #96]	; (8015fd4 <_ZN8MainView9updateValEPh+0x3dc>)
 8015f72:	2105      	movs	r1, #5
 8015f74:	f008 fa88 	bl	801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f006 fe1a 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8015f8a:	4b13      	ldr	r3, [pc, #76]	; (8015fd8 <_ZN8MainView9updateValEPh+0x3e0>)
 8015f8c:	edd3 7a00 	vldr	s15, [r3]
 8015f90:	eeb4 7a67 	vcmp.f32	s14, s15
 8015f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f98:	d015      	beq.n	8015fc6 <_ZN8MainView9updateValEPh+0x3ce>
		prev_batt_v = values->batt_v;
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f9e:	4a0e      	ldr	r2, [pc, #56]	; (8015fd8 <_ZN8MainView9updateValEPh+0x3e0>)
 8015fa0:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f603 30cc 	addw	r0, r3, #3020	; 0xbcc
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015fae:	eeb0 0a67 	vmov.f32	s0, s15
 8015fb2:	4a0a      	ldr	r2, [pc, #40]	; (8015fdc <_ZN8MainView9updateValEPh+0x3e4>)
 8015fb4:	2105      	movs	r1, #5
 8015fb6:	f7ff fc51 	bl	801585c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f006 fdf9 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 8015fc6:	bf00      	nop
 8015fc8:	3714      	adds	r7, #20
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd90      	pop	{r4, r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	20008738 	.word	0x20008738
 8015fd4:	08029a34 	.word	0x08029a34
 8015fd8:	2000873c 	.word	0x2000873c
 8015fdc:	08029a38 	.word	0x08029a38

08015fe0 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2200      	movs	r2, #0
 8015fec:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8015fee:	2200      	movs	r2, #0
 8015ff0:	2134      	movs	r1, #52	; 0x34
 8015ff2:	2001      	movs	r0, #1
 8015ff4:	f7f7 f965 	bl	800d2c2 <xQueueGenericCreate>
 8015ff8:	4602      	mov	r2, r0
 8015ffa:	4b07      	ldr	r3, [pc, #28]	; (8016018 <_ZN5ModelC1Ev+0x38>)
 8015ffc:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8015ffe:	2200      	movs	r2, #0
 8016000:	2128      	movs	r1, #40	; 0x28
 8016002:	2001      	movs	r0, #1
 8016004:	f7f7 f95d 	bl	800d2c2 <xQueueGenericCreate>
 8016008:	4602      	mov	r2, r0
 801600a:	4b04      	ldr	r3, [pc, #16]	; (801601c <_ZN5ModelC1Ev+0x3c>)
 801600c:	601a      	str	r2, [r3, #0]
}
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	4618      	mov	r0, r3
 8016012:	3708      	adds	r7, #8
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}
 8016018:	200087a0 	.word	0x200087a0
 801601c:	200087a4 	.word	0x200087a4

08016020 <_ZN5Model4tickEv>:

void Model::tick()
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8016028:	4b1a      	ldr	r3, [pc, #104]	; (8016094 <_ZN5Model4tickEv+0x74>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	2200      	movs	r2, #0
 801602e:	491a      	ldr	r1, [pc, #104]	; (8016098 <_ZN5Model4tickEv+0x78>)
 8016030:	4618      	mov	r0, r3
 8016032:	f7f7 fbd7 	bl	800d7e4 <xQueueReceive>
 8016036:	4603      	mov	r3, r0
 8016038:	2b01      	cmp	r3, #1
 801603a:	bf0c      	ite	eq
 801603c:	2301      	moveq	r3, #1
 801603e:	2300      	movne	r3, #0
 8016040:	b2db      	uxtb	r3, r3
 8016042:	2b00      	cmp	r3, #0
 8016044:	d009      	beq.n	801605a <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681a      	ldr	r2, [r3, #0]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	3308      	adds	r3, #8
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	4910      	ldr	r1, [pc, #64]	; (8016098 <_ZN5Model4tickEv+0x78>)
 8016056:	4610      	mov	r0, r2
 8016058:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 801605a:	4b10      	ldr	r3, [pc, #64]	; (801609c <_ZN5Model4tickEv+0x7c>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	2200      	movs	r2, #0
 8016060:	490f      	ldr	r1, [pc, #60]	; (80160a0 <_ZN5Model4tickEv+0x80>)
 8016062:	4618      	mov	r0, r3
 8016064:	f7f7 fbbe 	bl	800d7e4 <xQueueReceive>
 8016068:	4603      	mov	r3, r0
 801606a:	2b01      	cmp	r3, #1
 801606c:	bf0c      	ite	eq
 801606e:	2301      	moveq	r3, #1
 8016070:	2300      	movne	r3, #0
 8016072:	b2db      	uxtb	r3, r3
 8016074:	2b00      	cmp	r3, #0
 8016076:	d009      	beq.n	801608c <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	330c      	adds	r3, #12
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	4906      	ldr	r1, [pc, #24]	; (80160a0 <_ZN5Model4tickEv+0x80>)
 8016088:	4610      	mov	r0, r2
 801608a:	4798      	blx	r3
	}
}
 801608c:	bf00      	nop
 801608e:	3708      	adds	r7, #8
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	200087a0 	.word	0x200087a0
 8016098:	20008744 	.word	0x20008744
 801609c:	200087a4 	.word	0x200087a4
 80160a0:	20008778 	.word	0x20008778

080160a4 <_ZN21SecondScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~SecondScreenPresenter() {};
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	4a09      	ldr	r2, [pc, #36]	; (80160d4 <_ZN21SecondScreenPresenterD1Ev+0x30>)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	601a      	str	r2, [r3, #0]
 80160b2:	4a09      	ldr	r2, [pc, #36]	; (80160d8 <_ZN21SecondScreenPresenterD1Ev+0x34>)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	605a      	str	r2, [r3, #4]
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	3304      	adds	r3, #4
 80160bc:	4618      	mov	r0, r3
 80160be:	f7ff fb09 	bl	80156d4 <_ZN13ModelListenerD1Ev>
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7ff fac1 	bl	801564c <_ZN8touchgfx9PresenterD1Ev>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	4618      	mov	r0, r3
 80160ce:	3708      	adds	r7, #8
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	0802a75c 	.word	0x0802a75c
 80160d8:	0802a774 	.word	0x0802a774

080160dc <_ZThn4_N21SecondScreenPresenterD1Ev>:
 80160dc:	f1a0 0004 	sub.w	r0, r0, #4
 80160e0:	e7e0      	b.n	80160a4 <_ZN21SecondScreenPresenterD1Ev>
 80160e2:	bf00      	nop

080160e4 <_ZN21SecondScreenPresenterD0Ev>:
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7ff ffd9 	bl	80160a4 <_ZN21SecondScreenPresenterD1Ev>
 80160f2:	2110      	movs	r1, #16
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f012 f934 	bl	8028362 <_ZdlPvj>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	3708      	adds	r7, #8
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}

08016104 <_ZThn4_N21SecondScreenPresenterD0Ev>:
 8016104:	f1a0 0004 	sub.w	r0, r0, #4
 8016108:	e7ec      	b.n	80160e4 <_ZN21SecondScreenPresenterD0Ev>
	...

0801610c <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 801610c:	b580      	push	{r7, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
 8016114:	6039      	str	r1, [r7, #0]
    : view(v)
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	4618      	mov	r0, r3
 801611a:	f7ff fab7 	bl	801568c <_ZN8touchgfx9PresenterC1Ev>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	3304      	adds	r3, #4
 8016122:	4618      	mov	r0, r3
 8016124:	f7ff fac2 	bl	80156ac <_ZN13ModelListenerC1Ev>
 8016128:	4a06      	ldr	r2, [pc, #24]	; (8016144 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	601a      	str	r2, [r3, #0]
 801612e:	4a06      	ldr	r2, [pc, #24]	; (8016148 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	605a      	str	r2, [r3, #4]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	683a      	ldr	r2, [r7, #0]
 8016138:	60da      	str	r2, [r3, #12]
{

}
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	4618      	mov	r0, r3
 801613e:	3708      	adds	r7, #8
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}
 8016144:	0802a75c 	.word	0x0802a75c
 8016148:	0802a774 	.word	0x0802a774

0801614c <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]

}
 8016154:	bf00      	nop
 8016156:	370c      	adds	r7, #12
 8016158:	46bd      	mov	sp, r7
 801615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615e:	4770      	bx	lr

08016160 <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 8016160:	b480      	push	{r7}
 8016162:	b083      	sub	sp, #12
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]

}
 8016168:	bf00      	nop
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr

08016174 <_ZN16SecondScreenViewD1Ev>:

class SecondScreenView : public SecondScreenViewBase
{
public:
    SecondScreenView();
    virtual ~SecondScreenView() {}
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	4a05      	ldr	r2, [pc, #20]	; (8016194 <_ZN16SecondScreenViewD1Ev+0x20>)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	601a      	str	r2, [r3, #0]
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	4618      	mov	r0, r3
 8016186:	f7fe fe7b 	bl	8014e80 <_ZN20SecondScreenViewBaseD1Ev>
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	4618      	mov	r0, r3
 801618e:	3708      	adds	r7, #8
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	0802a78c 	.word	0x0802a78c

08016198 <_ZN16SecondScreenViewD0Ev>:
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f7ff ffe7 	bl	8016174 <_ZN16SecondScreenViewD1Ev>
 80161a6:	21f8      	movs	r1, #248	; 0xf8
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f012 f8da 	bl	8028362 <_ZdlPvj>
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	4618      	mov	r0, r3
 80161b2:	3708      	adds	r7, #8
 80161b4:	46bd      	mov	sp, r7
 80161b6:	bd80      	pop	{r7, pc}

080161b8 <_ZN16SecondScreenViewC1Ev>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>

SecondScreenView::SecondScreenView()
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	4618      	mov	r0, r3
 80161c4:	f7fe fe9a 	bl	8014efc <_ZN20SecondScreenViewBaseC1Ev>
 80161c8:	4a03      	ldr	r2, [pc, #12]	; (80161d8 <_ZN16SecondScreenViewC1Ev+0x20>)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	601a      	str	r2, [r3, #0]
{

}
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	4618      	mov	r0, r3
 80161d2:	3708      	adds	r7, #8
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	0802a78c 	.word	0x0802a78c

080161dc <_ZN16SecondScreenView11setupScreenEv>:

void SecondScreenView::setupScreen()
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b082      	sub	sp, #8
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::setupScreen();
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7fe ff2a 	bl	8015040 <_ZN20SecondScreenViewBase11setupScreenEv>
}
 80161ec:	bf00      	nop
 80161ee:	3708      	adds	r7, #8
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}

080161f4 <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen()
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::tearDownScreen();
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	4618      	mov	r0, r3
 8016200:	f7fc f85a 	bl	80122b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8016204:	bf00      	nop
 8016206:	3708      	adds	r7, #8
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 801620c:	b480      	push	{r7}
 801620e:	b083      	sub	sp, #12
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
    {
 8016214:	4a04      	ldr	r2, [pc, #16]	; (8016228 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	601a      	str	r2, [r3, #0]
    }
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	4618      	mov	r0, r3
 801621e:	370c      	adds	r7, #12
 8016220:	46bd      	mov	sp, r7
 8016222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016226:	4770      	bx	lr
 8016228:	0802a7d8 	.word	0x0802a7d8

0801622c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 801622c:	b580      	push	{r7, lr}
 801622e:	b082      	sub	sp, #8
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
    }
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f7ff ffe9 	bl	801620c <_ZN8touchgfx15TouchControllerD1Ev>
 801623a:	2104      	movs	r1, #4
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f012 f890 	bl	8028362 <_ZdlPvj>
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	4618      	mov	r0, r3
 8016246:	3708      	adds	r7, #8
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}

0801624c <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 8016254:	f44f 7188 	mov.w	r1, #272	; 0x110
 8016258:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 801625c:	f7f9 fc76 	bl	800fb4c <BSP_TS_Init>
}
 8016260:	bf00      	nop
 8016262:	3708      	adds	r7, #8
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b090      	sub	sp, #64	; 0x40
 801626c:	af00      	add	r7, sp, #0
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 8016274:	f107 0314 	add.w	r3, r7, #20
 8016278:	222c      	movs	r2, #44	; 0x2c
 801627a:	2100      	movs	r1, #0
 801627c:	4618      	mov	r0, r3
 801627e:	f012 f924 	bl	80284ca <memset>
	    BSP_TS_GetState(&state);
 8016282:	f107 0314 	add.w	r3, r7, #20
 8016286:	4618      	mov	r0, r3
 8016288:	f7f9 fca0 	bl	800fbcc <BSP_TS_GetState>
	    if (state.touchDetected)
 801628c:	7d3b      	ldrb	r3, [r7, #20]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d009      	beq.n	80162a6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 8016292:	8afb      	ldrh	r3, [r7, #22]
 8016294:	461a      	mov	r2, r3
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 801629a:	8c3b      	ldrh	r3, [r7, #32]
 801629c:	461a      	mov	r2, r3
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	601a      	str	r2, [r3, #0]

	        return true;
 80162a2:	2301      	movs	r3, #1
 80162a4:	e000      	b.n	80162a8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 80162a6:	2300      	movs	r3, #0
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3740      	adds	r7, #64	; 0x40
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b082      	sub	sp, #8
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	4a05      	ldr	r2, [pc, #20]	; (80162d0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	601a      	str	r2, [r3, #0]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	4618      	mov	r0, r3
 80162c2:	f7ff ffa3 	bl	801620c <_ZN8touchgfx15TouchControllerD1Ev>
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	4618      	mov	r0, r3
 80162ca:	3708      	adds	r7, #8
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}
 80162d0:	0802a7c0 	.word	0x0802a7c0

080162d4 <_ZN20STM32TouchControllerD0Ev>:
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b082      	sub	sp, #8
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f7ff ffe7 	bl	80162b0 <_ZN20STM32TouchControllerD1Ev>
 80162e2:	2104      	movs	r1, #4
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f012 f83c 	bl	8028362 <_ZdlPvj>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	4618      	mov	r0, r3
 80162ee:	3708      	adds	r7, #8
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80162f4:	b480      	push	{r7}
 80162f6:	b083      	sub	sp, #12
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	4603      	mov	r3, r0
 80162fc:	71fb      	strb	r3, [r7, #7]

}
 80162fe:	bf00      	nop
 8016300:	370c      	adds	r7, #12
 8016302:	46bd      	mov	sp, r7
 8016304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016308:	4770      	bx	lr

0801630a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801630a:	b480      	push	{r7}
 801630c:	b083      	sub	sp, #12
 801630e:	af00      	add	r7, sp, #0
 8016310:	4603      	mov	r3, r0
 8016312:	71fb      	strb	r3, [r7, #7]

}
 8016314:	bf00      	nop
 8016316:	370c      	adds	r7, #12
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr

08016320 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	4603      	mov	r3, r0
 8016328:	71fb      	strb	r3, [r7, #7]

}
 801632a:	bf00      	nop
 801632c:	370c      	adds	r7, #12
 801632e:	46bd      	mov	sp, r7
 8016330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016334:	4770      	bx	lr
	...

08016338 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8016338:	b480      	push	{r7}
 801633a:	b083      	sub	sp, #12
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
    {
 8016340:	4a04      	ldr	r2, [pc, #16]	; (8016354 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	601a      	str	r2, [r3, #0]
    }
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	4618      	mov	r0, r3
 801634a:	370c      	adds	r7, #12
 801634c:	46bd      	mov	sp, r7
 801634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016352:	4770      	bx	lr
 8016354:	0802b590 	.word	0x0802b590

08016358 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
    }
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f7ff ffe9 	bl	8016338 <_ZN8touchgfx3HALD1Ev>
 8016366:	2178      	movs	r1, #120	; 0x78
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f011 fffa 	bl	8028362 <_ZdlPvj>
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	4618      	mov	r0, r3
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8016378:	b480      	push	{r7}
 801637a:	b083      	sub	sp, #12
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	460b      	mov	r3, r1
 8016382:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	78fa      	ldrb	r2, [r7, #3]
 8016388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2201      	movs	r2, #1
 8016390:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8016394:	bf00      	nop
 8016396:	370c      	adds	r7, #12
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr

080163a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	685a      	ldr	r2, [r3, #4]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	4610      	mov	r0, r2
 80163b6:	4798      	blx	r3
 80163b8:	4603      	mov	r3, r0
    }
 80163ba:	4618      	mov	r0, r3
 80163bc:	3708      	adds	r7, #8
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}

080163c2 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 80163c2:	b580      	push	{r7, lr}
 80163c4:	b082      	sub	sp, #8
 80163c6:	af00      	add	r7, sp, #0
 80163c8:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f003 fbbc 	bl	8019b48 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	3390      	adds	r3, #144	; 0x90
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	4798      	blx	r3
    }
 80163dc:	bf00      	nop
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}

080163e4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80163e4:	b480      	push	{r7}
 80163e6:	b083      	sub	sp, #12
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
    {
        return false;
 80163ee:	2300      	movs	r3, #0
    }
 80163f0:	4618      	mov	r0, r3
 80163f2:	370c      	adds	r7, #12
 80163f4:	46bd      	mov	sp, r7
 80163f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fa:	4770      	bx	lr

080163fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80163fc:	b590      	push	{r4, r7, lr}
 80163fe:	b08b      	sub	sp, #44	; 0x2c
 8016400:	af00      	add	r7, sp, #0
 8016402:	60f8      	str	r0, [r7, #12]
 8016404:	60b9      	str	r1, [r7, #8]
 8016406:	4611      	mov	r1, r2
 8016408:	461a      	mov	r2, r3
 801640a:	460b      	mov	r3, r1
 801640c:	80fb      	strh	r3, [r7, #6]
 801640e:	4613      	mov	r3, r2
 8016410:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8016412:	f7fa fb8d 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8016416:	4602      	mov	r2, r0
 8016418:	6813      	ldr	r3, [r2, #0]
 801641a:	3328      	adds	r3, #40	; 0x28
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	4610      	mov	r0, r2
 8016420:	4798      	blx	r3
 8016422:	4603      	mov	r3, r0
 8016424:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8016426:	8b7b      	ldrh	r3, [r7, #26]
 8016428:	4a3d      	ldr	r2, [pc, #244]	; (8016520 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 801642a:	8812      	ldrh	r2, [r2, #0]
 801642c:	fb02 f303 	mul.w	r3, r2, r3
 8016430:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8016436:	2300      	movs	r3, #0
 8016438:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 801643a:	2300      	movs	r3, #0
 801643c:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 801643e:	797b      	ldrb	r3, [r7, #5]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d005      	beq.n	8016450 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8016444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	4413      	add	r3, r2
 801644a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 801644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801644e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8016450:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016454:	2b00      	cmp	r3, #0
 8016456:	d005      	beq.n	8016464 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8016458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	4413      	add	r3, r2
 801645e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8016460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016462:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8016464:	88fb      	ldrh	r3, [r7, #6]
 8016466:	3b01      	subs	r3, #1
 8016468:	2b1f      	cmp	r3, #31
 801646a:	d84d      	bhi.n	8016508 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 801646c:	a201      	add	r2, pc, #4	; (adr r2, 8016474 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016472:	bf00      	nop
 8016474:	080164f5 	.word	0x080164f5
 8016478:	080164f5 	.word	0x080164f5
 801647c:	08016509 	.word	0x08016509
 8016480:	080164f5 	.word	0x080164f5
 8016484:	08016509 	.word	0x08016509
 8016488:	08016509 	.word	0x08016509
 801648c:	08016509 	.word	0x08016509
 8016490:	080164f5 	.word	0x080164f5
 8016494:	08016509 	.word	0x08016509
 8016498:	08016509 	.word	0x08016509
 801649c:	08016509 	.word	0x08016509
 80164a0:	08016509 	.word	0x08016509
 80164a4:	08016509 	.word	0x08016509
 80164a8:	08016509 	.word	0x08016509
 80164ac:	08016509 	.word	0x08016509
 80164b0:	080164f5 	.word	0x080164f5
 80164b4:	08016509 	.word	0x08016509
 80164b8:	08016509 	.word	0x08016509
 80164bc:	08016509 	.word	0x08016509
 80164c0:	08016509 	.word	0x08016509
 80164c4:	08016509 	.word	0x08016509
 80164c8:	08016509 	.word	0x08016509
 80164cc:	08016509 	.word	0x08016509
 80164d0:	080164f5 	.word	0x080164f5
 80164d4:	08016509 	.word	0x08016509
 80164d8:	08016509 	.word	0x08016509
 80164dc:	08016509 	.word	0x08016509
 80164e0:	08016509 	.word	0x08016509
 80164e4:	08016509 	.word	0x08016509
 80164e8:	08016509 	.word	0x08016509
 80164ec:	08016509 	.word	0x08016509
 80164f0:	080164f5 	.word	0x080164f5
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	3374      	adds	r3, #116	; 0x74
 80164fa:	681c      	ldr	r4, [r3, #0]
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	6a3a      	ldr	r2, [r7, #32]
 8016500:	68b9      	ldr	r1, [r7, #8]
 8016502:	68f8      	ldr	r0, [r7, #12]
 8016504:	47a0      	blx	r4
            break;
 8016506:	e006      	b.n	8016516 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8016508:	4b06      	ldr	r3, [pc, #24]	; (8016524 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 801650a:	4a07      	ldr	r2, [pc, #28]	; (8016528 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 801650c:	f240 3125 	movw	r1, #805	; 0x325
 8016510:	4806      	ldr	r0, [pc, #24]	; (801652c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8016512:	f011 ff51 	bl	80283b8 <__assert_func>
            break;
        }
    }
 8016516:	bf00      	nop
 8016518:	372c      	adds	r7, #44	; 0x2c
 801651a:	46bd      	mov	sp, r7
 801651c:	bd90      	pop	{r4, r7, pc}
 801651e:	bf00      	nop
 8016520:	2000bee6 	.word	0x2000bee6
 8016524:	08029a48 	.word	0x08029a48
 8016528:	0802a8ec 	.word	0x0802a8ec
 801652c:	08029a68 	.word	0x08029a68

08016530 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0
 8016536:	60f8      	str	r0, [r7, #12]
 8016538:	60b9      	str	r1, [r7, #8]
 801653a:	607a      	str	r2, [r7, #4]
 801653c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d106      	bne.n	8016552 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8016544:	4b11      	ldr	r3, [pc, #68]	; (801658c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8016546:	4a12      	ldr	r2, [pc, #72]	; (8016590 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8016548:	f240 3137 	movw	r1, #823	; 0x337
 801654c:	4811      	ldr	r0, [pc, #68]	; (8016594 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801654e:	f011 ff33 	bl	80283b8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	68ba      	ldr	r2, [r7, #8]
 8016556:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	683a      	ldr	r2, [r7, #0]
 8016562:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2b00      	cmp	r3, #0
 8016568:	bf14      	ite	ne
 801656a:	2301      	movne	r3, #1
 801656c:	2300      	moveq	r3, #0
 801656e:	b2da      	uxtb	r2, r3
 8016570:	4b09      	ldr	r3, [pc, #36]	; (8016598 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8016572:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	bf14      	ite	ne
 801657a:	2301      	movne	r3, #1
 801657c:	2300      	moveq	r3, #0
 801657e:	b2da      	uxtb	r2, r3
 8016580:	4b06      	ldr	r3, [pc, #24]	; (801659c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8016582:	701a      	strb	r2, [r3, #0]
    }
 8016584:	bf00      	nop
 8016586:	3710      	adds	r7, #16
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	08029aac 	.word	0x08029aac
 8016590:	0802a89c 	.word	0x0802a89c
 8016594:	08029a68 	.word	0x08029a68
 8016598:	2000bee8 	.word	0x2000bee8
 801659c:	2000bee9 	.word	0x2000bee9

080165a0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	460b      	mov	r3, r1
 80165aa:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d004      	beq.n	80165be <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165b8:	887a      	ldrh	r2, [r7, #2]
 80165ba:	4610      	mov	r0, r2
 80165bc:	4798      	blx	r3
        }
    }
 80165be:	bf00      	nop
 80165c0:	3708      	adds	r7, #8
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}

080165c6 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80165c6:	b580      	push	{r7, lr}
 80165c8:	b082      	sub	sp, #8
 80165ca:	af00      	add	r7, sp, #0
 80165cc:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	685a      	ldr	r2, [r3, #4]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	3318      	adds	r3, #24
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	4610      	mov	r0, r2
 80165de:	4798      	blx	r3
 80165e0:	4603      	mov	r3, r0
    }
 80165e2:	4618      	mov	r0, r3
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
	...

080165ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80165ec:	b480      	push	{r7}
 80165ee:	b083      	sub	sp, #12
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016600:	429a      	cmp	r2, r3
 8016602:	d017      	beq.n	8016634 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016604:	4b1a      	ldr	r3, [pc, #104]	; (8016670 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016606:	781b      	ldrb	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d12a      	bne.n	8016662 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801660c:	4b19      	ldr	r3, [pc, #100]	; (8016674 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801660e:	881a      	ldrh	r2, [r3, #0]
 8016610:	4b19      	ldr	r3, [pc, #100]	; (8016678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016612:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016614:	4b19      	ldr	r3, [pc, #100]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016616:	881a      	ldrh	r2, [r3, #0]
 8016618:	4b19      	ldr	r3, [pc, #100]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801661a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801661c:	4b16      	ldr	r3, [pc, #88]	; (8016678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801661e:	881a      	ldrh	r2, [r3, #0]
 8016620:	4b16      	ldr	r3, [pc, #88]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016622:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8016624:	4b16      	ldr	r3, [pc, #88]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016626:	881a      	ldrh	r2, [r3, #0]
 8016628:	4b12      	ldr	r3, [pc, #72]	; (8016674 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801662a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801662c:	4b10      	ldr	r3, [pc, #64]	; (8016670 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801662e:	2201      	movs	r2, #1
 8016630:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8016632:	e016      	b.n	8016662 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8016634:	4b0e      	ldr	r3, [pc, #56]	; (8016670 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016636:	781b      	ldrb	r3, [r3, #0]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d012      	beq.n	8016662 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801663c:	4b0f      	ldr	r3, [pc, #60]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801663e:	881a      	ldrh	r2, [r3, #0]
 8016640:	4b0d      	ldr	r3, [pc, #52]	; (8016678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016642:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8016644:	4b0b      	ldr	r3, [pc, #44]	; (8016674 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016646:	881a      	ldrh	r2, [r3, #0]
 8016648:	4b0d      	ldr	r3, [pc, #52]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801664a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801664c:	4b0c      	ldr	r3, [pc, #48]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801664e:	881a      	ldrh	r2, [r3, #0]
 8016650:	4b0a      	ldr	r3, [pc, #40]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016652:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8016654:	4b08      	ldr	r3, [pc, #32]	; (8016678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016656:	881a      	ldrh	r2, [r3, #0]
 8016658:	4b06      	ldr	r3, [pc, #24]	; (8016674 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801665a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801665c:	4b04      	ldr	r3, [pc, #16]	; (8016670 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801665e:	2200      	movs	r2, #0
 8016660:	701a      	strb	r2, [r3, #0]
    }
 8016662:	bf00      	nop
 8016664:	370c      	adds	r7, #12
 8016666:	46bd      	mov	sp, r7
 8016668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666c:	4770      	bx	lr
 801666e:	bf00      	nop
 8016670:	2000bee2 	.word	0x2000bee2
 8016674:	2000bede 	.word	0x2000bede
 8016678:	2000bee4 	.word	0x2000bee4
 801667c:	2000bee0 	.word	0x2000bee0
 8016680:	2000bee6 	.word	0x2000bee6

08016684 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	4618      	mov	r0, r3
 8016690:	f002 fcdc 	bl	801904c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016694:	bf00      	nop
 8016696:	3708      	adds	r7, #8
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	4a05      	ldr	r2, [pc, #20]	; (80166bc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	601a      	str	r2, [r3, #0]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	4618      	mov	r0, r3
 80166ae:	f7ff fe43 	bl	8016338 <_ZN8touchgfx3HALD1Ev>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	4618      	mov	r0, r3
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	0802aac4 	.word	0x0802aac4

080166c0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f7ff ffe7 	bl	801669c <_ZN20TouchGFXGeneratedHALD1Ev>
 80166ce:	2178      	movs	r1, #120	; 0x78
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f011 fe46 	bl	8028362 <_ZdlPvj>
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	4618      	mov	r0, r3
 80166da:	3708      	adds	r7, #8
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7ff ffca 	bl	8016684 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80166f0:	bf00      	nop
 80166f2:	3708      	adds	r7, #8
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	4618      	mov	r0, r3
 8016704:	f001 fb08 	bl	8017d18 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8016708:	bf00      	nop
 801670a:	3708      	adds	r7, #8
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b082      	sub	sp, #8
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	4618      	mov	r0, r3
 801671c:	f001 fb88 	bl	8017e30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8016720:	4603      	mov	r3, r0
}
 8016722:	4618      	mov	r0, r3
 8016724:	3708      	adds	r7, #8
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}

0801672a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801672a:	b580      	push	{r7, lr}
 801672c:	b082      	sub	sp, #8
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
 8016732:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6839      	ldr	r1, [r7, #0]
 8016738:	4618      	mov	r0, r3
 801673a:	f001 fb87 	bl	8017e4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801673e:	bf00      	nop
 8016740:	3708      	adds	r7, #8
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016746:	b580      	push	{r7, lr}
 8016748:	b082      	sub	sp, #8
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
 801674e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	6839      	ldr	r1, [r7, #0]
 8016754:	4618      	mov	r0, r3
 8016756:	f001 fb8f 	bl	8017e78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801675a:	bf00      	nop
 801675c:	3708      	adds	r7, #8
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}

08016762 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8016762:	b580      	push	{r7, lr}
 8016764:	b082      	sub	sp, #8
 8016766:	af00      	add	r7, sp, #0
 8016768:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	4618      	mov	r0, r3
 801676e:	f001 fb05 	bl	8017d7c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8016772:	bf00      	nop
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801677a:	b580      	push	{r7, lr}
 801677c:	b082      	sub	sp, #8
 801677e:	af00      	add	r7, sp, #0
 8016780:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	4618      	mov	r0, r3
 8016786:	f001 fb09 	bl	8017d9c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801678a:	bf00      	nop
 801678c:	3708      	adds	r7, #8
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8016792:	b580      	push	{r7, lr}
 8016794:	b082      	sub	sp, #8
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	4618      	mov	r0, r3
 801679e:	f001 fb0b 	bl	8017db8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80167a2:	bf00      	nop
 80167a4:	3708      	adds	r7, #8
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}

080167aa <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80167aa:	b580      	push	{r7, lr}
 80167ac:	b082      	sub	sp, #8
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	4618      	mov	r0, r3
 80167b6:	f001 fb0d 	bl	8017dd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80167ba:	bf00      	nop
 80167bc:	3708      	adds	r7, #8
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
	...

080167c4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	4a05      	ldr	r2, [pc, #20]	; (80167e4 <_ZN11TouchGFXHALD1Ev+0x20>)
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	601a      	str	r2, [r3, #0]
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7ff ff61 	bl	801669c <_ZN20TouchGFXGeneratedHALD1Ev>
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4618      	mov	r0, r3
 80167de:	3708      	adds	r7, #8
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	0802a7f0 	.word	0x0802a7f0

080167e8 <_ZN11TouchGFXHALD0Ev>:
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f7ff ffe7 	bl	80167c4 <_ZN11TouchGFXHALD1Ev>
 80167f6:	2178      	movs	r1, #120	; 0x78
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f011 fdb2 	bl	8028362 <_ZdlPvj>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	4618      	mov	r0, r3
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8016808:	b580      	push	{r7, lr}
 801680a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801680c:	2203      	movs	r2, #3
 801680e:	2100      	movs	r1, #0
 8016810:	2001      	movs	r0, #1
 8016812:	f7f6 fd56 	bl	800d2c2 <xQueueGenericCreate>
 8016816:	4602      	mov	r2, r0
 8016818:	4b0b      	ldr	r3, [pc, #44]	; (8016848 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801681a:	601a      	str	r2, [r3, #0]
 801681c:	4b0a      	ldr	r3, [pc, #40]	; (8016848 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d006      	beq.n	8016832 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8016824:	4b08      	ldr	r3, [pc, #32]	; (8016848 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8016826:	6818      	ldr	r0, [r3, #0]
 8016828:	2300      	movs	r3, #0
 801682a:	2200      	movs	r2, #0
 801682c:	2100      	movs	r1, #0
 801682e:	f7f6 fda9 	bl	800d384 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8016832:	2200      	movs	r2, #0
 8016834:	2101      	movs	r1, #1
 8016836:	2001      	movs	r0, #1
 8016838:	f7f6 fd43 	bl	800d2c2 <xQueueGenericCreate>
 801683c:	4602      	mov	r2, r0
 801683e:	4b03      	ldr	r3, [pc, #12]	; (801684c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8016840:	601a      	str	r2, [r3, #0]
}
 8016842:	bf00      	nop
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	200087a8 	.word	0x200087a8
 801684c:	200087ac 	.word	0x200087ac

08016850 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8016850:	b580      	push	{r7, lr}
 8016852:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8016854:	4b04      	ldr	r3, [pc, #16]	; (8016868 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	f04f 31ff 	mov.w	r1, #4294967295
 801685c:	4618      	mov	r0, r3
 801685e:	f7f7 f8a3 	bl	800d9a8 <xQueueSemaphoreTake>
}
 8016862:	bf00      	nop
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	200087a8 	.word	0x200087a8

0801686c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801686c:	b580      	push	{r7, lr}
 801686e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8016870:	4b04      	ldr	r3, [pc, #16]	; (8016884 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8016872:	6818      	ldr	r0, [r3, #0]
 8016874:	2300      	movs	r3, #0
 8016876:	2200      	movs	r2, #0
 8016878:	2100      	movs	r1, #0
 801687a:	f7f6 fd83 	bl	800d384 <xQueueGenericSend>
}
 801687e:	bf00      	nop
 8016880:	bd80      	pop	{r7, pc}
 8016882:	bf00      	nop
 8016884:	200087a8 	.word	0x200087a8

08016888 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016888:	b580      	push	{r7, lr}
 801688a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 801688c:	4b03      	ldr	r3, [pc, #12]	; (801689c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2100      	movs	r1, #0
 8016892:	4618      	mov	r0, r3
 8016894:	f7f7 f888 	bl	800d9a8 <xQueueSemaphoreTake>
}
 8016898:	bf00      	nop
 801689a:	bd80      	pop	{r7, pc}
 801689c:	200087a8 	.word	0x200087a8

080168a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80168a6:	2300      	movs	r3, #0
 80168a8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80168aa:	4b0b      	ldr	r3, [pc, #44]	; (80168d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	1d3a      	adds	r2, r7, #4
 80168b0:	4611      	mov	r1, r2
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7f6 ff04 	bl	800d6c0 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d007      	beq.n	80168ce <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80168be:	4b07      	ldr	r3, [pc, #28]	; (80168dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80168c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168c4:	601a      	str	r2, [r3, #0]
 80168c6:	f3bf 8f4f 	dsb	sy
 80168ca:	f3bf 8f6f 	isb	sy
}
 80168ce:	bf00      	nop
 80168d0:	3708      	adds	r7, #8
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}
 80168d6:	bf00      	nop
 80168d8:	200087a8 	.word	0x200087a8
 80168dc:	e000ed04 	.word	0xe000ed04

080168e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
    if (vsync_q)
 80168e6:	4b0e      	ldr	r3, [pc, #56]	; (8016920 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d013      	beq.n	8016916 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 80168ee:	2300      	movs	r3, #0
 80168f0:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80168f2:	4b0b      	ldr	r3, [pc, #44]	; (8016920 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80168f4:	6818      	ldr	r0, [r3, #0]
 80168f6:	1d3a      	adds	r2, r7, #4
 80168f8:	2300      	movs	r3, #0
 80168fa:	490a      	ldr	r1, [pc, #40]	; (8016924 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 80168fc:	f7f6 fe44 	bl	800d588 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d007      	beq.n	8016916 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8016906:	4b08      	ldr	r3, [pc, #32]	; (8016928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8016908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801690c:	601a      	str	r2, [r3, #0]
 801690e:	f3bf 8f4f 	dsb	sy
 8016912:	f3bf 8f6f 	isb	sy
    }
}
 8016916:	bf00      	nop
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	200087ac 	.word	0x200087ac
 8016924:	20000050 	.word	0x20000050
 8016928:	e000ed04 	.word	0xe000ed04

0801692c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801692c:	b580      	push	{r7, lr}
 801692e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8016930:	4b08      	ldr	r3, [pc, #32]	; (8016954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	2200      	movs	r2, #0
 8016936:	4908      	ldr	r1, [pc, #32]	; (8016958 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016938:	4618      	mov	r0, r3
 801693a:	f7f6 ff53 	bl	800d7e4 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801693e:	4b05      	ldr	r3, [pc, #20]	; (8016954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	f04f 32ff 	mov.w	r2, #4294967295
 8016946:	4904      	ldr	r1, [pc, #16]	; (8016958 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016948:	4618      	mov	r0, r3
 801694a:	f7f6 ff4b 	bl	800d7e4 <xQueueReceive>
}
 801694e:	bf00      	nop
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	200087ac 	.word	0x200087ac
 8016958:	20000050 	.word	0x20000050

0801695c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	4603      	mov	r3, r0
 8016964:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8016966:	88fb      	ldrh	r3, [r7, #6]
 8016968:	4618      	mov	r0, r3
 801696a:	f7f7 fc7b 	bl	800e264 <vTaskDelay>
}
 801696e:	bf00      	nop
 8016970:	3708      	adds	r7, #8
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}
	...

08016978 <__NVIC_EnableIRQ>:
{
 8016978:	b480      	push	{r7}
 801697a:	b083      	sub	sp, #12
 801697c:	af00      	add	r7, sp, #0
 801697e:	4603      	mov	r3, r0
 8016980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016986:	2b00      	cmp	r3, #0
 8016988:	db0d      	blt.n	80169a6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801698a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801698e:	b2db      	uxtb	r3, r3
 8016990:	f003 021f 	and.w	r2, r3, #31
 8016994:	4907      	ldr	r1, [pc, #28]	; (80169b4 <__NVIC_EnableIRQ+0x3c>)
 8016996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801699a:	095b      	lsrs	r3, r3, #5
 801699c:	2001      	movs	r0, #1
 801699e:	fa00 f202 	lsl.w	r2, r0, r2
 80169a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80169a6:	bf00      	nop
 80169a8:	370c      	adds	r7, #12
 80169aa:	46bd      	mov	sp, r7
 80169ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b0:	4770      	bx	lr
 80169b2:	bf00      	nop
 80169b4:	e000e100 	.word	0xe000e100

080169b8 <__NVIC_DisableIRQ>:
{
 80169b8:	b480      	push	{r7}
 80169ba:	b083      	sub	sp, #12
 80169bc:	af00      	add	r7, sp, #0
 80169be:	4603      	mov	r3, r0
 80169c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80169c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	db12      	blt.n	80169f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80169ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169ce:	b2db      	uxtb	r3, r3
 80169d0:	f003 021f 	and.w	r2, r3, #31
 80169d4:	4909      	ldr	r1, [pc, #36]	; (80169fc <__NVIC_DisableIRQ+0x44>)
 80169d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169da:	095b      	lsrs	r3, r3, #5
 80169dc:	2001      	movs	r0, #1
 80169de:	fa00 f202 	lsl.w	r2, r0, r2
 80169e2:	3320      	adds	r3, #32
 80169e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80169e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80169ec:	f3bf 8f6f 	isb	sy
}
 80169f0:	bf00      	nop
 80169f2:	370c      	adds	r7, #12
 80169f4:	46bd      	mov	sp, r7
 80169f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fa:	4770      	bx	lr
 80169fc:	e000e100 	.word	0xe000e100

08016a00 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8016a00:	b480      	push	{r7}
 8016a02:	b083      	sub	sp, #12
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
        return color;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
    }
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	370c      	adds	r7, #12
 8016a10:	46bd      	mov	sp, r7
 8016a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a16:	4770      	bx	lr

08016a18 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8016a18:	b480      	push	{r7}
 8016a1a:	b083      	sub	sp, #12
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	b29b      	uxth	r3, r3
    }
 8016a26:	4618      	mov	r0, r3
 8016a28:	370c      	adds	r7, #12
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a30:	4770      	bx	lr
	...

08016a34 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8016a34:	b480      	push	{r7}
 8016a36:	b083      	sub	sp, #12
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
    {
 8016a3c:	4a04      	ldr	r2, [pc, #16]	; (8016a50 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	601a      	str	r2, [r3, #0]
    }
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	4618      	mov	r0, r3
 8016a46:	370c      	adds	r7, #12
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4e:	4770      	bx	lr
 8016a50:	0802a998 	.word	0x0802a998

08016a54 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
    }
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f7ff ffe9 	bl	8016a34 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016a62:	2104      	movs	r1, #4
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f011 fc7c 	bl	8028362 <_ZdlPvj>
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	3708      	adds	r7, #8
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}

08016a74 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b082      	sub	sp, #8
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	3344      	adds	r3, #68	; 0x44
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	4798      	blx	r3
    }
 8016a88:	bf00      	nop
 8016a8a:	3708      	adds	r7, #8
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}

08016a90 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8016a90:	b480      	push	{r7}
 8016a92:	b083      	sub	sp, #12
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016a98:	2300      	movs	r3, #0
    }
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	370c      	adds	r7, #12
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa4:	4770      	bx	lr
	...

08016aa8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8016aa8:	b480      	push	{r7}
 8016aaa:	b083      	sub	sp, #12
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
    {
 8016ab0:	4a04      	ldr	r2, [pc, #16]	; (8016ac4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	601a      	str	r2, [r3, #0]
    }
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	4618      	mov	r0, r3
 8016aba:	370c      	adds	r7, #12
 8016abc:	46bd      	mov	sp, r7
 8016abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac2:	4770      	bx	lr
 8016ac4:	0802b9d4 	.word	0x0802b9d4

08016ac8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
    }
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	f7ff ffe9 	bl	8016aa8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016ad6:	210c      	movs	r1, #12
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f011 fc42 	bl	8028362 <_ZdlPvj>
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3708      	adds	r7, #8
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}

08016ae8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016ae8:	b480      	push	{r7}
 8016aea:	b083      	sub	sp, #12
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016af2:	4a09      	ldr	r2, [pc, #36]	; (8016b18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	601a      	str	r2, [r3, #0]
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	683a      	ldr	r2, [r7, #0]
 8016afc:	605a      	str	r2, [r3, #4]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	2200      	movs	r2, #0
 8016b02:	721a      	strb	r2, [r3, #8]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	2200      	movs	r2, #0
 8016b08:	725a      	strb	r2, [r3, #9]
    {
    }
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	370c      	adds	r7, #12
 8016b10:	46bd      	mov	sp, r7
 8016b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b16:	4770      	bx	lr
 8016b18:	0802b9d4 	.word	0x0802b9d4

08016b1c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b082      	sub	sp, #8
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	685a      	ldr	r2, [r3, #4]
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	3314      	adds	r3, #20
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	4610      	mov	r0, r2
 8016b34:	4798      	blx	r3
    }
 8016b36:	bf00      	nop
 8016b38:	3708      	adds	r7, #8
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}

08016b3e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8016b3e:	b580      	push	{r7, lr}
 8016b40:	b082      	sub	sp, #8
 8016b42:	af00      	add	r7, sp, #0
 8016b44:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	3328      	adds	r3, #40	; 0x28
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4610      	mov	r0, r2
 8016b52:	4798      	blx	r3
    }
 8016b54:	bf00      	nop
 8016b56:	3708      	adds	r7, #8
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}

08016b5c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	b085      	sub	sp, #20
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	607a      	str	r2, [r7, #4]
 8016b68:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016b74:	68ba      	ldr	r2, [r7, #8]
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	430a      	orrs	r2, r1
 8016b7c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b84:	f023 0107 	bic.w	r1, r3, #7
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	430a      	orrs	r2, r1
 8016b90:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b98:	4b06      	ldr	r3, [pc, #24]	; (8016bb4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8016b9a:	4013      	ands	r3, r2
 8016b9c:	6839      	ldr	r1, [r7, #0]
 8016b9e:	68fa      	ldr	r2, [r7, #12]
 8016ba0:	6812      	ldr	r2, [r2, #0]
 8016ba2:	430b      	orrs	r3, r1
 8016ba4:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3714      	adds	r7, #20
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr
 8016bb4:	ffffc000 	.word	0xffffc000

08016bb8 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016bc0:	f7f9 ffaa 	bl	8010b18 <_ZN8touchgfx3HAL11getInstanceEv>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7ff ffa8 	bl	8016b1c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8016bcc:	bf00      	nop
 8016bce:	3708      	adds	r7, #8
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}

08016bd4 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
    assert(0);
 8016bdc:	4b02      	ldr	r3, [pc, #8]	; (8016be8 <DMA2D_XferErrorCallback+0x14>)
 8016bde:	4a03      	ldr	r2, [pc, #12]	; (8016bec <DMA2D_XferErrorCallback+0x18>)
 8016be0:	213e      	movs	r1, #62	; 0x3e
 8016be2:	4803      	ldr	r0, [pc, #12]	; (8016bf0 <DMA2D_XferErrorCallback+0x1c>)
 8016be4:	f011 fbe8 	bl	80283b8 <__assert_func>
 8016be8:	08029ae4 	.word	0x08029ae4
 8016bec:	0802a9b4 	.word	0x0802a9b4
 8016bf0:	08029ae8 	.word	0x08029ae8

08016bf4 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	3318      	adds	r3, #24
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7fb f914 	bl	8011e2e <_ZN8touchgfx9colortypeC1Ev>
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3708      	adds	r7, #8
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8016c10:	b5b0      	push	{r4, r5, r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016c18:	687a      	ldr	r2, [r7, #4]
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	330c      	adds	r3, #12
 8016c1e:	4619      	mov	r1, r3
 8016c20:	4610      	mov	r0, r2
 8016c22:	f7ff ff61 	bl	8016ae8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016c26:	4a0e      	ldr	r2, [pc, #56]	; (8016c60 <_ZN10STM32F7DMAC1Ev+0x50>)
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	601a      	str	r2, [r3, #0]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f103 000c 	add.w	r0, r3, #12
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	3320      	adds	r3, #32
 8016c36:	2260      	movs	r2, #96	; 0x60
 8016c38:	4619      	mov	r1, r3
 8016c3a:	f003 f8ab 	bl	8019d94 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	3320      	adds	r3, #32
 8016c42:	245f      	movs	r4, #95	; 0x5f
 8016c44:	461d      	mov	r5, r3
 8016c46:	2c00      	cmp	r4, #0
 8016c48:	db05      	blt.n	8016c56 <_ZN10STM32F7DMAC1Ev+0x46>
 8016c4a:	4628      	mov	r0, r5
 8016c4c:	f7ff ffd2 	bl	8016bf4 <_ZN8touchgfx6BlitOpC1Ev>
 8016c50:	3520      	adds	r5, #32
 8016c52:	3c01      	subs	r4, #1
 8016c54:	e7f7      	b.n	8016c46 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3708      	adds	r7, #8
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8016c60:	0802a948 	.word	0x0802a948

08016c64 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	4a0b      	ldr	r2, [pc, #44]	; (8016c9c <_ZN10STM32F7DMAD1Ev+0x38>)
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8016c72:	480b      	ldr	r0, [pc, #44]	; (8016ca0 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8016c74:	f7ee f9ba 	bl	8004fec <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016c78:	205a      	movs	r0, #90	; 0x5a
 8016c7a:	f7ff fe9d 	bl	80169b8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	330c      	adds	r3, #12
 8016c82:	4618      	mov	r0, r3
 8016c84:	f000 faa0 	bl	80171c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7ff ff0c 	bl	8016aa8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	4618      	mov	r0, r3
 8016c94:	3708      	adds	r7, #8
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}
 8016c9a:	bf00      	nop
 8016c9c:	0802a948 	.word	0x0802a948
 8016ca0:	2000c770 	.word	0x2000c770

08016ca4 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
}
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7ff ffd9 	bl	8016c64 <_ZN10STM32F7DMAD1Ev>
 8016cb2:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016cb6:	6878      	ldr	r0, [r7, #4]
 8016cb8:	f011 fb53 	bl	8028362 <_ZdlPvj>
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3708      	adds	r7, #8
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
	...

08016cc8 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016cd0:	4b09      	ldr	r3, [pc, #36]	; (8016cf8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016cd2:	4a0a      	ldr	r2, [pc, #40]	; (8016cfc <_ZN10STM32F7DMA10initializeEv+0x34>)
 8016cd4:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016cd6:	4808      	ldr	r0, [pc, #32]	; (8016cf8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016cd8:	f7ee f93e 	bl	8004f58 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016cdc:	4b06      	ldr	r3, [pc, #24]	; (8016cf8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016cde:	4a08      	ldr	r2, [pc, #32]	; (8016d00 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8016ce0:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8016ce2:	4b05      	ldr	r3, [pc, #20]	; (8016cf8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016ce4:	4a07      	ldr	r2, [pc, #28]	; (8016d04 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8016ce6:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016ce8:	205a      	movs	r0, #90	; 0x5a
 8016cea:	f7ff fe45 	bl	8016978 <__NVIC_EnableIRQ>
}
 8016cee:	bf00      	nop
 8016cf0:	3708      	adds	r7, #8
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	2000c770 	.word	0x2000c770
 8016cfc:	4002b000 	.word	0x4002b000
 8016d00:	08016bb9 	.word	0x08016bb9
 8016d04:	08016bd5 	.word	0x08016bd5

08016d08 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016d08:	b480      	push	{r7}
 8016d0a:	b083      	sub	sp, #12
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8016d10:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	370c      	adds	r7, #12
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1e:	4770      	bx	lr

08016d20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016d20:	b590      	push	{r4, r7, lr}
 8016d22:	b08d      	sub	sp, #52	; 0x34
 8016d24:	af02      	add	r7, sp, #8
 8016d26:	6078      	str	r0, [r7, #4]
 8016d28:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8016d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016d2e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8016d30:	2300      	movs	r3, #0
 8016d32:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016d38:	2b20      	cmp	r3, #32
 8016d3a:	d007      	beq.n	8016d4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8016d3c:	683b      	ldr	r3, [r7, #0]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	2b40      	cmp	r3, #64	; 0x40
 8016d42:	d003      	beq.n	8016d4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	2b04      	cmp	r3, #4
 8016d4a:	d101      	bne.n	8016d50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	e000      	b.n	8016d52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8016d50:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016d52:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016d58:	2b80      	cmp	r3, #128	; 0x80
 8016d5a:	d004      	beq.n	8016d66 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d64:	d101      	bne.n	8016d6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016d66:	2301      	movs	r3, #1
 8016d68:	e000      	b.n	8016d6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016d6a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016d6c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016d6e:	f7f9 fedf 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8016d72:	4602      	mov	r2, r0
 8016d74:	6813      	ldr	r3, [r2, #0]
 8016d76:	3320      	adds	r3, #32
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	4610      	mov	r0, r2
 8016d7c:	4798      	blx	r3
 8016d7e:	4603      	mov	r3, r0
 8016d80:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	2b40      	cmp	r3, #64	; 0x40
 8016d88:	d01d      	beq.n	8016dc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016d8a:	2b40      	cmp	r3, #64	; 0x40
 8016d8c:	d804      	bhi.n	8016d98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8016d8e:	2b04      	cmp	r3, #4
 8016d90:	d00e      	beq.n	8016db0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8016d92:	2b20      	cmp	r3, #32
 8016d94:	d017      	beq.n	8016dc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016d96:	e019      	b.n	8016dcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016d98:	2b80      	cmp	r3, #128	; 0x80
 8016d9a:	d003      	beq.n	8016da4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8016d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016da0:	d003      	beq.n	8016daa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8016da2:	e013      	b.n	8016dcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016da4:	230a      	movs	r3, #10
 8016da6:	623b      	str	r3, [r7, #32]
        break;
 8016da8:	e01a      	b.n	8016de0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016daa:	2309      	movs	r3, #9
 8016dac:	623b      	str	r3, [r7, #32]
        break;
 8016dae:	e017      	b.n	8016de0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016db4:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016db6:	7f7b      	ldrb	r3, [r7, #29]
 8016db8:	2b10      	cmp	r3, #16
 8016dba:	d101      	bne.n	8016dc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8016dbc:	2302      	movs	r3, #2
 8016dbe:	e000      	b.n	8016dc2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	623b      	str	r3, [r7, #32]
        break;
 8016dc4:	e00c      	b.n	8016de0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	623b      	str	r3, [r7, #32]
        break;
 8016dca:	e009      	b.n	8016de0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016dcc:	2300      	movs	r3, #0
 8016dce:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016dd0:	7f7b      	ldrb	r3, [r7, #29]
 8016dd2:	2b10      	cmp	r3, #16
 8016dd4:	d101      	bne.n	8016dda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016dd6:	2302      	movs	r3, #2
 8016dd8:	e000      	b.n	8016ddc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8016dda:	2301      	movs	r3, #1
 8016ddc:	623b      	str	r3, [r7, #32]
        break;
 8016dde:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016de0:	4a76      	ldr	r2, [pc, #472]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016de6:	7f7b      	ldrb	r3, [r7, #29]
 8016de8:	2b10      	cmp	r3, #16
 8016dea:	d101      	bne.n	8016df0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8016dec:	2302      	movs	r3, #2
 8016dee:	e000      	b.n	8016df2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8016df0:	2301      	movs	r3, #1
 8016df2:	4a72      	ldr	r2, [pc, #456]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016df4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	8adb      	ldrh	r3, [r3, #22]
 8016dfa:	461a      	mov	r2, r3
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	8a1b      	ldrh	r3, [r3, #16]
 8016e00:	1ad3      	subs	r3, r2, r3
 8016e02:	461a      	mov	r2, r3
 8016e04:	4b6d      	ldr	r3, [pc, #436]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e06:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016e08:	7f7b      	ldrb	r3, [r7, #29]
 8016e0a:	2b10      	cmp	r3, #16
 8016e0c:	d101      	bne.n	8016e12 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8016e0e:	2202      	movs	r2, #2
 8016e10:	e000      	b.n	8016e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8016e12:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016e14:	683b      	ldr	r3, [r7, #0]
 8016e16:	8adb      	ldrh	r3, [r3, #22]
 8016e18:	4619      	mov	r1, r3
 8016e1a:	683b      	ldr	r3, [r7, #0]
 8016e1c:	8a1b      	ldrh	r3, [r3, #16]
 8016e1e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e22:	4866      	ldr	r0, [pc, #408]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e24:	f7ff fe9a 	bl	8016b5c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016e28:	4a64      	ldr	r2, [pc, #400]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e2a:	6a3b      	ldr	r3, [r7, #32]
 8016e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	8a9b      	ldrh	r3, [r3, #20]
 8016e32:	461a      	mov	r2, r3
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	8a1b      	ldrh	r3, [r3, #16]
 8016e38:	1ad3      	subs	r3, r2, r3
 8016e3a:	461a      	mov	r2, r3
 8016e3c:	4b5f      	ldr	r3, [pc, #380]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e3e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8016e40:	7ffb      	ldrb	r3, [r7, #31]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d103      	bne.n	8016e4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8016e46:	7fbb      	ldrb	r3, [r7, #30]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	f000 8082 	beq.w	8016f52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	7f1b      	ldrb	r3, [r3, #28]
 8016e52:	2bff      	cmp	r3, #255	; 0xff
 8016e54:	d008      	beq.n	8016e68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8016e56:	4b59      	ldr	r3, [pc, #356]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e58:	2202      	movs	r2, #2
 8016e5a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	7f1b      	ldrb	r3, [r3, #28]
 8016e60:	461a      	mov	r2, r3
 8016e62:	4b56      	ldr	r3, [pc, #344]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e64:	635a      	str	r2, [r3, #52]	; 0x34
 8016e66:	e002      	b.n	8016e6e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8016e68:	4b54      	ldr	r3, [pc, #336]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8016e6e:	7fbb      	ldrb	r3, [r7, #30]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d059      	beq.n	8016f28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8016e74:	7f7b      	ldrb	r3, [r7, #29]
 8016e76:	2b10      	cmp	r3, #16
 8016e78:	d14a      	bne.n	8016f10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	3318      	adds	r3, #24
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f7ff fdca 	bl	8016a18 <_ZNK8touchgfx9colortypecvtEv>
 8016e84:	4603      	mov	r3, r0
 8016e86:	12db      	asrs	r3, r3, #11
 8016e88:	f003 021f 	and.w	r2, r3, #31
 8016e8c:	4613      	mov	r3, r2
 8016e8e:	021b      	lsls	r3, r3, #8
 8016e90:	1a9b      	subs	r3, r3, r2
 8016e92:	4a4b      	ldr	r2, [pc, #300]	; (8016fc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016e94:	fb82 1203 	smull	r1, r2, r2, r3
 8016e98:	441a      	add	r2, r3
 8016e9a:	1112      	asrs	r2, r2, #4
 8016e9c:	17db      	asrs	r3, r3, #31
 8016e9e:	1ad3      	subs	r3, r2, r3
 8016ea0:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	3318      	adds	r3, #24
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7ff fdb6 	bl	8016a18 <_ZNK8touchgfx9colortypecvtEv>
 8016eac:	4603      	mov	r3, r0
 8016eae:	115b      	asrs	r3, r3, #5
 8016eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016eb4:	4613      	mov	r3, r2
 8016eb6:	021b      	lsls	r3, r3, #8
 8016eb8:	1a9b      	subs	r3, r3, r2
 8016eba:	4a42      	ldr	r2, [pc, #264]	; (8016fc4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8016ec0:	441a      	add	r2, r3
 8016ec2:	1152      	asrs	r2, r2, #5
 8016ec4:	17db      	asrs	r3, r3, #31
 8016ec6:	1ad3      	subs	r3, r2, r3
 8016ec8:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016eca:	683b      	ldr	r3, [r7, #0]
 8016ecc:	3318      	adds	r3, #24
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7ff fda2 	bl	8016a18 <_ZNK8touchgfx9colortypecvtEv>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	f003 021f 	and.w	r2, r3, #31
 8016eda:	4613      	mov	r3, r2
 8016edc:	021b      	lsls	r3, r3, #8
 8016ede:	1a9b      	subs	r3, r3, r2
 8016ee0:	4a37      	ldr	r2, [pc, #220]	; (8016fc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8016ee6:	441a      	add	r2, r3
 8016ee8:	1112      	asrs	r2, r2, #4
 8016eea:	17db      	asrs	r3, r3, #31
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	7f1b      	ldrb	r3, [r3, #28]
 8016ef4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	061a      	lsls	r2, r3, #24
 8016efa:	69bb      	ldr	r3, [r7, #24]
 8016efc:	041b      	lsls	r3, r3, #16
 8016efe:	431a      	orrs	r2, r3
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	021b      	lsls	r3, r3, #8
 8016f04:	431a      	orrs	r2, r3
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	4313      	orrs	r3, r2
 8016f0a:	4a2c      	ldr	r2, [pc, #176]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f0c:	6353      	str	r3, [r2, #52]	; 0x34
 8016f0e:	e00b      	b.n	8016f28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	3318      	adds	r3, #24
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7ff fd73 	bl	8016a00 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	7f1b      	ldrb	r3, [r3, #28]
 8016f20:	061b      	lsls	r3, r3, #24
 8016f22:	4313      	orrs	r3, r2
 8016f24:	4a25      	ldr	r2, [pc, #148]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f26:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016f28:	683b      	ldr	r3, [r7, #0]
 8016f2a:	8adb      	ldrh	r3, [r3, #22]
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	8a1b      	ldrh	r3, [r3, #16]
 8016f32:	1ad3      	subs	r3, r2, r3
 8016f34:	461a      	mov	r2, r3
 8016f36:	4b21      	ldr	r3, [pc, #132]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f38:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016f3a:	7f7b      	ldrb	r3, [r7, #29]
 8016f3c:	2b10      	cmp	r3, #16
 8016f3e:	d101      	bne.n	8016f44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8016f40:	2302      	movs	r3, #2
 8016f42:	e000      	b.n	8016f46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8016f44:	2301      	movs	r3, #1
 8016f46:	4a1d      	ldr	r2, [pc, #116]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f48:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016f4a:	2100      	movs	r1, #0
 8016f4c:	481b      	ldr	r0, [pc, #108]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f4e:	f7ee facd 	bl	80054ec <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016f52:	2101      	movs	r1, #1
 8016f54:	4819      	ldr	r0, [pc, #100]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f56:	f7ee fac9 	bl	80054ec <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8016f5a:	7ffb      	ldrb	r3, [r7, #31]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d102      	bne.n	8016f66 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8016f60:	7fbb      	ldrb	r3, [r7, #30]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d015      	beq.n	8016f92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016f6a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016f70:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016f76:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016f7c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016f82:	9301      	str	r3, [sp, #4]
 8016f84:	9200      	str	r2, [sp, #0]
 8016f86:	4623      	mov	r3, r4
 8016f88:	4602      	mov	r2, r0
 8016f8a:	480c      	ldr	r0, [pc, #48]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f8c:	f7ee f8d1 	bl	8005132 <HAL_DMA2D_BlendingStart_IT>
 8016f90:	e00f      	b.n	8016fb2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8016f92:	683b      	ldr	r3, [r7, #0]
 8016f94:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016f96:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016f9c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016fa2:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016fa8:	9300      	str	r3, [sp, #0]
 8016faa:	4603      	mov	r3, r0
 8016fac:	4803      	ldr	r0, [pc, #12]	; (8016fbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016fae:	f7ee f88d 	bl	80050cc <HAL_DMA2D_Start_IT>
    }
}
 8016fb2:	bf00      	nop
 8016fb4:	372c      	adds	r7, #44	; 0x2c
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd90      	pop	{r4, r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	2000c770 	.word	0x2000c770
 8016fc0:	84210843 	.word	0x84210843
 8016fc4:	82082083 	.word	0x82082083

08016fc8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8016fc8:	b590      	push	{r4, r7, lr}
 8016fca:	b08d      	sub	sp, #52	; 0x34
 8016fcc:	af02      	add	r7, sp, #8
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016fd2:	f7f9 fdad 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8016fd6:	4602      	mov	r2, r0
 8016fd8:	6813      	ldr	r3, [r2, #0]
 8016fda:	3320      	adds	r3, #32
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	4610      	mov	r0, r2
 8016fe0:	4798      	blx	r3
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016fe6:	7ffb      	ldrb	r3, [r7, #31]
 8016fe8:	2b10      	cmp	r3, #16
 8016fea:	d101      	bne.n	8016ff0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8016fec:	2302      	movs	r3, #2
 8016fee:	e000      	b.n	8016ff2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8016ff8:	7ffb      	ldrb	r3, [r7, #31]
 8016ffa:	2b10      	cmp	r3, #16
 8016ffc:	d149      	bne.n	8017092 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	3318      	adds	r3, #24
 8017002:	4618      	mov	r0, r3
 8017004:	f7ff fd08 	bl	8016a18 <_ZNK8touchgfx9colortypecvtEv>
 8017008:	4603      	mov	r3, r0
 801700a:	12db      	asrs	r3, r3, #11
 801700c:	f003 021f 	and.w	r2, r3, #31
 8017010:	4613      	mov	r3, r2
 8017012:	021b      	lsls	r3, r3, #8
 8017014:	1a9b      	subs	r3, r3, r2
 8017016:	4a69      	ldr	r2, [pc, #420]	; (80171bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8017018:	fb82 1203 	smull	r1, r2, r2, r3
 801701c:	441a      	add	r2, r3
 801701e:	1112      	asrs	r2, r2, #4
 8017020:	17db      	asrs	r3, r3, #31
 8017022:	1ad3      	subs	r3, r2, r3
 8017024:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	3318      	adds	r3, #24
 801702a:	4618      	mov	r0, r3
 801702c:	f7ff fcf4 	bl	8016a18 <_ZNK8touchgfx9colortypecvtEv>
 8017030:	4603      	mov	r3, r0
 8017032:	115b      	asrs	r3, r3, #5
 8017034:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017038:	4613      	mov	r3, r2
 801703a:	021b      	lsls	r3, r3, #8
 801703c:	1a9b      	subs	r3, r3, r2
 801703e:	4a60      	ldr	r2, [pc, #384]	; (80171c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8017040:	fb82 1203 	smull	r1, r2, r2, r3
 8017044:	441a      	add	r2, r3
 8017046:	1152      	asrs	r2, r2, #5
 8017048:	17db      	asrs	r3, r3, #31
 801704a:	1ad3      	subs	r3, r2, r3
 801704c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	3318      	adds	r3, #24
 8017052:	4618      	mov	r0, r3
 8017054:	f7ff fce0 	bl	8016a18 <_ZNK8touchgfx9colortypecvtEv>
 8017058:	4603      	mov	r3, r0
 801705a:	f003 021f 	and.w	r2, r3, #31
 801705e:	4613      	mov	r3, r2
 8017060:	021b      	lsls	r3, r3, #8
 8017062:	1a9b      	subs	r3, r3, r2
 8017064:	4a55      	ldr	r2, [pc, #340]	; (80171bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8017066:	fb82 1203 	smull	r1, r2, r2, r3
 801706a:	441a      	add	r2, r3
 801706c:	1112      	asrs	r2, r2, #4
 801706e:	17db      	asrs	r3, r3, #31
 8017070:	1ad3      	subs	r3, r2, r3
 8017072:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	7f1b      	ldrb	r3, [r3, #28]
 8017078:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	061a      	lsls	r2, r3, #24
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	041b      	lsls	r3, r3, #16
 8017082:	431a      	orrs	r2, r3
 8017084:	693b      	ldr	r3, [r7, #16]
 8017086:	021b      	lsls	r3, r3, #8
 8017088:	4313      	orrs	r3, r2
 801708a:	68fa      	ldr	r2, [r7, #12]
 801708c:	4313      	orrs	r3, r2
 801708e:	623b      	str	r3, [r7, #32]
 8017090:	e00b      	b.n	80170aa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	7f1b      	ldrb	r3, [r3, #28]
 8017096:	061b      	lsls	r3, r3, #24
 8017098:	461c      	mov	r4, r3
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	3318      	adds	r3, #24
 801709e:	4618      	mov	r0, r3
 80170a0:	f7ff fcae 	bl	8016a00 <_ZNK8touchgfx9colortype10getColor32Ev>
 80170a4:	4603      	mov	r3, r0
 80170a6:	4323      	orrs	r3, r4
 80170a8:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	2b08      	cmp	r3, #8
 80170b0:	d103      	bne.n	80170ba <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80170b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80170b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80170b8:	e003      	b.n	80170c2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80170ba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80170be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80170c0:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80170c2:	4a40      	ldr	r2, [pc, #256]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80170c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c6:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80170c8:	7ffb      	ldrb	r3, [r7, #31]
 80170ca:	2b10      	cmp	r3, #16
 80170cc:	d101      	bne.n	80170d2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80170ce:	2302      	movs	r3, #2
 80170d0:	e000      	b.n	80170d4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80170d2:	2301      	movs	r3, #1
 80170d4:	4a3b      	ldr	r2, [pc, #236]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80170d6:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	8adb      	ldrh	r3, [r3, #22]
 80170dc:	461a      	mov	r2, r3
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	8a1b      	ldrh	r3, [r3, #16]
 80170e2:	1ad3      	subs	r3, r2, r3
 80170e4:	461a      	mov	r2, r3
 80170e6:	4b37      	ldr	r3, [pc, #220]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80170e8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80170ea:	7ffb      	ldrb	r3, [r7, #31]
 80170ec:	2b10      	cmp	r3, #16
 80170ee:	d101      	bne.n	80170f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80170f0:	2202      	movs	r2, #2
 80170f2:	e000      	b.n	80170f6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80170f4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	8adb      	ldrh	r3, [r3, #22]
 80170fa:	4619      	mov	r1, r3
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	8a1b      	ldrh	r3, [r3, #16]
 8017100:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8017102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017104:	482f      	ldr	r0, [pc, #188]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017106:	f7ff fd29 	bl	8016b5c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801710c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017110:	d11e      	bne.n	8017150 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8017112:	4b2c      	ldr	r3, [pc, #176]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017114:	2201      	movs	r2, #1
 8017116:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8017118:	4a2a      	ldr	r2, [pc, #168]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801711a:	6a3b      	ldr	r3, [r7, #32]
 801711c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801711e:	4b29      	ldr	r3, [pc, #164]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017120:	2209      	movs	r2, #9
 8017122:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	8adb      	ldrh	r3, [r3, #22]
 8017128:	461a      	mov	r2, r3
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	8a1b      	ldrh	r3, [r3, #16]
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	461a      	mov	r2, r3
 8017132:	4b24      	ldr	r3, [pc, #144]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017134:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8017136:	7ffb      	ldrb	r3, [r7, #31]
 8017138:	2b10      	cmp	r3, #16
 801713a:	d101      	bne.n	8017140 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 801713c:	2302      	movs	r3, #2
 801713e:	e000      	b.n	8017142 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8017140:	2301      	movs	r3, #1
 8017142:	4a20      	ldr	r2, [pc, #128]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017144:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8017146:	2100      	movs	r1, #0
 8017148:	481e      	ldr	r0, [pc, #120]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801714a:	f7ee f9cf 	bl	80054ec <HAL_DMA2D_ConfigLayer>
 801714e:	e005      	b.n	801715c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8017150:	4a1c      	ldr	r2, [pc, #112]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8017156:	4b1b      	ldr	r3, [pc, #108]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017158:	2200      	movs	r2, #0
 801715a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801715c:	2101      	movs	r1, #1
 801715e:	4819      	ldr	r0, [pc, #100]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017160:	f7ee f9c4 	bl	80054ec <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8017164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801716a:	d115      	bne.n	8017198 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017170:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017176:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801717c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017182:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017188:	9301      	str	r3, [sp, #4]
 801718a:	9200      	str	r2, [sp, #0]
 801718c:	4623      	mov	r3, r4
 801718e:	4602      	mov	r2, r0
 8017190:	480c      	ldr	r0, [pc, #48]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017192:	f7ed ffce 	bl	8005132 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8017196:	e00d      	b.n	80171b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80171a2:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80171a8:	9300      	str	r3, [sp, #0]
 80171aa:	460b      	mov	r3, r1
 80171ac:	6a39      	ldr	r1, [r7, #32]
 80171ae:	4805      	ldr	r0, [pc, #20]	; (80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171b0:	f7ed ff8c 	bl	80050cc <HAL_DMA2D_Start_IT>
}
 80171b4:	bf00      	nop
 80171b6:	372c      	adds	r7, #44	; 0x2c
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd90      	pop	{r4, r7, pc}
 80171bc:	84210843 	.word	0x84210843
 80171c0:	82082083 	.word	0x82082083
 80171c4:	2000c770 	.word	0x2000c770

080171c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b082      	sub	sp, #8
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
 80171d0:	4a05      	ldr	r2, [pc, #20]	; (80171e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	601a      	str	r2, [r3, #0]
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	4618      	mov	r0, r3
 80171da:	f7ff fc2b 	bl	8016a34 <_ZN8touchgfx9DMA_QueueD1Ev>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	4618      	mov	r0, r3
 80171e2:	3708      	adds	r7, #8
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}
 80171e8:	0802ba24 	.word	0x0802ba24

080171ec <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b082      	sub	sp, #8
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f7ff ffe7 	bl	80171c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80171fa:	2114      	movs	r1, #20
 80171fc:	6878      	ldr	r0, [r7, #4]
 80171fe:	f011 f8b0 	bl	8028362 <_ZdlPvj>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	4618      	mov	r0, r3
 8017206:	3708      	adds	r7, #8
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}

0801720c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801720c:	b480      	push	{r7}
 801720e:	b083      	sub	sp, #12
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
        texts = t;
 8017214:	4a04      	ldr	r2, [pc, #16]	; (8017228 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	6013      	str	r3, [r2, #0]
    }
 801721a:	bf00      	nop
 801721c:	370c      	adds	r7, #12
 801721e:	46bd      	mov	sp, r7
 8017220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017224:	4770      	bx	lr
 8017226:	bf00      	nop
 8017228:	2000bf88 	.word	0x2000bf88

0801722c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801722c:	b480      	push	{r7}
 801722e:	b085      	sub	sp, #20
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
 8017238:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801723a:	4a0b      	ldr	r2, [pc, #44]	; (8017268 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	601a      	str	r2, [r3, #0]
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	68ba      	ldr	r2, [r7, #8]
 8017244:	605a      	str	r2, [r3, #4]
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	609a      	str	r2, [r3, #8]
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	683a      	ldr	r2, [r7, #0]
 8017250:	60da      	str	r2, [r3, #12]
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	69ba      	ldr	r2, [r7, #24]
 8017256:	611a      	str	r2, [r3, #16]
    {
    }
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	4618      	mov	r0, r3
 801725c:	3714      	adds	r7, #20
 801725e:	46bd      	mov	sp, r7
 8017260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017264:	4770      	bx	lr
 8017266:	bf00      	nop
 8017268:	0802aab4 	.word	0x0802aab4

0801726c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801726c:	b480      	push	{r7}
 801726e:	b083      	sub	sp, #12
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
    {
 8017274:	4a04      	ldr	r2, [pc, #16]	; (8017288 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	601a      	str	r2, [r3, #0]
    }
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	4618      	mov	r0, r3
 801727e:	370c      	adds	r7, #12
 8017280:	46bd      	mov	sp, r7
 8017282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017286:	4770      	bx	lr
 8017288:	0802aab4 	.word	0x0802aab4

0801728c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
    }
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f7ff ffe9 	bl	801726c <_ZN8touchgfx7MVPHeapD1Ev>
 801729a:	2114      	movs	r1, #20
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f011 f860 	bl	8028362 <_ZdlPvj>
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	4618      	mov	r0, r3
 80172a6:	3708      	adds	r7, #8
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 80172ac:	b480      	push	{r7}
 80172ae:	b083      	sub	sp, #12
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
    {
 80172b4:	4a04      	ldr	r2, [pc, #16]	; (80172c8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	601a      	str	r2, [r3, #0]
    }
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	4618      	mov	r0, r3
 80172be:	370c      	adds	r7, #12
 80172c0:	46bd      	mov	sp, r7
 80172c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c6:	4770      	bx	lr
 80172c8:	0802c3e0 	.word	0x0802c3e0

080172cc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b082      	sub	sp, #8
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
    }
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f7ff ffe9 	bl	80172ac <_ZN8touchgfx3LCDD1Ev>
 80172da:	2108      	movs	r1, #8
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f011 f840 	bl	8028362 <_ZdlPvj>
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	4618      	mov	r0, r3
 80172e6:	3708      	adds	r7, #8
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}

080172ec <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80172ec:	b480      	push	{r7}
 80172ee:	b083      	sub	sp, #12
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2200      	movs	r2, #0
 80172f8:	801a      	strh	r2, [r3, #0]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	2200      	movs	r2, #0
 80172fe:	805a      	strh	r2, [r3, #2]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2200      	movs	r2, #0
 8017304:	809a      	strh	r2, [r3, #4]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	2200      	movs	r2, #0
 801730a:	80da      	strh	r2, [r3, #6]
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2200      	movs	r2, #0
 8017310:	811a      	strh	r2, [r3, #8]
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	2200      	movs	r2, #0
 8017316:	815a      	strh	r2, [r3, #10]
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2200      	movs	r2, #0
 801731c:	819a      	strh	r2, [r3, #12]
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	2200      	movs	r2, #0
 8017322:	739a      	strb	r2, [r3, #14]
        {
        }
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	4618      	mov	r0, r3
 8017328:	370c      	adds	r7, #12
 801732a:	46bd      	mov	sp, r7
 801732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017330:	4770      	bx	lr

08017332 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8017332:	b580      	push	{r7, lr}
 8017334:	b082      	sub	sp, #8
 8017336:	af00      	add	r7, sp, #0
 8017338:	6078      	str	r0, [r7, #4]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	4618      	mov	r0, r3
 801733e:	f7ff ffd5 	bl	80172ec <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	2200      	movs	r2, #0
 8017346:	611a      	str	r2, [r3, #16]
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2200      	movs	r2, #0
 801734c:	829a      	strh	r2, [r3, #20]
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	4618      	mov	r0, r3
 8017352:	3708      	adds	r7, #8
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}

08017358 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	60f8      	str	r0, [r7, #12]
 8017360:	60b9      	str	r1, [r7, #8]
 8017362:	607a      	str	r2, [r7, #4]
 8017364:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8017366:	4a44      	ldr	r2, [pc, #272]	; (8017478 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	601a      	str	r2, [r3, #0]
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	68ba      	ldr	r2, [r7, #8]
 8017370:	605a      	str	r2, [r3, #4]
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	609a      	str	r2, [r3, #8]
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	683a      	ldr	r2, [r7, #0]
 801737c:	60da      	str	r2, [r3, #12]
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	2200      	movs	r2, #0
 8017382:	611a      	str	r2, [r3, #16]
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	2200      	movs	r2, #0
 8017388:	615a      	str	r2, [r3, #20]
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	2200      	movs	r2, #0
 801738e:	619a      	str	r2, [r3, #24]
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	331c      	adds	r3, #28
 8017394:	4618      	mov	r0, r3
 8017396:	f7ff ffcc 	bl	8017332 <_ZN8touchgfx8GesturesC1Ev>
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	2200      	movs	r2, #0
 801739e:	639a      	str	r2, [r3, #56]	; 0x38
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	2200      	movs	r2, #0
 80173a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	2200      	movs	r2, #0
 80173aa:	641a      	str	r2, [r3, #64]	; 0x40
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	2200      	movs	r2, #0
 80173b0:	645a      	str	r2, [r3, #68]	; 0x44
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2200      	movs	r2, #0
 80173b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	2201      	movs	r2, #1
 80173be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	2201      	movs	r2, #1
 80173c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2200      	movs	r2, #0
 80173ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	3350      	adds	r3, #80	; 0x50
 80173d4:	4618      	mov	r0, r3
 80173d6:	f7fa fd47 	bl	8011e68 <_ZN8touchgfx4RectC1Ev>
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2201      	movs	r2, #1
 80173de:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	2200      	movs	r2, #0
 80173e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	2200      	movs	r2, #0
 80173ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	2201      	movs	r2, #1
 80173f6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	2200      	movs	r2, #0
 80173fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	2200      	movs	r2, #0
 8017406:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	2200      	movs	r2, #0
 801740e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	2200      	movs	r2, #0
 8017416:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	2200      	movs	r2, #0
 801741e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	2200      	movs	r2, #0
 8017426:	671a      	str	r2, [r3, #112]	; 0x70
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	2200      	movs	r2, #0
 801742c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8017430:	4a12      	ldr	r2, [pc, #72]	; (801747c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8017436:	4a12      	ldr	r2, [pc, #72]	; (8017480 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8017438:	8b3b      	ldrh	r3, [r7, #24]
 801743a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801743c:	4a11      	ldr	r2, [pc, #68]	; (8017484 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801743e:	8bbb      	ldrh	r3, [r7, #28]
 8017440:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8017442:	4b11      	ldr	r3, [pc, #68]	; (8017488 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8017444:	2200      	movs	r2, #0
 8017446:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8017448:	4b0d      	ldr	r3, [pc, #52]	; (8017480 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801744a:	881a      	ldrh	r2, [r3, #0]
 801744c:	4b0f      	ldr	r3, [pc, #60]	; (801748c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801744e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8017450:	4b0c      	ldr	r3, [pc, #48]	; (8017484 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8017452:	881a      	ldrh	r2, [r3, #0]
 8017454:	4b0e      	ldr	r3, [pc, #56]	; (8017490 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8017456:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8017458:	8b3a      	ldrh	r2, [r7, #24]
 801745a:	8bbb      	ldrh	r3, [r7, #28]
 801745c:	429a      	cmp	r2, r3
 801745e:	d301      	bcc.n	8017464 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8017460:	2200      	movs	r2, #0
 8017462:	e000      	b.n	8017466 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8017464:	2201      	movs	r2, #1
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	4618      	mov	r0, r3
 8017470:	3710      	adds	r7, #16
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	bf00      	nop
 8017478:	0802b590 	.word	0x0802b590
 801747c:	2000beec 	.word	0x2000beec
 8017480:	2000bede 	.word	0x2000bede
 8017484:	2000bee0 	.word	0x2000bee0
 8017488:	2000bee2 	.word	0x2000bee2
 801748c:	2000bee4 	.word	0x2000bee4
 8017490:	2000bee6 	.word	0x2000bee6

08017494 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
 801749c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 801749e:	683b      	ldr	r3, [r7, #0]
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7f9 fd69 	bl	8010f78 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80174a6:	bf00      	nop
 80174a8:	3708      	adds	r7, #8
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}
	...

080174b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b086      	sub	sp, #24
 80174b4:	af02      	add	r7, sp, #8
 80174b6:	60f8      	str	r0, [r7, #12]
 80174b8:	60b9      	str	r1, [r7, #8]
 80174ba:	607a      	str	r2, [r7, #4]
 80174bc:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80174be:	68f8      	ldr	r0, [r7, #12]
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	9300      	str	r3, [sp, #0]
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	687a      	ldr	r2, [r7, #4]
 80174c8:	68b9      	ldr	r1, [r7, #8]
 80174ca:	f7ff feaf 	bl	801722c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80174ce:	4a04      	ldr	r2, [pc, #16]	; (80174e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	601a      	str	r2, [r3, #0]
    {

    }
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	4618      	mov	r0, r3
 80174d8:	3710      	adds	r7, #16
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	0802aaa0 	.word	0x0802aaa0

080174e4 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80174e4:	b580      	push	{r7, lr}
 80174e6:	af00      	add	r7, sp, #0
 80174e8:	4801      	ldr	r0, [pc, #4]	; (80174f0 <__tcf_0+0xc>)
 80174ea:	f000 f9dd 	bl	80178a8 <_ZN12FrontendHeapD1Ev>
 80174ee:	bd80      	pop	{r7, pc}
 80174f0:	200087b0 	.word	0x200087b0

080174f4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80174f4:	b580      	push	{r7, lr}
 80174f6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80174f8:	4b08      	ldr	r3, [pc, #32]	; (801751c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	f003 0301 	and.w	r3, r3, #1
 8017500:	2b00      	cmp	r3, #0
 8017502:	d108      	bne.n	8017516 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8017504:	4806      	ldr	r0, [pc, #24]	; (8017520 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8017506:	f000 f831 	bl	801756c <_ZN12FrontendHeapC1Ev>
 801750a:	4b04      	ldr	r3, [pc, #16]	; (801751c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801750c:	2201      	movs	r2, #1
 801750e:	601a      	str	r2, [r3, #0]
 8017510:	4804      	ldr	r0, [pc, #16]	; (8017524 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8017512:	f010 ff6f 	bl	80283f4 <atexit>
        return instance;
 8017516:	4b02      	ldr	r3, [pc, #8]	; (8017520 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8017518:	4618      	mov	r0, r3
 801751a:	bd80      	pop	{r7, pc}
 801751c:	2000b1d8 	.word	0x2000b1d8
 8017520:	200087b0 	.word	0x200087b0
 8017524:	080174e5 	.word	0x080174e5

08017528 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8017528:	b580      	push	{r7, lr}
 801752a:	b082      	sub	sp, #8
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
 8017530:	4a05      	ldr	r2, [pc, #20]	; (8017548 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	601a      	str	r2, [r3, #0]
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	4618      	mov	r0, r3
 801753a:	f7ff fe97 	bl	801726c <_ZN8touchgfx7MVPHeapD1Ev>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	4618      	mov	r0, r3
 8017542:	3708      	adds	r7, #8
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}
 8017548:	0802aaa0 	.word	0x0802aaa0

0801754c <_ZN16FrontendHeapBaseD0Ev>:
 801754c:	b580      	push	{r7, lr}
 801754e:	b082      	sub	sp, #8
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f7ff ffe7 	bl	8017528 <_ZN16FrontendHeapBaseD1Ev>
 801755a:	2114      	movs	r1, #20
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f010 ff00 	bl	8028362 <_ZdlPvj>
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	4618      	mov	r0, r3
 8017566:	3708      	adds	r7, #8
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}

0801756c <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801756c:	b5b0      	push	{r4, r5, r7, lr}
 801756e:	b084      	sub	sp, #16
 8017570:	af02      	add	r7, sp, #8
 8017572:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	f103 0414 	add.w	r4, r3, #20
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	f642 0278 	movw	r2, #10360	; 0x2878
 8017588:	441a      	add	r2, r3
 801758a:	6879      	ldr	r1, [r7, #4]
 801758c:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8017590:	440b      	add	r3, r1
 8017592:	9300      	str	r3, [sp, #0]
 8017594:	4613      	mov	r3, r2
 8017596:	462a      	mov	r2, r5
 8017598:	4621      	mov	r1, r4
 801759a:	f7ff ff89 	bl	80174b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801759e:	4a1a      	ldr	r2, [pc, #104]	; (8017608 <_ZN12FrontendHeapC1Ev+0x9c>)
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	601a      	str	r2, [r3, #0]
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	3314      	adds	r3, #20
 80175a8:	4618      	mov	r0, r3
 80175aa:	f000 f8df 	bl	801776c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	332c      	adds	r3, #44	; 0x2c
 80175b2:	4618      	mov	r0, r3
 80175b4:	f000 f90e 	bl	80177d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80175b8:	687a      	ldr	r2, [r7, #4]
 80175ba:	f642 0378 	movw	r3, #10360	; 0x2878
 80175be:	4413      	add	r3, r2
 80175c0:	4618      	mov	r0, r3
 80175c2:	f000 f93d 	bl	8017840 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80175c6:	687a      	ldr	r2, [r7, #4]
 80175c8:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80175cc:	4413      	add	r3, r2
 80175ce:	687a      	ldr	r2, [r7, #4]
 80175d0:	f642 2124 	movw	r1, #10788	; 0x2a24
 80175d4:	4411      	add	r1, r2
 80175d6:	687a      	ldr	r2, [r7, #4]
 80175d8:	4618      	mov	r0, r3
 80175da:	f7fe f80d 	bl	80155f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	f642 2324 	movw	r3, #10788	; 0x2a24
 80175e4:	4413      	add	r3, r2
 80175e6:	4618      	mov	r0, r3
 80175e8:	f7fe fcfa 	bl	8015fe0 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	687a      	ldr	r2, [r7, #4]
 80175f0:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80175f4:	4413      	add	r3, r2
 80175f6:	4619      	mov	r1, r3
 80175f8:	f7ff ff4c 	bl	8017494 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	4618      	mov	r0, r3
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	bdb0      	pop	{r4, r5, r7, pc}
 8017606:	bf00      	nop
 8017608:	0802a9f0 	.word	0x0802a9f0

0801760c <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 801760c:	b580      	push	{r7, lr}
 801760e:	b082      	sub	sp, #8
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
    {
 8017614:	4a05      	ldr	r2, [pc, #20]	; (801762c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	601a      	str	r2, [r3, #0]
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	4618      	mov	r0, r3
 801761e:	f7ff fe45 	bl	80172ac <_ZN8touchgfx3LCDD1Ev>
    }
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	4618      	mov	r0, r3
 8017626:	3708      	adds	r7, #8
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}
 801762c:	0802d7bc 	.word	0x0802d7bc

08017630 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
    }
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f7ff ffe7 	bl	801760c <_ZN8touchgfx8LCD24bppD1Ev>
 801763e:	2158      	movs	r1, #88	; 0x58
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f010 fe8e 	bl	8028362 <_ZdlPvj>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	4618      	mov	r0, r3
 801764a:	3708      	adds	r7, #8
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}

08017650 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8017650:	b580      	push	{r7, lr}
 8017652:	b086      	sub	sp, #24
 8017654:	af02      	add	r7, sp, #8
 8017656:	60f8      	str	r0, [r7, #12]
 8017658:	60b9      	str	r1, [r7, #8]
 801765a:	607a      	str	r2, [r7, #4]
 801765c:	603b      	str	r3, [r7, #0]
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	8bbb      	ldrh	r3, [r7, #28]
 8017662:	9301      	str	r3, [sp, #4]
 8017664:	8b3b      	ldrh	r3, [r7, #24]
 8017666:	9300      	str	r3, [sp, #0]
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	687a      	ldr	r2, [r7, #4]
 801766c:	68b9      	ldr	r1, [r7, #8]
 801766e:	f7ff fe73 	bl	8017358 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8017672:	4a04      	ldr	r2, [pc, #16]	; (8017684 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	601a      	str	r2, [r3, #0]
    }
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	4618      	mov	r0, r3
 801767c:	3710      	adds	r7, #16
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	0802aac4 	.word	0x0802aac4

08017688 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8017688:	b580      	push	{r7, lr}
 801768a:	b086      	sub	sp, #24
 801768c:	af02      	add	r7, sp, #8
 801768e:	60f8      	str	r0, [r7, #12]
 8017690:	60b9      	str	r1, [r7, #8]
 8017692:	607a      	str	r2, [r7, #4]
 8017694:	603b      	str	r3, [r7, #0]
 8017696:	68f8      	ldr	r0, [r7, #12]
 8017698:	8bbb      	ldrh	r3, [r7, #28]
 801769a:	9301      	str	r3, [sp, #4]
 801769c:	8b3b      	ldrh	r3, [r7, #24]
 801769e:	9300      	str	r3, [sp, #0]
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	687a      	ldr	r2, [r7, #4]
 80176a4:	68b9      	ldr	r1, [r7, #8]
 80176a6:	f7ff ffd3 	bl	8017650 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80176aa:	4a04      	ldr	r2, [pc, #16]	; (80176bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	601a      	str	r2, [r3, #0]
    }
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	4618      	mov	r0, r3
 80176b4:	3710      	adds	r7, #16
 80176b6:	46bd      	mov	sp, r7
 80176b8:	bd80      	pop	{r7, pc}
 80176ba:	bf00      	nop
 80176bc:	0802a7f0 	.word	0x0802a7f0

080176c0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80176c0:	b480      	push	{r7}
 80176c2:	b083      	sub	sp, #12
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
 80176c8:	4a04      	ldr	r2, [pc, #16]	; (80176dc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	601a      	str	r2, [r3, #0]
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	4618      	mov	r0, r3
 80176d2:	370c      	adds	r7, #12
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr
 80176dc:	0802a7d8 	.word	0x0802a7d8

080176e0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7ff ffe8 	bl	80176c0 <_ZN8touchgfx15TouchControllerC1Ev>
 80176f0:	4a03      	ldr	r2, [pc, #12]	; (8017700 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	601a      	str	r2, [r3, #0]
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4618      	mov	r0, r3
 80176fa:	3708      	adds	r7, #8
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}
 8017700:	0802a7c0 	.word	0x0802a7c0

08017704 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8017704:	b590      	push	{r4, r7, lr}
 8017706:	b085      	sub	sp, #20
 8017708:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801770a:	f7fd fe51 	bl	80153b0 <_ZN14BitmapDatabase11getInstanceEv>
 801770e:	4604      	mov	r4, r0
 8017710:	f7fd fe58 	bl	80153c4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8017714:	4603      	mov	r3, r0
 8017716:	4619      	mov	r1, r3
 8017718:	2300      	movs	r3, #0
 801771a:	9300      	str	r3, [sp, #0]
 801771c:	2300      	movs	r3, #0
 801771e:	2200      	movs	r2, #0
 8017720:	4620      	mov	r0, r4
 8017722:	f007 f8e3 	bl	801e8ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8017726:	4809      	ldr	r0, [pc, #36]	; (801774c <touchgfx_init+0x48>)
 8017728:	f7ff fd70 	bl	801720c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 801772c:	2000      	movs	r0, #0
 801772e:	f7fd fe6d 	bl	801540c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8017732:	4807      	ldr	r0, [pc, #28]	; (8017750 <touchgfx_init+0x4c>)
 8017734:	f007 f828 	bl	801e788 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8017738:	f7ff fedc 	bl	80174f4 <_ZN12FrontendHeap11getInstanceEv>
 801773c:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801773e:	4805      	ldr	r0, [pc, #20]	; (8017754 <touchgfx_init+0x50>)
 8017740:	f7fe ffda 	bl	80166f8 <_ZN11TouchGFXHAL10initializeEv>
}
 8017744:	bf00      	nop
 8017746:	370c      	adds	r7, #12
 8017748:	46bd      	mov	sp, r7
 801774a:	bd90      	pop	{r4, r7, pc}
 801774c:	2000be58 	.word	0x2000be58
 8017750:	20000054 	.word	0x20000054
 8017754:	2000be5c 	.word	0x2000be5c

08017758 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8017758:	b580      	push	{r7, lr}
 801775a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 801775c:	4802      	ldr	r0, [pc, #8]	; (8017768 <touchgfx_taskEntry+0x10>)
 801775e:	f001 fca6 	bl	80190ae <_ZN8touchgfx3HAL9taskEntryEv>
}
 8017762:	bf00      	nop
 8017764:	bd80      	pop	{r7, pc}
 8017766:	bf00      	nop
 8017768:	2000be5c 	.word	0x2000be5c

0801776c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801776c:	b580      	push	{r7, lr}
 801776e:	b082      	sub	sp, #8
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	4618      	mov	r0, r3
 8017778:	f000 ff16 	bl	80185a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801777c:	4a03      	ldr	r2, [pc, #12]	; (801778c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	601a      	str	r2, [r3, #0]
    {
    }
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	4618      	mov	r0, r3
 8017786:	3708      	adds	r7, #8
 8017788:	46bd      	mov	sp, r7
 801778a:	bd80      	pop	{r7, pc}
 801778c:	0802aa6c 	.word	0x0802aa6c

08017790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8017790:	b580      	push	{r7, lr}
 8017792:	b082      	sub	sp, #8
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
    {
    }
 8017798:	4a05      	ldr	r2, [pc, #20]	; (80177b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	601a      	str	r2, [r3, #0]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	4618      	mov	r0, r3
 80177a2:	f000 feff 	bl	80185a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	4618      	mov	r0, r3
 80177aa:	3708      	adds	r7, #8
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	0802aa6c 	.word	0x0802aa6c

080177b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
    }
 80177bc:	6878      	ldr	r0, [r7, #4]
 80177be:	f7ff ffe7 	bl	8017790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80177c2:	2118      	movs	r1, #24
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	f010 fdcc 	bl	8028362 <_ZdlPvj>
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	4618      	mov	r0, r3
 80177ce:	3708      	adds	r7, #8
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	4618      	mov	r0, r3
 80177e0:	f000 fee2 	bl	80185a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80177e4:	4a03      	ldr	r2, [pc, #12]	; (80177f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	601a      	str	r2, [r3, #0]
    }
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	4618      	mov	r0, r3
 80177ee:	3708      	adds	r7, #8
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}
 80177f4:	0802aa38 	.word	0x0802aa38

080177f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
    }
 8017800:	4a05      	ldr	r2, [pc, #20]	; (8017818 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	601a      	str	r2, [r3, #0]
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	4618      	mov	r0, r3
 801780a:	f000 fecb 	bl	80185a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	4618      	mov	r0, r3
 8017812:	3708      	adds	r7, #8
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	0802aa38 	.word	0x0802aa38

0801781c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
    }
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f7ff ffe7 	bl	80177f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801782a:	f642 014c 	movw	r1, #10316	; 0x284c
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	f010 fd97 	bl	8028362 <_ZdlPvj>
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	4618      	mov	r0, r3
 8017838:	3708      	adds	r7, #8
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}
	...

08017840 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	4618      	mov	r0, r3
 801784c:	f000 feac 	bl	80185a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017850:	4a03      	ldr	r2, [pc, #12]	; (8017860 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	601a      	str	r2, [r3, #0]
    }
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	4618      	mov	r0, r3
 801785a:	3708      	adds	r7, #8
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}
 8017860:	0802aa04 	.word	0x0802aa04

08017864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8017864:	b580      	push	{r7, lr}
 8017866:	b082      	sub	sp, #8
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
    }
 801786c:	4a05      	ldr	r2, [pc, #20]	; (8017884 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	601a      	str	r2, [r3, #0]
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	4618      	mov	r0, r3
 8017876:	f000 fe95 	bl	80185a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	4618      	mov	r0, r3
 801787e:	3708      	adds	r7, #8
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}
 8017884:	0802aa04 	.word	0x0802aa04

08017888 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
    }
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7ff ffe7 	bl	8017864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017896:	215c      	movs	r1, #92	; 0x5c
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f010 fd62 	bl	8028362 <_ZdlPvj>
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	4618      	mov	r0, r3
 80178a2:	3708      	adds	r7, #8
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}

080178a8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	4a11      	ldr	r2, [pc, #68]	; (80178f8 <_ZN12FrontendHeapD1Ev+0x50>)
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	601a      	str	r2, [r3, #0]
 80178b6:	687a      	ldr	r2, [r7, #4]
 80178b8:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80178bc:	4413      	add	r3, r2
 80178be:	4618      	mov	r0, r3
 80178c0:	f7fd fe64 	bl	801558c <_ZN19FrontendApplicationD1Ev>
 80178c4:	687a      	ldr	r2, [r7, #4]
 80178c6:	f642 0378 	movw	r3, #10360	; 0x2878
 80178ca:	4413      	add	r3, r2
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7ff ffc9 	bl	8017864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	332c      	adds	r3, #44	; 0x2c
 80178d6:	4618      	mov	r0, r3
 80178d8:	f7ff ff8e 	bl	80177f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	3314      	adds	r3, #20
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7ff ff55 	bl	8017790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7ff fe1d 	bl	8017528 <_ZN16FrontendHeapBaseD1Ev>
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	4618      	mov	r0, r3
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	0802a9f0 	.word	0x0802a9f0

080178fc <_ZN12FrontendHeapD0Ev>:
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f7ff ffcf 	bl	80178a8 <_ZN12FrontendHeapD1Ev>
 801790a:	f642 2128 	movw	r1, #10792	; 0x2a28
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	f010 fd27 	bl	8028362 <_ZdlPvj>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	4618      	mov	r0, r3
 8017918:	3708      	adds	r7, #8
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}
	...

08017920 <_Z41__static_initialization_and_destruction_0ii>:
 8017920:	b580      	push	{r7, lr}
 8017922:	b084      	sub	sp, #16
 8017924:	af02      	add	r7, sp, #8
 8017926:	6078      	str	r0, [r7, #4]
 8017928:	6039      	str	r1, [r7, #0]
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	2b01      	cmp	r3, #1
 801792e:	d119      	bne.n	8017964 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017936:	4293      	cmp	r3, r2
 8017938:	d114      	bne.n	8017964 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801793a:	4818      	ldr	r0, [pc, #96]	; (801799c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801793c:	f7ff fed0 	bl	80176e0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8017940:	4817      	ldr	r0, [pc, #92]	; (80179a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017942:	f7ff f965 	bl	8016c10 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8017946:	4817      	ldr	r0, [pc, #92]	; (80179a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017948:	f009 f9f6 	bl	8020d38 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801794c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017950:	9301      	str	r3, [sp, #4]
 8017952:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8017956:	9300      	str	r3, [sp, #0]
 8017958:	4b10      	ldr	r3, [pc, #64]	; (801799c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801795a:	4a12      	ldr	r2, [pc, #72]	; (80179a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801795c:	4910      	ldr	r1, [pc, #64]	; (80179a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801795e:	4812      	ldr	r0, [pc, #72]	; (80179a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017960:	f7ff fe92 	bl	8017688 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d113      	bne.n	8017992 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017970:	4293      	cmp	r3, r2
 8017972:	d10e      	bne.n	8017992 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017974:	480c      	ldr	r0, [pc, #48]	; (80179a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017976:	f7fe ff25 	bl	80167c4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801797a:	480c      	ldr	r0, [pc, #48]	; (80179ac <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801797c:	f7f8 fbbc 	bl	80100f8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8017980:	4808      	ldr	r0, [pc, #32]	; (80179a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017982:	f7ff fe43 	bl	801760c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8017986:	4806      	ldr	r0, [pc, #24]	; (80179a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017988:	f7ff f96c 	bl	8016c64 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801798c:	4803      	ldr	r0, [pc, #12]	; (801799c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801798e:	f7fe fc8f 	bl	80162b0 <_ZN20STM32TouchControllerD1Ev>
}
 8017992:	bf00      	nop
 8017994:	3708      	adds	r7, #8
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	2000b1dc 	.word	0x2000b1dc
 80179a0:	2000b1e0 	.word	0x2000b1e0
 80179a4:	2000be00 	.word	0x2000be00
 80179a8:	2000be5c 	.word	0x2000be5c
 80179ac:	20000054 	.word	0x20000054

080179b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 80179b0:	b480      	push	{r7}
 80179b2:	b083      	sub	sp, #12
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80179b8:	2301      	movs	r3, #1
    }
 80179ba:	4618      	mov	r0, r3
 80179bc:	370c      	adds	r7, #12
 80179be:	46bd      	mov	sp, r7
 80179c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c4:	4770      	bx	lr

080179c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 80179c6:	b480      	push	{r7}
 80179c8:	b083      	sub	sp, #12
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80179ce:	2354      	movs	r3, #84	; 0x54
    }
 80179d0:	4618      	mov	r0, r3
 80179d2:	370c      	adds	r7, #12
 80179d4:	46bd      	mov	sp, r7
 80179d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179da:	4770      	bx	lr

080179dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80179dc:	b480      	push	{r7}
 80179de:	b083      	sub	sp, #12
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	460b      	mov	r3, r1
 80179e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80179e8:	887b      	ldrh	r3, [r7, #2]
 80179ea:	2254      	movs	r2, #84	; 0x54
 80179ec:	fb02 f303 	mul.w	r3, r2, r3
 80179f0:	3308      	adds	r3, #8
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	4413      	add	r3, r2
    }
 80179f6:	4618      	mov	r0, r3
 80179f8:	370c      	adds	r7, #12
 80179fa:	46bd      	mov	sp, r7
 80179fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a00:	4770      	bx	lr

08017a02 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8017a02:	b480      	push	{r7}
 8017a04:	b083      	sub	sp, #12
 8017a06:	af00      	add	r7, sp, #0
 8017a08:	6078      	str	r0, [r7, #4]
 8017a0a:	460b      	mov	r3, r1
 8017a0c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017a0e:	887b      	ldrh	r3, [r7, #2]
 8017a10:	2254      	movs	r2, #84	; 0x54
 8017a12:	fb02 f303 	mul.w	r3, r2, r3
 8017a16:	3308      	adds	r3, #8
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	4413      	add	r3, r2
    }
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	370c      	adds	r7, #12
 8017a20:	46bd      	mov	sp, r7
 8017a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a26:	4770      	bx	lr

08017a28 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017a28:	b480      	push	{r7}
 8017a2a:	b083      	sub	sp, #12
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017a30:	2301      	movs	r3, #1
    }
 8017a32:	4618      	mov	r0, r3
 8017a34:	370c      	adds	r7, #12
 8017a36:	46bd      	mov	sp, r7
 8017a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3c:	4770      	bx	lr

08017a3e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017a3e:	b480      	push	{r7}
 8017a40:	b083      	sub	sp, #12
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017a46:	f642 0344 	movw	r3, #10308	; 0x2844
    }
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	370c      	adds	r7, #12
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a54:	4770      	bx	lr

08017a56 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017a56:	b480      	push	{r7}
 8017a58:	b083      	sub	sp, #12
 8017a5a:	af00      	add	r7, sp, #0
 8017a5c:	6078      	str	r0, [r7, #4]
 8017a5e:	460b      	mov	r3, r1
 8017a60:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017a62:	887b      	ldrh	r3, [r7, #2]
 8017a64:	f642 0244 	movw	r2, #10308	; 0x2844
 8017a68:	fb02 f303 	mul.w	r3, r2, r3
 8017a6c:	3308      	adds	r3, #8
 8017a6e:	687a      	ldr	r2, [r7, #4]
 8017a70:	4413      	add	r3, r2
    }
 8017a72:	4618      	mov	r0, r3
 8017a74:	370c      	adds	r7, #12
 8017a76:	46bd      	mov	sp, r7
 8017a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7c:	4770      	bx	lr

08017a7e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017a7e:	b480      	push	{r7}
 8017a80:	b083      	sub	sp, #12
 8017a82:	af00      	add	r7, sp, #0
 8017a84:	6078      	str	r0, [r7, #4]
 8017a86:	460b      	mov	r3, r1
 8017a88:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017a8a:	887b      	ldrh	r3, [r7, #2]
 8017a8c:	f642 0244 	movw	r2, #10308	; 0x2844
 8017a90:	fb02 f303 	mul.w	r3, r2, r3
 8017a94:	3308      	adds	r3, #8
 8017a96:	687a      	ldr	r2, [r7, #4]
 8017a98:	4413      	add	r3, r2
    }
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	370c      	adds	r7, #12
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa4:	4770      	bx	lr

08017aa6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017aa6:	b480      	push	{r7}
 8017aa8:	b083      	sub	sp, #12
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017aae:	2301      	movs	r3, #1
    }
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	370c      	adds	r7, #12
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aba:	4770      	bx	lr

08017abc <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017abc:	b480      	push	{r7}
 8017abe:	b083      	sub	sp, #12
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017ac4:	2310      	movs	r3, #16
    }
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	370c      	adds	r7, #12
 8017aca:	46bd      	mov	sp, r7
 8017acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad0:	4770      	bx	lr

08017ad2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017ad2:	b480      	push	{r7}
 8017ad4:	b083      	sub	sp, #12
 8017ad6:	af00      	add	r7, sp, #0
 8017ad8:	6078      	str	r0, [r7, #4]
 8017ada:	460b      	mov	r3, r1
 8017adc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017ade:	887b      	ldrh	r3, [r7, #2]
 8017ae0:	011b      	lsls	r3, r3, #4
 8017ae2:	3308      	adds	r3, #8
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	4413      	add	r3, r2
    }
 8017ae8:	4618      	mov	r0, r3
 8017aea:	370c      	adds	r7, #12
 8017aec:	46bd      	mov	sp, r7
 8017aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af2:	4770      	bx	lr

08017af4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	460b      	mov	r3, r1
 8017afe:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017b00:	887b      	ldrh	r3, [r7, #2]
 8017b02:	011b      	lsls	r3, r3, #4
 8017b04:	3308      	adds	r3, #8
 8017b06:	687a      	ldr	r2, [r7, #4]
 8017b08:	4413      	add	r3, r2
    }
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	370c      	adds	r7, #12
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr

08017b16 <_GLOBAL__sub_I_touchgfx_init>:
 8017b16:	b580      	push	{r7, lr}
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017b1e:	2001      	movs	r0, #1
 8017b20:	f7ff fefe 	bl	8017920 <_Z41__static_initialization_and_destruction_0ii>
 8017b24:	bd80      	pop	{r7, pc}

08017b26 <_GLOBAL__sub_D_touchgfx_init>:
 8017b26:	b580      	push	{r7, lr}
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017b2e:	2000      	movs	r0, #0
 8017b30:	f7ff fef6 	bl	8017920 <_Z41__static_initialization_and_destruction_0ii>
 8017b34:	bd80      	pop	{r7, pc}

08017b36 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8017b36:	b580      	push	{r7, lr}
 8017b38:	b082      	sub	sp, #8
 8017b3a:	af00      	add	r7, sp, #0
 8017b3c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	3318      	adds	r3, #24
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	6878      	ldr	r0, [r7, #4]
 8017b48:	4798      	blx	r3
    }
 8017b4a:	bf00      	nop
 8017b4c:	3708      	adds	r7, #8
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}

08017b52 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8017b52:	b480      	push	{r7}
 8017b54:	b083      	sub	sp, #12
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
 8017b5a:	460b      	mov	r3, r1
 8017b5c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	78fa      	ldrb	r2, [r7, #3]
 8017b62:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8017b66:	bf00      	nop
 8017b68:	370c      	adds	r7, #12
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b70:	4770      	bx	lr

08017b72 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017b72:	b480      	push	{r7}
 8017b74:	b083      	sub	sp, #12
 8017b76:	af00      	add	r7, sp, #0
 8017b78:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017b80:	3301      	adds	r3, #1
 8017b82:	b2da      	uxtb	r2, r3
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8017b8a:	bf00      	nop
 8017b8c:	370c      	adds	r7, #12
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b94:	4770      	bx	lr
	...

08017b98 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b082      	sub	sp, #8
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	460b      	mov	r3, r1
 8017ba2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017ba4:	78fb      	ldrb	r3, [r7, #3]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d002      	beq.n	8017bb0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8017baa:	78fb      	ldrb	r3, [r7, #3]
 8017bac:	2b02      	cmp	r3, #2
 8017bae:	d105      	bne.n	8017bbc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	78fa      	ldrb	r2, [r7, #3]
 8017bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8017bb8:	2301      	movs	r3, #1
 8017bba:	e027      	b.n	8017c0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8017bbc:	78fb      	ldrb	r3, [r7, #3]
 8017bbe:	2b01      	cmp	r3, #1
 8017bc0:	d123      	bne.n	8017c0a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d014      	beq.n	8017bf4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	3380      	adds	r3, #128	; 0x80
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	6878      	ldr	r0, [r7, #4]
 8017bd4:	4798      	blx	r3
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	461a      	mov	r2, r3
 8017bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bde:	429a      	cmp	r2, r3
 8017be0:	d008      	beq.n	8017bf4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017be2:	4b0c      	ldr	r3, [pc, #48]	; (8017c14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017be4:	781b      	ldrb	r3, [r3, #0]
 8017be6:	f083 0301 	eor.w	r3, r3, #1
 8017bea:	b2db      	uxtb	r3, r3
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d001      	beq.n	8017bf4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	e000      	b.n	8017bf6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d005      	beq.n	8017c06 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	78fa      	ldrb	r2, [r7, #3]
 8017bfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8017c02:	2301      	movs	r3, #1
 8017c04:	e002      	b.n	8017c0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8017c06:	2300      	movs	r3, #0
 8017c08:	e000      	b.n	8017c0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8017c0a:	2300      	movs	r3, #0
    }
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3708      	adds	r7, #8
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	2000bee8 	.word	0x2000bee8

08017c18 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8017c18:	b480      	push	{r7}
 8017c1a:	b083      	sub	sp, #12
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	683a      	ldr	r2, [r7, #0]
 8017c26:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8017c28:	bf00      	nop
 8017c2a:	370c      	adds	r7, #12
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c32:	4770      	bx	lr

08017c34 <__NVIC_EnableIRQ>:
{
 8017c34:	b480      	push	{r7}
 8017c36:	b083      	sub	sp, #12
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	db0d      	blt.n	8017c62 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c4a:	b2db      	uxtb	r3, r3
 8017c4c:	f003 021f 	and.w	r2, r3, #31
 8017c50:	4907      	ldr	r1, [pc, #28]	; (8017c70 <__NVIC_EnableIRQ+0x3c>)
 8017c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c56:	095b      	lsrs	r3, r3, #5
 8017c58:	2001      	movs	r0, #1
 8017c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8017c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017c62:	bf00      	nop
 8017c64:	370c      	adds	r7, #12
 8017c66:	46bd      	mov	sp, r7
 8017c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6c:	4770      	bx	lr
 8017c6e:	bf00      	nop
 8017c70:	e000e100 	.word	0xe000e100

08017c74 <__NVIC_DisableIRQ>:
{
 8017c74:	b480      	push	{r7}
 8017c76:	b083      	sub	sp, #12
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	db12      	blt.n	8017cac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	f003 021f 	and.w	r2, r3, #31
 8017c90:	4909      	ldr	r1, [pc, #36]	; (8017cb8 <__NVIC_DisableIRQ+0x44>)
 8017c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c96:	095b      	lsrs	r3, r3, #5
 8017c98:	2001      	movs	r0, #1
 8017c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8017c9e:	3320      	adds	r3, #32
 8017ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017ca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017ca8:	f3bf 8f6f 	isb	sy
}
 8017cac:	bf00      	nop
 8017cae:	370c      	adds	r7, #12
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb6:	4770      	bx	lr
 8017cb8:	e000e100 	.word	0xe000e100

08017cbc <__NVIC_SetPriority>:
{
 8017cbc:	b480      	push	{r7}
 8017cbe:	b083      	sub	sp, #12
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	6039      	str	r1, [r7, #0]
 8017cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	db0c      	blt.n	8017cea <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017cd0:	683b      	ldr	r3, [r7, #0]
 8017cd2:	b2db      	uxtb	r3, r3
 8017cd4:	4a0e      	ldr	r2, [pc, #56]	; (8017d10 <__NVIC_SetPriority+0x54>)
 8017cd6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8017cda:	4608      	mov	r0, r1
 8017cdc:	011b      	lsls	r3, r3, #4
 8017cde:	b2d9      	uxtb	r1, r3
 8017ce0:	1813      	adds	r3, r2, r0
 8017ce2:	460a      	mov	r2, r1
 8017ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017ce8:	e00c      	b.n	8017d04 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	b2da      	uxtb	r2, r3
 8017cee:	4909      	ldr	r1, [pc, #36]	; (8017d14 <__NVIC_SetPriority+0x58>)
 8017cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cf4:	b2db      	uxtb	r3, r3
 8017cf6:	f003 030f 	and.w	r3, r3, #15
 8017cfa:	3b04      	subs	r3, #4
 8017cfc:	0112      	lsls	r2, r2, #4
 8017cfe:	b2d2      	uxtb	r2, r2
 8017d00:	440b      	add	r3, r1
 8017d02:	761a      	strb	r2, [r3, #24]
}
 8017d04:	bf00      	nop
 8017d06:	370c      	adds	r7, #12
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0e:	4770      	bx	lr
 8017d10:	e000e100 	.word	0xe000e100
 8017d14:	e000ed00 	.word	0xe000ed00

08017d18 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8017d18:	b5b0      	push	{r4, r5, r7, lr}
 8017d1a:	b082      	sub	sp, #8
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	4618      	mov	r0, r3
 8017d24:	f001 fc88 	bl	8019638 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8017d28:	687d      	ldr	r5, [r7, #4]
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	334c      	adds	r3, #76	; 0x4c
 8017d30:	681c      	ldr	r4, [r3, #0]
 8017d32:	f004 fb13 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8017d36:	4603      	mov	r3, r0
 8017d38:	4619      	mov	r1, r3
 8017d3a:	4628      	mov	r0, r5
 8017d3c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	490d      	ldr	r1, [pc, #52]	; (8017d78 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7ff ff68 	bl	8017c18 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2101      	movs	r1, #1
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f7ff ff23 	bl	8017b98 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8017d52:	6878      	ldr	r0, [r7, #4]
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	3374      	adds	r3, #116	; 0x74
 8017d5a:	681c      	ldr	r4, [r3, #0]
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	2200      	movs	r2, #0
 8017d60:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8017d64:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	2101      	movs	r1, #1
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7ff fef1 	bl	8017b52 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8017d70:	bf00      	nop
 8017d72:	3708      	adds	r7, #8
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bdb0      	pop	{r4, r5, r7, pc}
 8017d78:	0801695d 	.word	0x0801695d

08017d7c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b082      	sub	sp, #8
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017d84:	2109      	movs	r1, #9
 8017d86:	205a      	movs	r0, #90	; 0x5a
 8017d88:	f7ff ff98 	bl	8017cbc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017d8c:	2109      	movs	r1, #9
 8017d8e:	2058      	movs	r0, #88	; 0x58
 8017d90:	f7ff ff94 	bl	8017cbc <__NVIC_SetPriority>
}
 8017d94:	bf00      	nop
 8017d96:	3708      	adds	r7, #8
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017da4:	205a      	movs	r0, #90	; 0x5a
 8017da6:	f7ff ff45 	bl	8017c34 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8017daa:	2058      	movs	r0, #88	; 0x58
 8017dac:	f7ff ff42 	bl	8017c34 <__NVIC_EnableIRQ>
}
 8017db0:	bf00      	nop
 8017db2:	3708      	adds	r7, #8
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}

08017db8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b082      	sub	sp, #8
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017dc0:	205a      	movs	r0, #90	; 0x5a
 8017dc2:	f7ff ff57 	bl	8017c74 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8017dc6:	2058      	movs	r0, #88	; 0x58
 8017dc8:	f7ff ff54 	bl	8017c74 <__NVIC_DisableIRQ>
}
 8017dcc:	bf00      	nop
 8017dce:	3708      	adds	r7, #8
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}

08017dd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017dd4:	b480      	push	{r7}
 8017dd6:	b083      	sub	sp, #12
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017ddc:	4b11      	ldr	r3, [pc, #68]	; (8017e24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	3b01      	subs	r3, #1
 8017dea:	b29a      	uxth	r2, r3
 8017dec:	4b0e      	ldr	r3, [pc, #56]	; (8017e28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017dee:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017df0:	4b0c      	ldr	r3, [pc, #48]	; (8017e24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017df2:	691b      	ldr	r3, [r3, #16]
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	3b01      	subs	r3, #1
 8017dfe:	b29a      	uxth	r2, r3
 8017e00:	4b0a      	ldr	r3, [pc, #40]	; (8017e2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8017e02:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8017e04:	4b08      	ldr	r3, [pc, #32]	; (8017e28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017e06:	881a      	ldrh	r2, [r3, #0]
 8017e08:	4b06      	ldr	r3, [pc, #24]	; (8017e24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8017e0c:	4b05      	ldr	r3, [pc, #20]	; (8017e24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e10:	4a04      	ldr	r2, [pc, #16]	; (8017e24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e12:	f043 0301 	orr.w	r3, r3, #1
 8017e16:	6353      	str	r3, [r2, #52]	; 0x34
}
 8017e18:	bf00      	nop
 8017e1a:	370c      	adds	r7, #12
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr
 8017e24:	40016800 	.word	0x40016800
 8017e28:	2000bed4 	.word	0x2000bed4
 8017e2c:	2000bed6 	.word	0x2000bed6

08017e30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8017e30:	b480      	push	{r7}
 8017e32:	b083      	sub	sp, #12
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8017e38:	4b03      	ldr	r3, [pc, #12]	; (8017e48 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8017e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	370c      	adds	r7, #12
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr
 8017e48:	40016884 	.word	0x40016884

08017e4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017e4c:	b480      	push	{r7}
 8017e4e:	b083      	sub	sp, #12
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8017e56:	4a06      	ldr	r2, [pc, #24]	; (8017e70 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017e5c:	4b05      	ldr	r3, [pc, #20]	; (8017e74 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8017e5e:	2201      	movs	r2, #1
 8017e60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017e62:	bf00      	nop
 8017e64:	370c      	adds	r7, #12
 8017e66:	46bd      	mov	sp, r7
 8017e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6c:	4770      	bx	lr
 8017e6e:	bf00      	nop
 8017e70:	40016884 	.word	0x40016884
 8017e74:	40016800 	.word	0x40016800

08017e78 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b082      	sub	sp, #8
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	6839      	ldr	r1, [r7, #0]
 8017e86:	4618      	mov	r0, r3
 8017e88:	f001 f8e6 	bl	8019058 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8017e8c:	bf00      	nop
 8017e8e:	3708      	adds	r7, #8
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}

08017e94 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8017e94:	b480      	push	{r7}
 8017e96:	b085      	sub	sp, #20
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017e9c:	4b0d      	ldr	r3, [pc, #52]	; (8017ed4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ea0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8017ea2:	4b0c      	ldr	r3, [pc, #48]	; (8017ed4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017ea4:	68db      	ldr	r3, [r3, #12]
 8017ea6:	b29b      	uxth	r3, r3
 8017ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017eac:	b29b      	uxth	r3, r3
 8017eae:	3301      	adds	r3, #1
 8017eb0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8017eb2:	89fa      	ldrh	r2, [r7, #14]
 8017eb4:	89bb      	ldrh	r3, [r7, #12]
 8017eb6:	429a      	cmp	r2, r3
 8017eb8:	d201      	bcs.n	8017ebe <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	e003      	b.n	8017ec6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8017ebe:	89fa      	ldrh	r2, [r7, #14]
 8017ec0:	89bb      	ldrh	r3, [r7, #12]
 8017ec2:	1ad3      	subs	r3, r2, r3
 8017ec4:	b29b      	uxth	r3, r3
    }
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3714      	adds	r7, #20
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr
 8017ed2:	bf00      	nop
 8017ed4:	40016800 	.word	0x40016800

08017ed8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b082      	sub	sp, #8
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8017ee0:	4b1a      	ldr	r3, [pc, #104]	; (8017f4c <HAL_LTDC_LineEventCallback+0x74>)
 8017ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ee4:	4a1a      	ldr	r2, [pc, #104]	; (8017f50 <HAL_LTDC_LineEventCallback+0x78>)
 8017ee6:	8812      	ldrh	r2, [r2, #0]
 8017ee8:	4293      	cmp	r3, r2
 8017eea:	bf0c      	ite	eq
 8017eec:	2301      	moveq	r3, #1
 8017eee:	2300      	movne	r3, #0
 8017ef0:	b2db      	uxtb	r3, r3
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d017      	beq.n	8017f26 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8017ef6:	4b17      	ldr	r3, [pc, #92]	; (8017f54 <HAL_LTDC_LineEventCallback+0x7c>)
 8017ef8:	881b      	ldrh	r3, [r3, #0]
 8017efa:	4619      	mov	r1, r3
 8017efc:	6878      	ldr	r0, [r7, #4]
 8017efe:	f7ee fcf1 	bl	80068e4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8017f02:	f7f8 fe09 	bl	8010b18 <_ZN8touchgfx3HAL11getInstanceEv>
 8017f06:	4603      	mov	r3, r0
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7ff fe32 	bl	8017b72 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8017f0e:	f7fe fce7 	bl	80168e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8017f12:	f7f8 fe01 	bl	8010b18 <_ZN8touchgfx3HAL11getInstanceEv>
 8017f16:	4603      	mov	r3, r0
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f001 fe15 	bl	8019b48 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8017f1e:	2000      	movs	r0, #0
 8017f20:	f7fe f9e8 	bl	80162f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8017f24:	e00e      	b.n	8017f44 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8017f26:	4b0a      	ldr	r3, [pc, #40]	; (8017f50 <HAL_LTDC_LineEventCallback+0x78>)
 8017f28:	881b      	ldrh	r3, [r3, #0]
 8017f2a:	4619      	mov	r1, r3
 8017f2c:	6878      	ldr	r0, [r7, #4]
 8017f2e:	f7ee fcd9 	bl	80068e4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8017f32:	2000      	movs	r0, #0
 8017f34:	f7fe f9e9 	bl	801630a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8017f38:	f7f8 fdee 	bl	8010b18 <_ZN8touchgfx3HAL11getInstanceEv>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7ff fdf9 	bl	8017b36 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8017f44:	bf00      	nop
 8017f46:	3708      	adds	r7, #8
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	40016800 	.word	0x40016800
 8017f50:	2000bed4 	.word	0x2000bed4
 8017f54:	2000bed6 	.word	0x2000bed6

08017f58 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b082      	sub	sp, #8
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	4603      	mov	r3, r0
 8017f60:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8017f62:	20c8      	movs	r0, #200	; 0xc8
 8017f64:	f7f7 fde6 	bl	800fb34 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8017f68:	f000 fa7a 	bl	8018460 <ft5336_I2C_InitializeIfRequired>
}
 8017f6c:	bf00      	nop
 8017f6e:	3708      	adds	r7, #8
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}

08017f74 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8017f74:	b480      	push	{r7}
 8017f76:	b083      	sub	sp, #12
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8017f7e:	bf00      	nop
 8017f80:	370c      	adds	r7, #12
 8017f82:	46bd      	mov	sp, r7
 8017f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f88:	4770      	bx	lr

08017f8a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8017f8a:	b580      	push	{r7, lr}
 8017f8c:	b084      	sub	sp, #16
 8017f8e:	af00      	add	r7, sp, #0
 8017f90:	4603      	mov	r3, r0
 8017f92:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8017f94:	2300      	movs	r3, #0
 8017f96:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8017fa0:	f000 fa5e 	bl	8018460 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	73fb      	strb	r3, [r7, #15]
 8017fa8:	e010      	b.n	8017fcc <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8017faa:	88fb      	ldrh	r3, [r7, #6]
 8017fac:	b2db      	uxtb	r3, r3
 8017fae:	21a8      	movs	r1, #168	; 0xa8
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7f7 fda1 	bl	800faf8 <TS_IO_Read>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8017fba:	7b7b      	ldrb	r3, [r7, #13]
 8017fbc:	b2db      	uxtb	r3, r3
 8017fbe:	2b51      	cmp	r3, #81	; 0x51
 8017fc0:	d101      	bne.n	8017fc6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8017fc2:	2301      	movs	r3, #1
 8017fc4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8017fc6:	7bfb      	ldrb	r3, [r7, #15]
 8017fc8:	3301      	adds	r3, #1
 8017fca:	73fb      	strb	r3, [r7, #15]
 8017fcc:	7bfb      	ldrb	r3, [r7, #15]
 8017fce:	2b02      	cmp	r3, #2
 8017fd0:	d802      	bhi.n	8017fd8 <ft5336_ReadID+0x4e>
 8017fd2:	7bbb      	ldrb	r3, [r7, #14]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d0e8      	beq.n	8017faa <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8017fd8:	7b7b      	ldrb	r3, [r7, #13]
 8017fda:	b2db      	uxtb	r3, r3
 8017fdc:	b29b      	uxth	r3, r3
}
 8017fde:	4618      	mov	r0, r3
 8017fe0:	3710      	adds	r7, #16
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}

08017fe6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8017fe6:	b580      	push	{r7, lr}
 8017fe8:	b082      	sub	sp, #8
 8017fea:	af00      	add	r7, sp, #0
 8017fec:	4603      	mov	r3, r0
 8017fee:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8017ff0:	88fb      	ldrh	r3, [r7, #6]
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f000 fa44 	bl	8018480 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8017ff8:	88fb      	ldrh	r3, [r7, #6]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f000 f932 	bl	8018264 <ft5336_TS_DisableIT>
}
 8018000:	bf00      	nop
 8018002:	3708      	adds	r7, #8
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}

08018008 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b084      	sub	sp, #16
 801800c:	af00      	add	r7, sp, #0
 801800e:	4603      	mov	r3, r0
 8018010:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8018012:	2300      	movs	r3, #0
 8018014:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8018016:	88fb      	ldrh	r3, [r7, #6]
 8018018:	b2db      	uxtb	r3, r3
 801801a:	2102      	movs	r1, #2
 801801c:	4618      	mov	r0, r3
 801801e:	f7f7 fd6b 	bl	800faf8 <TS_IO_Read>
 8018022:	4603      	mov	r3, r0
 8018024:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8018026:	7bfb      	ldrb	r3, [r7, #15]
 8018028:	b2db      	uxtb	r3, r3
 801802a:	f003 030f 	and.w	r3, r3, #15
 801802e:	b2db      	uxtb	r3, r3
 8018030:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8018032:	7bfb      	ldrb	r3, [r7, #15]
 8018034:	b2db      	uxtb	r3, r3
 8018036:	2b05      	cmp	r3, #5
 8018038:	d901      	bls.n	801803e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 801803a:	2300      	movs	r3, #0
 801803c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 801803e:	7bfb      	ldrb	r3, [r7, #15]
 8018040:	b2da      	uxtb	r2, r3
 8018042:	4b05      	ldr	r3, [pc, #20]	; (8018058 <ft5336_TS_DetectTouch+0x50>)
 8018044:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8018046:	4b04      	ldr	r3, [pc, #16]	; (8018058 <ft5336_TS_DetectTouch+0x50>)
 8018048:	2200      	movs	r2, #0
 801804a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 801804c:	7bfb      	ldrb	r3, [r7, #15]
 801804e:	b2db      	uxtb	r3, r3
}
 8018050:	4618      	mov	r0, r3
 8018052:	3710      	adds	r7, #16
 8018054:	46bd      	mov	sp, r7
 8018056:	bd80      	pop	{r7, pc}
 8018058:	2000bed8 	.word	0x2000bed8

0801805c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b086      	sub	sp, #24
 8018060:	af00      	add	r7, sp, #0
 8018062:	4603      	mov	r3, r0
 8018064:	60b9      	str	r1, [r7, #8]
 8018066:	607a      	str	r2, [r7, #4]
 8018068:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801806a:	2300      	movs	r3, #0
 801806c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 801806e:	2300      	movs	r3, #0
 8018070:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8018072:	2300      	movs	r3, #0
 8018074:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8018076:	2300      	movs	r3, #0
 8018078:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 801807a:	2300      	movs	r3, #0
 801807c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 801807e:	4b6d      	ldr	r3, [pc, #436]	; (8018234 <ft5336_TS_GetXY+0x1d8>)
 8018080:	789a      	ldrb	r2, [r3, #2]
 8018082:	4b6c      	ldr	r3, [pc, #432]	; (8018234 <ft5336_TS_GetXY+0x1d8>)
 8018084:	785b      	ldrb	r3, [r3, #1]
 8018086:	429a      	cmp	r2, r3
 8018088:	f080 80cf 	bcs.w	801822a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 801808c:	4b69      	ldr	r3, [pc, #420]	; (8018234 <ft5336_TS_GetXY+0x1d8>)
 801808e:	789b      	ldrb	r3, [r3, #2]
 8018090:	2b09      	cmp	r3, #9
 8018092:	d871      	bhi.n	8018178 <ft5336_TS_GetXY+0x11c>
 8018094:	a201      	add	r2, pc, #4	; (adr r2, 801809c <ft5336_TS_GetXY+0x40>)
 8018096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801809a:	bf00      	nop
 801809c:	080180c5 	.word	0x080180c5
 80180a0:	080180d7 	.word	0x080180d7
 80180a4:	080180e9 	.word	0x080180e9
 80180a8:	080180fb 	.word	0x080180fb
 80180ac:	0801810d 	.word	0x0801810d
 80180b0:	0801811f 	.word	0x0801811f
 80180b4:	08018131 	.word	0x08018131
 80180b8:	08018143 	.word	0x08018143
 80180bc:	08018155 	.word	0x08018155
 80180c0:	08018167 	.word	0x08018167
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80180c4:	2304      	movs	r3, #4
 80180c6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80180c8:	2303      	movs	r3, #3
 80180ca:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80180cc:	2306      	movs	r3, #6
 80180ce:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80180d0:	2305      	movs	r3, #5
 80180d2:	753b      	strb	r3, [r7, #20]
      break;
 80180d4:	e051      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80180d6:	230a      	movs	r3, #10
 80180d8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80180da:	2309      	movs	r3, #9
 80180dc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80180de:	230c      	movs	r3, #12
 80180e0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80180e2:	230b      	movs	r3, #11
 80180e4:	753b      	strb	r3, [r7, #20]
      break;
 80180e6:	e048      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80180e8:	2310      	movs	r3, #16
 80180ea:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80180ec:	230f      	movs	r3, #15
 80180ee:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80180f0:	2312      	movs	r3, #18
 80180f2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80180f4:	2311      	movs	r3, #17
 80180f6:	753b      	strb	r3, [r7, #20]
      break;
 80180f8:	e03f      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80180fa:	2316      	movs	r3, #22
 80180fc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80180fe:	2315      	movs	r3, #21
 8018100:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8018102:	2318      	movs	r3, #24
 8018104:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8018106:	2317      	movs	r3, #23
 8018108:	753b      	strb	r3, [r7, #20]
      break;
 801810a:	e036      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 801810c:	231c      	movs	r3, #28
 801810e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8018110:	231b      	movs	r3, #27
 8018112:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8018114:	231e      	movs	r3, #30
 8018116:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8018118:	231d      	movs	r3, #29
 801811a:	753b      	strb	r3, [r7, #20]
      break;
 801811c:	e02d      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 801811e:	2322      	movs	r3, #34	; 0x22
 8018120:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8018122:	2321      	movs	r3, #33	; 0x21
 8018124:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8018126:	2324      	movs	r3, #36	; 0x24
 8018128:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 801812a:	2323      	movs	r3, #35	; 0x23
 801812c:	753b      	strb	r3, [r7, #20]
      break;
 801812e:	e024      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8018130:	2328      	movs	r3, #40	; 0x28
 8018132:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8018134:	2327      	movs	r3, #39	; 0x27
 8018136:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8018138:	232a      	movs	r3, #42	; 0x2a
 801813a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 801813c:	2329      	movs	r3, #41	; 0x29
 801813e:	753b      	strb	r3, [r7, #20]
      break;
 8018140:	e01b      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8018142:	232e      	movs	r3, #46	; 0x2e
 8018144:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8018146:	232d      	movs	r3, #45	; 0x2d
 8018148:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 801814a:	2330      	movs	r3, #48	; 0x30
 801814c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 801814e:	232f      	movs	r3, #47	; 0x2f
 8018150:	753b      	strb	r3, [r7, #20]
      break;
 8018152:	e012      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8018154:	2334      	movs	r3, #52	; 0x34
 8018156:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8018158:	2333      	movs	r3, #51	; 0x33
 801815a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 801815c:	2336      	movs	r3, #54	; 0x36
 801815e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8018160:	2335      	movs	r3, #53	; 0x35
 8018162:	753b      	strb	r3, [r7, #20]
      break;
 8018164:	e009      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8018166:	233a      	movs	r3, #58	; 0x3a
 8018168:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 801816a:	2339      	movs	r3, #57	; 0x39
 801816c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 801816e:	233c      	movs	r3, #60	; 0x3c
 8018170:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8018172:	233b      	movs	r3, #59	; 0x3b
 8018174:	753b      	strb	r3, [r7, #20]
      break;
 8018176:	e000      	b.n	801817a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8018178:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 801817a:	89fb      	ldrh	r3, [r7, #14]
 801817c:	b2db      	uxtb	r3, r3
 801817e:	7dfa      	ldrb	r2, [r7, #23]
 8018180:	4611      	mov	r1, r2
 8018182:	4618      	mov	r0, r3
 8018184:	f7f7 fcb8 	bl	800faf8 <TS_IO_Read>
 8018188:	4603      	mov	r3, r0
 801818a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801818c:	7cfb      	ldrb	r3, [r7, #19]
 801818e:	b2db      	uxtb	r3, r3
 8018190:	b29a      	uxth	r2, r3
 8018192:	4b29      	ldr	r3, [pc, #164]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 8018194:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8018196:	89fb      	ldrh	r3, [r7, #14]
 8018198:	b2db      	uxtb	r3, r3
 801819a:	7dba      	ldrb	r2, [r7, #22]
 801819c:	4611      	mov	r1, r2
 801819e:	4618      	mov	r0, r3
 80181a0:	f7f7 fcaa 	bl	800faf8 <TS_IO_Read>
 80181a4:	4603      	mov	r3, r0
 80181a6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80181a8:	7cfb      	ldrb	r3, [r7, #19]
 80181aa:	b2db      	uxtb	r3, r3
 80181ac:	021b      	lsls	r3, r3, #8
 80181ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80181b2:	b21a      	sxth	r2, r3
 80181b4:	4b20      	ldr	r3, [pc, #128]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 80181b6:	881b      	ldrh	r3, [r3, #0]
 80181b8:	b21b      	sxth	r3, r3
 80181ba:	4313      	orrs	r3, r2
 80181bc:	b21b      	sxth	r3, r3
 80181be:	b29a      	uxth	r2, r3
 80181c0:	4b1d      	ldr	r3, [pc, #116]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 80181c2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80181c4:	4b1c      	ldr	r3, [pc, #112]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 80181c6:	881a      	ldrh	r2, [r3, #0]
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80181cc:	89fb      	ldrh	r3, [r7, #14]
 80181ce:	b2db      	uxtb	r3, r3
 80181d0:	7d7a      	ldrb	r2, [r7, #21]
 80181d2:	4611      	mov	r1, r2
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7f7 fc8f 	bl	800faf8 <TS_IO_Read>
 80181da:	4603      	mov	r3, r0
 80181dc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80181de:	7cfb      	ldrb	r3, [r7, #19]
 80181e0:	b2db      	uxtb	r3, r3
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	4b14      	ldr	r3, [pc, #80]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 80181e6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80181e8:	89fb      	ldrh	r3, [r7, #14]
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	7d3a      	ldrb	r2, [r7, #20]
 80181ee:	4611      	mov	r1, r2
 80181f0:	4618      	mov	r0, r3
 80181f2:	f7f7 fc81 	bl	800faf8 <TS_IO_Read>
 80181f6:	4603      	mov	r3, r0
 80181f8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80181fa:	7cfb      	ldrb	r3, [r7, #19]
 80181fc:	b2db      	uxtb	r3, r3
 80181fe:	021b      	lsls	r3, r3, #8
 8018200:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8018204:	b21a      	sxth	r2, r3
 8018206:	4b0c      	ldr	r3, [pc, #48]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 8018208:	881b      	ldrh	r3, [r3, #0]
 801820a:	b21b      	sxth	r3, r3
 801820c:	4313      	orrs	r3, r2
 801820e:	b21b      	sxth	r3, r3
 8018210:	b29a      	uxth	r2, r3
 8018212:	4b09      	ldr	r3, [pc, #36]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 8018214:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8018216:	4b08      	ldr	r3, [pc, #32]	; (8018238 <ft5336_TS_GetXY+0x1dc>)
 8018218:	881a      	ldrh	r2, [r3, #0]
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801821e:	4b05      	ldr	r3, [pc, #20]	; (8018234 <ft5336_TS_GetXY+0x1d8>)
 8018220:	789b      	ldrb	r3, [r3, #2]
 8018222:	3301      	adds	r3, #1
 8018224:	b2da      	uxtb	r2, r3
 8018226:	4b03      	ldr	r3, [pc, #12]	; (8018234 <ft5336_TS_GetXY+0x1d8>)
 8018228:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 801822a:	bf00      	nop
 801822c:	3718      	adds	r7, #24
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	2000bed8 	.word	0x2000bed8
 8018238:	2000bedc 	.word	0x2000bedc

0801823c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b084      	sub	sp, #16
 8018240:	af00      	add	r7, sp, #0
 8018242:	4603      	mov	r3, r0
 8018244:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8018246:	2300      	movs	r3, #0
 8018248:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801824a:	2301      	movs	r3, #1
 801824c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801824e:	88fb      	ldrh	r3, [r7, #6]
 8018250:	b2db      	uxtb	r3, r3
 8018252:	7bfa      	ldrb	r2, [r7, #15]
 8018254:	21a4      	movs	r1, #164	; 0xa4
 8018256:	4618      	mov	r0, r3
 8018258:	f7f7 fc34 	bl	800fac4 <TS_IO_Write>
}
 801825c:	bf00      	nop
 801825e:	3710      	adds	r7, #16
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}

08018264 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b084      	sub	sp, #16
 8018268:	af00      	add	r7, sp, #0
 801826a:	4603      	mov	r3, r0
 801826c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 801826e:	2300      	movs	r3, #0
 8018270:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8018272:	2300      	movs	r3, #0
 8018274:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8018276:	88fb      	ldrh	r3, [r7, #6]
 8018278:	b2db      	uxtb	r3, r3
 801827a:	7bfa      	ldrb	r2, [r7, #15]
 801827c:	21a4      	movs	r1, #164	; 0xa4
 801827e:	4618      	mov	r0, r3
 8018280:	f7f7 fc20 	bl	800fac4 <TS_IO_Write>
}
 8018284:	bf00      	nop
 8018286:	3710      	adds	r7, #16
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}

0801828c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 801828c:	b480      	push	{r7}
 801828e:	b083      	sub	sp, #12
 8018290:	af00      	add	r7, sp, #0
 8018292:	4603      	mov	r3, r0
 8018294:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8018296:	2300      	movs	r3, #0
}
 8018298:	4618      	mov	r0, r3
 801829a:	370c      	adds	r7, #12
 801829c:	46bd      	mov	sp, r7
 801829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a2:	4770      	bx	lr

080182a4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80182a4:	b480      	push	{r7}
 80182a6:	b083      	sub	sp, #12
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	4603      	mov	r3, r0
 80182ac:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80182ae:	bf00      	nop
 80182b0:	370c      	adds	r7, #12
 80182b2:	46bd      	mov	sp, r7
 80182b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b8:	4770      	bx	lr

080182ba <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80182ba:	b580      	push	{r7, lr}
 80182bc:	b084      	sub	sp, #16
 80182be:	af00      	add	r7, sp, #0
 80182c0:	4603      	mov	r3, r0
 80182c2:	6039      	str	r1, [r7, #0]
 80182c4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80182c6:	2300      	movs	r3, #0
 80182c8:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80182ca:	88fb      	ldrh	r3, [r7, #6]
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	2101      	movs	r1, #1
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7f7 fc11 	bl	800faf8 <TS_IO_Read>
 80182d6:	4603      	mov	r3, r0
 80182d8:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80182da:	7bfb      	ldrb	r3, [r7, #15]
 80182dc:	b2db      	uxtb	r3, r3
 80182de:	461a      	mov	r2, r3
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	601a      	str	r2, [r3, #0]
}
 80182e4:	bf00      	nop
 80182e6:	3710      	adds	r7, #16
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}

080182ec <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b086      	sub	sp, #24
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	60b9      	str	r1, [r7, #8]
 80182f4:	607a      	str	r2, [r7, #4]
 80182f6:	603b      	str	r3, [r7, #0]
 80182f8:	4603      	mov	r3, r0
 80182fa:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80182fc:	2300      	movs	r3, #0
 80182fe:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8018300:	2300      	movs	r3, #0
 8018302:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8018304:	2300      	movs	r3, #0
 8018306:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8018308:	2300      	movs	r3, #0
 801830a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 801830c:	4b4d      	ldr	r3, [pc, #308]	; (8018444 <ft5336_TS_GetTouchInfo+0x158>)
 801830e:	785b      	ldrb	r3, [r3, #1]
 8018310:	461a      	mov	r2, r3
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	4293      	cmp	r3, r2
 8018316:	f080 8090 	bcs.w	801843a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 801831a:	68bb      	ldr	r3, [r7, #8]
 801831c:	2b09      	cmp	r3, #9
 801831e:	d85d      	bhi.n	80183dc <ft5336_TS_GetTouchInfo+0xf0>
 8018320:	a201      	add	r2, pc, #4	; (adr r2, 8018328 <ft5336_TS_GetTouchInfo+0x3c>)
 8018322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018326:	bf00      	nop
 8018328:	08018351 	.word	0x08018351
 801832c:	0801835f 	.word	0x0801835f
 8018330:	0801836d 	.word	0x0801836d
 8018334:	0801837b 	.word	0x0801837b
 8018338:	08018389 	.word	0x08018389
 801833c:	08018397 	.word	0x08018397
 8018340:	080183a5 	.word	0x080183a5
 8018344:	080183b3 	.word	0x080183b3
 8018348:	080183c1 	.word	0x080183c1
 801834c:	080183cf 	.word	0x080183cf
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8018350:	2303      	movs	r3, #3
 8018352:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8018354:	2307      	movs	r3, #7
 8018356:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8018358:	2308      	movs	r3, #8
 801835a:	757b      	strb	r3, [r7, #21]
      break;
 801835c:	e03f      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 801835e:	2309      	movs	r3, #9
 8018360:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8018362:	230d      	movs	r3, #13
 8018364:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8018366:	230e      	movs	r3, #14
 8018368:	757b      	strb	r3, [r7, #21]
      break;
 801836a:	e038      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 801836c:	230f      	movs	r3, #15
 801836e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8018370:	2313      	movs	r3, #19
 8018372:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8018374:	2314      	movs	r3, #20
 8018376:	757b      	strb	r3, [r7, #21]
      break;
 8018378:	e031      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 801837a:	2315      	movs	r3, #21
 801837c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 801837e:	2319      	movs	r3, #25
 8018380:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8018382:	231a      	movs	r3, #26
 8018384:	757b      	strb	r3, [r7, #21]
      break;
 8018386:	e02a      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8018388:	231b      	movs	r3, #27
 801838a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 801838c:	231f      	movs	r3, #31
 801838e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8018390:	2320      	movs	r3, #32
 8018392:	757b      	strb	r3, [r7, #21]
      break;
 8018394:	e023      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8018396:	2321      	movs	r3, #33	; 0x21
 8018398:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 801839a:	2325      	movs	r3, #37	; 0x25
 801839c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 801839e:	2326      	movs	r3, #38	; 0x26
 80183a0:	757b      	strb	r3, [r7, #21]
      break;
 80183a2:	e01c      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80183a4:	2327      	movs	r3, #39	; 0x27
 80183a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80183a8:	232b      	movs	r3, #43	; 0x2b
 80183aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80183ac:	232c      	movs	r3, #44	; 0x2c
 80183ae:	757b      	strb	r3, [r7, #21]
      break;
 80183b0:	e015      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80183b2:	232d      	movs	r3, #45	; 0x2d
 80183b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80183b6:	2331      	movs	r3, #49	; 0x31
 80183b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80183ba:	2332      	movs	r3, #50	; 0x32
 80183bc:	757b      	strb	r3, [r7, #21]
      break;
 80183be:	e00e      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80183c0:	2333      	movs	r3, #51	; 0x33
 80183c2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80183c4:	2337      	movs	r3, #55	; 0x37
 80183c6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80183c8:	2338      	movs	r3, #56	; 0x38
 80183ca:	757b      	strb	r3, [r7, #21]
      break;
 80183cc:	e007      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80183ce:	2339      	movs	r3, #57	; 0x39
 80183d0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80183d2:	233d      	movs	r3, #61	; 0x3d
 80183d4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80183d6:	233e      	movs	r3, #62	; 0x3e
 80183d8:	757b      	strb	r3, [r7, #21]
      break;
 80183da:	e000      	b.n	80183de <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80183dc:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80183de:	89fb      	ldrh	r3, [r7, #14]
 80183e0:	b2db      	uxtb	r3, r3
 80183e2:	7dfa      	ldrb	r2, [r7, #23]
 80183e4:	4611      	mov	r1, r2
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7f7 fb86 	bl	800faf8 <TS_IO_Read>
 80183ec:	4603      	mov	r3, r0
 80183ee:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80183f0:	7d3b      	ldrb	r3, [r7, #20]
 80183f2:	b2db      	uxtb	r3, r3
 80183f4:	119b      	asrs	r3, r3, #6
 80183f6:	f003 0203 	and.w	r2, r3, #3
 80183fa:	6a3b      	ldr	r3, [r7, #32]
 80183fc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80183fe:	89fb      	ldrh	r3, [r7, #14]
 8018400:	b2db      	uxtb	r3, r3
 8018402:	7dba      	ldrb	r2, [r7, #22]
 8018404:	4611      	mov	r1, r2
 8018406:	4618      	mov	r0, r3
 8018408:	f7f7 fb76 	bl	800faf8 <TS_IO_Read>
 801840c:	4603      	mov	r3, r0
 801840e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8018410:	7d3b      	ldrb	r3, [r7, #20]
 8018412:	b2db      	uxtb	r3, r3
 8018414:	461a      	mov	r2, r3
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 801841a:	89fb      	ldrh	r3, [r7, #14]
 801841c:	b2db      	uxtb	r3, r3
 801841e:	7d7a      	ldrb	r2, [r7, #21]
 8018420:	4611      	mov	r1, r2
 8018422:	4618      	mov	r0, r3
 8018424:	f7f7 fb68 	bl	800faf8 <TS_IO_Read>
 8018428:	4603      	mov	r3, r0
 801842a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 801842c:	7d3b      	ldrb	r3, [r7, #20]
 801842e:	b2db      	uxtb	r3, r3
 8018430:	111b      	asrs	r3, r3, #4
 8018432:	f003 0204 	and.w	r2, r3, #4
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 801843a:	bf00      	nop
 801843c:	3718      	adds	r7, #24
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}
 8018442:	bf00      	nop
 8018444:	2000bed8 	.word	0x2000bed8

08018448 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8018448:	b480      	push	{r7}
 801844a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 801844c:	4b03      	ldr	r3, [pc, #12]	; (801845c <ft5336_Get_I2C_InitializedStatus+0x14>)
 801844e:	781b      	ldrb	r3, [r3, #0]
}
 8018450:	4618      	mov	r0, r3
 8018452:	46bd      	mov	sp, r7
 8018454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018458:	4770      	bx	lr
 801845a:	bf00      	nop
 801845c:	2000bed8 	.word	0x2000bed8

08018460 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8018464:	f7ff fff0 	bl	8018448 <ft5336_Get_I2C_InitializedStatus>
 8018468:	4603      	mov	r3, r0
 801846a:	2b00      	cmp	r3, #0
 801846c:	d104      	bne.n	8018478 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 801846e:	f7f7 fb1f 	bl	800fab0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8018472:	4b02      	ldr	r3, [pc, #8]	; (801847c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8018474:	2201      	movs	r2, #1
 8018476:	701a      	strb	r2, [r3, #0]
  }
}
 8018478:	bf00      	nop
 801847a:	bd80      	pop	{r7, pc}
 801847c:	2000bed8 	.word	0x2000bed8

08018480 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8018480:	b480      	push	{r7}
 8018482:	b085      	sub	sp, #20
 8018484:	af00      	add	r7, sp, #0
 8018486:	4603      	mov	r3, r0
 8018488:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 801848a:	2300      	movs	r3, #0
 801848c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801848e:	68fb      	ldr	r3, [r7, #12]
}
 8018490:	4618      	mov	r0, r3
 8018492:	3714      	adds	r7, #20
 8018494:	46bd      	mov	sp, r7
 8018496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849a:	4770      	bx	lr

0801849c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801849c:	8880      	ldrh	r0, [r0, #4]
 801849e:	4770      	bx	lr

080184a0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80184a0:	2300      	movs	r3, #0
 80184a2:	8083      	strh	r3, [r0, #4]
 80184a4:	4770      	bx	lr
	...

080184a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80184a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184aa:	6803      	ldr	r3, [r0, #0]
 80184ac:	460e      	mov	r6, r1
 80184ae:	2100      	movs	r1, #0
 80184b0:	4605      	mov	r5, r0
 80184b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184b4:	4798      	blx	r3
 80184b6:	4604      	mov	r4, r0
 80184b8:	682b      	ldr	r3, [r5, #0]
 80184ba:	4628      	mov	r0, r5
 80184bc:	1b34      	subs	r4, r6, r4
 80184be:	6a1b      	ldr	r3, [r3, #32]
 80184c0:	b2a4      	uxth	r4, r4
 80184c2:	4798      	blx	r3
 80184c4:	88ab      	ldrh	r3, [r5, #4]
 80184c6:	fbb4 f4f0 	udiv	r4, r4, r0
 80184ca:	42a3      	cmp	r3, r4
 80184cc:	d805      	bhi.n	80184da <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80184ce:	4b0e      	ldr	r3, [pc, #56]	; (8018508 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80184d0:	211e      	movs	r1, #30
 80184d2:	4a0e      	ldr	r2, [pc, #56]	; (801850c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80184d4:	480e      	ldr	r0, [pc, #56]	; (8018510 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80184d6:	f00f ff6f 	bl	80283b8 <__assert_func>
 80184da:	682b      	ldr	r3, [r5, #0]
 80184dc:	2100      	movs	r1, #0
 80184de:	4628      	mov	r0, r5
 80184e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184e2:	4798      	blx	r3
 80184e4:	682b      	ldr	r3, [r5, #0]
 80184e6:	4607      	mov	r7, r0
 80184e8:	4628      	mov	r0, r5
 80184ea:	6a1b      	ldr	r3, [r3, #32]
 80184ec:	4798      	blx	r3
 80184ee:	1bf3      	subs	r3, r6, r7
 80184f0:	b29b      	uxth	r3, r3
 80184f2:	fbb3 f2f0 	udiv	r2, r3, r0
 80184f6:	fb02 3010 	mls	r0, r2, r0, r3
 80184fa:	b118      	cbz	r0, 8018504 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80184fc:	4b05      	ldr	r3, [pc, #20]	; (8018514 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80184fe:	211f      	movs	r1, #31
 8018500:	4a02      	ldr	r2, [pc, #8]	; (801850c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018502:	e7e7      	b.n	80184d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8018504:	4620      	mov	r0, r4
 8018506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018508:	0802ab70 	.word	0x0802ab70
 801850c:	0802acde 	.word	0x0802acde
 8018510:	0802ab85 	.word	0x0802ab85
 8018514:	0802abb3 	.word	0x0802abb3

08018518 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	6803      	ldr	r3, [r0, #0]
 801851c:	460d      	mov	r5, r1
 801851e:	4604      	mov	r4, r0
 8018520:	6a1b      	ldr	r3, [r3, #32]
 8018522:	4798      	blx	r3
 8018524:	4285      	cmp	r5, r0
 8018526:	d905      	bls.n	8018534 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8018528:	4b0c      	ldr	r3, [pc, #48]	; (801855c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801852a:	212f      	movs	r1, #47	; 0x2f
 801852c:	4a0c      	ldr	r2, [pc, #48]	; (8018560 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801852e:	480d      	ldr	r0, [pc, #52]	; (8018564 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8018530:	f00f ff42 	bl	80283b8 <__assert_func>
 8018534:	6823      	ldr	r3, [r4, #0]
 8018536:	4620      	mov	r0, r4
 8018538:	88a5      	ldrh	r5, [r4, #4]
 801853a:	69db      	ldr	r3, [r3, #28]
 801853c:	4798      	blx	r3
 801853e:	4285      	cmp	r5, r0
 8018540:	d303      	bcc.n	801854a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8018542:	4b09      	ldr	r3, [pc, #36]	; (8018568 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8018544:	2130      	movs	r1, #48	; 0x30
 8018546:	4a06      	ldr	r2, [pc, #24]	; (8018560 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018548:	e7f1      	b.n	801852e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801854a:	6823      	ldr	r3, [r4, #0]
 801854c:	4620      	mov	r0, r4
 801854e:	88a1      	ldrh	r1, [r4, #4]
 8018550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018552:	4798      	blx	r3
 8018554:	88a3      	ldrh	r3, [r4, #4]
 8018556:	3301      	adds	r3, #1
 8018558:	80a3      	strh	r3, [r4, #4]
 801855a:	bd38      	pop	{r3, r4, r5, pc}
 801855c:	0802ac2d 	.word	0x0802ac2d
 8018560:	0802ad21 	.word	0x0802ad21
 8018564:	0802ab85 	.word	0x0802ab85
 8018568:	0802ac44 	.word	0x0802ac44

0801856c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801856c:	b570      	push	{r4, r5, r6, lr}
 801856e:	6803      	ldr	r3, [r0, #0]
 8018570:	4616      	mov	r6, r2
 8018572:	4604      	mov	r4, r0
 8018574:	460d      	mov	r5, r1
 8018576:	6a1b      	ldr	r3, [r3, #32]
 8018578:	4798      	blx	r3
 801857a:	4286      	cmp	r6, r0
 801857c:	d905      	bls.n	801858a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801857e:	4b06      	ldr	r3, [pc, #24]	; (8018598 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8018580:	2139      	movs	r1, #57	; 0x39
 8018582:	4a06      	ldr	r2, [pc, #24]	; (801859c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8018584:	4806      	ldr	r0, [pc, #24]	; (80185a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8018586:	f00f ff17 	bl	80283b8 <__assert_func>
 801858a:	6823      	ldr	r3, [r4, #0]
 801858c:	4629      	mov	r1, r5
 801858e:	4620      	mov	r0, r4
 8018590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018596:	4718      	bx	r3
 8018598:	0802ac2d 	.word	0x0802ac2d
 801859c:	0802ac94 	.word	0x0802ac94
 80185a0:	0802ab85 	.word	0x0802ab85

080185a4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80185a4:	4770      	bx	lr
	...

080185a8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80185a8:	4a02      	ldr	r2, [pc, #8]	; (80185b4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80185aa:	6002      	str	r2, [r0, #0]
 80185ac:	2200      	movs	r2, #0
 80185ae:	8082      	strh	r2, [r0, #4]
 80185b0:	4770      	bx	lr
 80185b2:	bf00      	nop
 80185b4:	0802ac68 	.word	0x0802ac68

080185b8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80185b8:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 80185bc:	4770      	bx	lr

080185be <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80185be:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80185c2:	4770      	bx	lr

080185c4 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80185c4:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 80185c8:	4770      	bx	lr

080185ca <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 80185ca:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 80185ce:	4770      	bx	lr

080185d0 <_ZN8touchgfx11BoxProgressD1Ev>:
 80185d0:	4b03      	ldr	r3, [pc, #12]	; (80185e0 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 80185d2:	b510      	push	{r4, lr}
 80185d4:	4604      	mov	r4, r0
 80185d6:	6003      	str	r3, [r0, #0]
 80185d8:	f000 f8b6 	bl	8018748 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80185dc:	4620      	mov	r0, r4
 80185de:	bd10      	pop	{r4, pc}
 80185e0:	0802ad68 	.word	0x0802ad68

080185e4 <_ZN8touchgfx11BoxProgressD0Ev>:
 80185e4:	b510      	push	{r4, lr}
 80185e6:	4604      	mov	r4, r0
 80185e8:	f7ff fff2 	bl	80185d0 <_ZN8touchgfx11BoxProgressD1Ev>
 80185ec:	21c0      	movs	r1, #192	; 0xc0
 80185ee:	4620      	mov	r0, r4
 80185f0:	f00f feb7 	bl	8028362 <_ZdlPvj>
 80185f4:	4620      	mov	r0, r4
 80185f6:	bd10      	pop	{r4, pc}

080185f8 <_ZN8touchgfx11BoxProgressC1Ev>:
 80185f8:	b510      	push	{r4, lr}
 80185fa:	4604      	mov	r4, r0
 80185fc:	f000 f8b8 	bl	8018770 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8018600:	2201      	movs	r2, #1
 8018602:	4b16      	ldr	r3, [pc, #88]	; (801865c <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8018604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018608:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801860c:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8018610:	4a13      	ldr	r2, [pc, #76]	; (8018660 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8018612:	6023      	str	r3, [r4, #0]
 8018614:	2300      	movs	r3, #0
 8018616:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801861a:	22ff      	movs	r2, #255	; 0xff
 801861c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8018620:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8018624:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8018628:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 801862c:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8018630:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8018634:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8018638:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801863c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8018640:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018644:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8018648:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801864c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8018650:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8018654:	f000 fbb8 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018658:	4620      	mov	r0, r4
 801865a:	bd10      	pop	{r4, pc}
 801865c:	0802ad68 	.word	0x0802ad68
 8018660:	0802c090 	.word	0x0802c090

08018664 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8018664:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018668:	4617      	mov	r7, r2
 801866a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801866e:	2200      	movs	r2, #0
 8018670:	4604      	mov	r4, r0
 8018672:	460e      	mov	r6, r1
 8018674:	4698      	mov	r8, r3
 8018676:	4611      	mov	r1, r2
 8018678:	9500      	str	r5, [sp, #0]
 801867a:	3090      	adds	r0, #144	; 0x90
 801867c:	f7f8 fa04 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018680:	4643      	mov	r3, r8
 8018682:	463a      	mov	r2, r7
 8018684:	4631      	mov	r1, r6
 8018686:	4620      	mov	r0, r4
 8018688:	9508      	str	r5, [sp, #32]
 801868a:	b002      	add	sp, #8
 801868c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018690:	f000 b9fa 	b.w	8018a88 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08018694 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8018694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018696:	4604      	mov	r4, r0
 8018698:	f000 fa40 	bl	8018b1c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801869c:	f104 0590 	add.w	r5, r4, #144	; 0x90
 80186a0:	4628      	mov	r0, r5
 80186a2:	f004 fa89 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
 80186a6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80186aa:	2b03      	cmp	r3, #3
 80186ac:	d814      	bhi.n	80186d8 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 80186ae:	e8df f003 	tbb	[pc, r3]
 80186b2:	0202      	.short	0x0202
 80186b4:	1010      	.short	0x1010
 80186b6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80186ba:	4620      	mov	r0, r4
 80186bc:	f000 fa88 	bl	8018bd0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80186c0:	b200      	sxth	r0, r0
 80186c2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80186c6:	2b03      	cmp	r3, #3
 80186c8:	d81a      	bhi.n	8018700 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 80186ca:	e8df f003 	tbb	[pc, r3]
 80186ce:	0e07      	.short	0x0e07
 80186d0:	231f      	.short	0x231f
 80186d2:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80186d6:	e7f0      	b.n	80186ba <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80186d8:	2000      	movs	r0, #0
 80186da:	e7f2      	b.n	80186c2 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 80186dc:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80186e0:	9300      	str	r3, [sp, #0]
 80186e2:	4603      	mov	r3, r0
 80186e4:	2200      	movs	r2, #0
 80186e6:	2100      	movs	r1, #0
 80186e8:	e007      	b.n	80186fa <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 80186ea:	8921      	ldrh	r1, [r4, #8]
 80186ec:	2200      	movs	r2, #0
 80186ee:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80186f2:	1a09      	subs	r1, r1, r0
 80186f4:	9300      	str	r3, [sp, #0]
 80186f6:	4603      	mov	r3, r0
 80186f8:	b209      	sxth	r1, r1
 80186fa:	4628      	mov	r0, r5
 80186fc:	f7f8 f9c4 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018700:	4628      	mov	r0, r5
 8018702:	b003      	add	sp, #12
 8018704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018708:	f004 ba56 	b.w	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
 801870c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018710:	9000      	str	r0, [sp, #0]
 8018712:	e7e7      	b.n	80186e4 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8018714:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018718:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801871c:	1a12      	subs	r2, r2, r0
 801871e:	9000      	str	r0, [sp, #0]
 8018720:	b212      	sxth	r2, r2
 8018722:	e7e0      	b.n	80186e6 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08018724 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8018724:	b570      	push	{r4, r5, r6, lr}
 8018726:	6803      	ldr	r3, [r0, #0]
 8018728:	4604      	mov	r4, r0
 801872a:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801872e:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8018732:	4798      	blx	r3
 8018734:	4601      	mov	r1, r0
 8018736:	462b      	mov	r3, r5
 8018738:	4620      	mov	r0, r4
 801873a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801873e:	4718      	bx	r3

08018740 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8018740:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8018744:	4770      	bx	lr
	...

08018748 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8018748:	4b03      	ldr	r3, [pc, #12]	; (8018758 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 801874a:	b510      	push	{r4, lr}
 801874c:	4604      	mov	r4, r0
 801874e:	6003      	str	r3, [r0, #0]
 8018750:	f000 f999 	bl	8018a86 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8018754:	4620      	mov	r0, r4
 8018756:	bd10      	pop	{r4, pc}
 8018758:	0802ae40 	.word	0x0802ae40

0801875c <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 801875c:	b510      	push	{r4, lr}
 801875e:	4604      	mov	r4, r0
 8018760:	f7ff fff2 	bl	8018748 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8018764:	2190      	movs	r1, #144	; 0x90
 8018766:	4620      	mov	r0, r4
 8018768:	f00f fdfb 	bl	8028362 <_ZdlPvj>
 801876c:	4620      	mov	r0, r4
 801876e:	bd10      	pop	{r4, pc}

08018770 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8018770:	b510      	push	{r4, lr}
 8018772:	4604      	mov	r4, r0
 8018774:	f000 fa4c 	bl	8018c10 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8018778:	4b03      	ldr	r3, [pc, #12]	; (8018788 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801877a:	2100      	movs	r1, #0
 801877c:	4620      	mov	r0, r4
 801877e:	6023      	str	r3, [r4, #0]
 8018780:	f7ff ffd0 	bl	8018724 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8018784:	4620      	mov	r0, r4
 8018786:	bd10      	pop	{r4, pc}
 8018788:	0802ae40 	.word	0x0802ae40

0801878c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 801878c:	b570      	push	{r4, r5, r6, lr}
 801878e:	6803      	ldr	r3, [r0, #0]
 8018790:	4604      	mov	r4, r0
 8018792:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8018796:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801879a:	4798      	blx	r3
 801879c:	4601      	mov	r1, r0
 801879e:	462b      	mov	r3, r5
 80187a0:	4620      	mov	r0, r4
 80187a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187a6:	4718      	bx	r3

080187a8 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 80187a8:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 80187ac:	4770      	bx	lr

080187ae <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 80187ae:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 80187b2:	4770      	bx	lr

080187b4 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 80187b4:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 80187b8:	4770      	bx	lr

080187ba <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 80187ba:	b507      	push	{r0, r1, r2, lr}
 80187bc:	ab02      	add	r3, sp, #8
 80187be:	30bc      	adds	r0, #188	; 0xbc
 80187c0:	f823 1d04 	strh.w	r1, [r3, #-4]!
 80187c4:	4619      	mov	r1, r3
 80187c6:	f002 fa4b 	bl	801ac60 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 80187ca:	b003      	add	sp, #12
 80187cc:	f85d fb04 	ldr.w	pc, [sp], #4

080187d0 <_ZN8touchgfx13ImageProgressD1Ev>:
 80187d0:	4b03      	ldr	r3, [pc, #12]	; (80187e0 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 80187d2:	b510      	push	{r4, lr}
 80187d4:	4604      	mov	r4, r0
 80187d6:	6003      	str	r3, [r0, #0]
 80187d8:	f7ff ffb6 	bl	8018748 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80187dc:	4620      	mov	r0, r4
 80187de:	bd10      	pop	{r4, pc}
 80187e0:	0802af6c 	.word	0x0802af6c

080187e4 <_ZN8touchgfx13ImageProgressD0Ev>:
 80187e4:	b510      	push	{r4, lr}
 80187e6:	4604      	mov	r4, r0
 80187e8:	f7ff fff2 	bl	80187d0 <_ZN8touchgfx13ImageProgressD1Ev>
 80187ec:	21f0      	movs	r1, #240	; 0xf0
 80187ee:	4620      	mov	r0, r4
 80187f0:	f00f fdb7 	bl	8028362 <_ZdlPvj>
 80187f4:	4620      	mov	r0, r4
 80187f6:	bd10      	pop	{r4, pc}

080187f8 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 80187f8:	b508      	push	{r3, lr}
 80187fa:	4b06      	ldr	r3, [pc, #24]	; (8018814 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	b92b      	cbnz	r3, 801880c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8018800:	4b05      	ldr	r3, [pc, #20]	; (8018818 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8018802:	21b8      	movs	r1, #184	; 0xb8
 8018804:	4a05      	ldr	r2, [pc, #20]	; (801881c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8018806:	4806      	ldr	r0, [pc, #24]	; (8018820 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8018808:	f00f fdd6 	bl	80283b8 <__assert_func>
 801880c:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8018810:	bd08      	pop	{r3, pc}
 8018812:	bf00      	nop
 8018814:	2000bfb4 	.word	0x2000bfb4
 8018818:	0802af00 	.word	0x0802af00
 801881c:	0802b044 	.word	0x0802b044
 8018820:	0802af3c 	.word	0x0802af3c

08018824 <_ZN8touchgfx13ImageProgressC1Ev>:
 8018824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018828:	4604      	mov	r4, r0
 801882a:	f7ff ffa1 	bl	8018770 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801882e:	4b31      	ldr	r3, [pc, #196]	; (80188f4 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8018830:	a902      	add	r1, sp, #8
 8018832:	4626      	mov	r6, r4
 8018834:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8018838:	2500      	movs	r5, #0
 801883a:	4a2f      	ldr	r2, [pc, #188]	; (80188f8 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 801883c:	f846 3b90 	str.w	r3, [r6], #144
 8018840:	2701      	movs	r7, #1
 8018842:	4b2e      	ldr	r3, [pc, #184]	; (80188fc <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8018844:	4640      	mov	r0, r8
 8018846:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 801884a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801884e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018852:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8018856:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801885a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 801885e:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8018862:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8018866:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801886a:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 801886e:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8018872:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8018876:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 801887a:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 801887e:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8018882:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8018886:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801888a:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 801888e:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8018892:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8018896:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801889a:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 801889e:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 80188a2:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 80188a6:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 80188aa:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 80188ae:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 80188b2:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 80188b6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80188ba:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 80188be:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 80188c2:	f002 fc9d 	bl	801b200 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80188c6:	4b0e      	ldr	r3, [pc, #56]	; (8018900 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 80188c8:	4641      	mov	r1, r8
 80188ca:	4630      	mov	r0, r6
 80188cc:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 80188d0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80188d4:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 80188d8:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 80188dc:	f000 fa74 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80188e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80188e4:	4631      	mov	r1, r6
 80188e6:	f000 fa6f 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80188ea:	4620      	mov	r0, r4
 80188ec:	b002      	add	sp, #8
 80188ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188f2:	bf00      	nop
 80188f4:	0802af6c 	.word	0x0802af6c
 80188f8:	0802c260 	.word	0x0802c260
 80188fc:	0802b2e8 	.word	0x0802b2e8
 8018900:	0802c0f8 	.word	0x0802c0f8

08018904 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8018904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018908:	4617      	mov	r7, r2
 801890a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801890e:	2200      	movs	r2, #0
 8018910:	4604      	mov	r4, r0
 8018912:	460e      	mov	r6, r1
 8018914:	4698      	mov	r8, r3
 8018916:	4611      	mov	r1, r2
 8018918:	9500      	str	r5, [sp, #0]
 801891a:	3090      	adds	r0, #144	; 0x90
 801891c:	f7f8 f8b4 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018920:	4643      	mov	r3, r8
 8018922:	463a      	mov	r2, r7
 8018924:	4631      	mov	r1, r6
 8018926:	4620      	mov	r0, r4
 8018928:	9508      	str	r5, [sp, #32]
 801892a:	b002      	add	sp, #8
 801892c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018930:	f000 b8aa 	b.w	8018a88 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08018934 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8018934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018936:	4604      	mov	r4, r0
 8018938:	f000 f8f0 	bl	8018b1c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801893c:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8018940:	4638      	mov	r0, r7
 8018942:	f004 f939 	bl	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018946:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801894a:	4620      	mov	r0, r4
 801894c:	2b01      	cmp	r3, #1
 801894e:	bf94      	ite	ls
 8018950:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8018954:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8018958:	f000 f93a 	bl	8018bd0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801895c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8018960:	4606      	mov	r6, r0
 8018962:	b205      	sxth	r5, r0
 8018964:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018968:	2a00      	cmp	r2, #0
 801896a:	d056      	beq.n	8018a1a <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 801896c:	2b03      	cmp	r3, #3
 801896e:	d82c      	bhi.n	80189ca <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8018970:	e8df f003 	tbb	[pc, r3]
 8018974:	3d311202 	.word	0x3d311202
 8018978:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801897c:	2200      	movs	r2, #0
 801897e:	9300      	str	r3, [sp, #0]
 8018980:	4611      	mov	r1, r2
 8018982:	462b      	mov	r3, r5
 8018984:	4638      	mov	r0, r7
 8018986:	f7f8 f87f 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 801898a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801898e:	9300      	str	r3, [sp, #0]
 8018990:	462b      	mov	r3, r5
 8018992:	2200      	movs	r2, #0
 8018994:	4611      	mov	r1, r2
 8018996:	e014      	b.n	80189c2 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8018998:	8921      	ldrh	r1, [r4, #8]
 801899a:	2200      	movs	r2, #0
 801899c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80189a0:	1a09      	subs	r1, r1, r0
 80189a2:	4638      	mov	r0, r7
 80189a4:	9300      	str	r3, [sp, #0]
 80189a6:	462b      	mov	r3, r5
 80189a8:	b209      	sxth	r1, r1
 80189aa:	f7f8 f86d 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 80189ae:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80189b2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80189b6:	4249      	negs	r1, r1
 80189b8:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80189bc:	9200      	str	r2, [sp, #0]
 80189be:	b209      	sxth	r1, r1
 80189c0:	2200      	movs	r2, #0
 80189c2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80189c6:	f7f8 f85f 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 80189ca:	4638      	mov	r0, r7
 80189cc:	b003      	add	sp, #12
 80189ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80189d2:	f004 b8f1 	b.w	801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>
 80189d6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80189da:	2200      	movs	r2, #0
 80189dc:	9500      	str	r5, [sp, #0]
 80189de:	2100      	movs	r1, #0
 80189e0:	4638      	mov	r0, r7
 80189e2:	f7f8 f851 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 80189e6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80189ea:	9500      	str	r5, [sp, #0]
 80189ec:	e7d1      	b.n	8018992 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 80189ee:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80189f2:	2100      	movs	r1, #0
 80189f4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80189f8:	1a12      	subs	r2, r2, r0
 80189fa:	9500      	str	r5, [sp, #0]
 80189fc:	4638      	mov	r0, r7
 80189fe:	b212      	sxth	r2, r2
 8018a00:	f7f8 f842 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018a04:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8018a08:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8018a0c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018a10:	4252      	negs	r2, r2
 8018a12:	9100      	str	r1, [sp, #0]
 8018a14:	b212      	sxth	r2, r2
 8018a16:	2100      	movs	r1, #0
 8018a18:	e7d3      	b.n	80189c2 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8018a1a:	2b03      	cmp	r3, #3
 8018a1c:	d8d5      	bhi.n	80189ca <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8018a1e:	e8df f003 	tbb	[pc, r3]
 8018a22:	1102      	.short	0x1102
 8018a24:	2a1b      	.short	0x2a1b
 8018a26:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	4638      	mov	r0, r7
 8018a2e:	4611      	mov	r1, r2
 8018a30:	9300      	str	r3, [sp, #0]
 8018a32:	462b      	mov	r3, r5
 8018a34:	f7f8 f828 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018a38:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018a3c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018a40:	1af1      	subs	r1, r6, r3
 8018a42:	e7bb      	b.n	80189bc <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8018a44:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8018a48:	2200      	movs	r2, #0
 8018a4a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018a4e:	1a09      	subs	r1, r1, r0
 8018a50:	9300      	str	r3, [sp, #0]
 8018a52:	462b      	mov	r3, r5
 8018a54:	b209      	sxth	r1, r1
 8018a56:	e795      	b.n	8018984 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8018a58:	2200      	movs	r2, #0
 8018a5a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018a5e:	4638      	mov	r0, r7
 8018a60:	9500      	str	r5, [sp, #0]
 8018a62:	4611      	mov	r1, r2
 8018a64:	f7f8 f810 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018a68:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8018a6c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018a70:	1a32      	subs	r2, r6, r0
 8018a72:	9000      	str	r0, [sp, #0]
 8018a74:	e7ce      	b.n	8018a14 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8018a76:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018a7a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018a7e:	1a12      	subs	r2, r2, r0
 8018a80:	9500      	str	r5, [sp, #0]
 8018a82:	b212      	sxth	r2, r2
 8018a84:	e7ab      	b.n	80189de <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08018a86 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8018a86:	4770      	bx	lr

08018a88 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8018a88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018a8c:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8018a90:	4604      	mov	r4, r0
 8018a92:	460e      	mov	r6, r1
 8018a94:	4698      	mov	r8, r3
 8018a96:	9700      	str	r7, [sp, #0]
 8018a98:	3058      	adds	r0, #88	; 0x58
 8018a9a:	4615      	mov	r5, r2
 8018a9c:	f7f7 fff4 	bl	8010a88 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018aa0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018aa4:	eb06 0308 	add.w	r3, r6, r8
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	eb05 0207 	add.w	r2, r5, r7
 8018aae:	bfb8      	it	lt
 8018ab0:	8123      	strhlt	r3, [r4, #8]
 8018ab2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018ab6:	4293      	cmp	r3, r2
 8018ab8:	bfb8      	it	lt
 8018aba:	8162      	strhlt	r2, [r4, #10]
 8018abc:	b002      	add	sp, #8
 8018abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ac2 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8018ac2:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8018ac6:	4770      	bx	lr

08018ac8 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8018ac8:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8018acc:	4770      	bx	lr

08018ace <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8018ace:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8018ad2:	4770      	bx	lr

08018ad4 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8018ad4:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8018ad8:	4770      	bx	lr

08018ada <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8018ada:	b510      	push	{r4, lr}
 8018adc:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8018ae0:	800c      	strh	r4, [r1, #0]
 8018ae2:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018ae6:	8011      	strh	r1, [r2, #0]
 8018ae8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8018aec:	801a      	strh	r2, [r3, #0]
 8018aee:	9b02      	ldr	r3, [sp, #8]
 8018af0:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8018af4:	801a      	strh	r2, [r3, #0]
 8018af6:	bd10      	pop	{r4, pc}

08018af8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8018af8:	b510      	push	{r4, lr}
 8018afa:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8018afe:	800c      	strh	r4, [r1, #0]
 8018b00:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018b04:	8011      	strh	r1, [r2, #0]
 8018b06:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8018b0a:	801a      	strh	r2, [r3, #0]
 8018b0c:	bd10      	pop	{r4, pc}

08018b0e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8018b0e:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8018b12:	800b      	strh	r3, [r1, #0]
 8018b14:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8018b18:	8013      	strh	r3, [r2, #0]
 8018b1a:	4770      	bx	lr

08018b1c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8018b1c:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8018b20:	4299      	cmp	r1, r3
 8018b22:	bfb8      	it	lt
 8018b24:	4619      	movlt	r1, r3
 8018b26:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8018b2a:	4299      	cmp	r1, r3
 8018b2c:	bfa8      	it	ge
 8018b2e:	4619      	movge	r1, r3
 8018b30:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8018b34:	4770      	bx	lr

08018b36 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8018b36:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8018b3a:	4770      	bx	lr

08018b3c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8018b3c:	b510      	push	{r4, lr}
 8018b3e:	4604      	mov	r4, r0
 8018b40:	2190      	movs	r1, #144	; 0x90
 8018b42:	f00f fc0e 	bl	8028362 <_ZdlPvj>
 8018b46:	4620      	mov	r0, r4
 8018b48:	bd10      	pop	{r4, pc}

08018b4a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8018b4a:	b510      	push	{r4, lr}
 8018b4c:	4604      	mov	r4, r0
 8018b4e:	302c      	adds	r0, #44	; 0x2c
 8018b50:	f002 fb56 	bl	801b200 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018b54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018b56:	8123      	strh	r3, [r4, #8]
 8018b58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018b5a:	8163      	strh	r3, [r4, #10]
 8018b5c:	bd10      	pop	{r4, pc}
	...

08018b60 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8018b60:	4291      	cmp	r1, r2
 8018b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b66:	4604      	mov	r4, r0
 8018b68:	460e      	mov	r6, r1
 8018b6a:	4615      	mov	r5, r2
 8018b6c:	4698      	mov	r8, r3
 8018b6e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8018b72:	db05      	blt.n	8018b80 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8018b74:	4b12      	ldr	r3, [pc, #72]	; (8018bc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8018b76:	214d      	movs	r1, #77	; 0x4d
 8018b78:	4a12      	ldr	r2, [pc, #72]	; (8018bc4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8018b7a:	4813      	ldr	r0, [pc, #76]	; (8018bc8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8018b7c:	f00f fc1c 	bl	80283b8 <__assert_func>
 8018b80:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8018b84:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8018b88:	6803      	ldr	r3, [r0, #0]
 8018b8a:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8018b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018b92:	4798      	blx	r3
 8018b94:	f1b8 0f00 	cmp.w	r8, #0
 8018b98:	d10c      	bne.n	8018bb4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8018b9a:	1bad      	subs	r5, r5, r6
 8018b9c:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8018ba0:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8018ba4:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8018ba8:	42bb      	cmp	r3, r7
 8018baa:	d806      	bhi.n	8018bba <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8018bac:	4b07      	ldr	r3, [pc, #28]	; (8018bcc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8018bae:	215a      	movs	r1, #90	; 0x5a
 8018bb0:	4a04      	ldr	r2, [pc, #16]	; (8018bc4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8018bb2:	e7e2      	b.n	8018b7a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8018bb4:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8018bb8:	e7f2      	b.n	8018ba0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8018bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bbe:	bf00      	nop
 8018bc0:	0802b077 	.word	0x0802b077
 8018bc4:	0802b1b4 	.word	0x0802b1b4
 8018bc8:	0802b081 	.word	0x0802b081
 8018bcc:	0802b0d8 	.word	0x0802b0d8

08018bd0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8018bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bd2:	4604      	mov	r4, r0
 8018bd4:	460d      	mov	r5, r1
 8018bd6:	b1b9      	cbz	r1, 8018c08 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8018bd8:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8018bdc:	ab01      	add	r3, sp, #4
 8018bde:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8018be2:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8018be6:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8018bea:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8018bee:	1a12      	subs	r2, r2, r0
 8018bf0:	1b89      	subs	r1, r1, r6
 8018bf2:	1a38      	subs	r0, r7, r0
 8018bf4:	f004 f921 	bl	801ce3a <_ZN8touchgfx6muldivElllRl>
 8018bf8:	4629      	mov	r1, r5
 8018bfa:	ab01      	add	r3, sp, #4
 8018bfc:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8018c00:	4430      	add	r0, r6
 8018c02:	f004 f91a 	bl	801ce3a <_ZN8touchgfx6muldivElllRl>
 8018c06:	b285      	uxth	r5, r0
 8018c08:	4628      	mov	r0, r5
 8018c0a:	b003      	add	sp, #12
 8018c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018c10 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8018c10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018c14:	4604      	mov	r4, r0
 8018c16:	2600      	movs	r6, #0
 8018c18:	f7f9 f97a 	bl	8011f10 <_ZN8touchgfx8DrawableC1Ev>
 8018c1c:	4b1b      	ldr	r3, [pc, #108]	; (8018c8c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8018c1e:	4625      	mov	r5, r4
 8018c20:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018c24:	af02      	add	r7, sp, #8
 8018c26:	62a6      	str	r6, [r4, #40]	; 0x28
 8018c28:	f845 3b2c 	str.w	r3, [r5], #44
 8018c2c:	4628      	mov	r0, r5
 8018c2e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8018c32:	f7f9 f96d 	bl	8011f10 <_ZN8touchgfx8DrawableC1Ev>
 8018c36:	4b16      	ldr	r3, [pc, #88]	; (8018c90 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8018c38:	4639      	mov	r1, r7
 8018c3a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8018c3e:	4628      	mov	r0, r5
 8018c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018c42:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8018c46:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8018c4a:	f002 fad9 	bl	801b200 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018c4e:	4638      	mov	r0, r7
 8018c50:	f7f9 f95e 	bl	8011f10 <_ZN8touchgfx8DrawableC1Ev>
 8018c54:	4b0f      	ldr	r3, [pc, #60]	; (8018c94 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8018c56:	4632      	mov	r2, r6
 8018c58:	4631      	mov	r1, r6
 8018c5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8018c5c:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8018c60:	4628      	mov	r0, r5
 8018c62:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8018c66:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8018c6a:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8018c6e:	f7f9 f9bb 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
 8018c72:	4629      	mov	r1, r5
 8018c74:	4620      	mov	r0, r4
 8018c76:	f000 f8a7 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018c7a:	4620      	mov	r0, r4
 8018c7c:	4639      	mov	r1, r7
 8018c7e:	f000 f8a3 	bl	8018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018c82:	4620      	mov	r0, r4
 8018c84:	b002      	add	sp, #8
 8018c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c8a:	bf00      	nop
 8018c8c:	0802b0fc 	.word	0x0802b0fc
 8018c90:	0802c260 	.word	0x0802c260
 8018c94:	0802b2e8 	.word	0x0802b2e8

08018c98 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018c98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018c9a:	2000      	movs	r0, #0
 8018c9c:	b12b      	cbz	r3, 8018caa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018c9e:	b920      	cbnz	r0, 8018caa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018ca0:	1a5a      	subs	r2, r3, r1
 8018ca2:	699b      	ldr	r3, [r3, #24]
 8018ca4:	4250      	negs	r0, r2
 8018ca6:	4150      	adcs	r0, r2
 8018ca8:	e7f8      	b.n	8018c9c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8018caa:	4770      	bx	lr

08018cac <_ZN8touchgfx9Container9removeAllEv>:
 8018cac:	2200      	movs	r2, #0
 8018cae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018cb0:	b123      	cbz	r3, 8018cbc <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018cb2:	6999      	ldr	r1, [r3, #24]
 8018cb4:	6281      	str	r1, [r0, #40]	; 0x28
 8018cb6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018cba:	e7f8      	b.n	8018cae <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018cbc:	4770      	bx	lr

08018cbe <_ZN8touchgfx9Container6unlinkEv>:
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	6283      	str	r3, [r0, #40]	; 0x28
 8018cc2:	4770      	bx	lr

08018cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc8:	461f      	mov	r7, r3
 8018cca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8018cce:	460d      	mov	r5, r1
 8018cd0:	4616      	mov	r6, r2
 8018cd2:	b103      	cbz	r3, 8018cd6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018cd4:	6038      	str	r0, [r7, #0]
 8018cd6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018cd8:	b314      	cbz	r4, 8018d20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018cda:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018cde:	b1eb      	cbz	r3, 8018d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ce0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018ce4:	428d      	cmp	r5, r1
 8018ce6:	db19      	blt.n	8018d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ce8:	b289      	uxth	r1, r1
 8018cea:	8923      	ldrh	r3, [r4, #8]
 8018cec:	440b      	add	r3, r1
 8018cee:	b21b      	sxth	r3, r3
 8018cf0:	429d      	cmp	r5, r3
 8018cf2:	da13      	bge.n	8018d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018cf4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018cf8:	4296      	cmp	r6, r2
 8018cfa:	db0f      	blt.n	8018d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018cfc:	b292      	uxth	r2, r2
 8018cfe:	8963      	ldrh	r3, [r4, #10]
 8018d00:	4413      	add	r3, r2
 8018d02:	b21b      	sxth	r3, r3
 8018d04:	429e      	cmp	r6, r3
 8018d06:	da09      	bge.n	8018d1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018d08:	6823      	ldr	r3, [r4, #0]
 8018d0a:	1ab2      	subs	r2, r6, r2
 8018d0c:	1a69      	subs	r1, r5, r1
 8018d0e:	4620      	mov	r0, r4
 8018d10:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8018d14:	b212      	sxth	r2, r2
 8018d16:	463b      	mov	r3, r7
 8018d18:	b209      	sxth	r1, r1
 8018d1a:	47c0      	blx	r8
 8018d1c:	69a4      	ldr	r4, [r4, #24]
 8018d1e:	e7db      	b.n	8018cd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d24 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018d24:	2200      	movs	r2, #0
 8018d26:	8002      	strh	r2, [r0, #0]
 8018d28:	8042      	strh	r2, [r0, #2]
 8018d2a:	8082      	strh	r2, [r0, #4]
 8018d2c:	80c2      	strh	r2, [r0, #6]
 8018d2e:	4770      	bx	lr

08018d30 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8018d30:	b570      	push	{r4, r5, r6, lr}
 8018d32:	460d      	mov	r5, r1
 8018d34:	4616      	mov	r6, r2
 8018d36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018d38:	b13c      	cbz	r4, 8018d4a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018d3a:	6823      	ldr	r3, [r4, #0]
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	4632      	mov	r2, r6
 8018d40:	4629      	mov	r1, r5
 8018d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d44:	4798      	blx	r3
 8018d46:	69a4      	ldr	r4, [r4, #24]
 8018d48:	e7f6      	b.n	8018d38 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018d4a:	bd70      	pop	{r4, r5, r6, pc}

08018d4c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018d4c:	b538      	push	{r3, r4, r5, lr}
 8018d4e:	460d      	mov	r5, r1
 8018d50:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018d52:	b134      	cbz	r4, 8018d62 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018d54:	682b      	ldr	r3, [r5, #0]
 8018d56:	4621      	mov	r1, r4
 8018d58:	4628      	mov	r0, r5
 8018d5a:	689b      	ldr	r3, [r3, #8]
 8018d5c:	4798      	blx	r3
 8018d5e:	69a4      	ldr	r4, [r4, #24]
 8018d60:	e7f7      	b.n	8018d52 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018d62:	bd38      	pop	{r3, r4, r5, pc}

08018d64 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018d64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018d66:	b19b      	cbz	r3, 8018d90 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018d68:	428b      	cmp	r3, r1
 8018d6a:	d109      	bne.n	8018d80 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8018d6c:	699a      	ldr	r2, [r3, #24]
 8018d6e:	2100      	movs	r1, #0
 8018d70:	6159      	str	r1, [r3, #20]
 8018d72:	6282      	str	r2, [r0, #40]	; 0x28
 8018d74:	b902      	cbnz	r2, 8018d78 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018d76:	4770      	bx	lr
 8018d78:	6199      	str	r1, [r3, #24]
 8018d7a:	4770      	bx	lr
 8018d7c:	4613      	mov	r3, r2
 8018d7e:	b13a      	cbz	r2, 8018d90 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018d80:	699a      	ldr	r2, [r3, #24]
 8018d82:	428a      	cmp	r2, r1
 8018d84:	d1fa      	bne.n	8018d7c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018d86:	698a      	ldr	r2, [r1, #24]
 8018d88:	619a      	str	r2, [r3, #24]
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8018d90:	4770      	bx	lr

08018d92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018d92:	b410      	push	{r4}
 8018d94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018d96:	4604      	mov	r4, r0
 8018d98:	b92b      	cbnz	r3, 8018da6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8018d9a:	6803      	ldr	r3, [r0, #0]
 8018d9c:	4611      	mov	r1, r2
 8018d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018da4:	4718      	bx	r3
 8018da6:	b941      	cbnz	r1, 8018dba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018da8:	6193      	str	r3, [r2, #24]
 8018daa:	6282      	str	r2, [r0, #40]	; 0x28
 8018dac:	6154      	str	r4, [r2, #20]
 8018dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018db2:	4770      	bx	lr
 8018db4:	4603      	mov	r3, r0
 8018db6:	2800      	cmp	r0, #0
 8018db8:	d0f9      	beq.n	8018dae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018dba:	4299      	cmp	r1, r3
 8018dbc:	6998      	ldr	r0, [r3, #24]
 8018dbe:	d1f9      	bne.n	8018db4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8018dc0:	6190      	str	r0, [r2, #24]
 8018dc2:	618a      	str	r2, [r1, #24]
 8018dc4:	e7f2      	b.n	8018dac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08018dc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018dc8:	4288      	cmp	r0, r1
 8018dca:	b508      	push	{r3, lr}
 8018dcc:	d105      	bne.n	8018dda <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8018dce:	4b11      	ldr	r3, [pc, #68]	; (8018e14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8018dd0:	2123      	movs	r1, #35	; 0x23
 8018dd2:	4a11      	ldr	r2, [pc, #68]	; (8018e18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018dd4:	4811      	ldr	r0, [pc, #68]	; (8018e1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8018dd6:	f00f faef 	bl	80283b8 <__assert_func>
 8018dda:	694b      	ldr	r3, [r1, #20]
 8018ddc:	b11b      	cbz	r3, 8018de6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8018dde:	4b10      	ldr	r3, [pc, #64]	; (8018e20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8018de0:	2124      	movs	r1, #36	; 0x24
 8018de2:	4a0d      	ldr	r2, [pc, #52]	; (8018e18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018de4:	e7f6      	b.n	8018dd4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018de6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8018dea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018dec:	b913      	cbnz	r3, 8018df4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8018dee:	6281      	str	r1, [r0, #40]	; 0x28
 8018df0:	bd08      	pop	{r3, pc}
 8018df2:	4613      	mov	r3, r2
 8018df4:	699a      	ldr	r2, [r3, #24]
 8018df6:	b12a      	cbz	r2, 8018e04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8018df8:	428b      	cmp	r3, r1
 8018dfa:	d1fa      	bne.n	8018df2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8018dfc:	4b09      	ldr	r3, [pc, #36]	; (8018e24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018dfe:	2135      	movs	r1, #53	; 0x35
 8018e00:	4a05      	ldr	r2, [pc, #20]	; (8018e18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018e02:	e7e7      	b.n	8018dd4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018e04:	428b      	cmp	r3, r1
 8018e06:	d103      	bne.n	8018e10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8018e08:	4b06      	ldr	r3, [pc, #24]	; (8018e24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018e0a:	2138      	movs	r1, #56	; 0x38
 8018e0c:	4a02      	ldr	r2, [pc, #8]	; (8018e18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018e0e:	e7e1      	b.n	8018dd4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018e10:	6199      	str	r1, [r3, #24]
 8018e12:	e7ed      	b.n	8018df0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8018e14:	0802b215 	.word	0x0802b215
 8018e18:	0802b36c 	.word	0x0802b36c
 8018e1c:	0802b241 	.word	0x0802b241
 8018e20:	0802b274 	.word	0x0802b274
 8018e24:	0802b2aa 	.word	0x0802b2aa

08018e28 <_ZN8touchgfx4RectaNERKS0_>:
 8018e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e2c:	888b      	ldrh	r3, [r1, #4]
 8018e2e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018e32:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018e36:	444b      	add	r3, r9
 8018e38:	b29b      	uxth	r3, r3
 8018e3a:	fa0f f883 	sxth.w	r8, r3
 8018e3e:	45c2      	cmp	sl, r8
 8018e40:	da30      	bge.n	8018ea4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8018e42:	8882      	ldrh	r2, [r0, #4]
 8018e44:	4452      	add	r2, sl
 8018e46:	b292      	uxth	r2, r2
 8018e48:	fa0f fe82 	sxth.w	lr, r2
 8018e4c:	45f1      	cmp	r9, lr
 8018e4e:	da29      	bge.n	8018ea4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8018e50:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018e54:	88cc      	ldrh	r4, [r1, #6]
 8018e56:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018e5a:	442c      	add	r4, r5
 8018e5c:	b224      	sxth	r4, r4
 8018e5e:	42a6      	cmp	r6, r4
 8018e60:	da20      	bge.n	8018ea4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8018e62:	88c7      	ldrh	r7, [r0, #6]
 8018e64:	4437      	add	r7, r6
 8018e66:	b2bf      	uxth	r7, r7
 8018e68:	fa0f fc87 	sxth.w	ip, r7
 8018e6c:	4565      	cmp	r5, ip
 8018e6e:	da19      	bge.n	8018ea4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8018e70:	45ca      	cmp	sl, r9
 8018e72:	4654      	mov	r4, sl
 8018e74:	bfb8      	it	lt
 8018e76:	464c      	movlt	r4, r9
 8018e78:	42b5      	cmp	r5, r6
 8018e7a:	bfb8      	it	lt
 8018e7c:	4635      	movlt	r5, r6
 8018e7e:	45f0      	cmp	r8, lr
 8018e80:	bfc8      	it	gt
 8018e82:	4613      	movgt	r3, r2
 8018e84:	1b1b      	subs	r3, r3, r4
 8018e86:	8083      	strh	r3, [r0, #4]
 8018e88:	88ca      	ldrh	r2, [r1, #6]
 8018e8a:	884b      	ldrh	r3, [r1, #2]
 8018e8c:	8004      	strh	r4, [r0, #0]
 8018e8e:	4413      	add	r3, r2
 8018e90:	8045      	strh	r5, [r0, #2]
 8018e92:	b29b      	uxth	r3, r3
 8018e94:	b21a      	sxth	r2, r3
 8018e96:	4594      	cmp	ip, r2
 8018e98:	bfb8      	it	lt
 8018e9a:	463b      	movlt	r3, r7
 8018e9c:	1b5b      	subs	r3, r3, r5
 8018e9e:	80c3      	strh	r3, [r0, #6]
 8018ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	8003      	strh	r3, [r0, #0]
 8018ea8:	8043      	strh	r3, [r0, #2]
 8018eaa:	8083      	strh	r3, [r0, #4]
 8018eac:	80c3      	strh	r3, [r0, #6]
 8018eae:	e7f7      	b.n	8018ea0 <_ZN8touchgfx4RectaNERKS0_+0x78>

08018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8018eb0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018eb4:	b12b      	cbz	r3, 8018ec2 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8018eb6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018eba:	fab0 f080 	clz	r0, r0
 8018ebe:	0940      	lsrs	r0, r0, #5
 8018ec0:	4770      	bx	lr
 8018ec2:	2001      	movs	r0, #1
 8018ec4:	4770      	bx	lr

08018ec6 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eca:	2300      	movs	r3, #0
 8018ecc:	4604      	mov	r4, r0
 8018ece:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018ed0:	8003      	strh	r3, [r0, #0]
 8018ed2:	8043      	strh	r3, [r0, #2]
 8018ed4:	8083      	strh	r3, [r0, #4]
 8018ed6:	80c3      	strh	r3, [r0, #6]
 8018ed8:	2d00      	cmp	r5, #0
 8018eda:	d040      	beq.n	8018f5e <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8018edc:	1d28      	adds	r0, r5, #4
 8018ede:	f7ff ffe7 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ee2:	b988      	cbnz	r0, 8018f08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018ee4:	4620      	mov	r0, r4
 8018ee6:	f7ff ffe3 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018eea:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018eee:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018ef2:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018ef6:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018efa:	b138      	cbz	r0, 8018f0c <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8018efc:	8022      	strh	r2, [r4, #0]
 8018efe:	8063      	strh	r3, [r4, #2]
 8018f00:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018f04:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018f08:	69ad      	ldr	r5, [r5, #24]
 8018f0a:	e7e5      	b.n	8018ed8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8018f0c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018f10:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018f14:	4290      	cmp	r0, r2
 8018f16:	4607      	mov	r7, r0
 8018f18:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8018f1c:	460e      	mov	r6, r1
 8018f1e:	bfa8      	it	ge
 8018f20:	4617      	movge	r7, r2
 8018f22:	4299      	cmp	r1, r3
 8018f24:	4472      	add	r2, lr
 8018f26:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018f2a:	bfa8      	it	ge
 8018f2c:	461e      	movge	r6, r3
 8018f2e:	4440      	add	r0, r8
 8018f30:	4471      	add	r1, lr
 8018f32:	4463      	add	r3, ip
 8018f34:	b200      	sxth	r0, r0
 8018f36:	8027      	strh	r7, [r4, #0]
 8018f38:	b212      	sxth	r2, r2
 8018f3a:	8066      	strh	r6, [r4, #2]
 8018f3c:	b209      	sxth	r1, r1
 8018f3e:	b21b      	sxth	r3, r3
 8018f40:	4290      	cmp	r0, r2
 8018f42:	bfac      	ite	ge
 8018f44:	ebc7 0200 	rsbge	r2, r7, r0
 8018f48:	ebc7 0202 	rsblt	r2, r7, r2
 8018f4c:	4299      	cmp	r1, r3
 8018f4e:	bfac      	ite	ge
 8018f50:	ebc6 0301 	rsbge	r3, r6, r1
 8018f54:	ebc6 0303 	rsblt	r3, r6, r3
 8018f58:	80a2      	strh	r2, [r4, #4]
 8018f5a:	80e3      	strh	r3, [r4, #6]
 8018f5c:	e7d4      	b.n	8018f08 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018f5e:	4620      	mov	r0, r4
 8018f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f64 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8018f64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018f68:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018f6c:	b383      	cbz	r3, 8018fd0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018f6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018f70:	b374      	cbz	r4, 8018fd0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018f72:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018f76:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8018f7a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018f7e:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8018f82:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018f86:	b303      	cbz	r3, 8018fca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018f88:	4668      	mov	r0, sp
 8018f8a:	1d21      	adds	r1, r4, #4
 8018f8c:	f8ad 5000 	strh.w	r5, [sp]
 8018f90:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018f94:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018f98:	f8ad 8006 	strh.w	r8, [sp, #6]
 8018f9c:	f7ff ff44 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 8018fa0:	4668      	mov	r0, sp
 8018fa2:	f7ff ff85 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018fa6:	b980      	cbnz	r0, 8018fca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018fa8:	f8bd 3000 	ldrh.w	r3, [sp]
 8018fac:	4669      	mov	r1, sp
 8018fae:	88a2      	ldrh	r2, [r4, #4]
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	1a9b      	subs	r3, r3, r2
 8018fb4:	88e2      	ldrh	r2, [r4, #6]
 8018fb6:	f8ad 3000 	strh.w	r3, [sp]
 8018fba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018fbe:	1a9b      	subs	r3, r3, r2
 8018fc0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018fc4:	6823      	ldr	r3, [r4, #0]
 8018fc6:	689b      	ldr	r3, [r3, #8]
 8018fc8:	4798      	blx	r3
 8018fca:	69a4      	ldr	r4, [r4, #24]
 8018fcc:	2c00      	cmp	r4, #0
 8018fce:	d1d8      	bne.n	8018f82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8018fd0:	b002      	add	sp, #8
 8018fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018fd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018fd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018fd8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018fdc:	460d      	mov	r5, r1
 8018fde:	4616      	mov	r6, r2
 8018fe0:	b323      	cbz	r3, 801902c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018fe2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018fe4:	b314      	cbz	r4, 801902c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018fe6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018fea:	b1eb      	cbz	r3, 8019028 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018fec:	6828      	ldr	r0, [r5, #0]
 8018fee:	466b      	mov	r3, sp
 8018ff0:	6869      	ldr	r1, [r5, #4]
 8018ff2:	c303      	stmia	r3!, {r0, r1}
 8018ff4:	4668      	mov	r0, sp
 8018ff6:	1d21      	adds	r1, r4, #4
 8018ff8:	f7ff ff16 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 8018ffc:	4668      	mov	r0, sp
 8018ffe:	f7ff ff57 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019002:	b988      	cbnz	r0, 8019028 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019004:	f8bd 3000 	ldrh.w	r3, [sp]
 8019008:	4669      	mov	r1, sp
 801900a:	88a2      	ldrh	r2, [r4, #4]
 801900c:	4620      	mov	r0, r4
 801900e:	1a9b      	subs	r3, r3, r2
 8019010:	88e2      	ldrh	r2, [r4, #6]
 8019012:	f8ad 3000 	strh.w	r3, [sp]
 8019016:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801901a:	1a9b      	subs	r3, r3, r2
 801901c:	4632      	mov	r2, r6
 801901e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019022:	6823      	ldr	r3, [r4, #0]
 8019024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019026:	4798      	blx	r3
 8019028:	69a4      	ldr	r4, [r4, #24]
 801902a:	e7db      	b.n	8018fe4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801902c:	b002      	add	sp, #8
 801902e:	bd70      	pop	{r4, r5, r6, pc}

08019030 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8019030:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019034:	4770      	bx	lr

08019036 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019036:	6803      	ldr	r3, [r0, #0]
 8019038:	b513      	push	{r0, r1, r4, lr}
 801903a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801903e:	2300      	movs	r3, #0
 8019040:	e9cd 3300 	strd	r3, r3, [sp]
 8019044:	466b      	mov	r3, sp
 8019046:	47a0      	blx	r4
 8019048:	b002      	add	sp, #8
 801904a:	bd10      	pop	{r4, pc}

0801904c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801904c:	2301      	movs	r3, #1
 801904e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019052:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019056:	4770      	bx	lr

08019058 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8019058:	2301      	movs	r3, #1
 801905a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801905e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019062:	4770      	bx	lr

08019064 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019064:	6843      	ldr	r3, [r0, #4]
 8019066:	2201      	movs	r2, #1
 8019068:	725a      	strb	r2, [r3, #9]
 801906a:	6840      	ldr	r0, [r0, #4]
 801906c:	6803      	ldr	r3, [r0, #0]
 801906e:	691b      	ldr	r3, [r3, #16]
 8019070:	4718      	bx	r3

08019072 <_ZN8touchgfx3HAL8flushDMAEv>:
 8019072:	6840      	ldr	r0, [r0, #4]
 8019074:	6803      	ldr	r3, [r0, #0]
 8019076:	689b      	ldr	r3, [r3, #8]
 8019078:	4718      	bx	r3
	...

0801907c <_ZN8touchgfx3HAL10beginFrameEv>:
 801907c:	4b04      	ldr	r3, [pc, #16]	; (8019090 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801907e:	781b      	ldrb	r3, [r3, #0]
 8019080:	b123      	cbz	r3, 801908c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8019082:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019086:	f080 0001 	eor.w	r0, r0, #1
 801908a:	4770      	bx	lr
 801908c:	2001      	movs	r0, #1
 801908e:	4770      	bx	lr
 8019090:	2000bee8 	.word	0x2000bee8

08019094 <_ZN8touchgfx3HAL8endFrameEv>:
 8019094:	b510      	push	{r4, lr}
 8019096:	4604      	mov	r4, r0
 8019098:	6840      	ldr	r0, [r0, #4]
 801909a:	6803      	ldr	r3, [r0, #0]
 801909c:	689b      	ldr	r3, [r3, #8]
 801909e:	4798      	blx	r3
 80190a0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80190a4:	b113      	cbz	r3, 80190ac <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80190a6:	2301      	movs	r3, #1
 80190a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80190ac:	bd10      	pop	{r4, pc}

080190ae <_ZN8touchgfx3HAL9taskEntryEv>:
 80190ae:	b508      	push	{r3, lr}
 80190b0:	6803      	ldr	r3, [r0, #0]
 80190b2:	4604      	mov	r4, r0
 80190b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80190b6:	4798      	blx	r3
 80190b8:	6823      	ldr	r3, [r4, #0]
 80190ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80190bc:	4620      	mov	r0, r4
 80190be:	4798      	blx	r3
 80190c0:	f7fd fc34 	bl	801692c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80190c4:	6823      	ldr	r3, [r4, #0]
 80190c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190c8:	e7f8      	b.n	80190bc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080190cc <_ZN8touchgfx3HAL4tickEv>:
 80190cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80190ce:	6803      	ldr	r3, [r0, #0]
 80190d0:	4604      	mov	r4, r0
 80190d2:	4d5c      	ldr	r5, [pc, #368]	; (8019244 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80190d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80190d8:	4798      	blx	r3
 80190da:	2800      	cmp	r0, #0
 80190dc:	f000 8097 	beq.w	801920e <_ZN8touchgfx3HAL4tickEv+0x142>
 80190e0:	2001      	movs	r0, #1
 80190e2:	2600      	movs	r6, #0
 80190e4:	f7fd f906 	bl	80162f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80190e8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80190ec:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80190f0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80190f4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80190f8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80190fc:	b133      	cbz	r3, 801910c <_ZN8touchgfx3HAL4tickEv+0x40>
 80190fe:	6823      	ldr	r3, [r4, #0]
 8019100:	4620      	mov	r0, r4
 8019102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8019106:	4798      	blx	r3
 8019108:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801910c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019110:	2601      	movs	r6, #1
 8019112:	6862      	ldr	r2, [r4, #4]
 8019114:	f083 0301 	eor.w	r3, r3, #1
 8019118:	702e      	strb	r6, [r5, #0]
 801911a:	7253      	strb	r3, [r2, #9]
 801911c:	f003 f91e 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8019120:	6803      	ldr	r3, [r0, #0]
 8019122:	4631      	mov	r1, r6
 8019124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019126:	4798      	blx	r3
 8019128:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801912c:	b90b      	cbnz	r3, 8019132 <_ZN8touchgfx3HAL4tickEv+0x66>
 801912e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8019132:	f003 f913 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8019136:	6803      	ldr	r3, [r0, #0]
 8019138:	695b      	ldr	r3, [r3, #20]
 801913a:	4798      	blx	r3
 801913c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801913e:	6803      	ldr	r3, [r0, #0]
 8019140:	691b      	ldr	r3, [r3, #16]
 8019142:	4798      	blx	r3
 8019144:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019148:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801914c:	3b01      	subs	r3, #1
 801914e:	b2db      	uxtb	r3, r3
 8019150:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019154:	b10a      	cbz	r2, 801915a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8019156:	2b00      	cmp	r3, #0
 8019158:	d1eb      	bne.n	8019132 <_ZN8touchgfx3HAL4tickEv+0x66>
 801915a:	4a3b      	ldr	r2, [pc, #236]	; (8019248 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801915c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8019160:	7813      	ldrb	r3, [r2, #0]
 8019162:	3301      	adds	r3, #1
 8019164:	b25b      	sxtb	r3, r3
 8019166:	4299      	cmp	r1, r3
 8019168:	7013      	strb	r3, [r2, #0]
 801916a:	dc10      	bgt.n	801918e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801916c:	2300      	movs	r3, #0
 801916e:	68e0      	ldr	r0, [r4, #12]
 8019170:	a902      	add	r1, sp, #8
 8019172:	7013      	strb	r3, [r2, #0]
 8019174:	aa03      	add	r2, sp, #12
 8019176:	6803      	ldr	r3, [r0, #0]
 8019178:	68db      	ldr	r3, [r3, #12]
 801917a:	4798      	blx	r3
 801917c:	6823      	ldr	r3, [r4, #0]
 801917e:	2800      	cmp	r0, #0
 8019180:	d051      	beq.n	8019226 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8019182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019186:	4620      	mov	r0, r4
 8019188:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801918c:	4798      	blx	r3
 801918e:	2300      	movs	r3, #0
 8019190:	6960      	ldr	r0, [r4, #20]
 8019192:	f88d 3007 	strb.w	r3, [sp, #7]
 8019196:	b158      	cbz	r0, 80191b0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8019198:	6803      	ldr	r3, [r0, #0]
 801919a:	f10d 0107 	add.w	r1, sp, #7
 801919e:	68db      	ldr	r3, [r3, #12]
 80191a0:	4798      	blx	r3
 80191a2:	b128      	cbz	r0, 80191b0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80191a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80191a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80191aa:	6803      	ldr	r3, [r0, #0]
 80191ac:	68db      	ldr	r3, [r3, #12]
 80191ae:	4798      	blx	r3
 80191b0:	f104 001c 	add.w	r0, r4, #28
 80191b4:	f00d fc34 	bl	8026a20 <_ZN8touchgfx8Gestures4tickEv>
 80191b8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80191bc:	b30b      	cbz	r3, 8019202 <_ZN8touchgfx3HAL4tickEv+0x136>
 80191be:	6920      	ldr	r0, [r4, #16]
 80191c0:	6803      	ldr	r3, [r0, #0]
 80191c2:	691b      	ldr	r3, [r3, #16]
 80191c4:	4798      	blx	r3
 80191c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80191c8:	4606      	mov	r6, r0
 80191ca:	b903      	cbnz	r3, 80191ce <_ZN8touchgfx3HAL4tickEv+0x102>
 80191cc:	6720      	str	r0, [r4, #112]	; 0x70
 80191ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80191d0:	4a1e      	ldr	r2, [pc, #120]	; (801924c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80191d2:	1af3      	subs	r3, r6, r3
 80191d4:	4293      	cmp	r3, r2
 80191d6:	d914      	bls.n	8019202 <_ZN8touchgfx3HAL4tickEv+0x136>
 80191d8:	6920      	ldr	r0, [r4, #16]
 80191da:	6803      	ldr	r3, [r0, #0]
 80191dc:	699b      	ldr	r3, [r3, #24]
 80191de:	4798      	blx	r3
 80191e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80191e2:	2264      	movs	r2, #100	; 0x64
 80191e4:	1af3      	subs	r3, r6, r3
 80191e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80191ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80191ee:	2800      	cmp	r0, #0
 80191f0:	dc1e      	bgt.n	8019230 <_ZN8touchgfx3HAL4tickEv+0x164>
 80191f2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80191f6:	6920      	ldr	r0, [r4, #16]
 80191f8:	2100      	movs	r1, #0
 80191fa:	6803      	ldr	r3, [r0, #0]
 80191fc:	69db      	ldr	r3, [r3, #28]
 80191fe:	4798      	blx	r3
 8019200:	6726      	str	r6, [r4, #112]	; 0x70
 8019202:	f003 f8ab 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 8019206:	6803      	ldr	r3, [r0, #0]
 8019208:	2100      	movs	r1, #0
 801920a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801920c:	4798      	blx	r3
 801920e:	6823      	ldr	r3, [r4, #0]
 8019210:	4620      	mov	r0, r4
 8019212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019216:	4798      	blx	r3
 8019218:	2001      	movs	r0, #1
 801921a:	f7fd f876 	bl	801630a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801921e:	2300      	movs	r3, #0
 8019220:	702b      	strb	r3, [r5, #0]
 8019222:	b004      	add	sp, #16
 8019224:	bd70      	pop	{r4, r5, r6, pc}
 8019226:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801922a:	4620      	mov	r0, r4
 801922c:	4798      	blx	r3
 801922e:	e7ae      	b.n	801918e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019230:	2863      	cmp	r0, #99	; 0x63
 8019232:	bfcb      	itete	gt
 8019234:	2300      	movgt	r3, #0
 8019236:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801923a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801923e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8019242:	e7d8      	b.n	80191f6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8019244:	2000bef0 	.word	0x2000bef0
 8019248:	2000bef1 	.word	0x2000bef1
 801924c:	05f5e100 	.word	0x05f5e100

08019250 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019250:	f7fd bb0c 	b.w	801686c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019254 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019254:	6581      	str	r1, [r0, #88]	; 0x58
 8019256:	301c      	adds	r0, #28
 8019258:	f00d bbe0 	b.w	8026a1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801925c <_ZN8touchgfx3HAL5touchEll>:
 801925c:	b530      	push	{r4, r5, lr}
 801925e:	b087      	sub	sp, #28
 8019260:	4604      	mov	r4, r0
 8019262:	a804      	add	r0, sp, #16
 8019264:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8019268:	f002 fe7c 	bl	801bf64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801926c:	9b04      	ldr	r3, [sp, #16]
 801926e:	a906      	add	r1, sp, #24
 8019270:	a803      	add	r0, sp, #12
 8019272:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019276:	9b05      	ldr	r3, [sp, #20]
 8019278:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801927c:	f002 fec0 	bl	801c000 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019280:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019284:	f104 001c 	add.w	r0, r4, #28
 8019288:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801928c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019290:	b189      	cbz	r1, 80192b6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8019292:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8019296:	9300      	str	r3, [sp, #0]
 8019298:	4613      	mov	r3, r2
 801929a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801929e:	462a      	mov	r2, r5
 80192a0:	f00d fbcc 	bl	8026a3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80192a4:	b128      	cbz	r0, 80192b2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80192a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80192aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80192ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80192b0:	6623      	str	r3, [r4, #96]	; 0x60
 80192b2:	b007      	add	sp, #28
 80192b4:	bd30      	pop	{r4, r5, pc}
 80192b6:	f00d fc05 	bl	8026ac4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80192ba:	2301      	movs	r3, #1
 80192bc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80192c0:	e7f1      	b.n	80192a6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080192c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80192c2:	b570      	push	{r4, r5, r6, lr}
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d050      	beq.n	801936a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80192c8:	ea81 0002 	eor.w	r0, r1, r2
 80192cc:	07c6      	lsls	r6, r0, #31
 80192ce:	d508      	bpl.n	80192e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80192d0:	3a01      	subs	r2, #1
 80192d2:	18cc      	adds	r4, r1, r3
 80192d4:	42a1      	cmp	r1, r4
 80192d6:	d048      	beq.n	801936a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80192d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80192dc:	f801 0b01 	strb.w	r0, [r1], #1
 80192e0:	e7f8      	b.n	80192d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80192e2:	07d5      	lsls	r5, r2, #31
 80192e4:	bf42      	ittt	mi
 80192e6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80192ea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80192ee:	f801 0b01 	strbmi.w	r0, [r1], #1
 80192f2:	2b01      	cmp	r3, #1
 80192f4:	d915      	bls.n	8019322 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80192f6:	ea82 0001 	eor.w	r0, r2, r1
 80192fa:	0784      	lsls	r4, r0, #30
 80192fc:	d02d      	beq.n	801935a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80192fe:	1e94      	subs	r4, r2, #2
 8019300:	4608      	mov	r0, r1
 8019302:	18ce      	adds	r6, r1, r3
 8019304:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8019308:	f820 5b02 	strh.w	r5, [r0], #2
 801930c:	1a35      	subs	r5, r6, r0
 801930e:	2d01      	cmp	r5, #1
 8019310:	d8f8      	bhi.n	8019304 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8019312:	1e98      	subs	r0, r3, #2
 8019314:	f003 0301 	and.w	r3, r3, #1
 8019318:	f020 0001 	bic.w	r0, r0, #1
 801931c:	3002      	adds	r0, #2
 801931e:	4401      	add	r1, r0
 8019320:	4402      	add	r2, r0
 8019322:	1f14      	subs	r4, r2, #4
 8019324:	4608      	mov	r0, r1
 8019326:	18ce      	adds	r6, r1, r3
 8019328:	1a35      	subs	r5, r6, r0
 801932a:	2d03      	cmp	r5, #3
 801932c:	d810      	bhi.n	8019350 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801932e:	089c      	lsrs	r4, r3, #2
 8019330:	00a0      	lsls	r0, r4, #2
 8019332:	4401      	add	r1, r0
 8019334:	3801      	subs	r0, #1
 8019336:	4402      	add	r2, r0
 8019338:	f06f 0003 	mvn.w	r0, #3
 801933c:	fb00 3404 	mla	r4, r0, r4, r3
 8019340:	440c      	add	r4, r1
 8019342:	42a1      	cmp	r1, r4
 8019344:	d011      	beq.n	801936a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8019346:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801934a:	f801 3b01 	strb.w	r3, [r1], #1
 801934e:	e7f8      	b.n	8019342 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8019350:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8019354:	f840 5b04 	str.w	r5, [r0], #4
 8019358:	e7e6      	b.n	8019328 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801935a:	0790      	lsls	r0, r2, #30
 801935c:	d0e1      	beq.n	8019322 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801935e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019362:	3b02      	subs	r3, #2
 8019364:	f821 0b02 	strh.w	r0, [r1], #2
 8019368:	e7db      	b.n	8019322 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801936a:	2001      	movs	r0, #1
 801936c:	bd70      	pop	{r4, r5, r6, pc}

0801936e <_ZN8touchgfx3HAL7noTouchEv>:
 801936e:	b510      	push	{r4, lr}
 8019370:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8019374:	4604      	mov	r4, r0
 8019376:	b153      	cbz	r3, 801938e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019378:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801937c:	2101      	movs	r1, #1
 801937e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8019382:	301c      	adds	r0, #28
 8019384:	f00d fb9e 	bl	8026ac4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019388:	2300      	movs	r3, #0
 801938a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801938e:	bd10      	pop	{r4, pc}

08019390 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8019390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019394:	4605      	mov	r5, r0
 8019396:	6980      	ldr	r0, [r0, #24]
 8019398:	b085      	sub	sp, #20
 801939a:	460f      	mov	r7, r1
 801939c:	4690      	mov	r8, r2
 801939e:	4699      	mov	r9, r3
 80193a0:	b930      	cbnz	r0, 80193b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80193a2:	4b1f      	ldr	r3, [pc, #124]	; (8019420 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80193a4:	f44f 7198 	mov.w	r1, #304	; 0x130
 80193a8:	4a1e      	ldr	r2, [pc, #120]	; (8019424 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80193aa:	481f      	ldr	r0, [pc, #124]	; (8019428 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80193ac:	f00f f804 	bl	80283b8 <__assert_func>
 80193b0:	ac04      	add	r4, sp, #16
 80193b2:	2600      	movs	r6, #0
 80193b4:	f844 6d04 	str.w	r6, [r4, #-4]!
 80193b8:	6806      	ldr	r6, [r0, #0]
 80193ba:	9401      	str	r4, [sp, #4]
 80193bc:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80193c0:	9400      	str	r4, [sp, #0]
 80193c2:	6834      	ldr	r4, [r6, #0]
 80193c4:	47a0      	blx	r4
 80193c6:	4c19      	ldr	r4, [pc, #100]	; (801942c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80193c8:	4606      	mov	r6, r0
 80193ca:	f8a4 9000 	strh.w	r9, [r4]
 80193ce:	f7f7 fbaf 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 80193d2:	6803      	ldr	r3, [r0, #0]
 80193d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193d6:	4798      	blx	r3
 80193d8:	280c      	cmp	r0, #12
 80193da:	d80f      	bhi.n	80193fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80193dc:	e8df f000 	tbb	[pc, r0]
 80193e0:	1b1b1207 	.word	0x1b1b1207
 80193e4:	1b1b1b1b 	.word	0x1b1b1b1b
 80193e8:	1b1b1b1b 	.word	0x1b1b1b1b
 80193ec:	1b          	.byte	0x1b
 80193ed:	00          	.byte	0x00
 80193ee:	8823      	ldrh	r3, [r4, #0]
 80193f0:	fb08 7203 	mla	r2, r8, r3, r7
 80193f4:	9b03      	ldr	r3, [sp, #12]
 80193f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80193fa:	63eb      	str	r3, [r5, #60]	; 0x3c
 80193fc:	4630      	mov	r0, r6
 80193fe:	b005      	add	sp, #20
 8019400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019404:	8822      	ldrh	r2, [r4, #0]
 8019406:	9b03      	ldr	r3, [sp, #12]
 8019408:	fb08 7202 	mla	r2, r8, r2, r7
 801940c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019410:	1a9a      	subs	r2, r3, r2
 8019412:	63ea      	str	r2, [r5, #60]	; 0x3c
 8019414:	e7f2      	b.n	80193fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8019416:	4b06      	ldr	r3, [pc, #24]	; (8019430 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8019418:	f240 114d 	movw	r1, #333	; 0x14d
 801941c:	4a01      	ldr	r2, [pc, #4]	; (8019424 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801941e:	e7c4      	b.n	80193aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8019420:	0802b415 	.word	0x0802b415
 8019424:	0802b726 	.word	0x0802b726
 8019428:	0802b45a 	.word	0x0802b45a
 801942c:	2000bee4 	.word	0x2000bee4
 8019430:	0802b480 	.word	0x0802b480

08019434 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8019434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019438:	4698      	mov	r8, r3
 801943a:	6803      	ldr	r3, [r0, #0]
 801943c:	b087      	sub	sp, #28
 801943e:	460e      	mov	r6, r1
 8019440:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8019442:	4617      	mov	r7, r2
 8019444:	4b0d      	ldr	r3, [pc, #52]	; (801947c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8019446:	4604      	mov	r4, r0
 8019448:	f8b3 9000 	ldrh.w	r9, [r3]
 801944c:	f7f7 fb70 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8019450:	6803      	ldr	r3, [r0, #0]
 8019452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019454:	4798      	blx	r3
 8019456:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801945a:	463a      	mov	r2, r7
 801945c:	4631      	mov	r1, r6
 801945e:	9302      	str	r3, [sp, #8]
 8019460:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019464:	9301      	str	r3, [sp, #4]
 8019466:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801946a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801946e:	9300      	str	r3, [sp, #0]
 8019470:	4620      	mov	r0, r4
 8019472:	4643      	mov	r3, r8
 8019474:	47a8      	blx	r5
 8019476:	b007      	add	sp, #28
 8019478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801947c:	2000bee4 	.word	0x2000bee4

08019480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019484:	4606      	mov	r6, r0
 8019486:	b089      	sub	sp, #36	; 0x24
 8019488:	4610      	mov	r0, r2
 801948a:	460c      	mov	r4, r1
 801948c:	4691      	mov	r9, r2
 801948e:	4698      	mov	r8, r3
 8019490:	f005 f980 	bl	801e794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019494:	2800      	cmp	r0, #0
 8019496:	f000 8092 	beq.w	80195be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801949a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80195d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801949e:	ad08      	add	r5, sp, #32
 80194a0:	f8df b138 	ldr.w	fp, [pc, #312]	; 80195dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80194a4:	f8da 0000 	ldr.w	r0, [sl]
 80194a8:	4f4a      	ldr	r7, [pc, #296]	; (80195d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80194aa:	6802      	ldr	r2, [r0, #0]
 80194ac:	6a12      	ldr	r2, [r2, #32]
 80194ae:	4790      	blx	r2
 80194b0:	f8da 0000 	ldr.w	r0, [sl]
 80194b4:	6802      	ldr	r2, [r0, #0]
 80194b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80194b8:	4790      	blx	r2
 80194ba:	f8bb 3000 	ldrh.w	r3, [fp]
 80194be:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80194c2:	4628      	mov	r0, r5
 80194c4:	9300      	str	r3, [sp, #0]
 80194c6:	883b      	ldrh	r3, [r7, #0]
 80194c8:	9301      	str	r3, [sp, #4]
 80194ca:	f005 fa23 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80194ce:	f8ab 0000 	strh.w	r0, [fp]
 80194d2:	4628      	mov	r0, r5
 80194d4:	f005 fa58 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80194d8:	f8da b000 	ldr.w	fp, [sl]
 80194dc:	8038      	strh	r0, [r7, #0]
 80194de:	4648      	mov	r0, r9
 80194e0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80194e4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80194e8:	9302      	str	r3, [sp, #8]
 80194ea:	f005 f953 	bl	801e794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80194ee:	f8da 2000 	ldr.w	r2, [sl]
 80194f2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80194f6:	63d0      	str	r0, [r2, #60]	; 0x3c
 80194f8:	4620      	mov	r0, r4
 80194fa:	6822      	ldr	r2, [r4, #0]
 80194fc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8019500:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8019502:	2200      	movs	r2, #0
 8019504:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8019508:	4611      	mov	r1, r2
 801950a:	4798      	blx	r3
 801950c:	2201      	movs	r2, #1
 801950e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8019512:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8019516:	1d22      	adds	r2, r4, #4
 8019518:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801951c:	2900      	cmp	r1, #0
 801951e:	d051      	beq.n	80195c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8019520:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8019524:	2900      	cmp	r1, #0
 8019526:	d04d      	beq.n	80195c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8019528:	6810      	ldr	r0, [r2, #0]
 801952a:	f10d 0c18 	add.w	ip, sp, #24
 801952e:	6851      	ldr	r1, [r2, #4]
 8019530:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019534:	4641      	mov	r1, r8
 8019536:	a806      	add	r0, sp, #24
 8019538:	f7ff fc76 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801953c:	4628      	mov	r0, r5
 801953e:	f005 fb75 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019542:	4680      	mov	r8, r0
 8019544:	f7f7 faf4 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8019548:	6802      	ldr	r2, [r0, #0]
 801954a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801954c:	4790      	blx	r2
 801954e:	4580      	cmp	r8, r0
 8019550:	d03d      	beq.n	80195ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8019552:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8019554:	b150      	cbz	r0, 801956c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8019556:	4628      	mov	r0, r5
 8019558:	f005 fb68 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801955c:	4605      	mov	r5, r0
 801955e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8019560:	6803      	ldr	r3, [r0, #0]
 8019562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019564:	4798      	blx	r3
 8019566:	1a2b      	subs	r3, r5, r0
 8019568:	4258      	negs	r0, r3
 801956a:	4158      	adcs	r0, r3
 801956c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8019570:	2500      	movs	r5, #0
 8019572:	6963      	ldr	r3, [r4, #20]
 8019574:	4620      	mov	r0, r4
 8019576:	6822      	ldr	r2, [r4, #0]
 8019578:	a906      	add	r1, sp, #24
 801957a:	6165      	str	r5, [r4, #20]
 801957c:	9303      	str	r3, [sp, #12]
 801957e:	6892      	ldr	r2, [r2, #8]
 8019580:	4790      	blx	r2
 8019582:	9b03      	ldr	r3, [sp, #12]
 8019584:	4620      	mov	r0, r4
 8019586:	4652      	mov	r2, sl
 8019588:	6163      	str	r3, [r4, #20]
 801958a:	4649      	mov	r1, r9
 801958c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8019590:	6823      	ldr	r3, [r4, #0]
 8019592:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8019596:	4c10      	ldr	r4, [pc, #64]	; (80195d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8019598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801959a:	4798      	blx	r3
 801959c:	6820      	ldr	r0, [r4, #0]
 801959e:	9b02      	ldr	r3, [sp, #8]
 80195a0:	9a00      	ldr	r2, [sp, #0]
 80195a2:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80195a6:	4b0d      	ldr	r3, [pc, #52]	; (80195dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80195a8:	801a      	strh	r2, [r3, #0]
 80195aa:	4b0a      	ldr	r3, [pc, #40]	; (80195d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80195ac:	9a01      	ldr	r2, [sp, #4]
 80195ae:	801a      	strh	r2, [r3, #0]
 80195b0:	6803      	ldr	r3, [r0, #0]
 80195b2:	6a1b      	ldr	r3, [r3, #32]
 80195b4:	4798      	blx	r3
 80195b6:	6820      	ldr	r0, [r4, #0]
 80195b8:	6803      	ldr	r3, [r0, #0]
 80195ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195bc:	4798      	blx	r3
 80195be:	b009      	add	sp, #36	; 0x24
 80195c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195c4:	ab06      	add	r3, sp, #24
 80195c6:	6810      	ldr	r0, [r2, #0]
 80195c8:	6851      	ldr	r1, [r2, #4]
 80195ca:	c303      	stmia	r3!, {r0, r1}
 80195cc:	e7b6      	b.n	801953c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80195ce:	2000      	movs	r0, #0
 80195d0:	e7cc      	b.n	801956c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80195d2:	bf00      	nop
 80195d4:	2000bee6 	.word	0x2000bee6
 80195d8:	2000beec 	.word	0x2000beec
 80195dc:	2000bee4 	.word	0x2000bee4

080195e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80195e0:	4b07      	ldr	r3, [pc, #28]	; (8019600 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80195e2:	b510      	push	{r4, lr}
 80195e4:	781b      	ldrb	r3, [r3, #0]
 80195e6:	4604      	mov	r4, r0
 80195e8:	b13b      	cbz	r3, 80195fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80195ea:	6803      	ldr	r3, [r0, #0]
 80195ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195ee:	4798      	blx	r3
 80195f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80195f2:	4283      	cmp	r3, r0
 80195f4:	d101      	bne.n	80195fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80195f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80195f8:	bd10      	pop	{r4, pc}
 80195fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80195fc:	e7fc      	b.n	80195f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80195fe:	bf00      	nop
 8019600:	2000bee8 	.word	0x2000bee8

08019604 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019604:	4b0b      	ldr	r3, [pc, #44]	; (8019634 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8019606:	b510      	push	{r4, lr}
 8019608:	781b      	ldrb	r3, [r3, #0]
 801960a:	4604      	mov	r4, r0
 801960c:	b95b      	cbnz	r3, 8019626 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801960e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019612:	2b02      	cmp	r3, #2
 8019614:	d007      	beq.n	8019626 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019616:	6840      	ldr	r0, [r0, #4]
 8019618:	f000 fbc8 	bl	8019dac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801961c:	b118      	cbz	r0, 8019626 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801961e:	6862      	ldr	r2, [r4, #4]
 8019620:	7a53      	ldrb	r3, [r2, #9]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d0fc      	beq.n	8019620 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019626:	f7fd f913 	bl	8016850 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801962a:	4620      	mov	r0, r4
 801962c:	f7ff ffd8 	bl	80195e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019630:	bd10      	pop	{r4, pc}
 8019632:	bf00      	nop
 8019634:	2000bee8 	.word	0x2000bee8

08019638 <_ZN8touchgfx3HAL10initializeEv>:
 8019638:	b510      	push	{r4, lr}
 801963a:	4604      	mov	r4, r0
 801963c:	f7fd f8e4 	bl	8016808 <_ZN8touchgfx10OSWrappers10initializeEv>
 8019640:	6860      	ldr	r0, [r4, #4]
 8019642:	6803      	ldr	r3, [r0, #0]
 8019644:	68db      	ldr	r3, [r3, #12]
 8019646:	4798      	blx	r3
 8019648:	68e0      	ldr	r0, [r4, #12]
 801964a:	6803      	ldr	r3, [r0, #0]
 801964c:	689b      	ldr	r3, [r3, #8]
 801964e:	4798      	blx	r3
 8019650:	6823      	ldr	r3, [r4, #0]
 8019652:	4620      	mov	r0, r4
 8019654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801965a:	4718      	bx	r3

0801965c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801965c:	b508      	push	{r3, lr}
 801965e:	290c      	cmp	r1, #12
 8019660:	d817      	bhi.n	8019692 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8019662:	e8df f001 	tbb	[pc, r1]
 8019666:	090b      	.short	0x090b
 8019668:	0d0d0d07 	.word	0x0d0d0d07
 801966c:	1414140d 	.word	0x1414140d
 8019670:	1414      	.short	0x1414
 8019672:	0d          	.byte	0x0d
 8019673:	00          	.byte	0x00
 8019674:	2020      	movs	r0, #32
 8019676:	bd08      	pop	{r3, pc}
 8019678:	2018      	movs	r0, #24
 801967a:	e7fc      	b.n	8019676 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801967c:	2010      	movs	r0, #16
 801967e:	e7fa      	b.n	8019676 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019680:	4b05      	ldr	r3, [pc, #20]	; (8019698 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8019682:	f44f 710c 	mov.w	r1, #560	; 0x230
 8019686:	4a05      	ldr	r2, [pc, #20]	; (801969c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8019688:	4805      	ldr	r0, [pc, #20]	; (80196a0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801968a:	f00e fe95 	bl	80283b8 <__assert_func>
 801968e:	2008      	movs	r0, #8
 8019690:	e7f1      	b.n	8019676 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019692:	2000      	movs	r0, #0
 8019694:	e7ef      	b.n	8019676 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019696:	bf00      	nop
 8019698:	0802b553 	.word	0x0802b553
 801969c:	0802b8e8 	.word	0x0802b8e8
 80196a0:	0802b45a 	.word	0x0802b45a

080196a4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80196a4:	b570      	push	{r4, r5, r6, lr}
 80196a6:	460d      	mov	r5, r1
 80196a8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80196ac:	4616      	mov	r6, r2
 80196ae:	461c      	mov	r4, r3
 80196b0:	f7ff ffd4 	bl	801965c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80196b4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80196b8:	10c0      	asrs	r0, r0, #3
 80196ba:	fb06 5101 	mla	r1, r6, r1, r5
 80196be:	fb00 4001 	mla	r0, r0, r1, r4
 80196c2:	bd70      	pop	{r4, r5, r6, pc}

080196c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80196c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196c8:	b08a      	sub	sp, #40	; 0x28
 80196ca:	f04f 0c00 	mov.w	ip, #0
 80196ce:	4604      	mov	r4, r0
 80196d0:	469a      	mov	sl, r3
 80196d2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80196d6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80196da:	f1b8 0f02 	cmp.w	r8, #2
 80196de:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80196e2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80196e6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80196ea:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80196ee:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80196f2:	f8cd c020 	str.w	ip, [sp, #32]
 80196f6:	d030      	beq.n	801975a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80196f8:	2bff      	cmp	r3, #255	; 0xff
 80196fa:	d12c      	bne.n	8019756 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80196fc:	4560      	cmp	r0, ip
 80196fe:	bf14      	ite	ne
 8019700:	2004      	movne	r0, #4
 8019702:	2001      	moveq	r0, #1
 8019704:	9204      	str	r2, [sp, #16]
 8019706:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801970a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801970e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019712:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019716:	f8ad 501a 	strh.w	r5, [sp, #26]
 801971a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801971e:	4620      	mov	r0, r4
 8019720:	f7ff ff5e 	bl	80195e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019724:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8019728:	4603      	mov	r3, r0
 801972a:	4651      	mov	r1, sl
 801972c:	4620      	mov	r0, r4
 801972e:	e9cd 9700 	strd	r9, r7, [sp]
 8019732:	f7ff ffb7 	bl	80196a4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019736:	f8ad 901e 	strh.w	r9, [sp, #30]
 801973a:	9005      	str	r0, [sp, #20]
 801973c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8019740:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8019744:	b106      	cbz	r6, 8019748 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8019746:	b98d      	cbnz	r5, 801976c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8019748:	4b12      	ldr	r3, [pc, #72]	; (8019794 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801974a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801974e:	4a12      	ldr	r2, [pc, #72]	; (8019798 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8019750:	4812      	ldr	r0, [pc, #72]	; (801979c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8019752:	f00e fe31 	bl	80283b8 <__assert_func>
 8019756:	2004      	movs	r0, #4
 8019758:	e7d4      	b.n	8019704 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801975a:	2bff      	cmp	r3, #255	; 0xff
 801975c:	d104      	bne.n	8019768 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801975e:	2800      	cmp	r0, #0
 8019760:	bf14      	ite	ne
 8019762:	2040      	movne	r0, #64	; 0x40
 8019764:	2020      	moveq	r0, #32
 8019766:	e7cd      	b.n	8019704 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019768:	2040      	movs	r0, #64	; 0x40
 801976a:	e7cb      	b.n	8019704 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801976c:	6823      	ldr	r3, [r4, #0]
 801976e:	4620      	mov	r0, r4
 8019770:	9d02      	ldr	r5, [sp, #8]
 8019772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019774:	4798      	blx	r3
 8019776:	4228      	tst	r0, r5
 8019778:	d104      	bne.n	8019784 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801977a:	4b09      	ldr	r3, [pc, #36]	; (80197a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801977c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8019780:	4a05      	ldr	r2, [pc, #20]	; (8019798 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8019782:	e7e5      	b.n	8019750 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8019784:	6860      	ldr	r0, [r4, #4]
 8019786:	a902      	add	r1, sp, #8
 8019788:	6803      	ldr	r3, [r0, #0]
 801978a:	685b      	ldr	r3, [r3, #4]
 801978c:	4798      	blx	r3
 801978e:	b00a      	add	sp, #40	; 0x28
 8019790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019794:	0802b4d6 	.word	0x0802b4d6
 8019798:	0802b78a 	.word	0x0802b78a
 801979c:	0802b45a 	.word	0x0802b45a
 80197a0:	0802b50e 	.word	0x0802b50e

080197a4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80197a4:	b510      	push	{r4, lr}
 80197a6:	b08a      	sub	sp, #40	; 0x28
 80197a8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80197ac:	9408      	str	r4, [sp, #32]
 80197ae:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80197b2:	9407      	str	r4, [sp, #28]
 80197b4:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80197b8:	9406      	str	r4, [sp, #24]
 80197ba:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80197be:	9405      	str	r4, [sp, #20]
 80197c0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80197c4:	9404      	str	r4, [sp, #16]
 80197c6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80197ca:	9403      	str	r4, [sp, #12]
 80197cc:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80197d0:	9402      	str	r4, [sp, #8]
 80197d2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80197d6:	e9cd 3400 	strd	r3, r4, [sp]
 80197da:	4613      	mov	r3, r2
 80197dc:	2200      	movs	r2, #0
 80197de:	f7ff ff71 	bl	80196c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80197e2:	b00a      	add	sp, #40	; 0x28
 80197e4:	bd10      	pop	{r4, pc}
	...

080197e8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80197e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ea:	b08b      	sub	sp, #44	; 0x2c
 80197ec:	4616      	mov	r6, r2
 80197ee:	460d      	mov	r5, r1
 80197f0:	461f      	mov	r7, r3
 80197f2:	4604      	mov	r4, r0
 80197f4:	f7f7 f99c 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 80197f8:	6803      	ldr	r3, [r0, #0]
 80197fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197fc:	4798      	blx	r3
 80197fe:	4b0e      	ldr	r3, [pc, #56]	; (8019838 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8019800:	2200      	movs	r2, #0
 8019802:	4629      	mov	r1, r5
 8019804:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019808:	881b      	ldrh	r3, [r3, #0]
 801980a:	4620      	mov	r0, r4
 801980c:	9306      	str	r3, [sp, #24]
 801980e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019812:	9305      	str	r3, [sp, #20]
 8019814:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019818:	9304      	str	r3, [sp, #16]
 801981a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801981e:	9303      	str	r3, [sp, #12]
 8019820:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019824:	9302      	str	r3, [sp, #8]
 8019826:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801982a:	e9cd 7300 	strd	r7, r3, [sp]
 801982e:	4633      	mov	r3, r6
 8019830:	f7ff ff48 	bl	80196c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019834:	b00b      	add	sp, #44	; 0x2c
 8019836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019838:	2000bee4 	.word	0x2000bee4

0801983c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019840:	461f      	mov	r7, r3
 8019842:	4b14      	ldr	r3, [pc, #80]	; (8019894 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8019844:	b08a      	sub	sp, #40	; 0x28
 8019846:	4616      	mov	r6, r2
 8019848:	f8b3 8000 	ldrh.w	r8, [r3]
 801984c:	460d      	mov	r5, r1
 801984e:	4604      	mov	r4, r0
 8019850:	f7f7 f96e 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8019854:	6803      	ldr	r3, [r0, #0]
 8019856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019858:	4798      	blx	r3
 801985a:	2302      	movs	r3, #2
 801985c:	9008      	str	r0, [sp, #32]
 801985e:	2200      	movs	r2, #0
 8019860:	4629      	mov	r1, r5
 8019862:	4620      	mov	r0, r4
 8019864:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8019868:	2301      	movs	r3, #1
 801986a:	9305      	str	r3, [sp, #20]
 801986c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019870:	9304      	str	r3, [sp, #16]
 8019872:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019876:	9303      	str	r3, [sp, #12]
 8019878:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801987c:	9302      	str	r3, [sp, #8]
 801987e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019882:	e9cd 7300 	strd	r7, r3, [sp]
 8019886:	4633      	mov	r3, r6
 8019888:	f7ff ff1c 	bl	80196c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801988c:	b00a      	add	sp, #40	; 0x28
 801988e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019892:	bf00      	nop
 8019894:	2000bee4 	.word	0x2000bee4

08019898 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8019898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801989c:	b08b      	sub	sp, #44	; 0x2c
 801989e:	469b      	mov	fp, r3
 80198a0:	4604      	mov	r4, r0
 80198a2:	4692      	mov	sl, r2
 80198a4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80198a8:	2600      	movs	r6, #0
 80198aa:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80198ae:	4689      	mov	r9, r1
 80198b0:	2fff      	cmp	r7, #255	; 0xff
 80198b2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80198b6:	9608      	str	r6, [sp, #32]
 80198b8:	bf14      	ite	ne
 80198ba:	2308      	movne	r3, #8
 80198bc:	2302      	moveq	r3, #2
 80198be:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80198c2:	f7ff fe8d 	bl	80195e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80198c6:	465a      	mov	r2, fp
 80198c8:	4603      	mov	r3, r0
 80198ca:	4651      	mov	r1, sl
 80198cc:	4620      	mov	r0, r4
 80198ce:	e9cd 8500 	strd	r8, r5, [sp]
 80198d2:	f7ff fee7 	bl	80196a4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80198d6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80198da:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80198de:	f8ad 3018 	strh.w	r3, [sp, #24]
 80198e2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80198e6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80198ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80198ee:	6823      	ldr	r3, [r4, #0]
 80198f0:	9d02      	ldr	r5, [sp, #8]
 80198f2:	9005      	str	r0, [sp, #20]
 80198f4:	4620      	mov	r0, r4
 80198f6:	f8ad 601c 	strh.w	r6, [sp, #28]
 80198fa:	f8ad 801e 	strh.w	r8, [sp, #30]
 80198fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8019902:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8019906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019908:	4798      	blx	r3
 801990a:	4228      	tst	r0, r5
 801990c:	d106      	bne.n	801991c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801990e:	4b07      	ldr	r3, [pc, #28]	; (801992c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8019910:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8019914:	4a06      	ldr	r2, [pc, #24]	; (8019930 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8019916:	4807      	ldr	r0, [pc, #28]	; (8019934 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8019918:	f00e fd4e 	bl	80283b8 <__assert_func>
 801991c:	6860      	ldr	r0, [r4, #4]
 801991e:	a902      	add	r1, sp, #8
 8019920:	6803      	ldr	r3, [r0, #0]
 8019922:	685b      	ldr	r3, [r3, #4]
 8019924:	4798      	blx	r3
 8019926:	b00b      	add	sp, #44	; 0x2c
 8019928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801992c:	0802b50e 	.word	0x0802b50e
 8019930:	0802b853 	.word	0x0802b853
 8019934:	0802b45a 	.word	0x0802b45a

08019938 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019938:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801993c:	461f      	mov	r7, r3
 801993e:	4b0b      	ldr	r3, [pc, #44]	; (801996c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019940:	460d      	mov	r5, r1
 8019942:	4616      	mov	r6, r2
 8019944:	f8b3 8000 	ldrh.w	r8, [r3]
 8019948:	4604      	mov	r4, r0
 801994a:	f7f7 f8f1 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801994e:	6803      	ldr	r3, [r0, #0]
 8019950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019952:	4798      	blx	r3
 8019954:	463b      	mov	r3, r7
 8019956:	4632      	mov	r2, r6
 8019958:	4629      	mov	r1, r5
 801995a:	e9cd 8000 	strd	r8, r0, [sp]
 801995e:	4620      	mov	r0, r4
 8019960:	f7ff fea0 	bl	80196a4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019964:	b002      	add	sp, #8
 8019966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801996a:	bf00      	nop
 801996c:	2000bee4 	.word	0x2000bee4

08019970 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8019970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019974:	4698      	mov	r8, r3
 8019976:	b088      	sub	sp, #32
 8019978:	2300      	movs	r3, #0
 801997a:	4617      	mov	r7, r2
 801997c:	4604      	mov	r4, r0
 801997e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8019982:	9306      	str	r3, [sp, #24]
 8019984:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019988:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801998c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019990:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019994:	e9cd 3100 	strd	r3, r1, [sp]
 8019998:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801999c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80199a0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80199a4:	f88d 301c 	strb.w	r3, [sp, #28]
 80199a8:	f7ff fe1a 	bl	80195e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80199ac:	4642      	mov	r2, r8
 80199ae:	4603      	mov	r3, r0
 80199b0:	4639      	mov	r1, r7
 80199b2:	4620      	mov	r0, r4
 80199b4:	f7ff ffc0 	bl	8019938 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80199b8:	4b16      	ldr	r3, [pc, #88]	; (8019a14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80199ba:	9003      	str	r0, [sp, #12]
 80199bc:	881b      	ldrh	r3, [r3, #0]
 80199be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80199c2:	f7f7 f8b5 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 80199c6:	6803      	ldr	r3, [r0, #0]
 80199c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199ca:	4798      	blx	r3
 80199cc:	f88d 001e 	strb.w	r0, [sp, #30]
 80199d0:	f88d 001d 	strb.w	r0, [sp, #29]
 80199d4:	b106      	cbz	r6, 80199d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80199d6:	b935      	cbnz	r5, 80199e6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80199d8:	4b0f      	ldr	r3, [pc, #60]	; (8019a18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80199da:	f240 11cd 	movw	r1, #461	; 0x1cd
 80199de:	4a0f      	ldr	r2, [pc, #60]	; (8019a1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80199e0:	480f      	ldr	r0, [pc, #60]	; (8019a20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80199e2:	f00e fce9 	bl	80283b8 <__assert_func>
 80199e6:	6823      	ldr	r3, [r4, #0]
 80199e8:	4620      	mov	r0, r4
 80199ea:	9d00      	ldr	r5, [sp, #0]
 80199ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199ee:	4798      	blx	r3
 80199f0:	4228      	tst	r0, r5
 80199f2:	d104      	bne.n	80199fe <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80199f4:	4b0b      	ldr	r3, [pc, #44]	; (8019a24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80199f6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80199fa:	4a08      	ldr	r2, [pc, #32]	; (8019a1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80199fc:	e7f0      	b.n	80199e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80199fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a00:	4669      	mov	r1, sp
 8019a02:	6860      	ldr	r0, [r4, #4]
 8019a04:	9306      	str	r3, [sp, #24]
 8019a06:	6803      	ldr	r3, [r0, #0]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	4798      	blx	r3
 8019a0c:	b008      	add	sp, #32
 8019a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a12:	bf00      	nop
 8019a14:	2000bee4 	.word	0x2000bee4
 8019a18:	0802b4d6 	.word	0x0802b4d6
 8019a1c:	0802b63c 	.word	0x0802b63c
 8019a20:	0802b45a 	.word	0x0802b45a
 8019a24:	0802b50e 	.word	0x0802b50e

08019a28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019a28:	b570      	push	{r4, r5, r6, lr}
 8019a2a:	b08a      	sub	sp, #40	; 0x28
 8019a2c:	4604      	mov	r4, r0
 8019a2e:	466b      	mov	r3, sp
 8019a30:	e883 0006 	stmia.w	r3, {r1, r2}
 8019a34:	4b1f      	ldr	r3, [pc, #124]	; (8019ab4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8019a36:	781b      	ldrb	r3, [r3, #0]
 8019a38:	b933      	cbnz	r3, 8019a48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019a3a:	4b1f      	ldr	r3, [pc, #124]	; (8019ab8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8019a3c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8019a40:	4a1e      	ldr	r2, [pc, #120]	; (8019abc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019a42:	481f      	ldr	r0, [pc, #124]	; (8019ac0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8019a44:	f00e fcb8 	bl	80283b8 <__assert_func>
 8019a48:	2300      	movs	r3, #0
 8019a4a:	f8bd 5000 	ldrh.w	r5, [sp]
 8019a4e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8019a52:	9308      	str	r3, [sp, #32]
 8019a54:	2301      	movs	r3, #1
 8019a56:	9302      	str	r3, [sp, #8]
 8019a58:	6803      	ldr	r3, [r0, #0]
 8019a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a5c:	4798      	blx	r3
 8019a5e:	4632      	mov	r2, r6
 8019a60:	4629      	mov	r1, r5
 8019a62:	4603      	mov	r3, r0
 8019a64:	4620      	mov	r0, r4
 8019a66:	f7ff ff67 	bl	8019938 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019a6c:	9003      	str	r0, [sp, #12]
 8019a6e:	9305      	str	r3, [sp, #20]
 8019a70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019a74:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019a78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019a7c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019a80:	4b10      	ldr	r3, [pc, #64]	; (8019ac4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8019a82:	881b      	ldrh	r3, [r3, #0]
 8019a84:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019a88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019a8c:	f7f7 f850 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8019a90:	6803      	ldr	r3, [r0, #0]
 8019a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a94:	4798      	blx	r3
 8019a96:	23ff      	movs	r3, #255	; 0xff
 8019a98:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019a9c:	a902      	add	r1, sp, #8
 8019a9e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019aa2:	6860      	ldr	r0, [r4, #4]
 8019aa4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019aa8:	6803      	ldr	r3, [r0, #0]
 8019aaa:	685b      	ldr	r3, [r3, #4]
 8019aac:	4798      	blx	r3
 8019aae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019ab0:	b00a      	add	sp, #40	; 0x28
 8019ab2:	bd70      	pop	{r4, r5, r6, pc}
 8019ab4:	2000bee9 	.word	0x2000bee9
 8019ab8:	0802b3a7 	.word	0x0802b3a7
 8019abc:	0802b6e0 	.word	0x0802b6e0
 8019ac0:	0802b45a 	.word	0x0802b45a
 8019ac4:	2000bee4 	.word	0x2000bee4

08019ac8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019aca:	b08b      	sub	sp, #44	; 0x2c
 8019acc:	4604      	mov	r4, r0
 8019ace:	466d      	mov	r5, sp
 8019ad0:	e885 0006 	stmia.w	r5, {r1, r2}
 8019ad4:	461d      	mov	r5, r3
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	f8bd 6000 	ldrh.w	r6, [sp]
 8019adc:	9308      	str	r3, [sp, #32]
 8019ade:	2301      	movs	r3, #1
 8019ae0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019ae4:	9302      	str	r3, [sp, #8]
 8019ae6:	6803      	ldr	r3, [r0, #0]
 8019ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019aea:	4798      	blx	r3
 8019aec:	463a      	mov	r2, r7
 8019aee:	4631      	mov	r1, r6
 8019af0:	4603      	mov	r3, r0
 8019af2:	4620      	mov	r0, r4
 8019af4:	f7ff ff20 	bl	8019938 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019af8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019afc:	9003      	str	r0, [sp, #12]
 8019afe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019b02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019b06:	9505      	str	r5, [sp, #20]
 8019b08:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019b0c:	4b0d      	ldr	r3, [pc, #52]	; (8019b44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8019b0e:	881b      	ldrh	r3, [r3, #0]
 8019b10:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019b16:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019b1a:	f7f7 f809 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8019b1e:	6803      	ldr	r3, [r0, #0]
 8019b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b22:	4798      	blx	r3
 8019b24:	23ff      	movs	r3, #255	; 0xff
 8019b26:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019b2a:	a902      	add	r1, sp, #8
 8019b2c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019b30:	6860      	ldr	r0, [r4, #4]
 8019b32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019b36:	6803      	ldr	r3, [r0, #0]
 8019b38:	685b      	ldr	r3, [r3, #4]
 8019b3a:	4798      	blx	r3
 8019b3c:	4628      	mov	r0, r5
 8019b3e:	b00b      	add	sp, #44	; 0x2c
 8019b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b42:	bf00      	nop
 8019b44:	2000bee4 	.word	0x2000bee4

08019b48 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019b48:	b570      	push	{r4, r5, r6, lr}
 8019b4a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019b4e:	4604      	mov	r4, r0
 8019b50:	b19b      	cbz	r3, 8019b7a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019b52:	2002      	movs	r0, #2
 8019b54:	f7fc fbe4 	bl	8016320 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019b58:	2300      	movs	r3, #0
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019b60:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019b64:	6823      	ldr	r3, [r4, #0]
 8019b66:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8019b6a:	f7ff fd39 	bl	80195e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019b6e:	4601      	mov	r1, r0
 8019b70:	4620      	mov	r0, r4
 8019b72:	462b      	mov	r3, r5
 8019b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b78:	4718      	bx	r3
 8019b7a:	bd70      	pop	{r4, r5, r6, pc}

08019b7c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019b7c:	4770      	bx	lr

08019b7e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019b7e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8019b82:	1a13      	subs	r3, r2, r0
 8019b84:	4258      	negs	r0, r3
 8019b86:	4158      	adcs	r0, r3
 8019b88:	4770      	bx	lr

08019b8a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019b8a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019b8e:	1a9b      	subs	r3, r3, r2
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	bfdc      	itt	le
 8019b94:	6882      	ldrle	r2, [r0, #8]
 8019b96:	189b      	addle	r3, r3, r2
 8019b98:	2b01      	cmp	r3, #1
 8019b9a:	bfcc      	ite	gt
 8019b9c:	2000      	movgt	r0, #0
 8019b9e:	2001      	movle	r0, #1
 8019ba0:	4770      	bx	lr

08019ba2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019ba2:	6902      	ldr	r2, [r0, #16]
 8019ba4:	6840      	ldr	r0, [r0, #4]
 8019ba6:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019baa:	4770      	bx	lr

08019bac <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019bac:	6803      	ldr	r3, [r0, #0]
 8019bae:	691b      	ldr	r3, [r3, #16]
 8019bb0:	4718      	bx	r3

08019bb2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019bb2:	4770      	bx	lr

08019bb4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019bb4:	4770      	bx	lr
	...

08019bb8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019bb8:	2301      	movs	r3, #1
 8019bba:	b570      	push	{r4, r5, r6, lr}
 8019bbc:	7203      	strb	r3, [r0, #8]
 8019bbe:	4604      	mov	r4, r0
 8019bc0:	6840      	ldr	r0, [r0, #4]
 8019bc2:	6803      	ldr	r3, [r0, #0]
 8019bc4:	699b      	ldr	r3, [r3, #24]
 8019bc6:	4798      	blx	r3
 8019bc8:	6803      	ldr	r3, [r0, #0]
 8019bca:	4605      	mov	r5, r0
 8019bcc:	2b08      	cmp	r3, #8
 8019bce:	d01e      	beq.n	8019c0e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019bd0:	d80b      	bhi.n	8019bea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019bd2:	2b02      	cmp	r3, #2
 8019bd4:	d027      	beq.n	8019c26 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019bd6:	2b04      	cmp	r3, #4
 8019bd8:	d011      	beq.n	8019bfe <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019bda:	2b01      	cmp	r3, #1
 8019bdc:	d028      	beq.n	8019c30 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019bde:	4b17      	ldr	r3, [pc, #92]	; (8019c3c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019be0:	218b      	movs	r1, #139	; 0x8b
 8019be2:	4a17      	ldr	r2, [pc, #92]	; (8019c40 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019be4:	4817      	ldr	r0, [pc, #92]	; (8019c44 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019be6:	f00e fbe7 	bl	80283b8 <__assert_func>
 8019bea:	2b40      	cmp	r3, #64	; 0x40
 8019bec:	d020      	beq.n	8019c30 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019bee:	d801      	bhi.n	8019bf4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019bf0:	2b20      	cmp	r3, #32
 8019bf2:	e7f3      	b.n	8019bdc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019bf4:	2b80      	cmp	r3, #128	; 0x80
 8019bf6:	d01b      	beq.n	8019c30 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019bfc:	e7ee      	b.n	8019bdc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019bfe:	6823      	ldr	r3, [r4, #0]
 8019c00:	7f01      	ldrb	r1, [r0, #28]
 8019c02:	4620      	mov	r0, r4
 8019c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c06:	4798      	blx	r3
 8019c08:	6823      	ldr	r3, [r4, #0]
 8019c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c0c:	e006      	b.n	8019c1c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019c0e:	6823      	ldr	r3, [r4, #0]
 8019c10:	7f01      	ldrb	r1, [r0, #28]
 8019c12:	4620      	mov	r0, r4
 8019c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c16:	4798      	blx	r3
 8019c18:	6823      	ldr	r3, [r4, #0]
 8019c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c1c:	4629      	mov	r1, r5
 8019c1e:	4620      	mov	r0, r4
 8019c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c24:	4718      	bx	r3
 8019c26:	6823      	ldr	r3, [r4, #0]
 8019c28:	4620      	mov	r0, r4
 8019c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c2c:	4798      	blx	r3
 8019c2e:	e7f3      	b.n	8019c18 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8019c30:	6823      	ldr	r3, [r4, #0]
 8019c32:	4620      	mov	r0, r4
 8019c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c36:	4798      	blx	r3
 8019c38:	e7e6      	b.n	8019c08 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8019c3a:	bf00      	nop
 8019c3c:	0802b931 	.word	0x0802b931
 8019c40:	0802ba40 	.word	0x0802ba40
 8019c44:	0802b956 	.word	0x0802b956

08019c48 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019c48:	b570      	push	{r4, r5, r6, lr}
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	460e      	mov	r6, r1
 8019c4e:	6860      	ldr	r0, [r4, #4]
 8019c50:	6803      	ldr	r3, [r0, #0]
 8019c52:	685b      	ldr	r3, [r3, #4]
 8019c54:	4798      	blx	r3
 8019c56:	2800      	cmp	r0, #0
 8019c58:	d1f9      	bne.n	8019c4e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019c5a:	4d0b      	ldr	r5, [pc, #44]	; (8019c88 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8019c5c:	6828      	ldr	r0, [r5, #0]
 8019c5e:	6803      	ldr	r3, [r0, #0]
 8019c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019c62:	4798      	blx	r3
 8019c64:	f7fc fe10 	bl	8016888 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019c68:	6860      	ldr	r0, [r4, #4]
 8019c6a:	4631      	mov	r1, r6
 8019c6c:	6803      	ldr	r3, [r0, #0]
 8019c6e:	689b      	ldr	r3, [r3, #8]
 8019c70:	4798      	blx	r3
 8019c72:	6823      	ldr	r3, [r4, #0]
 8019c74:	4620      	mov	r0, r4
 8019c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c78:	4798      	blx	r3
 8019c7a:	6828      	ldr	r0, [r5, #0]
 8019c7c:	6803      	ldr	r3, [r0, #0]
 8019c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c84:	4718      	bx	r3
 8019c86:	bf00      	nop
 8019c88:	2000beec 	.word	0x2000beec

08019c8c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019c8c:	b508      	push	{r3, lr}
 8019c8e:	f7fc fddf 	bl	8016850 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019c96:	f7fc bde9 	b.w	801686c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019c9a <_ZN8touchgfx13DMA_Interface5startEv>:
 8019c9a:	b510      	push	{r4, lr}
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	6840      	ldr	r0, [r0, #4]
 8019ca0:	6803      	ldr	r3, [r0, #0]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	4798      	blx	r3
 8019ca6:	b948      	cbnz	r0, 8019cbc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019ca8:	7a63      	ldrb	r3, [r4, #9]
 8019caa:	b13b      	cbz	r3, 8019cbc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019cac:	7a23      	ldrb	r3, [r4, #8]
 8019cae:	b92b      	cbnz	r3, 8019cbc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019cb0:	6823      	ldr	r3, [r4, #0]
 8019cb2:	4620      	mov	r0, r4
 8019cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cba:	4718      	bx	r3
 8019cbc:	bd10      	pop	{r4, pc}
	...

08019cc0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019cc0:	b510      	push	{r4, lr}
 8019cc2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8019cc6:	1b12      	subs	r2, r2, r4
 8019cc8:	2a00      	cmp	r2, #0
 8019cca:	bfdc      	itt	le
 8019ccc:	6883      	ldrle	r3, [r0, #8]
 8019cce:	18d2      	addle	r2, r2, r3
 8019cd0:	2a01      	cmp	r2, #1
 8019cd2:	dd18      	ble.n	8019d06 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019cd4:	6843      	ldr	r3, [r0, #4]
 8019cd6:	f101 021c 	add.w	r2, r1, #28
 8019cda:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8019cde:	f851 4b04 	ldr.w	r4, [r1], #4
 8019ce2:	4291      	cmp	r1, r2
 8019ce4:	f843 4b04 	str.w	r4, [r3], #4
 8019ce8:	d1f9      	bne.n	8019cde <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8019cea:	880a      	ldrh	r2, [r1, #0]
 8019cec:	801a      	strh	r2, [r3, #0]
 8019cee:	788a      	ldrb	r2, [r1, #2]
 8019cf0:	709a      	strb	r2, [r3, #2]
 8019cf2:	68c3      	ldr	r3, [r0, #12]
 8019cf4:	6882      	ldr	r2, [r0, #8]
 8019cf6:	f3bf 8f5b 	dmb	ish
 8019cfa:	3301      	adds	r3, #1
 8019cfc:	429a      	cmp	r2, r3
 8019cfe:	bfd8      	it	le
 8019d00:	1a9b      	suble	r3, r3, r2
 8019d02:	60c3      	str	r3, [r0, #12]
 8019d04:	bd10      	pop	{r4, pc}
 8019d06:	4b03      	ldr	r3, [pc, #12]	; (8019d14 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019d08:	2139      	movs	r1, #57	; 0x39
 8019d0a:	4a03      	ldr	r2, [pc, #12]	; (8019d18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8019d0c:	4803      	ldr	r0, [pc, #12]	; (8019d1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8019d0e:	f00e fb53 	bl	80283b8 <__assert_func>
 8019d12:	bf00      	nop
 8019d14:	0802b97c 	.word	0x0802b97c
 8019d18:	0802ba70 	.word	0x0802ba70
 8019d1c:	0802b956 	.word	0x0802b956

08019d20 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019d20:	b510      	push	{r4, lr}
 8019d22:	6803      	ldr	r3, [r0, #0]
 8019d24:	4604      	mov	r4, r0
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	4798      	blx	r3
 8019d2a:	b128      	cbz	r0, 8019d38 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019d2c:	4b07      	ldr	r3, [pc, #28]	; (8019d4c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8019d2e:	213f      	movs	r1, #63	; 0x3f
 8019d30:	4a07      	ldr	r2, [pc, #28]	; (8019d50 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019d32:	4808      	ldr	r0, [pc, #32]	; (8019d54 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019d34:	f00e fb40 	bl	80283b8 <__assert_func>
 8019d38:	6923      	ldr	r3, [r4, #16]
 8019d3a:	68a2      	ldr	r2, [r4, #8]
 8019d3c:	f3bf 8f5b 	dmb	ish
 8019d40:	3301      	adds	r3, #1
 8019d42:	429a      	cmp	r2, r3
 8019d44:	bfd8      	it	le
 8019d46:	1a9b      	suble	r3, r3, r2
 8019d48:	6123      	str	r3, [r4, #16]
 8019d4a:	bd10      	pop	{r4, pc}
 8019d4c:	0802b99f 	.word	0x0802b99f
 8019d50:	0802babe 	.word	0x0802babe
 8019d54:	0802b956 	.word	0x0802b956

08019d58 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019d58:	b570      	push	{r4, r5, r6, lr}
 8019d5a:	4604      	mov	r4, r0
 8019d5c:	6840      	ldr	r0, [r0, #4]
 8019d5e:	6803      	ldr	r3, [r0, #0]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	4798      	blx	r3
 8019d64:	4605      	mov	r5, r0
 8019d66:	b930      	cbnz	r0, 8019d76 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019d68:	7a23      	ldrb	r3, [r4, #8]
 8019d6a:	b123      	cbz	r3, 8019d76 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019d6c:	6860      	ldr	r0, [r4, #4]
 8019d6e:	6803      	ldr	r3, [r0, #0]
 8019d70:	695b      	ldr	r3, [r3, #20]
 8019d72:	4798      	blx	r3
 8019d74:	7225      	strb	r5, [r4, #8]
 8019d76:	6860      	ldr	r0, [r4, #4]
 8019d78:	6803      	ldr	r3, [r0, #0]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	4798      	blx	r3
 8019d7e:	b928      	cbnz	r0, 8019d8c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019d80:	6823      	ldr	r3, [r4, #0]
 8019d82:	4620      	mov	r0, r4
 8019d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d8a:	4718      	bx	r3
 8019d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d90:	f7fc bd86 	b.w	80168a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019d94 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019d94:	b510      	push	{r4, lr}
 8019d96:	6082      	str	r2, [r0, #8]
 8019d98:	2200      	movs	r2, #0
 8019d9a:	4c03      	ldr	r4, [pc, #12]	; (8019da8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019d9c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019da0:	e9c0 4100 	strd	r4, r1, [r0]
 8019da4:	bd10      	pop	{r4, pc}
 8019da6:	bf00      	nop
 8019da8:	0802ba24 	.word	0x0802ba24

08019dac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019dac:	6840      	ldr	r0, [r0, #4]
 8019dae:	6803      	ldr	r3, [r0, #0]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	4718      	bx	r3

08019db4 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8019db4:	2001      	movs	r0, #1
 8019db6:	4770      	bx	lr

08019db8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8019db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dbc:	460d      	mov	r5, r1
 8019dbe:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019dc2:	b085      	sub	sp, #20
 8019dc4:	4690      	mov	r8, r2
 8019dc6:	4411      	add	r1, r2
 8019dc8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019dcc:	4699      	mov	r9, r3
 8019dce:	6803      	ldr	r3, [r0, #0]
 8019dd0:	60c1      	str	r1, [r0, #12]
 8019dd2:	4604      	mov	r4, r0
 8019dd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019dd6:	440a      	add	r2, r1
 8019dd8:	6102      	str	r2, [r0, #16]
 8019dda:	68db      	ldr	r3, [r3, #12]
 8019ddc:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8019de0:	4798      	blx	r3
 8019de2:	2800      	cmp	r0, #0
 8019de4:	d039      	beq.n	8019e5a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8019de6:	44c8      	add	r8, r9
 8019de8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019dec:	4445      	add	r5, r8
 8019dee:	6823      	ldr	r3, [r4, #0]
 8019df0:	f10d 020f 	add.w	r2, sp, #15
 8019df4:	a903      	add	r1, sp, #12
 8019df6:	4620      	mov	r0, r4
 8019df8:	9200      	str	r2, [sp, #0]
 8019dfa:	f10d 020d 	add.w	r2, sp, #13
 8019dfe:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8019e02:	f10d 030e 	add.w	r3, sp, #14
 8019e06:	47c0      	blx	r8
 8019e08:	b1f8      	cbz	r0, 8019e4a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8019e0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8019e0e:	7a20      	ldrb	r0, [r4, #8]
 8019e10:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019e14:	4358      	muls	r0, r3
 8019e16:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8019e1a:	1c43      	adds	r3, r0, #1
 8019e1c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019e20:	f817 0b01 	ldrb.w	r0, [r7], #1
 8019e24:	121b      	asrs	r3, r3, #8
 8019e26:	fb10 f003 	smulbb	r0, r0, r3
 8019e2a:	b283      	uxth	r3, r0
 8019e2c:	1c58      	adds	r0, r3, #1
 8019e2e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019e32:	6823      	ldr	r3, [r4, #0]
 8019e34:	1200      	asrs	r0, r0, #8
 8019e36:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8019e3a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8019e3e:	28ff      	cmp	r0, #255	; 0xff
 8019e40:	d10e      	bne.n	8019e60 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8019e42:	9100      	str	r1, [sp, #0]
 8019e44:	4629      	mov	r1, r5
 8019e46:	4620      	mov	r0, r4
 8019e48:	47c0      	blx	r8
 8019e4a:	68e3      	ldr	r3, [r4, #12]
 8019e4c:	3e01      	subs	r6, #1
 8019e4e:	f105 0503 	add.w	r5, r5, #3
 8019e52:	f103 0301 	add.w	r3, r3, #1
 8019e56:	60e3      	str	r3, [r4, #12]
 8019e58:	d1c9      	bne.n	8019dee <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8019e5a:	b005      	add	sp, #20
 8019e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e60:	fa1f fc80 	uxth.w	ip, r0
 8019e64:	43c0      	mvns	r0, r0
 8019e66:	f895 e002 	ldrb.w	lr, [r5, #2]
 8019e6a:	fb12 f20c 	smulbb	r2, r2, ip
 8019e6e:	b2c0      	uxtb	r0, r0
 8019e70:	fb13 f30c 	smulbb	r3, r3, ip
 8019e74:	fb0e 2200 	mla	r2, lr, r0, r2
 8019e78:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019e7c:	fb11 f10c 	smulbb	r1, r1, ip
 8019e80:	fb0e 3300 	mla	r3, lr, r0, r3
 8019e84:	f895 e000 	ldrb.w	lr, [r5]
 8019e88:	b292      	uxth	r2, r2
 8019e8a:	b29b      	uxth	r3, r3
 8019e8c:	fb0e 1000 	mla	r0, lr, r0, r1
 8019e90:	1c59      	adds	r1, r3, #1
 8019e92:	b280      	uxth	r0, r0
 8019e94:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019e98:	1c51      	adds	r1, r2, #1
 8019e9a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019e9e:	1c41      	adds	r1, r0, #1
 8019ea0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019ea4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8019ea8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019eac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019eb0:	9000      	str	r0, [sp, #0]
 8019eb2:	e7c7      	b.n	8019e44 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08019eb4 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8019eb4:	f89d 0000 	ldrb.w	r0, [sp]
 8019eb8:	704b      	strb	r3, [r1, #1]
 8019eba:	7008      	strb	r0, [r1, #0]
 8019ebc:	708a      	strb	r2, [r1, #2]
 8019ebe:	4770      	bx	lr

08019ec0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8019ec0:	4413      	add	r3, r2
 8019ec2:	7dc2      	ldrb	r2, [r0, #23]
 8019ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ec8:	4419      	add	r1, r3
 8019eca:	7a03      	ldrb	r3, [r0, #8]
 8019ecc:	435a      	muls	r2, r3
 8019ece:	1c53      	adds	r3, r2, #1
 8019ed0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019ed4:	121b      	asrs	r3, r3, #8
 8019ed6:	2bff      	cmp	r3, #255	; 0xff
 8019ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eda:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8019ede:	d13e      	bne.n	8019f5e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8019ee0:	4427      	add	r7, r4
 8019ee2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019ee6:	3103      	adds	r1, #3
 8019ee8:	7d86      	ldrb	r6, [r0, #22]
 8019eea:	2bff      	cmp	r3, #255	; 0xff
 8019eec:	d10a      	bne.n	8019f04 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8019eee:	f801 6c03 	strb.w	r6, [r1, #-3]
 8019ef2:	7d43      	ldrb	r3, [r0, #21]
 8019ef4:	f801 3c02 	strb.w	r3, [r1, #-2]
 8019ef8:	7d03      	ldrb	r3, [r0, #20]
 8019efa:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019efe:	42a7      	cmp	r7, r4
 8019f00:	d1ef      	bne.n	8019ee2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8019f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f04:	b29a      	uxth	r2, r3
 8019f06:	43db      	mvns	r3, r3
 8019f08:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8019f0c:	fb16 f602 	smulbb	r6, r6, r2
 8019f10:	b2db      	uxtb	r3, r3
 8019f12:	fb05 6503 	mla	r5, r5, r3, r6
 8019f16:	b2ad      	uxth	r5, r5
 8019f18:	1c6e      	adds	r6, r5, #1
 8019f1a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019f1e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8019f22:	fb16 f603 	smulbb	r6, r6, r3
 8019f26:	122d      	asrs	r5, r5, #8
 8019f28:	f801 5c03 	strb.w	r5, [r1, #-3]
 8019f2c:	7d45      	ldrb	r5, [r0, #21]
 8019f2e:	fb05 6502 	mla	r5, r5, r2, r6
 8019f32:	b2ad      	uxth	r5, r5
 8019f34:	1c6e      	adds	r6, r5, #1
 8019f36:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019f3a:	122d      	asrs	r5, r5, #8
 8019f3c:	f801 5c02 	strb.w	r5, [r1, #-2]
 8019f40:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019f44:	7d06      	ldrb	r6, [r0, #20]
 8019f46:	fb15 f303 	smulbb	r3, r5, r3
 8019f4a:	fb06 3202 	mla	r2, r6, r2, r3
 8019f4e:	b292      	uxth	r2, r2
 8019f50:	1c53      	adds	r3, r2, #1
 8019f52:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019f56:	1212      	asrs	r2, r2, #8
 8019f58:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019f5c:	e7cf      	b.n	8019efe <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8019f5e:	b2de      	uxtb	r6, r3
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d0ce      	beq.n	8019f02 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8019f64:	3103      	adds	r1, #3
 8019f66:	4427      	add	r7, r4
 8019f68:	f814 2b01 	ldrb.w	r2, [r4], #1
 8019f6c:	3103      	adds	r1, #3
 8019f6e:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8019f72:	fb02 f306 	mul.w	r3, r2, r6
 8019f76:	42bc      	cmp	r4, r7
 8019f78:	f103 0201 	add.w	r2, r3, #1
 8019f7c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019f80:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019f84:	b295      	uxth	r5, r2
 8019f86:	ea6f 0202 	mvn.w	r2, r2
 8019f8a:	b2d3      	uxtb	r3, r2
 8019f8c:	7d82      	ldrb	r2, [r0, #22]
 8019f8e:	fb1c fc03 	smulbb	ip, ip, r3
 8019f92:	fb02 c205 	mla	r2, r2, r5, ip
 8019f96:	b292      	uxth	r2, r2
 8019f98:	f102 0c01 	add.w	ip, r2, #1
 8019f9c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019fa0:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8019fa4:	fb1c fc03 	smulbb	ip, ip, r3
 8019fa8:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019fac:	f801 2c06 	strb.w	r2, [r1, #-6]
 8019fb0:	7d42      	ldrb	r2, [r0, #21]
 8019fb2:	fb02 c205 	mla	r2, r2, r5, ip
 8019fb6:	b292      	uxth	r2, r2
 8019fb8:	f102 0c01 	add.w	ip, r2, #1
 8019fbc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019fc0:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019fc4:	f801 2c05 	strb.w	r2, [r1, #-5]
 8019fc8:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8019fcc:	f890 c014 	ldrb.w	ip, [r0, #20]
 8019fd0:	fb12 f303 	smulbb	r3, r2, r3
 8019fd4:	fb0c 3305 	mla	r3, ip, r5, r3
 8019fd8:	b29b      	uxth	r3, r3
 8019fda:	f103 0201 	add.w	r2, r3, #1
 8019fde:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019fe2:	ea4f 2323 	mov.w	r3, r3, asr #8
 8019fe6:	f801 3c04 	strb.w	r3, [r1, #-4]
 8019fea:	d1bd      	bne.n	8019f68 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8019fec:	e789      	b.n	8019f02 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08019fee <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8019fee:	b510      	push	{r4, lr}
 8019ff0:	7d04      	ldrb	r4, [r0, #20]
 8019ff2:	700c      	strb	r4, [r1, #0]
 8019ff4:	7d41      	ldrb	r1, [r0, #21]
 8019ff6:	7011      	strb	r1, [r2, #0]
 8019ff8:	7d82      	ldrb	r2, [r0, #22]
 8019ffa:	701a      	strb	r2, [r3, #0]
 8019ffc:	9b02      	ldr	r3, [sp, #8]
 8019ffe:	7dc2      	ldrb	r2, [r0, #23]
 801a000:	2001      	movs	r0, #1
 801a002:	701a      	strb	r2, [r3, #0]
 801a004:	bd10      	pop	{r4, pc}

0801a006 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801a006:	b570      	push	{r4, r5, r6, lr}
 801a008:	4616      	mov	r6, r2
 801a00a:	4604      	mov	r4, r0
 801a00c:	460d      	mov	r5, r1
 801a00e:	f7f6 fd8f 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801a012:	6803      	ldr	r3, [r0, #0]
 801a014:	4629      	mov	r1, r5
 801a016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a018:	4798      	blx	r3
 801a01a:	7520      	strb	r0, [r4, #20]
 801a01c:	f7f6 fd88 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801a020:	6803      	ldr	r3, [r0, #0]
 801a022:	4629      	mov	r1, r5
 801a024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a026:	4798      	blx	r3
 801a028:	7560      	strb	r0, [r4, #21]
 801a02a:	f7f6 fd81 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801a02e:	6803      	ldr	r3, [r0, #0]
 801a030:	4629      	mov	r1, r5
 801a032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a034:	4798      	blx	r3
 801a036:	75e6      	strb	r6, [r4, #23]
 801a038:	75a0      	strb	r0, [r4, #22]
 801a03a:	bd70      	pop	{r4, r5, r6, pc}

0801a03c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a03e:	460e      	mov	r6, r1
 801a040:	4617      	mov	r7, r2
 801a042:	4604      	mov	r4, r0
 801a044:	f000 f832 	bl	801a0ac <_ZN8touchgfx15AbstractPainterC1Ev>
 801a048:	4b12      	ldr	r3, [pc, #72]	; (801a094 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801a04a:	6023      	str	r3, [r4, #0]
 801a04c:	f7f6 fd70 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801a050:	6803      	ldr	r3, [r0, #0]
 801a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a054:	4798      	blx	r3
 801a056:	1e43      	subs	r3, r0, #1
 801a058:	425d      	negs	r5, r3
 801a05a:	415d      	adcs	r5, r3
 801a05c:	4b0e      	ldr	r3, [pc, #56]	; (801a098 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a062:	b130      	cbz	r0, 801a072 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801a064:	6803      	ldr	r3, [r0, #0]
 801a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a068:	4798      	blx	r3
 801a06a:	2801      	cmp	r0, #1
 801a06c:	bf08      	it	eq
 801a06e:	f045 0501 	orreq.w	r5, r5, #1
 801a072:	b92d      	cbnz	r5, 801a080 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801a074:	4b09      	ldr	r3, [pc, #36]	; (801a09c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801a076:	2129      	movs	r1, #41	; 0x29
 801a078:	4a09      	ldr	r2, [pc, #36]	; (801a0a0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801a07a:	480a      	ldr	r0, [pc, #40]	; (801a0a4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801a07c:	f00e f99c 	bl	80283b8 <__assert_func>
 801a080:	4b09      	ldr	r3, [pc, #36]	; (801a0a8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801a082:	4620      	mov	r0, r4
 801a084:	463a      	mov	r2, r7
 801a086:	4631      	mov	r1, r6
 801a088:	6023      	str	r3, [r4, #0]
 801a08a:	f7ff ffbc 	bl	801a006 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801a08e:	4620      	mov	r0, r4
 801a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a092:	bf00      	nop
 801a094:	0802baf8 	.word	0x0802baf8
 801a098:	2000beec 	.word	0x2000beec
 801a09c:	0802bb10 	.word	0x0802bb10
 801a0a0:	0802bbd4 	.word	0x0802bbd4
 801a0a4:	0802bb6e 	.word	0x0802bb6e
 801a0a8:	0802bbbc 	.word	0x0802bbbc

0801a0ac <_ZN8touchgfx15AbstractPainterC1Ev>:
 801a0ac:	4a03      	ldr	r2, [pc, #12]	; (801a0bc <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801a0ae:	6002      	str	r2, [r0, #0]
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	6042      	str	r2, [r0, #4]
 801a0b4:	22ff      	movs	r2, #255	; 0xff
 801a0b6:	7202      	strb	r2, [r0, #8]
 801a0b8:	4770      	bx	lr
 801a0ba:	bf00      	nop
 801a0bc:	0802bc18 	.word	0x0802bc18

0801a0c0 <_ZN8touchgfx15AbstractPainterD1Ev>:
 801a0c0:	4770      	bx	lr

0801a0c2 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801a0c2:	8081      	strh	r1, [r0, #4]
 801a0c4:	80c2      	strh	r2, [r0, #6]
 801a0c6:	4770      	bx	lr

0801a0c8 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801a0c8:	7201      	strb	r1, [r0, #8]
 801a0ca:	4770      	bx	lr

0801a0cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801a0cc:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801a0d0:	4770      	bx	lr

0801a0d2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801a0d2:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801a0d6:	4770      	bx	lr

0801a0d8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801a0d8:	6281      	str	r1, [r0, #40]	; 0x28
 801a0da:	4770      	bx	lr

0801a0dc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a0dc:	b513      	push	{r0, r1, r4, lr}
 801a0de:	6803      	ldr	r3, [r0, #0]
 801a0e0:	4604      	mov	r4, r0
 801a0e2:	4601      	mov	r1, r0
 801a0e4:	4668      	mov	r0, sp
 801a0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0e8:	4798      	blx	r3
 801a0ea:	6823      	ldr	r3, [r4, #0]
 801a0ec:	4669      	mov	r1, sp
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	691b      	ldr	r3, [r3, #16]
 801a0f2:	4798      	blx	r3
 801a0f4:	b002      	add	sp, #8
 801a0f6:	bd10      	pop	{r4, pc}

0801a0f8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801a0f8:	b510      	push	{r4, lr}
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a100:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801a104:	8002      	strh	r2, [r0, #0]
 801a106:	8042      	strh	r2, [r0, #2]
 801a108:	8084      	strh	r4, [r0, #4]
 801a10a:	80c1      	strh	r1, [r0, #6]
 801a10c:	bd10      	pop	{r4, pc}

0801a10e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801a10e:	2200      	movs	r2, #0
 801a110:	8002      	strh	r2, [r0, #0]
 801a112:	8042      	strh	r2, [r0, #2]
 801a114:	8082      	strh	r2, [r0, #4]
 801a116:	80c2      	strh	r2, [r0, #6]
 801a118:	4770      	bx	lr
	...

0801a11c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801a11c:	b508      	push	{r3, lr}
 801a11e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a120:	b928      	cbnz	r0, 801a12e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801a122:	4b03      	ldr	r3, [pc, #12]	; (801a130 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801a124:	2127      	movs	r1, #39	; 0x27
 801a126:	4a03      	ldr	r2, [pc, #12]	; (801a134 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801a128:	4803      	ldr	r0, [pc, #12]	; (801a138 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801a12a:	f00e f945 	bl	80283b8 <__assert_func>
 801a12e:	bd08      	pop	{r3, pc}
 801a130:	0802bc24 	.word	0x0802bc24
 801a134:	0802bd08 	.word	0x0802bd08
 801a138:	0802bc4b 	.word	0x0802bc4b

0801a13c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a140:	b089      	sub	sp, #36	; 0x24
 801a142:	4604      	mov	r4, r0
 801a144:	6808      	ldr	r0, [r1, #0]
 801a146:	f04f 0a00 	mov.w	sl, #0
 801a14a:	6849      	ldr	r1, [r1, #4]
 801a14c:	ab02      	add	r3, sp, #8
 801a14e:	f04f 0b01 	mov.w	fp, #1
 801a152:	c303      	stmia	r3!, {r0, r1}
 801a154:	4b3f      	ldr	r3, [pc, #252]	; (801a254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801a156:	4621      	mov	r1, r4
 801a158:	a804      	add	r0, sp, #16
 801a15a:	781b      	ldrb	r3, [r3, #0]
 801a15c:	2b01      	cmp	r3, #1
 801a15e:	6823      	ldr	r3, [r4, #0]
 801a160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a162:	bf1f      	itttt	ne
 801a164:	f10d 0906 	addne.w	r9, sp, #6
 801a168:	ae03      	addne	r6, sp, #12
 801a16a:	f10d 050e 	addne.w	r5, sp, #14
 801a16e:	f10d 080a 	addne.w	r8, sp, #10
 801a172:	bf01      	itttt	eq
 801a174:	f10d 090e 	addeq.w	r9, sp, #14
 801a178:	f10d 0606 	addeq.w	r6, sp, #6
 801a17c:	ad03      	addeq	r5, sp, #12
 801a17e:	f10d 0808 	addeq.w	r8, sp, #8
 801a182:	4798      	blx	r3
 801a184:	f9b5 3000 	ldrsh.w	r3, [r5]
 801a188:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d056      	beq.n	801a23e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801a190:	4293      	cmp	r3, r2
 801a192:	bfa8      	it	ge
 801a194:	4613      	movge	r3, r2
 801a196:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a19a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801a19e:	2f00      	cmp	r7, #0
 801a1a0:	dd34      	ble.n	801a20c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801a1a2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801a1a6:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801a1aa:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a1ae:	4484      	add	ip, r0
 801a1b0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a1b4:	f9b6 e000 	ldrsh.w	lr, [r6]
 801a1b8:	fa0f fc8c 	sxth.w	ip, ip
 801a1bc:	f9b9 1000 	ldrsh.w	r1, [r9]
 801a1c0:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a1c4:	4562      	cmp	r2, ip
 801a1c6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a1ca:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a1ce:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a1d2:	da29      	bge.n	801a228 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a1d4:	4472      	add	r2, lr
 801a1d6:	b212      	sxth	r2, r2
 801a1d8:	4290      	cmp	r0, r2
 801a1da:	da25      	bge.n	801a228 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a1dc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a1e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a1e4:	4402      	add	r2, r0
 801a1e6:	b212      	sxth	r2, r2
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	da1d      	bge.n	801a228 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a1ec:	440b      	add	r3, r1
 801a1ee:	b21b      	sxth	r3, r3
 801a1f0:	4298      	cmp	r0, r3
 801a1f2:	da19      	bge.n	801a228 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a1f4:	6823      	ldr	r3, [r4, #0]
 801a1f6:	a906      	add	r1, sp, #24
 801a1f8:	4620      	mov	r0, r4
 801a1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1fc:	4798      	blx	r3
 801a1fe:	b998      	cbnz	r0, 801a228 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a200:	107f      	asrs	r7, r7, #1
 801a202:	f04f 0a01 	mov.w	sl, #1
 801a206:	f8ad 7006 	strh.w	r7, [sp, #6]
 801a20a:	e7c6      	b.n	801a19a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a20c:	d10c      	bne.n	801a228 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a20e:	f8ad b006 	strh.w	fp, [sp, #6]
 801a212:	f8b8 2000 	ldrh.w	r2, [r8]
 801a216:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801a21a:	440a      	add	r2, r1
 801a21c:	f8a8 2000 	strh.w	r2, [r8]
 801a220:	882b      	ldrh	r3, [r5, #0]
 801a222:	1a5b      	subs	r3, r3, r1
 801a224:	802b      	strh	r3, [r5, #0]
 801a226:	e7ad      	b.n	801a184 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a228:	f1ba 0f00 	cmp.w	sl, #0
 801a22c:	d0f1      	beq.n	801a212 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801a22e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a232:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a236:	429a      	cmp	r2, r3
 801a238:	bf08      	it	eq
 801a23a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801a23c:	e7e9      	b.n	801a212 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801a23e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a242:	429a      	cmp	r2, r3
 801a244:	bf04      	itt	eq
 801a246:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801a24a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801a24c:	b009      	add	sp, #36	; 0x24
 801a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a252:	bf00      	nop
 801a254:	2000bee2 	.word	0x2000bee2

0801a258 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a258:	2200      	movs	r2, #0
 801a25a:	2101      	movs	r1, #1
 801a25c:	8082      	strh	r2, [r0, #4]
 801a25e:	80c2      	strh	r2, [r0, #6]
 801a260:	8102      	strh	r2, [r0, #8]
 801a262:	8142      	strh	r2, [r0, #10]
 801a264:	8182      	strh	r2, [r0, #12]
 801a266:	81c2      	strh	r2, [r0, #14]
 801a268:	8202      	strh	r2, [r0, #16]
 801a26a:	8242      	strh	r2, [r0, #18]
 801a26c:	61c2      	str	r2, [r0, #28]
 801a26e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a272:	6282      	str	r2, [r0, #40]	; 0x28
 801a274:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a278:	4905      	ldr	r1, [pc, #20]	; (801a290 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801a27a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a27e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a282:	6001      	str	r1, [r0, #0]
 801a284:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a286:	22ff      	movs	r2, #255	; 0xff
 801a288:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801a28c:	4770      	bx	lr
 801a28e:	bf00      	nop
 801a290:	0802bc90 	.word	0x0802bc90

0801a294 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801a294:	4770      	bx	lr

0801a296 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801a296:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801a29a:	4602      	mov	r2, r0
 801a29c:	cb03      	ldmia	r3!, {r0, r1}
 801a29e:	6010      	str	r0, [r2, #0]
 801a2a0:	4610      	mov	r0, r2
 801a2a2:	6051      	str	r1, [r2, #4]
 801a2a4:	4770      	bx	lr

0801a2a6 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2aa:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801a2ae:	b395      	cbz	r5, 801a316 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801a2b0:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 801a2b4:	f1bc 0f00 	cmp.w	ip, #0
 801a2b8:	d02d      	beq.n	801a316 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801a2ba:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a2be:	f9b1 e000 	ldrsh.w	lr, [r1]
 801a2c2:	b354      	cbz	r4, 801a31a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801a2c4:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801a2c8:	b33f      	cbz	r7, 801a31a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801a2ca:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a2ce:	4475      	add	r5, lr
 801a2d0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a2d4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a2d8:	45f0      	cmp	r8, lr
 801a2da:	4646      	mov	r6, r8
 801a2dc:	4444      	add	r4, r8
 801a2de:	bfa8      	it	ge
 801a2e0:	4676      	movge	r6, lr
 801a2e2:	4293      	cmp	r3, r2
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	443b      	add	r3, r7
 801a2e8:	bfa8      	it	ge
 801a2ea:	4611      	movge	r1, r2
 801a2ec:	4462      	add	r2, ip
 801a2ee:	b22d      	sxth	r5, r5
 801a2f0:	8006      	strh	r6, [r0, #0]
 801a2f2:	b224      	sxth	r4, r4
 801a2f4:	8041      	strh	r1, [r0, #2]
 801a2f6:	b212      	sxth	r2, r2
 801a2f8:	b21b      	sxth	r3, r3
 801a2fa:	42a5      	cmp	r5, r4
 801a2fc:	bfac      	ite	ge
 801a2fe:	ebc6 0405 	rsbge	r4, r6, r5
 801a302:	ebc6 0404 	rsblt	r4, r6, r4
 801a306:	429a      	cmp	r2, r3
 801a308:	bfac      	ite	ge
 801a30a:	ebc1 0302 	rsbge	r3, r1, r2
 801a30e:	ebc1 0303 	rsblt	r3, r1, r3
 801a312:	8084      	strh	r4, [r0, #4]
 801a314:	80c3      	strh	r3, [r0, #6]
 801a316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a31a:	f8a0 e000 	strh.w	lr, [r0]
 801a31e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a322:	8043      	strh	r3, [r0, #2]
 801a324:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a328:	8083      	strh	r3, [r0, #4]
 801a32a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a32e:	e7f1      	b.n	801a314 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

0801a330 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801a330:	b507      	push	{r0, r1, r2, lr}
 801a332:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a336:	ab01      	add	r3, sp, #4
 801a338:	6809      	ldr	r1, [r1, #0]
 801a33a:	6800      	ldr	r0, [r0, #0]
 801a33c:	f002 fd7d 	bl	801ce3a <_ZN8touchgfx6muldivElllRl>
 801a340:	b003      	add	sp, #12
 801a342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a348 <_ZN8touchgfx7CWRUtil4sineEi>:
 801a348:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a34c:	fb90 f3f2 	sdiv	r3, r0, r2
 801a350:	fb03 0312 	mls	r3, r3, r2, r0
 801a354:	4413      	add	r3, r2
 801a356:	fb93 f0f2 	sdiv	r0, r3, r2
 801a35a:	fb02 3010 	mls	r0, r2, r0, r3
 801a35e:	4b0a      	ldr	r3, [pc, #40]	; (801a388 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801a360:	285a      	cmp	r0, #90	; 0x5a
 801a362:	dc02      	bgt.n	801a36a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801a364:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a368:	4770      	bx	lr
 801a36a:	28b4      	cmp	r0, #180	; 0xb4
 801a36c:	dc02      	bgt.n	801a374 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801a36e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801a372:	e7f7      	b.n	801a364 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801a374:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801a378:	bfd4      	ite	le
 801a37a:	38b4      	suble	r0, #180	; 0xb4
 801a37c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801a380:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a384:	4240      	negs	r0, r0
 801a386:	4770      	bx	lr
 801a388:	0802bdb2 	.word	0x0802bdb2

0801a38c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801a38c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801a390:	f04f 0300 	mov.w	r3, #0
 801a394:	bf2c      	ite	cs
 801a396:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801a39a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801a39e:	1899      	adds	r1, r3, r2
 801a3a0:	4288      	cmp	r0, r1
 801a3a2:	bf24      	itt	cs
 801a3a4:	1853      	addcs	r3, r2, r1
 801a3a6:	1a40      	subcs	r0, r0, r1
 801a3a8:	0892      	lsrs	r2, r2, #2
 801a3aa:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a3ae:	d1f6      	bne.n	801a39e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	4770      	bx	lr

0801a3b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801a3b4:	2800      	cmp	r0, #0
 801a3b6:	b508      	push	{r3, lr}
 801a3b8:	da05      	bge.n	801a3c6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801a3ba:	4240      	negs	r0, r0
 801a3bc:	f7ff fffa 	bl	801a3b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a3c0:	4240      	negs	r0, r0
 801a3c2:	b240      	sxtb	r0, r0
 801a3c4:	bd08      	pop	{r3, pc}
 801a3c6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a3ca:	dc11      	bgt.n	801a3f0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801a3cc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801a3d0:	dd09      	ble.n	801a3e6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801a3d2:	4340      	muls	r0, r0
 801a3d4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801a3d8:	f7ff ffd8 	bl	801a38c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a3dc:	f7ff ffea 	bl	801a3b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a3e0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a3e4:	e7ed      	b.n	801a3c2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801a3e6:	3003      	adds	r0, #3
 801a3e8:	4b02      	ldr	r3, [pc, #8]	; (801a3f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801a3ea:	10c0      	asrs	r0, r0, #3
 801a3ec:	5618      	ldrsb	r0, [r3, r0]
 801a3ee:	e7e9      	b.n	801a3c4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a3f0:	2000      	movs	r0, #0
 801a3f2:	e7e7      	b.n	801a3c4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a3f4:	0802bd56 	.word	0x0802bd56

0801a3f8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801a3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3fa:	460c      	mov	r4, r1
 801a3fc:	1e01      	subs	r1, r0, #0
 801a3fe:	4615      	mov	r5, r2
 801a400:	db01      	blt.n	801a406 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801a402:	2c00      	cmp	r4, #0
 801a404:	da06      	bge.n	801a414 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801a406:	4b11      	ldr	r3, [pc, #68]	; (801a44c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801a408:	f240 3197 	movw	r1, #919	; 0x397
 801a40c:	4a10      	ldr	r2, [pc, #64]	; (801a450 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801a40e:	4811      	ldr	r0, [pc, #68]	; (801a454 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801a410:	f00d ffd2 	bl	80283b8 <__assert_func>
 801a414:	428c      	cmp	r4, r1
 801a416:	dd06      	ble.n	801a426 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801a418:	4620      	mov	r0, r4
 801a41a:	f7ff ffed 	bl	801a3f8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a41e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a422:	b003      	add	sp, #12
 801a424:	bd30      	pop	{r4, r5, pc}
 801a426:	4349      	muls	r1, r1
 801a428:	fb04 1004 	mla	r0, r4, r4, r1
 801a42c:	f7ff ffae 	bl	801a38c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a430:	6028      	str	r0, [r5, #0]
 801a432:	2800      	cmp	r0, #0
 801a434:	d0f5      	beq.n	801a422 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a436:	4602      	mov	r2, r0
 801a438:	ab01      	add	r3, sp, #4
 801a43a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a43e:	4620      	mov	r0, r4
 801a440:	f002 fcfb 	bl	801ce3a <_ZN8touchgfx6muldivElllRl>
 801a444:	f7ff ffb6 	bl	801a3b4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a448:	e7eb      	b.n	801a422 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a44a:	bf00      	nop
 801a44c:	0802be68 	.word	0x0802be68
 801a450:	0802bf30 	.word	0x0802bf30
 801a454:	0802be79 	.word	0x0802be79

0801a458 <_ZN8touchgfx4LineC1Ev>:
 801a458:	b510      	push	{r4, lr}
 801a45a:	4604      	mov	r4, r0
 801a45c:	f7ff fefc 	bl	801a258 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801a460:	4b0c      	ldr	r3, [pc, #48]	; (801a494 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801a462:	2220      	movs	r2, #32
 801a464:	4620      	mov	r0, r4
 801a466:	6023      	str	r3, [r4, #0]
 801a468:	2300      	movs	r3, #0
 801a46a:	6422      	str	r2, [r4, #64]	; 0x40
 801a46c:	2212      	movs	r2, #18
 801a46e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801a472:	6722      	str	r2, [r4, #112]	; 0x70
 801a474:	60a3      	str	r3, [r4, #8]
 801a476:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801a47a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801a47e:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a482:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801a486:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801a48a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801a48e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801a492:	bd10      	pop	{r4, pc}
 801a494:	0802beb8 	.word	0x0802beb8

0801a498 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a49c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801a49e:	b085      	sub	sp, #20
 801a4a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a4a2:	4604      	mov	r4, r0
 801a4a4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a4a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801a4a8:	1af6      	subs	r6, r6, r3
 801a4aa:	eba5 0502 	sub.w	r5, r5, r2
 801a4ae:	f040 809b 	bne.w	801a5e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801a4b2:	b955      	cbnz	r5, 801a4ca <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801a4b4:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801a4b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a4bc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a4c0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a4c4:	b005      	add	sp, #20
 801a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ca:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801a4ce:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801a4d2:	f04f 0802 	mov.w	r8, #2
 801a4d6:	463a      	mov	r2, r7
 801a4d8:	4629      	mov	r1, r5
 801a4da:	ab03      	add	r3, sp, #12
 801a4dc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a4de:	f002 fcac 	bl	801ce3a <_ZN8touchgfx6muldivElllRl>
 801a4e2:	ab03      	add	r3, sp, #12
 801a4e4:	463a      	mov	r2, r7
 801a4e6:	4631      	mov	r1, r6
 801a4e8:	fb90 f5f8 	sdiv	r5, r0, r8
 801a4ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a4ee:	f002 fca4 	bl	801ce3a <_ZN8touchgfx6muldivElllRl>
 801a4f2:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801a4f6:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801a4fa:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801a4fe:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801a500:	fb90 f0f8 	sdiv	r0, r0, r8
 801a504:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801a508:	eba8 0305 	sub.w	r3, r8, r5
 801a50c:	f1ba 0f00 	cmp.w	sl, #0
 801a510:	f040 80c3 	bne.w	801a69a <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801a514:	64a3      	str	r3, [r4, #72]	; 0x48
 801a516:	19c3      	adds	r3, r0, r7
 801a518:	65a3      	str	r3, [r4, #88]	; 0x58
 801a51a:	ebae 0305 	sub.w	r3, lr, r5
 801a51e:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a520:	eb00 030c 	add.w	r3, r0, ip
 801a524:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a526:	eb05 030e 	add.w	r3, r5, lr
 801a52a:	6523      	str	r3, [r4, #80]	; 0x50
 801a52c:	ebac 0300 	sub.w	r3, ip, r0
 801a530:	6623      	str	r3, [r4, #96]	; 0x60
 801a532:	eb05 0308 	add.w	r3, r5, r8
 801a536:	6563      	str	r3, [r4, #84]	; 0x54
 801a538:	1a3b      	subs	r3, r7, r0
 801a53a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801a53c:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801a540:	6663      	str	r3, [r4, #100]	; 0x64
 801a542:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801a546:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a548:	4632      	mov	r2, r6
 801a54a:	9301      	str	r3, [sp, #4]
 801a54c:	9100      	str	r1, [sp, #0]
 801a54e:	f859 bb04 	ldr.w	fp, [r9], #4
 801a552:	9b00      	ldr	r3, [sp, #0]
 801a554:	455e      	cmp	r6, fp
 801a556:	bfa8      	it	ge
 801a558:	465e      	movge	r6, fp
 801a55a:	455a      	cmp	r2, fp
 801a55c:	bfb8      	it	lt
 801a55e:	465a      	movlt	r2, fp
 801a560:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801a564:	4559      	cmp	r1, fp
 801a566:	bfa8      	it	ge
 801a568:	4659      	movge	r1, fp
 801a56a:	455b      	cmp	r3, fp
 801a56c:	bfb8      	it	lt
 801a56e:	465b      	movlt	r3, fp
 801a570:	9300      	str	r3, [sp, #0]
 801a572:	9b01      	ldr	r3, [sp, #4]
 801a574:	454b      	cmp	r3, r9
 801a576:	d1ea      	bne.n	801a54e <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801a578:	f04f 0b20 	mov.w	fp, #32
 801a57c:	b209      	sxth	r1, r1
 801a57e:	b212      	sxth	r2, r2
 801a580:	f1ba 0f01 	cmp.w	sl, #1
 801a584:	b236      	sxth	r6, r6
 801a586:	fb91 f9fb 	sdiv	r9, r1, fp
 801a58a:	f9bd 1000 	ldrsh.w	r1, [sp]
 801a58e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801a592:	fb92 f2fb 	sdiv	r2, r2, fp
 801a596:	fb91 f1fb 	sdiv	r1, r1, fp
 801a59a:	fb96 f6fb 	sdiv	r6, r6, fp
 801a59e:	f102 0201 	add.w	r2, r2, #1
 801a5a2:	f101 0101 	add.w	r1, r1, #1
 801a5a6:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801a5aa:	eba1 0109 	sub.w	r1, r1, r9
 801a5ae:	eba2 0606 	sub.w	r6, r2, r6
 801a5b2:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801a5b6:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801a5ba:	d183      	bne.n	801a4c4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a5bc:	eba8 0305 	sub.w	r3, r8, r5
 801a5c0:	64a3      	str	r3, [r4, #72]	; 0x48
 801a5c2:	19c3      	adds	r3, r0, r7
 801a5c4:	65a3      	str	r3, [r4, #88]	; 0x58
 801a5c6:	ebae 0305 	sub.w	r3, lr, r5
 801a5ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a5cc:	eb00 030c 	add.w	r3, r0, ip
 801a5d0:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a5d2:	eb05 030e 	add.w	r3, r5, lr
 801a5d6:	4445      	add	r5, r8
 801a5d8:	6523      	str	r3, [r4, #80]	; 0x50
 801a5da:	ebac 0300 	sub.w	r3, ip, r0
 801a5de:	1a38      	subs	r0, r7, r0
 801a5e0:	6565      	str	r5, [r4, #84]	; 0x54
 801a5e2:	6623      	str	r3, [r4, #96]	; 0x60
 801a5e4:	6660      	str	r0, [r4, #100]	; 0x64
 801a5e6:	e76d      	b.n	801a4c4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a5e8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801a5ec:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801a5f0:	2d00      	cmp	r5, #0
 801a5f2:	f43f af6e 	beq.w	801a4d2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a5f6:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801a5fa:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801a5fe:	fb93 f2f7 	sdiv	r2, r3, r7
 801a602:	fb07 3312 	mls	r3, r7, r2, r3
 801a606:	b34b      	cbz	r3, 801a65c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801a608:	fb97 f2f3 	sdiv	r2, r7, r3
 801a60c:	fb03 7712 	mls	r7, r3, r2, r7
 801a610:	2f00      	cmp	r7, #0
 801a612:	d1f4      	bne.n	801a5fe <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801a614:	2b01      	cmp	r3, #1
 801a616:	f24b 5204 	movw	r2, #46340	; 0xb504
 801a61a:	bf18      	it	ne
 801a61c:	fb96 f6f3 	sdivne	r6, r6, r3
 801a620:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801a624:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801a628:	bf18      	it	ne
 801a62a:	fb95 f5f3 	sdivne	r5, r5, r3
 801a62e:	4291      	cmp	r1, r2
 801a630:	dd16      	ble.n	801a660 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801a632:	2d00      	cmp	r5, #0
 801a634:	da4d      	bge.n	801a6d2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801a636:	4b29      	ldr	r3, [pc, #164]	; (801a6dc <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801a638:	429d      	cmp	r5, r3
 801a63a:	da27      	bge.n	801a68c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801a63c:	426a      	negs	r2, r5
 801a63e:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a642:	fb91 f1f3 	sdiv	r1, r1, r3
 801a646:	fb92 f3f3 	sdiv	r3, r2, r3
 801a64a:	4299      	cmp	r1, r3
 801a64c:	bfcc      	ite	gt
 801a64e:	1c4b      	addgt	r3, r1, #1
 801a650:	3301      	addle	r3, #1
 801a652:	fb96 f6f3 	sdiv	r6, r6, r3
 801a656:	fb95 f5f3 	sdiv	r5, r5, r3
 801a65a:	e00f      	b.n	801a67c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801a65c:	463b      	mov	r3, r7
 801a65e:	e7d9      	b.n	801a614 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801a660:	2d00      	cmp	r5, #0
 801a662:	fb92 f2f1 	sdiv	r2, r2, r1
 801a666:	da13      	bge.n	801a690 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801a668:	4269      	negs	r1, r5
 801a66a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a66e:	fb93 f3f1 	sdiv	r3, r3, r1
 801a672:	429a      	cmp	r2, r3
 801a674:	bfa8      	it	ge
 801a676:	461a      	movge	r2, r3
 801a678:	4356      	muls	r6, r2
 801a67a:	4355      	muls	r5, r2
 801a67c:	fb05 f005 	mul.w	r0, r5, r5
 801a680:	fb06 0006 	mla	r0, r6, r6, r0
 801a684:	f7ff fe82 	bl	801a38c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a688:	4607      	mov	r7, r0
 801a68a:	e722      	b.n	801a4d2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a68c:	2200      	movs	r2, #0
 801a68e:	e7eb      	b.n	801a668 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801a690:	4629      	mov	r1, r5
 801a692:	e7ea      	b.n	801a66a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a694:	4629      	mov	r1, r5
 801a696:	2200      	movs	r2, #0
 801a698:	e7e7      	b.n	801a66a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a69a:	1a1b      	subs	r3, r3, r0
 801a69c:	64a3      	str	r3, [r4, #72]	; 0x48
 801a69e:	19c3      	adds	r3, r0, r7
 801a6a0:	1b5b      	subs	r3, r3, r5
 801a6a2:	65a3      	str	r3, [r4, #88]	; 0x58
 801a6a4:	ebae 0305 	sub.w	r3, lr, r5
 801a6a8:	4403      	add	r3, r0
 801a6aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a6ac:	eb00 030c 	add.w	r3, r0, ip
 801a6b0:	442b      	add	r3, r5
 801a6b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a6b4:	eb05 030e 	add.w	r3, r5, lr
 801a6b8:	4403      	add	r3, r0
 801a6ba:	6523      	str	r3, [r4, #80]	; 0x50
 801a6bc:	ebac 0300 	sub.w	r3, ip, r0
 801a6c0:	442b      	add	r3, r5
 801a6c2:	6623      	str	r3, [r4, #96]	; 0x60
 801a6c4:	eb05 0308 	add.w	r3, r5, r8
 801a6c8:	1a1b      	subs	r3, r3, r0
 801a6ca:	6563      	str	r3, [r4, #84]	; 0x54
 801a6cc:	1a3b      	subs	r3, r7, r0
 801a6ce:	1b5b      	subs	r3, r3, r5
 801a6d0:	e733      	b.n	801a53a <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801a6d2:	4295      	cmp	r5, r2
 801a6d4:	ddde      	ble.n	801a694 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801a6d6:	462a      	mov	r2, r5
 801a6d8:	e7b1      	b.n	801a63e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801a6da:	bf00      	nop
 801a6dc:	ffff4afc 	.word	0xffff4afc

0801a6e0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801a6e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a6e2:	428b      	cmp	r3, r1
 801a6e4:	d102      	bne.n	801a6ec <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801a6e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801a6e8:	4293      	cmp	r3, r2
 801a6ea:	d003      	beq.n	801a6f4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801a6ec:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801a6f0:	f7ff bed2 	b.w	801a498 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a6f4:	4770      	bx	lr

0801a6f6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801a6f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a6f8:	428b      	cmp	r3, r1
 801a6fa:	d102      	bne.n	801a702 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801a6fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801a6fe:	4293      	cmp	r3, r2
 801a700:	d003      	beq.n	801a70a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801a702:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801a706:	f7ff bec7 	b.w	801a498 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a70a:	4770      	bx	lr

0801a70c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801a70c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801a710:	f7ff bec2 	b.w	801a498 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801a714 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801a714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a718:	b0b3      	sub	sp, #204	; 0xcc
 801a71a:	4604      	mov	r4, r0
 801a71c:	460a      	mov	r2, r1
 801a71e:	4601      	mov	r1, r0
 801a720:	a804      	add	r0, sp, #16
 801a722:	ad32      	add	r5, sp, #200	; 0xc8
 801a724:	f00c fa7c 	bl	8026c20 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801a728:	2300      	movs	r3, #0
 801a72a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a72c:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801a730:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a732:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a734:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a736:	1ac0      	subs	r0, r0, r3
 801a738:	eba1 0102 	sub.w	r1, r1, r2
 801a73c:	d43c      	bmi.n	801a7b8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801a73e:	2900      	cmp	r1, #0
 801a740:	462a      	mov	r2, r5
 801a742:	db33      	blt.n	801a7ac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801a744:	f7ff fe58 	bl	801a3f8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a748:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801a74c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801a74e:	a804      	add	r0, sp, #16
 801a750:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a752:	f00c fc2e 	bl	8026fb2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801a756:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801a758:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801a75a:	a804      	add	r0, sp, #16
 801a75c:	f00c fbb8 	bl	8026ed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a760:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a764:	2b01      	cmp	r3, #1
 801a766:	d137      	bne.n	801a7d8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a768:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a76a:	2eb3      	cmp	r6, #179	; 0xb3
 801a76c:	dc34      	bgt.n	801a7d8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a76e:	eba7 0906 	sub.w	r9, r7, r6
 801a772:	4648      	mov	r0, r9
 801a774:	f7ff fde8 	bl	801a348 <_ZN8touchgfx7CWRUtil4sineEi>
 801a778:	a902      	add	r1, sp, #8
 801a77a:	9002      	str	r0, [sp, #8]
 801a77c:	4628      	mov	r0, r5
 801a77e:	f7ff fdd7 	bl	801a330 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a782:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a784:	eb00 0801 	add.w	r8, r0, r1
 801a788:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a78c:	f7ff fddc 	bl	801a348 <_ZN8touchgfx7CWRUtil4sineEi>
 801a790:	a903      	add	r1, sp, #12
 801a792:	9003      	str	r0, [sp, #12]
 801a794:	4628      	mov	r0, r5
 801a796:	f7ff fdcb 	bl	801a330 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a79a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a79c:	4641      	mov	r1, r8
 801a79e:	1a12      	subs	r2, r2, r0
 801a7a0:	a804      	add	r0, sp, #16
 801a7a2:	f00c fb95 	bl	8026ed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a7a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a7a8:	441e      	add	r6, r3
 801a7aa:	e7de      	b.n	801a76a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801a7ac:	4249      	negs	r1, r1
 801a7ae:	f7ff fe23 	bl	801a3f8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a7b2:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801a7b6:	e7c9      	b.n	801a74c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a7b8:	2900      	cmp	r1, #0
 801a7ba:	f1c0 0000 	rsb	r0, r0, #0
 801a7be:	462a      	mov	r2, r5
 801a7c0:	db04      	blt.n	801a7cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801a7c2:	f7ff fe19 	bl	801a3f8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a7c6:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801a7ca:	e7bf      	b.n	801a74c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a7cc:	4249      	negs	r1, r1
 801a7ce:	f7ff fe13 	bl	801a3f8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a7d2:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801a7d6:	e7b9      	b.n	801a74c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a7d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801a7da:	a804      	add	r0, sp, #16
 801a7dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a7de:	f00c fb77 	bl	8026ed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a7e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a7e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a7e6:	a804      	add	r0, sp, #16
 801a7e8:	f00c fb72 	bl	8026ed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a7ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a7f0:	2b01      	cmp	r3, #1
 801a7f2:	d123      	bne.n	801a83c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a7f4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a7f6:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801a7fa:	2e00      	cmp	r6, #0
 801a7fc:	dd1e      	ble.n	801a83c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a7fe:	eb06 0907 	add.w	r9, r6, r7
 801a802:	4648      	mov	r0, r9
 801a804:	f7ff fda0 	bl	801a348 <_ZN8touchgfx7CWRUtil4sineEi>
 801a808:	a902      	add	r1, sp, #8
 801a80a:	9002      	str	r0, [sp, #8]
 801a80c:	4628      	mov	r0, r5
 801a80e:	f7ff fd8f 	bl	801a330 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a812:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a814:	eb00 0801 	add.w	r8, r0, r1
 801a818:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a81c:	f7ff fd94 	bl	801a348 <_ZN8touchgfx7CWRUtil4sineEi>
 801a820:	a903      	add	r1, sp, #12
 801a822:	9003      	str	r0, [sp, #12]
 801a824:	4628      	mov	r0, r5
 801a826:	f7ff fd83 	bl	801a330 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a82a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a82c:	4641      	mov	r1, r8
 801a82e:	1a12      	subs	r2, r2, r0
 801a830:	a804      	add	r0, sp, #16
 801a832:	f00c fb4d 	bl	8026ed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a836:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a838:	1af6      	subs	r6, r6, r3
 801a83a:	e7de      	b.n	801a7fa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801a83c:	a804      	add	r0, sp, #16
 801a83e:	f00c fcbc 	bl	80271ba <_ZN8touchgfx6Canvas6renderEv>
 801a842:	4604      	mov	r4, r0
 801a844:	a804      	add	r0, sp, #16
 801a846:	f00c fcf9 	bl	802723c <_ZN8touchgfx6CanvasD1Ev>
 801a84a:	4620      	mov	r0, r4
 801a84c:	b033      	add	sp, #204	; 0xcc
 801a84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a852 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801a852:	4770      	bx	lr

0801a854 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801a854:	6803      	ldr	r3, [r0, #0]
 801a856:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801a85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a85c:	4718      	bx	r3

0801a85e <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801a85e:	b510      	push	{r4, lr}
 801a860:	4604      	mov	r4, r0
 801a862:	212c      	movs	r1, #44	; 0x2c
 801a864:	f00d fd7d 	bl	8028362 <_ZdlPvj>
 801a868:	4620      	mov	r0, r4
 801a86a:	bd10      	pop	{r4, pc}

0801a86c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801a86c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a870:	2bff      	cmp	r3, #255	; 0xff
 801a872:	b510      	push	{r4, lr}
 801a874:	d104      	bne.n	801a880 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801a876:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801a878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a87c:	429a      	cmp	r2, r3
 801a87e:	d105      	bne.n	801a88c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801a880:	2300      	movs	r3, #0
 801a882:	8003      	strh	r3, [r0, #0]
 801a884:	8043      	strh	r3, [r0, #2]
 801a886:	8083      	strh	r3, [r0, #4]
 801a888:	80c3      	strh	r3, [r0, #6]
 801a88a:	bd10      	pop	{r4, pc}
 801a88c:	2300      	movs	r3, #0
 801a88e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a892:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801a896:	8003      	strh	r3, [r0, #0]
 801a898:	8043      	strh	r3, [r0, #2]
 801a89a:	8084      	strh	r4, [r0, #4]
 801a89c:	80c2      	strh	r2, [r0, #6]
 801a89e:	e7f4      	b.n	801a88a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801a8a0 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801a8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8a4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801a8a8:	b087      	sub	sp, #28
 801a8aa:	4604      	mov	r4, r0
 801a8ac:	4689      	mov	r9, r1
 801a8ae:	b363      	cbz	r3, 801a90a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a8b0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a8b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a8b6:	429a      	cmp	r2, r3
 801a8b8:	d027      	beq.n	801a90a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a8ba:	ad06      	add	r5, sp, #24
 801a8bc:	2700      	movs	r7, #0
 801a8be:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	f004 f826 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a8c8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a8cc:	a904      	add	r1, sp, #16
 801a8ce:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a8d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a8d6:	4620      	mov	r0, r4
 801a8d8:	6823      	ldr	r3, [r4, #0]
 801a8da:	9704      	str	r7, [sp, #16]
 801a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8de:	4798      	blx	r3
 801a8e0:	f7f6 f926 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801a8e4:	6803      	ldr	r3, [r0, #0]
 801a8e6:	4606      	mov	r6, r0
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801a8ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a8f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a8f4:	f004 f916 	bl	801eb24 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a8f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a8fc:	4601      	mov	r1, r0
 801a8fe:	9701      	str	r7, [sp, #4]
 801a900:	aa04      	add	r2, sp, #16
 801a902:	9300      	str	r3, [sp, #0]
 801a904:	4630      	mov	r0, r6
 801a906:	464b      	mov	r3, r9
 801a908:	47c0      	blx	r8
 801a90a:	b007      	add	sp, #28
 801a90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a910 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801a910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a912:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a916:	460d      	mov	r5, r1
 801a918:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a91c:	2100      	movs	r1, #0
 801a91e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a922:	4604      	mov	r4, r0
 801a924:	6803      	ldr	r3, [r0, #0]
 801a926:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a92a:	6a1b      	ldr	r3, [r3, #32]
 801a92c:	9100      	str	r1, [sp, #0]
 801a92e:	4669      	mov	r1, sp
 801a930:	4798      	blx	r3
 801a932:	4621      	mov	r1, r4
 801a934:	a802      	add	r0, sp, #8
 801a936:	f002 f9e6 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a93a:	f7f6 f8f9 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801a93e:	6803      	ldr	r3, [r0, #0]
 801a940:	aa02      	add	r2, sp, #8
 801a942:	4669      	mov	r1, sp
 801a944:	699e      	ldr	r6, [r3, #24]
 801a946:	462b      	mov	r3, r5
 801a948:	47b0      	blx	r6
 801a94a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a94e:	2800      	cmp	r0, #0
 801a950:	bf08      	it	eq
 801a952:	461d      	moveq	r5, r3
 801a954:	84e5      	strh	r5, [r4, #38]	; 0x26
 801a956:	b004      	add	sp, #16
 801a958:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a95c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801a95c:	2200      	movs	r2, #0
 801a95e:	8082      	strh	r2, [r0, #4]
 801a960:	80c2      	strh	r2, [r0, #6]
 801a962:	8102      	strh	r2, [r0, #8]
 801a964:	8142      	strh	r2, [r0, #10]
 801a966:	8182      	strh	r2, [r0, #12]
 801a968:	81c2      	strh	r2, [r0, #14]
 801a96a:	8202      	strh	r2, [r0, #16]
 801a96c:	8242      	strh	r2, [r0, #18]
 801a96e:	61c2      	str	r2, [r0, #28]
 801a970:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a974:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a978:	2201      	movs	r2, #1
 801a97a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801a97e:	4a04      	ldr	r2, [pc, #16]	; (801a990 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801a980:	6002      	str	r2, [r0, #0]
 801a982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a986:	84c2      	strh	r2, [r0, #38]	; 0x26
 801a988:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a98c:	4770      	bx	lr
 801a98e:	bf00      	nop
 801a990:	0802bfa4 	.word	0x0802bfa4

0801a994 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801a994:	b570      	push	{r4, r5, r6, lr}
 801a996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a99a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a99c:	4604      	mov	r4, r0
 801a99e:	429a      	cmp	r2, r3
 801a9a0:	d00c      	beq.n	801a9bc <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801a9a2:	f850 3b26 	ldr.w	r3, [r0], #38
 801a9a6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801a9a8:	f7f7 fd6e 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	4601      	mov	r1, r0
 801a9b0:	46ac      	mov	ip, r5
 801a9b2:	4620      	mov	r0, r4
 801a9b4:	461a      	mov	r2, r3
 801a9b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9ba:	4760      	bx	ip
 801a9bc:	2000      	movs	r0, #0
 801a9be:	bd70      	pop	{r4, r5, r6, pc}

0801a9c0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801a9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a9c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9c6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a9c8:	429a      	cmp	r2, r3
 801a9ca:	d016      	beq.n	801a9fa <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801a9cc:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801a9d0:	4620      	mov	r0, r4
 801a9d2:	f7f5 fc85 	bl	80102e0 <_ZNK8touchgfx9TypedText7getFontEv>
 801a9d6:	6803      	ldr	r3, [r0, #0]
 801a9d8:	4605      	mov	r5, r0
 801a9da:	4620      	mov	r0, r4
 801a9dc:	69de      	ldr	r6, [r3, #28]
 801a9de:	f7f5 fc9b 	bl	8010318 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801a9e2:	4607      	mov	r7, r0
 801a9e4:	4620      	mov	r0, r4
 801a9e6:	f7f7 fd4f 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	4602      	mov	r2, r0
 801a9ee:	4639      	mov	r1, r7
 801a9f0:	9300      	str	r3, [sp, #0]
 801a9f2:	4628      	mov	r0, r5
 801a9f4:	47b0      	blx	r6
 801a9f6:	b003      	add	sp, #12
 801a9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	e7fb      	b.n	801a9f6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801a9fe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801a9fe:	b40e      	push	{r1, r2, r3}
 801aa00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa08:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801aa0a:	b09b      	sub	sp, #108	; 0x6c
 801aa0c:	4604      	mov	r4, r0
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d03f      	beq.n	801aa92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801aa12:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801aa16:	ab22      	add	r3, sp, #136	; 0x88
 801aa18:	4638      	mov	r0, r7
 801aa1a:	9303      	str	r3, [sp, #12]
 801aa1c:	f7f5 fc60 	bl	80102e0 <_ZNK8touchgfx9TypedText7getFontEv>
 801aa20:	6803      	ldr	r3, [r0, #0]
 801aa22:	4680      	mov	r8, r0
 801aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa26:	4798      	blx	r3
 801aa28:	4606      	mov	r6, r0
 801aa2a:	b205      	sxth	r5, r0
 801aa2c:	a804      	add	r0, sp, #16
 801aa2e:	f003 f845 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801aa32:	f8d8 3000 	ldr.w	r3, [r8]
 801aa36:	4640      	mov	r0, r8
 801aa38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa3a:	4798      	blx	r3
 801aa3c:	9a03      	ldr	r2, [sp, #12]
 801aa3e:	4603      	mov	r3, r0
 801aa40:	9921      	ldr	r1, [sp, #132]	; 0x84
 801aa42:	a804      	add	r0, sp, #16
 801aa44:	f003 f857 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801aa48:	4638      	mov	r0, r7
 801aa4a:	f7f5 fc65 	bl	8010318 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801aa4e:	4680      	mov	r8, r0
 801aa50:	4638      	mov	r0, r7
 801aa52:	f7f5 fc45 	bl	80102e0 <_ZNK8touchgfx9TypedText7getFontEv>
 801aa56:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801aa5a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801aa5e:	4642      	mov	r2, r8
 801aa60:	9300      	str	r3, [sp, #0]
 801aa62:	4603      	mov	r3, r0
 801aa64:	a804      	add	r0, sp, #16
 801aa66:	f001 f8a2 	bl	801bbae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801aa6a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801aa6e:	b203      	sxth	r3, r0
 801aa70:	18a9      	adds	r1, r5, r2
 801aa72:	2900      	cmp	r1, #0
 801aa74:	dd0b      	ble.n	801aa8e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801aa76:	3b01      	subs	r3, #1
 801aa78:	fb13 f302 	smulbb	r3, r3, r2
 801aa7c:	fb16 3300 	smlabb	r3, r6, r0, r3
 801aa80:	b21d      	sxth	r5, r3
 801aa82:	4628      	mov	r0, r5
 801aa84:	b01b      	add	sp, #108	; 0x6c
 801aa86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa8a:	b003      	add	sp, #12
 801aa8c:	4770      	bx	lr
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	dcf7      	bgt.n	801aa82 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801aa92:	2500      	movs	r5, #0
 801aa94:	e7f5      	b.n	801aa82 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801aa98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaa0:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801aaa2:	b08d      	sub	sp, #52	; 0x34
 801aaa4:	4604      	mov	r4, r0
 801aaa6:	429e      	cmp	r6, r3
 801aaa8:	4688      	mov	r8, r1
 801aaaa:	d04b      	beq.n	801ab44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801aaac:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801aab0:	4628      	mov	r0, r5
 801aab2:	f7f5 fc15 	bl	80102e0 <_ZNK8touchgfx9TypedText7getFontEv>
 801aab6:	4607      	mov	r7, r0
 801aab8:	2800      	cmp	r0, #0
 801aaba:	d043      	beq.n	801ab44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801aabc:	4628      	mov	r0, r5
 801aabe:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801aac2:	f7f5 fc41 	bl	8010348 <_ZNK8touchgfx9TypedText11assertValidEv>
 801aac6:	4b21      	ldr	r3, [pc, #132]	; (801ab4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801aac8:	4628      	mov	r0, r5
 801aaca:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801aad4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801aad8:	785e      	ldrb	r6, [r3, #1]
 801aada:	f7f5 fc1d 	bl	8010318 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801aade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801aae0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801aae4:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801aae8:	9309      	str	r3, [sp, #36]	; 0x24
 801aaea:	4b19      	ldr	r3, [pc, #100]	; (801ab50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801aaec:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801aaf6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801aafa:	9707      	str	r7, [sp, #28]
 801aafc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801ab00:	f88d 6020 	strb.w	r6, [sp, #32]
 801ab04:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801ab08:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801ab0c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ab10:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801ab14:	b10a      	cbz	r2, 801ab1a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801ab16:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801ab18:	b906      	cbnz	r6, 801ab1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801ab1a:	689e      	ldr	r6, [r3, #8]
 801ab1c:	af05      	add	r7, sp, #20
 801ab1e:	4621      	mov	r1, r4
 801ab20:	4638      	mov	r0, r7
 801ab22:	f002 f8f0 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ab26:	4628      	mov	r0, r5
 801ab28:	f7f7 fcae 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	9001      	str	r0, [sp, #4]
 801ab30:	4630      	mov	r0, r6
 801ab32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ab36:	ab07      	add	r3, sp, #28
 801ab38:	9300      	str	r3, [sp, #0]
 801ab3a:	4643      	mov	r3, r8
 801ab3c:	e897 0006 	ldmia.w	r7, {r1, r2}
 801ab40:	f000 fe02 	bl	801b748 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ab44:	b00d      	add	sp, #52	; 0x34
 801ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab4a:	bf00      	nop
 801ab4c:	2000bf7c 	.word	0x2000bf7c
 801ab50:	2000beec 	.word	0x2000beec

0801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801ab54:	b570      	push	{r4, r5, r6, lr}
 801ab56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab5a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ab5c:	4604      	mov	r4, r0
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d021      	beq.n	801aba6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801ab62:	6803      	ldr	r3, [r0, #0]
 801ab64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab66:	4798      	blx	r3
 801ab68:	6823      	ldr	r3, [r4, #0]
 801ab6a:	4605      	mov	r5, r0
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ab70:	4798      	blx	r3
 801ab72:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801ab76:	4606      	mov	r6, r0
 801ab78:	b22d      	sxth	r5, r5
 801ab7a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801ab7e:	6823      	ldr	r3, [r4, #0]
 801ab80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab82:	d109      	bne.n	801ab98 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801ab84:	4629      	mov	r1, r5
 801ab86:	4620      	mov	r0, r4
 801ab88:	4798      	blx	r3
 801ab8a:	6823      	ldr	r3, [r4, #0]
 801ab8c:	4631      	mov	r1, r6
 801ab8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab90:	4620      	mov	r0, r4
 801ab92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab96:	4718      	bx	r3
 801ab98:	4601      	mov	r1, r0
 801ab9a:	4620      	mov	r0, r4
 801ab9c:	4798      	blx	r3
 801ab9e:	6823      	ldr	r3, [r4, #0]
 801aba0:	4629      	mov	r1, r5
 801aba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aba4:	e7f4      	b.n	801ab90 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801aba6:	bd70      	pop	{r4, r5, r6, pc}

0801aba8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801aba8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801abac:	84c1      	strh	r1, [r0, #38]	; 0x26
 801abae:	b922      	cbnz	r2, 801abba <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801abb0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801abb4:	b90b      	cbnz	r3, 801abba <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801abb6:	f7ff bfcd 	b.w	801ab54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801abba:	4770      	bx	lr

0801abbc <_ZNK8touchgfx3Box12getSolidRectEv>:
 801abbc:	2300      	movs	r3, #0
 801abbe:	8003      	strh	r3, [r0, #0]
 801abc0:	8043      	strh	r3, [r0, #2]
 801abc2:	8083      	strh	r3, [r0, #4]
 801abc4:	80c3      	strh	r3, [r0, #6]
 801abc6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801abca:	b91b      	cbnz	r3, 801abd4 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801abcc:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801abd0:	2bff      	cmp	r3, #255	; 0xff
 801abd2:	d103      	bne.n	801abdc <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801abd4:	890b      	ldrh	r3, [r1, #8]
 801abd6:	8083      	strh	r3, [r0, #4]
 801abd8:	894b      	ldrh	r3, [r1, #10]
 801abda:	80c3      	strh	r3, [r0, #6]
 801abdc:	4770      	bx	lr
	...

0801abe0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801abe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801abe2:	4604      	mov	r4, r0
 801abe4:	466b      	mov	r3, sp
 801abe6:	6808      	ldr	r0, [r1, #0]
 801abe8:	6849      	ldr	r1, [r1, #4]
 801abea:	c303      	stmia	r3!, {r0, r1}
 801abec:	6823      	ldr	r3, [r4, #0]
 801abee:	4669      	mov	r1, sp
 801abf0:	4620      	mov	r0, r4
 801abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abf4:	4798      	blx	r3
 801abf6:	4b08      	ldr	r3, [pc, #32]	; (801ac18 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801abfe:	b10a      	cbz	r2, 801ac04 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801ac00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ac02:	b900      	cbnz	r0, 801ac06 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801ac04:	6898      	ldr	r0, [r3, #8]
 801ac06:	6803      	ldr	r3, [r0, #0]
 801ac08:	4669      	mov	r1, sp
 801ac0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801ac0c:	69dd      	ldr	r5, [r3, #28]
 801ac0e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801ac12:	47a8      	blx	r5
 801ac14:	b003      	add	sp, #12
 801ac16:	bd30      	pop	{r4, r5, pc}
 801ac18:	2000beec 	.word	0x2000beec

0801ac1c <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801ac1c:	b570      	push	{r4, r5, r6, lr}
 801ac1e:	6803      	ldr	r3, [r0, #0]
 801ac20:	4604      	mov	r4, r0
 801ac22:	4615      	mov	r5, r2
 801ac24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ac26:	4798      	blx	r3
 801ac28:	6823      	ldr	r3, [r4, #0]
 801ac2a:	4629      	mov	r1, r5
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac34:	4718      	bx	r3

0801ac36 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801ac36:	b570      	push	{r4, r5, r6, lr}
 801ac38:	6803      	ldr	r3, [r0, #0]
 801ac3a:	4604      	mov	r4, r0
 801ac3c:	460e      	mov	r6, r1
 801ac3e:	4615      	mov	r5, r2
 801ac40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ac42:	4798      	blx	r3
 801ac44:	8030      	strh	r0, [r6, #0]
 801ac46:	6823      	ldr	r3, [r4, #0]
 801ac48:	4620      	mov	r0, r4
 801ac4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac4c:	4798      	blx	r3
 801ac4e:	8028      	strh	r0, [r5, #0]
 801ac50:	bd70      	pop	{r4, r5, r6, pc}

0801ac52 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801ac52:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801ac56:	4770      	bx	lr

0801ac58 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801ac58:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801ac5c:	4770      	bx	lr

0801ac5e <_ZN8touchgfx10TiledImageD1Ev>:
 801ac5e:	4770      	bx	lr

0801ac60 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801ac60:	b510      	push	{r4, lr}
 801ac62:	4604      	mov	r4, r0
 801ac64:	f000 facc 	bl	801b200 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801ac68:	6823      	ldr	r3, [r4, #0]
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801ac70:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801ac74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ac76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac7a:	4718      	bx	r3

0801ac7c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac7e:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801ac82:	4605      	mov	r5, r0
 801ac84:	8541      	strh	r1, [r0, #42]	; 0x2a
 801ac86:	4630      	mov	r0, r6
 801ac88:	f003 fe44 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ac8c:	b1a0      	cbz	r0, 801acb8 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801ac8e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801ac92:	4630      	mov	r0, r6
 801ac94:	f003 fe3e 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ac98:	fb97 f4f0 	sdiv	r4, r7, r0
 801ac9c:	fb04 7410 	mls	r4, r4, r0, r7
 801aca0:	4630      	mov	r0, r6
 801aca2:	f003 fe37 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aca6:	4404      	add	r4, r0
 801aca8:	4630      	mov	r0, r6
 801acaa:	f003 fe33 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801acae:	fb94 f3f0 	sdiv	r3, r4, r0
 801acb2:	fb03 4010 	mls	r0, r3, r0, r4
 801acb6:	8568      	strh	r0, [r5, #42]	; 0x2a
 801acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801acba <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801acba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acbc:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801acc0:	4605      	mov	r5, r0
 801acc2:	8581      	strh	r1, [r0, #44]	; 0x2c
 801acc4:	4630      	mov	r0, r6
 801acc6:	f003 fe5f 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801acca:	b1a0      	cbz	r0, 801acf6 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801accc:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801acd0:	4630      	mov	r0, r6
 801acd2:	f003 fe59 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801acd6:	fb97 f4f0 	sdiv	r4, r7, r0
 801acda:	fb04 7410 	mls	r4, r4, r0, r7
 801acde:	4630      	mov	r0, r6
 801ace0:	f003 fe52 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ace4:	4404      	add	r4, r0
 801ace6:	4630      	mov	r0, r6
 801ace8:	f003 fe4e 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801acec:	fb94 f3f0 	sdiv	r3, r4, r0
 801acf0:	fb03 4010 	mls	r0, r3, r0, r4
 801acf4:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801acf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801acf8 <_ZN8touchgfx10TiledImageD0Ev>:
 801acf8:	b510      	push	{r4, lr}
 801acfa:	4604      	mov	r4, r0
 801acfc:	2130      	movs	r1, #48	; 0x30
 801acfe:	f00d fb30 	bl	8028362 <_ZdlPvj>
 801ad02:	4620      	mov	r0, r4
 801ad04:	bd10      	pop	{r4, pc}
	...

0801ad08 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad0c:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801ad10:	b093      	sub	sp, #76	; 0x4c
 801ad12:	4607      	mov	r7, r0
 801ad14:	460e      	mov	r6, r1
 801ad16:	4658      	mov	r0, fp
 801ad18:	f003 fdfc 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ad1c:	4605      	mov	r5, r0
 801ad1e:	4658      	mov	r0, fp
 801ad20:	f003 fe32 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ad24:	4680      	mov	r8, r0
 801ad26:	2d00      	cmp	r5, #0
 801ad28:	f000 80c5 	beq.w	801aeb6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801ad2c:	2800      	cmp	r0, #0
 801ad2e:	f000 80c2 	beq.w	801aeb6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801ad32:	2300      	movs	r3, #0
 801ad34:	a90e      	add	r1, sp, #56	; 0x38
 801ad36:	4638      	mov	r0, r7
 801ad38:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801ad3c:	683b      	ldr	r3, [r7, #0]
 801ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad40:	4798      	blx	r3
 801ad42:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801ad46:	f9b6 3000 	ldrsh.w	r3, [r6]
 801ad4a:	88b1      	ldrh	r1, [r6, #4]
 801ad4c:	189c      	adds	r4, r3, r2
 801ad4e:	440b      	add	r3, r1
 801ad50:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801ad54:	fa02 f383 	sxtah	r3, r2, r3
 801ad58:	3b01      	subs	r3, #1
 801ad5a:	fb93 f3f5 	sdiv	r3, r3, r5
 801ad5e:	fb94 f4f5 	sdiv	r4, r4, r5
 801ad62:	fb13 f305 	smulbb	r3, r3, r5
 801ad66:	fb14 f405 	smulbb	r4, r4, r5
 801ad6a:	b21b      	sxth	r3, r3
 801ad6c:	1aa4      	subs	r4, r4, r2
 801ad6e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad70:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801ad74:	b2a4      	uxth	r4, r4
 801ad76:	185a      	adds	r2, r3, r1
 801ad78:	fb92 f2f8 	sdiv	r2, r2, r8
 801ad7c:	fb12 f208 	smulbb	r2, r2, r8
 801ad80:	1a52      	subs	r2, r2, r1
 801ad82:	b212      	sxth	r2, r2
 801ad84:	920c      	str	r2, [sp, #48]	; 0x30
 801ad86:	88f2      	ldrh	r2, [r6, #6]
 801ad88:	4413      	add	r3, r2
 801ad8a:	fa01 f383 	sxtah	r3, r1, r3
 801ad8e:	3b01      	subs	r3, #1
 801ad90:	fb93 f3f8 	sdiv	r3, r3, r8
 801ad94:	fb13 f308 	smulbb	r3, r3, r8
 801ad98:	b21b      	sxth	r3, r3
 801ad9a:	930d      	str	r3, [sp, #52]	; 0x34
 801ad9c:	1963      	adds	r3, r4, r5
 801ad9e:	fa1f fa83 	uxth.w	sl, r3
 801ada2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ada4:	b223      	sxth	r3, r4
 801ada6:	4293      	cmp	r3, r2
 801ada8:	9305      	str	r3, [sp, #20]
 801adaa:	f300 8084 	bgt.w	801aeb6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801adae:	fa0f f38a 	sxth.w	r3, sl
 801adb2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801adb6:	9309      	str	r3, [sp, #36]	; 0x24
 801adb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801adba:	4599      	cmp	r9, r3
 801adbc:	dd04      	ble.n	801adc8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801adbe:	442c      	add	r4, r5
 801adc0:	eb05 030a 	add.w	r3, r5, sl
 801adc4:	b2a4      	uxth	r4, r4
 801adc6:	e7ea      	b.n	801ad9e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801adc8:	f9b6 c000 	ldrsh.w	ip, [r6]
 801adcc:	88b2      	ldrh	r2, [r6, #4]
 801adce:	4462      	add	r2, ip
 801add0:	b292      	uxth	r2, r2
 801add2:	b213      	sxth	r3, r2
 801add4:	9308      	str	r3, [sp, #32]
 801add6:	fa1f f389 	uxth.w	r3, r9
 801adda:	eb08 0103 	add.w	r1, r8, r3
 801adde:	9307      	str	r3, [sp, #28]
 801ade0:	b289      	uxth	r1, r1
 801ade2:	b208      	sxth	r0, r1
 801ade4:	9006      	str	r0, [sp, #24]
 801ade6:	9805      	ldr	r0, [sp, #20]
 801ade8:	4603      	mov	r3, r0
 801adea:	9808      	ldr	r0, [sp, #32]
 801adec:	4283      	cmp	r3, r0
 801adee:	da5e      	bge.n	801aeae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801adf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801adf2:	4584      	cmp	ip, r0
 801adf4:	da5b      	bge.n	801aeae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801adf6:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801adfa:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801adfe:	4486      	add	lr, r0
 801ae00:	fa1f fe8e 	uxth.w	lr, lr
 801ae04:	fa0f f38e 	sxth.w	r3, lr
 801ae08:	4599      	cmp	r9, r3
 801ae0a:	930a      	str	r3, [sp, #40]	; 0x28
 801ae0c:	da4f      	bge.n	801aeae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801ae0e:	9b06      	ldr	r3, [sp, #24]
 801ae10:	4298      	cmp	r0, r3
 801ae12:	da4c      	bge.n	801aeae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801ae14:	9b05      	ldr	r3, [sp, #20]
 801ae16:	459c      	cmp	ip, r3
 801ae18:	bfb8      	it	lt
 801ae1a:	469c      	movlt	ip, r3
 801ae1c:	4548      	cmp	r0, r9
 801ae1e:	9b08      	ldr	r3, [sp, #32]
 801ae20:	bfb8      	it	lt
 801ae22:	4648      	movlt	r0, r9
 801ae24:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801ae28:	4699      	mov	r9, r3
 801ae2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae2c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801ae30:	4599      	cmp	r9, r3
 801ae32:	bfc8      	it	gt
 801ae34:	4652      	movgt	r2, sl
 801ae36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae38:	eba2 020c 	sub.w	r2, r2, ip
 801ae3c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801ae40:	9a06      	ldr	r2, [sp, #24]
 801ae42:	4293      	cmp	r3, r2
 801ae44:	bfd8      	it	le
 801ae46:	4671      	movle	r1, lr
 801ae48:	1a09      	subs	r1, r1, r0
 801ae4a:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801ae4e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801ae52:	9b07      	ldr	r3, [sp, #28]
 801ae54:	1b12      	subs	r2, r2, r4
 801ae56:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801ae5a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ae5e:	1ad2      	subs	r2, r2, r3
 801ae60:	4b16      	ldr	r3, [pc, #88]	; (801aebc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801ae62:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801ae66:	681a      	ldr	r2, [r3, #0]
 801ae68:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801ae6c:	b109      	cbz	r1, 801ae72 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801ae6e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801ae70:	b900      	cbnz	r0, 801ae74 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801ae72:	6890      	ldr	r0, [r2, #8]
 801ae74:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ae78:	f04f 0c01 	mov.w	ip, #1
 801ae7c:	9b07      	ldr	r3, [sp, #28]
 801ae7e:	6801      	ldr	r1, [r0, #0]
 801ae80:	4413      	add	r3, r2
 801ae82:	f8cd c008 	str.w	ip, [sp, #8]
 801ae86:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801ae8a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801ae8e:	b21b      	sxth	r3, r3
 801ae90:	4422      	add	r2, r4
 801ae92:	f8cd c004 	str.w	ip, [sp, #4]
 801ae96:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801ae9a:	b212      	sxth	r2, r2
 801ae9c:	f8cd c000 	str.w	ip, [sp]
 801aea0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801aea4:	4659      	mov	r1, fp
 801aea6:	47c8      	blx	r9
 801aea8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801aeac:	e784      	b.n	801adb8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801aeae:	2300      	movs	r3, #0
 801aeb0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801aeb4:	e7cb      	b.n	801ae4e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801aeb6:	b013      	add	sp, #76	; 0x4c
 801aeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aebc:	2000beec 	.word	0x2000beec

0801aec0 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801aec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801aec8:	4606      	mov	r6, r0
 801aeca:	4689      	mov	r9, r1
 801aecc:	2bff      	cmp	r3, #255	; 0xff
 801aece:	d008      	beq.n	801aee2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801aed0:	2300      	movs	r3, #0
 801aed2:	8003      	strh	r3, [r0, #0]
 801aed4:	8043      	strh	r3, [r0, #2]
 801aed6:	8083      	strh	r3, [r0, #4]
 801aed8:	4630      	mov	r0, r6
 801aeda:	80f3      	strh	r3, [r6, #6]
 801aedc:	b003      	add	sp, #12
 801aede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aee2:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801aee6:	4668      	mov	r0, sp
 801aee8:	4659      	mov	r1, fp
 801aeea:	f003 fd87 	bl	801e9fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801aeee:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801aef2:	4658      	mov	r0, fp
 801aef4:	f9bd 7000 	ldrsh.w	r7, [sp]
 801aef8:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801aefc:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801af00:	f003 fd08 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801af04:	4284      	cmp	r4, r0
 801af06:	d10d      	bne.n	801af24 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801af08:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801af0c:	4658      	mov	r0, fp
 801af0e:	f003 fd3b 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af12:	4580      	cmp	r8, r0
 801af14:	d12a      	bne.n	801af6c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801af16:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801af1a:	8037      	strh	r7, [r6, #0]
 801af1c:	f8a6 a002 	strh.w	sl, [r6, #2]
 801af20:	80b5      	strh	r5, [r6, #4]
 801af22:	e7d9      	b.n	801aed8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801af24:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801af28:	4658      	mov	r0, fp
 801af2a:	f003 fcf3 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801af2e:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801af32:	1b7f      	subs	r7, r7, r5
 801af34:	b2a3      	uxth	r3, r4
 801af36:	b2bd      	uxth	r5, r7
 801af38:	b22f      	sxth	r7, r5
 801af3a:	4428      	add	r0, r5
 801af3c:	2f00      	cmp	r7, #0
 801af3e:	b280      	uxth	r0, r0
 801af40:	bfb8      	it	lt
 801af42:	18ed      	addlt	r5, r5, r3
 801af44:	4403      	add	r3, r0
 801af46:	bfac      	ite	ge
 801af48:	4625      	movge	r5, r4
 801af4a:	2700      	movlt	r7, #0
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	bfb8      	it	lt
 801af50:	b22d      	sxthlt	r5, r5
 801af52:	b219      	sxth	r1, r3
 801af54:	bfb8      	it	lt
 801af56:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801af5a:	4291      	cmp	r1, r2
 801af5c:	bfc4      	itt	gt
 801af5e:	1a9c      	subgt	r4, r3, r2
 801af60:	b224      	sxthgt	r4, r4
 801af62:	42ac      	cmp	r4, r5
 801af64:	bfc4      	itt	gt
 801af66:	b207      	sxthgt	r7, r0
 801af68:	4625      	movgt	r5, r4
 801af6a:	e7cf      	b.n	801af0c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801af6c:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801af70:	4658      	mov	r0, fp
 801af72:	f003 fd09 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af76:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801af7a:	ebaa 0404 	sub.w	r4, sl, r4
 801af7e:	fa1f f288 	uxth.w	r2, r8
 801af82:	b2a4      	uxth	r4, r4
 801af84:	fa0f fa84 	sxth.w	sl, r4
 801af88:	4420      	add	r0, r4
 801af8a:	f1ba 0f00 	cmp.w	sl, #0
 801af8e:	b280      	uxth	r0, r0
 801af90:	bfb8      	it	lt
 801af92:	18a3      	addlt	r3, r4, r2
 801af94:	4402      	add	r2, r0
 801af96:	bfac      	ite	ge
 801af98:	4643      	movge	r3, r8
 801af9a:	f04f 0a00 	movlt.w	sl, #0
 801af9e:	b292      	uxth	r2, r2
 801afa0:	bfb8      	it	lt
 801afa2:	b21b      	sxthlt	r3, r3
 801afa4:	b214      	sxth	r4, r2
 801afa6:	bfb8      	it	lt
 801afa8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801afac:	428c      	cmp	r4, r1
 801afae:	bfc4      	itt	gt
 801afb0:	eba2 0801 	subgt.w	r8, r2, r1
 801afb4:	fa0f f888 	sxthgt.w	r8, r8
 801afb8:	4543      	cmp	r3, r8
 801afba:	bfbc      	itt	lt
 801afbc:	fa0f fa80 	sxthlt.w	sl, r0
 801afc0:	4643      	movlt	r3, r8
 801afc2:	e7aa      	b.n	801af1a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801afc4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801afc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801afc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801afcc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801afce:	4604      	mov	r4, r0
 801afd0:	429a      	cmp	r2, r3
 801afd2:	d018      	beq.n	801b006 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 801afd4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801afd8:	4628      	mov	r0, r5
 801afda:	f7f5 f981 	bl	80102e0 <_ZNK8touchgfx9TypedText7getFontEv>
 801afde:	6803      	ldr	r3, [r0, #0]
 801afe0:	4606      	mov	r6, r0
 801afe2:	4628      	mov	r0, r5
 801afe4:	69df      	ldr	r7, [r3, #28]
 801afe6:	f7f5 f997 	bl	8010318 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801afea:	4680      	mov	r8, r0
 801afec:	4628      	mov	r0, r5
 801afee:	f7f7 fa4b 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 801aff2:	2300      	movs	r3, #0
 801aff4:	4602      	mov	r2, r0
 801aff6:	4641      	mov	r1, r8
 801aff8:	9300      	str	r3, [sp, #0]
 801affa:	4630      	mov	r0, r6
 801affc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801affe:	47b8      	blx	r7
 801b000:	b002      	add	sp, #8
 801b002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b006:	2000      	movs	r0, #0
 801b008:	e7fa      	b.n	801b000 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801b00a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801b00a:	b570      	push	{r4, r5, r6, lr}
 801b00c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b010:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801b012:	4604      	mov	r4, r0
 801b014:	429a      	cmp	r2, r3
 801b016:	d00c      	beq.n	801b032 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801b018:	f850 3b26 	ldr.w	r3, [r0], #38
 801b01c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801b01e:	f7f7 fa33 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 801b022:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801b024:	4601      	mov	r1, r0
 801b026:	46ac      	mov	ip, r5
 801b028:	4620      	mov	r0, r4
 801b02a:	2300      	movs	r3, #0
 801b02c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b030:	4760      	bx	ip
 801b032:	2000      	movs	r0, #0
 801b034:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b038 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b03c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b040:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801b042:	b08d      	sub	sp, #52	; 0x34
 801b044:	4604      	mov	r4, r0
 801b046:	429e      	cmp	r6, r3
 801b048:	460f      	mov	r7, r1
 801b04a:	d048      	beq.n	801b0de <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801b04c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b050:	4628      	mov	r0, r5
 801b052:	f7f5 f945 	bl	80102e0 <_ZNK8touchgfx9TypedText7getFontEv>
 801b056:	4680      	mov	r8, r0
 801b058:	2800      	cmp	r0, #0
 801b05a:	d040      	beq.n	801b0de <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801b05c:	4628      	mov	r0, r5
 801b05e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801b062:	f7f5 f971 	bl	8010348 <_ZNK8touchgfx9TypedText11assertValidEv>
 801b066:	4b1f      	ldr	r3, [pc, #124]	; (801b0e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801b068:	4628      	mov	r0, r5
 801b06a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801b074:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801b078:	785e      	ldrb	r6, [r3, #1]
 801b07a:	f7f5 f94d 	bl	8010318 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801b07e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801b082:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801b086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b088:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801b08c:	f88d 6020 	strb.w	r6, [sp, #32]
 801b090:	ae05      	add	r6, sp, #20
 801b092:	9309      	str	r3, [sp, #36]	; 0x24
 801b094:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801b098:	f8cd 801c 	str.w	r8, [sp, #28]
 801b09c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801b0a0:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801b0a4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801b0a8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801b0ac:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b0b0:	f7f5 fd3e 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801b0b4:	4621      	mov	r1, r4
 801b0b6:	4680      	mov	r8, r0
 801b0b8:	4630      	mov	r0, r6
 801b0ba:	f001 fe24 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b0be:	4628      	mov	r0, r5
 801b0c0:	f7f7 f9e2 	bl	8012488 <_ZNK8touchgfx9TypedText7getTextEv>
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	9303      	str	r3, [sp, #12]
 801b0c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0ca:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801b0ce:	ab07      	add	r3, sp, #28
 801b0d0:	4640      	mov	r0, r8
 801b0d2:	9300      	str	r3, [sp, #0]
 801b0d4:	463b      	mov	r3, r7
 801b0d6:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b0da:	f000 fb35 	bl	801b748 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b0de:	b00d      	add	sp, #52	; 0x34
 801b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0e4:	2000bf7c 	.word	0x2000bf7c

0801b0e8 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	8083      	strh	r3, [r0, #4]
 801b0ec:	80c3      	strh	r3, [r0, #6]
 801b0ee:	8003      	strh	r3, [r0, #0]
 801b0f0:	8043      	strh	r3, [r0, #2]
 801b0f2:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b0f6:	2bff      	cmp	r3, #255	; 0xff
 801b0f8:	bf01      	itttt	eq
 801b0fa:	890b      	ldrheq	r3, [r1, #8]
 801b0fc:	8083      	strheq	r3, [r0, #4]
 801b0fe:	894b      	ldrheq	r3, [r1, #10]
 801b100:	80c3      	strheq	r3, [r0, #6]
 801b102:	4770      	bx	lr

0801b104 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b108:	4604      	mov	r4, r0
 801b10a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b10e:	460e      	mov	r6, r1
 801b110:	b08c      	sub	sp, #48	; 0x30
 801b112:	8962      	ldrh	r2, [r4, #10]
 801b114:	b218      	sxth	r0, r3
 801b116:	8921      	ldrh	r1, [r4, #8]
 801b118:	005b      	lsls	r3, r3, #1
 801b11a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b11e:	1ac9      	subs	r1, r1, r3
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b126:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b12a:	6830      	ldr	r0, [r6, #0]
 801b12c:	6871      	ldr	r1, [r6, #4]
 801b12e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b132:	466b      	mov	r3, sp
 801b134:	c303      	stmia	r3!, {r0, r1}
 801b136:	a904      	add	r1, sp, #16
 801b138:	4668      	mov	r0, sp
 801b13a:	f7fd fe75 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801b13e:	6823      	ldr	r3, [r4, #0]
 801b140:	4669      	mov	r1, sp
 801b142:	4620      	mov	r0, r4
 801b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b146:	4798      	blx	r3
 801b148:	f7f5 fcf2 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801b14c:	6803      	ldr	r3, [r0, #0]
 801b14e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b150:	4669      	mov	r1, sp
 801b152:	69dd      	ldr	r5, [r3, #28]
 801b154:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b158:	47a8      	blx	r5
 801b15a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801b15e:	2a00      	cmp	r2, #0
 801b160:	d04b      	beq.n	801b1fa <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801b162:	b211      	sxth	r1, r2
 801b164:	8963      	ldrh	r3, [r4, #10]
 801b166:	b292      	uxth	r2, r2
 801b168:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801b16c:	2500      	movs	r5, #0
 801b16e:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b172:	1a9f      	subs	r7, r3, r2
 801b174:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801b178:	1a82      	subs	r2, r0, r2
 801b17a:	9504      	str	r5, [sp, #16]
 801b17c:	b21b      	sxth	r3, r3
 801b17e:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b182:	af02      	add	r7, sp, #8
 801b184:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b188:	f8ad 5018 	strh.w	r5, [sp, #24]
 801b18c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b190:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b194:	f8ad 5020 	strh.w	r5, [sp, #32]
 801b198:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801b19c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801b1a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b1a4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b1a8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801b1ac:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b1b0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b1b4:	ab04      	add	r3, sp, #16
 801b1b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b1ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b1be:	e887 0003 	stmia.w	r7, {r0, r1}
 801b1c2:	4631      	mov	r1, r6
 801b1c4:	4638      	mov	r0, r7
 801b1c6:	f7fd fe2f 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801b1ca:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b1ce:	b18b      	cbz	r3, 801b1f4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801b1d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b1d4:	b173      	cbz	r3, 801b1f4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801b1d6:	6823      	ldr	r3, [r4, #0]
 801b1d8:	4639      	mov	r1, r7
 801b1da:	4620      	mov	r0, r4
 801b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1de:	4798      	blx	r3
 801b1e0:	f7f5 fca6 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 801b1e4:	6803      	ldr	r3, [r0, #0]
 801b1e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b1e8:	4639      	mov	r1, r7
 801b1ea:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801b1ee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b1f2:	47c0      	blx	r8
 801b1f4:	3501      	adds	r5, #1
 801b1f6:	2d04      	cmp	r5, #4
 801b1f8:	d1dc      	bne.n	801b1b4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801b1fa:	b00c      	add	sp, #48	; 0x30
 801b1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b200 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b200:	b570      	push	{r4, r5, r6, lr}
 801b202:	4605      	mov	r5, r0
 801b204:	880b      	ldrh	r3, [r1, #0]
 801b206:	4604      	mov	r4, r0
 801b208:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b20a:	f855 3b26 	ldr.w	r3, [r5], #38
 801b20e:	4628      	mov	r0, r5
 801b210:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801b212:	f003 fb7f 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b216:	b201      	sxth	r1, r0
 801b218:	4620      	mov	r0, r4
 801b21a:	47b0      	blx	r6
 801b21c:	6823      	ldr	r3, [r4, #0]
 801b21e:	4628      	mov	r0, r5
 801b220:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801b222:	f003 fbb1 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b226:	b201      	sxth	r1, r0
 801b228:	4620      	mov	r0, r4
 801b22a:	47b0      	blx	r6
 801b22c:	4628      	mov	r0, r5
 801b22e:	f003 fc3f 	bl	801eab0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b232:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801b236:	bd70      	pop	{r4, r5, r6, pc}

0801b238 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801b238:	b510      	push	{r4, lr}
 801b23a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b23e:	4604      	mov	r4, r0
 801b240:	2bff      	cmp	r3, #255	; 0xff
 801b242:	d006      	beq.n	801b252 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801b244:	2300      	movs	r3, #0
 801b246:	8003      	strh	r3, [r0, #0]
 801b248:	8043      	strh	r3, [r0, #2]
 801b24a:	8083      	strh	r3, [r0, #4]
 801b24c:	80c3      	strh	r3, [r0, #6]
 801b24e:	4620      	mov	r0, r4
 801b250:	bd10      	pop	{r4, pc}
 801b252:	3126      	adds	r1, #38	; 0x26
 801b254:	f003 fbd2 	bl	801e9fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b258:	e7f9      	b.n	801b24e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801b25c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b260:	4604      	mov	r4, r0
 801b262:	b088      	sub	sp, #32
 801b264:	2500      	movs	r5, #0
 801b266:	460f      	mov	r7, r1
 801b268:	f854 3b26 	ldr.w	r3, [r4], #38
 801b26c:	a904      	add	r1, sp, #16
 801b26e:	4606      	mov	r6, r0
 801b270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b272:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b276:	4798      	blx	r3
 801b278:	4620      	mov	r0, r4
 801b27a:	f003 fb4b 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b27e:	4680      	mov	r8, r0
 801b280:	4620      	mov	r0, r4
 801b282:	f003 fb81 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b286:	9506      	str	r5, [sp, #24]
 801b288:	ad06      	add	r5, sp, #24
 801b28a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b28e:	4639      	mov	r1, r7
 801b290:	f8ad 801c 	strh.w	r8, [sp, #28]
 801b294:	4628      	mov	r0, r5
 801b296:	f7fd fdc7 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801b29a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b29e:	b1c3      	cbz	r3, 801b2d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801b2a0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b2a4:	b1ab      	cbz	r3, 801b2d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801b2a6:	4b0c      	ldr	r3, [pc, #48]	; (801b2d8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b2ae:	b10a      	cbz	r2, 801b2b4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801b2b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b2b2:	b900      	cbnz	r0, 801b2b6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801b2b4:	6898      	ldr	r0, [r3, #8]
 801b2b6:	2701      	movs	r7, #1
 801b2b8:	6801      	ldr	r1, [r0, #0]
 801b2ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b2be:	9702      	str	r7, [sp, #8]
 801b2c0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801b2c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b2c8:	e9cd 5600 	strd	r5, r6, [sp]
 801b2cc:	68cd      	ldr	r5, [r1, #12]
 801b2ce:	4621      	mov	r1, r4
 801b2d0:	47a8      	blx	r5
 801b2d2:	b008      	add	sp, #32
 801b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2d8:	2000beec 	.word	0x2000beec

0801b2dc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801b2dc:	4b02      	ldr	r3, [pc, #8]	; (801b2e8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801b2de:	6018      	str	r0, [r3, #0]
 801b2e0:	4b02      	ldr	r3, [pc, #8]	; (801b2ec <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801b2e2:	6019      	str	r1, [r3, #0]
 801b2e4:	4770      	bx	lr
 801b2e6:	bf00      	nop
 801b2e8:	2000bef4 	.word	0x2000bef4
 801b2ec:	2000bf08 	.word	0x2000bf08

0801b2f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801b2f0:	b538      	push	{r3, r4, r5, lr}
 801b2f2:	4c2b      	ldr	r4, [pc, #172]	; (801b3a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801b2f4:	4b2b      	ldr	r3, [pc, #172]	; (801b3a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801b2f6:	6821      	ldr	r1, [r4, #0]
 801b2f8:	681a      	ldr	r2, [r3, #0]
 801b2fa:	4281      	cmp	r1, r0
 801b2fc:	4d2a      	ldr	r5, [pc, #168]	; (801b3a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801b2fe:	492b      	ldr	r1, [pc, #172]	; (801b3ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801b300:	d108      	bne.n	801b314 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b302:	682b      	ldr	r3, [r5, #0]
 801b304:	4293      	cmp	r3, r2
 801b306:	d105      	bne.n	801b314 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b308:	6808      	ldr	r0, [r1, #0]
 801b30a:	280f      	cmp	r0, #15
 801b30c:	bf94      	ite	ls
 801b30e:	2000      	movls	r0, #0
 801b310:	2001      	movhi	r0, #1
 801b312:	bd38      	pop	{r3, r4, r5, pc}
 801b314:	4b26      	ldr	r3, [pc, #152]	; (801b3b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801b316:	6020      	str	r0, [r4, #0]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	602a      	str	r2, [r5, #0]
 801b31c:	4298      	cmp	r0, r3
 801b31e:	d905      	bls.n	801b32c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801b320:	4b24      	ldr	r3, [pc, #144]	; (801b3b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b322:	2137      	movs	r1, #55	; 0x37
 801b324:	4a24      	ldr	r2, [pc, #144]	; (801b3b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b326:	4825      	ldr	r0, [pc, #148]	; (801b3bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801b328:	f00d f846 	bl	80283b8 <__assert_func>
 801b32c:	f010 0403 	ands.w	r4, r0, #3
 801b330:	bf1f      	itttt	ne
 801b332:	f1c4 0504 	rsbne	r5, r4, #4
 801b336:	3b04      	subne	r3, #4
 801b338:	1952      	addne	r2, r2, r5
 801b33a:	191b      	addne	r3, r3, r4
 801b33c:	4d20      	ldr	r5, [pc, #128]	; (801b3c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801b33e:	4402      	add	r2, r0
 801b340:	1a1b      	subs	r3, r3, r0
 801b342:	3001      	adds	r0, #1
 801b344:	602a      	str	r2, [r5, #0]
 801b346:	f020 0401 	bic.w	r4, r0, #1
 801b34a:	42a3      	cmp	r3, r4
 801b34c:	d203      	bcs.n	801b356 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801b34e:	4b19      	ldr	r3, [pc, #100]	; (801b3b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b350:	214a      	movs	r1, #74	; 0x4a
 801b352:	4a19      	ldr	r2, [pc, #100]	; (801b3b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b354:	e7e7      	b.n	801b326 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b356:	f010 0002 	ands.w	r0, r0, #2
 801b35a:	bf1f      	itttt	ne
 801b35c:	f1c0 0504 	rsbne	r5, r0, #4
 801b360:	1952      	addne	r2, r2, r5
 801b362:	1f05      	subne	r5, r0, #4
 801b364:	195b      	addne	r3, r3, r5
 801b366:	4422      	add	r2, r4
 801b368:	4d16      	ldr	r5, [pc, #88]	; (801b3c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801b36a:	1b1b      	subs	r3, r3, r4
 801b36c:	602a      	str	r2, [r5, #0]
 801b36e:	429c      	cmp	r4, r3
 801b370:	d903      	bls.n	801b37a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801b372:	4b10      	ldr	r3, [pc, #64]	; (801b3b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b374:	215d      	movs	r1, #93	; 0x5d
 801b376:	4a10      	ldr	r2, [pc, #64]	; (801b3b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b378:	e7d5      	b.n	801b326 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b37a:	b120      	cbz	r0, 801b386 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801b37c:	f1c0 0504 	rsb	r5, r0, #4
 801b380:	3804      	subs	r0, #4
 801b382:	442a      	add	r2, r5
 801b384:	4403      	add	r3, r0
 801b386:	1b1b      	subs	r3, r3, r4
 801b388:	4422      	add	r2, r4
 801b38a:	480f      	ldr	r0, [pc, #60]	; (801b3c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801b38c:	2b0f      	cmp	r3, #15
 801b38e:	600b      	str	r3, [r1, #0]
 801b390:	6002      	str	r2, [r0, #0]
 801b392:	d803      	bhi.n	801b39c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801b394:	4b0d      	ldr	r3, [pc, #52]	; (801b3cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801b396:	2170      	movs	r1, #112	; 0x70
 801b398:	4a07      	ldr	r2, [pc, #28]	; (801b3b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b39a:	e7c4      	b.n	801b326 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b39c:	2001      	movs	r0, #1
 801b39e:	e7b8      	b.n	801b312 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801b3a0:	2000befc 	.word	0x2000befc
 801b3a4:	2000bef4 	.word	0x2000bef4
 801b3a8:	2000bf04 	.word	0x2000bf04
 801b3ac:	2000bf0c 	.word	0x2000bf0c
 801b3b0:	2000bf08 	.word	0x2000bf08
 801b3b4:	0802c2c4 	.word	0x0802c2c4
 801b3b8:	0802c38c 	.word	0x0802c38c
 801b3bc:	0802c2fd 	.word	0x0802c2fd
 801b3c0:	2000bf10 	.word	0x2000bf10
 801b3c4:	2000bf00 	.word	0x2000bf00
 801b3c8:	2000bef8 	.word	0x2000bef8
 801b3cc:	0802c347 	.word	0x0802c347

0801b3d0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801b3d0:	4b04      	ldr	r3, [pc, #16]	; (801b3e4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801b3d2:	6818      	ldr	r0, [r3, #0]
 801b3d4:	b120      	cbz	r0, 801b3e0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801b3d6:	4b04      	ldr	r3, [pc, #16]	; (801b3e8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801b3d8:	6818      	ldr	r0, [r3, #0]
 801b3da:	3000      	adds	r0, #0
 801b3dc:	bf18      	it	ne
 801b3de:	2001      	movne	r0, #1
 801b3e0:	4770      	bx	lr
 801b3e2:	bf00      	nop
 801b3e4:	2000bef4 	.word	0x2000bef4
 801b3e8:	2000bf08 	.word	0x2000bf08

0801b3ec <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801b3ec:	4b01      	ldr	r3, [pc, #4]	; (801b3f4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801b3ee:	6818      	ldr	r0, [r3, #0]
 801b3f0:	4770      	bx	lr
 801b3f2:	bf00      	nop
 801b3f4:	2000befc 	.word	0x2000befc

0801b3f8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801b3f8:	4b01      	ldr	r3, [pc, #4]	; (801b400 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801b3fa:	6818      	ldr	r0, [r3, #0]
 801b3fc:	4770      	bx	lr
 801b3fe:	bf00      	nop
 801b400:	2000bf04 	.word	0x2000bf04

0801b404 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801b404:	4b01      	ldr	r3, [pc, #4]	; (801b40c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801b406:	6818      	ldr	r0, [r3, #0]
 801b408:	4770      	bx	lr
 801b40a:	bf00      	nop
 801b40c:	2000bf10 	.word	0x2000bf10

0801b410 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801b410:	4b01      	ldr	r3, [pc, #4]	; (801b418 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801b412:	6818      	ldr	r0, [r3, #0]
 801b414:	4770      	bx	lr
 801b416:	bf00      	nop
 801b418:	2000bf00 	.word	0x2000bf00

0801b41c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801b41c:	4b01      	ldr	r3, [pc, #4]	; (801b424 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801b41e:	6818      	ldr	r0, [r3, #0]
 801b420:	4770      	bx	lr
 801b422:	bf00      	nop
 801b424:	2000bef8 	.word	0x2000bef8

0801b428 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801b428:	4b01      	ldr	r3, [pc, #4]	; (801b430 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801b42a:	6818      	ldr	r0, [r3, #0]
 801b42c:	4770      	bx	lr
 801b42e:	bf00      	nop
 801b430:	2000bf0c 	.word	0x2000bf0c

0801b434 <_ZN8touchgfx3LCD4initEv>:
 801b434:	4770      	bx	lr

0801b436 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b436:	2000      	movs	r0, #0
 801b438:	4770      	bx	lr

0801b43a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b43a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b43e:	b091      	sub	sp, #68	; 0x44
 801b440:	4699      	mov	r9, r3
 801b442:	4617      	mov	r7, r2
 801b444:	2500      	movs	r5, #0
 801b446:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801b44a:	4680      	mov	r8, r0
 801b44c:	a80e      	add	r0, sp, #56	; 0x38
 801b44e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801b450:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801b454:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801b458:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801b45c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b460:	910d      	str	r1, [sp, #52]	; 0x34
 801b462:	950e      	str	r5, [sp, #56]	; 0x38
 801b464:	f000 fe3a 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b468:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b46a:	f8d9 6000 	ldr.w	r6, [r9]
 801b46e:	6818      	ldr	r0, [r3, #0]
 801b470:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b472:	f9b4 b000 	ldrsh.w	fp, [r4]
 801b476:	1b80      	subs	r0, r0, r6
 801b478:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b47c:	eb02 0c06 	add.w	ip, r2, r6
 801b480:	ebab 0e0c 	sub.w	lr, fp, ip
 801b484:	4570      	cmp	r0, lr
 801b486:	f340 80bc 	ble.w	801b602 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b48a:	88a1      	ldrh	r1, [r4, #4]
 801b48c:	4459      	add	r1, fp
 801b48e:	b209      	sxth	r1, r1
 801b490:	458c      	cmp	ip, r1
 801b492:	f300 80b6 	bgt.w	801b602 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b496:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801b49a:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801b49e:	4283      	cmp	r3, r0
 801b4a0:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801b4a4:	edd9 6a07 	vldr	s13, [r9, #28]
 801b4a8:	bfa8      	it	ge
 801b4aa:	4603      	movge	r3, r0
 801b4ac:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801b4b0:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801b4b4:	45e3      	cmp	fp, ip
 801b4b6:	ee07 3a90 	vmov	s15, r3
 801b4ba:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b4be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b4c2:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b4c6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b4ca:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b4ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b4d2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b4d6:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b4da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b4de:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b4e2:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b4e6:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b4ea:	f340 808d 	ble.w	801b608 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801b4ee:	fb9e f5f3 	sdiv	r5, lr, r3
 801b4f2:	ee07 5a10 	vmov	s14, r5
 801b4f6:	2d00      	cmp	r5, #0
 801b4f8:	fb03 e415 	mls	r4, r3, r5, lr
 801b4fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b500:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b504:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b508:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b50c:	dd12      	ble.n	801b534 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801b50e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b512:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b516:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b51a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b522:	bf14      	ite	ne
 801b524:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b528:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b52c:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b530:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b534:	fb05 f703 	mul.w	r7, r5, r3
 801b538:	1bc0      	subs	r0, r0, r7
 801b53a:	443e      	add	r6, r7
 801b53c:	1997      	adds	r7, r2, r6
 801b53e:	4407      	add	r7, r0
 801b540:	42b9      	cmp	r1, r7
 801b542:	bfbc      	itt	lt
 801b544:	1a88      	sublt	r0, r1, r2
 801b546:	1b80      	sublt	r0, r0, r6
 801b548:	2800      	cmp	r0, #0
 801b54a:	dd5a      	ble.n	801b602 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b54c:	fb90 f1f3 	sdiv	r1, r0, r3
 801b550:	fb03 0211 	mls	r2, r3, r1, r0
 801b554:	b90a      	cbnz	r2, 801b55a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801b556:	3901      	subs	r1, #1
 801b558:	461a      	mov	r2, r3
 801b55a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b55e:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801b562:	44a4      	add	ip, r4
 801b564:	2900      	cmp	r1, #0
 801b566:	bfcc      	ite	gt
 801b568:	469e      	movgt	lr, r3
 801b56a:	4696      	movle	lr, r2
 801b56c:	fb03 c505 	mla	r5, r3, r5, ip
 801b570:	eef0 6a42 	vmov.f32	s13, s4
 801b574:	eeb0 7a61 	vmov.f32	s14, s3
 801b578:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b57c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b580:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b584:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b588:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b58c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b590:	ee17 0a90 	vmov	r0, s15
 801b594:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b598:	fb90 f6f3 	sdiv	r6, r0, r3
 801b59c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b5a0:	ee17 0a90 	vmov	r0, s15
 801b5a4:	fb90 f7f3 	sdiv	r7, r0, r3
 801b5a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b5ac:	f8d0 8000 	ldr.w	r8, [r0]
 801b5b0:	900c      	str	r0, [sp, #48]	; 0x30
 801b5b2:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b5b4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b5b8:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b5bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801b5c0:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801b5c4:	f8cd a020 	str.w	sl, [sp, #32]
 801b5c8:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801b5cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b5ce:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801b5d2:	9603      	str	r6, [sp, #12]
 801b5d4:	44ca      	add	sl, r9
 801b5d6:	9506      	str	r5, [sp, #24]
 801b5d8:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801b5dc:	ee16 0a90 	vmov	r0, s13
 801b5e0:	f8cd a01c 	str.w	sl, [sp, #28]
 801b5e4:	fb07 0704 	mla	r7, r7, r4, r0
 801b5e8:	ee17 0a10 	vmov	r0, s14
 801b5ec:	fb06 0604 	mla	r6, r6, r4, r0
 801b5f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b5f2:	9702      	str	r7, [sp, #8]
 801b5f4:	e9cd 3600 	strd	r3, r6, [sp]
 801b5f8:	ebae 0304 	sub.w	r3, lr, r4
 801b5fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b600:	47a8      	blx	r5
 801b602:	b011      	add	sp, #68	; 0x44
 801b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b608:	462c      	mov	r4, r5
 801b60a:	e797      	b.n	801b53c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801b60c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b60c:	b570      	push	{r4, r5, r6, lr}
 801b60e:	4604      	mov	r4, r0
 801b610:	2500      	movs	r5, #0
 801b612:	9804      	ldr	r0, [sp, #16]
 801b614:	7223      	strb	r3, [r4, #8]
 801b616:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b61a:	8025      	strh	r5, [r4, #0]
 801b61c:	6061      	str	r1, [r4, #4]
 801b61e:	7263      	strb	r3, [r4, #9]
 801b620:	60e0      	str	r0, [r4, #12]
 801b622:	8222      	strh	r2, [r4, #16]
 801b624:	8265      	strh	r5, [r4, #18]
 801b626:	82a5      	strh	r5, [r4, #20]
 801b628:	82e5      	strh	r5, [r4, #22]
 801b62a:	8325      	strh	r5, [r4, #24]
 801b62c:	8365      	strh	r5, [r4, #26]
 801b62e:	83a5      	strh	r5, [r4, #28]
 801b630:	77a5      	strb	r5, [r4, #30]
 801b632:	6803      	ldr	r3, [r0, #0]
 801b634:	695b      	ldr	r3, [r3, #20]
 801b636:	4798      	blx	r3
 801b638:	4606      	mov	r6, r0
 801b63a:	b1f8      	cbz	r0, 801b67c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b63c:	68e0      	ldr	r0, [r4, #12]
 801b63e:	4631      	mov	r1, r6
 801b640:	6803      	ldr	r3, [r0, #0]
 801b642:	68db      	ldr	r3, [r3, #12]
 801b644:	4798      	blx	r3
 801b646:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b64a:	4605      	mov	r5, r0
 801b64c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b650:	7a83      	ldrb	r3, [r0, #10]
 801b652:	4313      	orrs	r3, r2
 801b654:	83a3      	strh	r3, [r4, #28]
 801b656:	7a63      	ldrb	r3, [r4, #9]
 801b658:	2b04      	cmp	r3, #4
 801b65a:	d10f      	bne.n	801b67c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b65c:	68e0      	ldr	r0, [r4, #12]
 801b65e:	462a      	mov	r2, r5
 801b660:	4631      	mov	r1, r6
 801b662:	6803      	ldr	r3, [r0, #0]
 801b664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b666:	4798      	blx	r3
 801b668:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801b66c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b670:	7aab      	ldrb	r3, [r5, #10]
 801b672:	4313      	orrs	r3, r2
 801b674:	4418      	add	r0, r3
 801b676:	8ba3      	ldrh	r3, [r4, #28]
 801b678:	4418      	add	r0, r3
 801b67a:	83a0      	strh	r0, [r4, #28]
 801b67c:	4620      	mov	r0, r4
 801b67e:	bd70      	pop	{r4, r5, r6, pc}

0801b680 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b684:	2400      	movs	r4, #0
 801b686:	b085      	sub	sp, #20
 801b688:	4681      	mov	r9, r0
 801b68a:	460f      	mov	r7, r1
 801b68c:	4692      	mov	sl, r2
 801b68e:	469b      	mov	fp, r3
 801b690:	46a0      	mov	r8, r4
 801b692:	4626      	mov	r6, r4
 801b694:	4554      	cmp	r4, sl
 801b696:	da21      	bge.n	801b6dc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b698:	2300      	movs	r3, #0
 801b69a:	463a      	mov	r2, r7
 801b69c:	4659      	mov	r1, fp
 801b69e:	4648      	mov	r0, r9
 801b6a0:	9303      	str	r3, [sp, #12]
 801b6a2:	ab03      	add	r3, sp, #12
 801b6a4:	f002 fb8c 	bl	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b6a8:	4605      	mov	r5, r0
 801b6aa:	b1b8      	cbz	r0, 801b6dc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b6ac:	280a      	cmp	r0, #10
 801b6ae:	d015      	beq.n	801b6dc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b6b0:	9a03      	ldr	r2, [sp, #12]
 801b6b2:	b182      	cbz	r2, 801b6d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801b6b4:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801b6b8:	4641      	mov	r1, r8
 801b6ba:	7a93      	ldrb	r3, [r2, #10]
 801b6bc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b6c0:	8895      	ldrh	r5, [r2, #4]
 801b6c2:	4303      	orrs	r3, r0
 801b6c4:	4638      	mov	r0, r7
 801b6c6:	9301      	str	r3, [sp, #4]
 801b6c8:	683b      	ldr	r3, [r7, #0]
 801b6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6cc:	4798      	blx	r3
 801b6ce:	9b01      	ldr	r3, [sp, #4]
 801b6d0:	4418      	add	r0, r3
 801b6d2:	4406      	add	r6, r0
 801b6d4:	b2b6      	uxth	r6, r6
 801b6d6:	3401      	adds	r4, #1
 801b6d8:	46a8      	mov	r8, r5
 801b6da:	e7db      	b.n	801b694 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801b6dc:	4630      	mov	r0, r6
 801b6de:	b005      	add	sp, #20
 801b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b6e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b6e4:	2a02      	cmp	r2, #2
 801b6e6:	b530      	push	{r4, r5, lr}
 801b6e8:	d011      	beq.n	801b70e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b6ea:	2a03      	cmp	r2, #3
 801b6ec:	d01c      	beq.n	801b728 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b6ee:	2a01      	cmp	r2, #1
 801b6f0:	d10c      	bne.n	801b70c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b6f2:	888b      	ldrh	r3, [r1, #4]
 801b6f4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b6f8:	8801      	ldrh	r1, [r0, #0]
 801b6fa:	1a9b      	subs	r3, r3, r2
 801b6fc:	8844      	ldrh	r4, [r0, #2]
 801b6fe:	1a5b      	subs	r3, r3, r1
 801b700:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b704:	8004      	strh	r4, [r0, #0]
 801b706:	8043      	strh	r3, [r0, #2]
 801b708:	8081      	strh	r1, [r0, #4]
 801b70a:	80c2      	strh	r2, [r0, #6]
 801b70c:	bd30      	pop	{r4, r5, pc}
 801b70e:	88cb      	ldrh	r3, [r1, #6]
 801b710:	88c2      	ldrh	r2, [r0, #6]
 801b712:	1a9b      	subs	r3, r3, r2
 801b714:	8842      	ldrh	r2, [r0, #2]
 801b716:	1a9b      	subs	r3, r3, r2
 801b718:	888a      	ldrh	r2, [r1, #4]
 801b71a:	8881      	ldrh	r1, [r0, #4]
 801b71c:	8043      	strh	r3, [r0, #2]
 801b71e:	1a52      	subs	r2, r2, r1
 801b720:	8801      	ldrh	r1, [r0, #0]
 801b722:	1a52      	subs	r2, r2, r1
 801b724:	8002      	strh	r2, [r0, #0]
 801b726:	e7f1      	b.n	801b70c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b728:	88cb      	ldrh	r3, [r1, #6]
 801b72a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b72e:	8841      	ldrh	r1, [r0, #2]
 801b730:	1a9b      	subs	r3, r3, r2
 801b732:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b736:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b73a:	1a5b      	subs	r3, r3, r1
 801b73c:	8045      	strh	r5, [r0, #2]
 801b73e:	8082      	strh	r2, [r0, #4]
 801b740:	8003      	strh	r3, [r0, #0]
 801b742:	80c4      	strh	r4, [r0, #6]
 801b744:	e7e2      	b.n	801b70c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801b748 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801b748:	b570      	push	{r4, r5, r6, lr}
 801b74a:	b086      	sub	sp, #24
 801b74c:	ac02      	add	r4, sp, #8
 801b74e:	e884 0006 	stmia.w	r4, {r1, r2}
 801b752:	461a      	mov	r2, r3
 801b754:	ab0c      	add	r3, sp, #48	; 0x30
 801b756:	9305      	str	r3, [sp, #20]
 801b758:	4b0a      	ldr	r3, [pc, #40]	; (801b784 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801b75a:	685d      	ldr	r5, [r3, #4]
 801b75c:	1069      	asrs	r1, r5, #1
 801b75e:	07ed      	lsls	r5, r5, #31
 801b760:	eb00 0601 	add.w	r6, r0, r1
 801b764:	bf46      	itte	mi
 801b766:	681b      	ldrmi	r3, [r3, #0]
 801b768:	5841      	ldrmi	r1, [r0, r1]
 801b76a:	681d      	ldrpl	r5, [r3, #0]
 801b76c:	4630      	mov	r0, r6
 801b76e:	bf48      	it	mi
 801b770:	58cd      	ldrmi	r5, [r1, r3]
 801b772:	4621      	mov	r1, r4
 801b774:	9b05      	ldr	r3, [sp, #20]
 801b776:	9301      	str	r3, [sp, #4]
 801b778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b77a:	9300      	str	r3, [sp, #0]
 801b77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b77e:	47a8      	blx	r5
 801b780:	b006      	add	sp, #24
 801b782:	bd70      	pop	{r4, r5, r6, pc}
 801b784:	20000030 	.word	0x20000030

0801b788 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b78c:	b09d      	sub	sp, #116	; 0x74
 801b78e:	9114      	str	r1, [sp, #80]	; 0x50
 801b790:	9315      	str	r3, [sp, #84]	; 0x54
 801b792:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b794:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b796:	8809      	ldrh	r1, [r1, #0]
 801b798:	889b      	ldrh	r3, [r3, #4]
 801b79a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801b79c:	440b      	add	r3, r1
 801b79e:	9210      	str	r2, [sp, #64]	; 0x40
 801b7a0:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801b7a4:	b21b      	sxth	r3, r3
 801b7a6:	900f      	str	r0, [sp, #60]	; 0x3c
 801b7a8:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801b7ac:	930e      	str	r3, [sp, #56]	; 0x38
 801b7ae:	6833      	ldr	r3, [r6, #0]
 801b7b0:	7a59      	ldrb	r1, [r3, #9]
 801b7b2:	7a1b      	ldrb	r3, [r3, #8]
 801b7b4:	9113      	str	r1, [sp, #76]	; 0x4c
 801b7b6:	9312      	str	r3, [sp, #72]	; 0x48
 801b7b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b7ba:	f9b3 4000 	ldrsh.w	r4, [r3]
 801b7be:	2a00      	cmp	r2, #0
 801b7c0:	d059      	beq.n	801b876 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801b7c2:	7c33      	ldrb	r3, [r6, #16]
 801b7c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b7c6:	2b04      	cmp	r3, #4
 801b7c8:	bf14      	ite	ne
 801b7ca:	2301      	movne	r3, #1
 801b7cc:	2302      	moveq	r3, #2
 801b7ce:	4413      	add	r3, r2
 801b7d0:	f04f 0800 	mov.w	r8, #0
 801b7d4:	930d      	str	r3, [sp, #52]	; 0x34
 801b7d6:	4645      	mov	r5, r8
 801b7d8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801b7dc:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801b7e0:	4293      	cmp	r3, r2
 801b7e2:	da75      	bge.n	801b8d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b7e8:	6832      	ldr	r2, [r6, #0]
 801b7ea:	931a      	str	r3, [sp, #104]	; 0x68
 801b7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7ee:	428b      	cmp	r3, r1
 801b7f0:	db43      	blt.n	801b87a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801b7f2:	6813      	ldr	r3, [r2, #0]
 801b7f4:	4610      	mov	r0, r2
 801b7f6:	695b      	ldr	r3, [r3, #20]
 801b7f8:	4798      	blx	r3
 801b7fa:	4681      	mov	r9, r0
 801b7fc:	6830      	ldr	r0, [r6, #0]
 801b7fe:	aa1b      	add	r2, sp, #108	; 0x6c
 801b800:	4649      	mov	r1, r9
 801b802:	6803      	ldr	r3, [r0, #0]
 801b804:	689f      	ldr	r7, [r3, #8]
 801b806:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801b80a:	47b8      	blx	r7
 801b80c:	901a      	str	r0, [sp, #104]	; 0x68
 801b80e:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801b812:	45d1      	cmp	r9, sl
 801b814:	d045      	beq.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b816:	f242 070b 	movw	r7, #8203	; 0x200b
 801b81a:	45b9      	cmp	r9, r7
 801b81c:	d041      	beq.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b81e:	f1b9 0f00 	cmp.w	r9, #0
 801b822:	f000 80ee 	beq.w	801ba02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801b826:	f1b9 0f0a 	cmp.w	r9, #10
 801b82a:	d057      	beq.n	801b8dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801b82c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b82e:	b383      	cbz	r3, 801b892 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801b830:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801b834:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b836:	2a00      	cmp	r2, #0
 801b838:	f000 80d2 	beq.w	801b9e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801b83c:	f1bb 0f00 	cmp.w	fp, #0
 801b840:	d100      	bne.n	801b844 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801b842:	4444      	add	r4, r8
 801b844:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801b848:	f1bb 0f01 	cmp.w	fp, #1
 801b84c:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801b850:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b854:	ea48 0803 	orr.w	r8, r8, r3
 801b858:	d128      	bne.n	801b8ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801b85a:	eba4 0408 	sub.w	r4, r4, r8
 801b85e:	2d00      	cmp	r5, #0
 801b860:	d143      	bne.n	801b8ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801b862:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b864:	eb08 0304 	add.w	r3, r8, r4
 801b868:	4413      	add	r3, r2
 801b86a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b86c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b870:	4293      	cmp	r3, r2
 801b872:	da44      	bge.n	801b8fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b874:	e02b      	b.n	801b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801b876:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b878:	e7aa      	b.n	801b7d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801b87a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801b87e:	4659      	mov	r1, fp
 801b880:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801b882:	9301      	str	r3, [sp, #4]
 801b884:	ab1b      	add	r3, sp, #108	; 0x6c
 801b886:	9300      	str	r3, [sp, #0]
 801b888:	ab1a      	add	r3, sp, #104	; 0x68
 801b88a:	f002 facd 	bl	801de28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b88e:	4681      	mov	r9, r0
 801b890:	e7bd      	b.n	801b80e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801b892:	6830      	ldr	r0, [r6, #0]
 801b894:	6803      	ldr	r3, [r0, #0]
 801b896:	691b      	ldr	r3, [r3, #16]
 801b898:	4798      	blx	r3
 801b89a:	4550      	cmp	r0, sl
 801b89c:	d001      	beq.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b89e:	42b8      	cmp	r0, r7
 801b8a0:	d1c8      	bne.n	801b834 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8a4:	464d      	mov	r5, r9
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	930c      	str	r3, [sp, #48]	; 0x30
 801b8aa:	e797      	b.n	801b7dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801b8ac:	2d00      	cmp	r5, #0
 801b8ae:	f000 80aa 	beq.w	801ba06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801b8b2:	f1bb 0f00 	cmp.w	fp, #0
 801b8b6:	d118      	bne.n	801b8ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801b8b8:	6830      	ldr	r0, [r6, #0]
 801b8ba:	4629      	mov	r1, r5
 801b8bc:	6803      	ldr	r3, [r0, #0]
 801b8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8c0:	4798      	blx	r3
 801b8c2:	4404      	add	r4, r0
 801b8c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b8c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8c8:	1ae3      	subs	r3, r4, r3
 801b8ca:	4293      	cmp	r3, r2
 801b8cc:	dd17      	ble.n	801b8fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b8ce:	464d      	mov	r5, r9
 801b8d0:	2d00      	cmp	r5, #0
 801b8d2:	f000 8096 	beq.w	801ba02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801b8d6:	2d0a      	cmp	r5, #10
 801b8d8:	f040 8084 	bne.w	801b9e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801b8dc:	250a      	movs	r5, #10
 801b8de:	fab5 f085 	clz	r0, r5
 801b8e2:	0940      	lsrs	r0, r0, #5
 801b8e4:	b01d      	add	sp, #116	; 0x74
 801b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ea:	6830      	ldr	r0, [r6, #0]
 801b8ec:	4629      	mov	r1, r5
 801b8ee:	6803      	ldr	r3, [r0, #0]
 801b8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8f2:	4798      	blx	r3
 801b8f4:	f1bb 0f01 	cmp.w	fp, #1
 801b8f8:	eba4 0400 	sub.w	r4, r4, r0
 801b8fc:	d0b1      	beq.n	801b862 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801b8fe:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b900:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b902:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b906:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b90a:	7b43      	ldrb	r3, [r0, #13]
 801b90c:	4421      	add	r1, r4
 801b90e:	015b      	lsls	r3, r3, #5
 801b910:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b914:	7983      	ldrb	r3, [r0, #6]
 801b916:	4313      	orrs	r3, r2
 801b918:	440b      	add	r3, r1
 801b91a:	42ab      	cmp	r3, r5
 801b91c:	dbc1      	blt.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b91e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b920:	4299      	cmp	r1, r3
 801b922:	dabe      	bge.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b924:	6830      	ldr	r0, [r6, #0]
 801b926:	42a5      	cmp	r5, r4
 801b928:	6803      	ldr	r3, [r0, #0]
 801b92a:	bfcc      	ite	gt
 801b92c:	1b2d      	subgt	r5, r5, r4
 801b92e:	2500      	movle	r5, #0
 801b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b932:	bfc8      	it	gt
 801b934:	b2ad      	uxthgt	r5, r5
 801b936:	4798      	blx	r3
 801b938:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b93a:	4935      	ldr	r1, [pc, #212]	; (801ba10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801b93c:	7b5a      	ldrb	r2, [r3, #13]
 801b93e:	f893 e008 	ldrb.w	lr, [r3, #8]
 801b942:	f012 0f40 	tst.w	r2, #64	; 0x40
 801b946:	bf18      	it	ne
 801b948:	468c      	movne	ip, r1
 801b94a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b94c:	bf08      	it	eq
 801b94e:	f04f 0c00 	moveq.w	ip, #0
 801b952:	4408      	add	r0, r1
 801b954:	00d1      	lsls	r1, r2, #3
 801b956:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b95a:	ea41 070e 	orr.w	r7, r1, lr
 801b95e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b960:	ea4c 0707 	orr.w	r7, ip, r7
 801b964:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b968:	1bc7      	subs	r7, r0, r7
 801b96a:	b2bf      	uxth	r7, r7
 801b96c:	fa0f fa87 	sxth.w	sl, r7
 801b970:	4551      	cmp	r1, sl
 801b972:	dd33      	ble.n	801b9dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801b974:	0112      	lsls	r2, r2, #4
 801b976:	79d8      	ldrb	r0, [r3, #7]
 801b978:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b97c:	4302      	orrs	r2, r0
 801b97e:	4492      	add	sl, r2
 801b980:	4551      	cmp	r1, sl
 801b982:	dc8e      	bgt.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b984:	1bcf      	subs	r7, r1, r7
 801b986:	468a      	mov	sl, r1
 801b988:	b2bf      	uxth	r7, r7
 801b98a:	9317      	str	r3, [sp, #92]	; 0x5c
 801b98c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b98e:	6830      	ldr	r0, [r6, #0]
 801b990:	681a      	ldr	r2, [r3, #0]
 801b992:	6801      	ldr	r1, [r0, #0]
 801b994:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801b996:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b998:	9311      	str	r3, [sp, #68]	; 0x44
 801b99a:	9216      	str	r2, [sp, #88]	; 0x58
 801b99c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b99e:	4788      	blx	r1
 801b9a0:	79b1      	ldrb	r1, [r6, #6]
 801b9a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b9a4:	910b      	str	r1, [sp, #44]	; 0x2c
 801b9a6:	7bb1      	ldrb	r1, [r6, #14]
 801b9a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b9aa:	910a      	str	r1, [sp, #40]	; 0x28
 801b9ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801b9b0:	9109      	str	r1, [sp, #36]	; 0x24
 801b9b2:	68b1      	ldr	r1, [r6, #8]
 801b9b4:	9305      	str	r3, [sp, #20]
 801b9b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b9b8:	9206      	str	r2, [sp, #24]
 801b9ba:	e9cd a501 	strd	sl, r5, [sp, #4]
 801b9be:	4425      	add	r5, r4
 801b9c0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b9c4:	b22d      	sxth	r5, r5
 801b9c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9c8:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b9cc:	9500      	str	r5, [sp, #0]
 801b9ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 801b9d0:	681a      	ldr	r2, [r3, #0]
 801b9d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b9d4:	685b      	ldr	r3, [r3, #4]
 801b9d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b9d8:	47a8      	blx	r5
 801b9da:	e762      	b.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b9dc:	2700      	movs	r7, #0
 801b9de:	e7d4      	b.n	801b98a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801b9e0:	4690      	mov	r8, r2
 801b9e2:	e75e      	b.n	801b8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b9e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b9e6:	3401      	adds	r4, #1
 801b9e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b9ea:	429c      	cmp	r4, r3
 801b9ec:	f6bf af77 	bge.w	801b8de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801b9f0:	4659      	mov	r1, fp
 801b9f2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801b9f4:	f002 f9a4 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b9f8:	4605      	mov	r5, r0
 801b9fa:	b110      	cbz	r0, 801ba02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801b9fc:	280a      	cmp	r0, #10
 801b9fe:	d1f2      	bne.n	801b9e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801ba00:	e76c      	b.n	801b8dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801ba02:	2500      	movs	r5, #0
 801ba04:	e76b      	b.n	801b8de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801ba06:	f1bb 0f00 	cmp.w	fp, #0
 801ba0a:	f43f af5b 	beq.w	801b8c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801ba0e:	e776      	b.n	801b8fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801ba10:	fffffe00 	.word	0xfffffe00

0801ba14 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801ba14:	b530      	push	{r4, r5, lr}
 801ba16:	8a44      	ldrh	r4, [r0, #18]
 801ba18:	8ac5      	ldrh	r5, [r0, #22]
 801ba1a:	82c3      	strh	r3, [r0, #22]
 801ba1c:	442c      	add	r4, r5
 801ba1e:	1ae4      	subs	r4, r4, r3
 801ba20:	8b03      	ldrh	r3, [r0, #24]
 801ba22:	8244      	strh	r4, [r0, #18]
 801ba24:	8a84      	ldrh	r4, [r0, #20]
 801ba26:	4422      	add	r2, r4
 801ba28:	440c      	add	r4, r1
 801ba2a:	1a59      	subs	r1, r3, r1
 801ba2c:	8342      	strh	r2, [r0, #26]
 801ba2e:	8284      	strh	r4, [r0, #20]
 801ba30:	8301      	strh	r1, [r0, #24]
 801ba32:	bd30      	pop	{r4, r5, pc}

0801ba34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba38:	7a45      	ldrb	r5, [r0, #9]
 801ba3a:	b085      	sub	sp, #20
 801ba3c:	4604      	mov	r4, r0
 801ba3e:	4689      	mov	r9, r1
 801ba40:	1eeb      	subs	r3, r5, #3
 801ba42:	b2db      	uxtb	r3, r3
 801ba44:	b329      	cbz	r1, 801ba92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801ba46:	2b01      	cmp	r3, #1
 801ba48:	d921      	bls.n	801ba8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801ba4a:	1e69      	subs	r1, r5, #1
 801ba4c:	f1d1 0b00 	rsbs	fp, r1, #0
 801ba50:	eb4b 0b01 	adc.w	fp, fp, r1
 801ba54:	1eaa      	subs	r2, r5, #2
 801ba56:	2500      	movs	r5, #0
 801ba58:	4253      	negs	r3, r2
 801ba5a:	9500      	str	r5, [sp, #0]
 801ba5c:	4153      	adcs	r3, r2
 801ba5e:	9301      	str	r3, [sp, #4]
 801ba60:	2600      	movs	r6, #0
 801ba62:	f242 080b 	movw	r8, #8203	; 0x200b
 801ba66:	8266      	strh	r6, [r4, #18]
 801ba68:	82a6      	strh	r6, [r4, #20]
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	68e2      	ldr	r2, [r4, #12]
 801ba6e:	7a21      	ldrb	r1, [r4, #8]
 801ba70:	9303      	str	r3, [sp, #12]
 801ba72:	ab03      	add	r3, sp, #12
 801ba74:	6860      	ldr	r0, [r4, #4]
 801ba76:	8827      	ldrh	r7, [r4, #0]
 801ba78:	f002 f9a2 	bl	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ba7c:	8020      	strh	r0, [r4, #0]
 801ba7e:	b9b0      	cbnz	r0, 801baae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801ba80:	8b22      	ldrh	r2, [r4, #24]
 801ba82:	2300      	movs	r3, #0
 801ba84:	4611      	mov	r1, r2
 801ba86:	4620      	mov	r0, r4
 801ba88:	f7ff ffc4 	bl	801ba14 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ba8c:	e062      	b.n	801bb54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801ba8e:	468b      	mov	fp, r1
 801ba90:	e7e0      	b.n	801ba54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801ba92:	2b01      	cmp	r3, #1
 801ba94:	f105 35ff 	add.w	r5, r5, #4294967295
 801ba98:	9101      	str	r1, [sp, #4]
 801ba9a:	468b      	mov	fp, r1
 801ba9c:	bf8c      	ite	hi
 801ba9e:	2300      	movhi	r3, #0
 801baa0:	2301      	movls	r3, #1
 801baa2:	2d01      	cmp	r5, #1
 801baa4:	9300      	str	r3, [sp, #0]
 801baa6:	bf8c      	ite	hi
 801baa8:	2500      	movhi	r5, #0
 801baaa:	2501      	movls	r5, #1
 801baac:	e7d8      	b.n	801ba60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801baae:	8ae3      	ldrh	r3, [r4, #22]
 801bab0:	280a      	cmp	r0, #10
 801bab2:	f103 0301 	add.w	r3, r3, #1
 801bab6:	82e3      	strh	r3, [r4, #22]
 801bab8:	d0e2      	beq.n	801ba80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801baba:	9a03      	ldr	r2, [sp, #12]
 801babc:	b972      	cbnz	r2, 801badc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801babe:	4540      	cmp	r0, r8
 801bac0:	d1d3      	bne.n	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bac2:	8823      	ldrh	r3, [r4, #0]
 801bac4:	8b21      	ldrh	r1, [r4, #24]
 801bac6:	2b20      	cmp	r3, #32
 801bac8:	d001      	beq.n	801bace <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801baca:	4543      	cmp	r3, r8
 801bacc:	d11d      	bne.n	801bb0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801bace:	2f20      	cmp	r7, #32
 801bad0:	d002      	beq.n	801bad8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801bad2:	4547      	cmp	r7, r8
 801bad4:	bf18      	it	ne
 801bad6:	460e      	movne	r6, r1
 801bad8:	2001      	movs	r0, #1
 801bada:	e017      	b.n	801bb0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801badc:	4540      	cmp	r0, r8
 801bade:	d012      	beq.n	801bb06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801bae0:	8893      	ldrh	r3, [r2, #4]
 801bae2:	4639      	mov	r1, r7
 801bae4:	8023      	strh	r3, [r4, #0]
 801bae6:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801baea:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801baee:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801baf2:	ea4a 0a00 	orr.w	sl, sl, r0
 801baf6:	68e0      	ldr	r0, [r4, #12]
 801baf8:	6803      	ldr	r3, [r0, #0]
 801bafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bafc:	4798      	blx	r3
 801bafe:	eb0a 0200 	add.w	r2, sl, r0
 801bb02:	b292      	uxth	r2, r2
 801bb04:	e7dd      	b.n	801bac2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801bb06:	2200      	movs	r2, #0
 801bb08:	e7db      	b.n	801bac2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801bb0a:	2000      	movs	r0, #0
 801bb0c:	440a      	add	r2, r1
 801bb0e:	8aa3      	ldrh	r3, [r4, #20]
 801bb10:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801bb14:	b292      	uxth	r2, r2
 801bb16:	8322      	strh	r2, [r4, #24]
 801bb18:	4413      	add	r3, r2
 801bb1a:	f1b9 0f00 	cmp.w	r9, #0
 801bb1e:	d022      	beq.n	801bb66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801bb20:	f1bb 0f00 	cmp.w	fp, #0
 801bb24:	d102      	bne.n	801bb2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801bb26:	9901      	ldr	r1, [sp, #4]
 801bb28:	b149      	cbz	r1, 801bb3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801bb2a:	b140      	cbz	r0, 801bb3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801bb2c:	8ba1      	ldrh	r1, [r4, #28]
 801bb2e:	4419      	add	r1, r3
 801bb30:	458c      	cmp	ip, r1
 801bb32:	da12      	bge.n	801bb5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801bb34:	8a61      	ldrh	r1, [r4, #18]
 801bb36:	b181      	cbz	r1, 801bb5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801bb38:	4563      	cmp	r3, ip
 801bb3a:	dd96      	ble.n	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb3c:	e004      	b.n	801bb48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801bb3e:	4563      	cmp	r3, ip
 801bb40:	dd93      	ble.n	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb42:	8a63      	ldrh	r3, [r4, #18]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d090      	beq.n	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb48:	2301      	movs	r3, #1
 801bb4a:	8ba2      	ldrh	r2, [r4, #28]
 801bb4c:	77a3      	strb	r3, [r4, #30]
 801bb4e:	8b63      	ldrh	r3, [r4, #26]
 801bb50:	4413      	add	r3, r2
 801bb52:	8363      	strh	r3, [r4, #26]
 801bb54:	b005      	add	sp, #20
 801bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	4611      	mov	r1, r2
 801bb5e:	4620      	mov	r0, r4
 801bb60:	f7ff ff58 	bl	801ba14 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801bb64:	e781      	b.n	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb66:	4563      	cmp	r3, ip
 801bb68:	dd16      	ble.n	801bb98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801bb6a:	9b00      	ldr	r3, [sp, #0]
 801bb6c:	b113      	cbz	r3, 801bb74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801bb6e:	2301      	movs	r3, #1
 801bb70:	460a      	mov	r2, r1
 801bb72:	e787      	b.n	801ba84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801bb74:	2d00      	cmp	r5, #0
 801bb76:	f43f af78 	beq.w	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb7a:	2800      	cmp	r0, #0
 801bb7c:	f47f af75 	bne.w	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb80:	2f20      	cmp	r7, #32
 801bb82:	d001      	beq.n	801bb88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801bb84:	4547      	cmp	r7, r8
 801bb86:	d102      	bne.n	801bb8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801bb88:	2301      	movs	r3, #1
 801bb8a:	4632      	mov	r2, r6
 801bb8c:	e77b      	b.n	801ba86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801bb8e:	8a63      	ldrh	r3, [r4, #18]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	f43f af6a 	beq.w	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb96:	e7dd      	b.n	801bb54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801bb98:	2800      	cmp	r0, #0
 801bb9a:	f47f af66 	bne.w	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bb9e:	2f20      	cmp	r7, #32
 801bba0:	d002      	beq.n	801bba8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801bba2:	4547      	cmp	r7, r8
 801bba4:	f47f af61 	bne.w	801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bba8:	2301      	movs	r3, #1
 801bbaa:	4632      	mov	r2, r6
 801bbac:	e7d7      	b.n	801bb5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801bbae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801bbae:	b570      	push	{r4, r5, r6, lr}
 801bbb0:	4606      	mov	r6, r0
 801bbb2:	b08a      	sub	sp, #40	; 0x28
 801bbb4:	4615      	mov	r5, r2
 801bbb6:	b191      	cbz	r1, 801bbde <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801bbb8:	2401      	movs	r4, #1
 801bbba:	e9cd 3100 	strd	r3, r1, [sp]
 801bbbe:	4613      	mov	r3, r2
 801bbc0:	4601      	mov	r1, r0
 801bbc2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801bbc6:	a802      	add	r0, sp, #8
 801bbc8:	f7ff fd20 	bl	801b60c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801bbcc:	2100      	movs	r1, #0
 801bbce:	a802      	add	r0, sp, #8
 801bbd0:	f7ff ff30 	bl	801ba34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bbd4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bbd8:	b173      	cbz	r3, 801bbf8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801bbda:	3401      	adds	r4, #1
 801bbdc:	e7f6      	b.n	801bbcc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801bbde:	2401      	movs	r4, #1
 801bbe0:	4611      	mov	r1, r2
 801bbe2:	f002 f8ad 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bbe6:	280a      	cmp	r0, #10
 801bbe8:	4629      	mov	r1, r5
 801bbea:	4630      	mov	r0, r6
 801bbec:	bf08      	it	eq
 801bbee:	3401      	addeq	r4, #1
 801bbf0:	f002 f8a6 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bbf4:	2800      	cmp	r0, #0
 801bbf6:	d1f6      	bne.n	801bbe6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801bbf8:	b2a0      	uxth	r0, r4
 801bbfa:	b00a      	add	sp, #40	; 0x28
 801bbfc:	bd70      	pop	{r4, r5, r6, pc}

0801bbfe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801bbfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc02:	b0db      	sub	sp, #364	; 0x16c
 801bc04:	468a      	mov	sl, r1
 801bc06:	461c      	mov	r4, r3
 801bc08:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801bc0c:	9009      	str	r0, [sp, #36]	; 0x24
 801bc0e:	f1bb 0f00 	cmp.w	fp, #0
 801bc12:	f000 80c7 	beq.w	801bda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	f000 80c3 	beq.w	801bda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801bc1e:	7ba3      	ldrb	r3, [r4, #14]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	f000 80bf 	beq.w	801bda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801bc26:	af0c      	add	r7, sp, #48	; 0x30
 801bc28:	6810      	ldr	r0, [r2, #0]
 801bc2a:	6851      	ldr	r1, [r2, #4]
 801bc2c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801bc30:	463b      	mov	r3, r7
 801bc32:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801bc36:	c303      	stmia	r3!, {r0, r1}
 801bc38:	2100      	movs	r1, #0
 801bc3a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801bc3e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801bc42:	4638      	mov	r0, r7
 801bc44:	910e      	str	r1, [sp, #56]	; 0x38
 801bc46:	a90e      	add	r1, sp, #56	; 0x38
 801bc48:	79a2      	ldrb	r2, [r4, #6]
 801bc4a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bc4e:	f7ff fd49 	bl	801b6e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801bc52:	a90e      	add	r1, sp, #56	; 0x38
 801bc54:	79a2      	ldrb	r2, [r4, #6]
 801bc56:	4608      	mov	r0, r1
 801bc58:	f7ff fd44 	bl	801b6e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801bc5c:	4648      	mov	r0, r9
 801bc5e:	f001 ff2d 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801bc62:	6820      	ldr	r0, [r4, #0]
 801bc64:	6803      	ldr	r3, [r0, #0]
 801bc66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc68:	4798      	blx	r3
 801bc6a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	4659      	mov	r1, fp
 801bc70:	4648      	mov	r0, r9
 801bc72:	f001 ff40 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bc76:	a82e      	add	r0, sp, #184	; 0xb8
 801bc78:	f001 ff20 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801bc7c:	f894 8004 	ldrb.w	r8, [r4, #4]
 801bc80:	f1b8 0f00 	cmp.w	r8, #0
 801bc84:	d009      	beq.n	801bc9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801bc86:	6820      	ldr	r0, [r4, #0]
 801bc88:	6803      	ldr	r3, [r0, #0]
 801bc8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc8c:	4798      	blx	r3
 801bc8e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801bc90:	4603      	mov	r3, r0
 801bc92:	4659      	mov	r1, fp
 801bc94:	a82e      	add	r0, sp, #184	; 0xb8
 801bc96:	f001 ff2e 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bc9a:	6820      	ldr	r0, [r4, #0]
 801bc9c:	6803      	ldr	r3, [r0, #0]
 801bc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bca0:	4798      	blx	r3
 801bca2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bca6:	182e      	adds	r6, r5, r0
 801bca8:	2e00      	cmp	r6, #0
 801bcaa:	dd45      	ble.n	801bd38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801bcac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801bcb0:	4283      	cmp	r3, r0
 801bcb2:	db41      	blt.n	801bd38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801bcb4:	441d      	add	r5, r3
 801bcb6:	fb95 f5f6 	sdiv	r5, r5, r6
 801bcba:	a844      	add	r0, sp, #272	; 0x110
 801bcbc:	f001 fefe 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801bcc0:	7c23      	ldrb	r3, [r4, #16]
 801bcc2:	b14b      	cbz	r3, 801bcd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801bcc4:	6820      	ldr	r0, [r4, #0]
 801bcc6:	6803      	ldr	r3, [r0, #0]
 801bcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcca:	4798      	blx	r3
 801bccc:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801bcce:	4603      	mov	r3, r0
 801bcd0:	4659      	mov	r1, fp
 801bcd2:	a844      	add	r0, sp, #272	; 0x110
 801bcd4:	f001 ff0f 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bcd8:	7c21      	ldrb	r1, [r4, #16]
 801bcda:	a810      	add	r0, sp, #64	; 0x40
 801bcdc:	7963      	ldrb	r3, [r4, #5]
 801bcde:	9101      	str	r1, [sp, #4]
 801bce0:	6821      	ldr	r1, [r4, #0]
 801bce2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801bce6:	9100      	str	r1, [sp, #0]
 801bce8:	a944      	add	r1, sp, #272	; 0x110
 801bcea:	f7ff fc8f 	bl	801b60c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801bcee:	7c23      	ldrb	r3, [r4, #16]
 801bcf0:	bb23      	cbnz	r3, 801bd3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801bcf2:	fa1f fb86 	uxth.w	fp, r6
 801bcf6:	2d00      	cmp	r5, #0
 801bcf8:	dd57      	ble.n	801bdaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801bcfa:	7961      	ldrb	r1, [r4, #5]
 801bcfc:	4648      	mov	r0, r9
 801bcfe:	f002 f81f 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bd02:	4603      	mov	r3, r0
 801bd04:	f1b8 0f00 	cmp.w	r8, #0
 801bd08:	d005      	beq.n	801bd16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801bd0a:	9008      	str	r0, [sp, #32]
 801bd0c:	a82e      	add	r0, sp, #184	; 0xb8
 801bd0e:	7961      	ldrb	r1, [r4, #5]
 801bd10:	f002 f816 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bd14:	9b08      	ldr	r3, [sp, #32]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d044      	beq.n	801bda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801bd1a:	2b0a      	cmp	r3, #10
 801bd1c:	d1eb      	bne.n	801bcf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801bd1e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801bd22:	3d01      	subs	r5, #1
 801bd24:	445b      	add	r3, fp
 801bd26:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bd2a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bd2e:	eba3 030b 	sub.w	r3, r3, fp
 801bd32:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bd36:	e7de      	b.n	801bcf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801bd38:	2500      	movs	r5, #0
 801bd3a:	e7be      	b.n	801bcba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801bd3c:	0073      	lsls	r3, r6, #1
 801bd3e:	9308      	str	r3, [sp, #32]
 801bd40:	2d00      	cmp	r5, #0
 801bd42:	dd32      	ble.n	801bdaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801bd44:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801bd48:	a810      	add	r0, sp, #64	; 0x40
 801bd4a:	9b08      	ldr	r3, [sp, #32]
 801bd4c:	428b      	cmp	r3, r1
 801bd4e:	bfd4      	ite	le
 801bd50:	2100      	movle	r1, #0
 801bd52:	2101      	movgt	r1, #1
 801bd54:	f7ff fe6e 	bl	801ba34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bd58:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801bd5c:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bd60:	fa1f fb83 	uxth.w	fp, r3
 801bd64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd68:	459b      	cmp	fp, r3
 801bd6a:	d00b      	beq.n	801bd84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801bd6c:	7961      	ldrb	r1, [r4, #5]
 801bd6e:	4648      	mov	r0, r9
 801bd70:	f001 ffe6 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bd74:	f1b8 0f00 	cmp.w	r8, #0
 801bd78:	d0f0      	beq.n	801bd5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801bd7a:	7961      	ldrb	r1, [r4, #5]
 801bd7c:	a82e      	add	r0, sp, #184	; 0xb8
 801bd7e:	f001 ffdf 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bd82:	e7eb      	b.n	801bd5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801bd84:	b2b3      	uxth	r3, r6
 801bd86:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bd8a:	3d01      	subs	r5, #1
 801bd8c:	441a      	add	r2, r3
 801bd8e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801bd92:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801bd96:	1ad3      	subs	r3, r2, r3
 801bd98:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bd9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d1cd      	bne.n	801bd40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801bda4:	b05b      	add	sp, #364	; 0x16c
 801bda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdaa:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801bdae:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801bdb2:	7c23      	ldrb	r3, [r4, #16]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d05f      	beq.n	801be78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801bdb8:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801bdbc:	a810      	add	r0, sp, #64	; 0x40
 801bdbe:	458b      	cmp	fp, r1
 801bdc0:	bfd4      	ite	le
 801bdc2:	2100      	movle	r1, #0
 801bdc4:	2101      	movgt	r1, #1
 801bdc6:	f7ff fe35 	bl	801ba34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bdca:	f1b8 0f00 	cmp.w	r8, #0
 801bdce:	d04c      	beq.n	801be6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801bdd0:	7c23      	ldrb	r3, [r4, #16]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d053      	beq.n	801be7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801bdd6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801bdda:	7922      	ldrb	r2, [r4, #4]
 801bddc:	2a01      	cmp	r2, #1
 801bdde:	d13c      	bne.n	801be5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801bde0:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801bde4:	1ac0      	subs	r0, r0, r3
 801bde6:	2302      	movs	r3, #2
 801bde8:	fb90 f0f3 	sdiv	r0, r0, r3
 801bdec:	b200      	sxth	r0, r0
 801bdee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bdf2:	4418      	add	r0, r3
 801bdf4:	7c23      	ldrb	r3, [r4, #16]
 801bdf6:	8028      	strh	r0, [r5, #0]
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	d03a      	beq.n	801be72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801bdfc:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801be00:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801be04:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801be08:	f8cd 9010 	str.w	r9, [sp, #16]
 801be0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be0e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801be12:	2200      	movs	r2, #0
 801be14:	2100      	movs	r1, #0
 801be16:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801be1a:	e9cd 5700 	strd	r5, r7, [sp]
 801be1e:	4652      	mov	r2, sl
 801be20:	f7ff fcb2 	bl	801b788 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801be24:	2800      	cmp	r0, #0
 801be26:	d1bd      	bne.n	801bda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be28:	b2b2      	uxth	r2, r6
 801be2a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801be2e:	4611      	mov	r1, r2
 801be30:	4413      	add	r3, r2
 801be32:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801be36:	b21b      	sxth	r3, r3
 801be38:	1a52      	subs	r2, r2, r1
 801be3a:	7c21      	ldrb	r1, [r4, #16]
 801be3c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801be40:	b212      	sxth	r2, r2
 801be42:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801be46:	b109      	cbz	r1, 801be4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801be48:	42b2      	cmp	r2, r6
 801be4a:	dbab      	blt.n	801bda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be4c:	887a      	ldrh	r2, [r7, #2]
 801be4e:	88f9      	ldrh	r1, [r7, #6]
 801be50:	440a      	add	r2, r1
 801be52:	b212      	sxth	r2, r2
 801be54:	4293      	cmp	r3, r2
 801be56:	ddac      	ble.n	801bdb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801be58:	e7a4      	b.n	801bda4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be5a:	2a02      	cmp	r2, #2
 801be5c:	d107      	bne.n	801be6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801be5e:	7be2      	ldrb	r2, [r4, #15]
 801be60:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801be64:	1a80      	subs	r0, r0, r2
 801be66:	1ac0      	subs	r0, r0, r3
 801be68:	e7c0      	b.n	801bdec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801be6a:	7be0      	ldrb	r0, [r4, #15]
 801be6c:	e7bf      	b.n	801bdee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801be6e:	2000      	movs	r0, #0
 801be70:	e7bd      	b.n	801bdee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801be72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801be76:	e7c3      	b.n	801be00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801be78:	f1b8 0f00 	cmp.w	r8, #0
 801be7c:	d0f5      	beq.n	801be6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801be7e:	2300      	movs	r3, #0
 801be80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801be84:	6821      	ldr	r1, [r4, #0]
 801be86:	a82e      	add	r0, sp, #184	; 0xb8
 801be88:	f7ff fbfa 	bl	801b680 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801be8c:	b203      	sxth	r3, r0
 801be8e:	e7a4      	b.n	801bdda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801be90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801be90:	2b02      	cmp	r3, #2
 801be92:	b510      	push	{r4, lr}
 801be94:	f9b0 4000 	ldrsh.w	r4, [r0]
 801be98:	d00b      	beq.n	801beb2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801be9a:	2b03      	cmp	r3, #3
 801be9c:	d00e      	beq.n	801bebc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801be9e:	2b01      	cmp	r3, #1
 801bea0:	d001      	beq.n	801bea6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801bea2:	1860      	adds	r0, r4, r1
 801bea4:	bd10      	pop	{r4, pc}
 801bea6:	8880      	ldrh	r0, [r0, #4]
 801bea8:	4420      	add	r0, r4
 801beaa:	b200      	sxth	r0, r0
 801beac:	1a80      	subs	r0, r0, r2
 801beae:	3801      	subs	r0, #1
 801beb0:	e7f8      	b.n	801bea4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801beb2:	8880      	ldrh	r0, [r0, #4]
 801beb4:	4420      	add	r0, r4
 801beb6:	b200      	sxth	r0, r0
 801beb8:	1a40      	subs	r0, r0, r1
 801beba:	e7f8      	b.n	801beae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801bebc:	18a0      	adds	r0, r4, r2
 801bebe:	e7f1      	b.n	801bea4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801bec0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801bec0:	2b02      	cmp	r3, #2
 801bec2:	b510      	push	{r4, lr}
 801bec4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801bec8:	d006      	beq.n	801bed8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801beca:	2b03      	cmp	r3, #3
 801becc:	d00a      	beq.n	801bee4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801bece:	2b01      	cmp	r3, #1
 801bed0:	bf14      	ite	ne
 801bed2:	18a0      	addne	r0, r4, r2
 801bed4:	1860      	addeq	r0, r4, r1
 801bed6:	bd10      	pop	{r4, pc}
 801bed8:	88c0      	ldrh	r0, [r0, #6]
 801beda:	4420      	add	r0, r4
 801bedc:	b200      	sxth	r0, r0
 801bede:	1a80      	subs	r0, r0, r2
 801bee0:	3801      	subs	r0, #1
 801bee2:	e7f8      	b.n	801bed6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801bee4:	88c0      	ldrh	r0, [r0, #6]
 801bee6:	4420      	add	r0, r4
 801bee8:	b200      	sxth	r0, r0
 801beea:	1a40      	subs	r0, r0, r1
 801beec:	e7f8      	b.n	801bee0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801bef0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801bef0:	4b01      	ldr	r3, [pc, #4]	; (801bef8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801bef2:	2200      	movs	r2, #0
 801bef4:	601a      	str	r2, [r3, #0]
 801bef6:	4770      	bx	lr
 801bef8:	2000bf14 	.word	0x2000bf14

0801befc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801befc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801befe:	1e05      	subs	r5, r0, #0
 801bf00:	f04f 0601 	mov.w	r6, #1
 801bf04:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801bf08:	bfba      	itte	lt
 801bf0a:	f04f 37ff 	movlt.w	r7, #4294967295
 801bf0e:	426d      	neglt	r5, r5
 801bf10:	2701      	movge	r7, #1
 801bf12:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801bf16:	f1be 0f00 	cmp.w	lr, #0
 801bf1a:	bfbc      	itt	lt
 801bf1c:	f1ce 0e00 	rsblt	lr, lr, #0
 801bf20:	427f      	neglt	r7, r7
 801bf22:	2c00      	cmp	r4, #0
 801bf24:	fa4e f001 	asr.w	r0, lr, r1
 801bf28:	fa06 f101 	lsl.w	r1, r6, r1
 801bf2c:	bfbc      	itt	lt
 801bf2e:	4264      	neglt	r4, r4
 801bf30:	427f      	neglt	r7, r7
 801bf32:	3901      	subs	r1, #1
 801bf34:	ea01 010e 	and.w	r1, r1, lr
 801bf38:	434d      	muls	r5, r1
 801bf3a:	f8dc 1000 	ldr.w	r1, [ip]
 801bf3e:	fb03 1300 	mla	r3, r3, r0, r1
 801bf42:	fb95 f1f4 	sdiv	r1, r5, r4
 801bf46:	fb04 5511 	mls	r5, r4, r1, r5
 801bf4a:	441d      	add	r5, r3
 801bf4c:	fb95 f3f4 	sdiv	r3, r5, r4
 801bf50:	4419      	add	r1, r3
 801bf52:	fb04 5413 	mls	r4, r4, r3, r5
 801bf56:	fb02 1000 	mla	r0, r2, r0, r1
 801bf5a:	f8cc 4000 	str.w	r4, [ip]
 801bf5e:	4378      	muls	r0, r7
 801bf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bf64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf68:	4c24      	ldr	r4, [pc, #144]	; (801bffc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801bf6a:	b086      	sub	sp, #24
 801bf6c:	4605      	mov	r5, r0
 801bf6e:	6807      	ldr	r7, [r0, #0]
 801bf70:	69a3      	ldr	r3, [r4, #24]
 801bf72:	b92b      	cbnz	r3, 801bf80 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801bf74:	6840      	ldr	r0, [r0, #4]
 801bf76:	e9c5 7000 	strd	r7, r0, [r5]
 801bf7a:	b006      	add	sp, #24
 801bf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf80:	f04f 0802 	mov.w	r8, #2
 801bf84:	68a2      	ldr	r2, [r4, #8]
 801bf86:	ae06      	add	r6, sp, #24
 801bf88:	6820      	ldr	r0, [r4, #0]
 801bf8a:	fb93 f1f8 	sdiv	r1, r3, r8
 801bf8e:	440a      	add	r2, r1
 801bf90:	69e1      	ldr	r1, [r4, #28]
 801bf92:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bf96:	9700      	str	r7, [sp, #0]
 801bf98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801bf9a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801bf9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bfa0:	f7ff ffac 	bl	801befc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bfa4:	69a3      	ldr	r3, [r4, #24]
 801bfa6:	4607      	mov	r7, r0
 801bfa8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801bfaa:	9301      	str	r3, [sp, #4]
 801bfac:	686b      	ldr	r3, [r5, #4]
 801bfae:	6a21      	ldr	r1, [r4, #32]
 801bfb0:	9300      	str	r3, [sp, #0]
 801bfb2:	9602      	str	r6, [sp, #8]
 801bfb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bfb6:	6860      	ldr	r0, [r4, #4]
 801bfb8:	f7ff ffa0 	bl	801befc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bfbc:	69a2      	ldr	r2, [r4, #24]
 801bfbe:	6963      	ldr	r3, [r4, #20]
 801bfc0:	4407      	add	r7, r0
 801bfc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bfc4:	68e0      	ldr	r0, [r4, #12]
 801bfc6:	fb92 f8f8 	sdiv	r8, r2, r8
 801bfca:	4443      	add	r3, r8
 801bfcc:	9305      	str	r3, [sp, #20]
 801bfce:	682b      	ldr	r3, [r5, #0]
 801bfd0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801bfd4:	9300      	str	r3, [sp, #0]
 801bfd6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bfd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801bfda:	f7ff ff8f 	bl	801befc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bfde:	69a3      	ldr	r3, [r4, #24]
 801bfe0:	4680      	mov	r8, r0
 801bfe2:	9602      	str	r6, [sp, #8]
 801bfe4:	9301      	str	r3, [sp, #4]
 801bfe6:	686b      	ldr	r3, [r5, #4]
 801bfe8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801bfea:	9300      	str	r3, [sp, #0]
 801bfec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801bfee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801bff0:	6920      	ldr	r0, [r4, #16]
 801bff2:	f7ff ff83 	bl	801befc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bff6:	4440      	add	r0, r8
 801bff8:	e7bd      	b.n	801bf76 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801bffa:	bf00      	nop
 801bffc:	2000bf18 	.word	0x2000bf18

0801c000 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c000:	4b07      	ldr	r3, [pc, #28]	; (801c020 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c002:	b510      	push	{r4, lr}
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	2b01      	cmp	r3, #1
 801c008:	d108      	bne.n	801c01c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c00a:	4b06      	ldr	r3, [pc, #24]	; (801c024 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c00c:	880c      	ldrh	r4, [r1, #0]
 801c00e:	881b      	ldrh	r3, [r3, #0]
 801c010:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c014:	3b01      	subs	r3, #1
 801c016:	1b1b      	subs	r3, r3, r4
 801c018:	8003      	strh	r3, [r0, #0]
 801c01a:	800a      	strh	r2, [r1, #0]
 801c01c:	bd10      	pop	{r4, pc}
 801c01e:	bf00      	nop
 801c020:	2000bee2 	.word	0x2000bee2
 801c024:	2000bee6 	.word	0x2000bee6

0801c028 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c028:	4b0a      	ldr	r3, [pc, #40]	; (801c054 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c02a:	b510      	push	{r4, lr}
 801c02c:	781b      	ldrb	r3, [r3, #0]
 801c02e:	2b01      	cmp	r3, #1
 801c030:	d10e      	bne.n	801c050 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c032:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c036:	8843      	ldrh	r3, [r0, #2]
 801c038:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c03c:	18ca      	adds	r2, r1, r3
 801c03e:	4b06      	ldr	r3, [pc, #24]	; (801c058 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c040:	8044      	strh	r4, [r0, #2]
 801c042:	881b      	ldrh	r3, [r3, #0]
 801c044:	1a9b      	subs	r3, r3, r2
 801c046:	8003      	strh	r3, [r0, #0]
 801c048:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c04c:	8081      	strh	r1, [r0, #4]
 801c04e:	80c3      	strh	r3, [r0, #6]
 801c050:	bd10      	pop	{r4, pc}
 801c052:	bf00      	nop
 801c054:	2000bee2 	.word	0x2000bee2
 801c058:	2000bede 	.word	0x2000bede

0801c05c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c05c:	4b07      	ldr	r3, [pc, #28]	; (801c07c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c05e:	b510      	push	{r4, lr}
 801c060:	781b      	ldrb	r3, [r3, #0]
 801c062:	2b01      	cmp	r3, #1
 801c064:	d108      	bne.n	801c078 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c066:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c06a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c06e:	8003      	strh	r3, [r0, #0]
 801c070:	8893      	ldrh	r3, [r2, #4]
 801c072:	3b01      	subs	r3, #1
 801c074:	1b1b      	subs	r3, r3, r4
 801c076:	800b      	strh	r3, [r1, #0]
 801c078:	bd10      	pop	{r4, pc}
 801c07a:	bf00      	nop
 801c07c:	2000bee2 	.word	0x2000bee2

0801c080 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c080:	4b08      	ldr	r3, [pc, #32]	; (801c0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c082:	b513      	push	{r0, r1, r4, lr}
 801c084:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c088:	2400      	movs	r4, #0
 801c08a:	4b07      	ldr	r3, [pc, #28]	; (801c0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801c08c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c090:	466a      	mov	r2, sp
 801c092:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c096:	9400      	str	r4, [sp, #0]
 801c098:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c09c:	f7ff ffde 	bl	801c05c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c0a0:	b002      	add	sp, #8
 801c0a2:	bd10      	pop	{r4, pc}
 801c0a4:	2000bede 	.word	0x2000bede
 801c0a8:	2000bee0 	.word	0x2000bee0

0801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c0ac:	4b0a      	ldr	r3, [pc, #40]	; (801c0d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c0ae:	460a      	mov	r2, r1
 801c0b0:	b510      	push	{r4, lr}
 801c0b2:	781b      	ldrb	r3, [r3, #0]
 801c0b4:	2b01      	cmp	r3, #1
 801c0b6:	d10d      	bne.n	801c0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c0b8:	8881      	ldrh	r1, [r0, #4]
 801c0ba:	8803      	ldrh	r3, [r0, #0]
 801c0bc:	440b      	add	r3, r1
 801c0be:	4601      	mov	r1, r0
 801c0c0:	3b01      	subs	r3, #1
 801c0c2:	f821 3b02 	strh.w	r3, [r1], #2
 801c0c6:	f7ff ffc9 	bl	801c05c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c0ca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c0ce:	88c2      	ldrh	r2, [r0, #6]
 801c0d0:	80c3      	strh	r3, [r0, #6]
 801c0d2:	8082      	strh	r2, [r0, #4]
 801c0d4:	bd10      	pop	{r4, pc}
 801c0d6:	bf00      	nop
 801c0d8:	2000bee2 	.word	0x2000bee2

0801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c0dc:	4b09      	ldr	r3, [pc, #36]	; (801c104 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c0de:	b507      	push	{r0, r1, r2, lr}
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c0e6:	4b08      	ldr	r3, [pc, #32]	; (801c108 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801c0e8:	9100      	str	r1, [sp, #0]
 801c0ea:	4669      	mov	r1, sp
 801c0ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c0f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c0f8:	f7ff ffd8 	bl	801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c0fc:	b003      	add	sp, #12
 801c0fe:	f85d fb04 	ldr.w	pc, [sp], #4
 801c102:	bf00      	nop
 801c104:	2000bede 	.word	0x2000bede
 801c108:	2000bee0 	.word	0x2000bee0

0801c10c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c10c:	4b03      	ldr	r3, [pc, #12]	; (801c11c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c10e:	6818      	ldr	r0, [r3, #0]
 801c110:	b110      	cbz	r0, 801c118 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c112:	6803      	ldr	r3, [r0, #0]
 801c114:	699b      	ldr	r3, [r3, #24]
 801c116:	4718      	bx	r3
 801c118:	4770      	bx	lr
 801c11a:	bf00      	nop
 801c11c:	2000bf68 	.word	0x2000bf68

0801c120 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c120:	4770      	bx	lr
	...

0801c124 <_ZN8touchgfx11Application4drawEv>:
 801c124:	4b09      	ldr	r3, [pc, #36]	; (801c14c <_ZN8touchgfx11Application4drawEv+0x28>)
 801c126:	b507      	push	{r0, r1, r2, lr}
 801c128:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c12c:	2100      	movs	r1, #0
 801c12e:	4b08      	ldr	r3, [pc, #32]	; (801c150 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c130:	9100      	str	r1, [sp, #0]
 801c132:	4669      	mov	r1, sp
 801c134:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c138:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c13c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c140:	6803      	ldr	r3, [r0, #0]
 801c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c144:	4798      	blx	r3
 801c146:	b003      	add	sp, #12
 801c148:	f85d fb04 	ldr.w	pc, [sp], #4
 801c14c:	2000bede 	.word	0x2000bede
 801c150:	2000bee0 	.word	0x2000bee0

0801c154 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c154:	4b03      	ldr	r3, [pc, #12]	; (801c164 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c156:	6818      	ldr	r0, [r3, #0]
 801c158:	b110      	cbz	r0, 801c160 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c15a:	6803      	ldr	r3, [r0, #0]
 801c15c:	69db      	ldr	r3, [r3, #28]
 801c15e:	4718      	bx	r3
 801c160:	4770      	bx	lr
 801c162:	bf00      	nop
 801c164:	2000bf68 	.word	0x2000bf68

0801c168 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c168:	4b03      	ldr	r3, [pc, #12]	; (801c178 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c16a:	6818      	ldr	r0, [r3, #0]
 801c16c:	b110      	cbz	r0, 801c174 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c16e:	6803      	ldr	r3, [r0, #0]
 801c170:	6a1b      	ldr	r3, [r3, #32]
 801c172:	4718      	bx	r3
 801c174:	4770      	bx	lr
 801c176:	bf00      	nop
 801c178:	2000bf68 	.word	0x2000bf68

0801c17c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c17c:	4b03      	ldr	r3, [pc, #12]	; (801c18c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c17e:	6818      	ldr	r0, [r3, #0]
 801c180:	b110      	cbz	r0, 801c188 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c182:	6803      	ldr	r3, [r0, #0]
 801c184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c186:	4718      	bx	r3
 801c188:	4770      	bx	lr
 801c18a:	bf00      	nop
 801c18c:	2000bf68 	.word	0x2000bf68

0801c190 <_ZN8touchgfx11Application15handleTickEventEv>:
 801c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c194:	4d3a      	ldr	r5, [pc, #232]	; (801c280 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801c196:	4604      	mov	r4, r0
 801c198:	6828      	ldr	r0, [r5, #0]
 801c19a:	b140      	cbz	r0, 801c1ae <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801c19c:	7a03      	ldrb	r3, [r0, #8]
 801c19e:	b933      	cbnz	r3, 801c1ae <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801c1a0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c1a4:	6803      	ldr	r3, [r0, #0]
 801c1a6:	689b      	ldr	r3, [r3, #8]
 801c1a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1ac:	4718      	bx	r3
 801c1ae:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801c1b2:	b97b      	cbnz	r3, 801c1d4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c1b4:	b170      	cbz	r0, 801c1d4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c1b6:	7a03      	ldrb	r3, [r0, #8]
 801c1b8:	b163      	cbz	r3, 801c1d4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c1ba:	4b32      	ldr	r3, [pc, #200]	; (801c284 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801c1bc:	6818      	ldr	r0, [r3, #0]
 801c1be:	b110      	cbz	r0, 801c1c6 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801c1c0:	6803      	ldr	r3, [r0, #0]
 801c1c2:	691b      	ldr	r3, [r3, #16]
 801c1c4:	4798      	blx	r3
 801c1c6:	6828      	ldr	r0, [r5, #0]
 801c1c8:	6803      	ldr	r3, [r0, #0]
 801c1ca:	68db      	ldr	r3, [r3, #12]
 801c1cc:	4798      	blx	r3
 801c1ce:	2301      	movs	r3, #1
 801c1d0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c1d4:	2500      	movs	r5, #0
 801c1d6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801c1da:	42a8      	cmp	r0, r5
 801c1dc:	dd0c      	ble.n	801c1f8 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801c1de:	1963      	adds	r3, r4, r5
 801c1e0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c1e4:	b132      	cbz	r2, 801c1f4 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801c1e6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801c1ea:	4413      	add	r3, r2
 801c1ec:	6858      	ldr	r0, [r3, #4]
 801c1ee:	6803      	ldr	r3, [r0, #0]
 801c1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1f2:	4798      	blx	r3
 801c1f4:	3501      	adds	r5, #1
 801c1f6:	e7ee      	b.n	801c1d6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801c1f8:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801c1fc:	3801      	subs	r0, #1
 801c1fe:	f04f 0c00 	mov.w	ip, #0
 801c202:	3678      	adds	r6, #120	; 0x78
 801c204:	1c43      	adds	r3, r0, #1
 801c206:	d033      	beq.n	801c270 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801c208:	1823      	adds	r3, r4, r0
 801c20a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c20e:	bb6a      	cbnz	r2, 801c26c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801c210:	b281      	uxth	r1, r0
 801c212:	1d25      	adds	r5, r4, #4
 801c214:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801c218:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801c21c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801c220:	4293      	cmp	r3, r2
 801c222:	dc0a      	bgt.n	801c23a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801c224:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801c228:	4422      	add	r2, r4
 801c22a:	18b1      	adds	r1, r6, r2
 801c22c:	b289      	uxth	r1, r1
 801c22e:	428b      	cmp	r3, r1
 801c230:	d919      	bls.n	801c266 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801c232:	7851      	ldrb	r1, [r2, #1]
 801c234:	f802 1b01 	strb.w	r1, [r2], #1
 801c238:	e7f7      	b.n	801c22a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801c23a:	682f      	ldr	r7, [r5, #0]
 801c23c:	f105 0804 	add.w	r8, r5, #4
 801c240:	45b9      	cmp	r9, r7
 801c242:	d10d      	bne.n	801c260 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801c244:	4696      	mov	lr, r2
 801c246:	f1be 0f1e 	cmp.w	lr, #30
 801c24a:	dc06      	bgt.n	801c25a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801c24c:	f10e 0e01 	add.w	lr, lr, #1
 801c250:	686f      	ldr	r7, [r5, #4]
 801c252:	4573      	cmp	r3, lr
 801c254:	f845 7b04 	str.w	r7, [r5], #4
 801c258:	dcf5      	bgt.n	801c246 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801c25a:	3b01      	subs	r3, #1
 801c25c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801c260:	3201      	adds	r2, #1
 801c262:	4645      	mov	r5, r8
 801c264:	e7da      	b.n	801c21c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801c266:	4423      	add	r3, r4
 801c268:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801c26c:	3801      	subs	r0, #1
 801c26e:	e7c9      	b.n	801c204 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801c270:	4b04      	ldr	r3, [pc, #16]	; (801c284 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801c272:	6818      	ldr	r0, [r3, #0]
 801c274:	b110      	cbz	r0, 801c27c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801c276:	6803      	ldr	r3, [r0, #0]
 801c278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c27a:	e795      	b.n	801c1a8 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801c27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c280:	2000bf6c 	.word	0x2000bf6c
 801c284:	2000bf68 	.word	0x2000bf68

0801c288 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c288:	b570      	push	{r4, r5, r6, lr}
 801c28a:	4606      	mov	r6, r0
 801c28c:	460c      	mov	r4, r1
 801c28e:	b929      	cbnz	r1, 801c29c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801c290:	4b0c      	ldr	r3, [pc, #48]	; (801c2c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801c292:	2164      	movs	r1, #100	; 0x64
 801c294:	4a0c      	ldr	r2, [pc, #48]	; (801c2c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801c296:	480d      	ldr	r0, [pc, #52]	; (801c2cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801c298:	f00c f88e 	bl	80283b8 <__assert_func>
 801c29c:	2300      	movs	r3, #0
 801c29e:	4d0c      	ldr	r5, [pc, #48]	; (801c2d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801c2a0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c2a4:	6828      	ldr	r0, [r5, #0]
 801c2a6:	b110      	cbz	r0, 801c2ae <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801c2a8:	6803      	ldr	r3, [r0, #0]
 801c2aa:	695b      	ldr	r3, [r3, #20]
 801c2ac:	4798      	blx	r3
 801c2ae:	602c      	str	r4, [r5, #0]
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	6823      	ldr	r3, [r4, #0]
 801c2b4:	68db      	ldr	r3, [r3, #12]
 801c2b6:	4798      	blx	r3
 801c2b8:	6833      	ldr	r3, [r6, #0]
 801c2ba:	4630      	mov	r0, r6
 801c2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2c2:	4718      	bx	r3
 801c2c4:	0802c428 	.word	0x0802c428
 801c2c8:	0802c4f0 	.word	0x0802c4f0
 801c2cc:	0802c432 	.word	0x0802c432
 801c2d0:	2000bf68 	.word	0x2000bf68

0801c2d4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c2d4:	b510      	push	{r4, lr}
 801c2d6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c2da:	888a      	ldrh	r2, [r1, #4]
 801c2dc:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c2e0:	4422      	add	r2, r4
 801c2e2:	b212      	sxth	r2, r2
 801c2e4:	4293      	cmp	r3, r2
 801c2e6:	da15      	bge.n	801c314 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c2e8:	8882      	ldrh	r2, [r0, #4]
 801c2ea:	4413      	add	r3, r2
 801c2ec:	b21b      	sxth	r3, r3
 801c2ee:	429c      	cmp	r4, r3
 801c2f0:	da10      	bge.n	801c314 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c2f2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c2f6:	88c9      	ldrh	r1, [r1, #6]
 801c2f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c2fc:	4419      	add	r1, r3
 801c2fe:	b209      	sxth	r1, r1
 801c300:	428a      	cmp	r2, r1
 801c302:	da07      	bge.n	801c314 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c304:	88c0      	ldrh	r0, [r0, #6]
 801c306:	4410      	add	r0, r2
 801c308:	b200      	sxth	r0, r0
 801c30a:	4283      	cmp	r3, r0
 801c30c:	bfac      	ite	ge
 801c30e:	2000      	movge	r0, #0
 801c310:	2001      	movlt	r0, #1
 801c312:	bd10      	pop	{r4, pc}
 801c314:	2000      	movs	r0, #0
 801c316:	e7fc      	b.n	801c312 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c318 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c318:	b570      	push	{r4, r5, r6, lr}
 801c31a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c31e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c322:	42ac      	cmp	r4, r5
 801c324:	db18      	blt.n	801c358 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c326:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c32a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c32e:	429a      	cmp	r2, r3
 801c330:	db12      	blt.n	801c358 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c332:	8886      	ldrh	r6, [r0, #4]
 801c334:	4435      	add	r5, r6
 801c336:	888e      	ldrh	r6, [r1, #4]
 801c338:	4434      	add	r4, r6
 801c33a:	b22d      	sxth	r5, r5
 801c33c:	b224      	sxth	r4, r4
 801c33e:	42a5      	cmp	r5, r4
 801c340:	db0a      	blt.n	801c358 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c342:	88c0      	ldrh	r0, [r0, #6]
 801c344:	4418      	add	r0, r3
 801c346:	88cb      	ldrh	r3, [r1, #6]
 801c348:	441a      	add	r2, r3
 801c34a:	b200      	sxth	r0, r0
 801c34c:	b212      	sxth	r2, r2
 801c34e:	4290      	cmp	r0, r2
 801c350:	bfb4      	ite	lt
 801c352:	2000      	movlt	r0, #0
 801c354:	2001      	movge	r0, #1
 801c356:	bd70      	pop	{r4, r5, r6, pc}
 801c358:	2000      	movs	r0, #0
 801c35a:	e7fc      	b.n	801c356 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801c35c <_ZN8touchgfx11Application11getInstanceEv>:
 801c35c:	4b01      	ldr	r3, [pc, #4]	; (801c364 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c35e:	6818      	ldr	r0, [r3, #0]
 801c360:	4770      	bx	lr
 801c362:	bf00      	nop
 801c364:	2000bf78 	.word	0x2000bf78

0801c368 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c368:	2300      	movs	r3, #0
 801c36a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c36e:	30a8      	adds	r0, #168	; 0xa8
 801c370:	f820 3c24 	strh.w	r3, [r0, #-36]
 801c374:	f802 3b01 	strb.w	r3, [r2], #1
 801c378:	4282      	cmp	r2, r0
 801c37a:	d1fb      	bne.n	801c374 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c37c:	4770      	bx	lr

0801c37e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c37e:	4603      	mov	r3, r0
 801c380:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c384:	2200      	movs	r2, #0
 801c386:	801a      	strh	r2, [r3, #0]
 801c388:	3308      	adds	r3, #8
 801c38a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c38e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c392:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c396:	428b      	cmp	r3, r1
 801c398:	d1f5      	bne.n	801c386 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c39a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c39e:	4770      	bx	lr

0801c3a0 <_ZN8touchgfx11ApplicationC1Ev>:
 801c3a0:	b570      	push	{r4, r5, r6, lr}
 801c3a2:	4b16      	ldr	r3, [pc, #88]	; (801c3fc <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801c3a4:	2500      	movs	r5, #0
 801c3a6:	4604      	mov	r4, r0
 801c3a8:	30a8      	adds	r0, #168	; 0xa8
 801c3aa:	f840 3ca8 	str.w	r3, [r0, #-168]
 801c3ae:	f820 5c24 	strh.w	r5, [r0, #-36]
 801c3b2:	f7ff ffe4 	bl	801c37e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c3b6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c3ba:	f7ff ffe0 	bl	801c37e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c3be:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801c3c2:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801c3c6:	490e      	ldr	r1, [pc, #56]	; (801c400 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801c3c8:	480e      	ldr	r0, [pc, #56]	; (801c404 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801c3ca:	f00a fadb 	bl	8026984 <CRC_Lock>
 801c3ce:	4e0e      	ldr	r6, [pc, #56]	; (801c408 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801c3d0:	4b0e      	ldr	r3, [pc, #56]	; (801c40c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c3d2:	b158      	cbz	r0, 801c3ec <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801c3d4:	801d      	strh	r5, [r3, #0]
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	4a0d      	ldr	r2, [pc, #52]	; (801c410 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c3da:	4620      	mov	r0, r4
 801c3dc:	6013      	str	r3, [r2, #0]
 801c3de:	4a0d      	ldr	r2, [pc, #52]	; (801c414 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c3e0:	6033      	str	r3, [r6, #0]
 801c3e2:	6013      	str	r3, [r2, #0]
 801c3e4:	f7ff ffc0 	bl	801c368 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	bd70      	pop	{r4, r5, r6, pc}
 801c3ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c3f0:	2002      	movs	r0, #2
 801c3f2:	801a      	strh	r2, [r3, #0]
 801c3f4:	6030      	str	r0, [r6, #0]
 801c3f6:	f000 ff81 	bl	801d2fc <_ZN8touchgfx6Screen4drawEv>
 801c3fa:	e7ec      	b.n	801c3d6 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801c3fc:	0802c4bc 	.word	0x0802c4bc
 801c400:	b5e8b5cd 	.word	0xb5e8b5cd
 801c404:	f407a5c2 	.word	0xf407a5c2
 801c408:	2000bf68 	.word	0x2000bf68
 801c40c:	20000080 	.word	0x20000080
 801c410:	2000bf78 	.word	0x2000bf78
 801c414:	2000bf6c 	.word	0x2000bf6c

0801c418 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c418:	2300      	movs	r3, #0
 801c41a:	8003      	strh	r3, [r0, #0]
 801c41c:	8043      	strh	r3, [r0, #2]
 801c41e:	8083      	strh	r3, [r0, #4]
 801c420:	80c3      	strh	r3, [r0, #6]
 801c422:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801c426:	4293      	cmp	r3, r2
 801c428:	b530      	push	{r4, r5, lr}
 801c42a:	d912      	bls.n	801c452 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c42c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801c430:	3b01      	subs	r3, #1
 801c432:	6825      	ldr	r5, [r4, #0]
 801c434:	b29b      	uxth	r3, r3
 801c436:	6005      	str	r5, [r0, #0]
 801c438:	4293      	cmp	r3, r2
 801c43a:	6865      	ldr	r5, [r4, #4]
 801c43c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801c440:	6045      	str	r5, [r0, #4]
 801c442:	d906      	bls.n	801c452 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c444:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801c448:	681d      	ldr	r5, [r3, #0]
 801c44a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801c44e:	685d      	ldr	r5, [r3, #4]
 801c450:	6065      	str	r5, [r4, #4]
 801c452:	bd30      	pop	{r4, r5, pc}

0801c454 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c456:	466b      	mov	r3, sp
 801c458:	4604      	mov	r4, r0
 801c45a:	e883 0006 	stmia.w	r3, {r1, r2}
 801c45e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c462:	2a07      	cmp	r2, #7
 801c464:	d906      	bls.n	801c474 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c466:	4b09      	ldr	r3, [pc, #36]	; (801c48c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c468:	f44f 7102 	mov.w	r1, #520	; 0x208
 801c46c:	4a08      	ldr	r2, [pc, #32]	; (801c490 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c46e:	4809      	ldr	r0, [pc, #36]	; (801c494 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c470:	f00b ffa2 	bl	80283b8 <__assert_func>
 801c474:	1c51      	adds	r1, r2, #1
 801c476:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c47a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c47e:	cb03      	ldmia	r3!, {r0, r1}
 801c480:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c484:	6069      	str	r1, [r5, #4]
 801c486:	b003      	add	sp, #12
 801c488:	bd30      	pop	{r4, r5, pc}
 801c48a:	bf00      	nop
 801c48c:	0802c45c 	.word	0x0802c45c
 801c490:	0802c534 	.word	0x0802c534
 801c494:	0802c48b 	.word	0x0802c48b

0801c498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c49c:	b089      	sub	sp, #36	; 0x24
 801c49e:	4606      	mov	r6, r0
 801c4a0:	466c      	mov	r4, sp
 801c4a2:	4620      	mov	r0, r4
 801c4a4:	e884 0006 	stmia.w	r4, {r1, r2}
 801c4a8:	f7fc fd02 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c4ac:	bbb0      	cbnz	r0, 801c51c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c4ae:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801c4b2:	b1fd      	cbz	r5, 801c4f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801c4b4:	3d01      	subs	r5, #1
 801c4b6:	af04      	add	r7, sp, #16
 801c4b8:	f04f 090a 	mov.w	r9, #10
 801c4bc:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801c4c0:	ab02      	add	r3, sp, #8
 801c4c2:	fa1f f885 	uxth.w	r8, r5
 801c4c6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c4ca:	6851      	ldr	r1, [r2, #4]
 801c4cc:	c303      	stmia	r3!, {r0, r1}
 801c4ce:	4621      	mov	r1, r4
 801c4d0:	a802      	add	r0, sp, #8
 801c4d2:	f7ff ff21 	bl	801c318 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c4d6:	bb08      	cbnz	r0, 801c51c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c4d8:	a902      	add	r1, sp, #8
 801c4da:	4620      	mov	r0, r4
 801c4dc:	f7ff ff1c 	bl	801c318 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c4e0:	b1f8      	cbz	r0, 801c522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801c4e2:	4642      	mov	r2, r8
 801c4e4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c4e8:	a806      	add	r0, sp, #24
 801c4ea:	f7ff ff95 	bl	801c418 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c4ee:	f115 35ff 	adds.w	r5, r5, #4294967295
 801c4f2:	d2e3      	bcs.n	801c4bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801c4f4:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801c4f8:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801c4fc:	2b08      	cmp	r3, #8
 801c4fe:	d108      	bne.n	801c512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c500:	4629      	mov	r1, r5
 801c502:	a806      	add	r0, sp, #24
 801c504:	2207      	movs	r2, #7
 801c506:	f7ff ff87 	bl	801c418 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c50a:	a906      	add	r1, sp, #24
 801c50c:	4620      	mov	r0, r4
 801c50e:	f7fd feca 	bl	801a2a6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c512:	4628      	mov	r0, r5
 801c514:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c518:	f7ff ff9c 	bl	801c454 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c51c:	b009      	add	sp, #36	; 0x24
 801c51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c522:	4621      	mov	r1, r4
 801c524:	a802      	add	r0, sp, #8
 801c526:	f7ff fed5 	bl	801c2d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c52a:	b150      	cbz	r0, 801c542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801c52c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c530:	a806      	add	r0, sp, #24
 801c532:	4642      	mov	r2, r8
 801c534:	f7ff ff70 	bl	801c418 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c538:	a902      	add	r1, sp, #8
 801c53a:	4620      	mov	r0, r4
 801c53c:	f7fd feb3 	bl	801a2a6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c540:	e7d5      	b.n	801c4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c542:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c546:	e887 0003 	stmia.w	r7, {r0, r1}
 801c54a:	a902      	add	r1, sp, #8
 801c54c:	4638      	mov	r0, r7
 801c54e:	f7fd feaa 	bl	801a2a6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c552:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c556:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801c55a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c55e:	fb13 f302 	smulbb	r3, r3, r2
 801c562:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c566:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c56a:	fb11 f102 	smulbb	r1, r1, r2
 801c56e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c572:	fb09 f303 	mul.w	r3, r9, r3
 801c576:	fb12 1100 	smlabb	r1, r2, r0, r1
 801c57a:	220b      	movs	r2, #11
 801c57c:	434a      	muls	r2, r1
 801c57e:	4293      	cmp	r3, r2
 801c580:	dab5      	bge.n	801c4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c582:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c586:	a806      	add	r0, sp, #24
 801c588:	4642      	mov	r2, r8
 801c58a:	f7ff ff45 	bl	801c418 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c58e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c592:	e884 0003 	stmia.w	r4, {r0, r1}
 801c596:	e7aa      	b.n	801c4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801c598 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c598:	4b1d      	ldr	r3, [pc, #116]	; (801c610 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c59a:	b530      	push	{r4, r5, lr}
 801c59c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5a0:	b085      	sub	sp, #20
 801c5a2:	4b1c      	ldr	r3, [pc, #112]	; (801c614 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c5a4:	460c      	mov	r4, r1
 801c5a6:	2100      	movs	r1, #0
 801c5a8:	4605      	mov	r5, r0
 801c5aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c5ae:	6820      	ldr	r0, [r4, #0]
 801c5b0:	9100      	str	r1, [sp, #0]
 801c5b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c5b6:	ab02      	add	r3, sp, #8
 801c5b8:	6861      	ldr	r1, [r4, #4]
 801c5ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c5be:	c303      	stmia	r3!, {r0, r1}
 801c5c0:	4669      	mov	r1, sp
 801c5c2:	a802      	add	r0, sp, #8
 801c5c4:	f7fc fc30 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801c5c8:	ab02      	add	r3, sp, #8
 801c5ca:	cb03      	ldmia	r3!, {r0, r1}
 801c5cc:	4b12      	ldr	r3, [pc, #72]	; (801c618 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c5ce:	6020      	str	r0, [r4, #0]
 801c5d0:	6818      	ldr	r0, [r3, #0]
 801c5d2:	6061      	str	r1, [r4, #4]
 801c5d4:	b138      	cbz	r0, 801c5e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c5d6:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801c5da:	b133      	cbz	r3, 801c5ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c5dc:	6821      	ldr	r1, [r4, #0]
 801c5de:	4628      	mov	r0, r5
 801c5e0:	6862      	ldr	r2, [r4, #4]
 801c5e2:	f7ff ff59 	bl	801c498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c5e6:	b005      	add	sp, #20
 801c5e8:	bd30      	pop	{r4, r5, pc}
 801c5ea:	6803      	ldr	r3, [r0, #0]
 801c5ec:	4621      	mov	r1, r4
 801c5ee:	689b      	ldr	r3, [r3, #8]
 801c5f0:	4798      	blx	r3
 801c5f2:	4b0a      	ldr	r3, [pc, #40]	; (801c61c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c5f4:	6818      	ldr	r0, [r3, #0]
 801c5f6:	b118      	cbz	r0, 801c600 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c5f8:	6803      	ldr	r3, [r0, #0]
 801c5fa:	4621      	mov	r1, r4
 801c5fc:	689b      	ldr	r3, [r3, #8]
 801c5fe:	4798      	blx	r3
 801c600:	4b07      	ldr	r3, [pc, #28]	; (801c620 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c602:	4621      	mov	r1, r4
 801c604:	6818      	ldr	r0, [r3, #0]
 801c606:	6803      	ldr	r3, [r0, #0]
 801c608:	695b      	ldr	r3, [r3, #20]
 801c60a:	4798      	blx	r3
 801c60c:	e7eb      	b.n	801c5e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c60e:	bf00      	nop
 801c610:	2000bede 	.word	0x2000bede
 801c614:	2000bee0 	.word	0x2000bee0
 801c618:	2000bf68 	.word	0x2000bf68
 801c61c:	2000bf64 	.word	0x2000bf64
 801c620:	2000beec 	.word	0x2000beec

0801c624 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c628:	4604      	mov	r4, r0
 801c62a:	b09b      	sub	sp, #108	; 0x6c
 801c62c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801c630:	b129      	cbz	r1, 801c63e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c632:	2300      	movs	r3, #0
 801c634:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c638:	b01b      	add	sp, #108	; 0x6c
 801c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c63e:	4baf      	ldr	r3, [pc, #700]	; (801c8fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	b33b      	cbz	r3, 801c694 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c644:	4dae      	ldr	r5, [pc, #696]	; (801c900 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c646:	4628      	mov	r0, r5
 801c648:	f7fc fc32 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c64c:	4606      	mov	r6, r0
 801c64e:	bb08      	cbnz	r0, 801c694 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c650:	4628      	mov	r0, r5
 801c652:	f7ff fce9 	bl	801c028 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c656:	6829      	ldr	r1, [r5, #0]
 801c658:	686a      	ldr	r2, [r5, #4]
 801c65a:	4620      	mov	r0, r4
 801c65c:	f7ff ff1c 	bl	801c498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c660:	802e      	strh	r6, [r5, #0]
 801c662:	806e      	strh	r6, [r5, #2]
 801c664:	80ae      	strh	r6, [r5, #4]
 801c666:	80ee      	strh	r6, [r5, #6]
 801c668:	4fa6      	ldr	r7, [pc, #664]	; (801c904 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c66a:	a809      	add	r0, sp, #36	; 0x24
 801c66c:	f7ff fe87 	bl	801c37e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c670:	883d      	ldrh	r5, [r7, #0]
 801c672:	462e      	mov	r6, r5
 801c674:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c678:	42b3      	cmp	r3, r6
 801c67a:	d910      	bls.n	801c69e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801c67c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c680:	3601      	adds	r6, #1
 801c682:	a809      	add	r0, sp, #36	; 0x24
 801c684:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c688:	b2b6      	uxth	r6, r6
 801c68a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c68e:	f7ff fee1 	bl	801c454 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c692:	e7ef      	b.n	801c674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801c694:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d1e5      	bne.n	801c668 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801c69c:	e7cc      	b.n	801c638 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c69e:	462e      	mov	r6, r5
 801c6a0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c6a4:	42b3      	cmp	r3, r6
 801c6a6:	d90b      	bls.n	801c6c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c6a8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c6ac:	3601      	adds	r6, #1
 801c6ae:	4620      	mov	r0, r4
 801c6b0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c6b4:	b2b6      	uxth	r6, r6
 801c6b6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c6ba:	f7ff feed 	bl	801c498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c6be:	e7ef      	b.n	801c6a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801c6c0:	4e91      	ldr	r6, [pc, #580]	; (801c908 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c6c2:	6833      	ldr	r3, [r6, #0]
 801c6c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c6c8:	2b01      	cmp	r3, #1
 801c6ca:	f040 8092 	bne.w	801c7f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801c6ce:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c6d2:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c6d6:	f04f 0900 	mov.w	r9, #0
 801c6da:	33aa      	adds	r3, #170	; 0xaa
 801c6dc:	42a8      	cmp	r0, r5
 801c6de:	f103 0308 	add.w	r3, r3, #8
 801c6e2:	dd0a      	ble.n	801c6fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801c6e4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c6e8:	3501      	adds	r5, #1
 801c6ea:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c6ee:	440a      	add	r2, r1
 801c6f0:	b212      	sxth	r2, r2
 801c6f2:	4591      	cmp	r9, r2
 801c6f4:	bfb8      	it	lt
 801c6f6:	4691      	movlt	r9, r2
 801c6f8:	e7f0      	b.n	801c6dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801c6fa:	4b84      	ldr	r3, [pc, #528]	; (801c90c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c6fc:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801c914 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801c700:	881d      	ldrh	r5, [r3, #0]
 801c702:	2300      	movs	r3, #0
 801c704:	2d0f      	cmp	r5, #15
 801c706:	bf8c      	ite	hi
 801c708:	08ed      	lsrhi	r5, r5, #3
 801c70a:	2501      	movls	r5, #1
 801c70c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c710:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c714:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c718:	6830      	ldr	r0, [r6, #0]
 801c71a:	440b      	add	r3, r1
 801c71c:	6802      	ldr	r2, [r0, #0]
 801c71e:	b21b      	sxth	r3, r3
 801c720:	4599      	cmp	r9, r3
 801c722:	dd49      	ble.n	801c7b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801c724:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801c728:	4798      	blx	r3
 801c72a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c72e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c732:	4413      	add	r3, r2
 801c734:	b21b      	sxth	r3, r3
 801c736:	195a      	adds	r2, r3, r5
 801c738:	4290      	cmp	r0, r2
 801c73a:	da07      	bge.n	801c74c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c73c:	4581      	cmp	r9, r0
 801c73e:	dd05      	ble.n	801c74c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c740:	4298      	cmp	r0, r3
 801c742:	da33      	bge.n	801c7ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c744:	2b00      	cmp	r3, #0
 801c746:	dd31      	ble.n	801c7ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c748:	4648      	mov	r0, r9
 801c74a:	e004      	b.n	801c756 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801c74c:	4298      	cmp	r0, r3
 801c74e:	dbfb      	blt.n	801c748 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801c750:	4548      	cmp	r0, r9
 801c752:	bfa8      	it	ge
 801c754:	4648      	movge	r0, r9
 801c756:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c75a:	2100      	movs	r1, #0
 801c75c:	1ac0      	subs	r0, r0, r3
 801c75e:	f8b7 a000 	ldrh.w	sl, [r7]
 801c762:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c766:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c76a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c76e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c772:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c776:	4553      	cmp	r3, sl
 801c778:	d9ca      	bls.n	801c710 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801c77a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c77e:	ab07      	add	r3, sp, #28
 801c780:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c784:	6851      	ldr	r1, [r2, #4]
 801c786:	c303      	stmia	r3!, {r0, r1}
 801c788:	a807      	add	r0, sp, #28
 801c78a:	a905      	add	r1, sp, #20
 801c78c:	f7fc fb4c 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801c790:	a807      	add	r0, sp, #28
 801c792:	f7fc fb8d 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c796:	b920      	cbnz	r0, 801c7a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801c798:	6823      	ldr	r3, [r4, #0]
 801c79a:	a907      	add	r1, sp, #28
 801c79c:	4620      	mov	r0, r4
 801c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7a0:	4798      	blx	r3
 801c7a2:	f10a 0a01 	add.w	sl, sl, #1
 801c7a6:	fa1f fa8a 	uxth.w	sl, sl
 801c7aa:	e7e2      	b.n	801c772 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801c7ac:	6830      	ldr	r0, [r6, #0]
 801c7ae:	2101      	movs	r1, #1
 801c7b0:	6803      	ldr	r3, [r0, #0]
 801c7b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c7b4:	4798      	blx	r3
 801c7b6:	e7ab      	b.n	801c710 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801c7b8:	69d3      	ldr	r3, [r2, #28]
 801c7ba:	4798      	blx	r3
 801c7bc:	4b54      	ldr	r3, [pc, #336]	; (801c910 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c7be:	781b      	ldrb	r3, [r3, #0]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	f43f af39 	beq.w	801c638 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	883d      	ldrh	r5, [r7, #0]
 801c7ca:	34ea      	adds	r4, #234	; 0xea
 801c7cc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c7d0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c7d4:	42ab      	cmp	r3, r5
 801c7d6:	f67f af2f 	bls.w	801c638 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c7da:	ab1a      	add	r3, sp, #104	; 0x68
 801c7dc:	4620      	mov	r0, r4
 801c7de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c7e2:	3501      	adds	r5, #1
 801c7e4:	3b44      	subs	r3, #68	; 0x44
 801c7e6:	b2ad      	uxth	r5, r5
 801c7e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c7ec:	f7ff fe32 	bl	801c454 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c7f0:	e7ee      	b.n	801c7d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801c7f2:	2b02      	cmp	r3, #2
 801c7f4:	d16a      	bne.n	801c8cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801c7f6:	f8df a120 	ldr.w	sl, [pc, #288]	; 801c918 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c7fa:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c7fe:	42ab      	cmp	r3, r5
 801c800:	d9dc      	bls.n	801c7bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801c802:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c806:	ab03      	add	r3, sp, #12
 801c808:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c80c:	6851      	ldr	r1, [r2, #4]
 801c80e:	c303      	stmia	r3!, {r0, r1}
 801c810:	f89a 3000 	ldrb.w	r3, [sl]
 801c814:	2b01      	cmp	r3, #1
 801c816:	d102      	bne.n	801c81e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801c818:	a803      	add	r0, sp, #12
 801c81a:	f7ff fc5f 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c81e:	a803      	add	r0, sp, #12
 801c820:	f7fc fb46 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c824:	2800      	cmp	r0, #0
 801c826:	d14a      	bne.n	801c8be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801c828:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c82c:	f10d 0914 	add.w	r9, sp, #20
 801c830:	f10d 081c 	add.w	r8, sp, #28
 801c834:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c838:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c83c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801c840:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c844:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c848:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c84c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801c850:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801c854:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c858:	44dc      	add	ip, fp
 801c85a:	6830      	ldr	r0, [r6, #0]
 801c85c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801c860:	ebac 0c02 	sub.w	ip, ip, r2
 801c864:	f8d0 e000 	ldr.w	lr, [r0]
 801c868:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c86c:	fa1f fc8c 	uxth.w	ip, ip
 801c870:	f8cd c000 	str.w	ip, [sp]
 801c874:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801c878:	47d8      	blx	fp
 801c87a:	f89a 3000 	ldrb.w	r3, [sl]
 801c87e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c882:	2b01      	cmp	r3, #1
 801c884:	d11e      	bne.n	801c8c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801c886:	e899 0003 	ldmia.w	r9, {r0, r1}
 801c88a:	e888 0003 	stmia.w	r8, {r0, r1}
 801c88e:	4640      	mov	r0, r8
 801c890:	f7ff fbca 	bl	801c028 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c894:	6823      	ldr	r3, [r4, #0]
 801c896:	4641      	mov	r1, r8
 801c898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c89a:	4620      	mov	r0, r4
 801c89c:	4798      	blx	r3
 801c89e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c8a2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c8a6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801c8aa:	4413      	add	r3, r2
 801c8ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c8b0:	440a      	add	r2, r1
 801c8b2:	b21b      	sxth	r3, r3
 801c8b4:	b212      	sxth	r2, r2
 801c8b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c8ba:	4293      	cmp	r3, r2
 801c8bc:	dbc6      	blt.n	801c84c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801c8be:	3501      	adds	r5, #1
 801c8c0:	b2ad      	uxth	r5, r5
 801c8c2:	e79a      	b.n	801c7fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801c8c4:	6823      	ldr	r3, [r4, #0]
 801c8c6:	4649      	mov	r1, r9
 801c8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8ca:	e7e6      	b.n	801c89a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801c8cc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c8d0:	42ab      	cmp	r3, r5
 801c8d2:	f67f af73 	bls.w	801c7bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801c8d6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c8da:	ab07      	add	r3, sp, #28
 801c8dc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c8e0:	6851      	ldr	r1, [r2, #4]
 801c8e2:	c303      	stmia	r3!, {r0, r1}
 801c8e4:	a807      	add	r0, sp, #28
 801c8e6:	f7fc fae3 	bl	8018eb0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8ea:	b920      	cbnz	r0, 801c8f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801c8ec:	6823      	ldr	r3, [r4, #0]
 801c8ee:	a907      	add	r1, sp, #28
 801c8f0:	4620      	mov	r0, r4
 801c8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8f4:	4798      	blx	r3
 801c8f6:	3501      	adds	r5, #1
 801c8f8:	b2ad      	uxth	r5, r5
 801c8fa:	e7e7      	b.n	801c8cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801c8fc:	2000bf64 	.word	0x2000bf64
 801c900:	2000bf70 	.word	0x2000bf70
 801c904:	20000080 	.word	0x20000080
 801c908:	2000beec 	.word	0x2000beec
 801c90c:	2000bee0 	.word	0x2000bee0
 801c910:	2000bee8 	.word	0x2000bee8
 801c914:	2000bede 	.word	0x2000bede
 801c918:	2000bee2 	.word	0x2000bee2

0801c91c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c91c:	4b03      	ldr	r3, [pc, #12]	; (801c92c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c91e:	2200      	movs	r2, #0
 801c920:	801a      	strh	r2, [r3, #0]
 801c922:	805a      	strh	r2, [r3, #2]
 801c924:	809a      	strh	r2, [r3, #4]
 801c926:	80da      	strh	r2, [r3, #6]
 801c928:	4770      	bx	lr
 801c92a:	bf00      	nop
 801c92c:	2000bf70 	.word	0x2000bf70

0801c930 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801c930:	2000      	movs	r0, #0
 801c932:	4770      	bx	lr

0801c934 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801c934:	2000      	movs	r0, #0
 801c936:	4770      	bx	lr

0801c938 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c938:	b508      	push	{r3, lr}
 801c93a:	6803      	ldr	r3, [r0, #0]
 801c93c:	68db      	ldr	r3, [r3, #12]
 801c93e:	4798      	blx	r3
 801c940:	b128      	cbz	r0, 801c94e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c942:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801c946:	7a80      	ldrb	r0, [r0, #10]
 801c948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c94c:	4318      	orrs	r0, r3
 801c94e:	bd08      	pop	{r3, pc}

0801c950 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801c950:	b40e      	push	{r1, r2, r3}
 801c952:	b533      	push	{r0, r1, r4, r5, lr}
 801c954:	ab05      	add	r3, sp, #20
 801c956:	f853 2b04 	ldr.w	r2, [r3], #4
 801c95a:	9301      	str	r3, [sp, #4]
 801c95c:	4b0a      	ldr	r3, [pc, #40]	; (801c988 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801c95e:	685c      	ldr	r4, [r3, #4]
 801c960:	1061      	asrs	r1, r4, #1
 801c962:	07e4      	lsls	r4, r4, #31
 801c964:	eb00 0501 	add.w	r5, r0, r1
 801c968:	bf46      	itte	mi
 801c96a:	681b      	ldrmi	r3, [r3, #0]
 801c96c:	5841      	ldrmi	r1, [r0, r1]
 801c96e:	681c      	ldrpl	r4, [r3, #0]
 801c970:	4628      	mov	r0, r5
 801c972:	bf48      	it	mi
 801c974:	58cc      	ldrmi	r4, [r1, r3]
 801c976:	2100      	movs	r1, #0
 801c978:	9b01      	ldr	r3, [sp, #4]
 801c97a:	47a0      	blx	r4
 801c97c:	b002      	add	sp, #8
 801c97e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c982:	b003      	add	sp, #12
 801c984:	4770      	bx	lr
 801c986:	bf00      	nop
 801c988:	20000028 	.word	0x20000028

0801c98c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801c98c:	b40c      	push	{r2, r3}
 801c98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c990:	ab06      	add	r3, sp, #24
 801c992:	f853 2b04 	ldr.w	r2, [r3], #4
 801c996:	9301      	str	r3, [sp, #4]
 801c998:	4b09      	ldr	r3, [pc, #36]	; (801c9c0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801c99a:	685d      	ldr	r5, [r3, #4]
 801c99c:	106c      	asrs	r4, r5, #1
 801c99e:	07ed      	lsls	r5, r5, #31
 801c9a0:	eb00 0604 	add.w	r6, r0, r4
 801c9a4:	bf45      	ittet	mi
 801c9a6:	681b      	ldrmi	r3, [r3, #0]
 801c9a8:	5900      	ldrmi	r0, [r0, r4]
 801c9aa:	681c      	ldrpl	r4, [r3, #0]
 801c9ac:	58c4      	ldrmi	r4, [r0, r3]
 801c9ae:	4630      	mov	r0, r6
 801c9b0:	9b01      	ldr	r3, [sp, #4]
 801c9b2:	47a0      	blx	r4
 801c9b4:	b002      	add	sp, #8
 801c9b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c9ba:	b002      	add	sp, #8
 801c9bc:	4770      	bx	lr
 801c9be:	bf00      	nop
 801c9c0:	20000028 	.word	0x20000028

0801c9c4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c9c4:	b40e      	push	{r1, r2, r3}
 801c9c6:	b530      	push	{r4, r5, lr}
 801c9c8:	b098      	sub	sp, #96	; 0x60
 801c9ca:	4604      	mov	r4, r0
 801c9cc:	ab1b      	add	r3, sp, #108	; 0x6c
 801c9ce:	a802      	add	r0, sp, #8
 801c9d0:	f853 5b04 	ldr.w	r5, [r3], #4
 801c9d4:	9301      	str	r3, [sp, #4]
 801c9d6:	f001 f871 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801c9da:	6823      	ldr	r3, [r4, #0]
 801c9dc:	4620      	mov	r0, r4
 801c9de:	2401      	movs	r4, #1
 801c9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9e2:	4798      	blx	r3
 801c9e4:	9a01      	ldr	r2, [sp, #4]
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	4629      	mov	r1, r5
 801c9ea:	a802      	add	r0, sp, #8
 801c9ec:	f001 f883 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c9f0:	a802      	add	r0, sp, #8
 801c9f2:	f001 f8b9 	bl	801db68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c9f6:	b2a3      	uxth	r3, r4
 801c9f8:	b138      	cbz	r0, 801ca0a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801c9fa:	280a      	cmp	r0, #10
 801c9fc:	a802      	add	r0, sp, #8
 801c9fe:	bf04      	itt	eq
 801ca00:	3301      	addeq	r3, #1
 801ca02:	b21c      	sxtheq	r4, r3
 801ca04:	f001 f8b0 	bl	801db68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ca08:	e7f5      	b.n	801c9f6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801ca0a:	4618      	mov	r0, r3
 801ca0c:	b018      	add	sp, #96	; 0x60
 801ca0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ca12:	b003      	add	sp, #12
 801ca14:	4770      	bx	lr
	...

0801ca18 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ca18:	b40e      	push	{r1, r2, r3}
 801ca1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca1c:	b098      	sub	sp, #96	; 0x60
 801ca1e:	4605      	mov	r5, r0
 801ca20:	4f25      	ldr	r7, [pc, #148]	; (801cab8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801ca22:	ab1d      	add	r3, sp, #116	; 0x74
 801ca24:	a802      	add	r0, sp, #8
 801ca26:	ae18      	add	r6, sp, #96	; 0x60
 801ca28:	f853 4b04 	ldr.w	r4, [r3], #4
 801ca2c:	9300      	str	r3, [sp, #0]
 801ca2e:	f001 f845 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801ca32:	682b      	ldr	r3, [r5, #0]
 801ca34:	4628      	mov	r0, r5
 801ca36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca38:	4798      	blx	r3
 801ca3a:	4621      	mov	r1, r4
 801ca3c:	2400      	movs	r4, #0
 801ca3e:	4603      	mov	r3, r0
 801ca40:	9a00      	ldr	r2, [sp, #0]
 801ca42:	a802      	add	r0, sp, #8
 801ca44:	f001 f857 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ca48:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801ca4c:	462a      	mov	r2, r5
 801ca4e:	4633      	mov	r3, r6
 801ca50:	4621      	mov	r1, r4
 801ca52:	a802      	add	r0, sp, #8
 801ca54:	f001 f9b4 	bl	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ca58:	b340      	cbz	r0, 801caac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801ca5a:	280a      	cmp	r0, #10
 801ca5c:	d01f      	beq.n	801ca9e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ca5e:	9901      	ldr	r1, [sp, #4]
 801ca60:	b1e9      	cbz	r1, 801ca9e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ca62:	7b4b      	ldrb	r3, [r1, #13]
 801ca64:	f891 c008 	ldrb.w	ip, [r1, #8]
 801ca68:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ca6c:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801ca70:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801ca74:	79c9      	ldrb	r1, [r1, #7]
 801ca76:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801ca7a:	bf18      	it	ne
 801ca7c:	4638      	movne	r0, r7
 801ca7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ca82:	bf08      	it	eq
 801ca84:	2000      	moveq	r0, #0
 801ca86:	88aa      	ldrh	r2, [r5, #4]
 801ca88:	ea41 010e 	orr.w	r1, r1, lr
 801ca8c:	ea43 030c 	orr.w	r3, r3, ip
 801ca90:	440a      	add	r2, r1
 801ca92:	4303      	orrs	r3, r0
 801ca94:	1ad3      	subs	r3, r2, r3
 801ca96:	b29b      	uxth	r3, r3
 801ca98:	42a3      	cmp	r3, r4
 801ca9a:	bfc8      	it	gt
 801ca9c:	b21c      	sxthgt	r4, r3
 801ca9e:	4633      	mov	r3, r6
 801caa0:	462a      	mov	r2, r5
 801caa2:	2100      	movs	r1, #0
 801caa4:	a802      	add	r0, sp, #8
 801caa6:	f001 f98b 	bl	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801caaa:	e7d5      	b.n	801ca58 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801caac:	b2a0      	uxth	r0, r4
 801caae:	b018      	add	sp, #96	; 0x60
 801cab0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cab4:	b003      	add	sp, #12
 801cab6:	4770      	bx	lr
 801cab8:	fffffe00 	.word	0xfffffe00

0801cabc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cabc:	b40e      	push	{r1, r2, r3}
 801cabe:	b570      	push	{r4, r5, r6, lr}
 801cac0:	b099      	sub	sp, #100	; 0x64
 801cac2:	4604      	mov	r4, r0
 801cac4:	26ff      	movs	r6, #255	; 0xff
 801cac6:	ab1d      	add	r3, sp, #116	; 0x74
 801cac8:	a802      	add	r0, sp, #8
 801caca:	f853 5b04 	ldr.w	r5, [r3], #4
 801cace:	9300      	str	r3, [sp, #0]
 801cad0:	f000 fff4 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801cad4:	6823      	ldr	r3, [r4, #0]
 801cad6:	4620      	mov	r0, r4
 801cad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cada:	4798      	blx	r3
 801cadc:	4629      	mov	r1, r5
 801cade:	4603      	mov	r3, r0
 801cae0:	9a00      	ldr	r2, [sp, #0]
 801cae2:	a802      	add	r0, sp, #8
 801cae4:	ad18      	add	r5, sp, #96	; 0x60
 801cae6:	f001 f806 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801caea:	2100      	movs	r1, #0
 801caec:	4622      	mov	r2, r4
 801caee:	a802      	add	r0, sp, #8
 801caf0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801caf4:	462b      	mov	r3, r5
 801caf6:	f001 f963 	bl	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cafa:	b190      	cbz	r0, 801cb22 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801cafc:	280a      	cmp	r0, #10
 801cafe:	d009      	beq.n	801cb14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801cb00:	9a01      	ldr	r2, [sp, #4]
 801cb02:	b13a      	cbz	r2, 801cb14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801cb04:	7923      	ldrb	r3, [r4, #4]
 801cb06:	7a12      	ldrb	r2, [r2, #8]
 801cb08:	1a9b      	subs	r3, r3, r2
 801cb0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801cb0e:	429e      	cmp	r6, r3
 801cb10:	bf28      	it	cs
 801cb12:	461e      	movcs	r6, r3
 801cb14:	462b      	mov	r3, r5
 801cb16:	4622      	mov	r2, r4
 801cb18:	2100      	movs	r1, #0
 801cb1a:	a802      	add	r0, sp, #8
 801cb1c:	f001 f950 	bl	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cb20:	e7eb      	b.n	801cafa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801cb22:	4630      	mov	r0, r6
 801cb24:	b019      	add	sp, #100	; 0x64
 801cb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb2a:	b003      	add	sp, #12
 801cb2c:	4770      	bx	lr

0801cb2e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cb2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb32:	b099      	sub	sp, #100	; 0x64
 801cb34:	4606      	mov	r6, r0
 801cb36:	4614      	mov	r4, r2
 801cb38:	4688      	mov	r8, r1
 801cb3a:	a802      	add	r0, sp, #8
 801cb3c:	461d      	mov	r5, r3
 801cb3e:	f04f 0b00 	mov.w	fp, #0
 801cb42:	f000 ffbb 	bl	801dabc <_ZN8touchgfx12TextProviderC1Ev>
 801cb46:	6833      	ldr	r3, [r6, #0]
 801cb48:	4630      	mov	r0, r6
 801cb4a:	465f      	mov	r7, fp
 801cb4c:	46da      	mov	sl, fp
 801cb4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb50:	46d9      	mov	r9, fp
 801cb52:	4798      	blx	r3
 801cb54:	462a      	mov	r2, r5
 801cb56:	4603      	mov	r3, r0
 801cb58:	4621      	mov	r1, r4
 801cb5a:	a802      	add	r0, sp, #8
 801cb5c:	f000 ffcb 	bl	801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cb60:	ab01      	add	r3, sp, #4
 801cb62:	4632      	mov	r2, r6
 801cb64:	4641      	mov	r1, r8
 801cb66:	a802      	add	r0, sp, #8
 801cb68:	f8cd 9004 	str.w	r9, [sp, #4]
 801cb6c:	f001 f928 	bl	801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cb70:	4605      	mov	r5, r0
 801cb72:	b108      	cbz	r0, 801cb78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801cb74:	280a      	cmp	r0, #10
 801cb76:	d10b      	bne.n	801cb90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801cb78:	4557      	cmp	r7, sl
 801cb7a:	bf38      	it	cc
 801cb7c:	4657      	movcc	r7, sl
 801cb7e:	f04f 0a00 	mov.w	sl, #0
 801cb82:	b91d      	cbnz	r5, 801cb8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801cb84:	4638      	mov	r0, r7
 801cb86:	b019      	add	sp, #100	; 0x64
 801cb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb8c:	46ab      	mov	fp, r5
 801cb8e:	e7e7      	b.n	801cb60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801cb90:	9a01      	ldr	r2, [sp, #4]
 801cb92:	2a00      	cmp	r2, #0
 801cb94:	d0fa      	beq.n	801cb8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801cb96:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801cb9a:	4659      	mov	r1, fp
 801cb9c:	6833      	ldr	r3, [r6, #0]
 801cb9e:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801cba2:	7a94      	ldrb	r4, [r2, #10]
 801cba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cba6:	4304      	orrs	r4, r0
 801cba8:	4630      	mov	r0, r6
 801cbaa:	8895      	ldrh	r5, [r2, #4]
 801cbac:	4798      	blx	r3
 801cbae:	4420      	add	r0, r4
 801cbb0:	4450      	add	r0, sl
 801cbb2:	fa1f fa80 	uxth.w	sl, r0
 801cbb6:	e7e4      	b.n	801cb82 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801cbb8 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cbb8:	b513      	push	{r0, r1, r4, lr}
 801cbba:	1d01      	adds	r1, r0, #4
 801cbbc:	4603      	mov	r3, r0
 801cbbe:	466a      	mov	r2, sp
 801cbc0:	c903      	ldmia	r1, {r0, r1}
 801cbc2:	e882 0003 	stmia.w	r2, {r0, r1}
 801cbc6:	2100      	movs	r1, #0
 801cbc8:	4618      	mov	r0, r3
 801cbca:	9100      	str	r1, [sp, #0]
 801cbcc:	6819      	ldr	r1, [r3, #0]
 801cbce:	690c      	ldr	r4, [r1, #16]
 801cbd0:	4611      	mov	r1, r2
 801cbd2:	47a0      	blx	r4
 801cbd4:	b002      	add	sp, #8
 801cbd6:	bd10      	pop	{r4, pc}

0801cbd8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cbd8:	b538      	push	{r3, r4, r5, lr}
 801cbda:	680b      	ldr	r3, [r1, #0]
 801cbdc:	460c      	mov	r4, r1
 801cbde:	4605      	mov	r5, r0
 801cbe0:	68db      	ldr	r3, [r3, #12]
 801cbe2:	4798      	blx	r3
 801cbe4:	6823      	ldr	r3, [r4, #0]
 801cbe6:	4620      	mov	r0, r4
 801cbe8:	4629      	mov	r1, r5
 801cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbec:	4798      	blx	r3
 801cbee:	4628      	mov	r0, r5
 801cbf0:	bd38      	pop	{r3, r4, r5, pc}

0801cbf2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cbf2:	b410      	push	{r4}
 801cbf4:	880a      	ldrh	r2, [r1, #0]
 801cbf6:	8884      	ldrh	r4, [r0, #4]
 801cbf8:	4422      	add	r2, r4
 801cbfa:	800a      	strh	r2, [r1, #0]
 801cbfc:	884a      	ldrh	r2, [r1, #2]
 801cbfe:	88c4      	ldrh	r4, [r0, #6]
 801cc00:	4422      	add	r2, r4
 801cc02:	804a      	strh	r2, [r1, #2]
 801cc04:	6940      	ldr	r0, [r0, #20]
 801cc06:	b120      	cbz	r0, 801cc12 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cc08:	6803      	ldr	r3, [r0, #0]
 801cc0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc10:	4718      	bx	r3
 801cc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc16:	4770      	bx	lr

0801cc18 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc1a:	460b      	mov	r3, r1
 801cc1c:	b085      	sub	sp, #20
 801cc1e:	4604      	mov	r4, r0
 801cc20:	b901      	cbnz	r1, 801cc24 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801cc22:	b1fa      	cbz	r2, 801cc64 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801cc24:	1d27      	adds	r7, r4, #4
 801cc26:	466e      	mov	r6, sp
 801cc28:	ad02      	add	r5, sp, #8
 801cc2a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801cc2e:	e886 0003 	stmia.w	r6, {r0, r1}
 801cc32:	88e1      	ldrh	r1, [r4, #6]
 801cc34:	4620      	mov	r0, r4
 801cc36:	440a      	add	r2, r1
 801cc38:	88a1      	ldrh	r1, [r4, #4]
 801cc3a:	4419      	add	r1, r3
 801cc3c:	6823      	ldr	r3, [r4, #0]
 801cc3e:	b212      	sxth	r2, r2
 801cc40:	b209      	sxth	r1, r1
 801cc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc44:	4798      	blx	r3
 801cc46:	e897 0003 	ldmia.w	r7, {r0, r1}
 801cc4a:	e885 0003 	stmia.w	r5, {r0, r1}
 801cc4e:	6960      	ldr	r0, [r4, #20]
 801cc50:	b150      	cbz	r0, 801cc68 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801cc52:	6803      	ldr	r3, [r0, #0]
 801cc54:	4631      	mov	r1, r6
 801cc56:	691b      	ldr	r3, [r3, #16]
 801cc58:	4798      	blx	r3
 801cc5a:	6960      	ldr	r0, [r4, #20]
 801cc5c:	6803      	ldr	r3, [r0, #0]
 801cc5e:	691b      	ldr	r3, [r3, #16]
 801cc60:	4629      	mov	r1, r5
 801cc62:	4798      	blx	r3
 801cc64:	b005      	add	sp, #20
 801cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc68:	f7ff fb78 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 801cc6c:	6803      	ldr	r3, [r0, #0]
 801cc6e:	4631      	mov	r1, r6
 801cc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc72:	4798      	blx	r3
 801cc74:	f7ff fb72 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 801cc78:	6803      	ldr	r3, [r0, #0]
 801cc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc7c:	e7f0      	b.n	801cc60 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801cc7e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801cc7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc80:	8882      	ldrh	r2, [r0, #4]
 801cc82:	4605      	mov	r5, r0
 801cc84:	880b      	ldrh	r3, [r1, #0]
 801cc86:	460c      	mov	r4, r1
 801cc88:	4413      	add	r3, r2
 801cc8a:	800b      	strh	r3, [r1, #0]
 801cc8c:	884b      	ldrh	r3, [r1, #2]
 801cc8e:	88c2      	ldrh	r2, [r0, #6]
 801cc90:	4413      	add	r3, r2
 801cc92:	4602      	mov	r2, r0
 801cc94:	804b      	strh	r3, [r1, #2]
 801cc96:	466b      	mov	r3, sp
 801cc98:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801cc9c:	6851      	ldr	r1, [r2, #4]
 801cc9e:	c303      	stmia	r3!, {r0, r1}
 801cca0:	4621      	mov	r1, r4
 801cca2:	4668      	mov	r0, sp
 801cca4:	f7fc f8c0 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801cca8:	466b      	mov	r3, sp
 801ccaa:	cb03      	ldmia	r3!, {r0, r1}
 801ccac:	6020      	str	r0, [r4, #0]
 801ccae:	6061      	str	r1, [r4, #4]
 801ccb0:	6968      	ldr	r0, [r5, #20]
 801ccb2:	b128      	cbz	r0, 801ccc0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801ccb4:	6803      	ldr	r3, [r0, #0]
 801ccb6:	691b      	ldr	r3, [r3, #16]
 801ccb8:	4621      	mov	r1, r4
 801ccba:	4798      	blx	r3
 801ccbc:	b003      	add	sp, #12
 801ccbe:	bd30      	pop	{r4, r5, pc}
 801ccc0:	f7ff fb4c 	bl	801c35c <_ZN8touchgfx11Application11getInstanceEv>
 801ccc4:	6803      	ldr	r3, [r0, #0]
 801ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccc8:	e7f6      	b.n	801ccb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801ccca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ccca:	b570      	push	{r4, r5, r6, lr}
 801cccc:	8882      	ldrh	r2, [r0, #4]
 801ccce:	460c      	mov	r4, r1
 801ccd0:	880b      	ldrh	r3, [r1, #0]
 801ccd2:	4605      	mov	r5, r0
 801ccd4:	4413      	add	r3, r2
 801ccd6:	800b      	strh	r3, [r1, #0]
 801ccd8:	884b      	ldrh	r3, [r1, #2]
 801ccda:	88c2      	ldrh	r2, [r0, #6]
 801ccdc:	4413      	add	r3, r2
 801ccde:	804b      	strh	r3, [r1, #2]
 801cce0:	1d01      	adds	r1, r0, #4
 801cce2:	4620      	mov	r0, r4
 801cce4:	f7fc f8a0 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801cce8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ccec:	b153      	cbz	r3, 801cd04 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801ccee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ccf2:	b13b      	cbz	r3, 801cd04 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801ccf4:	6968      	ldr	r0, [r5, #20]
 801ccf6:	b128      	cbz	r0, 801cd04 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801ccf8:	6803      	ldr	r3, [r0, #0]
 801ccfa:	4621      	mov	r1, r4
 801ccfc:	6a1b      	ldr	r3, [r3, #32]
 801ccfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd02:	4718      	bx	r3
 801cd04:	bd70      	pop	{r4, r5, r6, pc}

0801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cd06:	b510      	push	{r4, lr}
 801cd08:	2300      	movs	r3, #0
 801cd0a:	4604      	mov	r4, r0
 801cd0c:	4608      	mov	r0, r1
 801cd0e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cd12:	8023      	strh	r3, [r4, #0]
 801cd14:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cd18:	8063      	strh	r3, [r4, #2]
 801cd1a:	6803      	ldr	r3, [r0, #0]
 801cd1c:	80a1      	strh	r1, [r4, #4]
 801cd1e:	4621      	mov	r1, r4
 801cd20:	80e2      	strh	r2, [r4, #6]
 801cd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd24:	4798      	blx	r3
 801cd26:	4620      	mov	r0, r4
 801cd28:	bd10      	pop	{r4, pc}
	...

0801cd2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801cd2c:	b530      	push	{r4, r5, lr}
 801cd2e:	8083      	strh	r3, [r0, #4]
 801cd30:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cd34:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801cd38:	7183      	strb	r3, [r0, #6]
 801cd3a:	79c3      	ldrb	r3, [r0, #7]
 801cd3c:	6101      	str	r1, [r0, #16]
 801cd3e:	f365 0306 	bfi	r3, r5, #0, #7
 801cd42:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cd46:	8282      	strh	r2, [r0, #20]
 801cd48:	f365 13c7 	bfi	r3, r5, #7, #1
 801cd4c:	71c3      	strb	r3, [r0, #7]
 801cd4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cd52:	7203      	strb	r3, [r0, #8]
 801cd54:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801cd58:	7243      	strb	r3, [r0, #9]
 801cd5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cd5e:	8143      	strh	r3, [r0, #10]
 801cd60:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cd64:	8183      	strh	r3, [r0, #12]
 801cd66:	4b01      	ldr	r3, [pc, #4]	; (801cd6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801cd68:	6003      	str	r3, [r0, #0]
 801cd6a:	bd30      	pop	{r4, r5, pc}
 801cd6c:	0802c65c 	.word	0x0802c65c

0801cd70 <_ZNK8touchgfx9ConstFont4findEt>:
 801cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd72:	8a84      	ldrh	r4, [r0, #20]
 801cd74:	2500      	movs	r5, #0
 801cd76:	260e      	movs	r6, #14
 801cd78:	3c01      	subs	r4, #1
 801cd7a:	42a5      	cmp	r5, r4
 801cd7c:	dc0c      	bgt.n	801cd98 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801cd7e:	192a      	adds	r2, r5, r4
 801cd80:	6903      	ldr	r3, [r0, #16]
 801cd82:	1052      	asrs	r2, r2, #1
 801cd84:	fb06 3302 	mla	r3, r6, r2, r3
 801cd88:	889f      	ldrh	r7, [r3, #4]
 801cd8a:	428f      	cmp	r7, r1
 801cd8c:	d901      	bls.n	801cd92 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801cd8e:	1e54      	subs	r4, r2, #1
 801cd90:	e7f3      	b.n	801cd7a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801cd92:	d202      	bcs.n	801cd9a <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801cd94:	1c55      	adds	r5, r2, #1
 801cd96:	e7f0      	b.n	801cd7a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801cd98:	2300      	movs	r3, #0
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cda0:	4605      	mov	r5, r0
 801cda2:	4617      	mov	r7, r2
 801cda4:	461e      	mov	r6, r3
 801cda6:	f7ff ffe3 	bl	801cd70 <_ZNK8touchgfx9ConstFont4findEt>
 801cdaa:	b9e0      	cbnz	r0, 801cde6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801cdac:	b911      	cbnz	r1, 801cdb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801cdae:	2400      	movs	r4, #0
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cdb4:	290a      	cmp	r1, #10
 801cdb6:	d0fa      	beq.n	801cdae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cdb8:	682b      	ldr	r3, [r5, #0]
 801cdba:	4628      	mov	r0, r5
 801cdbc:	691b      	ldr	r3, [r3, #16]
 801cdbe:	4798      	blx	r3
 801cdc0:	4601      	mov	r1, r0
 801cdc2:	4628      	mov	r0, r5
 801cdc4:	f7ff ffd4 	bl	801cd70 <_ZNK8touchgfx9ConstFont4findEt>
 801cdc8:	4604      	mov	r4, r0
 801cdca:	2800      	cmp	r0, #0
 801cdcc:	d0ef      	beq.n	801cdae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cdce:	682b      	ldr	r3, [r5, #0]
 801cdd0:	4621      	mov	r1, r4
 801cdd2:	4628      	mov	r0, r5
 801cdd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cdd6:	4798      	blx	r3
 801cdd8:	6038      	str	r0, [r7, #0]
 801cdda:	682b      	ldr	r3, [r5, #0]
 801cddc:	4628      	mov	r0, r5
 801cdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cde0:	4798      	blx	r3
 801cde2:	7030      	strb	r0, [r6, #0]
 801cde4:	e7e4      	b.n	801cdb0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801cde6:	4604      	mov	r4, r0
 801cde8:	e7f1      	b.n	801cdce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801cdea <_ZN8touchgfx6memsetEPvhm>:
 801cdea:	4402      	add	r2, r0
 801cdec:	4290      	cmp	r0, r2
 801cdee:	d002      	beq.n	801cdf6 <_ZN8touchgfx6memsetEPvhm+0xc>
 801cdf0:	f800 1b01 	strb.w	r1, [r0], #1
 801cdf4:	e7fa      	b.n	801cdec <_ZN8touchgfx6memsetEPvhm+0x2>
 801cdf6:	4770      	bx	lr

0801cdf8 <_ZN8touchgfx3clzEl>:
 801cdf8:	b1e8      	cbz	r0, 801ce36 <_ZN8touchgfx3clzEl+0x3e>
 801cdfa:	2800      	cmp	r0, #0
 801cdfc:	bfb8      	it	lt
 801cdfe:	4240      	neglt	r0, r0
 801ce00:	0c03      	lsrs	r3, r0, #16
 801ce02:	041b      	lsls	r3, r3, #16
 801ce04:	b9ab      	cbnz	r3, 801ce32 <_ZN8touchgfx3clzEl+0x3a>
 801ce06:	0400      	lsls	r0, r0, #16
 801ce08:	2310      	movs	r3, #16
 801ce0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ce0e:	bf04      	itt	eq
 801ce10:	0200      	lsleq	r0, r0, #8
 801ce12:	3308      	addeq	r3, #8
 801ce14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ce18:	bf04      	itt	eq
 801ce1a:	0100      	lsleq	r0, r0, #4
 801ce1c:	3304      	addeq	r3, #4
 801ce1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ce22:	bf04      	itt	eq
 801ce24:	0080      	lsleq	r0, r0, #2
 801ce26:	3302      	addeq	r3, #2
 801ce28:	2800      	cmp	r0, #0
 801ce2a:	bfa8      	it	ge
 801ce2c:	3301      	addge	r3, #1
 801ce2e:	1e58      	subs	r0, r3, #1
 801ce30:	4770      	bx	lr
 801ce32:	2300      	movs	r3, #0
 801ce34:	e7e9      	b.n	801ce0a <_ZN8touchgfx3clzEl+0x12>
 801ce36:	201f      	movs	r0, #31
 801ce38:	4770      	bx	lr

0801ce3a <_ZN8touchgfx6muldivElllRl>:
 801ce3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce3e:	4604      	mov	r4, r0
 801ce40:	4698      	mov	r8, r3
 801ce42:	2601      	movs	r6, #1
 801ce44:	f7ff ffd8 	bl	801cdf8 <_ZN8touchgfx3clzEl>
 801ce48:	2c00      	cmp	r4, #0
 801ce4a:	fa04 f500 	lsl.w	r5, r4, r0
 801ce4e:	fa06 f600 	lsl.w	r6, r6, r0
 801ce52:	bfba      	itte	lt
 801ce54:	f04f 37ff 	movlt.w	r7, #4294967295
 801ce58:	4264      	neglt	r4, r4
 801ce5a:	2701      	movge	r7, #1
 801ce5c:	2900      	cmp	r1, #0
 801ce5e:	f106 36ff 	add.w	r6, r6, #4294967295
 801ce62:	bfbc      	itt	lt
 801ce64:	4249      	neglt	r1, r1
 801ce66:	427f      	neglt	r7, r7
 801ce68:	2a00      	cmp	r2, #0
 801ce6a:	fa41 fc00 	asr.w	ip, r1, r0
 801ce6e:	ea01 0106 	and.w	r1, r1, r6
 801ce72:	bfb8      	it	lt
 801ce74:	427f      	neglt	r7, r7
 801ce76:	fb04 f401 	mul.w	r4, r4, r1
 801ce7a:	fb95 f3f2 	sdiv	r3, r5, r2
 801ce7e:	fb02 5513 	mls	r5, r2, r3, r5
 801ce82:	bfb8      	it	lt
 801ce84:	4252      	neglt	r2, r2
 801ce86:	fb94 f0f2 	sdiv	r0, r4, r2
 801ce8a:	fb02 4410 	mls	r4, r2, r0, r4
 801ce8e:	fb0c 4405 	mla	r4, ip, r5, r4
 801ce92:	fb94 f1f2 	sdiv	r1, r4, r2
 801ce96:	4408      	add	r0, r1
 801ce98:	fb02 4211 	mls	r2, r2, r1, r4
 801ce9c:	fb0c 0003 	mla	r0, ip, r3, r0
 801cea0:	f8c8 2000 	str.w	r2, [r8]
 801cea4:	4378      	muls	r0, r7
 801cea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ceaa <_ZN8touchgfx10ClickEventD1Ev>:
 801ceaa:	4770      	bx	lr

0801ceac <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801ceac:	2000      	movs	r0, #0
 801ceae:	4770      	bx	lr

0801ceb0 <_ZN8touchgfx9DragEventD1Ev>:
 801ceb0:	4770      	bx	lr

0801ceb2 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801ceb2:	2001      	movs	r0, #1
 801ceb4:	4770      	bx	lr

0801ceb6 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801ceb6:	2002      	movs	r0, #2
 801ceb8:	4770      	bx	lr

0801ceba <_ZN8touchgfx12GestureEventD1Ev>:
 801ceba:	4770      	bx	lr

0801cebc <_ZN8touchgfx10ClickEventD0Ev>:
 801cebc:	b510      	push	{r4, lr}
 801cebe:	4604      	mov	r4, r0
 801cec0:	210c      	movs	r1, #12
 801cec2:	f00b fa4e 	bl	8028362 <_ZdlPvj>
 801cec6:	4620      	mov	r0, r4
 801cec8:	bd10      	pop	{r4, pc}

0801ceca <_ZN8touchgfx9DragEventD0Ev>:
 801ceca:	b510      	push	{r4, lr}
 801cecc:	4604      	mov	r4, r0
 801cece:	2110      	movs	r1, #16
 801ced0:	f00b fa47 	bl	8028362 <_ZdlPvj>
 801ced4:	4620      	mov	r0, r4
 801ced6:	bd10      	pop	{r4, pc}

0801ced8 <_ZN8touchgfx12GestureEventD0Ev>:
 801ced8:	b510      	push	{r4, lr}
 801ceda:	4604      	mov	r4, r0
 801cedc:	210c      	movs	r1, #12
 801cede:	f00b fa40 	bl	8028362 <_ZdlPvj>
 801cee2:	4620      	mov	r0, r4
 801cee4:	bd10      	pop	{r4, pc}
	...

0801cee8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801cee8:	b530      	push	{r4, r5, lr}
 801ceea:	460d      	mov	r5, r1
 801ceec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ceee:	b087      	sub	sp, #28
 801cef0:	4604      	mov	r4, r0
 801cef2:	b301      	cbz	r1, 801cf36 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cef4:	a801      	add	r0, sp, #4
 801cef6:	f7ff ff06 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cefa:	892a      	ldrh	r2, [r5, #8]
 801cefc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cf00:	7928      	ldrb	r0, [r5, #4]
 801cf02:	1ad2      	subs	r2, r2, r3
 801cf04:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801cf06:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cf0a:	441a      	add	r2, r3
 801cf0c:	896b      	ldrh	r3, [r5, #10]
 801cf0e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801cf12:	f88d 0010 	strb.w	r0, [sp, #16]
 801cf16:	1b5b      	subs	r3, r3, r5
 801cf18:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801cf1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cf1c:	442b      	add	r3, r5
 801cf1e:	4d07      	ldr	r5, [pc, #28]	; (801cf3c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801cf20:	f8ad 1012 	strh.w	r1, [sp, #18]
 801cf24:	a903      	add	r1, sp, #12
 801cf26:	9503      	str	r5, [sp, #12]
 801cf28:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cf2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cf30:	6803      	ldr	r3, [r0, #0]
 801cf32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf34:	4798      	blx	r3
 801cf36:	b007      	add	sp, #28
 801cf38:	bd30      	pop	{r4, r5, pc}
 801cf3a:	bf00      	nop
 801cf3c:	0802c6d8 	.word	0x0802c6d8

0801cf40 <_ZNK8touchgfx4Rect9intersectEss>:
 801cf40:	b510      	push	{r4, lr}
 801cf42:	f9b0 3000 	ldrsh.w	r3, [r0]
 801cf46:	428b      	cmp	r3, r1
 801cf48:	dc10      	bgt.n	801cf6c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cf4a:	8884      	ldrh	r4, [r0, #4]
 801cf4c:	4423      	add	r3, r4
 801cf4e:	b21b      	sxth	r3, r3
 801cf50:	4299      	cmp	r1, r3
 801cf52:	da0b      	bge.n	801cf6c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cf54:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801cf58:	4293      	cmp	r3, r2
 801cf5a:	dc07      	bgt.n	801cf6c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cf5c:	88c0      	ldrh	r0, [r0, #6]
 801cf5e:	4418      	add	r0, r3
 801cf60:	b200      	sxth	r0, r0
 801cf62:	4282      	cmp	r2, r0
 801cf64:	bfac      	ite	ge
 801cf66:	2000      	movge	r0, #0
 801cf68:	2001      	movlt	r0, #1
 801cf6a:	bd10      	pop	{r4, pc}
 801cf6c:	2000      	movs	r0, #0
 801cf6e:	e7fc      	b.n	801cf6a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801cf70 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801cf70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf72:	460c      	mov	r4, r1
 801cf74:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cf76:	b089      	sub	sp, #36	; 0x24
 801cf78:	4605      	mov	r5, r0
 801cf7a:	2900      	cmp	r1, #0
 801cf7c:	d054      	beq.n	801d028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801cf7e:	4668      	mov	r0, sp
 801cf80:	f7ff fec1 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf84:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801cf86:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801cf88:	4668      	mov	r0, sp
 801cf8a:	8922      	ldrh	r2, [r4, #8]
 801cf8c:	88e1      	ldrh	r1, [r4, #6]
 801cf8e:	443a      	add	r2, r7
 801cf90:	4431      	add	r1, r6
 801cf92:	b212      	sxth	r2, r2
 801cf94:	b209      	sxth	r1, r1
 801cf96:	f7ff ffd3 	bl	801cf40 <_ZNK8touchgfx4Rect9intersectEss>
 801cf9a:	b1d0      	cbz	r0, 801cfd2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801cf9c:	89a2      	ldrh	r2, [r4, #12]
 801cf9e:	4668      	mov	r0, sp
 801cfa0:	8961      	ldrh	r1, [r4, #10]
 801cfa2:	443a      	add	r2, r7
 801cfa4:	4431      	add	r1, r6
 801cfa6:	b212      	sxth	r2, r2
 801cfa8:	b209      	sxth	r1, r1
 801cfaa:	f7ff ffc9 	bl	801cf40 <_ZNK8touchgfx4Rect9intersectEss>
 801cfae:	4603      	mov	r3, r0
 801cfb0:	b978      	cbnz	r0, 801cfd2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801cfb2:	4a1e      	ldr	r2, [pc, #120]	; (801d02c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801cfb4:	a904      	add	r1, sp, #16
 801cfb6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cfb8:	9204      	str	r2, [sp, #16]
 801cfba:	2202      	movs	r2, #2
 801cfbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cfc0:	f88d 2014 	strb.w	r2, [sp, #20]
 801cfc4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cfc8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cfcc:	6803      	ldr	r3, [r0, #0]
 801cfce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfd0:	4798      	blx	r3
 801cfd2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801cfd4:	a802      	add	r0, sp, #8
 801cfd6:	f7ff fe96 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cfda:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cfde:	88e0      	ldrh	r0, [r4, #6]
 801cfe0:	8961      	ldrh	r1, [r4, #10]
 801cfe2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801cfe6:	1a80      	subs	r0, r0, r2
 801cfe8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801cfec:	1a89      	subs	r1, r1, r2
 801cfee:	8923      	ldrh	r3, [r4, #8]
 801cff0:	4460      	add	r0, ip
 801cff2:	89a2      	ldrh	r2, [r4, #12]
 801cff4:	4461      	add	r1, ip
 801cff6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801cff8:	eba3 030e 	sub.w	r3, r3, lr
 801cffc:	eba2 020e 	sub.w	r2, r2, lr
 801d000:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d004:	7927      	ldrb	r7, [r4, #4]
 801d006:	4433      	add	r3, r6
 801d008:	4432      	add	r2, r6
 801d00a:	4c09      	ldr	r4, [pc, #36]	; (801d030 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801d00c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d00e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d012:	a904      	add	r1, sp, #16
 801d014:	9404      	str	r4, [sp, #16]
 801d016:	f88d 7014 	strb.w	r7, [sp, #20]
 801d01a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d01e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d022:	6803      	ldr	r3, [r0, #0]
 801d024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d026:	4798      	blx	r3
 801d028:	b009      	add	sp, #36	; 0x24
 801d02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d02c:	0802c6b0 	.word	0x0802c6b0
 801d030:	0802c6c4 	.word	0x0802c6c4

0801d034 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d038:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801d03c:	b0a1      	sub	sp, #132	; 0x84
 801d03e:	4604      	mov	r4, r0
 801d040:	460d      	mov	r5, r1
 801d042:	790b      	ldrb	r3, [r1, #4]
 801d044:	f1b9 0f00 	cmp.w	r9, #0
 801d048:	d00f      	beq.n	801d06a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	f040 80a2 	bne.w	801d194 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801d050:	b021      	add	sp, #132	; 0x84
 801d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d056:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d05a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d05e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d062:	1d20      	adds	r0, r4, #4
 801d064:	f7fb fe2e 	bl	8018cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d068:	e094      	b.n	801d194 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d1f0      	bne.n	801d050 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d06e:	4b5f      	ldr	r3, [pc, #380]	; (801d1ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801d076:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801d07a:	f1ba 0f03 	cmp.w	sl, #3
 801d07e:	ddea      	ble.n	801d056 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801d080:	f1ba 0f0c 	cmp.w	sl, #12
 801d084:	f04f 0303 	mov.w	r3, #3
 801d088:	f04f 0600 	mov.w	r6, #0
 801d08c:	4958      	ldr	r1, [pc, #352]	; (801d1f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801d08e:	bfd8      	it	le
 801d090:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801d094:	960a      	str	r6, [sp, #40]	; 0x28
 801d096:	bfd8      	it	le
 801d098:	fb92 f3f3 	sdivle	r3, r2, r3
 801d09c:	9301      	str	r3, [sp, #4]
 801d09e:	4b55      	ldr	r3, [pc, #340]	; (801d1f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801d0a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d0a4:	4b54      	ldr	r3, [pc, #336]	; (801d1f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801d0a6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801d0aa:	2248      	movs	r2, #72	; 0x48
 801d0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d0b0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d0b4:	ab0e      	add	r3, sp, #56	; 0x38
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f00b f9fc 	bl	80284b4 <memcpy>
 801d0bc:	f04f 32ff 	mov.w	r2, #4294967295
 801d0c0:	f8cd a008 	str.w	sl, [sp, #8]
 801d0c4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801d0c8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d0cc:	46b3      	mov	fp, r6
 801d0ce:	fb93 f3f2 	sdiv	r3, r3, r2
 801d0d2:	b29b      	uxth	r3, r3
 801d0d4:	9303      	str	r3, [sp, #12]
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	9a03      	ldr	r2, [sp, #12]
 801d0da:	88ef      	ldrh	r7, [r5, #6]
 801d0dc:	a80a      	add	r0, sp, #40	; 0x28
 801d0de:	9309      	str	r3, [sp, #36]	; 0x24
 801d0e0:	9b07      	ldr	r3, [sp, #28]
 801d0e2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801d0e6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801d0ea:	fb13 f302 	smulbb	r3, r3, r2
 801d0ee:	b29b      	uxth	r3, r3
 801d0f0:	9304      	str	r3, [sp, #16]
 801d0f2:	9b07      	ldr	r3, [sp, #28]
 801d0f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d0f8:	685b      	ldr	r3, [r3, #4]
 801d0fa:	fb13 f302 	smulbb	r3, r3, r2
 801d0fe:	b29b      	uxth	r3, r3
 801d100:	9305      	str	r3, [sp, #20]
 801d102:	9b04      	ldr	r3, [sp, #16]
 801d104:	441f      	add	r7, r3
 801d106:	9b05      	ldr	r3, [sp, #20]
 801d108:	4498      	add	r8, r3
 801d10a:	b23f      	sxth	r7, r7
 801d10c:	fa0f f888 	sxth.w	r8, r8
 801d110:	4639      	mov	r1, r7
 801d112:	4642      	mov	r2, r8
 801d114:	f7ff ff14 	bl	801cf40 <_ZNK8touchgfx4Rect9intersectEss>
 801d118:	b380      	cbz	r0, 801d17c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d11a:	4639      	mov	r1, r7
 801d11c:	ab09      	add	r3, sp, #36	; 0x24
 801d11e:	4642      	mov	r2, r8
 801d120:	1d20      	adds	r0, r4, #4
 801d122:	f7fb fdcf 	bl	8018cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d126:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d128:	b341      	cbz	r1, 801d17c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d12a:	4549      	cmp	r1, r9
 801d12c:	d026      	beq.n	801d17c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d12e:	a80c      	add	r0, sp, #48	; 0x30
 801d130:	f7ff fde9 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d134:	2002      	movs	r0, #2
 801d136:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d13a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d13e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801d142:	fb92 f2f0 	sdiv	r2, r2, r0
 801d146:	440a      	add	r2, r1
 801d148:	1a99      	subs	r1, r3, r2
 801d14a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d14e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d152:	fb93 f3f0 	sdiv	r3, r3, r0
 801d156:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801d15a:	4403      	add	r3, r0
 801d15c:	1ad3      	subs	r3, r2, r3
 801d15e:	9a06      	ldr	r2, [sp, #24]
 801d160:	435b      	muls	r3, r3
 801d162:	fb01 3301 	mla	r3, r1, r1, r3
 801d166:	4293      	cmp	r3, r2
 801d168:	d208      	bcs.n	801d17c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d16a:	9a04      	ldr	r2, [sp, #16]
 801d16c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d170:	86a2      	strh	r2, [r4, #52]	; 0x34
 801d172:	9a05      	ldr	r2, [sp, #20]
 801d174:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801d178:	86e2      	strh	r2, [r4, #54]	; 0x36
 801d17a:	9306      	str	r3, [sp, #24]
 801d17c:	f10b 0b02 	add.w	fp, fp, #2
 801d180:	f1bb 0f08 	cmp.w	fp, #8
 801d184:	dda7      	ble.n	801d0d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801d186:	9b02      	ldr	r3, [sp, #8]
 801d188:	3601      	adds	r6, #1
 801d18a:	4453      	add	r3, sl
 801d18c:	9302      	str	r3, [sp, #8]
 801d18e:	9b01      	ldr	r3, [sp, #4]
 801d190:	42b3      	cmp	r3, r6
 801d192:	d199      	bne.n	801d0c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801d194:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d196:	2900      	cmp	r1, #0
 801d198:	f43f af5a 	beq.w	801d050 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d19c:	a80c      	add	r0, sp, #48	; 0x30
 801d19e:	2600      	movs	r6, #0
 801d1a0:	f7ff fdb1 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1a4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801d1a8:	88ea      	ldrh	r2, [r5, #6]
 801d1aa:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801d1ae:	1ad2      	subs	r2, r2, r3
 801d1b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d1b2:	7929      	ldrb	r1, [r5, #4]
 801d1b4:	441a      	add	r2, r3
 801d1b6:	892b      	ldrh	r3, [r5, #8]
 801d1b8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801d1bc:	a90e      	add	r1, sp, #56	; 0x38
 801d1be:	1a1b      	subs	r3, r3, r0
 801d1c0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801d1c2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801d1c6:	4403      	add	r3, r0
 801d1c8:	480c      	ldr	r0, [pc, #48]	; (801d1fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801d1ca:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801d1ce:	900e      	str	r0, [sp, #56]	; 0x38
 801d1d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d1d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801d1d6:	6803      	ldr	r3, [r0, #0]
 801d1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d1da:	4798      	blx	r3
 801d1dc:	792b      	ldrb	r3, [r5, #4]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	f43f af36 	beq.w	801d050 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d1e4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d1e8:	e732      	b.n	801d050 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d1ea:	bf00      	nop
 801d1ec:	2000beec 	.word	0x2000beec
 801d1f0:	08029b14 	.word	0x08029b14
 801d1f4:	2000bede 	.word	0x2000bede
 801d1f8:	2000bee0 	.word	0x2000bee0
 801d1fc:	0802c6b0 	.word	0x0802c6b0

0801d200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d202:	4604      	mov	r4, r0
 801d204:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d208:	3201      	adds	r2, #1
 801d20a:	d112      	bne.n	801d232 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d20c:	2500      	movs	r5, #0
 801d20e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d212:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d216:	6803      	ldr	r3, [r0, #0]
 801d218:	9500      	str	r5, [sp, #0]
 801d21a:	466d      	mov	r5, sp
 801d21c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d220:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d224:	4629      	mov	r1, r5
 801d226:	6a1b      	ldr	r3, [r3, #32]
 801d228:	4798      	blx	r3
 801d22a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d22e:	e884 0003 	stmia.w	r4, {r0, r1}
 801d232:	4620      	mov	r0, r4
 801d234:	b003      	add	sp, #12
 801d236:	bd30      	pop	{r4, r5, pc}

0801d238 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d238:	b513      	push	{r0, r1, r4, lr}
 801d23a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d23e:	4604      	mov	r4, r0
 801d240:	3301      	adds	r3, #1
 801d242:	d109      	bne.n	801d258 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d244:	4601      	mov	r1, r0
 801d246:	4668      	mov	r0, sp
 801d248:	f7ff fd5d 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d24c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d250:	8423      	strh	r3, [r4, #32]
 801d252:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d256:	8463      	strh	r3, [r4, #34]	; 0x22
 801d258:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d25c:	b002      	add	sp, #8
 801d25e:	bd10      	pop	{r4, pc}

0801d260 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d260:	b513      	push	{r0, r1, r4, lr}
 801d262:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d266:	4604      	mov	r4, r0
 801d268:	3301      	adds	r3, #1
 801d26a:	d109      	bne.n	801d280 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d26c:	4601      	mov	r1, r0
 801d26e:	4668      	mov	r0, sp
 801d270:	f7ff fd49 	bl	801cd06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d274:	f8bd 3000 	ldrh.w	r3, [sp]
 801d278:	8423      	strh	r3, [r4, #32]
 801d27a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d27e:	8463      	strh	r3, [r4, #34]	; 0x22
 801d280:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d284:	b002      	add	sp, #8
 801d286:	bd10      	pop	{r4, pc}

0801d288 <_ZN8touchgfx6ScreenC1Ev>:
 801d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d28a:	4605      	mov	r5, r0
 801d28c:	4b17      	ldr	r3, [pc, #92]	; (801d2ec <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d28e:	2200      	movs	r2, #0
 801d290:	4917      	ldr	r1, [pc, #92]	; (801d2f0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d292:	f845 3b04 	str.w	r3, [r5], #4
 801d296:	2301      	movs	r3, #1
 801d298:	8102      	strh	r2, [r0, #8]
 801d29a:	4604      	mov	r4, r0
 801d29c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801d2a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801d2a4:	4b13      	ldr	r3, [pc, #76]	; (801d2f4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d2a6:	8142      	strh	r2, [r0, #10]
 801d2a8:	f9b3 7000 	ldrsh.w	r7, [r3]
 801d2ac:	4b12      	ldr	r3, [pc, #72]	; (801d2f8 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801d2ae:	8182      	strh	r2, [r0, #12]
 801d2b0:	81c2      	strh	r2, [r0, #14]
 801d2b2:	8202      	strh	r2, [r0, #16]
 801d2b4:	8242      	strh	r2, [r0, #18]
 801d2b6:	8282      	strh	r2, [r0, #20]
 801d2b8:	82c2      	strh	r2, [r0, #22]
 801d2ba:	6202      	str	r2, [r0, #32]
 801d2bc:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d2c0:	6342      	str	r2, [r0, #52]	; 0x34
 801d2c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d2c6:	6041      	str	r1, [r0, #4]
 801d2c8:	4611      	mov	r1, r2
 801d2ca:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d2ce:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801d2d2:	4628      	mov	r0, r5
 801d2d4:	f7f4 fe88 	bl	8011fe8 <_ZN8touchgfx8Drawable5setXYEss>
 801d2d8:	4639      	mov	r1, r7
 801d2da:	4628      	mov	r0, r5
 801d2dc:	f7f4 fea2 	bl	8012024 <_ZN8touchgfx8Drawable8setWidthEs>
 801d2e0:	4628      	mov	r0, r5
 801d2e2:	4631      	mov	r1, r6
 801d2e4:	f7f4 fead 	bl	8012042 <_ZN8touchgfx8Drawable9setHeightEs>
 801d2e8:	4620      	mov	r0, r4
 801d2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d2ec:	0802c6ec 	.word	0x0802c6ec
 801d2f0:	0802b2e8 	.word	0x0802b2e8
 801d2f4:	2000bede 	.word	0x2000bede
 801d2f8:	2000bee0 	.word	0x2000bee0

0801d2fc <_ZN8touchgfx6Screen4drawEv>:
 801d2fc:	4b09      	ldr	r3, [pc, #36]	; (801d324 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d2fe:	b507      	push	{r0, r1, r2, lr}
 801d300:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d304:	2100      	movs	r1, #0
 801d306:	4b08      	ldr	r3, [pc, #32]	; (801d328 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d308:	9100      	str	r1, [sp, #0]
 801d30a:	4669      	mov	r1, sp
 801d30c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d310:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d314:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d318:	6803      	ldr	r3, [r0, #0]
 801d31a:	689b      	ldr	r3, [r3, #8]
 801d31c:	4798      	blx	r3
 801d31e:	b003      	add	sp, #12
 801d320:	f85d fb04 	ldr.w	pc, [sp], #4
 801d324:	2000bede 	.word	0x2000bede
 801d328:	2000bee0 	.word	0x2000bee0

0801d32c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d330:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d334:	b089      	sub	sp, #36	; 0x24
 801d336:	4680      	mov	r8, r0
 801d338:	460c      	mov	r4, r1
 801d33a:	4615      	mov	r5, r2
 801d33c:	b16b      	cbz	r3, 801d35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d33e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d342:	b153      	cbz	r3, 801d35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d344:	4628      	mov	r0, r5
 801d346:	f7ff ff5b 	bl	801d200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d34a:	4621      	mov	r1, r4
 801d34c:	f7fe ffc2 	bl	801c2d4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d350:	69eb      	ldr	r3, [r5, #28]
 801d352:	b928      	cbnz	r0, 801d360 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801d354:	461d      	mov	r5, r3
 801d356:	2b00      	cmp	r3, #0
 801d358:	d1f4      	bne.n	801d344 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801d35a:	b009      	add	sp, #36	; 0x24
 801d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d360:	ae04      	add	r6, sp, #16
 801d362:	2b00      	cmp	r3, #0
 801d364:	d051      	beq.n	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d366:	682b      	ldr	r3, [r5, #0]
 801d368:	4629      	mov	r1, r5
 801d36a:	a802      	add	r0, sp, #8
 801d36c:	68db      	ldr	r3, [r3, #12]
 801d36e:	4798      	blx	r3
 801d370:	4628      	mov	r0, r5
 801d372:	f7ff ff61 	bl	801d238 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d376:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d37a:	4407      	add	r7, r0
 801d37c:	4628      	mov	r0, r5
 801d37e:	f7ff ff6f 	bl	801d260 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d382:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d386:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d38a:	b23f      	sxth	r7, r7
 801d38c:	4418      	add	r0, r3
 801d38e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d392:	4621      	mov	r1, r4
 801d394:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d398:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d39c:	4630      	mov	r0, r6
 801d39e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d3a2:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d3a6:	f7fb fd3f 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801d3aa:	4628      	mov	r0, r5
 801d3ac:	f7ff ff28 	bl	801d200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d3b0:	ab06      	add	r3, sp, #24
 801d3b2:	4602      	mov	r2, r0
 801d3b4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d3b8:	e883 0003 	stmia.w	r3, {r0, r1}
 801d3bc:	4611      	mov	r1, r2
 801d3be:	4618      	mov	r0, r3
 801d3c0:	f7fb fd32 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801d3c4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d3c8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d3cc:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d3d0:	4299      	cmp	r1, r3
 801d3d2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d3d6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d3da:	d10b      	bne.n	801d3f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d3dc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d3e0:	4552      	cmp	r2, sl
 801d3e2:	d107      	bne.n	801d3f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d3e4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d3e8:	455a      	cmp	r2, fp
 801d3ea:	d103      	bne.n	801d3f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d3ec:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d3f0:	454a      	cmp	r2, r9
 801d3f2:	d00a      	beq.n	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d3f4:	f1bb 0f00 	cmp.w	fp, #0
 801d3f8:	d002      	beq.n	801d400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801d3fa:	f1b9 0f00 	cmp.w	r9, #0
 801d3fe:	d12e      	bne.n	801d45e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801d400:	69ea      	ldr	r2, [r5, #28]
 801d402:	4621      	mov	r1, r4
 801d404:	4640      	mov	r0, r8
 801d406:	f7ff ff91 	bl	801d32c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d40a:	4628      	mov	r0, r5
 801d40c:	f7ff fef8 	bl	801d200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d410:	6861      	ldr	r1, [r4, #4]
 801d412:	4602      	mov	r2, r0
 801d414:	4633      	mov	r3, r6
 801d416:	6820      	ldr	r0, [r4, #0]
 801d418:	c303      	stmia	r3!, {r0, r1}
 801d41a:	4611      	mov	r1, r2
 801d41c:	4630      	mov	r0, r6
 801d41e:	f7fb fd03 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801d422:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d426:	2b00      	cmp	r3, #0
 801d428:	d097      	beq.n	801d35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d42a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d093      	beq.n	801d35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d432:	4628      	mov	r0, r5
 801d434:	f7ff ff00 	bl	801d238 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d438:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d43c:	1a18      	subs	r0, r3, r0
 801d43e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d442:	4628      	mov	r0, r5
 801d444:	f7ff ff0c 	bl	801d260 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d448:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d44c:	4631      	mov	r1, r6
 801d44e:	1a18      	subs	r0, r3, r0
 801d450:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d454:	4628      	mov	r0, r5
 801d456:	682b      	ldr	r3, [r5, #0]
 801d458:	689b      	ldr	r3, [r3, #8]
 801d45a:	4798      	blx	r3
 801d45c:	e77d      	b.n	801d35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d45e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d462:	fa1f f08a 	uxth.w	r0, sl
 801d466:	4552      	cmp	r2, sl
 801d468:	9000      	str	r0, [sp, #0]
 801d46a:	da12      	bge.n	801d492 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801d46c:	9301      	str	r3, [sp, #4]
 801d46e:	9b00      	ldr	r3, [sp, #0]
 801d470:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d474:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d478:	1a9a      	subs	r2, r3, r2
 801d47a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d47e:	4631      	mov	r1, r6
 801d480:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d484:	4640      	mov	r0, r8
 801d486:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d48a:	69ea      	ldr	r2, [r5, #28]
 801d48c:	f7ff ff4e 	bl	801d32c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d490:	9b01      	ldr	r3, [sp, #4]
 801d492:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d496:	b29f      	uxth	r7, r3
 801d498:	429a      	cmp	r2, r3
 801d49a:	da0d      	bge.n	801d4b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801d49c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d4a0:	1aba      	subs	r2, r7, r2
 801d4a2:	f8ad a012 	strh.w	sl, [sp, #18]
 801d4a6:	4631      	mov	r1, r6
 801d4a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d4ac:	4640      	mov	r0, r8
 801d4ae:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d4b2:	69ea      	ldr	r2, [r5, #28]
 801d4b4:	f7ff ff3a 	bl	801d32c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d4b8:	8822      	ldrh	r2, [r4, #0]
 801d4ba:	445f      	add	r7, fp
 801d4bc:	88a3      	ldrh	r3, [r4, #4]
 801d4be:	b2bf      	uxth	r7, r7
 801d4c0:	4413      	add	r3, r2
 801d4c2:	b23a      	sxth	r2, r7
 801d4c4:	b29b      	uxth	r3, r3
 801d4c6:	b219      	sxth	r1, r3
 801d4c8:	4291      	cmp	r1, r2
 801d4ca:	dd0d      	ble.n	801d4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801d4cc:	1bdb      	subs	r3, r3, r7
 801d4ce:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d4d2:	f8ad a012 	strh.w	sl, [sp, #18]
 801d4d6:	4631      	mov	r1, r6
 801d4d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d4dc:	4640      	mov	r0, r8
 801d4de:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d4e2:	69ea      	ldr	r2, [r5, #28]
 801d4e4:	f7ff ff22 	bl	801d32c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d4e8:	88e2      	ldrh	r2, [r4, #6]
 801d4ea:	8863      	ldrh	r3, [r4, #2]
 801d4ec:	4413      	add	r3, r2
 801d4ee:	9a00      	ldr	r2, [sp, #0]
 801d4f0:	444a      	add	r2, r9
 801d4f2:	b29b      	uxth	r3, r3
 801d4f4:	fa1f f982 	uxth.w	r9, r2
 801d4f8:	b219      	sxth	r1, r3
 801d4fa:	fa0f f289 	sxth.w	r2, r9
 801d4fe:	428a      	cmp	r2, r1
 801d500:	da83      	bge.n	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d502:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d506:	eba3 0309 	sub.w	r3, r3, r9
 801d50a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d50e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d512:	4631      	mov	r1, r6
 801d514:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d518:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d51c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d520:	69ea      	ldr	r2, [r5, #28]
 801d522:	e76f      	b.n	801d404 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801d524 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d526:	2300      	movs	r3, #0
 801d528:	aa02      	add	r2, sp, #8
 801d52a:	4604      	mov	r4, r0
 801d52c:	3004      	adds	r0, #4
 801d52e:	f842 3d04 	str.w	r3, [r2, #-4]!
 801d532:	460d      	mov	r5, r1
 801d534:	f7fb fd4f 	bl	8018fd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d538:	9a01      	ldr	r2, [sp, #4]
 801d53a:	b11a      	cbz	r2, 801d544 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801d53c:	4629      	mov	r1, r5
 801d53e:	4620      	mov	r0, r4
 801d540:	f7ff fef4 	bl	801d32c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d544:	b003      	add	sp, #12
 801d546:	bd30      	pop	{r4, r5, pc}

0801d548 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d54a:	4602      	mov	r2, r0
 801d54c:	4604      	mov	r4, r0
 801d54e:	460d      	mov	r5, r1
 801d550:	466b      	mov	r3, sp
 801d552:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d556:	6851      	ldr	r1, [r2, #4]
 801d558:	c303      	stmia	r3!, {r0, r1}
 801d55a:	4629      	mov	r1, r5
 801d55c:	4668      	mov	r0, sp
 801d55e:	f7fb fc63 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 801d562:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d566:	4669      	mov	r1, sp
 801d568:	b123      	cbz	r3, 801d574 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801d56a:	4620      	mov	r0, r4
 801d56c:	f7ff ffda 	bl	801d524 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d570:	b003      	add	sp, #12
 801d572:	bd30      	pop	{r4, r5, pc}
 801d574:	1d20      	adds	r0, r4, #4
 801d576:	f7fb fcf5 	bl	8018f64 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d57a:	e7f9      	b.n	801d570 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801d57c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d57c:	460b      	mov	r3, r1
 801d57e:	680a      	ldr	r2, [r1, #0]
 801d580:	1d01      	adds	r1, r0, #4
 801d582:	6952      	ldr	r2, [r2, #20]
 801d584:	4618      	mov	r0, r3
 801d586:	4710      	bx	r2

0801d588 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801d588:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d58c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d594:	bfcc      	ite	gt
 801d596:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801d59a:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801d59e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d5a2:	ee10 3a10 	vmov	r3, s0
 801d5a6:	b218      	sxth	r0, r3
 801d5a8:	4770      	bx	lr

0801d5aa <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d5aa:	b510      	push	{r4, lr}
 801d5ac:	4298      	cmp	r0, r3
 801d5ae:	eb01 0402 	add.w	r4, r1, r2
 801d5b2:	b224      	sxth	r4, r4
 801d5b4:	d21f      	bcs.n	801d5f6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d5b6:	b1f3      	cbz	r3, 801d5f6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d5b8:	ee07 0a90 	vmov	s15, r0
 801d5bc:	ee06 1a10 	vmov	s12, r1
 801d5c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d5c4:	ee07 3a90 	vmov	s15, r3
 801d5c8:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801d5cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d5d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d5d4:	ee06 2a90 	vmov	s13, r2
 801d5d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d5e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d5e4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d5e8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d5ec:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d5f0:	f7ff ffca 	bl	801d588 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801d5f4:	4604      	mov	r4, r0
 801d5f6:	4620      	mov	r0, r4
 801d5f8:	bd10      	pop	{r4, pc}
	...

0801d5fc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801d5fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 801d600:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d604:	4b03      	ldr	r3, [pc, #12]	; (801d614 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801d606:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d60a:	bf08      	it	eq
 801d60c:	2300      	moveq	r3, #0
 801d60e:	4308      	orrs	r0, r1
 801d610:	4318      	orrs	r0, r3
 801d612:	4770      	bx	lr
 801d614:	fffffe00 	.word	0xfffffe00

0801d618 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801d618:	7b43      	ldrb	r3, [r0, #13]
 801d61a:	7201      	strb	r1, [r0, #8]
 801d61c:	b289      	uxth	r1, r1
 801d61e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801d622:	05ca      	lsls	r2, r1, #23
 801d624:	bf48      	it	mi
 801d626:	f043 0320 	orrmi.w	r3, r3, #32
 801d62a:	7343      	strb	r3, [r0, #13]
 801d62c:	058b      	lsls	r3, r1, #22
 801d62e:	bf42      	ittt	mi
 801d630:	7b43      	ldrbmi	r3, [r0, #13]
 801d632:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801d636:	7343      	strbmi	r3, [r0, #13]
 801d638:	4770      	bx	lr

0801d63a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d63a:	b530      	push	{r4, r5, lr}
 801d63c:	2500      	movs	r5, #0
 801d63e:	2401      	movs	r4, #1
 801d640:	6843      	ldr	r3, [r0, #4]
 801d642:	b913      	cbnz	r3, 801d64a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d644:	6803      	ldr	r3, [r0, #0]
 801d646:	b1f3      	cbz	r3, 801d686 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d648:	6043      	str	r3, [r0, #4]
 801d64a:	7c03      	ldrb	r3, [r0, #16]
 801d64c:	b143      	cbz	r3, 801d660 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d64e:	68c3      	ldr	r3, [r0, #12]
 801d650:	b12b      	cbz	r3, 801d65e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d652:	881a      	ldrh	r2, [r3, #0]
 801d654:	b11a      	cbz	r2, 801d65e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d656:	1c9a      	adds	r2, r3, #2
 801d658:	60c2      	str	r2, [r0, #12]
 801d65a:	8818      	ldrh	r0, [r3, #0]
 801d65c:	bd30      	pop	{r4, r5, pc}
 801d65e:	7405      	strb	r5, [r0, #16]
 801d660:	6843      	ldr	r3, [r0, #4]
 801d662:	8819      	ldrh	r1, [r3, #0]
 801d664:	b179      	cbz	r1, 801d686 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d666:	1c9a      	adds	r2, r3, #2
 801d668:	2902      	cmp	r1, #2
 801d66a:	6042      	str	r2, [r0, #4]
 801d66c:	d1f5      	bne.n	801d65a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d66e:	6883      	ldr	r3, [r0, #8]
 801d670:	1d1a      	adds	r2, r3, #4
 801d672:	6082      	str	r2, [r0, #8]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	60c3      	str	r3, [r0, #12]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d0e1      	beq.n	801d640 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d67c:	881b      	ldrh	r3, [r3, #0]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d0de      	beq.n	801d640 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d682:	7404      	strb	r4, [r0, #16]
 801d684:	e7dc      	b.n	801d640 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d686:	2000      	movs	r0, #0
 801d688:	e7e8      	b.n	801d65c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d68a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d68a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d68c:	4605      	mov	r5, r0
 801d68e:	4608      	mov	r0, r1
 801d690:	b1f1      	cbz	r1, 801d6d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d692:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801d696:	460b      	mov	r3, r1
 801d698:	f101 0708 	add.w	r7, r1, #8
 801d69c:	4622      	mov	r2, r4
 801d69e:	6818      	ldr	r0, [r3, #0]
 801d6a0:	3308      	adds	r3, #8
 801d6a2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d6a6:	4626      	mov	r6, r4
 801d6a8:	42bb      	cmp	r3, r7
 801d6aa:	c603      	stmia	r6!, {r0, r1}
 801d6ac:	4634      	mov	r4, r6
 801d6ae:	d1f6      	bne.n	801d69e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d6b0:	6818      	ldr	r0, [r3, #0]
 801d6b2:	6030      	str	r0, [r6, #0]
 801d6b4:	4610      	mov	r0, r2
 801d6b6:	889b      	ldrh	r3, [r3, #4]
 801d6b8:	80b3      	strh	r3, [r6, #4]
 801d6ba:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801d6be:	015b      	lsls	r3, r3, #5
 801d6c0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d6c4:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801d6c8:	430b      	orrs	r3, r1
 801d6ca:	425b      	negs	r3, r3
 801d6cc:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801d6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d6d2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d6d2:	b538      	push	{r3, r4, r5, lr}
 801d6d4:	460c      	mov	r4, r1
 801d6d6:	6811      	ldr	r1, [r2, #0]
 801d6d8:	4610      	mov	r0, r2
 801d6da:	68cd      	ldr	r5, [r1, #12]
 801d6dc:	4619      	mov	r1, r3
 801d6de:	47a8      	blx	r5
 801d6e0:	2800      	cmp	r0, #0
 801d6e2:	bf08      	it	eq
 801d6e4:	4620      	moveq	r0, r4
 801d6e6:	bd38      	pop	{r3, r4, r5, pc}

0801d6e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d6e8:	b570      	push	{r4, r5, r6, lr}
 801d6ea:	8810      	ldrh	r0, [r2, #0]
 801d6ec:	4298      	cmp	r0, r3
 801d6ee:	d817      	bhi.n	801d720 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6f0:	1e48      	subs	r0, r1, #1
 801d6f2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d6f6:	4298      	cmp	r0, r3
 801d6f8:	d312      	bcc.n	801d720 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6fa:	2400      	movs	r4, #0
 801d6fc:	428c      	cmp	r4, r1
 801d6fe:	d20f      	bcs.n	801d720 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d700:	1860      	adds	r0, r4, r1
 801d702:	1040      	asrs	r0, r0, #1
 801d704:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d708:	0085      	lsls	r5, r0, #2
 801d70a:	42b3      	cmp	r3, r6
 801d70c:	d902      	bls.n	801d714 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d70e:	3001      	adds	r0, #1
 801d710:	b284      	uxth	r4, r0
 801d712:	e7f3      	b.n	801d6fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d714:	d102      	bne.n	801d71c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801d716:	442a      	add	r2, r5
 801d718:	8850      	ldrh	r0, [r2, #2]
 801d71a:	bd70      	pop	{r4, r5, r6, pc}
 801d71c:	b281      	uxth	r1, r0
 801d71e:	e7ed      	b.n	801d6fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d720:	2000      	movs	r0, #0
 801d722:	e7fa      	b.n	801d71a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801d724 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801d724:	b510      	push	{r4, lr}
 801d726:	8ac3      	ldrh	r3, [r0, #22]
 801d728:	428b      	cmp	r3, r1
 801d72a:	d805      	bhi.n	801d738 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801d72c:	4b07      	ldr	r3, [pc, #28]	; (801d74c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801d72e:	21fd      	movs	r1, #253	; 0xfd
 801d730:	4a07      	ldr	r2, [pc, #28]	; (801d750 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801d732:	4808      	ldr	r0, [pc, #32]	; (801d754 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801d734:	f00a fe40 	bl	80283b8 <__assert_func>
 801d738:	8a83      	ldrh	r3, [r0, #20]
 801d73a:	240a      	movs	r4, #10
 801d73c:	4419      	add	r1, r3
 801d73e:	fbb1 f3f4 	udiv	r3, r1, r4
 801d742:	fb04 1113 	mls	r1, r4, r3, r1
 801d746:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801d74a:	bd10      	pop	{r4, pc}
 801d74c:	0802c739 	.word	0x0802c739
 801d750:	0802cb68 	.word	0x0802cb68
 801d754:	0802c747 	.word	0x0802c747

0801d758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801d758:	b508      	push	{r3, lr}
 801d75a:	8ac3      	ldrh	r3, [r0, #22]
 801d75c:	428b      	cmp	r3, r1
 801d75e:	d805      	bhi.n	801d76c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801d760:	4b07      	ldr	r3, [pc, #28]	; (801d780 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801d762:	21d3      	movs	r1, #211	; 0xd3
 801d764:	4a07      	ldr	r2, [pc, #28]	; (801d784 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801d766:	4808      	ldr	r0, [pc, #32]	; (801d788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801d768:	f00a fe26 	bl	80283b8 <__assert_func>
 801d76c:	8a83      	ldrh	r3, [r0, #20]
 801d76e:	220a      	movs	r2, #10
 801d770:	4419      	add	r1, r3
 801d772:	fbb1 f3f2 	udiv	r3, r1, r2
 801d776:	fb02 1113 	mls	r1, r2, r3, r1
 801d77a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801d77e:	bd08      	pop	{r3, pc}
 801d780:	0802c739 	.word	0x0802c739
 801d784:	0802c8b8 	.word	0x0802c8b8
 801d788:	0802c747 	.word	0x0802c747

0801d78c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d790:	4604      	mov	r4, r0
 801d792:	4688      	mov	r8, r1
 801d794:	4615      	mov	r5, r2
 801d796:	b94a      	cbnz	r2, 801d7ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801d798:	4691      	mov	r9, r2
 801d79a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801d79e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801d7a2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801d7a6:	4648      	mov	r0, r9
 801d7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7ac:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801d7b0:	8892      	ldrh	r2, [r2, #4]
 801d7b2:	462b      	mov	r3, r5
 801d7b4:	f105 0c08 	add.w	ip, r5, #8
 801d7b8:	46b3      	mov	fp, r6
 801d7ba:	6818      	ldr	r0, [r3, #0]
 801d7bc:	3308      	adds	r3, #8
 801d7be:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d7c2:	4637      	mov	r7, r6
 801d7c4:	4563      	cmp	r3, ip
 801d7c6:	c703      	stmia	r7!, {r0, r1}
 801d7c8:	463e      	mov	r6, r7
 801d7ca:	d1f6      	bne.n	801d7ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801d7cc:	6818      	ldr	r0, [r3, #0]
 801d7ce:	46d9      	mov	r9, fp
 801d7d0:	6038      	str	r0, [r7, #0]
 801d7d2:	889b      	ldrh	r3, [r3, #4]
 801d7d4:	80bb      	strh	r3, [r7, #4]
 801d7d6:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801d7da:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801d7de:	18d3      	adds	r3, r2, r3
 801d7e0:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801d7e4:	b298      	uxth	r0, r3
 801d7e6:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801d7ea:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801d7ee:	281d      	cmp	r0, #29
 801d7f0:	ea4a 0a01 	orr.w	sl, sl, r1
 801d7f4:	fa1f f68a 	uxth.w	r6, sl
 801d7f8:	d842      	bhi.n	801d880 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801d7fa:	2301      	movs	r3, #1
 801d7fc:	4950      	ldr	r1, [pc, #320]	; (801d940 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801d7fe:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801d802:	4083      	lsls	r3, r0
 801d804:	420b      	tst	r3, r1
 801d806:	d114      	bne.n	801d832 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d808:	f413 7f60 	tst.w	r3, #896	; 0x380
 801d80c:	d03c      	beq.n	801d888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801d80e:	fa1f fa8a 	uxth.w	sl, sl
 801d812:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801d816:	4658      	mov	r0, fp
 801d818:	eba1 010a 	sub.w	r1, r1, sl
 801d81c:	b209      	sxth	r1, r1
 801d81e:	f7ff fefb 	bl	801d618 <_ZN8touchgfx9GlyphNode6setTopEs>
 801d822:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801d826:	1b86      	subs	r6, r0, r6
 801d828:	eba6 0a0a 	sub.w	sl, r6, sl
 801d82c:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801d830:	e7b9      	b.n	801d7a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d832:	2100      	movs	r1, #0
 801d834:	f104 001a 	add.w	r0, r4, #26
 801d838:	f7ff ff8e 	bl	801d758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d83c:	f640 6333 	movw	r3, #3635	; 0xe33
 801d840:	4601      	mov	r1, r0
 801d842:	4298      	cmp	r0, r3
 801d844:	d10a      	bne.n	801d85c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801d846:	f8d8 3000 	ldr.w	r3, [r8]
 801d84a:	4640      	mov	r0, r8
 801d84c:	68db      	ldr	r3, [r3, #12]
 801d84e:	4798      	blx	r3
 801d850:	7b41      	ldrb	r1, [r0, #13]
 801d852:	7a00      	ldrb	r0, [r0, #8]
 801d854:	f7ff fed2 	bl	801d5fc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d858:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801d85c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801d860:	4658      	mov	r0, fp
 801d862:	4431      	add	r1, r6
 801d864:	4451      	add	r1, sl
 801d866:	b209      	sxth	r1, r1
 801d868:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801d86c:	f7ff fed4 	bl	801d618 <_ZN8touchgfx9GlyphNode6setTopEs>
 801d870:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801d874:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801d878:	1a9b      	subs	r3, r3, r2
 801d87a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801d87e:	e792      	b.n	801d7a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d880:	f640 631b 	movw	r3, #3611	; 0xe1b
 801d884:	429a      	cmp	r2, r3
 801d886:	d005      	beq.n	801d894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801d888:	f022 0302 	bic.w	r3, r2, #2
 801d88c:	f640 611d 	movw	r1, #3613	; 0xe1d
 801d890:	428b      	cmp	r3, r1
 801d892:	d119      	bne.n	801d8c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801d894:	1e53      	subs	r3, r2, #1
 801d896:	4629      	mov	r1, r5
 801d898:	4642      	mov	r2, r8
 801d89a:	4620      	mov	r0, r4
 801d89c:	b29b      	uxth	r3, r3
 801d89e:	f7ff ff18 	bl	801d6d2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d8a2:	7b41      	ldrb	r1, [r0, #13]
 801d8a4:	7a00      	ldrb	r0, [r0, #8]
 801d8a6:	f7ff fea9 	bl	801d5fc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d8aa:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801d8ae:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801d8b2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d8b6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801d8ba:	4313      	orrs	r3, r2
 801d8bc:	115a      	asrs	r2, r3, #5
 801d8be:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d8c2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801d8c6:	e02e      	b.n	801d926 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d8c8:	4639      	mov	r1, r7
 801d8ca:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801d8ce:	f7ff fe95 	bl	801d5fc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d8d2:	f640 6109 	movw	r1, #3593	; 0xe09
 801d8d6:	f022 0310 	bic.w	r3, r2, #16
 801d8da:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801d8de:	428b      	cmp	r3, r1
 801d8e0:	d003      	beq.n	801d8ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801d8e2:	f640 6313 	movw	r3, #3603	; 0xe13
 801d8e6:	429a      	cmp	r2, r3
 801d8e8:	d127      	bne.n	801d93a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801d8ea:	b27f      	sxtb	r7, r7
 801d8ec:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801d8f0:	4629      	mov	r1, r5
 801d8f2:	4620      	mov	r0, r4
 801d8f4:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801d8f8:	431f      	orrs	r7, r3
 801d8fa:	f640 6313 	movw	r3, #3603	; 0xe13
 801d8fe:	429a      	cmp	r2, r3
 801d900:	bf14      	ite	ne
 801d902:	f102 33ff 	addne.w	r3, r2, #4294967295
 801d906:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d90a:	4642      	mov	r2, r8
 801d90c:	bf18      	it	ne
 801d90e:	b29b      	uxthne	r3, r3
 801d910:	f7ff fedf 	bl	801d6d2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d914:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801d918:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d91c:	7a83      	ldrb	r3, [r0, #10]
 801d91e:	4313      	orrs	r3, r2
 801d920:	1aff      	subs	r7, r7, r3
 801d922:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801d926:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801d92a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801d92e:	f7ff fe65 	bl	801d5fc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d932:	1b80      	subs	r0, r0, r6
 801d934:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801d938:	e735      	b.n	801d7a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d93a:	2300      	movs	r3, #0
 801d93c:	e7c1      	b.n	801d8c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801d93e:	bf00      	nop
 801d940:	3fc00079 	.word	0x3fc00079

0801d944 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d944:	3a01      	subs	r2, #1
 801d946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d94a:	b292      	uxth	r2, r2
 801d94c:	460c      	mov	r4, r1
 801d94e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801d952:	42b2      	cmp	r2, r6
 801d954:	d018      	beq.n	801d988 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801d956:	8b01      	ldrh	r1, [r0, #24]
 801d958:	f834 5b02 	ldrh.w	r5, [r4], #2
 801d95c:	4291      	cmp	r1, r2
 801d95e:	d805      	bhi.n	801d96c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801d960:	4b13      	ldr	r3, [pc, #76]	; (801d9b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801d962:	21d3      	movs	r1, #211	; 0xd3
 801d964:	4a13      	ldr	r2, [pc, #76]	; (801d9b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801d966:	4814      	ldr	r0, [pc, #80]	; (801d9b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801d968:	f00a fd26 	bl	80283b8 <__assert_func>
 801d96c:	8ac1      	ldrh	r1, [r0, #22]
 801d96e:	4411      	add	r1, r2
 801d970:	3a01      	subs	r2, #1
 801d972:	f001 0101 	and.w	r1, r1, #1
 801d976:	b292      	uxth	r2, r2
 801d978:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d97c:	8a49      	ldrh	r1, [r1, #18]
 801d97e:	428d      	cmp	r5, r1
 801d980:	d0e7      	beq.n	801d952 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801d982:	2000      	movs	r0, #0
 801d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d988:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801d98c:	2600      	movs	r6, #0
 801d98e:	f100 051a 	add.w	r5, r0, #26
 801d992:	441f      	add	r7, r3
 801d994:	b2b1      	uxth	r1, r6
 801d996:	42b9      	cmp	r1, r7
 801d998:	da08      	bge.n	801d9ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801d99a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801d99e:	4628      	mov	r0, r5
 801d9a0:	f7ff feda 	bl	801d758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d9a4:	3601      	adds	r6, #1
 801d9a6:	4540      	cmp	r0, r8
 801d9a8:	d0f4      	beq.n	801d994 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801d9aa:	e7ea      	b.n	801d982 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801d9ac:	2001      	movs	r0, #1
 801d9ae:	e7e9      	b.n	801d984 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801d9b0:	0802c739 	.word	0x0802c739
 801d9b4:	0802ccc8 	.word	0x0802ccc8
 801d9b8:	0802c747 	.word	0x0802c747

0801d9bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801d9bc:	b538      	push	{r3, r4, r5, lr}
 801d9be:	8ac3      	ldrh	r3, [r0, #22]
 801d9c0:	428b      	cmp	r3, r1
 801d9c2:	d205      	bcs.n	801d9d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801d9c4:	4b08      	ldr	r3, [pc, #32]	; (801d9e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801d9c6:	21d8      	movs	r1, #216	; 0xd8
 801d9c8:	4a08      	ldr	r2, [pc, #32]	; (801d9ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801d9ca:	4809      	ldr	r0, [pc, #36]	; (801d9f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801d9cc:	f00a fcf4 	bl	80283b8 <__assert_func>
 801d9d0:	8a82      	ldrh	r2, [r0, #20]
 801d9d2:	250a      	movs	r5, #10
 801d9d4:	1a5b      	subs	r3, r3, r1
 801d9d6:	440a      	add	r2, r1
 801d9d8:	82c3      	strh	r3, [r0, #22]
 801d9da:	fbb2 f4f5 	udiv	r4, r2, r5
 801d9de:	fb05 2214 	mls	r2, r5, r4, r2
 801d9e2:	8282      	strh	r2, [r0, #20]
 801d9e4:	bd38      	pop	{r3, r4, r5, pc}
 801d9e6:	bf00      	nop
 801d9e8:	0802c72d 	.word	0x0802c72d
 801d9ec:	0802cae4 	.word	0x0802cae4
 801d9f0:	0802c747 	.word	0x0802c747

0801d9f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801d9f4:	b538      	push	{r3, r4, r5, lr}
 801d9f6:	8ac3      	ldrh	r3, [r0, #22]
 801d9f8:	2b09      	cmp	r3, #9
 801d9fa:	d905      	bls.n	801da08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801d9fc:	4b08      	ldr	r3, [pc, #32]	; (801da20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801d9fe:	21f7      	movs	r1, #247	; 0xf7
 801da00:	4a08      	ldr	r2, [pc, #32]	; (801da24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801da02:	4809      	ldr	r0, [pc, #36]	; (801da28 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801da04:	f00a fcd8 	bl	80283b8 <__assert_func>
 801da08:	8a82      	ldrh	r2, [r0, #20]
 801da0a:	250a      	movs	r5, #10
 801da0c:	441a      	add	r2, r3
 801da0e:	3301      	adds	r3, #1
 801da10:	fbb2 f4f5 	udiv	r4, r2, r5
 801da14:	fb05 2214 	mls	r2, r5, r4, r2
 801da18:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801da1c:	82c3      	strh	r3, [r0, #22]
 801da1e:	bd38      	pop	{r3, r4, r5, pc}
 801da20:	0802c721 	.word	0x0802c721
 801da24:	0802ca35 	.word	0x0802ca35
 801da28:	0802c747 	.word	0x0802c747

0801da2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801da2c:	b538      	push	{r3, r4, r5, lr}
 801da2e:	4604      	mov	r4, r0
 801da30:	f100 051a 	add.w	r5, r0, #26
 801da34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801da36:	2b0a      	cmp	r3, #10
 801da38:	d01c      	beq.n	801da74 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801da3a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801da3c:	b962      	cbnz	r2, 801da58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801da3e:	f104 051a 	add.w	r5, r4, #26
 801da42:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801da44:	2b0a      	cmp	r3, #10
 801da46:	d015      	beq.n	801da74 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801da48:	4620      	mov	r0, r4
 801da4a:	f7ff fdf6 	bl	801d63a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801da4e:	4601      	mov	r1, r0
 801da50:	4628      	mov	r0, r5
 801da52:	f7ff ffcf 	bl	801d9f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801da56:	e7f4      	b.n	801da42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801da58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801da5a:	3a01      	subs	r2, #1
 801da5c:	4628      	mov	r0, r5
 801da5e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801da62:	3301      	adds	r3, #1
 801da64:	f003 0301 	and.w	r3, r3, #1
 801da68:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801da6a:	8722      	strh	r2, [r4, #56]	; 0x38
 801da6c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801da6e:	f7ff ffc1 	bl	801d9f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801da72:	e7df      	b.n	801da34 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801da74:	bd38      	pop	{r3, r4, r5, pc}
	...

0801da78 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801da78:	2300      	movs	r3, #0
 801da7a:	b510      	push	{r4, lr}
 801da7c:	6043      	str	r3, [r0, #4]
 801da7e:	4604      	mov	r4, r0
 801da80:	60c3      	str	r3, [r0, #12]
 801da82:	7403      	strb	r3, [r0, #16]
 801da84:	8603      	strh	r3, [r0, #48]	; 0x30
 801da86:	8303      	strh	r3, [r0, #24]
 801da88:	8703      	strh	r3, [r0, #56]	; 0x38
 801da8a:	f7ff ffcf 	bl	801da2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801da8e:	4a0a      	ldr	r2, [pc, #40]	; (801dab8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801da90:	6813      	ldr	r3, [r2, #0]
 801da92:	4611      	mov	r1, r2
 801da94:	b913      	cbnz	r3, 801da9c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801da96:	6852      	ldr	r2, [r2, #4]
 801da98:	07d0      	lsls	r0, r2, #31
 801da9a:	d50b      	bpl.n	801dab4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801da9c:	6849      	ldr	r1, [r1, #4]
 801da9e:	104a      	asrs	r2, r1, #1
 801daa0:	07c9      	lsls	r1, r1, #31
 801daa2:	eb04 0002 	add.w	r0, r4, r2
 801daa6:	bf48      	it	mi
 801daa8:	58a2      	ldrmi	r2, [r4, r2]
 801daaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801daae:	bf48      	it	mi
 801dab0:	58d3      	ldrmi	r3, [r2, r3]
 801dab2:	4718      	bx	r3
 801dab4:	bd10      	pop	{r4, pc}
 801dab6:	bf00      	nop
 801dab8:	200086e0 	.word	0x200086e0

0801dabc <_ZN8touchgfx12TextProviderC1Ev>:
 801dabc:	2300      	movs	r3, #0
 801dabe:	2201      	movs	r2, #1
 801dac0:	b510      	push	{r4, lr}
 801dac2:	4604      	mov	r4, r0
 801dac4:	60c3      	str	r3, [r0, #12]
 801dac6:	7403      	strb	r3, [r0, #16]
 801dac8:	82c3      	strh	r3, [r0, #22]
 801daca:	8303      	strh	r3, [r0, #24]
 801dacc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801dace:	8603      	strh	r3, [r0, #48]	; 0x30
 801dad0:	86c3      	strh	r3, [r0, #54]	; 0x36
 801dad2:	8703      	strh	r3, [r0, #56]	; 0x38
 801dad4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dad6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801dada:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801dade:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801dae2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801dae6:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801daea:	e9c0 3300 	strd	r3, r3, [r0]
 801daee:	f7ff ffc3 	bl	801da78 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801daf2:	4620      	mov	r0, r4
 801daf4:	bd10      	pop	{r4, pc}

0801daf6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801daf6:	b410      	push	{r4}
 801daf8:	6082      	str	r2, [r0, #8]
 801dafa:	6001      	str	r1, [r0, #0]
 801dafc:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db02:	f7ff bfb9 	b.w	801da78 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801db08 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801db08:	b508      	push	{r3, lr}
 801db0a:	88c2      	ldrh	r2, [r0, #6]
 801db0c:	440a      	add	r2, r1
 801db0e:	2a02      	cmp	r2, #2
 801db10:	dd05      	ble.n	801db1e <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801db12:	4b06      	ldr	r3, [pc, #24]	; (801db2c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801db14:	21ec      	movs	r1, #236	; 0xec
 801db16:	4a06      	ldr	r2, [pc, #24]	; (801db30 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801db18:	4806      	ldr	r0, [pc, #24]	; (801db34 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801db1a:	f00a fc4d 	bl	80283b8 <__assert_func>
 801db1e:	8883      	ldrh	r3, [r0, #4]
 801db20:	80c2      	strh	r2, [r0, #6]
 801db22:	1a59      	subs	r1, r3, r1
 801db24:	f001 0101 	and.w	r1, r1, #1
 801db28:	8081      	strh	r1, [r0, #4]
 801db2a:	bd08      	pop	{r3, pc}
 801db2c:	0802c773 	.word	0x0802c773
 801db30:	0802cc41 	.word	0x0802cc41
 801db34:	0802c747 	.word	0x0802c747

0801db38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801db38:	b508      	push	{r3, lr}
 801db3a:	88c3      	ldrh	r3, [r0, #6]
 801db3c:	428b      	cmp	r3, r1
 801db3e:	d805      	bhi.n	801db4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801db40:	4b06      	ldr	r3, [pc, #24]	; (801db5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801db42:	21fd      	movs	r1, #253	; 0xfd
 801db44:	4a06      	ldr	r2, [pc, #24]	; (801db60 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801db46:	4807      	ldr	r0, [pc, #28]	; (801db64 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801db48:	f00a fc36 	bl	80283b8 <__assert_func>
 801db4c:	8883      	ldrh	r3, [r0, #4]
 801db4e:	4419      	add	r1, r3
 801db50:	f001 0101 	and.w	r1, r1, #1
 801db54:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801db58:	bd08      	pop	{r3, pc}
 801db5a:	bf00      	nop
 801db5c:	0802c739 	.word	0x0802c739
 801db60:	0802cd99 	.word	0x0802cd99
 801db64:	0802c747 	.word	0x0802c747

0801db68 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801db68:	b570      	push	{r4, r5, r6, lr}
 801db6a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801db6c:	4604      	mov	r4, r0
 801db6e:	b92a      	cbnz	r2, 801db7c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801db70:	4b12      	ldr	r3, [pc, #72]	; (801dbbc <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801db72:	21de      	movs	r1, #222	; 0xde
 801db74:	4a12      	ldr	r2, [pc, #72]	; (801dbc0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801db76:	4813      	ldr	r0, [pc, #76]	; (801dbc4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801db78:	f00a fc1e 	bl	80283b8 <__assert_func>
 801db7c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801db7e:	260a      	movs	r6, #10
 801db80:	3a01      	subs	r2, #1
 801db82:	3412      	adds	r4, #18
 801db84:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801db88:	3301      	adds	r3, #1
 801db8a:	8b4d      	ldrh	r5, [r1, #26]
 801db8c:	8602      	strh	r2, [r0, #48]	; 0x30
 801db8e:	fbb3 f1f6 	udiv	r1, r3, r6
 801db92:	fb06 3311 	mls	r3, r6, r1, r3
 801db96:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801db98:	f7ff ff48 	bl	801da2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801db9c:	88e3      	ldrh	r3, [r4, #6]
 801db9e:	2101      	movs	r1, #1
 801dba0:	2b02      	cmp	r3, #2
 801dba2:	bf04      	itt	eq
 801dba4:	2301      	moveq	r3, #1
 801dba6:	80e3      	strheq	r3, [r4, #6]
 801dba8:	4620      	mov	r0, r4
 801dbaa:	f7ff ffad 	bl	801db08 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801dbae:	4620      	mov	r0, r4
 801dbb0:	462a      	mov	r2, r5
 801dbb2:	2100      	movs	r1, #0
 801dbb4:	f7ff ffc0 	bl	801db38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801dbb8:	4628      	mov	r0, r5
 801dbba:	bd70      	pop	{r4, r5, r6, pc}
 801dbbc:	0802c718 	.word	0x0802c718
 801dbc0:	0802c98a 	.word	0x0802c98a
 801dbc4:	0802c747 	.word	0x0802c747

0801dbc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801dbc8:	428a      	cmp	r2, r1
 801dbca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbce:	4604      	mov	r4, r0
 801dbd0:	460e      	mov	r6, r1
 801dbd2:	4615      	mov	r5, r2
 801dbd4:	469a      	mov	sl, r3
 801dbd6:	d92b      	bls.n	801dc30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801dbd8:	1a57      	subs	r7, r2, r1
 801dbda:	f04f 0800 	mov.w	r8, #0
 801dbde:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801dbe2:	f04f 0b0a 	mov.w	fp, #10
 801dbe6:	b2bf      	uxth	r7, r7
 801dbe8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dbea:	b92b      	cbnz	r3, 801dbf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801dbec:	4b24      	ldr	r3, [pc, #144]	; (801dc80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801dbee:	21e6      	movs	r1, #230	; 0xe6
 801dbf0:	4a24      	ldr	r2, [pc, #144]	; (801dc84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801dbf2:	4825      	ldr	r0, [pc, #148]	; (801dc88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801dbf4:	f00a fbe0 	bl	80283b8 <__assert_func>
 801dbf8:	3b01      	subs	r3, #1
 801dbfa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801dbfc:	2101      	movs	r1, #1
 801dbfe:	4648      	mov	r0, r9
 801dc00:	b29b      	uxth	r3, r3
 801dc02:	f108 0801 	add.w	r8, r8, #1
 801dc06:	441a      	add	r2, r3
 801dc08:	8623      	strh	r3, [r4, #48]	; 0x30
 801dc0a:	fbb2 f3fb 	udiv	r3, r2, fp
 801dc0e:	fb0b 2313 	mls	r3, fp, r3, r2
 801dc12:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dc16:	8b5a      	ldrh	r2, [r3, #26]
 801dc18:	9201      	str	r2, [sp, #4]
 801dc1a:	f7ff ff75 	bl	801db08 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801dc1e:	9a01      	ldr	r2, [sp, #4]
 801dc20:	2100      	movs	r1, #0
 801dc22:	4648      	mov	r0, r9
 801dc24:	f7ff ff88 	bl	801db38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801dc28:	fa1f f388 	uxth.w	r3, r8
 801dc2c:	429f      	cmp	r7, r3
 801dc2e:	d8db      	bhi.n	801dbe8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801dc30:	f104 071a 	add.w	r7, r4, #26
 801dc34:	4631      	mov	r1, r6
 801dc36:	260a      	movs	r6, #10
 801dc38:	4638      	mov	r0, r7
 801dc3a:	f7ff febf 	bl	801d9bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801dc3e:	b1c5      	cbz	r5, 801dc72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801dc40:	3d01      	subs	r5, #1
 801dc42:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc44:	b2ad      	uxth	r5, r5
 801dc46:	2b09      	cmp	r3, #9
 801dc48:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801dc4c:	d903      	bls.n	801dc56 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801dc4e:	4b0f      	ldr	r3, [pc, #60]	; (801dc8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801dc50:	21ec      	movs	r1, #236	; 0xec
 801dc52:	4a0f      	ldr	r2, [pc, #60]	; (801dc90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801dc54:	e7cd      	b.n	801dbf2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801dc56:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801dc58:	3301      	adds	r3, #1
 801dc5a:	3109      	adds	r1, #9
 801dc5c:	8623      	strh	r3, [r4, #48]	; 0x30
 801dc5e:	fbb1 f0f6 	udiv	r0, r1, r6
 801dc62:	fb06 1110 	mls	r1, r6, r0, r1
 801dc66:	4638      	mov	r0, r7
 801dc68:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801dc6a:	2100      	movs	r1, #0
 801dc6c:	f7ff fd5a 	bl	801d724 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801dc70:	e7e5      	b.n	801dc3e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801dc72:	4620      	mov	r0, r4
 801dc74:	b003      	add	sp, #12
 801dc76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc7a:	f7ff bed7 	b.w	801da2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dc7e:	bf00      	nop
 801dc80:	0802c718 	.word	0x0802c718
 801dc84:	0802c80e 	.word	0x0802c80e
 801dc88:	0802c747 	.word	0x0802c747
 801dc8c:	0802c773 	.word	0x0802c773
 801dc90:	0802c786 	.word	0x0802c786

0801dc94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801dc94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc98:	4605      	mov	r5, r0
 801dc9a:	4616      	mov	r6, r2
 801dc9c:	1c8c      	adds	r4, r1, #2
 801dc9e:	8809      	ldrh	r1, [r1, #0]
 801dca0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801dca4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801dca8:	42b3      	cmp	r3, r6
 801dcaa:	d124      	bne.n	801dcf6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801dcac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801dcb0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801dcb4:	f001 070f 	and.w	r7, r1, #15
 801dcb8:	4652      	mov	r2, sl
 801dcba:	f8cd 8000 	str.w	r8, [sp]
 801dcbe:	464b      	mov	r3, r9
 801dcc0:	4621      	mov	r1, r4
 801dcc2:	4628      	mov	r0, r5
 801dcc4:	f7ff fe3e 	bl	801d944 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801dcc8:	4683      	mov	fp, r0
 801dcca:	b168      	cbz	r0, 801dce8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801dccc:	eb0a 0109 	add.w	r1, sl, r9
 801dcd0:	463a      	mov	r2, r7
 801dcd2:	4628      	mov	r0, r5
 801dcd4:	4441      	add	r1, r8
 801dcd6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801dcda:	4649      	mov	r1, r9
 801dcdc:	f7ff ff74 	bl	801dbc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801dce0:	4658      	mov	r0, fp
 801dce2:	b003      	add	sp, #12
 801dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dce8:	eb07 010a 	add.w	r1, r7, sl
 801dcec:	4449      	add	r1, r9
 801dcee:	4441      	add	r1, r8
 801dcf0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801dcf4:	e7d2      	b.n	801dc9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801dcf6:	f04f 0b00 	mov.w	fp, #0
 801dcfa:	e7f1      	b.n	801dce0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801dcfc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801dcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd00:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801dd02:	4604      	mov	r4, r0
 801dd04:	260b      	movs	r6, #11
 801dd06:	f100 091a 	add.w	r9, r0, #26
 801dd0a:	886f      	ldrh	r7, [r5, #2]
 801dd0c:	087f      	lsrs	r7, r7, #1
 801dd0e:	3e01      	subs	r6, #1
 801dd10:	d013      	beq.n	801dd3a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801dd12:	2100      	movs	r1, #0
 801dd14:	4648      	mov	r0, r9
 801dd16:	f7ff fd1f 	bl	801d758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dd1a:	462a      	mov	r2, r5
 801dd1c:	4680      	mov	r8, r0
 801dd1e:	4603      	mov	r3, r0
 801dd20:	4639      	mov	r1, r7
 801dd22:	4620      	mov	r0, r4
 801dd24:	f7ff fce0 	bl	801d6e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801dd28:	b138      	cbz	r0, 801dd3a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801dd2a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801dd2e:	4642      	mov	r2, r8
 801dd30:	4620      	mov	r0, r4
 801dd32:	f7ff ffaf 	bl	801dc94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801dd36:	2800      	cmp	r0, #0
 801dd38:	d1e9      	bne.n	801dd0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801dd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801dd40:	4b1e      	ldr	r3, [pc, #120]	; (801ddbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801dd42:	b570      	push	{r4, r5, r6, lr}
 801dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd48:	4604      	mov	r4, r0
 801dd4a:	f003 0501 	and.w	r5, r3, #1
 801dd4e:	b902      	cbnz	r2, 801dd52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801dd50:	b165      	cbz	r5, 801dd6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801dd52:	105b      	asrs	r3, r3, #1
 801dd54:	f104 061a 	add.w	r6, r4, #26
 801dd58:	18e0      	adds	r0, r4, r3
 801dd5a:	b10d      	cbz	r5, 801dd60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801dd5c:	58e3      	ldr	r3, [r4, r3]
 801dd5e:	589a      	ldr	r2, [r3, r2]
 801dd60:	4790      	blx	r2
 801dd62:	2100      	movs	r1, #0
 801dd64:	4602      	mov	r2, r0
 801dd66:	4630      	mov	r0, r6
 801dd68:	f7ff fcdc 	bl	801d724 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801dd6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801dd6e:	b303      	cbz	r3, 801ddb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801dd70:	f104 051a 	add.w	r5, r4, #26
 801dd74:	2100      	movs	r1, #0
 801dd76:	4628      	mov	r0, r5
 801dd78:	f7ff fcee 	bl	801d758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dd7c:	b1c8      	cbz	r0, 801ddb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801dd7e:	4620      	mov	r0, r4
 801dd80:	f7ff ffbc 	bl	801dcfc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801dd84:	2101      	movs	r1, #1
 801dd86:	4628      	mov	r0, r5
 801dd88:	f7ff fce6 	bl	801d758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dd8c:	f640 133f 	movw	r3, #2367	; 0x93f
 801dd90:	4606      	mov	r6, r0
 801dd92:	4298      	cmp	r0, r3
 801dd94:	d10d      	bne.n	801ddb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801dd96:	2100      	movs	r1, #0
 801dd98:	4628      	mov	r0, r5
 801dd9a:	f7ff fcdd 	bl	801d758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dd9e:	2101      	movs	r1, #1
 801dda0:	4602      	mov	r2, r0
 801dda2:	4628      	mov	r0, r5
 801dda4:	f7ff fcbe 	bl	801d724 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801dda8:	4632      	mov	r2, r6
 801ddaa:	2100      	movs	r1, #0
 801ddac:	4628      	mov	r0, r5
 801ddae:	f7ff fcb9 	bl	801d724 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801ddb2:	4620      	mov	r0, r4
 801ddb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ddb8:	f7ff bed6 	b.w	801db68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ddbc:	200086e8 	.word	0x200086e8

0801ddc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddc2:	4617      	mov	r7, r2
 801ddc4:	461e      	mov	r6, r3
 801ddc6:	4605      	mov	r5, r0
 801ddc8:	f7ff ffba 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ddcc:	683b      	ldr	r3, [r7, #0]
 801ddce:	4604      	mov	r4, r0
 801ddd0:	4601      	mov	r1, r0
 801ddd2:	4638      	mov	r0, r7
 801ddd4:	68db      	ldr	r3, [r3, #12]
 801ddd6:	4798      	blx	r3
 801ddd8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801dddc:	4602      	mov	r2, r0
 801ddde:	6030      	str	r0, [r6, #0]
 801dde0:	b29b      	uxth	r3, r3
 801dde2:	2b7f      	cmp	r3, #127	; 0x7f
 801dde4:	d813      	bhi.n	801de0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801dde6:	4639      	mov	r1, r7
 801dde8:	4628      	mov	r0, r5
 801ddea:	f7ff fccf 	bl	801d78c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ddee:	6030      	str	r0, [r6, #0]
 801ddf0:	6833      	ldr	r3, [r6, #0]
 801ddf2:	b143      	cbz	r3, 801de06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ddf4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801ddf8:	7a9b      	ldrb	r3, [r3, #10]
 801ddfa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ddfe:	4313      	orrs	r3, r2
 801de00:	bf0c      	ite	eq
 801de02:	2301      	moveq	r3, #1
 801de04:	2300      	movne	r3, #0
 801de06:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801de0a:	4620      	mov	r0, r4
 801de0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de0e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801de12:	2b00      	cmp	r3, #0
 801de14:	d0ec      	beq.n	801ddf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801de16:	f640 1302 	movw	r3, #2306	; 0x902
 801de1a:	429c      	cmp	r4, r3
 801de1c:	d1e8      	bne.n	801ddf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801de1e:	4601      	mov	r1, r0
 801de20:	4628      	mov	r0, r5
 801de22:	f7ff fc32 	bl	801d68a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801de26:	e7e2      	b.n	801ddee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801de28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801de28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de2c:	4617      	mov	r7, r2
 801de2e:	461e      	mov	r6, r3
 801de30:	4605      	mov	r5, r0
 801de32:	f7ff ff85 	bl	801dd40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801de36:	683b      	ldr	r3, [r7, #0]
 801de38:	4604      	mov	r4, r0
 801de3a:	4601      	mov	r1, r0
 801de3c:	4638      	mov	r0, r7
 801de3e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801de42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801de46:	47c0      	blx	r8
 801de48:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801de4c:	4602      	mov	r2, r0
 801de4e:	6030      	str	r0, [r6, #0]
 801de50:	b29b      	uxth	r3, r3
 801de52:	2b7f      	cmp	r3, #127	; 0x7f
 801de54:	d814      	bhi.n	801de80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801de56:	4639      	mov	r1, r7
 801de58:	4628      	mov	r0, r5
 801de5a:	f7ff fc97 	bl	801d78c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801de5e:	6030      	str	r0, [r6, #0]
 801de60:	6833      	ldr	r3, [r6, #0]
 801de62:	b143      	cbz	r3, 801de76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801de64:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801de68:	7a9b      	ldrb	r3, [r3, #10]
 801de6a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801de6e:	4313      	orrs	r3, r2
 801de70:	bf0c      	ite	eq
 801de72:	2301      	moveq	r3, #1
 801de74:	2300      	movne	r3, #0
 801de76:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801de7a:	4620      	mov	r0, r4
 801de7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de80:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801de84:	2b00      	cmp	r3, #0
 801de86:	d0eb      	beq.n	801de60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801de88:	f640 1302 	movw	r3, #2306	; 0x902
 801de8c:	429c      	cmp	r4, r3
 801de8e:	d1e7      	bne.n	801de60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801de90:	4601      	mov	r1, r0
 801de92:	4628      	mov	r0, r5
 801de94:	f7ff fbf9 	bl	801d68a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801de98:	e7e1      	b.n	801de5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801de9a <_ZN8touchgfx7Unicode6strlenEPKt>:
 801de9a:	4602      	mov	r2, r0
 801de9c:	b148      	cbz	r0, 801deb2 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801de9e:	2300      	movs	r3, #0
 801dea0:	b298      	uxth	r0, r3
 801dea2:	3301      	adds	r3, #1
 801dea4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801dea8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801deac:	2900      	cmp	r1, #0
 801deae:	d1f7      	bne.n	801dea0 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801deb0:	4770      	bx	lr
 801deb2:	4770      	bx	lr

0801deb4 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801deb4:	b140      	cbz	r0, 801dec8 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801deb6:	4602      	mov	r2, r0
 801deb8:	1a13      	subs	r3, r2, r0
 801deba:	f812 1b01 	ldrb.w	r1, [r2], #1
 801debe:	b29b      	uxth	r3, r3
 801dec0:	2900      	cmp	r1, #0
 801dec2:	d1f9      	bne.n	801deb8 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801dec4:	4618      	mov	r0, r3
 801dec6:	4770      	bx	lr
 801dec8:	4603      	mov	r3, r0
 801deca:	e7fb      	b.n	801dec4 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801decc <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801decc:	b530      	push	{r4, r5, lr}
 801dece:	4604      	mov	r4, r0
 801ded0:	b159      	cbz	r1, 801deea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801ded2:	b148      	cbz	r0, 801dee8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ded4:	2300      	movs	r3, #0
 801ded6:	b298      	uxth	r0, r3
 801ded8:	4282      	cmp	r2, r0
 801deda:	d905      	bls.n	801dee8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801dedc:	5ccd      	ldrb	r5, [r1, r3]
 801dede:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801dee2:	3301      	adds	r3, #1
 801dee4:	2d00      	cmp	r5, #0
 801dee6:	d1f6      	bne.n	801ded6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801dee8:	bd30      	pop	{r4, r5, pc}
 801deea:	4608      	mov	r0, r1
 801deec:	e7fc      	b.n	801dee8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801deee <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801deee:	b5f0      	push	{r4, r5, r6, r7, lr}
 801def0:	468c      	mov	ip, r1
 801def2:	b08b      	sub	sp, #44	; 0x2c
 801def4:	2100      	movs	r1, #0
 801def6:	ae01      	add	r6, sp, #4
 801def8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801defc:	211f      	movs	r1, #31
 801defe:	fbb0 f7f3 	udiv	r7, r0, r3
 801df02:	fb03 0517 	mls	r5, r3, r7, r0
 801df06:	4638      	mov	r0, r7
 801df08:	b2ec      	uxtb	r4, r5
 801df0a:	2d09      	cmp	r5, #9
 801df0c:	bfd4      	ite	le
 801df0e:	3430      	addle	r4, #48	; 0x30
 801df10:	3457      	addgt	r4, #87	; 0x57
 801df12:	b2e4      	uxtb	r4, r4
 801df14:	558c      	strb	r4, [r1, r6]
 801df16:	1e4c      	subs	r4, r1, #1
 801df18:	b92f      	cbnz	r7, 801df26 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801df1a:	4431      	add	r1, r6
 801df1c:	4660      	mov	r0, ip
 801df1e:	f7ff ffd5 	bl	801decc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801df22:	b00b      	add	sp, #44	; 0x2c
 801df24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df26:	4621      	mov	r1, r4
 801df28:	e7e9      	b.n	801defe <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801df2a <_ZN8touchgfx7Unicode4itoaElPtti>:
 801df2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df2c:	4607      	mov	r7, r0
 801df2e:	b08b      	sub	sp, #44	; 0x2c
 801df30:	4608      	mov	r0, r1
 801df32:	b341      	cbz	r1, 801df86 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801df34:	1e99      	subs	r1, r3, #2
 801df36:	290e      	cmp	r1, #14
 801df38:	d825      	bhi.n	801df86 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801df3a:	2100      	movs	r1, #0
 801df3c:	463c      	mov	r4, r7
 801df3e:	261f      	movs	r6, #31
 801df40:	f10d 0c04 	add.w	ip, sp, #4
 801df44:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801df48:	1e71      	subs	r1, r6, #1
 801df4a:	fb94 fef3 	sdiv	lr, r4, r3
 801df4e:	fb03 441e 	mls	r4, r3, lr, r4
 801df52:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801df56:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801df5a:	b2ec      	uxtb	r4, r5
 801df5c:	2d09      	cmp	r5, #9
 801df5e:	bfd4      	ite	le
 801df60:	3430      	addle	r4, #48	; 0x30
 801df62:	3457      	addgt	r4, #87	; 0x57
 801df64:	b2e4      	uxtb	r4, r4
 801df66:	f80c 4006 	strb.w	r4, [ip, r6]
 801df6a:	4674      	mov	r4, lr
 801df6c:	b96c      	cbnz	r4, 801df8a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801df6e:	2f00      	cmp	r7, #0
 801df70:	da05      	bge.n	801df7e <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801df72:	ab0a      	add	r3, sp, #40	; 0x28
 801df74:	4419      	add	r1, r3
 801df76:	232d      	movs	r3, #45	; 0x2d
 801df78:	f801 3c24 	strb.w	r3, [r1, #-36]
 801df7c:	1eb1      	subs	r1, r6, #2
 801df7e:	3101      	adds	r1, #1
 801df80:	4461      	add	r1, ip
 801df82:	f7ff ffa3 	bl	801decc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801df86:	b00b      	add	sp, #44	; 0x2c
 801df88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df8a:	460e      	mov	r6, r1
 801df8c:	e7dc      	b.n	801df48 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801df8e <_ZN8touchgfx7Unicode4atoiEPKt>:
 801df8e:	b510      	push	{r4, lr}
 801df90:	b158      	cbz	r0, 801dfaa <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801df92:	1e82      	subs	r2, r0, #2
 801df94:	210a      	movs	r1, #10
 801df96:	2000      	movs	r0, #0
 801df98:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801df9c:	3b30      	subs	r3, #48	; 0x30
 801df9e:	b29c      	uxth	r4, r3
 801dfa0:	2c09      	cmp	r4, #9
 801dfa2:	d802      	bhi.n	801dfaa <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801dfa4:	fb01 3000 	mla	r0, r1, r0, r3
 801dfa8:	e7f6      	b.n	801df98 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801dfaa:	bd10      	pop	{r4, pc}

0801dfac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfb0:	b085      	sub	sp, #20
 801dfb2:	f8d0 8000 	ldr.w	r8, [r0]
 801dfb6:	468a      	mov	sl, r1
 801dfb8:	461c      	mov	r4, r3
 801dfba:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801dfbe:	4681      	mov	r9, r0
 801dfc0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801dfc4:	4640      	mov	r0, r8
 801dfc6:	9203      	str	r2, [sp, #12]
 801dfc8:	9102      	str	r1, [sp, #8]
 801dfca:	9301      	str	r3, [sp, #4]
 801dfcc:	f7ff ff65 	bl	801de9a <_ZN8touchgfx7Unicode6strlenEPKt>
 801dfd0:	9a03      	ldr	r2, [sp, #12]
 801dfd2:	f1ba 0f00 	cmp.w	sl, #0
 801dfd6:	bf0c      	ite	eq
 801dfd8:	4684      	moveq	ip, r0
 801dfda:	f100 0c01 	addne.w	ip, r0, #1
 801dfde:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801dfe2:	8812      	ldrh	r2, [r2, #0]
 801dfe4:	fa1f fc8c 	uxth.w	ip, ip
 801dfe8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dfea:	2a69      	cmp	r2, #105	; 0x69
 801dfec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dfee:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801dff0:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801dff4:	d004      	beq.n	801e000 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801dff6:	d844      	bhi.n	801e082 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801dff8:	2a58      	cmp	r2, #88	; 0x58
 801dffa:	d001      	beq.n	801e000 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801dffc:	2a64      	cmp	r2, #100	; 0x64
 801dffe:	d14b      	bne.n	801e098 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801e000:	b1a4      	cbz	r4, 801e02c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e002:	b956      	cbnz	r6, 801e01a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801e004:	2801      	cmp	r0, #1
 801e006:	d108      	bne.n	801e01a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801e008:	f8b8 2000 	ldrh.w	r2, [r8]
 801e00c:	2a30      	cmp	r2, #48	; 0x30
 801e00e:	bf02      	ittt	eq
 801e010:	f108 0202 	addeq.w	r2, r8, #2
 801e014:	4630      	moveq	r0, r6
 801e016:	f8c9 2000 	streq.w	r2, [r9]
 801e01a:	45b4      	cmp	ip, r6
 801e01c:	da3e      	bge.n	801e09c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801e01e:	b2b6      	uxth	r6, r6
 801e020:	eba6 040c 	sub.w	r4, r6, ip
 801e024:	46b4      	mov	ip, r6
 801e026:	b2a4      	uxth	r4, r4
 801e028:	f04f 0b00 	mov.w	fp, #0
 801e02c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e030:	3a01      	subs	r2, #1
 801e032:	b169      	cbz	r1, 801e050 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e034:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e036:	458c      	cmp	ip, r1
 801e038:	da09      	bge.n	801e04e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801e03a:	eba1 010c 	sub.w	r1, r1, ip
 801e03e:	b289      	uxth	r1, r1
 801e040:	b933      	cbnz	r3, 801e050 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e042:	f1bb 0f00 	cmp.w	fp, #0
 801e046:	d02b      	beq.n	801e0a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801e048:	b350      	cbz	r0, 801e0a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801e04a:	440c      	add	r4, r1
 801e04c:	b2a4      	uxth	r4, r4
 801e04e:	2100      	movs	r1, #0
 801e050:	682b      	ldr	r3, [r5, #0]
 801e052:	4293      	cmp	r3, r2
 801e054:	da07      	bge.n	801e066 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801e056:	f1ba 0f00 	cmp.w	sl, #0
 801e05a:	d004      	beq.n	801e066 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801e05c:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801e060:	682b      	ldr	r3, [r5, #0]
 801e062:	3301      	adds	r3, #1
 801e064:	602b      	str	r3, [r5, #0]
 801e066:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801e06a:	b354      	cbz	r4, 801e0c2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e06c:	682e      	ldr	r6, [r5, #0]
 801e06e:	3c01      	subs	r4, #1
 801e070:	42b2      	cmp	r2, r6
 801e072:	b2a4      	uxth	r4, r4
 801e074:	dd25      	ble.n	801e0c2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e076:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801e07a:	682b      	ldr	r3, [r5, #0]
 801e07c:	3301      	adds	r3, #1
 801e07e:	602b      	str	r3, [r5, #0]
 801e080:	e7f3      	b.n	801e06a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801e082:	2a73      	cmp	r2, #115	; 0x73
 801e084:	d003      	beq.n	801e08e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801e086:	2a78      	cmp	r2, #120	; 0x78
 801e088:	d0ba      	beq.n	801e000 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801e08a:	2a6f      	cmp	r2, #111	; 0x6f
 801e08c:	e7b7      	b.n	801dffe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801e08e:	2c00      	cmp	r4, #0
 801e090:	d0cc      	beq.n	801e02c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e092:	42b0      	cmp	r0, r6
 801e094:	dd00      	ble.n	801e098 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801e096:	b2b0      	uxth	r0, r6
 801e098:	2400      	movs	r4, #0
 801e09a:	e7c7      	b.n	801e02c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e09c:	2400      	movs	r4, #0
 801e09e:	e7c3      	b.n	801e028 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801e0a0:	2900      	cmp	r1, #0
 801e0a2:	d0d5      	beq.n	801e050 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e0a4:	f04f 0c20 	mov.w	ip, #32
 801e0a8:	682e      	ldr	r6, [r5, #0]
 801e0aa:	2900      	cmp	r1, #0
 801e0ac:	d0d0      	beq.n	801e050 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e0ae:	3901      	subs	r1, #1
 801e0b0:	4296      	cmp	r6, r2
 801e0b2:	b289      	uxth	r1, r1
 801e0b4:	dacb      	bge.n	801e04e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801e0b6:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801e0ba:	682b      	ldr	r3, [r5, #0]
 801e0bc:	3301      	adds	r3, #1
 801e0be:	602b      	str	r3, [r5, #0]
 801e0c0:	e7f2      	b.n	801e0a8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801e0c2:	b198      	cbz	r0, 801e0ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e0c4:	f8d9 3000 	ldr.w	r3, [r9]
 801e0c8:	881c      	ldrh	r4, [r3, #0]
 801e0ca:	b17c      	cbz	r4, 801e0ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e0cc:	682c      	ldr	r4, [r5, #0]
 801e0ce:	3801      	subs	r0, #1
 801e0d0:	42a2      	cmp	r2, r4
 801e0d2:	b280      	uxth	r0, r0
 801e0d4:	dd0a      	ble.n	801e0ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e0d6:	1c9c      	adds	r4, r3, #2
 801e0d8:	f8c9 4000 	str.w	r4, [r9]
 801e0dc:	881c      	ldrh	r4, [r3, #0]
 801e0de:	682b      	ldr	r3, [r5, #0]
 801e0e0:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801e0e4:	682b      	ldr	r3, [r5, #0]
 801e0e6:	3301      	adds	r3, #1
 801e0e8:	602b      	str	r3, [r5, #0]
 801e0ea:	e7ea      	b.n	801e0c2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e0ec:	2620      	movs	r6, #32
 801e0ee:	b151      	cbz	r1, 801e106 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801e0f0:	6828      	ldr	r0, [r5, #0]
 801e0f2:	3901      	subs	r1, #1
 801e0f4:	4282      	cmp	r2, r0
 801e0f6:	b289      	uxth	r1, r1
 801e0f8:	dd05      	ble.n	801e106 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801e0fa:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801e0fe:	682b      	ldr	r3, [r5, #0]
 801e100:	3301      	adds	r3, #1
 801e102:	602b      	str	r3, [r5, #0]
 801e104:	e7f3      	b.n	801e0ee <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801e106:	b005      	add	sp, #20
 801e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e10c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801e10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e110:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e112:	4604      	mov	r4, r0
 801e114:	f04f 0801 	mov.w	r8, #1
 801e118:	2000      	movs	r0, #0
 801e11a:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801e11e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801e122:	8008      	strh	r0, [r1, #0]
 801e124:	7010      	strb	r0, [r2, #0]
 801e126:	7018      	strb	r0, [r3, #0]
 801e128:	f88c 0000 	strb.w	r0, [ip]
 801e12c:	f88e 0000 	strb.w	r0, [lr]
 801e130:	7030      	strb	r0, [r6, #0]
 801e132:	6820      	ldr	r0, [r4, #0]
 801e134:	8800      	ldrh	r0, [r0, #0]
 801e136:	b190      	cbz	r0, 801e15e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801e138:	282b      	cmp	r0, #43	; 0x2b
 801e13a:	d001      	beq.n	801e140 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801e13c:	2820      	cmp	r0, #32
 801e13e:	d104      	bne.n	801e14a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801e140:	8008      	strh	r0, [r1, #0]
 801e142:	6820      	ldr	r0, [r4, #0]
 801e144:	3002      	adds	r0, #2
 801e146:	6020      	str	r0, [r4, #0]
 801e148:	e7f3      	b.n	801e132 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801e14a:	282d      	cmp	r0, #45	; 0x2d
 801e14c:	d102      	bne.n	801e154 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801e14e:	f882 8000 	strb.w	r8, [r2]
 801e152:	e7f6      	b.n	801e142 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801e154:	2823      	cmp	r0, #35	; 0x23
 801e156:	d102      	bne.n	801e15e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801e158:	f883 8000 	strb.w	r8, [r3]
 801e15c:	e7f1      	b.n	801e142 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801e15e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e162:	2b09      	cmp	r3, #9
 801e164:	d901      	bls.n	801e16a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801e166:	282a      	cmp	r0, #42	; 0x2a
 801e168:	d114      	bne.n	801e194 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801e16a:	2201      	movs	r2, #1
 801e16c:	f88e 2000 	strb.w	r2, [lr]
 801e170:	6823      	ldr	r3, [r4, #0]
 801e172:	8819      	ldrh	r1, [r3, #0]
 801e174:	2930      	cmp	r1, #48	; 0x30
 801e176:	bf02      	ittt	eq
 801e178:	3302      	addeq	r3, #2
 801e17a:	6023      	streq	r3, [r4, #0]
 801e17c:	f88c 2000 	strbeq.w	r2, [ip]
 801e180:	6820      	ldr	r0, [r4, #0]
 801e182:	8803      	ldrh	r3, [r0, #0]
 801e184:	2b2a      	cmp	r3, #42	; 0x2a
 801e186:	d11e      	bne.n	801e1c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801e188:	f04f 33ff 	mov.w	r3, #4294967295
 801e18c:	603b      	str	r3, [r7, #0]
 801e18e:	6823      	ldr	r3, [r4, #0]
 801e190:	3302      	adds	r3, #2
 801e192:	6023      	str	r3, [r4, #0]
 801e194:	6823      	ldr	r3, [r4, #0]
 801e196:	881b      	ldrh	r3, [r3, #0]
 801e198:	2b2e      	cmp	r3, #46	; 0x2e
 801e19a:	d112      	bne.n	801e1c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801e19c:	2301      	movs	r3, #1
 801e19e:	7033      	strb	r3, [r6, #0]
 801e1a0:	6823      	ldr	r3, [r4, #0]
 801e1a2:	1c98      	adds	r0, r3, #2
 801e1a4:	6020      	str	r0, [r4, #0]
 801e1a6:	885b      	ldrh	r3, [r3, #2]
 801e1a8:	2b2a      	cmp	r3, #42	; 0x2a
 801e1aa:	d117      	bne.n	801e1dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801e1ac:	f04f 33ff 	mov.w	r3, #4294967295
 801e1b0:	602b      	str	r3, [r5, #0]
 801e1b2:	6823      	ldr	r3, [r4, #0]
 801e1b4:	3302      	adds	r3, #2
 801e1b6:	6023      	str	r3, [r4, #0]
 801e1b8:	682b      	ldr	r3, [r5, #0]
 801e1ba:	2b06      	cmp	r3, #6
 801e1bc:	bfa8      	it	ge
 801e1be:	2306      	movge	r3, #6
 801e1c0:	602b      	str	r3, [r5, #0]
 801e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1c6:	f7ff fee2 	bl	801df8e <_ZN8touchgfx7Unicode4atoiEPKt>
 801e1ca:	6038      	str	r0, [r7, #0]
 801e1cc:	6823      	ldr	r3, [r4, #0]
 801e1ce:	881a      	ldrh	r2, [r3, #0]
 801e1d0:	3a30      	subs	r2, #48	; 0x30
 801e1d2:	2a09      	cmp	r2, #9
 801e1d4:	d8de      	bhi.n	801e194 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801e1d6:	3302      	adds	r3, #2
 801e1d8:	6023      	str	r3, [r4, #0]
 801e1da:	e7f7      	b.n	801e1cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801e1dc:	f7ff fed7 	bl	801df8e <_ZN8touchgfx7Unicode4atoiEPKt>
 801e1e0:	6028      	str	r0, [r5, #0]
 801e1e2:	6823      	ldr	r3, [r4, #0]
 801e1e4:	881a      	ldrh	r2, [r3, #0]
 801e1e6:	3a30      	subs	r2, #48	; 0x30
 801e1e8:	2a09      	cmp	r2, #9
 801e1ea:	d8e5      	bhi.n	801e1b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801e1ec:	3302      	adds	r3, #2
 801e1ee:	6023      	str	r3, [r4, #0]
 801e1f0:	e7f7      	b.n	801e1e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801e1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801e1f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e1f6:	b0a2      	sub	sp, #136	; 0x88
 801e1f8:	2500      	movs	r5, #0
 801e1fa:	4606      	mov	r6, r0
 801e1fc:	460f      	mov	r7, r1
 801e1fe:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801e202:	9209      	str	r2, [sp, #36]	; 0x24
 801e204:	4629      	mov	r1, r5
 801e206:	2242      	movs	r2, #66	; 0x42
 801e208:	4640      	mov	r0, r8
 801e20a:	461c      	mov	r4, r3
 801e20c:	950d      	str	r5, [sp, #52]	; 0x34
 801e20e:	f7fe fdec 	bl	801cdea <_ZN8touchgfx6memsetEPvhm>
 801e212:	b30e      	cbz	r6, 801e258 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801e214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e216:	b1f3      	cbz	r3, 801e256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801e218:	f107 3aff 	add.w	sl, r7, #4294967295
 801e21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e220:	8812      	ldrh	r2, [r2, #0]
 801e222:	2a00      	cmp	r2, #0
 801e224:	f000 80b3 	beq.w	801e38e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801e228:	459a      	cmp	sl, r3
 801e22a:	f340 80b0 	ble.w	801e38e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801e22e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e234:	f8b9 2000 	ldrh.w	r2, [r9]
 801e238:	2a00      	cmp	r2, #0
 801e23a:	d0ef      	beq.n	801e21c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e23c:	2a25      	cmp	r2, #37	; 0x25
 801e23e:	f000 80aa 	beq.w	801e396 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801e242:	459a      	cmp	sl, r3
 801e244:	ddea      	ble.n	801e21c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e246:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e24a:	f109 0202 	add.w	r2, r9, #2
 801e24e:	3301      	adds	r3, #1
 801e250:	9209      	str	r2, [sp, #36]	; 0x24
 801e252:	930d      	str	r3, [sp, #52]	; 0x34
 801e254:	e7eb      	b.n	801e22e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801e256:	8033      	strh	r3, [r6, #0]
 801e258:	4630      	mov	r0, r6
 801e25a:	b022      	add	sp, #136	; 0x88
 801e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e260:	3b63      	subs	r3, #99	; 0x63
 801e262:	2b01      	cmp	r3, #1
 801e264:	f200 80df 	bhi.w	801e426 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801e268:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e26c:	8813      	ldrh	r3, [r2, #0]
 801e26e:	2b69      	cmp	r3, #105	; 0x69
 801e270:	d058      	beq.n	801e324 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801e272:	d81b      	bhi.n	801e2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801e274:	2b63      	cmp	r3, #99	; 0x63
 801e276:	d02e      	beq.n	801e2d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801e278:	2b64      	cmp	r3, #100	; 0x64
 801e27a:	d053      	beq.n	801e324 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801e27c:	2b58      	cmp	r3, #88	; 0x58
 801e27e:	d06f      	beq.n	801e360 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801e280:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801e284:	46a1      	mov	r9, r4
 801e286:	e02d      	b.n	801e2e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e288:	2b73      	cmp	r3, #115	; 0x73
 801e28a:	d0ed      	beq.n	801e268 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e28c:	d803      	bhi.n	801e296 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801e28e:	2b6f      	cmp	r3, #111	; 0x6f
 801e290:	f040 80c9 	bne.w	801e426 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801e294:	e7e8      	b.n	801e268 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e296:	2b75      	cmp	r3, #117	; 0x75
 801e298:	d0e6      	beq.n	801e268 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e29a:	2b78      	cmp	r3, #120	; 0x78
 801e29c:	e7f8      	b.n	801e290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801e29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e2a0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2a6:	3302      	adds	r3, #2
 801e2a8:	9309      	str	r3, [sp, #36]	; 0x24
 801e2aa:	e7b7      	b.n	801e21c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e2ac:	2b73      	cmp	r3, #115	; 0x73
 801e2ae:	d034      	beq.n	801e31a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801e2b0:	d807      	bhi.n	801e2c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801e2b2:	2b6f      	cmp	r3, #111	; 0x6f
 801e2b4:	d1e4      	bne.n	801e280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801e2b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e2b8:	f104 0904 	add.w	r9, r4, #4
 801e2bc:	2308      	movs	r3, #8
 801e2be:	1aba      	subs	r2, r7, r2
 801e2c0:	e048      	b.n	801e354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801e2c2:	2b75      	cmp	r3, #117	; 0x75
 801e2c4:	d041      	beq.n	801e34a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801e2c6:	2b78      	cmp	r3, #120	; 0x78
 801e2c8:	d1da      	bne.n	801e280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801e2ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e2cc:	f104 0904 	add.w	r9, r4, #4
 801e2d0:	2310      	movs	r3, #16
 801e2d2:	1aba      	subs	r2, r7, r2
 801e2d4:	e03e      	b.n	801e354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801e2d6:	7823      	ldrb	r3, [r4, #0]
 801e2d8:	f104 0904 	add.w	r9, r4, #4
 801e2dc:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801e2e0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801e2e4:	aa0d      	add	r2, sp, #52	; 0x34
 801e2e6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801e2ea:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e2ee:	a810      	add	r0, sp, #64	; 0x40
 801e2f0:	9205      	str	r2, [sp, #20]
 801e2f2:	464c      	mov	r4, r9
 801e2f4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801e2f8:	9204      	str	r2, [sp, #16]
 801e2fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e2fc:	9203      	str	r2, [sp, #12]
 801e2fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801e302:	9202      	str	r2, [sp, #8]
 801e304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e306:	9201      	str	r2, [sp, #4]
 801e308:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801e30c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801e310:	9200      	str	r2, [sp, #0]
 801e312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e314:	f7ff fe4a 	bl	801dfac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801e318:	e7c4      	b.n	801e2a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801e31a:	f104 0904 	add.w	r9, r4, #4
 801e31e:	6823      	ldr	r3, [r4, #0]
 801e320:	9310      	str	r3, [sp, #64]	; 0x40
 801e322:	e7df      	b.n	801e2e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e326:	230a      	movs	r3, #10
 801e328:	4641      	mov	r1, r8
 801e32a:	6820      	ldr	r0, [r4, #0]
 801e32c:	1aba      	subs	r2, r7, r2
 801e32e:	f104 0904 	add.w	r9, r4, #4
 801e332:	b292      	uxth	r2, r2
 801e334:	f7ff fdf9 	bl	801df2a <_ZN8touchgfx7Unicode4itoaElPtti>
 801e338:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e33c:	2b2d      	cmp	r3, #45	; 0x2d
 801e33e:	d1d1      	bne.n	801e2e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e340:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e346:	3302      	adds	r3, #2
 801e348:	e7ea      	b.n	801e320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801e34a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e34c:	f104 0904 	add.w	r9, r4, #4
 801e350:	230a      	movs	r3, #10
 801e352:	1aba      	subs	r2, r7, r2
 801e354:	b292      	uxth	r2, r2
 801e356:	4641      	mov	r1, r8
 801e358:	6820      	ldr	r0, [r4, #0]
 801e35a:	f7ff fdc8 	bl	801deee <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e35e:	e7c1      	b.n	801e2e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e362:	2310      	movs	r3, #16
 801e364:	4641      	mov	r1, r8
 801e366:	6820      	ldr	r0, [r4, #0]
 801e368:	1aba      	subs	r2, r7, r2
 801e36a:	f104 0904 	add.w	r9, r4, #4
 801e36e:	b292      	uxth	r2, r2
 801e370:	f7ff fdbd 	bl	801deee <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e374:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801e378:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	d0b1      	beq.n	801e2e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e380:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801e384:	2919      	cmp	r1, #25
 801e386:	d8f7      	bhi.n	801e378 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801e388:	3b20      	subs	r3, #32
 801e38a:	8013      	strh	r3, [r2, #0]
 801e38c:	e7f4      	b.n	801e378 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801e38e:	2200      	movs	r2, #0
 801e390:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e394:	e760      	b.n	801e258 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801e396:	459a      	cmp	sl, r3
 801e398:	f77f af40 	ble.w	801e21c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e39c:	f109 0302 	add.w	r3, r9, #2
 801e3a0:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801e3a4:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801e3a8:	a809      	add	r0, sp, #36	; 0x24
 801e3aa:	9309      	str	r3, [sp, #36]	; 0x24
 801e3ac:	ab0f      	add	r3, sp, #60	; 0x3c
 801e3ae:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801e3b2:	9304      	str	r3, [sp, #16]
 801e3b4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801e3b8:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801e3bc:	9303      	str	r3, [sp, #12]
 801e3be:	ab0e      	add	r3, sp, #56	; 0x38
 801e3c0:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801e3c4:	9302      	str	r3, [sp, #8]
 801e3c6:	ab0c      	add	r3, sp, #48	; 0x30
 801e3c8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801e3cc:	9301      	str	r3, [sp, #4]
 801e3ce:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801e3d2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801e3d6:	9300      	str	r3, [sp, #0]
 801e3d8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801e3dc:	950e      	str	r5, [sp, #56]	; 0x38
 801e3de:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801e3e2:	950f      	str	r5, [sp, #60]	; 0x3c
 801e3e4:	f7ff fe92 	bl	801e10c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801e3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	bfbf      	itttt	lt
 801e3f0:	6823      	ldrlt	r3, [r4, #0]
 801e3f2:	3404      	addlt	r4, #4
 801e3f4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e3f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e3fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	bfbf      	itttt	lt
 801e400:	6823      	ldrlt	r3, [r4, #0]
 801e402:	3404      	addlt	r4, #4
 801e404:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e408:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801e40a:	8813      	ldrh	r3, [r2, #0]
 801e40c:	2b69      	cmp	r3, #105	; 0x69
 801e40e:	f43f af2b 	beq.w	801e268 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e412:	f63f af39 	bhi.w	801e288 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801e416:	2b58      	cmp	r3, #88	; 0x58
 801e418:	f43f af26 	beq.w	801e268 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e41c:	f63f af20 	bhi.w	801e260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801e420:	2b25      	cmp	r3, #37	; 0x25
 801e422:	f43f af3c 	beq.w	801e29e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801e426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e428:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e42c:	f8b9 2000 	ldrh.w	r2, [r9]
 801e430:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e434:	3301      	adds	r3, #1
 801e436:	930d      	str	r3, [sp, #52]	; 0x34
 801e438:	e734      	b.n	801e2a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801e43c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e43e:	4605      	mov	r5, r0
 801e440:	b0a1      	sub	sp, #132	; 0x84
 801e442:	4610      	mov	r0, r2
 801e444:	460e      	mov	r6, r1
 801e446:	4614      	mov	r4, r2
 801e448:	461f      	mov	r7, r3
 801e44a:	f7ff fd33 	bl	801deb4 <_ZN8touchgfx7Unicode6strlenEPKc>
 801e44e:	283f      	cmp	r0, #63	; 0x3f
 801e450:	d906      	bls.n	801e460 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801e452:	4b0a      	ldr	r3, [pc, #40]	; (801e47c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801e454:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801e458:	4a09      	ldr	r2, [pc, #36]	; (801e480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801e45a:	480a      	ldr	r0, [pc, #40]	; (801e484 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801e45c:	f009 ffac 	bl	80283b8 <__assert_func>
 801e460:	4621      	mov	r1, r4
 801e462:	2240      	movs	r2, #64	; 0x40
 801e464:	4668      	mov	r0, sp
 801e466:	f7ff fd31 	bl	801decc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e46a:	463b      	mov	r3, r7
 801e46c:	466a      	mov	r2, sp
 801e46e:	4631      	mov	r1, r6
 801e470:	4628      	mov	r0, r5
 801e472:	f7ff febe 	bl	801e1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801e476:	b021      	add	sp, #132	; 0x84
 801e478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e47a:	bf00      	nop
 801e47c:	0802ce71 	.word	0x0802ce71
 801e480:	0802cf43 	.word	0x0802cf43
 801e484:	0802ce8e 	.word	0x0802ce8e

0801e488 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e488:	b40c      	push	{r2, r3}
 801e48a:	b507      	push	{r0, r1, r2, lr}
 801e48c:	ab04      	add	r3, sp, #16
 801e48e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e492:	9301      	str	r3, [sp, #4]
 801e494:	f7ff ffd2 	bl	801e43c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e498:	b003      	add	sp, #12
 801e49a:	f85d eb04 	ldr.w	lr, [sp], #4
 801e49e:	b002      	add	sp, #8
 801e4a0:	4770      	bx	lr
	...

0801e4a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801e4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a8:	b0c3      	sub	sp, #268	; 0x10c
 801e4aa:	2400      	movs	r4, #0
 801e4ac:	4606      	mov	r6, r0
 801e4ae:	4689      	mov	r9, r1
 801e4b0:	af10      	add	r7, sp, #64	; 0x40
 801e4b2:	9209      	str	r2, [sp, #36]	; 0x24
 801e4b4:	4621      	mov	r1, r4
 801e4b6:	22c8      	movs	r2, #200	; 0xc8
 801e4b8:	4638      	mov	r0, r7
 801e4ba:	469a      	mov	sl, r3
 801e4bc:	940c      	str	r4, [sp, #48]	; 0x30
 801e4be:	f7fe fc94 	bl	801cdea <_ZN8touchgfx6memsetEPvhm>
 801e4c2:	b116      	cbz	r6, 801e4ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4c6:	b923      	cbnz	r3, 801e4d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801e4c8:	8033      	strh	r3, [r6, #0]
 801e4ca:	4630      	mov	r0, r6
 801e4cc:	b043      	add	sp, #268	; 0x10c
 801e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4d2:	f109 3bff 	add.w	fp, r9, #4294967295
 801e4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4da:	8812      	ldrh	r2, [r2, #0]
 801e4dc:	2a00      	cmp	r2, #0
 801e4de:	f000 80d1 	beq.w	801e684 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e4e2:	459b      	cmp	fp, r3
 801e4e4:	f340 80ce 	ble.w	801e684 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e4e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4ec:	882a      	ldrh	r2, [r5, #0]
 801e4ee:	2a00      	cmp	r2, #0
 801e4f0:	d0f1      	beq.n	801e4d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e4f2:	2a25      	cmp	r2, #37	; 0x25
 801e4f4:	f000 80ca 	beq.w	801e68c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801e4f8:	459b      	cmp	fp, r3
 801e4fa:	ddec      	ble.n	801e4d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e4fc:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e500:	3502      	adds	r5, #2
 801e502:	3301      	adds	r3, #1
 801e504:	9509      	str	r5, [sp, #36]	; 0x24
 801e506:	930c      	str	r3, [sp, #48]	; 0x30
 801e508:	e7ee      	b.n	801e4e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801e50a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e50e:	3202      	adds	r2, #2
 801e510:	920c      	str	r2, [sp, #48]	; 0x30
 801e512:	e0ac      	b.n	801e66e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801e514:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e518:	970f      	str	r7, [sp, #60]	; 0x3c
 801e51a:	3401      	adds	r4, #1
 801e51c:	edd3 7a00 	vldr	s15, [r3]
 801e520:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e524:	b923      	cbnz	r3, 801e530 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801e526:	2301      	movs	r3, #1
 801e528:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e52c:	2303      	movs	r3, #3
 801e52e:	930e      	str	r3, [sp, #56]	; 0x38
 801e530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e534:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e536:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801e53a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801e738 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801e53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e542:	bf42      	ittt	mi
 801e544:	232d      	movmi	r3, #45	; 0x2d
 801e546:	eef1 7a67 	vnegmi.f32	s15, s15
 801e54a:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801e54e:	2300      	movs	r3, #0
 801e550:	4298      	cmp	r0, r3
 801e552:	dd03      	ble.n	801e55c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801e554:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e558:	3301      	adds	r3, #1
 801e55a:	e7f9      	b.n	801e550 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801e55c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e564:	eeb0 7a67 	vmov.f32	s14, s15
 801e568:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e570:	da26      	bge.n	801e5c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801e572:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801e576:	eba9 0202 	sub.w	r2, r9, r2
 801e57a:	2100      	movs	r1, #0
 801e57c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e580:	b28d      	uxth	r5, r1
 801e582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e586:	db21      	blt.n	801e5cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e588:	1a53      	subs	r3, r2, r1
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	dd1e      	ble.n	801e5cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e58e:	2963      	cmp	r1, #99	; 0x63
 801e590:	d01b      	beq.n	801e5ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801e592:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e596:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801e59a:	ee17 3a10 	vmov	r3, s14
 801e59e:	2b09      	cmp	r3, #9
 801e5a0:	bfa8      	it	ge
 801e5a2:	2309      	movge	r3, #9
 801e5a4:	ee07 3a10 	vmov	s14, r3
 801e5a8:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801e5ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5b0:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801e5b4:	3101      	adds	r1, #1
 801e5b6:	eee7 7a66 	vfms.f32	s15, s14, s13
 801e5ba:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801e5be:	e7dd      	b.n	801e57c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801e5c0:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e5c4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e5c8:	e7ce      	b.n	801e568 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801e5ca:	460d      	mov	r5, r1
 801e5cc:	2a63      	cmp	r2, #99	; 0x63
 801e5ce:	bfd4      	ite	le
 801e5d0:	ebc5 0202 	rsble	r2, r5, r2
 801e5d4:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801e5d8:	2a00      	cmp	r2, #0
 801e5da:	dd4e      	ble.n	801e67a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801e5dc:	4603      	mov	r3, r0
 801e5de:	f04f 0801 	mov.w	r8, #1
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	dd0e      	ble.n	801e604 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801e5e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801e5ea:	210a      	movs	r1, #10
 801e5ec:	3b01      	subs	r3, #1
 801e5ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e5f2:	ee17 ca10 	vmov	ip, s14
 801e5f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5fa:	fb01 c808 	mla	r8, r1, r8, ip
 801e5fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e602:	e7ee      	b.n	801e5e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801e604:	2800      	cmp	r0, #0
 801e606:	f100 33ff 	add.w	r3, r0, #4294967295
 801e60a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801e60e:	bfac      	ite	ge
 801e610:	1a18      	subge	r0, r3, r0
 801e612:	4618      	movlt	r0, r3
 801e614:	b292      	uxth	r2, r2
 801e616:	230a      	movs	r3, #10
 801e618:	900e      	str	r0, [sp, #56]	; 0x38
 801e61a:	1979      	adds	r1, r7, r5
 801e61c:	4640      	mov	r0, r8
 801e61e:	f7ff fc84 	bl	801df2a <_ZN8touchgfx7Unicode4itoaElPtti>
 801e622:	f1b8 0f01 	cmp.w	r8, #1
 801e626:	dc26      	bgt.n	801e676 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801e628:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	bf0c      	ite	eq
 801e630:	2300      	moveq	r3, #0
 801e632:	232e      	movne	r3, #46	; 0x2e
 801e634:	aa42      	add	r2, sp, #264	; 0x108
 801e636:	4415      	add	r5, r2
 801e638:	aa0c      	add	r2, sp, #48	; 0x30
 801e63a:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801e63e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e642:	a80f      	add	r0, sp, #60	; 0x3c
 801e644:	9205      	str	r2, [sp, #20]
 801e646:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801e64a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e64e:	9204      	str	r2, [sp, #16]
 801e650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e652:	9203      	str	r2, [sp, #12]
 801e654:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801e658:	9202      	str	r2, [sp, #8]
 801e65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e65c:	9201      	str	r2, [sp, #4]
 801e65e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801e662:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801e666:	9200      	str	r2, [sp, #0]
 801e668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e66a:	f7ff fc9f 	bl	801dfac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801e66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e670:	3302      	adds	r3, #2
 801e672:	9309      	str	r3, [sp, #36]	; 0x24
 801e674:	e72f      	b.n	801e4d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e676:	232e      	movs	r3, #46	; 0x2e
 801e678:	e7dc      	b.n	801e634 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801e67a:	ab42      	add	r3, sp, #264	; 0x108
 801e67c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e680:	2300      	movs	r3, #0
 801e682:	e7d9      	b.n	801e638 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801e684:	2200      	movs	r2, #0
 801e686:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e68a:	e71e      	b.n	801e4ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e68c:	459b      	cmp	fp, r3
 801e68e:	f77f af22 	ble.w	801e4d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e692:	2300      	movs	r3, #0
 801e694:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801e698:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801e69c:	a809      	add	r0, sp, #36	; 0x24
 801e69e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e6a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e6a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e6aa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801e6ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801e6b2:	930d      	str	r3, [sp, #52]	; 0x34
 801e6b4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e6b8:	930e      	str	r3, [sp, #56]	; 0x38
 801e6ba:	1cab      	adds	r3, r5, #2
 801e6bc:	9309      	str	r3, [sp, #36]	; 0x24
 801e6be:	ab0e      	add	r3, sp, #56	; 0x38
 801e6c0:	9304      	str	r3, [sp, #16]
 801e6c2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801e6c6:	9303      	str	r3, [sp, #12]
 801e6c8:	ab0d      	add	r3, sp, #52	; 0x34
 801e6ca:	9302      	str	r3, [sp, #8]
 801e6cc:	ab0b      	add	r3, sp, #44	; 0x2c
 801e6ce:	9301      	str	r3, [sp, #4]
 801e6d0:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801e6d4:	9300      	str	r3, [sp, #0]
 801e6d6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801e6da:	f7ff fd17 	bl	801e10c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801e6de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	da0b      	bge.n	801e6fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801e6e4:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e6e8:	3401      	adds	r4, #1
 801e6ea:	edd3 7a00 	vldr	s15, [r3]
 801e6ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e6f2:	ee17 3a90 	vmov	r3, s15
 801e6f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6fa:	930d      	str	r3, [sp, #52]	; 0x34
 801e6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	da0b      	bge.n	801e71a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801e702:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e706:	3401      	adds	r4, #1
 801e708:	edd3 7a00 	vldr	s15, [r3]
 801e70c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e710:	ee17 3a90 	vmov	r3, s15
 801e714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e718:	930e      	str	r3, [sp, #56]	; 0x38
 801e71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e71c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e71e:	881b      	ldrh	r3, [r3, #0]
 801e720:	2b25      	cmp	r3, #37	; 0x25
 801e722:	f43f aef2 	beq.w	801e50a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801e726:	2b66      	cmp	r3, #102	; 0x66
 801e728:	f43f aef4 	beq.w	801e514 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801e72c:	9509      	str	r5, [sp, #36]	; 0x24
 801e72e:	882b      	ldrh	r3, [r5, #0]
 801e730:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e734:	3201      	adds	r2, #1
 801e736:	e6eb      	b.n	801e510 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801e738:	3f000002 	.word	0x3f000002

0801e73c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801e73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e73e:	4605      	mov	r5, r0
 801e740:	b0a1      	sub	sp, #132	; 0x84
 801e742:	4610      	mov	r0, r2
 801e744:	460e      	mov	r6, r1
 801e746:	4614      	mov	r4, r2
 801e748:	461f      	mov	r7, r3
 801e74a:	f7ff fbb3 	bl	801deb4 <_ZN8touchgfx7Unicode6strlenEPKc>
 801e74e:	283f      	cmp	r0, #63	; 0x3f
 801e750:	d906      	bls.n	801e760 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801e752:	4b0a      	ldr	r3, [pc, #40]	; (801e77c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801e754:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801e758:	4a09      	ldr	r2, [pc, #36]	; (801e780 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801e75a:	480a      	ldr	r0, [pc, #40]	; (801e784 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801e75c:	f009 fe2c 	bl	80283b8 <__assert_func>
 801e760:	4621      	mov	r1, r4
 801e762:	2240      	movs	r2, #64	; 0x40
 801e764:	4668      	mov	r0, sp
 801e766:	f7ff fbb1 	bl	801decc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e76a:	463b      	mov	r3, r7
 801e76c:	466a      	mov	r2, sp
 801e76e:	4631      	mov	r1, r6
 801e770:	4628      	mov	r0, r5
 801e772:	f7ff fe97 	bl	801e4a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801e776:	b021      	add	sp, #132	; 0x84
 801e778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e77a:	bf00      	nop
 801e77c:	0802ce71 	.word	0x0802ce71
 801e780:	0802ceb4 	.word	0x0802ceb4
 801e784:	0802ce8e 	.word	0x0802ce8e

0801e788 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e788:	4b01      	ldr	r3, [pc, #4]	; (801e790 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e78a:	6018      	str	r0, [r3, #0]
 801e78c:	4770      	bx	lr
 801e78e:	bf00      	nop
 801e790:	2000bf8c 	.word	0x2000bf8c

0801e794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e794:	4b07      	ldr	r3, [pc, #28]	; (801e7b4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801e796:	881a      	ldrh	r2, [r3, #0]
 801e798:	4282      	cmp	r2, r0
 801e79a:	d809      	bhi.n	801e7b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e79c:	4b06      	ldr	r3, [pc, #24]	; (801e7b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801e79e:	881b      	ldrh	r3, [r3, #0]
 801e7a0:	4413      	add	r3, r2
 801e7a2:	4298      	cmp	r0, r3
 801e7a4:	da04      	bge.n	801e7b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e7a6:	4b05      	ldr	r3, [pc, #20]	; (801e7bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e7ae:	4770      	bx	lr
 801e7b0:	2000      	movs	r0, #0
 801e7b2:	4770      	bx	lr
 801e7b4:	2000bfac 	.word	0x2000bfac
 801e7b8:	2000bfb0 	.word	0x2000bfb0
 801e7bc:	2000bf90 	.word	0x2000bf90

0801e7c0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7c4:	4d26      	ldr	r5, [pc, #152]	; (801e860 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e7c6:	682b      	ldr	r3, [r5, #0]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d046      	beq.n	801e85a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801e7cc:	4a25      	ldr	r2, [pc, #148]	; (801e864 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e7ce:	4f26      	ldr	r7, [pc, #152]	; (801e868 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e7d0:	8810      	ldrh	r0, [r2, #0]
 801e7d2:	883c      	ldrh	r4, [r7, #0]
 801e7d4:	4e25      	ldr	r6, [pc, #148]	; (801e86c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e7d6:	4420      	add	r0, r4
 801e7d8:	1c42      	adds	r2, r0, #1
 801e7da:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801e7de:	f022 0201 	bic.w	r2, r2, #1
 801e7e2:	0412      	lsls	r2, r2, #16
 801e7e4:	0c12      	lsrs	r2, r2, #16
 801e7e6:	0051      	lsls	r1, r2, #1
 801e7e8:	220e      	movs	r2, #14
 801e7ea:	eb08 0e01 	add.w	lr, r8, r1
 801e7ee:	fb02 fc04 	mul.w	ip, r2, r4
 801e7f2:	eb03 0208 	add.w	r2, r3, r8
 801e7f6:	4c1e      	ldr	r4, [pc, #120]	; (801e870 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e7f8:	6022      	str	r2, [r4, #0]
 801e7fa:	eb03 020e 	add.w	r2, r3, lr
 801e7fe:	44e6      	add	lr, ip
 801e800:	6032      	str	r2, [r6, #0]
 801e802:	4473      	add	r3, lr
 801e804:	4a1b      	ldr	r2, [pc, #108]	; (801e874 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e806:	6013      	str	r3, [r2, #0]
 801e808:	2300      	movs	r3, #0
 801e80a:	4a1b      	ldr	r2, [pc, #108]	; (801e878 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e80c:	8013      	strh	r3, [r2, #0]
 801e80e:	4a1b      	ldr	r2, [pc, #108]	; (801e87c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e810:	6812      	ldr	r2, [r2, #0]
 801e812:	eba2 0208 	sub.w	r2, r2, r8
 801e816:	1a52      	subs	r2, r2, r1
 801e818:	4919      	ldr	r1, [pc, #100]	; (801e880 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801e81a:	eba2 020c 	sub.w	r2, r2, ip
 801e81e:	469c      	mov	ip, r3
 801e820:	600a      	str	r2, [r1, #0]
 801e822:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e826:	4a17      	ldr	r2, [pc, #92]	; (801e884 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801e828:	8013      	strh	r3, [r2, #0]
 801e82a:	4283      	cmp	r3, r0
 801e82c:	d10d      	bne.n	801e84a <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801e82e:	883d      	ldrh	r5, [r7, #0]
 801e830:	2300      	movs	r3, #0
 801e832:	6830      	ldr	r0, [r6, #0]
 801e834:	240e      	movs	r4, #14
 801e836:	429d      	cmp	r5, r3
 801e838:	d90f      	bls.n	801e85a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801e83a:	fb04 0203 	mla	r2, r4, r3, r0
 801e83e:	3301      	adds	r3, #1
 801e840:	7b11      	ldrb	r1, [r2, #12]
 801e842:	f36f 1145 	bfc	r1, #5, #1
 801e846:	7311      	strb	r1, [r2, #12]
 801e848:	e7f5      	b.n	801e836 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801e84a:	682a      	ldr	r2, [r5, #0]
 801e84c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e850:	6822      	ldr	r2, [r4, #0]
 801e852:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e856:	3301      	adds	r3, #1
 801e858:	e7e7      	b.n	801e82a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801e85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e85e:	bf00      	nop
 801e860:	2000bf90 	.word	0x2000bf90
 801e864:	2000bfac 	.word	0x2000bfac
 801e868:	2000bfb0 	.word	0x2000bfb0
 801e86c:	2000bf94 	.word	0x2000bf94
 801e870:	2000bfa4 	.word	0x2000bfa4
 801e874:	2000bf9c 	.word	0x2000bf9c
 801e878:	2000bfae 	.word	0x2000bfae
 801e87c:	2000bf98 	.word	0x2000bf98
 801e880:	2000bfa8 	.word	0x2000bfa8
 801e884:	2000bfa0 	.word	0x2000bfa0

0801e888 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e888:	4b10      	ldr	r3, [pc, #64]	; (801e8cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e88a:	b510      	push	{r4, lr}
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	b9db      	cbnz	r3, 801e8c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e890:	b1d1      	cbz	r1, 801e8c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e892:	4b0f      	ldr	r3, [pc, #60]	; (801e8d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e894:	240e      	movs	r4, #14
 801e896:	801a      	strh	r2, [r3, #0]
 801e898:	b292      	uxth	r2, r2
 801e89a:	4b0e      	ldr	r3, [pc, #56]	; (801e8d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e89c:	881b      	ldrh	r3, [r3, #0]
 801e89e:	4413      	add	r3, r2
 801e8a0:	4362      	muls	r2, r4
 801e8a2:	2406      	movs	r4, #6
 801e8a4:	fb04 2203 	mla	r2, r4, r3, r2
 801e8a8:	428a      	cmp	r2, r1
 801e8aa:	d305      	bcc.n	801e8b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e8ac:	4b0a      	ldr	r3, [pc, #40]	; (801e8d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e8ae:	2137      	movs	r1, #55	; 0x37
 801e8b0:	4a0a      	ldr	r2, [pc, #40]	; (801e8dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e8b2:	480b      	ldr	r0, [pc, #44]	; (801e8e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e8b4:	f009 fd80 	bl	80283b8 <__assert_func>
 801e8b8:	4b0a      	ldr	r3, [pc, #40]	; (801e8e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e8ba:	6019      	str	r1, [r3, #0]
 801e8bc:	4b0a      	ldr	r3, [pc, #40]	; (801e8e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e8be:	6018      	str	r0, [r3, #0]
 801e8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8c4:	f7ff bf7c 	b.w	801e7c0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e8c8:	bd10      	pop	{r4, pc}
 801e8ca:	bf00      	nop
 801e8cc:	2000bf9c 	.word	0x2000bf9c
 801e8d0:	2000bfb0 	.word	0x2000bfb0
 801e8d4:	2000bfac 	.word	0x2000bfac
 801e8d8:	0802d025 	.word	0x0802d025
 801e8dc:	0802d07e 	.word	0x0802d07e
 801e8e0:	0802d000 	.word	0x0802d000
 801e8e4:	2000bf98 	.word	0x2000bf98
 801e8e8:	2000bf90 	.word	0x2000bf90

0801e8ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e8ec:	b470      	push	{r4, r5, r6}
 801e8ee:	4c07      	ldr	r4, [pc, #28]	; (801e90c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e8f0:	4605      	mov	r5, r0
 801e8f2:	4610      	mov	r0, r2
 801e8f4:	9a03      	ldr	r2, [sp, #12]
 801e8f6:	6826      	ldr	r6, [r4, #0]
 801e8f8:	b936      	cbnz	r6, 801e908 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e8fa:	6025      	str	r5, [r4, #0]
 801e8fc:	4c04      	ldr	r4, [pc, #16]	; (801e910 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e8fe:	8021      	strh	r1, [r4, #0]
 801e900:	4619      	mov	r1, r3
 801e902:	bc70      	pop	{r4, r5, r6}
 801e904:	f7ff bfc0 	b.w	801e888 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e908:	bc70      	pop	{r4, r5, r6}
 801e90a:	4770      	bx	lr
 801e90c:	2000bfb4 	.word	0x2000bfb4
 801e910:	2000bfac 	.word	0x2000bfac

0801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e914:	b508      	push	{r3, lr}
 801e916:	4b14      	ldr	r3, [pc, #80]	; (801e968 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e918:	6819      	ldr	r1, [r3, #0]
 801e91a:	b931      	cbnz	r1, 801e92a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e91c:	4b13      	ldr	r3, [pc, #76]	; (801e96c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e91e:	f240 21e6 	movw	r1, #742	; 0x2e6
 801e922:	4a13      	ldr	r2, [pc, #76]	; (801e970 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e924:	4813      	ldr	r0, [pc, #76]	; (801e974 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e926:	f009 fd47 	bl	80283b8 <__assert_func>
 801e92a:	4a13      	ldr	r2, [pc, #76]	; (801e978 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e92c:	8803      	ldrh	r3, [r0, #0]
 801e92e:	8812      	ldrh	r2, [r2, #0]
 801e930:	4293      	cmp	r3, r2
 801e932:	d204      	bcs.n	801e93e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e934:	2214      	movs	r2, #20
 801e936:	fb02 1303 	mla	r3, r2, r3, r1
 801e93a:	8918      	ldrh	r0, [r3, #8]
 801e93c:	bd08      	pop	{r3, pc}
 801e93e:	490f      	ldr	r1, [pc, #60]	; (801e97c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e940:	8809      	ldrh	r1, [r1, #0]
 801e942:	4411      	add	r1, r2
 801e944:	428b      	cmp	r3, r1
 801e946:	da06      	bge.n	801e956 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e948:	1a9b      	subs	r3, r3, r2
 801e94a:	4a0d      	ldr	r2, [pc, #52]	; (801e980 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e94c:	210e      	movs	r1, #14
 801e94e:	6812      	ldr	r2, [r2, #0]
 801e950:	fb01 2303 	mla	r3, r1, r3, r2
 801e954:	e7f1      	b.n	801e93a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e956:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e95a:	4293      	cmp	r3, r2
 801e95c:	bf0a      	itet	eq
 801e95e:	4b09      	ldreq	r3, [pc, #36]	; (801e984 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e960:	2000      	movne	r0, #0
 801e962:	8818      	ldrheq	r0, [r3, #0]
 801e964:	e7ea      	b.n	801e93c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e966:	bf00      	nop
 801e968:	2000bfb4 	.word	0x2000bfb4
 801e96c:	0802af00 	.word	0x0802af00
 801e970:	0802d12b 	.word	0x0802d12b
 801e974:	0802d000 	.word	0x0802d000
 801e978:	2000bfac 	.word	0x2000bfac
 801e97c:	2000bfb0 	.word	0x2000bfb0
 801e980:	2000bf94 	.word	0x2000bf94
 801e984:	2000bede 	.word	0x2000bede

0801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e988:	b508      	push	{r3, lr}
 801e98a:	4b14      	ldr	r3, [pc, #80]	; (801e9dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e98c:	6819      	ldr	r1, [r3, #0]
 801e98e:	b931      	cbnz	r1, 801e99e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e990:	4b13      	ldr	r3, [pc, #76]	; (801e9e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e992:	f240 21fa 	movw	r1, #762	; 0x2fa
 801e996:	4a13      	ldr	r2, [pc, #76]	; (801e9e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e998:	4813      	ldr	r0, [pc, #76]	; (801e9e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e99a:	f009 fd0d 	bl	80283b8 <__assert_func>
 801e99e:	4a13      	ldr	r2, [pc, #76]	; (801e9ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e9a0:	8803      	ldrh	r3, [r0, #0]
 801e9a2:	8812      	ldrh	r2, [r2, #0]
 801e9a4:	4293      	cmp	r3, r2
 801e9a6:	d204      	bcs.n	801e9b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e9a8:	2214      	movs	r2, #20
 801e9aa:	fb02 1303 	mla	r3, r2, r3, r1
 801e9ae:	8958      	ldrh	r0, [r3, #10]
 801e9b0:	bd08      	pop	{r3, pc}
 801e9b2:	490f      	ldr	r1, [pc, #60]	; (801e9f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e9b4:	8809      	ldrh	r1, [r1, #0]
 801e9b6:	4411      	add	r1, r2
 801e9b8:	428b      	cmp	r3, r1
 801e9ba:	da06      	bge.n	801e9ca <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e9bc:	1a9b      	subs	r3, r3, r2
 801e9be:	4a0d      	ldr	r2, [pc, #52]	; (801e9f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e9c0:	210e      	movs	r1, #14
 801e9c2:	6812      	ldr	r2, [r2, #0]
 801e9c4:	fb01 2303 	mla	r3, r1, r3, r2
 801e9c8:	e7f1      	b.n	801e9ae <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e9ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e9ce:	4293      	cmp	r3, r2
 801e9d0:	bf0a      	itet	eq
 801e9d2:	4b09      	ldreq	r3, [pc, #36]	; (801e9f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e9d4:	2000      	movne	r0, #0
 801e9d6:	8818      	ldrheq	r0, [r3, #0]
 801e9d8:	e7ea      	b.n	801e9b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e9da:	bf00      	nop
 801e9dc:	2000bfb4 	.word	0x2000bfb4
 801e9e0:	0802af00 	.word	0x0802af00
 801e9e4:	0802d157 	.word	0x0802d157
 801e9e8:	0802d000 	.word	0x0802d000
 801e9ec:	2000bfac 	.word	0x2000bfac
 801e9f0:	2000bfb0 	.word	0x2000bfb0
 801e9f4:	2000bf94 	.word	0x2000bf94
 801e9f8:	2000bee0 	.word	0x2000bee0

0801e9fc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e9fc:	4b23      	ldr	r3, [pc, #140]	; (801ea8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e9fe:	b510      	push	{r4, lr}
 801ea00:	681c      	ldr	r4, [r3, #0]
 801ea02:	b934      	cbnz	r4, 801ea12 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ea04:	4b22      	ldr	r3, [pc, #136]	; (801ea90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ea06:	f240 310e 	movw	r1, #782	; 0x30e
 801ea0a:	4a22      	ldr	r2, [pc, #136]	; (801ea94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ea0c:	4822      	ldr	r0, [pc, #136]	; (801ea98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ea0e:	f009 fcd3 	bl	80283b8 <__assert_func>
 801ea12:	4a22      	ldr	r2, [pc, #136]	; (801ea9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ea14:	880b      	ldrh	r3, [r1, #0]
 801ea16:	8812      	ldrh	r2, [r2, #0]
 801ea18:	4293      	cmp	r3, r2
 801ea1a:	d211      	bcs.n	801ea40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ea1c:	2214      	movs	r2, #20
 801ea1e:	fb02 4303 	mla	r3, r2, r3, r4
 801ea22:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ea26:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ea2a:	8a1a      	ldrh	r2, [r3, #16]
 801ea2c:	8a5b      	ldrh	r3, [r3, #18]
 801ea2e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ea32:	8004      	strh	r4, [r0, #0]
 801ea34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ea38:	8041      	strh	r1, [r0, #2]
 801ea3a:	8082      	strh	r2, [r0, #4]
 801ea3c:	80c3      	strh	r3, [r0, #6]
 801ea3e:	e00e      	b.n	801ea5e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ea40:	4917      	ldr	r1, [pc, #92]	; (801eaa0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ea42:	8809      	ldrh	r1, [r1, #0]
 801ea44:	4411      	add	r1, r2
 801ea46:	428b      	cmp	r3, r1
 801ea48:	da0a      	bge.n	801ea60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ea4a:	1a9b      	subs	r3, r3, r2
 801ea4c:	4a15      	ldr	r2, [pc, #84]	; (801eaa4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ea4e:	210e      	movs	r1, #14
 801ea50:	6812      	ldr	r2, [r2, #0]
 801ea52:	fb01 2303 	mla	r3, r1, r3, r2
 801ea56:	681a      	ldr	r2, [r3, #0]
 801ea58:	6002      	str	r2, [r0, #0]
 801ea5a:	685a      	ldr	r2, [r3, #4]
 801ea5c:	6042      	str	r2, [r0, #4]
 801ea5e:	bd10      	pop	{r4, pc}
 801ea60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ea64:	4293      	cmp	r3, r2
 801ea66:	d10b      	bne.n	801ea80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ea68:	4b0f      	ldr	r3, [pc, #60]	; (801eaa8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ea6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ea6e:	4b0f      	ldr	r3, [pc, #60]	; (801eaac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ea70:	8081      	strh	r1, [r0, #4]
 801ea72:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ea76:	2300      	movs	r3, #0
 801ea78:	80c2      	strh	r2, [r0, #6]
 801ea7a:	8003      	strh	r3, [r0, #0]
 801ea7c:	8043      	strh	r3, [r0, #2]
 801ea7e:	e7ee      	b.n	801ea5e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ea80:	2300      	movs	r3, #0
 801ea82:	8003      	strh	r3, [r0, #0]
 801ea84:	8043      	strh	r3, [r0, #2]
 801ea86:	8083      	strh	r3, [r0, #4]
 801ea88:	e7d8      	b.n	801ea3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801ea8a:	bf00      	nop
 801ea8c:	2000bfb4 	.word	0x2000bfb4
 801ea90:	0802af00 	.word	0x0802af00
 801ea94:	0802d0c4 	.word	0x0802d0c4
 801ea98:	0802d000 	.word	0x0802d000
 801ea9c:	2000bfac 	.word	0x2000bfac
 801eaa0:	2000bfb0 	.word	0x2000bfb0
 801eaa4:	2000bf94 	.word	0x2000bf94
 801eaa8:	2000bede 	.word	0x2000bede
 801eaac:	2000bee0 	.word	0x2000bee0

0801eab0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801eab0:	4b18      	ldr	r3, [pc, #96]	; (801eb14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	b34b      	cbz	r3, 801eb0a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801eab6:	4a18      	ldr	r2, [pc, #96]	; (801eb18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801eab8:	8800      	ldrh	r0, [r0, #0]
 801eaba:	8812      	ldrh	r2, [r2, #0]
 801eabc:	4290      	cmp	r0, r2
 801eabe:	d211      	bcs.n	801eae4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801eac0:	2214      	movs	r2, #20
 801eac2:	fb02 3300 	mla	r3, r2, r0, r3
 801eac6:	8a1a      	ldrh	r2, [r3, #16]
 801eac8:	8919      	ldrh	r1, [r3, #8]
 801eaca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801eace:	428a      	cmp	r2, r1
 801ead0:	db1d      	blt.n	801eb0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ead2:	8a58      	ldrh	r0, [r3, #18]
 801ead4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ead8:	895b      	ldrh	r3, [r3, #10]
 801eada:	4298      	cmp	r0, r3
 801eadc:	bfac      	ite	ge
 801eade:	2000      	movge	r0, #0
 801eae0:	2001      	movlt	r0, #1
 801eae2:	4770      	bx	lr
 801eae4:	4b0d      	ldr	r3, [pc, #52]	; (801eb1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801eae6:	881b      	ldrh	r3, [r3, #0]
 801eae8:	4413      	add	r3, r2
 801eaea:	4298      	cmp	r0, r3
 801eaec:	da0d      	bge.n	801eb0a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801eaee:	4b0c      	ldr	r3, [pc, #48]	; (801eb20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801eaf0:	1a80      	subs	r0, r0, r2
 801eaf2:	220e      	movs	r2, #14
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	fb02 3300 	mla	r3, r2, r0, r3
 801eafa:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801eafe:	891a      	ldrh	r2, [r3, #8]
 801eb00:	4291      	cmp	r1, r2
 801eb02:	db04      	blt.n	801eb0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801eb04:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801eb08:	e7e6      	b.n	801ead8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801eb0a:	2000      	movs	r0, #0
 801eb0c:	4770      	bx	lr
 801eb0e:	2001      	movs	r0, #1
 801eb10:	4770      	bx	lr
 801eb12:	bf00      	nop
 801eb14:	2000bfb4 	.word	0x2000bfb4
 801eb18:	2000bfac 	.word	0x2000bfac
 801eb1c:	2000bfb0 	.word	0x2000bfb0
 801eb20:	2000bf94 	.word	0x2000bf94

0801eb24 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801eb24:	b508      	push	{r3, lr}
 801eb26:	4b12      	ldr	r3, [pc, #72]	; (801eb70 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801eb28:	6819      	ldr	r1, [r3, #0]
 801eb2a:	b931      	cbnz	r1, 801eb3a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801eb2c:	4b11      	ldr	r3, [pc, #68]	; (801eb74 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801eb2e:	f240 3132 	movw	r1, #818	; 0x332
 801eb32:	4a11      	ldr	r2, [pc, #68]	; (801eb78 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801eb34:	4811      	ldr	r0, [pc, #68]	; (801eb7c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801eb36:	f009 fc3f 	bl	80283b8 <__assert_func>
 801eb3a:	8803      	ldrh	r3, [r0, #0]
 801eb3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eb40:	4293      	cmp	r3, r2
 801eb42:	d012      	beq.n	801eb6a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801eb44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eb48:	4293      	cmp	r3, r2
 801eb4a:	d103      	bne.n	801eb54 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801eb4c:	4b0c      	ldr	r3, [pc, #48]	; (801eb80 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801eb52:	bd08      	pop	{r3, pc}
 801eb54:	4a0b      	ldr	r2, [pc, #44]	; (801eb84 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801eb56:	6812      	ldr	r2, [r2, #0]
 801eb58:	b11a      	cbz	r2, 801eb62 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801eb5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801eb5e:	2800      	cmp	r0, #0
 801eb60:	d1f7      	bne.n	801eb52 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801eb62:	2214      	movs	r2, #20
 801eb64:	4353      	muls	r3, r2
 801eb66:	58c8      	ldr	r0, [r1, r3]
 801eb68:	e7f3      	b.n	801eb52 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801eb6a:	2000      	movs	r0, #0
 801eb6c:	e7f1      	b.n	801eb52 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801eb6e:	bf00      	nop
 801eb70:	2000bfb4 	.word	0x2000bfb4
 801eb74:	0802af00 	.word	0x0802af00
 801eb78:	0802d0fa 	.word	0x0802d0fa
 801eb7c:	0802d000 	.word	0x0802d000
 801eb80:	2000beec 	.word	0x2000beec
 801eb84:	2000bf90 	.word	0x2000bf90

0801eb88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801eb88:	8802      	ldrh	r2, [r0, #0]
 801eb8a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801eb8e:	429a      	cmp	r2, r3
 801eb90:	d840      	bhi.n	801ec14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801eb92:	4b21      	ldr	r3, [pc, #132]	; (801ec18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801eb94:	881b      	ldrh	r3, [r3, #0]
 801eb96:	429a      	cmp	r2, r3
 801eb98:	d220      	bcs.n	801ebdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801eb9a:	4b20      	ldr	r3, [pc, #128]	; (801ec1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801eb9c:	6819      	ldr	r1, [r3, #0]
 801eb9e:	2314      	movs	r3, #20
 801eba0:	fb03 1302 	mla	r3, r3, r2, r1
 801eba4:	6858      	ldr	r0, [r3, #4]
 801eba6:	2800      	cmp	r0, #0
 801eba8:	d035      	beq.n	801ec16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ebaa:	491d      	ldr	r1, [pc, #116]	; (801ec20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ebac:	6809      	ldr	r1, [r1, #0]
 801ebae:	2900      	cmp	r1, #0
 801ebb0:	d031      	beq.n	801ec16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ebb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ebb6:	b371      	cbz	r1, 801ec16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ebb8:	895a      	ldrh	r2, [r3, #10]
 801ebba:	8918      	ldrh	r0, [r3, #8]
 801ebbc:	4350      	muls	r0, r2
 801ebbe:	7c5a      	ldrb	r2, [r3, #17]
 801ebc0:	7cdb      	ldrb	r3, [r3, #19]
 801ebc2:	0952      	lsrs	r2, r2, #5
 801ebc4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ebc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ebcc:	2b0b      	cmp	r3, #11
 801ebce:	bf18      	it	ne
 801ebd0:	0040      	lslne	r0, r0, #1
 801ebd2:	3003      	adds	r0, #3
 801ebd4:	f020 0003 	bic.w	r0, r0, #3
 801ebd8:	4408      	add	r0, r1
 801ebda:	4770      	bx	lr
 801ebdc:	4911      	ldr	r1, [pc, #68]	; (801ec24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ebde:	8809      	ldrh	r1, [r1, #0]
 801ebe0:	4419      	add	r1, r3
 801ebe2:	428a      	cmp	r2, r1
 801ebe4:	da16      	bge.n	801ec14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ebe6:	4910      	ldr	r1, [pc, #64]	; (801ec28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ebe8:	1ad3      	subs	r3, r2, r3
 801ebea:	200e      	movs	r0, #14
 801ebec:	6809      	ldr	r1, [r1, #0]
 801ebee:	fb00 1303 	mla	r3, r0, r3, r1
 801ebf2:	7b19      	ldrb	r1, [r3, #12]
 801ebf4:	f001 011f 	and.w	r1, r1, #31
 801ebf8:	290b      	cmp	r1, #11
 801ebfa:	d10b      	bne.n	801ec14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ebfc:	8919      	ldrh	r1, [r3, #8]
 801ebfe:	8958      	ldrh	r0, [r3, #10]
 801ec00:	4b07      	ldr	r3, [pc, #28]	; (801ec20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ec02:	4348      	muls	r0, r1
 801ec04:	6819      	ldr	r1, [r3, #0]
 801ec06:	3003      	adds	r0, #3
 801ec08:	f020 0303 	bic.w	r3, r0, #3
 801ec0c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ec10:	4418      	add	r0, r3
 801ec12:	4770      	bx	lr
 801ec14:	2000      	movs	r0, #0
 801ec16:	4770      	bx	lr
 801ec18:	2000bfac 	.word	0x2000bfac
 801ec1c:	2000bfb4 	.word	0x2000bfb4
 801ec20:	2000bf90 	.word	0x2000bf90
 801ec24:	2000bfb0 	.word	0x2000bfb0
 801ec28:	2000bf94 	.word	0x2000bf94

0801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ec2c:	4b19      	ldr	r3, [pc, #100]	; (801ec94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ec2e:	6819      	ldr	r1, [r3, #0]
 801ec30:	8803      	ldrh	r3, [r0, #0]
 801ec32:	b1e9      	cbz	r1, 801ec70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ec34:	4a18      	ldr	r2, [pc, #96]	; (801ec98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ec36:	8812      	ldrh	r2, [r2, #0]
 801ec38:	429a      	cmp	r2, r3
 801ec3a:	d90a      	bls.n	801ec52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ec3c:	2214      	movs	r2, #20
 801ec3e:	fb02 1303 	mla	r3, r2, r3, r1
 801ec42:	7c58      	ldrb	r0, [r3, #17]
 801ec44:	0942      	lsrs	r2, r0, #5
 801ec46:	7cd8      	ldrb	r0, [r3, #19]
 801ec48:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ec4c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ec50:	4770      	bx	lr
 801ec52:	4912      	ldr	r1, [pc, #72]	; (801ec9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801ec54:	8809      	ldrh	r1, [r1, #0]
 801ec56:	4411      	add	r1, r2
 801ec58:	428b      	cmp	r3, r1
 801ec5a:	da09      	bge.n	801ec70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ec5c:	1a9b      	subs	r3, r3, r2
 801ec5e:	4a10      	ldr	r2, [pc, #64]	; (801eca0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801ec60:	210e      	movs	r1, #14
 801ec62:	6812      	ldr	r2, [r2, #0]
 801ec64:	fb01 2303 	mla	r3, r1, r3, r2
 801ec68:	7b18      	ldrb	r0, [r3, #12]
 801ec6a:	f000 001f 	and.w	r0, r0, #31
 801ec6e:	4770      	bx	lr
 801ec70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ec74:	4293      	cmp	r3, r2
 801ec76:	d10a      	bne.n	801ec8e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801ec78:	4b0a      	ldr	r3, [pc, #40]	; (801eca4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801ec7a:	681b      	ldr	r3, [r3, #0]
 801ec7c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ec80:	b10a      	cbz	r2, 801ec86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801ec82:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ec84:	b900      	cbnz	r0, 801ec88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ec86:	6898      	ldr	r0, [r3, #8]
 801ec88:	6803      	ldr	r3, [r0, #0]
 801ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec8c:	4718      	bx	r3
 801ec8e:	2000      	movs	r0, #0
 801ec90:	4770      	bx	lr
 801ec92:	bf00      	nop
 801ec94:	2000bfb4 	.word	0x2000bfb4
 801ec98:	2000bfac 	.word	0x2000bfac
 801ec9c:	2000bfb0 	.word	0x2000bfb0
 801eca0:	2000bf94 	.word	0x2000bf94
 801eca4:	2000beec 	.word	0x2000beec

0801eca8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801eca8:	2018      	movs	r0, #24
 801ecaa:	4770      	bx	lr

0801ecac <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801ecac:	2001      	movs	r0, #1
 801ecae:	4770      	bx	lr

0801ecb0 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801ecb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ecb4:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801ecb8:	4770      	bx	lr

0801ecba <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801ecba:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801ecbe:	4770      	bx	lr

0801ecc0 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801ecc0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801ecc4:	4770      	bx	lr

0801ecc6 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801ecc6:	b2c8      	uxtb	r0, r1
 801ecc8:	4770      	bx	lr

0801ecca <_ZN8touchgfx8LCD24bpp4initEv>:
 801ecca:	4770      	bx	lr

0801eccc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecd0:	b085      	sub	sp, #20
 801ecd2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ecd4:	9203      	str	r2, [sp, #12]
 801ecd6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ecda:	6878      	ldr	r0, [r7, #4]
 801ecdc:	9201      	str	r2, [sp, #4]
 801ecde:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801ece0:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801ece4:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801ece8:	fa1f fc84 	uxth.w	ip, r4
 801ecec:	43e4      	mvns	r4, r4
 801ecee:	9100      	str	r1, [sp, #0]
 801ecf0:	b2e4      	uxtb	r4, r4
 801ecf2:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ecf6:	fb00 2505 	mla	r5, r0, r5, r2
 801ecfa:	683a      	ldr	r2, [r7, #0]
 801ecfc:	6877      	ldr	r7, [r6, #4]
 801ecfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed02:	3704      	adds	r7, #4
 801ed04:	4415      	add	r5, r2
 801ed06:	6832      	ldr	r2, [r6, #0]
 801ed08:	9202      	str	r2, [sp, #8]
 801ed0a:	9a00      	ldr	r2, [sp, #0]
 801ed0c:	2a00      	cmp	r2, #0
 801ed0e:	dc03      	bgt.n	801ed18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ed10:	9a03      	ldr	r2, [sp, #12]
 801ed12:	2a00      	cmp	r2, #0
 801ed14:	f340 8116 	ble.w	801ef44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ed18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed1a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ed1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ed20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	dd0f      	ble.n	801ed48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ed28:	1406      	asrs	r6, r0, #16
 801ed2a:	d406      	bmi.n	801ed3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ed2c:	4546      	cmp	r6, r8
 801ed2e:	da04      	bge.n	801ed3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ed30:	1416      	asrs	r6, r2, #16
 801ed32:	d402      	bmi.n	801ed3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ed34:	9901      	ldr	r1, [sp, #4]
 801ed36:	428e      	cmp	r6, r1
 801ed38:	db07      	blt.n	801ed4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ed3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ed3c:	3b01      	subs	r3, #1
 801ed3e:	3503      	adds	r5, #3
 801ed40:	4408      	add	r0, r1
 801ed42:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ed44:	440a      	add	r2, r1
 801ed46:	e7ed      	b.n	801ed24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801ed48:	d011      	beq.n	801ed6e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801ed4a:	1e5e      	subs	r6, r3, #1
 801ed4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ed4e:	fb01 0e06 	mla	lr, r1, r6, r0
 801ed52:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ed56:	d548      	bpl.n	801edea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801ed58:	4699      	mov	r9, r3
 801ed5a:	462e      	mov	r6, r5
 801ed5c:	f1b9 0f00 	cmp.w	r9, #0
 801ed60:	f300 809e 	bgt.w	801eea0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801ed64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed6c:	441d      	add	r5, r3
 801ed6e:	9b00      	ldr	r3, [sp, #0]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	f340 80e7 	ble.w	801ef44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ed76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed84:	eef0 6a62 	vmov.f32	s13, s5
 801ed88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ed8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed94:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ed98:	eef0 6a43 	vmov.f32	s13, s6
 801ed9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eda0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801eda4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eda8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801edb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801edb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801edbc:	ee12 2a90 	vmov	r2, s5
 801edc0:	eef0 2a47 	vmov.f32	s5, s14
 801edc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801edc8:	ee13 2a10 	vmov	r2, s6
 801edcc:	9311      	str	r3, [sp, #68]	; 0x44
 801edce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edd0:	eeb0 3a67 	vmov.f32	s6, s15
 801edd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801edd8:	9312      	str	r3, [sp, #72]	; 0x48
 801edda:	9b00      	ldr	r3, [sp, #0]
 801eddc:	9a03      	ldr	r2, [sp, #12]
 801edde:	3b01      	subs	r3, #1
 801ede0:	9300      	str	r3, [sp, #0]
 801ede2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ede4:	bf08      	it	eq
 801ede6:	4613      	moveq	r3, r2
 801ede8:	e78f      	b.n	801ed0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801edea:	45c6      	cmp	lr, r8
 801edec:	dab4      	bge.n	801ed58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801edee:	9912      	ldr	r1, [sp, #72]	; 0x48
 801edf0:	fb01 2606 	mla	r6, r1, r6, r2
 801edf4:	1436      	asrs	r6, r6, #16
 801edf6:	d4af      	bmi.n	801ed58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801edf8:	9901      	ldr	r1, [sp, #4]
 801edfa:	428e      	cmp	r6, r1
 801edfc:	daac      	bge.n	801ed58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801edfe:	1cee      	adds	r6, r5, #3
 801ee00:	4699      	mov	r9, r3
 801ee02:	f1b9 0f00 	cmp.w	r9, #0
 801ee06:	f106 0603 	add.w	r6, r6, #3
 801ee0a:	ddab      	ble.n	801ed64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801ee0c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ee10:	9902      	ldr	r1, [sp, #8]
 801ee12:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ee16:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801ee1a:	fb08 1e0e 	mla	lr, r8, lr, r1
 801ee1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ee20:	fb1b fb04 	smulbb	fp, fp, r4
 801ee24:	f109 39ff 	add.w	r9, r9, #4294967295
 801ee28:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801ee2c:	4408      	add	r0, r1
 801ee2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ee30:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ee34:	440a      	add	r2, r1
 801ee36:	eb07 0a0e 	add.w	sl, r7, lr
 801ee3a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ee3e:	fb0e be0c 	mla	lr, lr, ip, fp
 801ee42:	fa1f fe8e 	uxth.w	lr, lr
 801ee46:	f10e 0b01 	add.w	fp, lr, #1
 801ee4a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ee4e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ee52:	fb1b fb04 	smulbb	fp, fp, r4
 801ee56:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ee5a:	f806 ec06 	strb.w	lr, [r6, #-6]
 801ee5e:	f89a e001 	ldrb.w	lr, [sl, #1]
 801ee62:	fb0e be0c 	mla	lr, lr, ip, fp
 801ee66:	fa1f fe8e 	uxth.w	lr, lr
 801ee6a:	f10e 0b01 	add.w	fp, lr, #1
 801ee6e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ee72:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ee76:	f806 ec05 	strb.w	lr, [r6, #-5]
 801ee7a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ee7e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ee82:	fb1a fa04 	smulbb	sl, sl, r4
 801ee86:	fb0e ae0c 	mla	lr, lr, ip, sl
 801ee8a:	fa1f fe8e 	uxth.w	lr, lr
 801ee8e:	f10e 0a01 	add.w	sl, lr, #1
 801ee92:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ee96:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ee9a:	f806 ec04 	strb.w	lr, [r6, #-4]
 801ee9e:	e7b0      	b.n	801ee02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801eea0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801eea4:	d446      	bmi.n	801ef34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801eea6:	45c2      	cmp	sl, r8
 801eea8:	da44      	bge.n	801ef34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801eeaa:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801eeae:	d441      	bmi.n	801ef34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801eeb0:	9901      	ldr	r1, [sp, #4]
 801eeb2:	458e      	cmp	lr, r1
 801eeb4:	da3e      	bge.n	801ef34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801eeb6:	9902      	ldr	r1, [sp, #8]
 801eeb8:	f896 b000 	ldrb.w	fp, [r6]
 801eebc:	fb08 1e0e 	mla	lr, r8, lr, r1
 801eec0:	fb1b fb04 	smulbb	fp, fp, r4
 801eec4:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801eec8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eecc:	eb07 0a0e 	add.w	sl, r7, lr
 801eed0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801eed4:	fb0e be0c 	mla	lr, lr, ip, fp
 801eed8:	fa1f fe8e 	uxth.w	lr, lr
 801eedc:	f10e 0b01 	add.w	fp, lr, #1
 801eee0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801eee4:	f896 b001 	ldrb.w	fp, [r6, #1]
 801eee8:	fb1b fb04 	smulbb	fp, fp, r4
 801eeec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eef0:	f886 e000 	strb.w	lr, [r6]
 801eef4:	f89a e001 	ldrb.w	lr, [sl, #1]
 801eef8:	fb0e be0c 	mla	lr, lr, ip, fp
 801eefc:	fa1f fe8e 	uxth.w	lr, lr
 801ef00:	f10e 0b01 	add.w	fp, lr, #1
 801ef04:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ef08:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ef0c:	f886 e001 	strb.w	lr, [r6, #1]
 801ef10:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ef14:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ef18:	fb1a fa04 	smulbb	sl, sl, r4
 801ef1c:	fb0e ae0c 	mla	lr, lr, ip, sl
 801ef20:	fa1f fe8e 	uxth.w	lr, lr
 801ef24:	f10e 0a01 	add.w	sl, lr, #1
 801ef28:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ef2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ef30:	f886 e002 	strb.w	lr, [r6, #2]
 801ef34:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ef36:	3603      	adds	r6, #3
 801ef38:	f109 39ff 	add.w	r9, r9, #4294967295
 801ef3c:	4408      	add	r0, r1
 801ef3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ef40:	440a      	add	r2, r1
 801ef42:	e70b      	b.n	801ed5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801ef44:	b005      	add	sp, #20
 801ef46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ef4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef4e:	b085      	sub	sp, #20
 801ef50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef54:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ef56:	9203      	str	r2, [sp, #12]
 801ef58:	6870      	ldr	r0, [r6, #4]
 801ef5a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ef5c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ef60:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ef64:	9101      	str	r1, [sp, #4]
 801ef66:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ef6a:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801ef6e:	fb00 2404 	mla	r4, r0, r4, r2
 801ef72:	6832      	ldr	r2, [r6, #0]
 801ef74:	686e      	ldr	r6, [r5, #4]
 801ef76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef7a:	3604      	adds	r6, #4
 801ef7c:	4414      	add	r4, r2
 801ef7e:	682a      	ldr	r2, [r5, #0]
 801ef80:	9202      	str	r2, [sp, #8]
 801ef82:	9a01      	ldr	r2, [sp, #4]
 801ef84:	2a00      	cmp	r2, #0
 801ef86:	dc03      	bgt.n	801ef90 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801ef88:	9a03      	ldr	r2, [sp, #12]
 801ef8a:	2a00      	cmp	r2, #0
 801ef8c:	f340 80b2 	ble.w	801f0f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801ef90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef92:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	dd0c      	ble.n	801efba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801efa0:	1405      	asrs	r5, r0, #16
 801efa2:	d405      	bmi.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801efa4:	4575      	cmp	r5, lr
 801efa6:	da03      	bge.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801efa8:	1415      	asrs	r5, r2, #16
 801efaa:	d401      	bmi.n	801efb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801efac:	4545      	cmp	r5, r8
 801efae:	db05      	blt.n	801efbc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801efb0:	4460      	add	r0, ip
 801efb2:	443a      	add	r2, r7
 801efb4:	3b01      	subs	r3, #1
 801efb6:	3403      	adds	r4, #3
 801efb8:	e7f0      	b.n	801ef9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801efba:	d03d      	beq.n	801f038 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801efbc:	1e5d      	subs	r5, r3, #1
 801efbe:	fb0c 0905 	mla	r9, ip, r5, r0
 801efc2:	ea5f 4929 	movs.w	r9, r9, asr #16
 801efc6:	d42c      	bmi.n	801f022 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801efc8:	45f1      	cmp	r9, lr
 801efca:	da2a      	bge.n	801f022 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801efcc:	fb07 2505 	mla	r5, r7, r5, r2
 801efd0:	142d      	asrs	r5, r5, #16
 801efd2:	d426      	bmi.n	801f022 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801efd4:	4545      	cmp	r5, r8
 801efd6:	da24      	bge.n	801f022 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801efd8:	1ce5      	adds	r5, r4, #3
 801efda:	469a      	mov	sl, r3
 801efdc:	f1ba 0f00 	cmp.w	sl, #0
 801efe0:	f105 0503 	add.w	r5, r5, #3
 801efe4:	dd23      	ble.n	801f02e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801efe6:	ea4f 4922 	mov.w	r9, r2, asr #16
 801efea:	9902      	ldr	r1, [sp, #8]
 801efec:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801eff0:	443a      	add	r2, r7
 801eff2:	fb0e 1909 	mla	r9, lr, r9, r1
 801eff6:	4460      	add	r0, ip
 801eff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801effc:	f819 900b 	ldrb.w	r9, [r9, fp]
 801f000:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f004:	eb06 0b09 	add.w	fp, r6, r9
 801f008:	f816 9009 	ldrb.w	r9, [r6, r9]
 801f00c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801f010:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801f014:	f805 9c05 	strb.w	r9, [r5, #-5]
 801f018:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f01c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f020:	e7dc      	b.n	801efdc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f022:	2500      	movs	r5, #0
 801f024:	eba3 0905 	sub.w	r9, r3, r5
 801f028:	f1b9 0f00 	cmp.w	r9, #0
 801f02c:	dc3c      	bgt.n	801f0a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801f02e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f032:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f036:	441c      	add	r4, r3
 801f038:	9b01      	ldr	r3, [sp, #4]
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	dd5a      	ble.n	801f0f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f03e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f044:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f048:	eeb0 6a62 	vmov.f32	s12, s5
 801f04c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f050:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f054:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f058:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f05c:	eeb0 6a43 	vmov.f32	s12, s6
 801f060:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f064:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f068:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f06c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f070:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f074:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f078:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f07c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f080:	ee12 2a90 	vmov	r2, s5
 801f084:	eef0 2a47 	vmov.f32	s5, s14
 801f088:	fb92 fcf3 	sdiv	ip, r2, r3
 801f08c:	ee13 2a10 	vmov	r2, s6
 801f090:	eeb0 3a67 	vmov.f32	s6, s15
 801f094:	fb92 f7f3 	sdiv	r7, r2, r3
 801f098:	9b01      	ldr	r3, [sp, #4]
 801f09a:	9a03      	ldr	r2, [sp, #12]
 801f09c:	3b01      	subs	r3, #1
 801f09e:	9301      	str	r3, [sp, #4]
 801f0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0a2:	bf08      	it	eq
 801f0a4:	4613      	moveq	r3, r2
 801f0a6:	e76c      	b.n	801ef82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801f0a8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f0ac:	d41e      	bmi.n	801f0ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f0ae:	45f2      	cmp	sl, lr
 801f0b0:	da1c      	bge.n	801f0ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f0b2:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f0b6:	d419      	bmi.n	801f0ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f0b8:	45c1      	cmp	r9, r8
 801f0ba:	da17      	bge.n	801f0ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f0bc:	9902      	ldr	r1, [sp, #8]
 801f0be:	fb0e 1909 	mla	r9, lr, r9, r1
 801f0c2:	f819 900a 	ldrb.w	r9, [r9, sl]
 801f0c6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f0ca:	f816 b009 	ldrb.w	fp, [r6, r9]
 801f0ce:	eb06 0a09 	add.w	sl, r6, r9
 801f0d2:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801f0d6:	f804 b009 	strb.w	fp, [r4, r9]
 801f0da:	44a1      	add	r9, r4
 801f0dc:	f89a b001 	ldrb.w	fp, [sl, #1]
 801f0e0:	f889 b001 	strb.w	fp, [r9, #1]
 801f0e4:	f89a a002 	ldrb.w	sl, [sl, #2]
 801f0e8:	f889 a002 	strb.w	sl, [r9, #2]
 801f0ec:	4460      	add	r0, ip
 801f0ee:	443a      	add	r2, r7
 801f0f0:	3501      	adds	r5, #1
 801f0f2:	e797      	b.n	801f024 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801f0f4:	b005      	add	sp, #20
 801f0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f0fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fe:	b087      	sub	sp, #28
 801f100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f104:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f106:	9204      	str	r2, [sp, #16]
 801f108:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801f10c:	6870      	ldr	r0, [r6, #4]
 801f10e:	9205      	str	r2, [sp, #20]
 801f110:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f112:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801f116:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801f11a:	9101      	str	r1, [sp, #4]
 801f11c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f120:	fb00 2505 	mla	r5, r0, r5, r2
 801f124:	6832      	ldr	r2, [r6, #0]
 801f126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f12a:	4415      	add	r5, r2
 801f12c:	6822      	ldr	r2, [r4, #0]
 801f12e:	9202      	str	r2, [sp, #8]
 801f130:	6862      	ldr	r2, [r4, #4]
 801f132:	3204      	adds	r2, #4
 801f134:	9203      	str	r2, [sp, #12]
 801f136:	9a01      	ldr	r2, [sp, #4]
 801f138:	2a00      	cmp	r2, #0
 801f13a:	dc03      	bgt.n	801f144 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801f13c:	9a04      	ldr	r2, [sp, #16]
 801f13e:	2a00      	cmp	r2, #0
 801f140:	f340 8124 	ble.w	801f38c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f144:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f146:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f14a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f14c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f150:	2b00      	cmp	r3, #0
 801f152:	dd0e      	ble.n	801f172 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801f154:	1422      	asrs	r2, r4, #16
 801f156:	d405      	bmi.n	801f164 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f158:	4572      	cmp	r2, lr
 801f15a:	da03      	bge.n	801f164 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f15c:	1402      	asrs	r2, r0, #16
 801f15e:	d401      	bmi.n	801f164 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f160:	4542      	cmp	r2, r8
 801f162:	db07      	blt.n	801f174 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f164:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f166:	3b01      	subs	r3, #1
 801f168:	3503      	adds	r5, #3
 801f16a:	4414      	add	r4, r2
 801f16c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f16e:	4410      	add	r0, r2
 801f170:	e7ee      	b.n	801f150 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801f172:	d010      	beq.n	801f196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801f174:	1e5a      	subs	r2, r3, #1
 801f176:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f178:	fb06 4602 	mla	r6, r6, r2, r4
 801f17c:	1436      	asrs	r6, r6, #16
 801f17e:	d546      	bpl.n	801f20e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801f180:	4699      	mov	r9, r3
 801f182:	462f      	mov	r7, r5
 801f184:	f1b9 0f00 	cmp.w	r9, #0
 801f188:	f300 80a5 	bgt.w	801f2d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801f18c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f190:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f194:	441d      	add	r5, r3
 801f196:	9b01      	ldr	r3, [sp, #4]
 801f198:	2b00      	cmp	r3, #0
 801f19a:	f340 80f7 	ble.w	801f38c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f19e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1a8:	eeb0 6a62 	vmov.f32	s12, s5
 801f1ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f1b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1b8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f1bc:	eeb0 6a43 	vmov.f32	s12, s6
 801f1c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f1c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f1cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f1d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f1d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f1dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f1e0:	ee12 2a90 	vmov	r2, s5
 801f1e4:	eef0 2a47 	vmov.f32	s5, s14
 801f1e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1ec:	ee13 2a10 	vmov	r2, s6
 801f1f0:	9313      	str	r3, [sp, #76]	; 0x4c
 801f1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1f4:	eeb0 3a67 	vmov.f32	s6, s15
 801f1f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1fc:	9314      	str	r3, [sp, #80]	; 0x50
 801f1fe:	9b01      	ldr	r3, [sp, #4]
 801f200:	9a04      	ldr	r2, [sp, #16]
 801f202:	3b01      	subs	r3, #1
 801f204:	9301      	str	r3, [sp, #4]
 801f206:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f208:	bf08      	it	eq
 801f20a:	4613      	moveq	r3, r2
 801f20c:	e793      	b.n	801f136 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f20e:	4576      	cmp	r6, lr
 801f210:	dab6      	bge.n	801f180 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f212:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f214:	fb06 0202 	mla	r2, r6, r2, r0
 801f218:	1412      	asrs	r2, r2, #16
 801f21a:	d4b1      	bmi.n	801f180 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f21c:	4542      	cmp	r2, r8
 801f21e:	daaf      	bge.n	801f180 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f220:	1cef      	adds	r7, r5, #3
 801f222:	4699      	mov	r9, r3
 801f224:	f1b9 0f00 	cmp.w	r9, #0
 801f228:	ddb0      	ble.n	801f18c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f22a:	9902      	ldr	r1, [sp, #8]
 801f22c:	1402      	asrs	r2, r0, #16
 801f22e:	1426      	asrs	r6, r4, #16
 801f230:	fb0e 1202 	mla	r2, lr, r2, r1
 801f234:	9903      	ldr	r1, [sp, #12]
 801f236:	5d92      	ldrb	r2, [r2, r6]
 801f238:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f23c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f240:	d041      	beq.n	801f2c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f242:	9a05      	ldr	r2, [sp, #20]
 801f244:	fa5f fb86 	uxtb.w	fp, r6
 801f248:	fb02 fc0c 	mul.w	ip, r2, ip
 801f24c:	f10c 0201 	add.w	r2, ip, #1
 801f250:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f254:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801f258:	1212      	asrs	r2, r2, #8
 801f25a:	fa1f fa82 	uxth.w	sl, r2
 801f25e:	43d2      	mvns	r2, r2
 801f260:	fb1b fb0a 	smulbb	fp, fp, sl
 801f264:	b2d2      	uxtb	r2, r2
 801f266:	fb0c bc02 	mla	ip, ip, r2, fp
 801f26a:	fa1f fc8c 	uxth.w	ip, ip
 801f26e:	f10c 0b01 	add.w	fp, ip, #1
 801f272:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f276:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f27a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f27e:	fb1b fb0a 	smulbb	fp, fp, sl
 801f282:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f286:	fb16 fa0a 	smulbb	sl, r6, sl
 801f28a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f28e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801f292:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801f296:	fb06 aa02 	mla	sl, r6, r2, sl
 801f29a:	fb0c bc02 	mla	ip, ip, r2, fp
 801f29e:	fa1f fa8a 	uxth.w	sl, sl
 801f2a2:	fa1f fc8c 	uxth.w	ip, ip
 801f2a6:	f10a 0601 	add.w	r6, sl, #1
 801f2aa:	f10c 0b01 	add.w	fp, ip, #1
 801f2ae:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f2b2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f2b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f2ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f2be:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f2c2:	f807 cc02 	strb.w	ip, [r7, #-2]
 801f2c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f2c8:	3703      	adds	r7, #3
 801f2ca:	f109 39ff 	add.w	r9, r9, #4294967295
 801f2ce:	4414      	add	r4, r2
 801f2d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2d2:	4410      	add	r0, r2
 801f2d4:	e7a6      	b.n	801f224 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f2d6:	1426      	asrs	r6, r4, #16
 801f2d8:	d450      	bmi.n	801f37c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f2da:	4576      	cmp	r6, lr
 801f2dc:	da4e      	bge.n	801f37c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f2de:	1402      	asrs	r2, r0, #16
 801f2e0:	d44c      	bmi.n	801f37c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f2e2:	4542      	cmp	r2, r8
 801f2e4:	da4a      	bge.n	801f37c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f2e6:	9902      	ldr	r1, [sp, #8]
 801f2e8:	fb0e 1202 	mla	r2, lr, r2, r1
 801f2ec:	9903      	ldr	r1, [sp, #12]
 801f2ee:	5d92      	ldrb	r2, [r2, r6]
 801f2f0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f2f4:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f2f8:	d040      	beq.n	801f37c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f2fa:	9a05      	ldr	r2, [sp, #20]
 801f2fc:	fa5f fb86 	uxtb.w	fp, r6
 801f300:	fb02 fc0c 	mul.w	ip, r2, ip
 801f304:	f10c 0201 	add.w	r2, ip, #1
 801f308:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f30c:	f897 c000 	ldrb.w	ip, [r7]
 801f310:	1212      	asrs	r2, r2, #8
 801f312:	fa1f fa82 	uxth.w	sl, r2
 801f316:	43d2      	mvns	r2, r2
 801f318:	fb1b fb0a 	smulbb	fp, fp, sl
 801f31c:	b2d2      	uxtb	r2, r2
 801f31e:	fb0c bc02 	mla	ip, ip, r2, fp
 801f322:	fa1f fc8c 	uxth.w	ip, ip
 801f326:	f10c 0b01 	add.w	fp, ip, #1
 801f32a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f32e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f332:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f336:	fb1b fb0a 	smulbb	fp, fp, sl
 801f33a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f33e:	fb16 fa0a 	smulbb	sl, r6, sl
 801f342:	78be      	ldrb	r6, [r7, #2]
 801f344:	f887 c000 	strb.w	ip, [r7]
 801f348:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f34c:	fb06 aa02 	mla	sl, r6, r2, sl
 801f350:	fb0c bc02 	mla	ip, ip, r2, fp
 801f354:	fa1f fa8a 	uxth.w	sl, sl
 801f358:	fa1f fc8c 	uxth.w	ip, ip
 801f35c:	f10a 0601 	add.w	r6, sl, #1
 801f360:	f10c 0b01 	add.w	fp, ip, #1
 801f364:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f368:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f36c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f370:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f374:	f887 a002 	strb.w	sl, [r7, #2]
 801f378:	f887 c001 	strb.w	ip, [r7, #1]
 801f37c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f37e:	3703      	adds	r7, #3
 801f380:	f109 39ff 	add.w	r9, r9, #4294967295
 801f384:	4414      	add	r4, r2
 801f386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f388:	4410      	add	r0, r2
 801f38a:	e6fb      	b.n	801f184 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f38c:	b007      	add	sp, #28
 801f38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f392 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f396:	b085      	sub	sp, #20
 801f398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f39c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f39e:	9203      	str	r2, [sp, #12]
 801f3a0:	6870      	ldr	r0, [r6, #4]
 801f3a2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f3a4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f3a8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f3ac:	9100      	str	r1, [sp, #0]
 801f3ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f3b2:	fb00 2404 	mla	r4, r0, r4, r2
 801f3b6:	6832      	ldr	r2, [r6, #0]
 801f3b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f3bc:	4414      	add	r4, r2
 801f3be:	682a      	ldr	r2, [r5, #0]
 801f3c0:	9201      	str	r2, [sp, #4]
 801f3c2:	686a      	ldr	r2, [r5, #4]
 801f3c4:	3204      	adds	r2, #4
 801f3c6:	9202      	str	r2, [sp, #8]
 801f3c8:	9a00      	ldr	r2, [sp, #0]
 801f3ca:	2a00      	cmp	r2, #0
 801f3cc:	dc03      	bgt.n	801f3d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801f3ce:	9a03      	ldr	r2, [sp, #12]
 801f3d0:	2a00      	cmp	r2, #0
 801f3d2:	f340 8131 	ble.w	801f638 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f3d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f3d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f3dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f3de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	dd0e      	ble.n	801f404 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f3e6:	1405      	asrs	r5, r0, #16
 801f3e8:	d405      	bmi.n	801f3f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f3ea:	4575      	cmp	r5, lr
 801f3ec:	da03      	bge.n	801f3f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f3ee:	1415      	asrs	r5, r2, #16
 801f3f0:	d401      	bmi.n	801f3f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f3f2:	4545      	cmp	r5, r8
 801f3f4:	db07      	blt.n	801f406 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f3f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f3f8:	3b01      	subs	r3, #1
 801f3fa:	3403      	adds	r4, #3
 801f3fc:	4428      	add	r0, r5
 801f3fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f400:	442a      	add	r2, r5
 801f402:	e7ee      	b.n	801f3e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801f404:	d06f      	beq.n	801f4e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801f406:	1e5d      	subs	r5, r3, #1
 801f408:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f40a:	fb06 0605 	mla	r6, r6, r5, r0
 801f40e:	1436      	asrs	r6, r6, #16
 801f410:	d460      	bmi.n	801f4d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f412:	4576      	cmp	r6, lr
 801f414:	da5e      	bge.n	801f4d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f416:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f418:	fb06 2505 	mla	r5, r6, r5, r2
 801f41c:	142d      	asrs	r5, r5, #16
 801f41e:	d459      	bmi.n	801f4d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f420:	4545      	cmp	r5, r8
 801f422:	da57      	bge.n	801f4d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f424:	1ce5      	adds	r5, r4, #3
 801f426:	469a      	mov	sl, r3
 801f428:	f1ba 0f00 	cmp.w	sl, #0
 801f42c:	dd56      	ble.n	801f4dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801f42e:	9901      	ldr	r1, [sp, #4]
 801f430:	1416      	asrs	r6, r2, #16
 801f432:	1407      	asrs	r7, r0, #16
 801f434:	fb0e 1606 	mla	r6, lr, r6, r1
 801f438:	9902      	ldr	r1, [sp, #8]
 801f43a:	5df6      	ldrb	r6, [r6, r7]
 801f43c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801f440:	0e37      	lsrs	r7, r6, #24
 801f442:	2fff      	cmp	r7, #255	; 0xff
 801f444:	f000 80ef 	beq.w	801f626 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801f448:	fa5f fc87 	uxtb.w	ip, r7
 801f44c:	b3d7      	cbz	r7, 801f4c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f44e:	fa1f f78c 	uxth.w	r7, ip
 801f452:	ea6f 0c0c 	mvn.w	ip, ip
 801f456:	fa5f fb86 	uxtb.w	fp, r6
 801f45a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801f45e:	fa5f fc8c 	uxtb.w	ip, ip
 801f462:	fb1b fb07 	smulbb	fp, fp, r7
 801f466:	fb09 b90c 	mla	r9, r9, ip, fp
 801f46a:	fa1f f989 	uxth.w	r9, r9
 801f46e:	f109 0b01 	add.w	fp, r9, #1
 801f472:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f476:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f47a:	fb1b fb0c 	smulbb	fp, fp, ip
 801f47e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f482:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f486:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f48a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f48e:	fb09 b907 	mla	r9, r9, r7, fp
 801f492:	fa1f f989 	uxth.w	r9, r9
 801f496:	f109 0b01 	add.w	fp, r9, #1
 801f49a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f49e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4a2:	f805 9c02 	strb.w	r9, [r5, #-2]
 801f4a6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f4aa:	fb19 fc0c 	smulbb	ip, r9, ip
 801f4ae:	fb06 c607 	mla	r6, r6, r7, ip
 801f4b2:	b2b6      	uxth	r6, r6
 801f4b4:	f106 0c01 	add.w	ip, r6, #1
 801f4b8:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801f4bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f4c0:	f805 cc01 	strb.w	ip, [r5, #-1]
 801f4c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f4c6:	3503      	adds	r5, #3
 801f4c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f4cc:	4408      	add	r0, r1
 801f4ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f4d0:	440a      	add	r2, r1
 801f4d2:	e7a9      	b.n	801f428 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801f4d4:	2600      	movs	r6, #0
 801f4d6:	1b9d      	subs	r5, r3, r6
 801f4d8:	2d00      	cmp	r5, #0
 801f4da:	dc40      	bgt.n	801f55e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f4dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4e4:	441c      	add	r4, r3
 801f4e6:	9b00      	ldr	r3, [sp, #0]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	f340 80a5 	ble.w	801f638 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f4ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4f8:	eeb0 6a62 	vmov.f32	s12, s5
 801f4fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f500:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f504:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f508:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f50c:	eeb0 6a43 	vmov.f32	s12, s6
 801f510:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f514:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f518:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f51c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f520:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f524:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f528:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f52c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f530:	ee12 2a90 	vmov	r2, s5
 801f534:	eef0 2a47 	vmov.f32	s5, s14
 801f538:	fb92 f3f3 	sdiv	r3, r2, r3
 801f53c:	ee13 2a10 	vmov	r2, s6
 801f540:	9311      	str	r3, [sp, #68]	; 0x44
 801f542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f544:	eeb0 3a67 	vmov.f32	s6, s15
 801f548:	fb92 f3f3 	sdiv	r3, r2, r3
 801f54c:	9312      	str	r3, [sp, #72]	; 0x48
 801f54e:	9b00      	ldr	r3, [sp, #0]
 801f550:	9a03      	ldr	r2, [sp, #12]
 801f552:	3b01      	subs	r3, #1
 801f554:	9300      	str	r3, [sp, #0]
 801f556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f558:	bf08      	it	eq
 801f55a:	4613      	moveq	r3, r2
 801f55c:	e734      	b.n	801f3c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f55e:	1407      	asrs	r7, r0, #16
 801f560:	d450      	bmi.n	801f604 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f562:	4577      	cmp	r7, lr
 801f564:	da4e      	bge.n	801f604 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f566:	1415      	asrs	r5, r2, #16
 801f568:	d44c      	bmi.n	801f604 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f56a:	4545      	cmp	r5, r8
 801f56c:	da4a      	bge.n	801f604 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f56e:	9901      	ldr	r1, [sp, #4]
 801f570:	fb0e 1505 	mla	r5, lr, r5, r1
 801f574:	9902      	ldr	r1, [sp, #8]
 801f576:	5ded      	ldrb	r5, [r5, r7]
 801f578:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801f57c:	0e2f      	lsrs	r7, r5, #24
 801f57e:	2fff      	cmp	r7, #255	; 0xff
 801f580:	d046      	beq.n	801f610 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801f582:	fa5f f987 	uxtb.w	r9, r7
 801f586:	b3ef      	cbz	r7, 801f604 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f588:	fa1f fc89 	uxth.w	ip, r9
 801f58c:	ea6f 0909 	mvn.w	r9, r9
 801f590:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f594:	fa5f fb85 	uxtb.w	fp, r5
 801f598:	f814 a007 	ldrb.w	sl, [r4, r7]
 801f59c:	fa5f f989 	uxtb.w	r9, r9
 801f5a0:	fb1b fb0c 	smulbb	fp, fp, ip
 801f5a4:	fb0a ba09 	mla	sl, sl, r9, fp
 801f5a8:	fa1f fa8a 	uxth.w	sl, sl
 801f5ac:	f10a 0b01 	add.w	fp, sl, #1
 801f5b0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f5b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f5b8:	f804 a007 	strb.w	sl, [r4, r7]
 801f5bc:	4427      	add	r7, r4
 801f5be:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f5c2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801f5c6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f5ca:	fb1b fb09 	smulbb	fp, fp, r9
 801f5ce:	fb0a ba0c 	mla	sl, sl, ip, fp
 801f5d2:	fa1f fa8a 	uxth.w	sl, sl
 801f5d6:	f10a 0b01 	add.w	fp, sl, #1
 801f5da:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f5de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f5e2:	f887 a001 	strb.w	sl, [r7, #1]
 801f5e6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f5ea:	fb1a f909 	smulbb	r9, sl, r9
 801f5ee:	fb05 950c 	mla	r5, r5, ip, r9
 801f5f2:	b2ad      	uxth	r5, r5
 801f5f4:	f105 0901 	add.w	r9, r5, #1
 801f5f8:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801f5fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f600:	f887 9002 	strb.w	r9, [r7, #2]
 801f604:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f606:	3601      	adds	r6, #1
 801f608:	4408      	add	r0, r1
 801f60a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f60c:	440a      	add	r2, r1
 801f60e:	e762      	b.n	801f4d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801f610:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f614:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801f618:	55e5      	strb	r5, [r4, r7]
 801f61a:	4427      	add	r7, r4
 801f61c:	0c2d      	lsrs	r5, r5, #16
 801f61e:	f887 c001 	strb.w	ip, [r7, #1]
 801f622:	70bd      	strb	r5, [r7, #2]
 801f624:	e7ee      	b.n	801f604 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f626:	0a37      	lsrs	r7, r6, #8
 801f628:	f805 6c03 	strb.w	r6, [r5, #-3]
 801f62c:	0c36      	lsrs	r6, r6, #16
 801f62e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f632:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f636:	e745      	b.n	801f4c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f638:	b005      	add	sp, #20
 801f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f63e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f63e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f642:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f644:	9201      	str	r2, [sp, #4]
 801f646:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f64a:	6870      	ldr	r0, [r6, #4]
 801f64c:	9200      	str	r2, [sp, #0]
 801f64e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801f652:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801f656:	fa1f fc85 	uxth.w	ip, r5
 801f65a:	43ed      	mvns	r5, r5
 801f65c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f660:	b2ed      	uxtb	r5, r5
 801f662:	fb00 2404 	mla	r4, r0, r4, r2
 801f666:	6832      	ldr	r2, [r6, #0]
 801f668:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f66c:	4414      	add	r4, r2
 801f66e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f670:	f8d2 8000 	ldr.w	r8, [r2]
 801f674:	2900      	cmp	r1, #0
 801f676:	dc03      	bgt.n	801f680 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801f678:	9a01      	ldr	r2, [sp, #4]
 801f67a:	2a00      	cmp	r2, #0
 801f67c:	f340 8104 	ble.w	801f888 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f682:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f688:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	dd0f      	ble.n	801f6b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f690:	1406      	asrs	r6, r0, #16
 801f692:	d406      	bmi.n	801f6a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f694:	4576      	cmp	r6, lr
 801f696:	da04      	bge.n	801f6a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f698:	1416      	asrs	r6, r2, #16
 801f69a:	d402      	bmi.n	801f6a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f69c:	9f00      	ldr	r7, [sp, #0]
 801f69e:	42be      	cmp	r6, r7
 801f6a0:	db07      	blt.n	801f6b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f6a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f6a4:	3b01      	subs	r3, #1
 801f6a6:	3403      	adds	r4, #3
 801f6a8:	4430      	add	r0, r6
 801f6aa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f6ac:	4432      	add	r2, r6
 801f6ae:	e7ed      	b.n	801f68c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801f6b0:	d05f      	beq.n	801f772 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801f6b2:	1e5e      	subs	r6, r3, #1
 801f6b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f6b6:	fb07 0706 	mla	r7, r7, r6, r0
 801f6ba:	143f      	asrs	r7, r7, #16
 801f6bc:	d450      	bmi.n	801f760 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f6be:	4577      	cmp	r7, lr
 801f6c0:	da4e      	bge.n	801f760 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f6c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f6c4:	fb07 2606 	mla	r6, r7, r6, r2
 801f6c8:	1436      	asrs	r6, r6, #16
 801f6ca:	d449      	bmi.n	801f760 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f6cc:	9f00      	ldr	r7, [sp, #0]
 801f6ce:	42be      	cmp	r6, r7
 801f6d0:	da46      	bge.n	801f760 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f6d2:	1ce6      	adds	r6, r4, #3
 801f6d4:	4699      	mov	r9, r3
 801f6d6:	f1b9 0f00 	cmp.w	r9, #0
 801f6da:	f106 0603 	add.w	r6, r6, #3
 801f6de:	dd43      	ble.n	801f768 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f6e0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f6e4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f6e8:	1417      	asrs	r7, r2, #16
 801f6ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801f6ee:	fb1b fb05 	smulbb	fp, fp, r5
 801f6f2:	fb0e a707 	mla	r7, lr, r7, sl
 801f6f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f6fa:	eb08 0a07 	add.w	sl, r8, r7
 801f6fe:	f818 7007 	ldrb.w	r7, [r8, r7]
 801f702:	fb07 b70c 	mla	r7, r7, ip, fp
 801f706:	b2bf      	uxth	r7, r7
 801f708:	f107 0b01 	add.w	fp, r7, #1
 801f70c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f710:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f714:	fb1b fb05 	smulbb	fp, fp, r5
 801f718:	123f      	asrs	r7, r7, #8
 801f71a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f71e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f722:	fb07 b70c 	mla	r7, r7, ip, fp
 801f726:	b2bf      	uxth	r7, r7
 801f728:	f107 0b01 	add.w	fp, r7, #1
 801f72c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f730:	123f      	asrs	r7, r7, #8
 801f732:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f736:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f73a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f73e:	fb1a fa05 	smulbb	sl, sl, r5
 801f742:	fb07 a70c 	mla	r7, r7, ip, sl
 801f746:	b2bf      	uxth	r7, r7
 801f748:	f107 0a01 	add.w	sl, r7, #1
 801f74c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f750:	123f      	asrs	r7, r7, #8
 801f752:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f756:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f758:	4438      	add	r0, r7
 801f75a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f75c:	443a      	add	r2, r7
 801f75e:	e7ba      	b.n	801f6d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f760:	2700      	movs	r7, #0
 801f762:	1bde      	subs	r6, r3, r7
 801f764:	2e00      	cmp	r6, #0
 801f766:	dc3f      	bgt.n	801f7e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f768:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f76c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f770:	441c      	add	r4, r3
 801f772:	2900      	cmp	r1, #0
 801f774:	f340 8088 	ble.w	801f888 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f77c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f77e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f782:	3901      	subs	r1, #1
 801f784:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f788:	eef0 6a62 	vmov.f32	s13, s5
 801f78c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f790:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f794:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f798:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801f79c:	eef0 6a43 	vmov.f32	s13, s6
 801f7a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7a4:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801f7a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f7bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7c0:	ee12 2a90 	vmov	r2, s5
 801f7c4:	eef0 2a47 	vmov.f32	s5, s14
 801f7c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7cc:	ee13 2a10 	vmov	r2, s6
 801f7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801f7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7d4:	eeb0 3a67 	vmov.f32	s6, s15
 801f7d8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7dc:	9a01      	ldr	r2, [sp, #4]
 801f7de:	9310      	str	r3, [sp, #64]	; 0x40
 801f7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7e2:	bf08      	it	eq
 801f7e4:	4613      	moveq	r3, r2
 801f7e6:	e745      	b.n	801f674 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f7e8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f7ec:	d446      	bmi.n	801f87c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f7ee:	45f2      	cmp	sl, lr
 801f7f0:	da44      	bge.n	801f87c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f7f2:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f7f6:	d441      	bmi.n	801f87c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f7f8:	9e00      	ldr	r6, [sp, #0]
 801f7fa:	45b1      	cmp	r9, r6
 801f7fc:	da3e      	bge.n	801f87c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f7fe:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f802:	fb0e a909 	mla	r9, lr, r9, sl
 801f806:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f80a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f80e:	fb1b fb05 	smulbb	fp, fp, r5
 801f812:	eb08 0a09 	add.w	sl, r8, r9
 801f816:	f818 9009 	ldrb.w	r9, [r8, r9]
 801f81a:	fb09 b90c 	mla	r9, r9, ip, fp
 801f81e:	fa1f f989 	uxth.w	r9, r9
 801f822:	f109 0b01 	add.w	fp, r9, #1
 801f826:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f82a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f82e:	f804 9006 	strb.w	r9, [r4, r6]
 801f832:	4426      	add	r6, r4
 801f834:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f838:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f83c:	fb1b fb05 	smulbb	fp, fp, r5
 801f840:	fb09 b90c 	mla	r9, r9, ip, fp
 801f844:	fa1f f989 	uxth.w	r9, r9
 801f848:	f109 0b01 	add.w	fp, r9, #1
 801f84c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f850:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f854:	f886 9001 	strb.w	r9, [r6, #1]
 801f858:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f85c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f860:	fb1a fa05 	smulbb	sl, sl, r5
 801f864:	fb09 a90c 	mla	r9, r9, ip, sl
 801f868:	fa1f f989 	uxth.w	r9, r9
 801f86c:	f109 0a01 	add.w	sl, r9, #1
 801f870:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f874:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f878:	f886 9002 	strb.w	r9, [r6, #2]
 801f87c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f87e:	3701      	adds	r7, #1
 801f880:	4430      	add	r0, r6
 801f882:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f884:	4432      	add	r2, r6
 801f886:	e76c      	b.n	801f762 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801f888:	b003      	add	sp, #12
 801f88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f88e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f88e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f892:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f898:	9201      	str	r2, [sp, #4]
 801f89a:	6868      	ldr	r0, [r5, #4]
 801f89c:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801f8a0:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801f8a4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f8a8:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801f8ac:	fb00 2404 	mla	r4, r0, r4, r2
 801f8b0:	682a      	ldr	r2, [r5, #0]
 801f8b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f8b6:	4414      	add	r4, r2
 801f8b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f8ba:	f8d2 9000 	ldr.w	r9, [r2]
 801f8be:	2900      	cmp	r1, #0
 801f8c0:	dc03      	bgt.n	801f8ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f8c2:	9a01      	ldr	r2, [sp, #4]
 801f8c4:	2a00      	cmp	r2, #0
 801f8c6:	f340 80a8 	ble.w	801fa1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f8ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f8cc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f8d2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	dd0c      	ble.n	801f8f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f8da:	1405      	asrs	r5, r0, #16
 801f8dc:	d405      	bmi.n	801f8ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f8de:	4565      	cmp	r5, ip
 801f8e0:	da03      	bge.n	801f8ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f8e2:	1415      	asrs	r5, r2, #16
 801f8e4:	d401      	bmi.n	801f8ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f8e6:	4575      	cmp	r5, lr
 801f8e8:	db05      	blt.n	801f8f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801f8ea:	4438      	add	r0, r7
 801f8ec:	4432      	add	r2, r6
 801f8ee:	3b01      	subs	r3, #1
 801f8f0:	3403      	adds	r4, #3
 801f8f2:	e7f0      	b.n	801f8d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801f8f4:	d03a      	beq.n	801f96c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801f8f6:	1e5d      	subs	r5, r3, #1
 801f8f8:	fb07 0805 	mla	r8, r7, r5, r0
 801f8fc:	ea5f 4828 	movs.w	r8, r8, asr #16
 801f900:	d429      	bmi.n	801f956 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f902:	45e0      	cmp	r8, ip
 801f904:	da27      	bge.n	801f956 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f906:	fb06 2505 	mla	r5, r6, r5, r2
 801f90a:	142d      	asrs	r5, r5, #16
 801f90c:	d423      	bmi.n	801f956 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f90e:	4575      	cmp	r5, lr
 801f910:	da21      	bge.n	801f956 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f912:	f104 0803 	add.w	r8, r4, #3
 801f916:	469a      	mov	sl, r3
 801f918:	f1ba 0f00 	cmp.w	sl, #0
 801f91c:	f108 0803 	add.w	r8, r8, #3
 801f920:	dd1f      	ble.n	801f962 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f922:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801f926:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f92a:	1415      	asrs	r5, r2, #16
 801f92c:	4438      	add	r0, r7
 801f92e:	4432      	add	r2, r6
 801f930:	fb0c b505 	mla	r5, ip, r5, fp
 801f934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f938:	eb09 0b05 	add.w	fp, r9, r5
 801f93c:	f819 5005 	ldrb.w	r5, [r9, r5]
 801f940:	f808 5c06 	strb.w	r5, [r8, #-6]
 801f944:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801f948:	f808 5c05 	strb.w	r5, [r8, #-5]
 801f94c:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801f950:	f808 5c04 	strb.w	r5, [r8, #-4]
 801f954:	e7e0      	b.n	801f918 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f956:	2500      	movs	r5, #0
 801f958:	eba3 0805 	sub.w	r8, r3, r5
 801f95c:	f1b8 0f00 	cmp.w	r8, #0
 801f960:	dc38      	bgt.n	801f9d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801f962:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f966:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f96a:	441c      	add	r4, r3
 801f96c:	2900      	cmp	r1, #0
 801f96e:	dd54      	ble.n	801fa1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f970:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f976:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f97a:	3901      	subs	r1, #1
 801f97c:	eeb0 6a62 	vmov.f32	s12, s5
 801f980:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f984:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f988:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f98c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f990:	eeb0 6a43 	vmov.f32	s12, s6
 801f994:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f998:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f99c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9b4:	ee12 2a90 	vmov	r2, s5
 801f9b8:	eef0 2a47 	vmov.f32	s5, s14
 801f9bc:	fb92 f7f3 	sdiv	r7, r2, r3
 801f9c0:	ee13 2a10 	vmov	r2, s6
 801f9c4:	eeb0 3a67 	vmov.f32	s6, s15
 801f9c8:	fb92 f6f3 	sdiv	r6, r2, r3
 801f9cc:	9a01      	ldr	r2, [sp, #4]
 801f9ce:	bf08      	it	eq
 801f9d0:	4613      	moveq	r3, r2
 801f9d2:	e774      	b.n	801f8be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801f9d4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f9d8:	d41b      	bmi.n	801fa12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f9da:	45e2      	cmp	sl, ip
 801f9dc:	da19      	bge.n	801fa12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f9de:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f9e2:	d416      	bmi.n	801fa12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f9e4:	45f0      	cmp	r8, lr
 801f9e6:	da14      	bge.n	801fa12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f9e8:	fb0c a808 	mla	r8, ip, r8, sl
 801f9ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f9f0:	f819 b008 	ldrb.w	fp, [r9, r8]
 801f9f4:	eb09 0a08 	add.w	sl, r9, r8
 801f9f8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801f9fc:	f804 b008 	strb.w	fp, [r4, r8]
 801fa00:	44a0      	add	r8, r4
 801fa02:	f89a b001 	ldrb.w	fp, [sl, #1]
 801fa06:	f888 b001 	strb.w	fp, [r8, #1]
 801fa0a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801fa0e:	f888 a002 	strb.w	sl, [r8, #2]
 801fa12:	4438      	add	r0, r7
 801fa14:	4432      	add	r2, r6
 801fa16:	3501      	adds	r5, #1
 801fa18:	e79e      	b.n	801f958 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801fa1a:	b003      	add	sp, #12
 801fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa24:	b085      	sub	sp, #20
 801fa26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fa2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa2c:	9202      	str	r2, [sp, #8]
 801fa2e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fa32:	6860      	ldr	r0, [r4, #4]
 801fa34:	9203      	str	r2, [sp, #12]
 801fa36:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fa3a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801fa3e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fa42:	fb00 2505 	mla	r5, r0, r5, r2
 801fa46:	6822      	ldr	r2, [r4, #0]
 801fa48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fa4c:	4415      	add	r5, r2
 801fa4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fa50:	6812      	ldr	r2, [r2, #0]
 801fa52:	9201      	str	r2, [sp, #4]
 801fa54:	2900      	cmp	r1, #0
 801fa56:	dc03      	bgt.n	801fa60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801fa58:	9a02      	ldr	r2, [sp, #8]
 801fa5a:	2a00      	cmp	r2, #0
 801fa5c:	f340 811c 	ble.w	801fc98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fa60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fa62:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fa66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa68:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	dd0e      	ble.n	801fa8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fa70:	1422      	asrs	r2, r4, #16
 801fa72:	d405      	bmi.n	801fa80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fa74:	4572      	cmp	r2, lr
 801fa76:	da03      	bge.n	801fa80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fa78:	1402      	asrs	r2, r0, #16
 801fa7a:	d401      	bmi.n	801fa80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fa7c:	4542      	cmp	r2, r8
 801fa7e:	db07      	blt.n	801fa90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fa80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fa82:	3b01      	subs	r3, #1
 801fa84:	3503      	adds	r5, #3
 801fa86:	4414      	add	r4, r2
 801fa88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa8a:	4410      	add	r0, r2
 801fa8c:	e7ee      	b.n	801fa6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801fa8e:	d072      	beq.n	801fb76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801fa90:	1e5a      	subs	r2, r3, #1
 801fa92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fa94:	fb06 4602 	mla	r6, r6, r2, r4
 801fa98:	1436      	asrs	r6, r6, #16
 801fa9a:	d461      	bmi.n	801fb60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fa9c:	4576      	cmp	r6, lr
 801fa9e:	da5f      	bge.n	801fb60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801faa0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801faa2:	fb06 0202 	mla	r2, r6, r2, r0
 801faa6:	1412      	asrs	r2, r2, #16
 801faa8:	d45a      	bmi.n	801fb60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801faaa:	4542      	cmp	r2, r8
 801faac:	da58      	bge.n	801fb60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801faae:	1cef      	adds	r7, r5, #3
 801fab0:	4699      	mov	r9, r3
 801fab2:	f1b9 0f00 	cmp.w	r9, #0
 801fab6:	dd59      	ble.n	801fb6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801fab8:	1426      	asrs	r6, r4, #16
 801faba:	1402      	asrs	r2, r0, #16
 801fabc:	fb0e 6202 	mla	r2, lr, r2, r6
 801fac0:	9e01      	ldr	r6, [sp, #4]
 801fac2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801fac6:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801faca:	d041      	beq.n	801fb50 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801facc:	9a03      	ldr	r2, [sp, #12]
 801face:	fa5f fb86 	uxtb.w	fp, r6
 801fad2:	fb02 fc0c 	mul.w	ip, r2, ip
 801fad6:	f10c 0201 	add.w	r2, ip, #1
 801fada:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801fade:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801fae2:	1212      	asrs	r2, r2, #8
 801fae4:	fa1f fa82 	uxth.w	sl, r2
 801fae8:	43d2      	mvns	r2, r2
 801faea:	fb1b fb0a 	smulbb	fp, fp, sl
 801faee:	b2d2      	uxtb	r2, r2
 801faf0:	fb0c bc02 	mla	ip, ip, r2, fp
 801faf4:	fa1f fc8c 	uxth.w	ip, ip
 801faf8:	f10c 0b01 	add.w	fp, ip, #1
 801fafc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fb00:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801fb04:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fb08:	fb1b fb0a 	smulbb	fp, fp, sl
 801fb0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fb10:	fb16 fa0a 	smulbb	sl, r6, sl
 801fb14:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801fb18:	f807 cc03 	strb.w	ip, [r7, #-3]
 801fb1c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801fb20:	fb06 aa02 	mla	sl, r6, r2, sl
 801fb24:	fb0c bc02 	mla	ip, ip, r2, fp
 801fb28:	fa1f fa8a 	uxth.w	sl, sl
 801fb2c:	fa1f fc8c 	uxth.w	ip, ip
 801fb30:	f10a 0601 	add.w	r6, sl, #1
 801fb34:	f10c 0b01 	add.w	fp, ip, #1
 801fb38:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801fb3c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fb40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fb44:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fb48:	f807 ac01 	strb.w	sl, [r7, #-1]
 801fb4c:	f807 cc02 	strb.w	ip, [r7, #-2]
 801fb50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb52:	3703      	adds	r7, #3
 801fb54:	f109 39ff 	add.w	r9, r9, #4294967295
 801fb58:	4414      	add	r4, r2
 801fb5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb5c:	4410      	add	r0, r2
 801fb5e:	e7a8      	b.n	801fab2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801fb60:	f04f 0c00 	mov.w	ip, #0
 801fb64:	eba3 020c 	sub.w	r2, r3, ip
 801fb68:	2a00      	cmp	r2, #0
 801fb6a:	dc3d      	bgt.n	801fbe8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801fb6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb74:	441d      	add	r5, r3
 801fb76:	2900      	cmp	r1, #0
 801fb78:	f340 808e 	ble.w	801fc98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fb7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb86:	3901      	subs	r1, #1
 801fb88:	eeb0 6a62 	vmov.f32	s12, s5
 801fb8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fb90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb98:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fb9c:	eeb0 6a43 	vmov.f32	s12, s6
 801fba0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fba4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fba8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fbb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fbb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fbbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fbc0:	ee12 2a90 	vmov	r2, s5
 801fbc4:	eef0 2a47 	vmov.f32	s5, s14
 801fbc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbcc:	ee13 2a10 	vmov	r2, s6
 801fbd0:	9311      	str	r3, [sp, #68]	; 0x44
 801fbd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbd4:	eeb0 3a67 	vmov.f32	s6, s15
 801fbd8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbdc:	9a02      	ldr	r2, [sp, #8]
 801fbde:	9312      	str	r3, [sp, #72]	; 0x48
 801fbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbe2:	bf08      	it	eq
 801fbe4:	4613      	moveq	r3, r2
 801fbe6:	e735      	b.n	801fa54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801fbe8:	1426      	asrs	r6, r4, #16
 801fbea:	d44e      	bmi.n	801fc8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fbec:	4576      	cmp	r6, lr
 801fbee:	da4c      	bge.n	801fc8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fbf0:	1402      	asrs	r2, r0, #16
 801fbf2:	d44a      	bmi.n	801fc8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fbf4:	4542      	cmp	r2, r8
 801fbf6:	da48      	bge.n	801fc8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fbf8:	fb0e 6202 	mla	r2, lr, r2, r6
 801fbfc:	9e01      	ldr	r6, [sp, #4]
 801fbfe:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fc02:	0e3a      	lsrs	r2, r7, #24
 801fc04:	d041      	beq.n	801fc8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fc06:	9e03      	ldr	r6, [sp, #12]
 801fc08:	fa5f fb87 	uxtb.w	fp, r7
 801fc0c:	4372      	muls	r2, r6
 801fc0e:	1c56      	adds	r6, r2, #1
 801fc10:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fc14:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801fc18:	1212      	asrs	r2, r2, #8
 801fc1a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801fc1e:	fa1f fa82 	uxth.w	sl, r2
 801fc22:	43d2      	mvns	r2, r2
 801fc24:	fb1b fb0a 	smulbb	fp, fp, sl
 801fc28:	b2d2      	uxtb	r2, r2
 801fc2a:	fb09 b902 	mla	r9, r9, r2, fp
 801fc2e:	fa1f f989 	uxth.w	r9, r9
 801fc32:	f109 0b01 	add.w	fp, r9, #1
 801fc36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fc3a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fc3e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fc42:	fb1b fb0a 	smulbb	fp, fp, sl
 801fc46:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc4a:	fb17 fa0a 	smulbb	sl, r7, sl
 801fc4e:	f805 9006 	strb.w	r9, [r5, r6]
 801fc52:	442e      	add	r6, r5
 801fc54:	78b7      	ldrb	r7, [r6, #2]
 801fc56:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fc5a:	fb07 aa02 	mla	sl, r7, r2, sl
 801fc5e:	fb09 b902 	mla	r9, r9, r2, fp
 801fc62:	fa1f fa8a 	uxth.w	sl, sl
 801fc66:	fa1f f989 	uxth.w	r9, r9
 801fc6a:	f10a 0701 	add.w	r7, sl, #1
 801fc6e:	f109 0b01 	add.w	fp, r9, #1
 801fc72:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fc76:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fc7a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fc7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc82:	f886 a002 	strb.w	sl, [r6, #2]
 801fc86:	f886 9001 	strb.w	r9, [r6, #1]
 801fc8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fc8c:	f10c 0c01 	add.w	ip, ip, #1
 801fc90:	4414      	add	r4, r2
 801fc92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fc94:	4410      	add	r0, r2
 801fc96:	e765      	b.n	801fb64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801fc98:	b005      	add	sp, #20
 801fc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fc9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fca2:	b085      	sub	sp, #20
 801fca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fca8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fcaa:	9203      	str	r2, [sp, #12]
 801fcac:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801fcb0:	6860      	ldr	r0, [r4, #4]
 801fcb2:	9201      	str	r2, [sp, #4]
 801fcb4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fcb8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fcbc:	fb00 2505 	mla	r5, r0, r5, r2
 801fcc0:	6822      	ldr	r2, [r4, #0]
 801fcc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fcc6:	4415      	add	r5, r2
 801fcc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fcca:	6812      	ldr	r2, [r2, #0]
 801fccc:	9202      	str	r2, [sp, #8]
 801fcce:	2900      	cmp	r1, #0
 801fcd0:	dc03      	bgt.n	801fcda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801fcd2:	9a03      	ldr	r2, [sp, #12]
 801fcd4:	2a00      	cmp	r2, #0
 801fcd6:	f340 8122 	ble.w	801ff1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801fcda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcdc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fce0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fce2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	dd0f      	ble.n	801fd0a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801fcea:	1422      	asrs	r2, r4, #16
 801fcec:	d406      	bmi.n	801fcfc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fcee:	4572      	cmp	r2, lr
 801fcf0:	da04      	bge.n	801fcfc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fcf2:	1402      	asrs	r2, r0, #16
 801fcf4:	d402      	bmi.n	801fcfc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fcf6:	9e01      	ldr	r6, [sp, #4]
 801fcf8:	42b2      	cmp	r2, r6
 801fcfa:	db07      	blt.n	801fd0c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fcfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fcfe:	3b01      	subs	r3, #1
 801fd00:	3503      	adds	r5, #3
 801fd02:	4414      	add	r4, r2
 801fd04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd06:	4410      	add	r0, r2
 801fd08:	e7ed      	b.n	801fce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801fd0a:	d06e      	beq.n	801fdea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801fd0c:	1e5a      	subs	r2, r3, #1
 801fd0e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fd10:	fb06 4602 	mla	r6, r6, r2, r4
 801fd14:	1436      	asrs	r6, r6, #16
 801fd16:	d45d      	bmi.n	801fdd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fd18:	4576      	cmp	r6, lr
 801fd1a:	da5b      	bge.n	801fdd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fd1c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fd1e:	fb06 0202 	mla	r2, r6, r2, r0
 801fd22:	1412      	asrs	r2, r2, #16
 801fd24:	d456      	bmi.n	801fdd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fd26:	9e01      	ldr	r6, [sp, #4]
 801fd28:	42b2      	cmp	r2, r6
 801fd2a:	da53      	bge.n	801fdd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fd2c:	1cee      	adds	r6, r5, #3
 801fd2e:	469a      	mov	sl, r3
 801fd30:	f1ba 0f00 	cmp.w	sl, #0
 801fd34:	dd54      	ble.n	801fde0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801fd36:	1427      	asrs	r7, r4, #16
 801fd38:	1402      	asrs	r2, r0, #16
 801fd3a:	fb0e 7202 	mla	r2, lr, r2, r7
 801fd3e:	9f02      	ldr	r7, [sp, #8]
 801fd40:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801fd44:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801fd48:	d03c      	beq.n	801fdc4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801fd4a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fd4e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fd52:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801fd56:	fa5f f28c 	uxtb.w	r2, ip
 801fd5a:	b2ff      	uxtb	r7, r7
 801fd5c:	f000 80d8 	beq.w	801ff10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801fd60:	fa1f f882 	uxth.w	r8, r2
 801fd64:	43d2      	mvns	r2, r2
 801fd66:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801fd6a:	fb17 f708 	smulbb	r7, r7, r8
 801fd6e:	b2d2      	uxtb	r2, r2
 801fd70:	fb19 f908 	smulbb	r9, r9, r8
 801fd74:	fb0c 7702 	mla	r7, ip, r2, r7
 801fd78:	fb1b f808 	smulbb	r8, fp, r8
 801fd7c:	b2bf      	uxth	r7, r7
 801fd7e:	f107 0c01 	add.w	ip, r7, #1
 801fd82:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801fd86:	123f      	asrs	r7, r7, #8
 801fd88:	f806 7c03 	strb.w	r7, [r6, #-3]
 801fd8c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801fd90:	fb07 9902 	mla	r9, r7, r2, r9
 801fd94:	fa1f f989 	uxth.w	r9, r9
 801fd98:	f109 0701 	add.w	r7, r9, #1
 801fd9c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fda0:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801fda4:	fb07 8802 	mla	r8, r7, r2, r8
 801fda8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fdac:	fa1f f888 	uxth.w	r8, r8
 801fdb0:	f806 9c02 	strb.w	r9, [r6, #-2]
 801fdb4:	f108 0201 	add.w	r2, r8, #1
 801fdb8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fdbc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fdc0:	f806 8c01 	strb.w	r8, [r6, #-1]
 801fdc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fdc6:	3603      	adds	r6, #3
 801fdc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fdcc:	4414      	add	r4, r2
 801fdce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdd0:	4410      	add	r0, r2
 801fdd2:	e7ad      	b.n	801fd30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801fdd4:	f04f 0c00 	mov.w	ip, #0
 801fdd8:	eba3 020c 	sub.w	r2, r3, ip
 801fddc:	2a00      	cmp	r2, #0
 801fdde:	dc3d      	bgt.n	801fe5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801fde0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fde4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fde8:	441d      	add	r5, r3
 801fdea:	2900      	cmp	r1, #0
 801fdec:	f340 8097 	ble.w	801ff1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801fdf0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fdf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdf6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdfa:	3901      	subs	r1, #1
 801fdfc:	eeb0 6a62 	vmov.f32	s12, s5
 801fe00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe04:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe0c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fe10:	eeb0 6a43 	vmov.f32	s12, s6
 801fe14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe18:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fe1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe20:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe24:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe34:	ee12 2a90 	vmov	r2, s5
 801fe38:	eef0 2a47 	vmov.f32	s5, s14
 801fe3c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe40:	ee13 2a10 	vmov	r2, s6
 801fe44:	9311      	str	r3, [sp, #68]	; 0x44
 801fe46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe48:	eeb0 3a67 	vmov.f32	s6, s15
 801fe4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe50:	9a03      	ldr	r2, [sp, #12]
 801fe52:	9312      	str	r3, [sp, #72]	; 0x48
 801fe54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe56:	bf08      	it	eq
 801fe58:	4613      	moveq	r3, r2
 801fe5a:	e738      	b.n	801fcce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801fe5c:	1426      	asrs	r6, r4, #16
 801fe5e:	d448      	bmi.n	801fef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fe60:	4576      	cmp	r6, lr
 801fe62:	da46      	bge.n	801fef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fe64:	1402      	asrs	r2, r0, #16
 801fe66:	d444      	bmi.n	801fef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fe68:	9f01      	ldr	r7, [sp, #4]
 801fe6a:	42ba      	cmp	r2, r7
 801fe6c:	da41      	bge.n	801fef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fe6e:	fb0e 6202 	mla	r2, lr, r2, r6
 801fe72:	9e02      	ldr	r6, [sp, #8]
 801fe74:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fe78:	0e3a      	lsrs	r2, r7, #24
 801fe7a:	d03a      	beq.n	801fef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fe7c:	2aff      	cmp	r2, #255	; 0xff
 801fe7e:	b2d6      	uxtb	r6, r2
 801fe80:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fe84:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801fe88:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801fe8c:	b2ff      	uxtb	r7, r7
 801fe8e:	d037      	beq.n	801ff00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801fe90:	fa1f f986 	uxth.w	r9, r6
 801fe94:	4462      	add	r2, ip
 801fe96:	43f6      	mvns	r6, r6
 801fe98:	f815 8002 	ldrb.w	r8, [r5, r2]
 801fe9c:	fb17 f709 	smulbb	r7, r7, r9
 801fea0:	fb1a fa09 	smulbb	sl, sl, r9
 801fea4:	b2f6      	uxtb	r6, r6
 801fea6:	fb1b f909 	smulbb	r9, fp, r9
 801feaa:	fb08 7706 	mla	r7, r8, r6, r7
 801feae:	b2bf      	uxth	r7, r7
 801feb0:	f107 0801 	add.w	r8, r7, #1
 801feb4:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801feb8:	123f      	asrs	r7, r7, #8
 801feba:	54af      	strb	r7, [r5, r2]
 801febc:	442a      	add	r2, r5
 801febe:	7857      	ldrb	r7, [r2, #1]
 801fec0:	fb07 aa06 	mla	sl, r7, r6, sl
 801fec4:	fa1f fa8a 	uxth.w	sl, sl
 801fec8:	f10a 0701 	add.w	r7, sl, #1
 801fecc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fed0:	7897      	ldrb	r7, [r2, #2]
 801fed2:	fb07 9906 	mla	r9, r7, r6, r9
 801fed6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801feda:	fa1f f989 	uxth.w	r9, r9
 801fede:	f882 a001 	strb.w	sl, [r2, #1]
 801fee2:	f109 0601 	add.w	r6, r9, #1
 801fee6:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801feea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801feee:	f882 9002 	strb.w	r9, [r2, #2]
 801fef2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fef4:	f10c 0c01 	add.w	ip, ip, #1
 801fef8:	4414      	add	r4, r2
 801fefa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fefc:	4410      	add	r0, r2
 801fefe:	e76b      	b.n	801fdd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801ff00:	4462      	add	r2, ip
 801ff02:	54af      	strb	r7, [r5, r2]
 801ff04:	442a      	add	r2, r5
 801ff06:	f882 a001 	strb.w	sl, [r2, #1]
 801ff0a:	f882 b002 	strb.w	fp, [r2, #2]
 801ff0e:	e7f0      	b.n	801fef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ff10:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ff14:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ff18:	f806 bc01 	strb.w	fp, [r6, #-1]
 801ff1c:	e752      	b.n	801fdc4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ff1e:	b005      	add	sp, #20
 801ff20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff28:	b087      	sub	sp, #28
 801ff2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ff2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff30:	9204      	str	r2, [sp, #16]
 801ff32:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801ff36:	6860      	ldr	r0, [r4, #4]
 801ff38:	9205      	str	r2, [sp, #20]
 801ff3a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801ff3e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801ff42:	9101      	str	r1, [sp, #4]
 801ff44:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ff48:	fb00 2505 	mla	r5, r0, r5, r2
 801ff4c:	6822      	ldr	r2, [r4, #0]
 801ff4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ff52:	4415      	add	r5, r2
 801ff54:	f10e 0201 	add.w	r2, lr, #1
 801ff58:	f022 0201 	bic.w	r2, r2, #1
 801ff5c:	9202      	str	r2, [sp, #8]
 801ff5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ff60:	6812      	ldr	r2, [r2, #0]
 801ff62:	9203      	str	r2, [sp, #12]
 801ff64:	9a01      	ldr	r2, [sp, #4]
 801ff66:	2a00      	cmp	r2, #0
 801ff68:	dc03      	bgt.n	801ff72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801ff6a:	9a04      	ldr	r2, [sp, #16]
 801ff6c:	2a00      	cmp	r2, #0
 801ff6e:	f340 8132 	ble.w	80201d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ff72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ff74:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ff78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff7a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	dd0e      	ble.n	801ffa0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ff82:	1422      	asrs	r2, r4, #16
 801ff84:	d405      	bmi.n	801ff92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ff86:	4596      	cmp	lr, r2
 801ff88:	dd03      	ble.n	801ff92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ff8a:	1402      	asrs	r2, r0, #16
 801ff8c:	d401      	bmi.n	801ff92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ff8e:	4542      	cmp	r2, r8
 801ff90:	db07      	blt.n	801ffa2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ff92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff94:	3b01      	subs	r3, #1
 801ff96:	3503      	adds	r5, #3
 801ff98:	4414      	add	r4, r2
 801ff9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff9c:	4410      	add	r0, r2
 801ff9e:	e7ee      	b.n	801ff7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801ffa0:	d010      	beq.n	801ffc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ffa2:	1e5a      	subs	r2, r3, #1
 801ffa4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ffa6:	fb06 4602 	mla	r6, r6, r2, r4
 801ffaa:	1436      	asrs	r6, r6, #16
 801ffac:	d546      	bpl.n	802003c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ffae:	4699      	mov	r9, r3
 801ffb0:	462e      	mov	r6, r5
 801ffb2:	f1b9 0f00 	cmp.w	r9, #0
 801ffb6:	f300 80ac 	bgt.w	8020112 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801ffba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffc2:	441d      	add	r5, r3
 801ffc4:	9b01      	ldr	r3, [sp, #4]
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	f340 8105 	ble.w	80201d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ffcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ffd6:	eeb0 6a62 	vmov.f32	s12, s5
 801ffda:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ffde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ffe2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffe6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ffea:	eeb0 6a43 	vmov.f32	s12, s6
 801ffee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fff2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fff6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fffa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fffe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020002:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020006:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802000a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802000e:	ee12 2a90 	vmov	r2, s5
 8020012:	eef0 2a47 	vmov.f32	s5, s14
 8020016:	fb92 f3f3 	sdiv	r3, r2, r3
 802001a:	ee13 2a10 	vmov	r2, s6
 802001e:	9313      	str	r3, [sp, #76]	; 0x4c
 8020020:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020022:	eeb0 3a67 	vmov.f32	s6, s15
 8020026:	fb92 f3f3 	sdiv	r3, r2, r3
 802002a:	9314      	str	r3, [sp, #80]	; 0x50
 802002c:	9b01      	ldr	r3, [sp, #4]
 802002e:	9a04      	ldr	r2, [sp, #16]
 8020030:	3b01      	subs	r3, #1
 8020032:	9301      	str	r3, [sp, #4]
 8020034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020036:	bf08      	it	eq
 8020038:	4613      	moveq	r3, r2
 802003a:	e793      	b.n	801ff64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 802003c:	45b6      	cmp	lr, r6
 802003e:	ddb6      	ble.n	801ffae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8020040:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020042:	fb06 0202 	mla	r2, r6, r2, r0
 8020046:	1412      	asrs	r2, r2, #16
 8020048:	d4b1      	bmi.n	801ffae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802004a:	4542      	cmp	r2, r8
 802004c:	daaf      	bge.n	801ffae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802004e:	1cee      	adds	r6, r5, #3
 8020050:	4699      	mov	r9, r3
 8020052:	f1b9 0f00 	cmp.w	r9, #0
 8020056:	ddb0      	ble.n	801ffba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8020058:	1422      	asrs	r2, r4, #16
 802005a:	9902      	ldr	r1, [sp, #8]
 802005c:	1407      	asrs	r7, r0, #16
 802005e:	fb01 2707 	mla	r7, r1, r7, r2
 8020062:	9903      	ldr	r1, [sp, #12]
 8020064:	087a      	lsrs	r2, r7, #1
 8020066:	5c8a      	ldrb	r2, [r1, r2]
 8020068:	07f9      	lsls	r1, r7, #31
 802006a:	bf54      	ite	pl
 802006c:	f002 020f 	andpl.w	r2, r2, #15
 8020070:	1112      	asrmi	r2, r2, #4
 8020072:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020076:	b2d2      	uxtb	r2, r2
 8020078:	2a00      	cmp	r2, #0
 802007a:	d042      	beq.n	8020102 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 802007c:	4957      	ldr	r1, [pc, #348]	; (80201dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 802007e:	680f      	ldr	r7, [r1, #0]
 8020080:	9905      	ldr	r1, [sp, #20]
 8020082:	fa5f fb87 	uxtb.w	fp, r7
 8020086:	434a      	muls	r2, r1
 8020088:	f102 0c01 	add.w	ip, r2, #1
 802008c:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8020090:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8020094:	1212      	asrs	r2, r2, #8
 8020096:	fa1f fa82 	uxth.w	sl, r2
 802009a:	43d2      	mvns	r2, r2
 802009c:	fb1b fb0a 	smulbb	fp, fp, sl
 80200a0:	b2d2      	uxtb	r2, r2
 80200a2:	fb0c bc02 	mla	ip, ip, r2, fp
 80200a6:	fa1f fc8c 	uxth.w	ip, ip
 80200aa:	f10c 0b01 	add.w	fp, ip, #1
 80200ae:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80200b2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80200b6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80200ba:	fb1b fb0a 	smulbb	fp, fp, sl
 80200be:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80200c2:	fb17 fa0a 	smulbb	sl, r7, sl
 80200c6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80200ca:	f806 cc03 	strb.w	ip, [r6, #-3]
 80200ce:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 80200d2:	fb07 aa02 	mla	sl, r7, r2, sl
 80200d6:	fb0c bc02 	mla	ip, ip, r2, fp
 80200da:	fa1f fa8a 	uxth.w	sl, sl
 80200de:	fa1f fc8c 	uxth.w	ip, ip
 80200e2:	f10a 0701 	add.w	r7, sl, #1
 80200e6:	f10c 0b01 	add.w	fp, ip, #1
 80200ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80200ee:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80200f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80200f6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80200fa:	f806 ac01 	strb.w	sl, [r6, #-1]
 80200fe:	f806 cc02 	strb.w	ip, [r6, #-2]
 8020102:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020104:	3603      	adds	r6, #3
 8020106:	f109 39ff 	add.w	r9, r9, #4294967295
 802010a:	4414      	add	r4, r2
 802010c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802010e:	4410      	add	r0, r2
 8020110:	e79f      	b.n	8020052 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 8020112:	1422      	asrs	r2, r4, #16
 8020114:	d457      	bmi.n	80201c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8020116:	4596      	cmp	lr, r2
 8020118:	dd55      	ble.n	80201c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802011a:	1407      	asrs	r7, r0, #16
 802011c:	d453      	bmi.n	80201c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802011e:	4547      	cmp	r7, r8
 8020120:	da51      	bge.n	80201c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8020122:	9902      	ldr	r1, [sp, #8]
 8020124:	fb07 2701 	mla	r7, r7, r1, r2
 8020128:	9903      	ldr	r1, [sp, #12]
 802012a:	087a      	lsrs	r2, r7, #1
 802012c:	07ff      	lsls	r7, r7, #31
 802012e:	5c8a      	ldrb	r2, [r1, r2]
 8020130:	bf54      	ite	pl
 8020132:	f002 020f 	andpl.w	r2, r2, #15
 8020136:	1112      	asrmi	r2, r2, #4
 8020138:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802013c:	b2d2      	uxtb	r2, r2
 802013e:	2a00      	cmp	r2, #0
 8020140:	d041      	beq.n	80201c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8020142:	4926      	ldr	r1, [pc, #152]	; (80201dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8020144:	680f      	ldr	r7, [r1, #0]
 8020146:	9905      	ldr	r1, [sp, #20]
 8020148:	fa5f fb87 	uxtb.w	fp, r7
 802014c:	434a      	muls	r2, r1
 802014e:	f102 0c01 	add.w	ip, r2, #1
 8020152:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8020156:	f896 c000 	ldrb.w	ip, [r6]
 802015a:	1212      	asrs	r2, r2, #8
 802015c:	fa1f fa82 	uxth.w	sl, r2
 8020160:	43d2      	mvns	r2, r2
 8020162:	fb1b fb0a 	smulbb	fp, fp, sl
 8020166:	b2d2      	uxtb	r2, r2
 8020168:	fb0c bc02 	mla	ip, ip, r2, fp
 802016c:	fa1f fc8c 	uxth.w	ip, ip
 8020170:	f10c 0b01 	add.w	fp, ip, #1
 8020174:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020178:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802017c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020180:	fb1b fb0a 	smulbb	fp, fp, sl
 8020184:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020188:	fb17 fa0a 	smulbb	sl, r7, sl
 802018c:	78b7      	ldrb	r7, [r6, #2]
 802018e:	f886 c000 	strb.w	ip, [r6]
 8020192:	f896 c001 	ldrb.w	ip, [r6, #1]
 8020196:	fb07 aa02 	mla	sl, r7, r2, sl
 802019a:	fb0c bc02 	mla	ip, ip, r2, fp
 802019e:	fa1f fa8a 	uxth.w	sl, sl
 80201a2:	fa1f fc8c 	uxth.w	ip, ip
 80201a6:	f10a 0701 	add.w	r7, sl, #1
 80201aa:	f10c 0b01 	add.w	fp, ip, #1
 80201ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80201b2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80201b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80201ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80201be:	f886 a002 	strb.w	sl, [r6, #2]
 80201c2:	f886 c001 	strb.w	ip, [r6, #1]
 80201c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80201c8:	3603      	adds	r6, #3
 80201ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80201ce:	4414      	add	r4, r2
 80201d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80201d2:	4410      	add	r0, r2
 80201d4:	e6ed      	b.n	801ffb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80201d6:	b007      	add	sp, #28
 80201d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201dc:	2000bf14 	.word	0x2000bf14

080201e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80201e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e4:	b087      	sub	sp, #28
 80201e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80201ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80201ec:	9205      	str	r2, [sp, #20]
 80201ee:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80201f2:	6860      	ldr	r0, [r4, #4]
 80201f4:	9202      	str	r2, [sp, #8]
 80201f6:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80201fa:	9101      	str	r1, [sp, #4]
 80201fc:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 8020200:	fb00 2606 	mla	r6, r0, r6, r2
 8020204:	6822      	ldr	r2, [r4, #0]
 8020206:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802020a:	4416      	add	r6, r2
 802020c:	f108 0201 	add.w	r2, r8, #1
 8020210:	f022 0201 	bic.w	r2, r2, #1
 8020214:	9203      	str	r2, [sp, #12]
 8020216:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020218:	6812      	ldr	r2, [r2, #0]
 802021a:	9204      	str	r2, [sp, #16]
 802021c:	9a01      	ldr	r2, [sp, #4]
 802021e:	2a00      	cmp	r2, #0
 8020220:	dc03      	bgt.n	802022a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8020222:	9a05      	ldr	r2, [sp, #20]
 8020224:	2a00      	cmp	r2, #0
 8020226:	f340 813a 	ble.w	802049e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802022a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802022c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8020230:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020232:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020236:	2b00      	cmp	r3, #0
 8020238:	dd0f      	ble.n	802025a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802023a:	142a      	asrs	r2, r5, #16
 802023c:	d406      	bmi.n	802024c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802023e:	4590      	cmp	r8, r2
 8020240:	dd04      	ble.n	802024c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8020242:	1422      	asrs	r2, r4, #16
 8020244:	d402      	bmi.n	802024c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8020246:	9802      	ldr	r0, [sp, #8]
 8020248:	4282      	cmp	r2, r0
 802024a:	db07      	blt.n	802025c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 802024c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802024e:	3b01      	subs	r3, #1
 8020250:	3603      	adds	r6, #3
 8020252:	4415      	add	r5, r2
 8020254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020256:	4414      	add	r4, r2
 8020258:	e7ed      	b.n	8020236 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 802025a:	d073      	beq.n	8020344 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 802025c:	1e5a      	subs	r2, r3, #1
 802025e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020260:	fb00 5002 	mla	r0, r0, r2, r5
 8020264:	1400      	asrs	r0, r0, #16
 8020266:	d464      	bmi.n	8020332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8020268:	4580      	cmp	r8, r0
 802026a:	dd62      	ble.n	8020332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 802026c:	9814      	ldr	r0, [sp, #80]	; 0x50
 802026e:	fb00 4202 	mla	r2, r0, r2, r4
 8020272:	1412      	asrs	r2, r2, #16
 8020274:	d45d      	bmi.n	8020332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8020276:	9802      	ldr	r0, [sp, #8]
 8020278:	4282      	cmp	r2, r0
 802027a:	da5a      	bge.n	8020332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 802027c:	1cf0      	adds	r0, r6, #3
 802027e:	469a      	mov	sl, r3
 8020280:	f1ba 0f00 	cmp.w	sl, #0
 8020284:	dd59      	ble.n	802033a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8020286:	142a      	asrs	r2, r5, #16
 8020288:	9903      	ldr	r1, [sp, #12]
 802028a:	1427      	asrs	r7, r4, #16
 802028c:	fb01 2707 	mla	r7, r1, r7, r2
 8020290:	9904      	ldr	r1, [sp, #16]
 8020292:	087a      	lsrs	r2, r7, #1
 8020294:	5c8a      	ldrb	r2, [r1, r2]
 8020296:	07f9      	lsls	r1, r7, #31
 8020298:	bf54      	ite	pl
 802029a:	f002 020f 	andpl.w	r2, r2, #15
 802029e:	1112      	asrmi	r2, r2, #4
 80202a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80202a4:	b2d2      	uxtb	r2, r2
 80202a6:	2a00      	cmp	r2, #0
 80202a8:	d03b      	beq.n	8020322 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80202aa:	497e      	ldr	r1, [pc, #504]	; (80204a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80202ac:	2aff      	cmp	r2, #255	; 0xff
 80202ae:	680f      	ldr	r7, [r1, #0]
 80202b0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80202b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80202b8:	b2ff      	uxtb	r7, r7
 80202ba:	f000 80e9 	beq.w	8020490 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80202be:	fa1f fe82 	uxth.w	lr, r2
 80202c2:	43d2      	mvns	r2, r2
 80202c4:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80202c8:	fb17 f70e 	smulbb	r7, r7, lr
 80202cc:	b2d2      	uxtb	r2, r2
 80202ce:	fb19 f90e 	smulbb	r9, r9, lr
 80202d2:	fb0c 7702 	mla	r7, ip, r2, r7
 80202d6:	fb1b fe0e 	smulbb	lr, fp, lr
 80202da:	b2bf      	uxth	r7, r7
 80202dc:	f107 0c01 	add.w	ip, r7, #1
 80202e0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80202e4:	123f      	asrs	r7, r7, #8
 80202e6:	f800 7c03 	strb.w	r7, [r0, #-3]
 80202ea:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80202ee:	fb07 9902 	mla	r9, r7, r2, r9
 80202f2:	fa1f f989 	uxth.w	r9, r9
 80202f6:	f109 0701 	add.w	r7, r9, #1
 80202fa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80202fe:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8020302:	fb07 ee02 	mla	lr, r7, r2, lr
 8020306:	ea4f 2929 	mov.w	r9, r9, asr #8
 802030a:	fa1f fe8e 	uxth.w	lr, lr
 802030e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020312:	f10e 0201 	add.w	r2, lr, #1
 8020316:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802031a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802031e:	f800 ec01 	strb.w	lr, [r0, #-1]
 8020322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020324:	3003      	adds	r0, #3
 8020326:	f10a 3aff 	add.w	sl, sl, #4294967295
 802032a:	4415      	add	r5, r2
 802032c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802032e:	4414      	add	r4, r2
 8020330:	e7a6      	b.n	8020280 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8020332:	2700      	movs	r7, #0
 8020334:	1bda      	subs	r2, r3, r7
 8020336:	2a00      	cmp	r2, #0
 8020338:	dc40      	bgt.n	80203bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 802033a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802033e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020342:	441e      	add	r6, r3
 8020344:	9b01      	ldr	r3, [sp, #4]
 8020346:	2b00      	cmp	r3, #0
 8020348:	f340 80a9 	ble.w	802049e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802034c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020352:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020356:	eeb0 6a62 	vmov.f32	s12, s5
 802035a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802035e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020362:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020366:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802036a:	eeb0 6a43 	vmov.f32	s12, s6
 802036e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020372:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020376:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802037a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802037e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020382:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020386:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802038a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802038e:	ee12 2a90 	vmov	r2, s5
 8020392:	eef0 2a47 	vmov.f32	s5, s14
 8020396:	fb92 f3f3 	sdiv	r3, r2, r3
 802039a:	ee13 2a10 	vmov	r2, s6
 802039e:	9313      	str	r3, [sp, #76]	; 0x4c
 80203a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203a2:	eeb0 3a67 	vmov.f32	s6, s15
 80203a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80203aa:	9314      	str	r3, [sp, #80]	; 0x50
 80203ac:	9b01      	ldr	r3, [sp, #4]
 80203ae:	9a05      	ldr	r2, [sp, #20]
 80203b0:	3b01      	subs	r3, #1
 80203b2:	9301      	str	r3, [sp, #4]
 80203b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203b6:	bf08      	it	eq
 80203b8:	4613      	moveq	r3, r2
 80203ba:	e72f      	b.n	802021c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80203bc:	142a      	asrs	r2, r5, #16
 80203be:	d458      	bmi.n	8020472 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80203c0:	4590      	cmp	r8, r2
 80203c2:	dd56      	ble.n	8020472 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80203c4:	1420      	asrs	r0, r4, #16
 80203c6:	d454      	bmi.n	8020472 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80203c8:	9902      	ldr	r1, [sp, #8]
 80203ca:	4288      	cmp	r0, r1
 80203cc:	da51      	bge.n	8020472 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80203ce:	9903      	ldr	r1, [sp, #12]
 80203d0:	fb00 2001 	mla	r0, r0, r1, r2
 80203d4:	9904      	ldr	r1, [sp, #16]
 80203d6:	0842      	lsrs	r2, r0, #1
 80203d8:	07c0      	lsls	r0, r0, #31
 80203da:	5c8a      	ldrb	r2, [r1, r2]
 80203dc:	bf54      	ite	pl
 80203de:	f002 020f 	andpl.w	r2, r2, #15
 80203e2:	1112      	asrmi	r2, r2, #4
 80203e4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80203e8:	b2d2      	uxtb	r2, r2
 80203ea:	2a00      	cmp	r2, #0
 80203ec:	d041      	beq.n	8020472 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80203ee:	492d      	ldr	r1, [pc, #180]	; (80204a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80203f0:	2aff      	cmp	r2, #255	; 0xff
 80203f2:	6808      	ldr	r0, [r1, #0]
 80203f4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80203f8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80203fc:	fa5f fc80 	uxtb.w	ip, r0
 8020400:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8020404:	d03b      	beq.n	802047e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8020406:	fa1f f982 	uxth.w	r9, r2
 802040a:	4438      	add	r0, r7
 802040c:	43d2      	mvns	r2, r2
 802040e:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020412:	fb1c fc09 	smulbb	ip, ip, r9
 8020416:	fb1a fa09 	smulbb	sl, sl, r9
 802041a:	b2d2      	uxtb	r2, r2
 802041c:	fb1b f909 	smulbb	r9, fp, r9
 8020420:	fb0e cc02 	mla	ip, lr, r2, ip
 8020424:	fa1f fc8c 	uxth.w	ip, ip
 8020428:	f10c 0e01 	add.w	lr, ip, #1
 802042c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8020430:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020434:	f806 c000 	strb.w	ip, [r6, r0]
 8020438:	4430      	add	r0, r6
 802043a:	f890 c001 	ldrb.w	ip, [r0, #1]
 802043e:	fb0c aa02 	mla	sl, ip, r2, sl
 8020442:	fa1f fa8a 	uxth.w	sl, sl
 8020446:	f10a 0c01 	add.w	ip, sl, #1
 802044a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802044e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8020452:	fb0c 9902 	mla	r9, ip, r2, r9
 8020456:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802045a:	fa1f f989 	uxth.w	r9, r9
 802045e:	f880 a001 	strb.w	sl, [r0, #1]
 8020462:	f109 0201 	add.w	r2, r9, #1
 8020466:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802046a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802046e:	f880 9002 	strb.w	r9, [r0, #2]
 8020472:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020474:	3701      	adds	r7, #1
 8020476:	4415      	add	r5, r2
 8020478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802047a:	4414      	add	r4, r2
 802047c:	e75a      	b.n	8020334 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 802047e:	4438      	add	r0, r7
 8020480:	f806 c000 	strb.w	ip, [r6, r0]
 8020484:	4430      	add	r0, r6
 8020486:	f880 a001 	strb.w	sl, [r0, #1]
 802048a:	f880 b002 	strb.w	fp, [r0, #2]
 802048e:	e7f0      	b.n	8020472 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020490:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020494:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020498:	f800 bc01 	strb.w	fp, [r0, #-1]
 802049c:	e741      	b.n	8020322 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802049e:	b007      	add	sp, #28
 80204a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204a4:	2000bf14 	.word	0x2000bf14

080204a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80204a8:	4770      	bx	lr

080204aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80204aa:	4770      	bx	lr

080204ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80204ac:	4770      	bx	lr

080204ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80204ae:	4770      	bx	lr

080204b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80204b0:	4770      	bx	lr

080204b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80204b2:	4770      	bx	lr

080204b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80204b4:	4770      	bx	lr

080204b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80204b6:	4770      	bx	lr

080204b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80204b8:	4770      	bx	lr

080204ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80204ba:	4770      	bx	lr

080204bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80204bc:	4770      	bx	lr

080204be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80204be:	4770      	bx	lr

080204c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80204c0:	4770      	bx	lr

080204c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80204c2:	4770      	bx	lr

080204c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80204c4:	4770      	bx	lr

080204c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80204c6:	4770      	bx	lr

080204c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80204c8:	4770      	bx	lr

080204ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80204ca:	4770      	bx	lr

080204cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80204cc:	4770      	bx	lr

080204ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80204ce:	4770      	bx	lr

080204d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80204d0:	2bff      	cmp	r3, #255	; 0xff
 80204d2:	b508      	push	{r3, lr}
 80204d4:	d04f      	beq.n	8020576 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80204d6:	2a2c      	cmp	r2, #44	; 0x2c
 80204d8:	d032      	beq.n	8020540 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80204da:	d80f      	bhi.n	80204fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80204dc:	2a08      	cmp	r2, #8
 80204de:	d046      	beq.n	802056e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80204e0:	d805      	bhi.n	80204ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80204e2:	2a04      	cmp	r2, #4
 80204e4:	d041      	beq.n	802056a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80204e6:	2a05      	cmp	r2, #5
 80204e8:	d03d      	beq.n	8020566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80204ea:	2000      	movs	r0, #0
 80204ec:	e027      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80204ee:	2a0a      	cmp	r2, #10
 80204f0:	d03d      	beq.n	802056e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80204f2:	d301      	bcc.n	80204f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80204f4:	2a0b      	cmp	r2, #11
 80204f6:	d1f8      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80204f8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80204fa:	e020      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80204fc:	2a30      	cmp	r2, #48	; 0x30
 80204fe:	d038      	beq.n	8020572 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020500:	d808      	bhi.n	8020514 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8020502:	2a2e      	cmp	r2, #46	; 0x2e
 8020504:	684b      	ldr	r3, [r1, #4]
 8020506:	d029      	beq.n	802055c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8020508:	d90b      	bls.n	8020522 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 802050a:	781b      	ldrb	r3, [r3, #0]
 802050c:	2b00      	cmp	r3, #0
 802050e:	d1ec      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020510:	6a00      	ldr	r0, [r0, #32]
 8020512:	e014      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020514:	2a32      	cmp	r2, #50	; 0x32
 8020516:	d02c      	beq.n	8020572 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020518:	d301      	bcc.n	802051e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 802051a:	2a33      	cmp	r2, #51	; 0x33
 802051c:	d1e5      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802051e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8020520:	e00d      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020522:	781b      	ldrb	r3, [r3, #0]
 8020524:	2b01      	cmp	r3, #1
 8020526:	d009      	beq.n	802053c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020528:	d3f2      	bcc.n	8020510 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 802052a:	2b02      	cmp	r3, #2
 802052c:	d1dd      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802052e:	4b39      	ldr	r3, [pc, #228]	; (8020614 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8020530:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8020534:	4a38      	ldr	r2, [pc, #224]	; (8020618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020536:	4839      	ldr	r0, [pc, #228]	; (802061c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8020538:	f007 ff3e 	bl	80283b8 <__assert_func>
 802053c:	6900      	ldr	r0, [r0, #16]
 802053e:	bd08      	pop	{r3, pc}
 8020540:	684b      	ldr	r3, [r1, #4]
 8020542:	781b      	ldrb	r3, [r3, #0]
 8020544:	2b01      	cmp	r3, #1
 8020546:	d007      	beq.n	8020558 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8020548:	d30b      	bcc.n	8020562 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 802054a:	2b02      	cmp	r3, #2
 802054c:	d1cd      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802054e:	4b31      	ldr	r3, [pc, #196]	; (8020614 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8020550:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8020554:	4a30      	ldr	r2, [pc, #192]	; (8020618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020556:	e7ee      	b.n	8020536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020558:	6880      	ldr	r0, [r0, #8]
 802055a:	e7f0      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802055c:	781b      	ldrb	r3, [r3, #0]
 802055e:	2b00      	cmp	r3, #0
 8020560:	d1c3      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020562:	6980      	ldr	r0, [r0, #24]
 8020564:	e7eb      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020566:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020568:	e7e9      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802056a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 802056c:	e7e7      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802056e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8020570:	e7e5      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020572:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8020574:	e7e3      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020576:	2a2c      	cmp	r2, #44	; 0x2c
 8020578:	d030      	beq.n	80205dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 802057a:	d80f      	bhi.n	802059c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 802057c:	2a08      	cmp	r2, #8
 802057e:	d044      	beq.n	802060a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020580:	d805      	bhi.n	802058e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8020582:	2a04      	cmp	r2, #4
 8020584:	d03f      	beq.n	8020606 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8020586:	2a05      	cmp	r2, #5
 8020588:	d1af      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802058a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 802058c:	e7d7      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802058e:	2a0a      	cmp	r2, #10
 8020590:	d03b      	beq.n	802060a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020592:	d301      	bcc.n	8020598 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8020594:	2a0b      	cmp	r2, #11
 8020596:	d1a8      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020598:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802059a:	e7d0      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802059c:	2a30      	cmp	r2, #48	; 0x30
 802059e:	d036      	beq.n	802060e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80205a0:	d808      	bhi.n	80205b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80205a2:	2a2e      	cmp	r2, #46	; 0x2e
 80205a4:	684b      	ldr	r3, [r1, #4]
 80205a6:	d028      	beq.n	80205fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80205a8:	d90b      	bls.n	80205c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80205aa:	781b      	ldrb	r3, [r3, #0]
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d19c      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80205b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80205b2:	e7c4      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80205b4:	2a32      	cmp	r2, #50	; 0x32
 80205b6:	d02a      	beq.n	802060e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80205b8:	d301      	bcc.n	80205be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80205ba:	2a33      	cmp	r2, #51	; 0x33
 80205bc:	d195      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80205be:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80205c0:	e7bd      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80205c2:	781b      	ldrb	r3, [r3, #0]
 80205c4:	2b01      	cmp	r3, #1
 80205c6:	d007      	beq.n	80205d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80205c8:	d3f2      	bcc.n	80205b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80205ca:	2b02      	cmp	r3, #2
 80205cc:	d18d      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80205ce:	4b11      	ldr	r3, [pc, #68]	; (8020614 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80205d0:	f240 31e1 	movw	r1, #993	; 0x3e1
 80205d4:	4a10      	ldr	r2, [pc, #64]	; (8020618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80205d6:	e7ae      	b.n	8020536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80205d8:	6940      	ldr	r0, [r0, #20]
 80205da:	e7b0      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80205dc:	684b      	ldr	r3, [r1, #4]
 80205de:	781b      	ldrb	r3, [r3, #0]
 80205e0:	2b01      	cmp	r3, #1
 80205e2:	d008      	beq.n	80205f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80205e4:	d30d      	bcc.n	8020602 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80205e6:	2b02      	cmp	r3, #2
 80205e8:	f47f af7f 	bne.w	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80205ec:	4b09      	ldr	r3, [pc, #36]	; (8020614 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80205ee:	f240 31ed 	movw	r1, #1005	; 0x3ed
 80205f2:	4a09      	ldr	r2, [pc, #36]	; (8020618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80205f4:	e79f      	b.n	8020536 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80205f6:	68c0      	ldr	r0, [r0, #12]
 80205f8:	e7a1      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80205fa:	781b      	ldrb	r3, [r3, #0]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	f47f af74 	bne.w	80204ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020602:	69c0      	ldr	r0, [r0, #28]
 8020604:	e79b      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020606:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8020608:	e799      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802060a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802060c:	e797      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802060e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8020610:	e795      	b.n	802053e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020612:	bf00      	nop
 8020614:	0802d313 	.word	0x0802d313
 8020618:	0802dac7 	.word	0x0802dac7
 802061c:	0802d35f 	.word	0x0802d35f

08020620 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8020620:	b508      	push	{r3, lr}
 8020622:	4b06      	ldr	r3, [pc, #24]	; (802063c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8020624:	8818      	ldrh	r0, [r3, #0]
 8020626:	b928      	cbnz	r0, 8020634 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8020628:	4b05      	ldr	r3, [pc, #20]	; (8020640 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 802062a:	21d7      	movs	r1, #215	; 0xd7
 802062c:	4a05      	ldr	r2, [pc, #20]	; (8020644 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 802062e:	4806      	ldr	r0, [pc, #24]	; (8020648 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8020630:	f007 fec2 	bl	80283b8 <__assert_func>
 8020634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020638:	b280      	uxth	r0, r0
 802063a:	bd08      	pop	{r3, pc}
 802063c:	2000bee4 	.word	0x2000bee4
 8020640:	0802d5ae 	.word	0x0802d5ae
 8020644:	0802da8c 	.word	0x0802da8c
 8020648:	0802d5f0 	.word	0x0802d5f0

0802064c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 802064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020650:	4616      	mov	r6, r2
 8020652:	b087      	sub	sp, #28
 8020654:	461f      	mov	r7, r3
 8020656:	b33b      	cbz	r3, 80206a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020658:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802065c:	b323      	cbz	r3, 80206a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802065e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020662:	b30b      	cbz	r3, 80206a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020664:	6808      	ldr	r0, [r1, #0]
 8020666:	ab04      	add	r3, sp, #16
 8020668:	6849      	ldr	r1, [r1, #4]
 802066a:	4c5a      	ldr	r4, [pc, #360]	; (80207d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 802066c:	c303      	stmia	r3!, {r0, r1}
 802066e:	a804      	add	r0, sp, #16
 8020670:	f7fb fd34 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020674:	6820      	ldr	r0, [r4, #0]
 8020676:	6803      	ldr	r3, [r0, #0]
 8020678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802067a:	4798      	blx	r3
 802067c:	2fff      	cmp	r7, #255	; 0xff
 802067e:	4623      	mov	r3, r4
 8020680:	d015      	beq.n	80206ae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020682:	f010 0f08 	tst.w	r0, #8
 8020686:	d015      	beq.n	80206b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8020688:	6818      	ldr	r0, [r3, #0]
 802068a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802068e:	6801      	ldr	r1, [r0, #0]
 8020690:	9401      	str	r4, [sp, #4]
 8020692:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020696:	9702      	str	r7, [sp, #8]
 8020698:	9400      	str	r4, [sp, #0]
 802069a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802069e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 80206a0:	4631      	mov	r1, r6
 80206a2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80206a6:	47a0      	blx	r4
 80206a8:	b007      	add	sp, #28
 80206aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206ae:	f010 0f02 	tst.w	r0, #2
 80206b2:	e7e8      	b.n	8020686 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 80206b4:	6818      	ldr	r0, [r3, #0]
 80206b6:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80206ba:	6803      	ldr	r3, [r0, #0]
 80206bc:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80206c0:	6a1b      	ldr	r3, [r3, #32]
 80206c2:	4798      	blx	r3
 80206c4:	4944      	ldr	r1, [pc, #272]	; (80207d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 80206c6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80206ca:	2fff      	cmp	r7, #255	; 0xff
 80206cc:	f8b1 c000 	ldrh.w	ip, [r1]
 80206d0:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80206d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80206d8:	4688      	mov	r8, r1
 80206da:	fb0c 2303 	mla	r3, ip, r3, r2
 80206de:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80206e2:	b2f2      	uxtb	r2, r6
 80206e4:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 80206e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206ec:	4418      	add	r0, r3
 80206ee:	d112      	bne.n	8020716 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 80206f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80206f4:	2100      	movs	r1, #0
 80206f6:	42a9      	cmp	r1, r5
 80206f8:	da66      	bge.n	80207c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 80206fa:	4603      	mov	r3, r0
 80206fc:	2700      	movs	r7, #0
 80206fe:	42a7      	cmp	r7, r4
 8020700:	f103 0303 	add.w	r3, r3, #3
 8020704:	da57      	bge.n	80207b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8020706:	f803 2c03 	strb.w	r2, [r3, #-3]
 802070a:	3701      	adds	r7, #1
 802070c:	f803 ec02 	strb.w	lr, [r3, #-2]
 8020710:	f803 cc01 	strb.w	ip, [r3, #-1]
 8020714:	e7f3      	b.n	80206fe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8020716:	b2bb      	uxth	r3, r7
 8020718:	f04f 0800 	mov.w	r8, #0
 802071c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020720:	fb0c fc03 	mul.w	ip, ip, r3
 8020724:	fb0e fe03 	mul.w	lr, lr, r3
 8020728:	435a      	muls	r2, r3
 802072a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 802072e:	460f      	mov	r7, r1
 8020730:	b29b      	uxth	r3, r3
 8020732:	45a8      	cmp	r8, r5
 8020734:	da48      	bge.n	80207c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8020736:	4601      	mov	r1, r0
 8020738:	f04f 0a00 	mov.w	sl, #0
 802073c:	45a2      	cmp	sl, r4
 802073e:	f101 0103 	add.w	r1, r1, #3
 8020742:	da2f      	bge.n	80207a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8020744:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8020748:	f10a 0a01 	add.w	sl, sl, #1
 802074c:	fb19 f903 	smulbb	r9, r9, r3
 8020750:	4491      	add	r9, r2
 8020752:	fa1f f989 	uxth.w	r9, r9
 8020756:	f109 0b01 	add.w	fp, r9, #1
 802075a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802075e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020762:	f801 9c03 	strb.w	r9, [r1, #-3]
 8020766:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 802076a:	fb19 f903 	smulbb	r9, r9, r3
 802076e:	44f1      	add	r9, lr
 8020770:	fa1f f989 	uxth.w	r9, r9
 8020774:	f109 0b01 	add.w	fp, r9, #1
 8020778:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802077c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020780:	f801 9c02 	strb.w	r9, [r1, #-2]
 8020784:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8020788:	fb19 f903 	smulbb	r9, r9, r3
 802078c:	44e1      	add	r9, ip
 802078e:	fa1f f989 	uxth.w	r9, r9
 8020792:	f109 0b01 	add.w	fp, r9, #1
 8020796:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802079a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802079e:	f801 9c01 	strb.w	r9, [r1, #-1]
 80207a2:	e7cb      	b.n	802073c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 80207a4:	8839      	ldrh	r1, [r7, #0]
 80207a6:	f108 0801 	add.w	r8, r8, #1
 80207aa:	1b09      	subs	r1, r1, r4
 80207ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80207b0:	4431      	add	r1, r6
 80207b2:	4408      	add	r0, r1
 80207b4:	e7bd      	b.n	8020732 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 80207b6:	f8b8 3000 	ldrh.w	r3, [r8]
 80207ba:	3101      	adds	r1, #1
 80207bc:	1b1b      	subs	r3, r3, r4
 80207be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207c2:	4433      	add	r3, r6
 80207c4:	4418      	add	r0, r3
 80207c6:	e796      	b.n	80206f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 80207c8:	4b02      	ldr	r3, [pc, #8]	; (80207d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 80207ca:	6818      	ldr	r0, [r3, #0]
 80207cc:	6803      	ldr	r3, [r0, #0]
 80207ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80207d0:	4798      	blx	r3
 80207d2:	e769      	b.n	80206a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80207d4:	2000beec 	.word	0x2000beec
 80207d8:	2000bee4 	.word	0x2000bee4

080207dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80207dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207e0:	b08d      	sub	sp, #52	; 0x34
 80207e2:	460c      	mov	r4, r1
 80207e4:	4617      	mov	r7, r2
 80207e6:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 80207ea:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 80207ee:	2e00      	cmp	r6, #0
 80207f0:	d04a      	beq.n	8020888 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80207f2:	6810      	ldr	r0, [r2, #0]
 80207f4:	ad08      	add	r5, sp, #32
 80207f6:	6851      	ldr	r1, [r2, #4]
 80207f8:	c503      	stmia	r5!, {r0, r1}
 80207fa:	6818      	ldr	r0, [r3, #0]
 80207fc:	ad0a      	add	r5, sp, #40	; 0x28
 80207fe:	6859      	ldr	r1, [r3, #4]
 8020800:	c503      	stmia	r5!, {r0, r1}
 8020802:	a808      	add	r0, sp, #32
 8020804:	f7fb fc6a 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020808:	4639      	mov	r1, r7
 802080a:	a80a      	add	r0, sp, #40	; 0x28
 802080c:	4f59      	ldr	r7, [pc, #356]	; (8020974 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 802080e:	f7fb fc4d 	bl	801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020812:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020816:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802081a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802081e:	6838      	ldr	r0, [r7, #0]
 8020820:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020824:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8020828:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 802082c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020830:	440c      	add	r4, r1
 8020832:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020836:	440a      	add	r2, r1
 8020838:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802083c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020840:	4413      	add	r3, r2
 8020842:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020846:	6803      	ldr	r3, [r0, #0]
 8020848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802084a:	4798      	blx	r3
 802084c:	2eff      	cmp	r6, #255	; 0xff
 802084e:	f000 8089 	beq.w	8020964 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 8020852:	0743      	lsls	r3, r0, #29
 8020854:	d405      	bmi.n	8020862 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8020856:	f1b9 0f00 	cmp.w	r9, #0
 802085a:	d018      	beq.n	802088e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 802085c:	f010 0f10 	tst.w	r0, #16
 8020860:	d015      	beq.n	802088e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8020862:	6838      	ldr	r0, [r7, #0]
 8020864:	b2ad      	uxth	r5, r5
 8020866:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802086a:	6801      	ldr	r1, [r0, #0]
 802086c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020870:	9500      	str	r5, [sp, #0]
 8020872:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8020876:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 802087a:	9602      	str	r6, [sp, #8]
 802087c:	fa1f f688 	uxth.w	r6, r8
 8020880:	9601      	str	r6, [sp, #4]
 8020882:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8020884:	4621      	mov	r1, r4
 8020886:	47a8      	blx	r5
 8020888:	b00d      	add	sp, #52	; 0x34
 802088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802088e:	6838      	ldr	r0, [r7, #0]
 8020890:	6803      	ldr	r3, [r0, #0]
 8020892:	6a1b      	ldr	r3, [r3, #32]
 8020894:	4798      	blx	r3
 8020896:	4a38      	ldr	r2, [pc, #224]	; (8020978 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8020898:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802089c:	2eff      	cmp	r6, #255	; 0xff
 802089e:	8813      	ldrh	r3, [r2, #0]
 80208a0:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 80208a4:	fb0c 1303 	mla	r3, ip, r3, r1
 80208a8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80208ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208b0:	4418      	add	r0, r3
 80208b2:	d032      	beq.n	802091a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80208b4:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 80208b8:	f04f 0c00 	mov.w	ip, #0
 80208bc:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 80208c0:	9306      	str	r3, [sp, #24]
 80208c2:	45c4      	cmp	ip, r8
 80208c4:	da49      	bge.n	802095a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 80208c6:	4686      	mov	lr, r0
 80208c8:	46a1      	mov	r9, r4
 80208ca:	eba9 0304 	sub.w	r3, r9, r4
 80208ce:	428b      	cmp	r3, r1
 80208d0:	da13      	bge.n	80208fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 80208d2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80208d6:	f89e b000 	ldrb.w	fp, [lr]
 80208da:	9307      	str	r3, [sp, #28]
 80208dc:	9b06      	ldr	r3, [sp, #24]
 80208de:	fb1b fb03 	smulbb	fp, fp, r3
 80208e2:	9b07      	ldr	r3, [sp, #28]
 80208e4:	fb03 b306 	mla	r3, r3, r6, fp
 80208e8:	b29b      	uxth	r3, r3
 80208ea:	f103 0b01 	add.w	fp, r3, #1
 80208ee:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80208f2:	121b      	asrs	r3, r3, #8
 80208f4:	f80e 3b01 	strb.w	r3, [lr], #1
 80208f8:	e7e7      	b.n	80208ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 80208fa:	8813      	ldrh	r3, [r2, #0]
 80208fc:	f10c 0c01 	add.w	ip, ip, #1
 8020900:	1b5b      	subs	r3, r3, r5
 8020902:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020906:	4453      	add	r3, sl
 8020908:	4418      	add	r0, r3
 802090a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802090e:	1b5b      	subs	r3, r3, r5
 8020910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020914:	4453      	add	r3, sl
 8020916:	441c      	add	r4, r3
 8020918:	e7d3      	b.n	80208c2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 802091a:	2600      	movs	r6, #0
 802091c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8020920:	4546      	cmp	r6, r8
 8020922:	da1a      	bge.n	802095a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8020924:	f100 3eff 	add.w	lr, r0, #4294967295
 8020928:	4623      	mov	r3, r4
 802092a:	eba3 0904 	sub.w	r9, r3, r4
 802092e:	4589      	cmp	r9, r1
 8020930:	da04      	bge.n	802093c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8020932:	f813 9b01 	ldrb.w	r9, [r3], #1
 8020936:	f80e 9f01 	strb.w	r9, [lr, #1]!
 802093a:	e7f6      	b.n	802092a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 802093c:	8813      	ldrh	r3, [r2, #0]
 802093e:	3601      	adds	r6, #1
 8020940:	1b5b      	subs	r3, r3, r5
 8020942:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020946:	4463      	add	r3, ip
 8020948:	4418      	add	r0, r3
 802094a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802094e:	1b5b      	subs	r3, r3, r5
 8020950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020954:	4463      	add	r3, ip
 8020956:	441c      	add	r4, r3
 8020958:	e7e2      	b.n	8020920 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 802095a:	6838      	ldr	r0, [r7, #0]
 802095c:	6803      	ldr	r3, [r0, #0]
 802095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020960:	4798      	blx	r3
 8020962:	e791      	b.n	8020888 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020964:	f1b9 0f00 	cmp.w	r9, #0
 8020968:	f47f af78 	bne.w	802085c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 802096c:	f010 0f01 	tst.w	r0, #1
 8020970:	e776      	b.n	8020860 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 8020972:	bf00      	nop
 8020974:	2000beec 	.word	0x2000beec
 8020978:	2000bee4 	.word	0x2000bee4

0802097c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802097c:	b510      	push	{r4, lr}
 802097e:	4604      	mov	r4, r0
 8020980:	2104      	movs	r1, #4
 8020982:	f007 fcee 	bl	8028362 <_ZdlPvj>
 8020986:	4620      	mov	r0, r4
 8020988:	bd10      	pop	{r4, pc}

0802098a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802098a:	b510      	push	{r4, lr}
 802098c:	4604      	mov	r4, r0
 802098e:	2104      	movs	r1, #4
 8020990:	f007 fce7 	bl	8028362 <_ZdlPvj>
 8020994:	4620      	mov	r0, r4
 8020996:	bd10      	pop	{r4, pc}

08020998 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020998:	b510      	push	{r4, lr}
 802099a:	4604      	mov	r4, r0
 802099c:	2104      	movs	r1, #4
 802099e:	f007 fce0 	bl	8028362 <_ZdlPvj>
 80209a2:	4620      	mov	r0, r4
 80209a4:	bd10      	pop	{r4, pc}

080209a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80209a6:	b510      	push	{r4, lr}
 80209a8:	4604      	mov	r4, r0
 80209aa:	2104      	movs	r1, #4
 80209ac:	f007 fcd9 	bl	8028362 <_ZdlPvj>
 80209b0:	4620      	mov	r0, r4
 80209b2:	bd10      	pop	{r4, pc}

080209b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80209b4:	b510      	push	{r4, lr}
 80209b6:	4604      	mov	r4, r0
 80209b8:	2104      	movs	r1, #4
 80209ba:	f007 fcd2 	bl	8028362 <_ZdlPvj>
 80209be:	4620      	mov	r0, r4
 80209c0:	bd10      	pop	{r4, pc}

080209c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80209c2:	b510      	push	{r4, lr}
 80209c4:	4604      	mov	r4, r0
 80209c6:	2104      	movs	r1, #4
 80209c8:	f007 fccb 	bl	8028362 <_ZdlPvj>
 80209cc:	4620      	mov	r0, r4
 80209ce:	bd10      	pop	{r4, pc}

080209d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80209d0:	b510      	push	{r4, lr}
 80209d2:	4604      	mov	r4, r0
 80209d4:	2104      	movs	r1, #4
 80209d6:	f007 fcc4 	bl	8028362 <_ZdlPvj>
 80209da:	4620      	mov	r0, r4
 80209dc:	bd10      	pop	{r4, pc}

080209de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80209de:	b510      	push	{r4, lr}
 80209e0:	4604      	mov	r4, r0
 80209e2:	2104      	movs	r1, #4
 80209e4:	f007 fcbd 	bl	8028362 <_ZdlPvj>
 80209e8:	4620      	mov	r0, r4
 80209ea:	bd10      	pop	{r4, pc}

080209ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80209ec:	b510      	push	{r4, lr}
 80209ee:	4604      	mov	r4, r0
 80209f0:	2104      	movs	r1, #4
 80209f2:	f007 fcb6 	bl	8028362 <_ZdlPvj>
 80209f6:	4620      	mov	r0, r4
 80209f8:	bd10      	pop	{r4, pc}

080209fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80209fa:	b510      	push	{r4, lr}
 80209fc:	4604      	mov	r4, r0
 80209fe:	2104      	movs	r1, #4
 8020a00:	f007 fcaf 	bl	8028362 <_ZdlPvj>
 8020a04:	4620      	mov	r0, r4
 8020a06:	bd10      	pop	{r4, pc}

08020a08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020a08:	b510      	push	{r4, lr}
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	2104      	movs	r1, #4
 8020a0e:	f007 fca8 	bl	8028362 <_ZdlPvj>
 8020a12:	4620      	mov	r0, r4
 8020a14:	bd10      	pop	{r4, pc}

08020a16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020a16:	b510      	push	{r4, lr}
 8020a18:	4604      	mov	r4, r0
 8020a1a:	2104      	movs	r1, #4
 8020a1c:	f007 fca1 	bl	8028362 <_ZdlPvj>
 8020a20:	4620      	mov	r0, r4
 8020a22:	bd10      	pop	{r4, pc}

08020a24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020a24:	b510      	push	{r4, lr}
 8020a26:	4604      	mov	r4, r0
 8020a28:	2104      	movs	r1, #4
 8020a2a:	f007 fc9a 	bl	8028362 <_ZdlPvj>
 8020a2e:	4620      	mov	r0, r4
 8020a30:	bd10      	pop	{r4, pc}

08020a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020a32:	b510      	push	{r4, lr}
 8020a34:	4604      	mov	r4, r0
 8020a36:	2104      	movs	r1, #4
 8020a38:	f007 fc93 	bl	8028362 <_ZdlPvj>
 8020a3c:	4620      	mov	r0, r4
 8020a3e:	bd10      	pop	{r4, pc}

08020a40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020a40:	b510      	push	{r4, lr}
 8020a42:	4604      	mov	r4, r0
 8020a44:	2104      	movs	r1, #4
 8020a46:	f007 fc8c 	bl	8028362 <_ZdlPvj>
 8020a4a:	4620      	mov	r0, r4
 8020a4c:	bd10      	pop	{r4, pc}

08020a4e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020a4e:	b510      	push	{r4, lr}
 8020a50:	4604      	mov	r4, r0
 8020a52:	2104      	movs	r1, #4
 8020a54:	f007 fc85 	bl	8028362 <_ZdlPvj>
 8020a58:	4620      	mov	r0, r4
 8020a5a:	bd10      	pop	{r4, pc}

08020a5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020a5c:	b510      	push	{r4, lr}
 8020a5e:	4604      	mov	r4, r0
 8020a60:	2104      	movs	r1, #4
 8020a62:	f007 fc7e 	bl	8028362 <_ZdlPvj>
 8020a66:	4620      	mov	r0, r4
 8020a68:	bd10      	pop	{r4, pc}

08020a6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020a6a:	b510      	push	{r4, lr}
 8020a6c:	4604      	mov	r4, r0
 8020a6e:	2104      	movs	r1, #4
 8020a70:	f007 fc77 	bl	8028362 <_ZdlPvj>
 8020a74:	4620      	mov	r0, r4
 8020a76:	bd10      	pop	{r4, pc}

08020a78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020a78:	b510      	push	{r4, lr}
 8020a7a:	4604      	mov	r4, r0
 8020a7c:	2104      	movs	r1, #4
 8020a7e:	f007 fc70 	bl	8028362 <_ZdlPvj>
 8020a82:	4620      	mov	r0, r4
 8020a84:	bd10      	pop	{r4, pc}

08020a86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020a86:	b510      	push	{r4, lr}
 8020a88:	4604      	mov	r4, r0
 8020a8a:	2104      	movs	r1, #4
 8020a8c:	f007 fc69 	bl	8028362 <_ZdlPvj>
 8020a90:	4620      	mov	r0, r4
 8020a92:	bd10      	pop	{r4, pc}

08020a94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a98:	4d9e      	ldr	r5, [pc, #632]	; (8020d14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020a9a:	4690      	mov	r8, r2
 8020a9c:	b08f      	sub	sp, #60	; 0x3c
 8020a9e:	4604      	mov	r4, r0
 8020aa0:	682a      	ldr	r2, [r5, #0]
 8020aa2:	4689      	mov	r9, r1
 8020aa4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020aa8:	2a02      	cmp	r2, #2
 8020aaa:	d106      	bne.n	8020aba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020aac:	4b9a      	ldr	r3, [pc, #616]	; (8020d18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020aae:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8020ab2:	4a9a      	ldr	r2, [pc, #616]	; (8020d1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020ab4:	489a      	ldr	r0, [pc, #616]	; (8020d20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8020ab6:	f007 fc7f 	bl	80283b8 <__assert_func>
 8020aba:	ae0e      	add	r6, sp, #56	; 0x38
 8020abc:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8020ac0:	4630      	mov	r0, r6
 8020ac2:	f7fe f8b3 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020ac6:	6823      	ldr	r3, [r4, #0]
 8020ac8:	4607      	mov	r7, r0
 8020aca:	4620      	mov	r0, r4
 8020acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ace:	4798      	blx	r3
 8020ad0:	4287      	cmp	r7, r0
 8020ad2:	d004      	beq.n	8020ade <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020ad4:	4b93      	ldr	r3, [pc, #588]	; (8020d24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8020ad6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8020ada:	4a90      	ldr	r2, [pc, #576]	; (8020d1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020adc:	e7ea      	b.n	8020ab4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020ade:	4630      	mov	r0, r6
 8020ae0:	f7fe f820 	bl	801eb24 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020ae4:	4607      	mov	r7, r0
 8020ae6:	b920      	cbnz	r0, 8020af2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020ae8:	4b8f      	ldr	r3, [pc, #572]	; (8020d28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8020aea:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8020aee:	4a8b      	ldr	r2, [pc, #556]	; (8020d1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020af0:	e7e0      	b.n	8020ab4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020af2:	f8d8 0000 	ldr.w	r0, [r8]
 8020af6:	ab06      	add	r3, sp, #24
 8020af8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020afc:	f9b8 a000 	ldrsh.w	sl, [r8]
 8020b00:	c303      	stmia	r3!, {r0, r1}
 8020b02:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020b06:	ab08      	add	r3, sp, #32
 8020b08:	f8d9 0000 	ldr.w	r0, [r9]
 8020b0c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8020b10:	c303      	stmia	r3!, {r0, r1}
 8020b12:	4630      	mov	r0, r6
 8020b14:	f7fd fefe 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020b18:	4680      	mov	r8, r0
 8020b1a:	4630      	mov	r0, r6
 8020b1c:	4e83      	ldr	r6, [pc, #524]	; (8020d2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8020b1e:	f7fd ff33 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020b22:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8020b26:	f10d 0920 	add.w	r9, sp, #32
 8020b2a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8020b2e:	a806      	add	r0, sp, #24
 8020b30:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020b34:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8020b38:	f7fb fad0 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b3c:	4648      	mov	r0, r9
 8020b3e:	f7fb facd 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b42:	a80a      	add	r0, sp, #40	; 0x28
 8020b44:	f7fb faca 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b48:	4b79      	ldr	r3, [pc, #484]	; (8020d30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8020b4a:	2100      	movs	r1, #0
 8020b4c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8020b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b54:	4648      	mov	r0, r9
 8020b56:	910c      	str	r1, [sp, #48]	; 0x30
 8020b58:	a90c      	add	r1, sp, #48	; 0x30
 8020b5a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8020b5e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020b62:	f7f8 f961 	bl	8018e28 <_ZN8touchgfx4RectaNERKS0_>
 8020b66:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8020b6a:	9602      	str	r6, [sp, #8]
 8020b6c:	f1bc 0f00 	cmp.w	ip, #0
 8020b70:	f000 80a4 	beq.w	8020cbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020b74:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8020b78:	2e00      	cmp	r6, #0
 8020b7a:	f000 809f 	beq.w	8020cbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020b7e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8020b82:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020b86:	4288      	cmp	r0, r1
 8020b88:	db36      	blt.n	8020bf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020b8a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8020b8e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020b92:	429a      	cmp	r2, r3
 8020b94:	db30      	blt.n	8020bf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020b96:	4460      	add	r0, ip
 8020b98:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8020b9c:	4461      	add	r1, ip
 8020b9e:	b200      	sxth	r0, r0
 8020ba0:	b209      	sxth	r1, r1
 8020ba2:	4288      	cmp	r0, r1
 8020ba4:	dc28      	bgt.n	8020bf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020ba6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020baa:	4432      	add	r2, r6
 8020bac:	440b      	add	r3, r1
 8020bae:	b212      	sxth	r2, r2
 8020bb0:	b21b      	sxth	r3, r3
 8020bb2:	429a      	cmp	r2, r3
 8020bb4:	dc20      	bgt.n	8020bf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020bb6:	6823      	ldr	r3, [r4, #0]
 8020bb8:	4620      	mov	r0, r4
 8020bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020bbc:	4798      	blx	r3
 8020bbe:	4682      	mov	sl, r0
 8020bc0:	6828      	ldr	r0, [r5, #0]
 8020bc2:	6803      	ldr	r3, [r0, #0]
 8020bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020bc6:	4798      	blx	r3
 8020bc8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8020bcc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020bd0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020bd4:	9303      	str	r3, [sp, #12]
 8020bd6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020bda:	1a9b      	subs	r3, r3, r2
 8020bdc:	b29b      	uxth	r3, r3
 8020bde:	b21c      	sxth	r4, r3
 8020be0:	2c00      	cmp	r4, #0
 8020be2:	dc0e      	bgt.n	8020c02 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8020be4:	b134      	cbz	r4, 8020bf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8020be6:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020bea:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020bee:	4413      	add	r3, r2
 8020bf0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8020bf4:	463c      	mov	r4, r7
 8020bf6:	e00b      	b.n	8020c10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8020bf8:	4b4e      	ldr	r3, [pc, #312]	; (8020d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8020bfa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020bfe:	4a47      	ldr	r2, [pc, #284]	; (8020d1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020c00:	e758      	b.n	8020ab4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020c02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c06:	ebab 0303 	sub.w	r3, fp, r3
 8020c0a:	443c      	add	r4, r7
 8020c0c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020c10:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020c14:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020c18:	1a9b      	subs	r3, r3, r2
 8020c1a:	b29b      	uxth	r3, r3
 8020c1c:	b219      	sxth	r1, r3
 8020c1e:	2900      	cmp	r1, #0
 8020c20:	dd50      	ble.n	8020cc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8020c22:	9a03      	ldr	r2, [sp, #12]
 8020c24:	fb02 4401 	mla	r4, r2, r1, r4
 8020c28:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8020c2c:	1ad3      	subs	r3, r2, r3
 8020c2e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020c32:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020c36:	f1bc 0f00 	cmp.w	ip, #0
 8020c3a:	dd3f      	ble.n	8020cbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020c3c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020c40:	2e00      	cmp	r6, #0
 8020c42:	dd3b      	ble.n	8020cbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020c44:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8020c48:	2203      	movs	r2, #3
 8020c4a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8020c4e:	fb0a f801 	mul.w	r8, sl, r1
 8020c52:	fb13 8802 	smlabb	r8, r3, r2, r8
 8020c56:	9a02      	ldr	r2, [sp, #8]
 8020c58:	4480      	add	r8, r0
 8020c5a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8020c5e:	8812      	ldrh	r2, [r2, #0]
 8020c60:	4584      	cmp	ip, r0
 8020c62:	eba2 0303 	sub.w	r3, r2, r3
 8020c66:	bfa8      	it	ge
 8020c68:	4684      	movge	ip, r0
 8020c6a:	459c      	cmp	ip, r3
 8020c6c:	bfa8      	it	ge
 8020c6e:	469c      	movge	ip, r3
 8020c70:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020c74:	429e      	cmp	r6, r3
 8020c76:	bfa8      	it	ge
 8020c78:	461e      	movge	r6, r3
 8020c7a:	4b2d      	ldr	r3, [pc, #180]	; (8020d30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8020c7c:	881b      	ldrh	r3, [r3, #0]
 8020c7e:	1a59      	subs	r1, r3, r1
 8020c80:	4633      	mov	r3, r6
 8020c82:	428e      	cmp	r6, r1
 8020c84:	bfa8      	it	ge
 8020c86:	460b      	movge	r3, r1
 8020c88:	4562      	cmp	r2, ip
 8020c8a:	9302      	str	r3, [sp, #8]
 8020c8c:	d12d      	bne.n	8020cea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020c8e:	455a      	cmp	r2, fp
 8020c90:	d12b      	bne.n	8020cea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020c92:	6828      	ldr	r0, [r5, #0]
 8020c94:	6803      	ldr	r3, [r0, #0]
 8020c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c98:	4798      	blx	r3
 8020c9a:	07c3      	lsls	r3, r0, #31
 8020c9c:	d51b      	bpl.n	8020cd6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8020c9e:	6828      	ldr	r0, [r5, #0]
 8020ca0:	9b02      	ldr	r3, [sp, #8]
 8020ca2:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8020ca6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8020caa:	6803      	ldr	r3, [r0, #0]
 8020cac:	f8cd b000 	str.w	fp, [sp]
 8020cb0:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8020cb2:	4623      	mov	r3, r4
 8020cb4:	e899 0006 	ldmia.w	r9, {r1, r2}
 8020cb8:	47a8      	blx	r5
 8020cba:	4607      	mov	r7, r0
 8020cbc:	4638      	mov	r0, r7
 8020cbe:	b00f      	add	sp, #60	; 0x3c
 8020cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cc4:	bf1f      	itttt	ne
 8020cc6:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8020cca:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8020cce:	189b      	addne	r3, r3, r2
 8020cd0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020cd4:	e7ad      	b.n	8020c32 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8020cd6:	6828      	ldr	r0, [r5, #0]
 8020cd8:	4642      	mov	r2, r8
 8020cda:	4621      	mov	r1, r4
 8020cdc:	6803      	ldr	r3, [r0, #0]
 8020cde:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8020ce0:	9b02      	ldr	r3, [sp, #8]
 8020ce2:	fb03 f30a 	mul.w	r3, r3, sl
 8020ce6:	47a8      	blx	r5
 8020ce8:	e7e8      	b.n	8020cbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020cea:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8020cee:	f04f 0900 	mov.w	r9, #0
 8020cf2:	9b02      	ldr	r3, [sp, #8]
 8020cf4:	454b      	cmp	r3, r9
 8020cf6:	dde1      	ble.n	8020cbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020cf8:	6828      	ldr	r0, [r5, #0]
 8020cfa:	4642      	mov	r2, r8
 8020cfc:	4621      	mov	r1, r4
 8020cfe:	44d0      	add	r8, sl
 8020d00:	6803      	ldr	r3, [r0, #0]
 8020d02:	f109 0901 	add.w	r9, r9, #1
 8020d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d08:	461e      	mov	r6, r3
 8020d0a:	465b      	mov	r3, fp
 8020d0c:	47b0      	blx	r6
 8020d0e:	9b03      	ldr	r3, [sp, #12]
 8020d10:	441c      	add	r4, r3
 8020d12:	e7ee      	b.n	8020cf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8020d14:	2000beec 	.word	0x2000beec
 8020d18:	0802d391 	.word	0x0802d391
 8020d1c:	0802db71 	.word	0x0802db71
 8020d20:	0802d35f 	.word	0x0802d35f
 8020d24:	0802d445 	.word	0x0802d445
 8020d28:	0802d49a 	.word	0x0802d49a
 8020d2c:	2000bee4 	.word	0x2000bee4
 8020d30:	2000bee6 	.word	0x2000bee6
 8020d34:	0802d4d8 	.word	0x0802d4d8

08020d38 <_ZN8touchgfx8LCD24bppC1Ev>:
 8020d38:	4a0b      	ldr	r2, [pc, #44]	; (8020d68 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8020d3a:	6002      	str	r2, [r0, #0]
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020d42:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020d46:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020d4a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020d4e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020d52:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020d56:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020d5a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020d5e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020d62:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020d66:	4770      	bx	lr
 8020d68:	0802d7bc 	.word	0x0802d7bc

08020d6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d70:	b093      	sub	sp, #76	; 0x4c
 8020d72:	880c      	ldrh	r4, [r1, #0]
 8020d74:	4605      	mov	r5, r0
 8020d76:	460f      	mov	r7, r1
 8020d78:	4691      	mov	r9, r2
 8020d7a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8020d7e:	b12c      	cbz	r4, 8020d8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8020d80:	4b71      	ldr	r3, [pc, #452]	; (8020f48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020d82:	2167      	movs	r1, #103	; 0x67
 8020d84:	4a71      	ldr	r2, [pc, #452]	; (8020f4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8020d86:	4872      	ldr	r0, [pc, #456]	; (8020f50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020d88:	f007 fb16 	bl	80283b8 <__assert_func>
 8020d8c:	6810      	ldr	r0, [r2, #0]
 8020d8e:	ae0e      	add	r6, sp, #56	; 0x38
 8020d90:	6851      	ldr	r1, [r2, #4]
 8020d92:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8020f58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8020d96:	c603      	stmia	r6!, {r0, r1}
 8020d98:	6818      	ldr	r0, [r3, #0]
 8020d9a:	ae10      	add	r6, sp, #64	; 0x40
 8020d9c:	6859      	ldr	r1, [r3, #4]
 8020d9e:	c603      	stmia	r6!, {r0, r1}
 8020da0:	a80e      	add	r0, sp, #56	; 0x38
 8020da2:	f7fb f99b 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020da6:	4649      	mov	r1, r9
 8020da8:	a810      	add	r0, sp, #64	; 0x40
 8020daa:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8020f54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020dae:	f7fb f97d 	bl	801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020db2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020db6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020dba:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020dbe:	f8d9 0000 	ldr.w	r0, [r9]
 8020dc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020dc6:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8020dca:	440d      	add	r5, r1
 8020dcc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020dd0:	440a      	add	r2, r1
 8020dd2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020dd6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020dda:	4413      	add	r3, r2
 8020ddc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020de0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8020de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8020de6:	6803      	ldr	r3, [r0, #0]
 8020de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020dec:	4798      	blx	r3
 8020dee:	2801      	cmp	r0, #1
 8020df0:	d11e      	bne.n	8020e30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8020df2:	220b      	movs	r2, #11
 8020df4:	9008      	str	r0, [sp, #32]
 8020df6:	b2b6      	uxth	r6, r6
 8020df8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020dfc:	9207      	str	r2, [sp, #28]
 8020dfe:	4629      	mov	r1, r5
 8020e00:	f8ba 2000 	ldrh.w	r2, [sl]
 8020e04:	f8cd 8010 	str.w	r8, [sp, #16]
 8020e08:	9601      	str	r6, [sp, #4]
 8020e0a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020e0e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020e12:	9203      	str	r2, [sp, #12]
 8020e14:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8020e18:	9202      	str	r2, [sp, #8]
 8020e1a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020e1e:	9200      	str	r2, [sp, #0]
 8020e20:	463a      	mov	r2, r7
 8020e22:	f8d9 0000 	ldr.w	r0, [r9]
 8020e26:	f7f8 fc4d 	bl	80196c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020e2a:	b013      	add	sp, #76	; 0x4c
 8020e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e30:	f8d9 0000 	ldr.w	r0, [r9]
 8020e34:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8020e38:	6803      	ldr	r3, [r0, #0]
 8020e3a:	6a1b      	ldr	r3, [r3, #32]
 8020e3c:	4798      	blx	r3
 8020e3e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8020e42:	f8ba 3000 	ldrh.w	r3, [sl]
 8020e46:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020e4a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020e4e:	fb01 2303 	mla	r3, r1, r3, r2
 8020e52:	4621      	mov	r1, r4
 8020e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e58:	4418      	add	r0, r3
 8020e5a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8020e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8020e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e62:	4299      	cmp	r1, r3
 8020e64:	da6a      	bge.n	8020f3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8020e66:	1cc2      	adds	r2, r0, #3
 8020e68:	46aa      	mov	sl, r5
 8020e6a:	ebaa 0305 	sub.w	r3, sl, r5
 8020e6e:	429e      	cmp	r6, r3
 8020e70:	dd55      	ble.n	8020f1e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8020e72:	2404      	movs	r4, #4
 8020e74:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8020e78:	fb14 4303 	smlabb	r3, r4, r3, r4
 8020e7c:	eb07 0e03 	add.w	lr, r7, r3
 8020e80:	f89e 4003 	ldrb.w	r4, [lr, #3]
 8020e84:	b184      	cbz	r4, 8020ea8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020e86:	2cff      	cmp	r4, #255	; 0xff
 8020e88:	f817 b003 	ldrb.w	fp, [r7, r3]
 8020e8c:	d10e      	bne.n	8020eac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8020e8e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020e92:	d10b      	bne.n	8020eac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8020e94:	f802 bc03 	strb.w	fp, [r2, #-3]
 8020e98:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8020e9c:	f802 3c02 	strb.w	r3, [r2, #-2]
 8020ea0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8020ea4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020ea8:	3203      	adds	r2, #3
 8020eaa:	e7de      	b.n	8020e6a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8020eac:	fb08 f404 	mul.w	r4, r8, r4
 8020eb0:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8020eb4:	1c63      	adds	r3, r4, #1
 8020eb6:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8020eba:	121b      	asrs	r3, r3, #8
 8020ebc:	b29c      	uxth	r4, r3
 8020ebe:	43db      	mvns	r3, r3
 8020ec0:	fb1b fb04 	smulbb	fp, fp, r4
 8020ec4:	b2db      	uxtb	r3, r3
 8020ec6:	fb0c bc03 	mla	ip, ip, r3, fp
 8020eca:	fa1f fc8c 	uxth.w	ip, ip
 8020ece:	f10c 0b01 	add.w	fp, ip, #1
 8020ed2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020ed6:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8020eda:	fb1b fb03 	smulbb	fp, fp, r3
 8020ede:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020ee2:	f802 cc03 	strb.w	ip, [r2, #-3]
 8020ee6:	f89e c001 	ldrb.w	ip, [lr, #1]
 8020eea:	fb0c bc04 	mla	ip, ip, r4, fp
 8020eee:	fa1f fc8c 	uxth.w	ip, ip
 8020ef2:	f10c 0b01 	add.w	fp, ip, #1
 8020ef6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020efa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020efe:	f802 cc02 	strb.w	ip, [r2, #-2]
 8020f02:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8020f06:	f89e e002 	ldrb.w	lr, [lr, #2]
 8020f0a:	fb1c f303 	smulbb	r3, ip, r3
 8020f0e:	fb0e 3304 	mla	r3, lr, r4, r3
 8020f12:	b29b      	uxth	r3, r3
 8020f14:	1c5c      	adds	r4, r3, #1
 8020f16:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020f1a:	121b      	asrs	r3, r3, #8
 8020f1c:	e7c2      	b.n	8020ea4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f20:	3101      	adds	r1, #1
 8020f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f24:	881b      	ldrh	r3, [r3, #0]
 8020f26:	1b9b      	subs	r3, r3, r6
 8020f28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f2c:	4413      	add	r3, r2
 8020f2e:	4418      	add	r0, r3
 8020f30:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8020f34:	1b9b      	subs	r3, r3, r6
 8020f36:	444b      	add	r3, r9
 8020f38:	441d      	add	r5, r3
 8020f3a:	e791      	b.n	8020e60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8020f3c:	4b05      	ldr	r3, [pc, #20]	; (8020f54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8020f3e:	6818      	ldr	r0, [r3, #0]
 8020f40:	6803      	ldr	r3, [r0, #0]
 8020f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f44:	4798      	blx	r3
 8020f46:	e770      	b.n	8020e2a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8020f48:	0802d2c3 	.word	0x0802d2c3
 8020f4c:	0802d993 	.word	0x0802d993
 8020f50:	0802d35f 	.word	0x0802d35f
 8020f54:	2000beec 	.word	0x2000beec
 8020f58:	2000bee4 	.word	0x2000bee4

08020f5c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f60:	4614      	mov	r4, r2
 8020f62:	880a      	ldrh	r2, [r1, #0]
 8020f64:	b091      	sub	sp, #68	; 0x44
 8020f66:	4680      	mov	r8, r0
 8020f68:	2a01      	cmp	r2, #1
 8020f6a:	460e      	mov	r6, r1
 8020f6c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020f70:	d005      	beq.n	8020f7e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8020f72:	4b6d      	ldr	r3, [pc, #436]	; (8021128 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8020f74:	21b5      	movs	r1, #181	; 0xb5
 8020f76:	4a6d      	ldr	r2, [pc, #436]	; (802112c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8020f78:	486d      	ldr	r0, [pc, #436]	; (8021130 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8020f7a:	f007 fa1d 	bl	80283b8 <__assert_func>
 8020f7e:	6820      	ldr	r0, [r4, #0]
 8020f80:	ad0c      	add	r5, sp, #48	; 0x30
 8020f82:	6861      	ldr	r1, [r4, #4]
 8020f84:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8021134 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8020f88:	c503      	stmia	r5!, {r0, r1}
 8020f8a:	6818      	ldr	r0, [r3, #0]
 8020f8c:	ad0e      	add	r5, sp, #56	; 0x38
 8020f8e:	6859      	ldr	r1, [r3, #4]
 8020f90:	c503      	stmia	r5!, {r0, r1}
 8020f92:	a80c      	add	r0, sp, #48	; 0x30
 8020f94:	f7fb f8a2 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f98:	4621      	mov	r1, r4
 8020f9a:	a80e      	add	r0, sp, #56	; 0x38
 8020f9c:	f7fb f886 	bl	801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020fa0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020fa4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020fa8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020fac:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8020fb0:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020fb4:	eb08 0401 	add.w	r4, r8, r1
 8020fb8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020fbc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8021138 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8020fc0:	440a      	add	r2, r1
 8020fc2:	f8d8 0000 	ldr.w	r0, [r8]
 8020fc6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020fca:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020fce:	4413      	add	r3, r2
 8020fd0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020fd4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8020fd8:	930a      	str	r3, [sp, #40]	; 0x28
 8020fda:	6803      	ldr	r3, [r0, #0]
 8020fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020fe0:	4798      	blx	r3
 8020fe2:	2801      	cmp	r0, #1
 8020fe4:	d11e      	bne.n	8021024 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8020fe6:	220b      	movs	r2, #11
 8020fe8:	9008      	str	r0, [sp, #32]
 8020fea:	b2ad      	uxth	r5, r5
 8020fec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020ff0:	9207      	str	r2, [sp, #28]
 8020ff2:	4621      	mov	r1, r4
 8020ff4:	f8b9 2000 	ldrh.w	r2, [r9]
 8020ff8:	9501      	str	r5, [sp, #4]
 8020ffa:	9206      	str	r2, [sp, #24]
 8020ffc:	2200      	movs	r2, #0
 8020ffe:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8021002:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021006:	9203      	str	r2, [sp, #12]
 8021008:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802100c:	9202      	str	r2, [sp, #8]
 802100e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021012:	9200      	str	r2, [sp, #0]
 8021014:	4632      	mov	r2, r6
 8021016:	f8d8 0000 	ldr.w	r0, [r8]
 802101a:	f7f8 fb53 	bl	80196c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802101e:	b011      	add	sp, #68	; 0x44
 8021020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021024:	f8d8 0000 	ldr.w	r0, [r8]
 8021028:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 802102c:	6803      	ldr	r3, [r0, #0]
 802102e:	6a1b      	ldr	r3, [r3, #32]
 8021030:	4798      	blx	r3
 8021032:	f8b9 3000 	ldrh.w	r3, [r9]
 8021036:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 802103a:	f04f 0e00 	mov.w	lr, #0
 802103e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021042:	fa1f f987 	uxth.w	r9, r7
 8021046:	fb01 2303 	mla	r3, r1, r3, r2
 802104a:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 802104e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021052:	b289      	uxth	r1, r1
 8021054:	4418      	add	r0, r3
 8021056:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 802105a:	930b      	str	r3, [sp, #44]	; 0x2c
 802105c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802105e:	459e      	cmp	lr, r3
 8021060:	da5c      	bge.n	802111c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8021062:	1cc3      	adds	r3, r0, #3
 8021064:	46a2      	mov	sl, r4
 8021066:	ebaa 0204 	sub.w	r2, sl, r4
 802106a:	4295      	cmp	r5, r2
 802106c:	dd46      	ble.n	80210fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 802106e:	f04f 0c03 	mov.w	ip, #3
 8021072:	f04f 0b04 	mov.w	fp, #4
 8021076:	f81a 2b01 	ldrb.w	r2, [sl], #1
 802107a:	2fff      	cmp	r7, #255	; 0xff
 802107c:	fb1c b202 	smlabb	r2, ip, r2, fp
 8021080:	eb06 0c02 	add.w	ip, r6, r2
 8021084:	f816 b002 	ldrb.w	fp, [r6, r2]
 8021088:	d02f      	beq.n	80210ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 802108a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 802108e:	fb12 f201 	smulbb	r2, r2, r1
 8021092:	fb0b 2209 	mla	r2, fp, r9, r2
 8021096:	b292      	uxth	r2, r2
 8021098:	f102 0b01 	add.w	fp, r2, #1
 802109c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80210a0:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 80210a4:	fb1b fb01 	smulbb	fp, fp, r1
 80210a8:	1212      	asrs	r2, r2, #8
 80210aa:	f803 2c03 	strb.w	r2, [r3, #-3]
 80210ae:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80210b2:	fb02 b209 	mla	r2, r2, r9, fp
 80210b6:	b292      	uxth	r2, r2
 80210b8:	f102 0b01 	add.w	fp, r2, #1
 80210bc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80210c0:	1212      	asrs	r2, r2, #8
 80210c2:	f803 2c02 	strb.w	r2, [r3, #-2]
 80210c6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80210ca:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 80210ce:	fb1c fc01 	smulbb	ip, ip, r1
 80210d2:	fb02 c209 	mla	r2, r2, r9, ip
 80210d6:	b292      	uxth	r2, r2
 80210d8:	f102 0c01 	add.w	ip, r2, #1
 80210dc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80210e0:	1212      	asrs	r2, r2, #8
 80210e2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80210e6:	3303      	adds	r3, #3
 80210e8:	e7bd      	b.n	8021066 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 80210ea:	f803 bc03 	strb.w	fp, [r3, #-3]
 80210ee:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80210f2:	f803 2c02 	strb.w	r2, [r3, #-2]
 80210f6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80210fa:	e7f2      	b.n	80210e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 80210fc:	4b0d      	ldr	r3, [pc, #52]	; (8021134 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80210fe:	f10e 0e01 	add.w	lr, lr, #1
 8021102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021104:	881b      	ldrh	r3, [r3, #0]
 8021106:	1b5b      	subs	r3, r3, r5
 8021108:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802110c:	4413      	add	r3, r2
 802110e:	4418      	add	r0, r3
 8021110:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021114:	1b5b      	subs	r3, r3, r5
 8021116:	4443      	add	r3, r8
 8021118:	441c      	add	r4, r3
 802111a:	e79f      	b.n	802105c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 802111c:	4b06      	ldr	r3, [pc, #24]	; (8021138 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802111e:	6818      	ldr	r0, [r3, #0]
 8021120:	6803      	ldr	r3, [r0, #0]
 8021122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021124:	4798      	blx	r3
 8021126:	e77a      	b.n	802101e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8021128:	0802d1cf 	.word	0x0802d1cf
 802112c:	0802d886 	.word	0x0802d886
 8021130:	0802d35f 	.word	0x0802d35f
 8021134:	2000bee4 	.word	0x2000bee4
 8021138:	2000beec 	.word	0x2000beec

0802113c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802113c:	b570      	push	{r4, r5, r6, lr}
 802113e:	780d      	ldrb	r5, [r1, #0]
 8021140:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8021144:	2d01      	cmp	r5, #1
 8021146:	d00d      	beq.n	8021164 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8021148:	d307      	bcc.n	802115a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 802114a:	2d02      	cmp	r5, #2
 802114c:	d10f      	bne.n	802116e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 802114e:	4b08      	ldr	r3, [pc, #32]	; (8021170 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8021150:	215a      	movs	r1, #90	; 0x5a
 8021152:	4a08      	ldr	r2, [pc, #32]	; (8021174 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8021154:	4808      	ldr	r0, [pc, #32]	; (8021178 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8021156:	f007 f92f 	bl	80283b8 <__assert_func>
 802115a:	9404      	str	r4, [sp, #16]
 802115c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021160:	f7ff be04 	b.w	8020d6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021164:	9404      	str	r4, [sp, #16]
 8021166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802116a:	f7ff bef7 	b.w	8020f5c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802116e:	bd70      	pop	{r4, r5, r6, pc}
 8021170:	0802d184 	.word	0x0802d184
 8021174:	0802d804 	.word	0x0802d804
 8021178:	0802d35f 	.word	0x0802d35f

0802117c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021180:	b08b      	sub	sp, #44	; 0x2c
 8021182:	460c      	mov	r4, r1
 8021184:	4680      	mov	r8, r0
 8021186:	469a      	mov	sl, r3
 8021188:	6808      	ldr	r0, [r1, #0]
 802118a:	ab06      	add	r3, sp, #24
 802118c:	6849      	ldr	r1, [r1, #4]
 802118e:	c303      	stmia	r3!, {r0, r1}
 8021190:	6810      	ldr	r0, [r2, #0]
 8021192:	ab08      	add	r3, sp, #32
 8021194:	6851      	ldr	r1, [r2, #4]
 8021196:	c303      	stmia	r3!, {r0, r1}
 8021198:	a806      	add	r0, sp, #24
 802119a:	f7fa ff9f 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802119e:	4621      	mov	r1, r4
 80211a0:	a808      	add	r0, sp, #32
 80211a2:	4c61      	ldr	r4, [pc, #388]	; (8021328 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80211a4:	f7fa ff82 	bl	801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211a8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80211ac:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80211b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80211b4:	6820      	ldr	r0, [r4, #0]
 80211b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80211ba:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80211be:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80211c2:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80211c6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80211ca:	440a      	add	r2, r1
 80211cc:	f8ad 2020 	strh.w	r2, [sp, #32]
 80211d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80211d4:	4413      	add	r3, r2
 80211d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80211da:	6803      	ldr	r3, [r0, #0]
 80211dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211de:	4798      	blx	r3
 80211e0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80211e4:	d118      	bne.n	8021218 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80211e6:	f010 0f20 	tst.w	r0, #32
 80211ea:	6820      	ldr	r0, [r4, #0]
 80211ec:	d017      	beq.n	802121e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80211ee:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80211f2:	b2bf      	uxth	r7, r7
 80211f4:	6801      	ldr	r1, [r0, #0]
 80211f6:	9402      	str	r4, [sp, #8]
 80211f8:	fa1f f489 	uxth.w	r4, r9
 80211fc:	f8cd a00c 	str.w	sl, [sp, #12]
 8021200:	9401      	str	r4, [sp, #4]
 8021202:	9700      	str	r7, [sp, #0]
 8021204:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021208:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802120a:	4641      	mov	r1, r8
 802120c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021210:	47a0      	blx	r4
 8021212:	b00b      	add	sp, #44	; 0x2c
 8021214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021218:	f010 0f40 	tst.w	r0, #64	; 0x40
 802121c:	e7e5      	b.n	80211ea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802121e:	6803      	ldr	r3, [r0, #0]
 8021220:	6a1b      	ldr	r3, [r3, #32]
 8021222:	4798      	blx	r3
 8021224:	4b41      	ldr	r3, [pc, #260]	; (802132c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8021226:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802122a:	f04f 0c00 	mov.w	ip, #0
 802122e:	881a      	ldrh	r2, [r3, #0]
 8021230:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8021234:	fb04 1202 	mla	r2, r4, r2, r1
 8021238:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802123c:	4410      	add	r0, r2
 802123e:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8021242:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8021246:	0092      	lsls	r2, r2, #2
 8021248:	9105      	str	r1, [sp, #20]
 802124a:	9204      	str	r2, [sp, #16]
 802124c:	45cc      	cmp	ip, r9
 802124e:	da65      	bge.n	802131c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8021250:	1cc4      	adds	r4, r0, #3
 8021252:	f108 0504 	add.w	r5, r8, #4
 8021256:	f04f 0e00 	mov.w	lr, #0
 802125a:	45be      	cmp	lr, r7
 802125c:	da4d      	bge.n	80212fa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 802125e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021262:	b181      	cbz	r1, 8021286 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8021264:	29ff      	cmp	r1, #255	; 0xff
 8021266:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 802126a:	d111      	bne.n	8021290 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 802126c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021270:	d10e      	bne.n	8021290 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8021272:	f804 bc03 	strb.w	fp, [r4, #-3]
 8021276:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 802127a:	f804 2c02 	strb.w	r2, [r4, #-2]
 802127e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8021282:	f804 2c01 	strb.w	r2, [r4, #-1]
 8021286:	f10e 0e01 	add.w	lr, lr, #1
 802128a:	3403      	adds	r4, #3
 802128c:	3504      	adds	r5, #4
 802128e:	e7e4      	b.n	802125a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8021290:	fb0a f101 	mul.w	r1, sl, r1
 8021294:	1c4a      	adds	r2, r1, #1
 8021296:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802129a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802129e:	1212      	asrs	r2, r2, #8
 80212a0:	b296      	uxth	r6, r2
 80212a2:	43d2      	mvns	r2, r2
 80212a4:	fb1b fb06 	smulbb	fp, fp, r6
 80212a8:	b2d2      	uxtb	r2, r2
 80212aa:	fb01 b102 	mla	r1, r1, r2, fp
 80212ae:	b289      	uxth	r1, r1
 80212b0:	f101 0b01 	add.w	fp, r1, #1
 80212b4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80212b8:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 80212bc:	fb1b fb02 	smulbb	fp, fp, r2
 80212c0:	1209      	asrs	r1, r1, #8
 80212c2:	f804 1c03 	strb.w	r1, [r4, #-3]
 80212c6:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 80212ca:	fb01 b106 	mla	r1, r1, r6, fp
 80212ce:	b289      	uxth	r1, r1
 80212d0:	f101 0b01 	add.w	fp, r1, #1
 80212d4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80212d8:	1209      	asrs	r1, r1, #8
 80212da:	f804 1c02 	strb.w	r1, [r4, #-2]
 80212de:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80212e2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80212e6:	fb11 f202 	smulbb	r2, r1, r2
 80212ea:	fb0b 2206 	mla	r2, fp, r6, r2
 80212ee:	b292      	uxth	r2, r2
 80212f0:	1c56      	adds	r6, r2, #1
 80212f2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80212f6:	1212      	asrs	r2, r2, #8
 80212f8:	e7c3      	b.n	8021282 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 80212fa:	881a      	ldrh	r2, [r3, #0]
 80212fc:	f10c 0c01 	add.w	ip, ip, #1
 8021300:	9905      	ldr	r1, [sp, #20]
 8021302:	1bd2      	subs	r2, r2, r7
 8021304:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021308:	440a      	add	r2, r1
 802130a:	9904      	ldr	r1, [sp, #16]
 802130c:	4410      	add	r0, r2
 802130e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021312:	1bd2      	subs	r2, r2, r7
 8021314:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8021318:	4490      	add	r8, r2
 802131a:	e797      	b.n	802124c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 802131c:	4b02      	ldr	r3, [pc, #8]	; (8021328 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802131e:	6818      	ldr	r0, [r3, #0]
 8021320:	6803      	ldr	r3, [r0, #0]
 8021322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021324:	4798      	blx	r3
 8021326:	e774      	b.n	8021212 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8021328:	2000beec 	.word	0x2000beec
 802132c:	2000bee4 	.word	0x2000bee4

08021330 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021334:	b085      	sub	sp, #20
 8021336:	4606      	mov	r6, r0
 8021338:	460c      	mov	r4, r1
 802133a:	4691      	mov	r9, r2
 802133c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8021340:	4698      	mov	r8, r3
 8021342:	b385      	cbz	r5, 80213a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8021344:	4608      	mov	r0, r1
 8021346:	f7fd fae5 	bl	801e914 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802134a:	4607      	mov	r7, r0
 802134c:	4620      	mov	r0, r4
 802134e:	f7fd fb1b 	bl	801e988 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021352:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021356:	4620      	mov	r0, r4
 8021358:	f8ad 9008 	strh.w	r9, [sp, #8]
 802135c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021360:	f8ad 700c 	strh.w	r7, [sp, #12]
 8021364:	f7fd fc62 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021368:	2801      	cmp	r0, #1
 802136a:	d00f      	beq.n	802138c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802136c:	4620      	mov	r0, r4
 802136e:	f7fd fc5d 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021372:	2802      	cmp	r0, #2
 8021374:	d00a      	beq.n	802138c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8021376:	4620      	mov	r0, r4
 8021378:	f7fd fc58 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 802137c:	280b      	cmp	r0, #11
 802137e:	d005      	beq.n	802138c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8021380:	4b1b      	ldr	r3, [pc, #108]	; (80213f0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8021382:	2142      	movs	r1, #66	; 0x42
 8021384:	4a1b      	ldr	r2, [pc, #108]	; (80213f4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8021386:	481c      	ldr	r0, [pc, #112]	; (80213f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 8021388:	f007 f816 	bl	80283b8 <__assert_func>
 802138c:	4620      	mov	r0, r4
 802138e:	f7fd fc4d 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021392:	2802      	cmp	r0, #2
 8021394:	4620      	mov	r0, r4
 8021396:	d109      	bne.n	80213ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 8021398:	f7fd fbc4 	bl	801eb24 <_ZNK8touchgfx6Bitmap7getDataEv>
 802139c:	462b      	mov	r3, r5
 802139e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80213a0:	a902      	add	r1, sp, #8
 80213a2:	f7ff feeb 	bl	802117c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80213a6:	b005      	add	sp, #20
 80213a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80213ac:	f7fd fc3e 	bl	801ec2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80213b0:	280b      	cmp	r0, #11
 80213b2:	d10e      	bne.n	80213d2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80213b4:	4620      	mov	r0, r4
 80213b6:	f7fd fbb5 	bl	801eb24 <_ZNK8touchgfx6Bitmap7getDataEv>
 80213ba:	4606      	mov	r6, r0
 80213bc:	4620      	mov	r0, r4
 80213be:	f7fd fbe3 	bl	801eb88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80213c2:	9500      	str	r5, [sp, #0]
 80213c4:	4601      	mov	r1, r0
 80213c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213c8:	aa02      	add	r2, sp, #8
 80213ca:	4630      	mov	r0, r6
 80213cc:	f7ff feb6 	bl	802113c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80213d0:	e7e9      	b.n	80213a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80213d2:	6833      	ldr	r3, [r6, #0]
 80213d4:	4620      	mov	r0, r4
 80213d6:	691f      	ldr	r7, [r3, #16]
 80213d8:	f7fd fba4 	bl	801eb24 <_ZNK8touchgfx6Bitmap7getDataEv>
 80213dc:	2300      	movs	r3, #0
 80213de:	4601      	mov	r1, r0
 80213e0:	aa02      	add	r2, sp, #8
 80213e2:	4630      	mov	r0, r6
 80213e4:	e9cd 5300 	strd	r5, r3, [sp]
 80213e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213ea:	47b8      	blx	r7
 80213ec:	e7db      	b.n	80213a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80213ee:	bf00      	nop
 80213f0:	0802d21d 	.word	0x0802d21d
 80213f4:	0802d90f 	.word	0x0802d90f
 80213f8:	0802d35f 	.word	0x0802d35f

080213fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80213fc:	b570      	push	{r4, r5, r6, lr}
 80213fe:	9d04      	ldr	r5, [sp, #16]
 8021400:	460c      	mov	r4, r1
 8021402:	4619      	mov	r1, r3
 8021404:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021408:	2a0c      	cmp	r2, #12
 802140a:	d826      	bhi.n	802145a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 802140c:	e8df f002 	tbb	[pc, r2]
 8021410:	200e1407 	.word	0x200e1407
 8021414:	20202020 	.word	0x20202020
 8021418:	20202020 	.word	0x20202020
 802141c:	20          	.byte	0x20
 802141d:	00          	.byte	0x00
 802141e:	4b0f      	ldr	r3, [pc, #60]	; (802145c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8021420:	f240 117f 	movw	r1, #383	; 0x17f
 8021424:	4a0e      	ldr	r2, [pc, #56]	; (8021460 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021426:	480f      	ldr	r0, [pc, #60]	; (8021464 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8021428:	f006 ffc6 	bl	80283b8 <__assert_func>
 802142c:	462a      	mov	r2, r5
 802142e:	4620      	mov	r0, r4
 8021430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021434:	f7ff bea2 	b.w	802117c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021438:	6802      	ldr	r2, [r0, #0]
 802143a:	2600      	movs	r6, #0
 802143c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8021440:	6916      	ldr	r6, [r2, #16]
 8021442:	462b      	mov	r3, r5
 8021444:	460a      	mov	r2, r1
 8021446:	4621      	mov	r1, r4
 8021448:	46b4      	mov	ip, r6
 802144a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802144e:	4760      	bx	ip
 8021450:	4b05      	ldr	r3, [pc, #20]	; (8021468 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8021452:	f240 1191 	movw	r1, #401	; 0x191
 8021456:	4a02      	ldr	r2, [pc, #8]	; (8021460 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021458:	e7e5      	b.n	8021426 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 802145a:	bd70      	pop	{r4, r5, r6, pc}
 802145c:	0802d538 	.word	0x0802d538
 8021460:	0802dbf7 	.word	0x0802dbf7
 8021464:	0802d35f 	.word	0x0802d35f
 8021468:	0802d579 	.word	0x0802d579

0802146c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 802146c:	b158      	cbz	r0, 8021486 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802146e:	2902      	cmp	r1, #2
 8021470:	d00f      	beq.n	8021492 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8021472:	2903      	cmp	r1, #3
 8021474:	d010      	beq.n	8021498 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8021476:	2901      	cmp	r1, #1
 8021478:	d101      	bne.n	802147e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802147a:	2001      	movs	r0, #1
 802147c:	4770      	bx	lr
 802147e:	4b08      	ldr	r3, [pc, #32]	; (80214a0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021480:	8819      	ldrh	r1, [r3, #0]
 8021482:	4248      	negs	r0, r1
 8021484:	4770      	bx	lr
 8021486:	2902      	cmp	r1, #2
 8021488:	d006      	beq.n	8021498 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802148a:	2903      	cmp	r1, #3
 802148c:	d0f7      	beq.n	802147e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802148e:	2901      	cmp	r1, #1
 8021490:	d1f3      	bne.n	802147a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8021492:	4b03      	ldr	r3, [pc, #12]	; (80214a0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021494:	8818      	ldrh	r0, [r3, #0]
 8021496:	4770      	bx	lr
 8021498:	f04f 30ff 	mov.w	r0, #4294967295
 802149c:	4770      	bx	lr
 802149e:	bf00      	nop
 80214a0:	2000bee4 	.word	0x2000bee4

080214a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80214a4:	b170      	cbz	r0, 80214c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80214a6:	2902      	cmp	r1, #2
 80214a8:	d012      	beq.n	80214d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80214aa:	2903      	cmp	r1, #3
 80214ac:	d006      	beq.n	80214bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80214ae:	2901      	cmp	r1, #1
 80214b0:	d001      	beq.n	80214b6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80214b2:	2001      	movs	r0, #1
 80214b4:	4770      	bx	lr
 80214b6:	4b08      	ldr	r3, [pc, #32]	; (80214d8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80214b8:	8818      	ldrh	r0, [r3, #0]
 80214ba:	4770      	bx	lr
 80214bc:	4b06      	ldr	r3, [pc, #24]	; (80214d8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80214be:	8818      	ldrh	r0, [r3, #0]
 80214c0:	4240      	negs	r0, r0
 80214c2:	4770      	bx	lr
 80214c4:	2902      	cmp	r1, #2
 80214c6:	d0f9      	beq.n	80214bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80214c8:	2903      	cmp	r1, #3
 80214ca:	d0f2      	beq.n	80214b2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 80214cc:	2901      	cmp	r1, #1
 80214ce:	d1f2      	bne.n	80214b6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80214d0:	f04f 30ff 	mov.w	r0, #4294967295
 80214d4:	4770      	bx	lr
 80214d6:	bf00      	nop
 80214d8:	2000bee4 	.word	0x2000bee4

080214dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80214dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214e0:	b095      	sub	sp, #84	; 0x54
 80214e2:	9109      	str	r1, [sp, #36]	; 0x24
 80214e4:	a910      	add	r1, sp, #64	; 0x40
 80214e6:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 80214ea:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 80214ee:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 80214f2:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 80214f6:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 80214fa:	e881 000c 	stmia.w	r1, {r2, r3}
 80214fe:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8021502:	9306      	str	r3, [sp, #24]
 8021504:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8021508:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 802150c:	930e      	str	r3, [sp, #56]	; 0x38
 802150e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 8021512:	798f      	ldrb	r7, [r1, #6]
 8021514:	930a      	str	r3, [sp, #40]	; 0x28
 8021516:	7b4b      	ldrb	r3, [r1, #13]
 8021518:	0158      	lsls	r0, r3, #5
 802151a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802151e:	4338      	orrs	r0, r7
 8021520:	9008      	str	r0, [sp, #32]
 8021522:	f000 8174 	beq.w	802180e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021526:	011b      	lsls	r3, r3, #4
 8021528:	79c8      	ldrb	r0, [r1, #7]
 802152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802152e:	4303      	orrs	r3, r0
 8021530:	9307      	str	r3, [sp, #28]
 8021532:	f000 816c 	beq.w	802180e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021536:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802153a:	b29b      	uxth	r3, r3
 802153c:	2e00      	cmp	r6, #0
 802153e:	f000 8112 	beq.w	8021766 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8021542:	1af6      	subs	r6, r6, r3
 8021544:	b2b6      	uxth	r6, r6
 8021546:	0433      	lsls	r3, r6, #16
 8021548:	d502      	bpl.n	8021550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802154a:	1bad      	subs	r5, r5, r6
 802154c:	2600      	movs	r6, #0
 802154e:	b22d      	sxth	r5, r5
 8021550:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021554:	a810      	add	r0, sp, #64	; 0x40
 8021556:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802155a:	428d      	cmp	r5, r1
 802155c:	b28b      	uxth	r3, r1
 802155e:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8021562:	bfbf      	itttt	lt
 8021564:	18f6      	addlt	r6, r6, r3
 8021566:	1b75      	sublt	r5, r6, r5
 8021568:	b2ae      	uxthlt	r6, r5
 802156a:	460d      	movlt	r5, r1
 802156c:	8891      	ldrh	r1, [r2, #4]
 802156e:	440b      	add	r3, r1
 8021570:	4629      	mov	r1, r5
 8021572:	b21b      	sxth	r3, r3
 8021574:	930d      	str	r3, [sp, #52]	; 0x34
 8021576:	88d3      	ldrh	r3, [r2, #6]
 8021578:	9a06      	ldr	r2, [sp, #24]
 802157a:	449a      	add	sl, r3
 802157c:	fa0f f38a 	sxth.w	r3, sl
 8021580:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8021584:	930c      	str	r3, [sp, #48]	; 0x30
 8021586:	4bb8      	ldr	r3, [pc, #736]	; (8021868 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8021588:	f893 b000 	ldrb.w	fp, [r3]
 802158c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021590:	f1dc 0300 	rsbs	r3, ip, #0
 8021594:	eb43 030c 	adc.w	r3, r3, ip
 8021598:	930b      	str	r3, [sp, #44]	; 0x2c
 802159a:	464b      	mov	r3, r9
 802159c:	f7fa fc78 	bl	801be90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80215a0:	4629      	mov	r1, r5
 80215a2:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 80215a6:	464b      	mov	r3, r9
 80215a8:	9a06      	ldr	r2, [sp, #24]
 80215aa:	a810      	add	r0, sp, #64	; 0x40
 80215ac:	f7fa fc88 	bl	801bec0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80215b0:	a914      	add	r1, sp, #80	; 0x50
 80215b2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80215b6:	a813      	add	r0, sp, #76	; 0x4c
 80215b8:	f7fa fd62 	bl	801c080 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80215bc:	f1b9 0f00 	cmp.w	r9, #0
 80215c0:	f040 80d4 	bne.w	802176c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 80215c4:	f1bb 0f01 	cmp.w	fp, #1
 80215c8:	f040 80d8 	bne.w	802177c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80215cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	f040 8122 	bne.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 80215d4:	4ba5      	ldr	r3, [pc, #660]	; (802186c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 80215d6:	6818      	ldr	r0, [r3, #0]
 80215d8:	6803      	ldr	r3, [r0, #0]
 80215da:	6a1b      	ldr	r3, [r3, #32]
 80215dc:	4798      	blx	r3
 80215de:	4aa4      	ldr	r2, [pc, #656]	; (8021870 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80215e0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80215e4:	8811      	ldrh	r1, [r2, #0]
 80215e6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80215ea:	fb01 2303 	mla	r3, r1, r3, r2
 80215ee:	2201      	movs	r2, #1
 80215f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80215f4:	4590      	cmp	r8, r2
 80215f6:	4403      	add	r3, r0
 80215f8:	9307      	str	r3, [sp, #28]
 80215fa:	fa02 f308 	lsl.w	r3, r2, r8
 80215fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8021602:	b2db      	uxtb	r3, r3
 8021604:	930f      	str	r3, [sp, #60]	; 0x3c
 8021606:	f000 8109 	beq.w	802181c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 802160a:	f1b8 0f02 	cmp.w	r8, #2
 802160e:	f000 813e 	beq.w	802188e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 8021612:	f1b8 0f04 	cmp.w	r8, #4
 8021616:	f000 8132 	beq.w	802187e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 802161a:	b906      	cbnz	r6, 802161e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 802161c:	b174      	cbz	r4, 802163c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 802161e:	fb17 6304 	smlabb	r3, r7, r4, r6
 8021622:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021624:	ebaa 0a04 	sub.w	sl, sl, r4
 8021628:	fb13 f308 	smulbb	r3, r3, r8
 802162c:	fa1f fa8a 	uxth.w	sl, sl
 8021630:	b29b      	uxth	r3, r3
 8021632:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 8021636:	f003 0407 	and.w	r4, r3, #7
 802163a:	9124      	str	r1, [sp, #144]	; 0x90
 802163c:	4649      	mov	r1, r9
 802163e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021640:	f7ff ff14 	bl	802146c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8021644:	4649      	mov	r1, r9
 8021646:	4683      	mov	fp, r0
 8021648:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802164a:	f7ff ff2b 	bl	80214a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802164e:	9906      	ldr	r1, [sp, #24]
 8021650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021652:	1bad      	subs	r5, r5, r6
 8021654:	1a5b      	subs	r3, r3, r1
 8021656:	459a      	cmp	sl, r3
 8021658:	bfa8      	it	ge
 802165a:	469a      	movge	sl, r3
 802165c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802165e:	1b5d      	subs	r5, r3, r5
 8021660:	9b08      	ldr	r3, [sp, #32]
 8021662:	429d      	cmp	r5, r3
 8021664:	bfd4      	ite	le
 8021666:	ebc6 0605 	rsble	r6, r6, r5
 802166a:	ebc6 0603 	rsbgt	r6, r6, r3
 802166e:	1bbf      	subs	r7, r7, r6
 8021670:	fb0b 0016 	mls	r0, fp, r6, r0
 8021674:	fb08 f307 	mul.w	r3, r8, r7
 8021678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802167c:	9308      	str	r3, [sp, #32]
 802167e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021680:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021684:	930b      	str	r3, [sp, #44]	; 0x2c
 8021686:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021688:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802168c:	930c      	str	r3, [sp, #48]	; 0x30
 802168e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021690:	b2db      	uxtb	r3, r3
 8021692:	930d      	str	r3, [sp, #52]	; 0x34
 8021694:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021696:	7819      	ldrb	r1, [r3, #0]
 8021698:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 802169c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 80216a0:	4121      	asrs	r1, r4
 80216a2:	9306      	str	r3, [sp, #24]
 80216a4:	fb03 0b0b 	mla	fp, r3, fp, r0
 80216a8:	b2c9      	uxtb	r1, r1
 80216aa:	f1ba 0f00 	cmp.w	sl, #0
 80216ae:	f340 80d1 	ble.w	8021854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80216b2:	46b6      	mov	lr, r6
 80216b4:	9807      	ldr	r0, [sp, #28]
 80216b6:	f1be 0f00 	cmp.w	lr, #0
 80216ba:	f340 80b8 	ble.w	802182e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80216be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80216c0:	400b      	ands	r3, r1
 80216c2:	d03e      	beq.n	8021742 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80216c4:	fb13 f302 	smulbb	r3, r3, r2
 80216c8:	2bfe      	cmp	r3, #254	; 0xfe
 80216ca:	dd03      	ble.n	80216d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 80216cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80216ce:	2dff      	cmp	r5, #255	; 0xff
 80216d0:	f000 80a6 	beq.w	8021820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80216d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80216d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80216d8:	fb15 f303 	smulbb	r3, r5, r3
 80216dc:	b29b      	uxth	r3, r3
 80216de:	1c5d      	adds	r5, r3, #1
 80216e0:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80216e4:	7805      	ldrb	r5, [r0, #0]
 80216e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80216ea:	fa1f fc83 	uxth.w	ip, r3
 80216ee:	43db      	mvns	r3, r3
 80216f0:	fb17 f90c 	smulbb	r9, r7, ip
 80216f4:	b2db      	uxtb	r3, r3
 80216f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80216f8:	fb05 9503 	mla	r5, r5, r3, r9
 80216fc:	b2ad      	uxth	r5, r5
 80216fe:	f105 0901 	add.w	r9, r5, #1
 8021702:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021706:	fb17 f90c 	smulbb	r9, r7, ip
 802170a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802170c:	122d      	asrs	r5, r5, #8
 802170e:	fb17 fc0c 	smulbb	ip, r7, ip
 8021712:	7005      	strb	r5, [r0, #0]
 8021714:	7845      	ldrb	r5, [r0, #1]
 8021716:	fb05 9503 	mla	r5, r5, r3, r9
 802171a:	b2ad      	uxth	r5, r5
 802171c:	f105 0901 	add.w	r9, r5, #1
 8021720:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021724:	122d      	asrs	r5, r5, #8
 8021726:	7045      	strb	r5, [r0, #1]
 8021728:	7885      	ldrb	r5, [r0, #2]
 802172a:	fb05 cc03 	mla	ip, r5, r3, ip
 802172e:	fa1f fc8c 	uxth.w	ip, ip
 8021732:	f10c 0301 	add.w	r3, ip, #1
 8021736:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802173a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802173e:	f880 c002 	strb.w	ip, [r0, #2]
 8021742:	4444      	add	r4, r8
 8021744:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021748:	b2a4      	uxth	r4, r4
 802174a:	2c07      	cmp	r4, #7
 802174c:	bf89      	itett	hi
 802174e:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 8021750:	fa41 f108 	asrls.w	r1, r1, r8
 8021754:	2400      	movhi	r4, #0
 8021756:	7859      	ldrbhi	r1, [r3, #1]
 8021758:	bf8a      	itet	hi
 802175a:	3301      	addhi	r3, #1
 802175c:	b2c9      	uxtbls	r1, r1
 802175e:	9324      	strhi	r3, [sp, #144]	; 0x90
 8021760:	9b06      	ldr	r3, [sp, #24]
 8021762:	4418      	add	r0, r3
 8021764:	e7a7      	b.n	80216b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 8021766:	441d      	add	r5, r3
 8021768:	b22d      	sxth	r5, r5
 802176a:	e6f1      	b.n	8021550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802176c:	f1b9 0f01 	cmp.w	r9, #1
 8021770:	f47f af2c 	bne.w	80215cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021774:	f1bb 0f01 	cmp.w	fp, #1
 8021778:	f47f af28 	bne.w	80215cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802177c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 802186c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8021780:	f8db 0000 	ldr.w	r0, [fp]
 8021784:	6803      	ldr	r3, [r0, #0]
 8021786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021788:	4798      	blx	r3
 802178a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802178e:	465a      	mov	r2, fp
 8021790:	d006      	beq.n	80217a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8021792:	f1b8 0f04 	cmp.w	r8, #4
 8021796:	d13d      	bne.n	8021814 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 8021798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802179a:	3300      	adds	r3, #0
 802179c:	bf18      	it	ne
 802179e:	2301      	movne	r3, #1
 80217a0:	05c0      	lsls	r0, r0, #23
 80217a2:	d567      	bpl.n	8021874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80217a4:	f1b8 0f08 	cmp.w	r8, #8
 80217a8:	d164      	bne.n	8021874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	bf0c      	ite	eq
 80217ae:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80217b2:	2180      	movne	r1, #128	; 0x80
 80217b4:	2e00      	cmp	r6, #0
 80217b6:	f47f af09 	bne.w	80215cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80217ba:	2c00      	cmp	r4, #0
 80217bc:	f47f af06 	bne.w	80215cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80217c0:	9b08      	ldr	r3, [sp, #32]
 80217c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80217c4:	442b      	add	r3, r5
 80217c6:	4283      	cmp	r3, r0
 80217c8:	f73f af00 	bgt.w	80215cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80217cc:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 80217d0:	4403      	add	r3, r0
 80217d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80217d4:	4283      	cmp	r3, r0
 80217d6:	f73f aef9 	bgt.w	80215cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80217da:	f1b8 0f08 	cmp.w	r8, #8
 80217de:	6810      	ldr	r0, [r2, #0]
 80217e0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80217e4:	bf18      	it	ne
 80217e6:	3701      	addne	r7, #1
 80217e8:	6804      	ldr	r4, [r0, #0]
 80217ea:	9105      	str	r1, [sp, #20]
 80217ec:	bf18      	it	ne
 80217ee:	f027 0701 	bicne.w	r7, r7, #1
 80217f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80217f4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 80217f8:	bf18      	it	ne
 80217fa:	b2bf      	uxthne	r7, r7
 80217fc:	9104      	str	r1, [sp, #16]
 80217fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021800:	e9cd 7a00 	strd	r7, sl, [sp]
 8021804:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8021808:	9924      	ldr	r1, [sp, #144]	; 0x90
 802180a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 802180c:	47a0      	blx	r4
 802180e:	b015      	add	sp, #84	; 0x54
 8021810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021814:	2300      	movs	r3, #0
 8021816:	e7c3      	b.n	80217a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8021818:	9809      	ldr	r0, [sp, #36]	; 0x24
 802181a:	e6e0      	b.n	80215de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 802181c:	22ff      	movs	r2, #255	; 0xff
 802181e:	e6fc      	b.n	802161a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021822:	7003      	strb	r3, [r0, #0]
 8021824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021826:	7043      	strb	r3, [r0, #1]
 8021828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802182a:	7083      	strb	r3, [r0, #2]
 802182c:	e789      	b.n	8021742 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 802182e:	9b08      	ldr	r3, [sp, #32]
 8021830:	b153      	cbz	r3, 8021848 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 8021832:	441c      	add	r4, r3
 8021834:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021836:	b2a4      	uxth	r4, r4
 8021838:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802183c:	f004 0407 	and.w	r4, r4, #7
 8021840:	7819      	ldrb	r1, [r3, #0]
 8021842:	9324      	str	r3, [sp, #144]	; 0x90
 8021844:	4121      	asrs	r1, r4
 8021846:	b2c9      	uxtb	r1, r1
 8021848:	9b07      	ldr	r3, [sp, #28]
 802184a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802184e:	445b      	add	r3, fp
 8021850:	9307      	str	r3, [sp, #28]
 8021852:	e72a      	b.n	80216aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 8021854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021856:	2b00      	cmp	r3, #0
 8021858:	d1d9      	bne.n	802180e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 802185a:	4b04      	ldr	r3, [pc, #16]	; (802186c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 802185c:	6818      	ldr	r0, [r3, #0]
 802185e:	6803      	ldr	r3, [r0, #0]
 8021860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021862:	4798      	blx	r3
 8021864:	e7d3      	b.n	802180e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021866:	bf00      	nop
 8021868:	2000bee2 	.word	0x2000bee2
 802186c:	2000beec 	.word	0x2000beec
 8021870:	2000bee4 	.word	0x2000bee4
 8021874:	2b00      	cmp	r3, #0
 8021876:	f43f aea9 	beq.w	80215cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802187a:	2180      	movs	r1, #128	; 0x80
 802187c:	e79a      	b.n	80217b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 802187e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021880:	b11b      	cbz	r3, 802188a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021882:	07fb      	lsls	r3, r7, #31
 8021884:	d501      	bpl.n	802188a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021886:	3701      	adds	r7, #1
 8021888:	b2bf      	uxth	r7, r7
 802188a:	2211      	movs	r2, #17
 802188c:	e6c5      	b.n	802161a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 802188e:	2255      	movs	r2, #85	; 0x55
 8021890:	e6c3      	b.n	802161a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021892:	bf00      	nop

08021894 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021894:	b538      	push	{r3, r4, r5, lr}
 8021896:	4c15      	ldr	r4, [pc, #84]	; (80218ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021898:	4605      	mov	r5, r0
 802189a:	7823      	ldrb	r3, [r4, #0]
 802189c:	f3bf 8f5b 	dmb	ish
 80218a0:	07da      	lsls	r2, r3, #31
 80218a2:	d40b      	bmi.n	80218bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80218a4:	4620      	mov	r0, r4
 80218a6:	f006 fd5e 	bl	8028366 <__cxa_guard_acquire>
 80218aa:	b138      	cbz	r0, 80218bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80218ac:	4620      	mov	r0, r4
 80218ae:	f006 fd66 	bl	802837e <__cxa_guard_release>
 80218b2:	4a0f      	ldr	r2, [pc, #60]	; (80218f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80218b4:	490f      	ldr	r1, [pc, #60]	; (80218f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80218b6:	4810      	ldr	r0, [pc, #64]	; (80218f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80218b8:	f006 fd4b 	bl	8028352 <__aeabi_atexit>
 80218bc:	4c0f      	ldr	r4, [pc, #60]	; (80218fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80218be:	7823      	ldrb	r3, [r4, #0]
 80218c0:	f3bf 8f5b 	dmb	ish
 80218c4:	07db      	lsls	r3, r3, #31
 80218c6:	d40b      	bmi.n	80218e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80218c8:	4620      	mov	r0, r4
 80218ca:	f006 fd4c 	bl	8028366 <__cxa_guard_acquire>
 80218ce:	b138      	cbz	r0, 80218e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80218d0:	4620      	mov	r0, r4
 80218d2:	f006 fd54 	bl	802837e <__cxa_guard_release>
 80218d6:	4a06      	ldr	r2, [pc, #24]	; (80218f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80218d8:	4909      	ldr	r1, [pc, #36]	; (8021900 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80218da:	480a      	ldr	r0, [pc, #40]	; (8021904 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80218dc:	f006 fd39 	bl	8028352 <__aeabi_atexit>
 80218e0:	4b05      	ldr	r3, [pc, #20]	; (80218f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80218e2:	612b      	str	r3, [r5, #16]
 80218e4:	4b07      	ldr	r3, [pc, #28]	; (8021904 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80218e6:	616b      	str	r3, [r5, #20]
 80218e8:	bd38      	pop	{r3, r4, r5, pc}
 80218ea:	bf00      	nop
 80218ec:	2000bff8 	.word	0x2000bff8
 80218f0:	20000000 	.word	0x20000000
 80218f4:	080204cb 	.word	0x080204cb
 80218f8:	200000c4 	.word	0x200000c4
 80218fc:	2000bffc 	.word	0x2000bffc
 8021900:	080204c9 	.word	0x080204c9
 8021904:	200000c8 	.word	0x200000c8

08021908 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021908:	b538      	push	{r3, r4, r5, lr}
 802190a:	4c15      	ldr	r4, [pc, #84]	; (8021960 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802190c:	4605      	mov	r5, r0
 802190e:	7823      	ldrb	r3, [r4, #0]
 8021910:	f3bf 8f5b 	dmb	ish
 8021914:	07da      	lsls	r2, r3, #31
 8021916:	d40b      	bmi.n	8021930 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021918:	4620      	mov	r0, r4
 802191a:	f006 fd24 	bl	8028366 <__cxa_guard_acquire>
 802191e:	b138      	cbz	r0, 8021930 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021920:	4620      	mov	r0, r4
 8021922:	f006 fd2c 	bl	802837e <__cxa_guard_release>
 8021926:	4a0f      	ldr	r2, [pc, #60]	; (8021964 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021928:	490f      	ldr	r1, [pc, #60]	; (8021968 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802192a:	4810      	ldr	r0, [pc, #64]	; (802196c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802192c:	f006 fd11 	bl	8028352 <__aeabi_atexit>
 8021930:	4c0f      	ldr	r4, [pc, #60]	; (8021970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021932:	7823      	ldrb	r3, [r4, #0]
 8021934:	f3bf 8f5b 	dmb	ish
 8021938:	07db      	lsls	r3, r3, #31
 802193a:	d40b      	bmi.n	8021954 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802193c:	4620      	mov	r0, r4
 802193e:	f006 fd12 	bl	8028366 <__cxa_guard_acquire>
 8021942:	b138      	cbz	r0, 8021954 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021944:	4620      	mov	r0, r4
 8021946:	f006 fd1a 	bl	802837e <__cxa_guard_release>
 802194a:	4a06      	ldr	r2, [pc, #24]	; (8021964 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802194c:	4909      	ldr	r1, [pc, #36]	; (8021974 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802194e:	480a      	ldr	r0, [pc, #40]	; (8021978 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021950:	f006 fcff 	bl	8028352 <__aeabi_atexit>
 8021954:	4b05      	ldr	r3, [pc, #20]	; (802196c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021956:	60ab      	str	r3, [r5, #8]
 8021958:	4b07      	ldr	r3, [pc, #28]	; (8021978 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802195a:	60eb      	str	r3, [r5, #12]
 802195c:	bd38      	pop	{r3, r4, r5, pc}
 802195e:	bf00      	nop
 8021960:	2000bfd8 	.word	0x2000bfd8
 8021964:	20000000 	.word	0x20000000
 8021968:	080204cf 	.word	0x080204cf
 802196c:	200000a4 	.word	0x200000a4
 8021970:	2000bfdc 	.word	0x2000bfdc
 8021974:	080204cd 	.word	0x080204cd
 8021978:	200000a8 	.word	0x200000a8

0802197c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 802197c:	b510      	push	{r4, lr}
 802197e:	4604      	mov	r4, r0
 8021980:	f7ff ff88 	bl	8021894 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021984:	4620      	mov	r0, r4
 8021986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802198a:	f7ff bfbd 	b.w	8021908 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021990 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021990:	b538      	push	{r3, r4, r5, lr}
 8021992:	4c15      	ldr	r4, [pc, #84]	; (80219e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021994:	4605      	mov	r5, r0
 8021996:	7823      	ldrb	r3, [r4, #0]
 8021998:	f3bf 8f5b 	dmb	ish
 802199c:	07da      	lsls	r2, r3, #31
 802199e:	d40b      	bmi.n	80219b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80219a0:	4620      	mov	r0, r4
 80219a2:	f006 fce0 	bl	8028366 <__cxa_guard_acquire>
 80219a6:	b138      	cbz	r0, 80219b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80219a8:	4620      	mov	r0, r4
 80219aa:	f006 fce8 	bl	802837e <__cxa_guard_release>
 80219ae:	4a0f      	ldr	r2, [pc, #60]	; (80219ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80219b0:	490f      	ldr	r1, [pc, #60]	; (80219f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80219b2:	4810      	ldr	r0, [pc, #64]	; (80219f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80219b4:	f006 fccd 	bl	8028352 <__aeabi_atexit>
 80219b8:	4c0f      	ldr	r4, [pc, #60]	; (80219f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80219ba:	7823      	ldrb	r3, [r4, #0]
 80219bc:	f3bf 8f5b 	dmb	ish
 80219c0:	07db      	lsls	r3, r3, #31
 80219c2:	d40b      	bmi.n	80219dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80219c4:	4620      	mov	r0, r4
 80219c6:	f006 fcce 	bl	8028366 <__cxa_guard_acquire>
 80219ca:	b138      	cbz	r0, 80219dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80219cc:	4620      	mov	r0, r4
 80219ce:	f006 fcd6 	bl	802837e <__cxa_guard_release>
 80219d2:	4a06      	ldr	r2, [pc, #24]	; (80219ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80219d4:	4909      	ldr	r1, [pc, #36]	; (80219fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80219d6:	480a      	ldr	r0, [pc, #40]	; (8021a00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80219d8:	f006 fcbb 	bl	8028352 <__aeabi_atexit>
 80219dc:	4b05      	ldr	r3, [pc, #20]	; (80219f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80219de:	622b      	str	r3, [r5, #32]
 80219e0:	4b07      	ldr	r3, [pc, #28]	; (8021a00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80219e2:	626b      	str	r3, [r5, #36]	; 0x24
 80219e4:	bd38      	pop	{r3, r4, r5, pc}
 80219e6:	bf00      	nop
 80219e8:	2000c000 	.word	0x2000c000
 80219ec:	20000000 	.word	0x20000000
 80219f0:	080204c3 	.word	0x080204c3
 80219f4:	200000cc 	.word	0x200000cc
 80219f8:	2000c004 	.word	0x2000c004
 80219fc:	080204c1 	.word	0x080204c1
 8021a00:	200000d0 	.word	0x200000d0

08021a04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021a04:	b538      	push	{r3, r4, r5, lr}
 8021a06:	4c15      	ldr	r4, [pc, #84]	; (8021a5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021a08:	4605      	mov	r5, r0
 8021a0a:	7823      	ldrb	r3, [r4, #0]
 8021a0c:	f3bf 8f5b 	dmb	ish
 8021a10:	07da      	lsls	r2, r3, #31
 8021a12:	d40b      	bmi.n	8021a2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021a14:	4620      	mov	r0, r4
 8021a16:	f006 fca6 	bl	8028366 <__cxa_guard_acquire>
 8021a1a:	b138      	cbz	r0, 8021a2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021a1c:	4620      	mov	r0, r4
 8021a1e:	f006 fcae 	bl	802837e <__cxa_guard_release>
 8021a22:	4a0f      	ldr	r2, [pc, #60]	; (8021a60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021a24:	490f      	ldr	r1, [pc, #60]	; (8021a64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021a26:	4810      	ldr	r0, [pc, #64]	; (8021a68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021a28:	f006 fc93 	bl	8028352 <__aeabi_atexit>
 8021a2c:	4c0f      	ldr	r4, [pc, #60]	; (8021a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021a2e:	7823      	ldrb	r3, [r4, #0]
 8021a30:	f3bf 8f5b 	dmb	ish
 8021a34:	07db      	lsls	r3, r3, #31
 8021a36:	d40b      	bmi.n	8021a50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021a38:	4620      	mov	r0, r4
 8021a3a:	f006 fc94 	bl	8028366 <__cxa_guard_acquire>
 8021a3e:	b138      	cbz	r0, 8021a50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021a40:	4620      	mov	r0, r4
 8021a42:	f006 fc9c 	bl	802837e <__cxa_guard_release>
 8021a46:	4a06      	ldr	r2, [pc, #24]	; (8021a60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021a48:	4909      	ldr	r1, [pc, #36]	; (8021a70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021a4a:	480a      	ldr	r0, [pc, #40]	; (8021a74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021a4c:	f006 fc81 	bl	8028352 <__aeabi_atexit>
 8021a50:	4b05      	ldr	r3, [pc, #20]	; (8021a68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021a52:	61ab      	str	r3, [r5, #24]
 8021a54:	4b07      	ldr	r3, [pc, #28]	; (8021a74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021a56:	61eb      	str	r3, [r5, #28]
 8021a58:	bd38      	pop	{r3, r4, r5, pc}
 8021a5a:	bf00      	nop
 8021a5c:	2000bfe0 	.word	0x2000bfe0
 8021a60:	20000000 	.word	0x20000000
 8021a64:	080204c7 	.word	0x080204c7
 8021a68:	200000ac 	.word	0x200000ac
 8021a6c:	2000bfe4 	.word	0x2000bfe4
 8021a70:	080204c5 	.word	0x080204c5
 8021a74:	200000b0 	.word	0x200000b0

08021a78 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021a78:	b510      	push	{r4, lr}
 8021a7a:	4604      	mov	r4, r0
 8021a7c:	f7ff ff88 	bl	8021990 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021a80:	4620      	mov	r0, r4
 8021a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a86:	f7ff bfbd 	b.w	8021a04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021a8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8021a8c:	b538      	push	{r3, r4, r5, lr}
 8021a8e:	4c15      	ldr	r4, [pc, #84]	; (8021ae4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021a90:	4605      	mov	r5, r0
 8021a92:	7823      	ldrb	r3, [r4, #0]
 8021a94:	f3bf 8f5b 	dmb	ish
 8021a98:	07da      	lsls	r2, r3, #31
 8021a9a:	d40b      	bmi.n	8021ab4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021a9c:	4620      	mov	r0, r4
 8021a9e:	f006 fc62 	bl	8028366 <__cxa_guard_acquire>
 8021aa2:	b138      	cbz	r0, 8021ab4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021aa4:	4620      	mov	r0, r4
 8021aa6:	f006 fc6a 	bl	802837e <__cxa_guard_release>
 8021aaa:	4a0f      	ldr	r2, [pc, #60]	; (8021ae8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021aac:	490f      	ldr	r1, [pc, #60]	; (8021aec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8021aae:	4810      	ldr	r0, [pc, #64]	; (8021af0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021ab0:	f006 fc4f 	bl	8028352 <__aeabi_atexit>
 8021ab4:	4c0f      	ldr	r4, [pc, #60]	; (8021af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8021ab6:	7823      	ldrb	r3, [r4, #0]
 8021ab8:	f3bf 8f5b 	dmb	ish
 8021abc:	07db      	lsls	r3, r3, #31
 8021abe:	d40b      	bmi.n	8021ad8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021ac0:	4620      	mov	r0, r4
 8021ac2:	f006 fc50 	bl	8028366 <__cxa_guard_acquire>
 8021ac6:	b138      	cbz	r0, 8021ad8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021ac8:	4620      	mov	r0, r4
 8021aca:	f006 fc58 	bl	802837e <__cxa_guard_release>
 8021ace:	4a06      	ldr	r2, [pc, #24]	; (8021ae8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021ad0:	4909      	ldr	r1, [pc, #36]	; (8021af8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8021ad2:	480a      	ldr	r0, [pc, #40]	; (8021afc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021ad4:	f006 fc3d 	bl	8028352 <__aeabi_atexit>
 8021ad8:	4b05      	ldr	r3, [pc, #20]	; (8021af0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021ada:	632b      	str	r3, [r5, #48]	; 0x30
 8021adc:	4b07      	ldr	r3, [pc, #28]	; (8021afc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021ade:	636b      	str	r3, [r5, #52]	; 0x34
 8021ae0:	bd38      	pop	{r3, r4, r5, pc}
 8021ae2:	bf00      	nop
 8021ae4:	2000bfe8 	.word	0x2000bfe8
 8021ae8:	20000000 	.word	0x20000000
 8021aec:	080204bb 	.word	0x080204bb
 8021af0:	200000b4 	.word	0x200000b4
 8021af4:	2000bfec 	.word	0x2000bfec
 8021af8:	080204b9 	.word	0x080204b9
 8021afc:	200000b8 	.word	0x200000b8

08021b00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021b00:	b538      	push	{r3, r4, r5, lr}
 8021b02:	4c15      	ldr	r4, [pc, #84]	; (8021b58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8021b04:	4605      	mov	r5, r0
 8021b06:	7823      	ldrb	r3, [r4, #0]
 8021b08:	f3bf 8f5b 	dmb	ish
 8021b0c:	07da      	lsls	r2, r3, #31
 8021b0e:	d40b      	bmi.n	8021b28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021b10:	4620      	mov	r0, r4
 8021b12:	f006 fc28 	bl	8028366 <__cxa_guard_acquire>
 8021b16:	b138      	cbz	r0, 8021b28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021b18:	4620      	mov	r0, r4
 8021b1a:	f006 fc30 	bl	802837e <__cxa_guard_release>
 8021b1e:	4a0f      	ldr	r2, [pc, #60]	; (8021b5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021b20:	490f      	ldr	r1, [pc, #60]	; (8021b60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8021b22:	4810      	ldr	r0, [pc, #64]	; (8021b64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021b24:	f006 fc15 	bl	8028352 <__aeabi_atexit>
 8021b28:	4c0f      	ldr	r4, [pc, #60]	; (8021b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8021b2a:	7823      	ldrb	r3, [r4, #0]
 8021b2c:	f3bf 8f5b 	dmb	ish
 8021b30:	07db      	lsls	r3, r3, #31
 8021b32:	d40b      	bmi.n	8021b4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021b34:	4620      	mov	r0, r4
 8021b36:	f006 fc16 	bl	8028366 <__cxa_guard_acquire>
 8021b3a:	b138      	cbz	r0, 8021b4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021b3c:	4620      	mov	r0, r4
 8021b3e:	f006 fc1e 	bl	802837e <__cxa_guard_release>
 8021b42:	4a06      	ldr	r2, [pc, #24]	; (8021b5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021b44:	4909      	ldr	r1, [pc, #36]	; (8021b6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8021b46:	480a      	ldr	r0, [pc, #40]	; (8021b70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021b48:	f006 fc03 	bl	8028352 <__aeabi_atexit>
 8021b4c:	4b05      	ldr	r3, [pc, #20]	; (8021b64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021b4e:	62ab      	str	r3, [r5, #40]	; 0x28
 8021b50:	4b07      	ldr	r3, [pc, #28]	; (8021b70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021b52:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021b54:	bd38      	pop	{r3, r4, r5, pc}
 8021b56:	bf00      	nop
 8021b58:	2000bfc0 	.word	0x2000bfc0
 8021b5c:	20000000 	.word	0x20000000
 8021b60:	080204bf 	.word	0x080204bf
 8021b64:	2000008c 	.word	0x2000008c
 8021b68:	2000bfc4 	.word	0x2000bfc4
 8021b6c:	080204bd 	.word	0x080204bd
 8021b70:	20000090 	.word	0x20000090

08021b74 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8021b74:	b510      	push	{r4, lr}
 8021b76:	4604      	mov	r4, r0
 8021b78:	f7ff ff88 	bl	8021a8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8021b7c:	4620      	mov	r0, r4
 8021b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b82:	f7ff bfbd 	b.w	8021b00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021b88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021b88:	b538      	push	{r3, r4, r5, lr}
 8021b8a:	4c15      	ldr	r4, [pc, #84]	; (8021be0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021b8c:	4605      	mov	r5, r0
 8021b8e:	7823      	ldrb	r3, [r4, #0]
 8021b90:	f3bf 8f5b 	dmb	ish
 8021b94:	07da      	lsls	r2, r3, #31
 8021b96:	d40b      	bmi.n	8021bb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021b98:	4620      	mov	r0, r4
 8021b9a:	f006 fbe4 	bl	8028366 <__cxa_guard_acquire>
 8021b9e:	b138      	cbz	r0, 8021bb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f006 fbec 	bl	802837e <__cxa_guard_release>
 8021ba6:	4a0f      	ldr	r2, [pc, #60]	; (8021be4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021ba8:	490f      	ldr	r1, [pc, #60]	; (8021be8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021baa:	4810      	ldr	r0, [pc, #64]	; (8021bec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021bac:	f006 fbd1 	bl	8028352 <__aeabi_atexit>
 8021bb0:	4c0f      	ldr	r4, [pc, #60]	; (8021bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021bb2:	7823      	ldrb	r3, [r4, #0]
 8021bb4:	f3bf 8f5b 	dmb	ish
 8021bb8:	07db      	lsls	r3, r3, #31
 8021bba:	d40b      	bmi.n	8021bd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021bbc:	4620      	mov	r0, r4
 8021bbe:	f006 fbd2 	bl	8028366 <__cxa_guard_acquire>
 8021bc2:	b138      	cbz	r0, 8021bd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021bc4:	4620      	mov	r0, r4
 8021bc6:	f006 fbda 	bl	802837e <__cxa_guard_release>
 8021bca:	4a06      	ldr	r2, [pc, #24]	; (8021be4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021bcc:	4909      	ldr	r1, [pc, #36]	; (8021bf4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021bce:	480a      	ldr	r0, [pc, #40]	; (8021bf8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021bd0:	f006 fbbf 	bl	8028352 <__aeabi_atexit>
 8021bd4:	4b05      	ldr	r3, [pc, #20]	; (8021bec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021bd6:	642b      	str	r3, [r5, #64]	; 0x40
 8021bd8:	4b07      	ldr	r3, [pc, #28]	; (8021bf8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021bda:	646b      	str	r3, [r5, #68]	; 0x44
 8021bdc:	bd38      	pop	{r3, r4, r5, pc}
 8021bde:	bf00      	nop
 8021be0:	2000bff0 	.word	0x2000bff0
 8021be4:	20000000 	.word	0x20000000
 8021be8:	080204b3 	.word	0x080204b3
 8021bec:	200000bc 	.word	0x200000bc
 8021bf0:	2000bff4 	.word	0x2000bff4
 8021bf4:	080204b1 	.word	0x080204b1
 8021bf8:	200000c0 	.word	0x200000c0

08021bfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021bfc:	b538      	push	{r3, r4, r5, lr}
 8021bfe:	4c15      	ldr	r4, [pc, #84]	; (8021c54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021c00:	4605      	mov	r5, r0
 8021c02:	7823      	ldrb	r3, [r4, #0]
 8021c04:	f3bf 8f5b 	dmb	ish
 8021c08:	07da      	lsls	r2, r3, #31
 8021c0a:	d40b      	bmi.n	8021c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021c0c:	4620      	mov	r0, r4
 8021c0e:	f006 fbaa 	bl	8028366 <__cxa_guard_acquire>
 8021c12:	b138      	cbz	r0, 8021c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021c14:	4620      	mov	r0, r4
 8021c16:	f006 fbb2 	bl	802837e <__cxa_guard_release>
 8021c1a:	4a0f      	ldr	r2, [pc, #60]	; (8021c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021c1c:	490f      	ldr	r1, [pc, #60]	; (8021c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021c1e:	4810      	ldr	r0, [pc, #64]	; (8021c60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021c20:	f006 fb97 	bl	8028352 <__aeabi_atexit>
 8021c24:	4c0f      	ldr	r4, [pc, #60]	; (8021c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021c26:	7823      	ldrb	r3, [r4, #0]
 8021c28:	f3bf 8f5b 	dmb	ish
 8021c2c:	07db      	lsls	r3, r3, #31
 8021c2e:	d40b      	bmi.n	8021c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021c30:	4620      	mov	r0, r4
 8021c32:	f006 fb98 	bl	8028366 <__cxa_guard_acquire>
 8021c36:	b138      	cbz	r0, 8021c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021c38:	4620      	mov	r0, r4
 8021c3a:	f006 fba0 	bl	802837e <__cxa_guard_release>
 8021c3e:	4a06      	ldr	r2, [pc, #24]	; (8021c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021c40:	4909      	ldr	r1, [pc, #36]	; (8021c68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021c42:	480a      	ldr	r0, [pc, #40]	; (8021c6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021c44:	f006 fb85 	bl	8028352 <__aeabi_atexit>
 8021c48:	4b05      	ldr	r3, [pc, #20]	; (8021c60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021c4a:	63ab      	str	r3, [r5, #56]	; 0x38
 8021c4c:	4b07      	ldr	r3, [pc, #28]	; (8021c6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021c4e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021c50:	bd38      	pop	{r3, r4, r5, pc}
 8021c52:	bf00      	nop
 8021c54:	2000bfd0 	.word	0x2000bfd0
 8021c58:	20000000 	.word	0x20000000
 8021c5c:	080204b7 	.word	0x080204b7
 8021c60:	2000009c 	.word	0x2000009c
 8021c64:	2000bfd4 	.word	0x2000bfd4
 8021c68:	080204b5 	.word	0x080204b5
 8021c6c:	200000a0 	.word	0x200000a0

08021c70 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8021c70:	b510      	push	{r4, lr}
 8021c72:	4604      	mov	r4, r0
 8021c74:	f7ff ff88 	bl	8021b88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021c78:	4620      	mov	r0, r4
 8021c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c7e:	f7ff bfbd 	b.w	8021bfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021c84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021c84:	b538      	push	{r3, r4, r5, lr}
 8021c86:	4c15      	ldr	r4, [pc, #84]	; (8021cdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021c88:	4605      	mov	r5, r0
 8021c8a:	7823      	ldrb	r3, [r4, #0]
 8021c8c:	f3bf 8f5b 	dmb	ish
 8021c90:	07da      	lsls	r2, r3, #31
 8021c92:	d40b      	bmi.n	8021cac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021c94:	4620      	mov	r0, r4
 8021c96:	f006 fb66 	bl	8028366 <__cxa_guard_acquire>
 8021c9a:	b138      	cbz	r0, 8021cac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021c9c:	4620      	mov	r0, r4
 8021c9e:	f006 fb6e 	bl	802837e <__cxa_guard_release>
 8021ca2:	4a0f      	ldr	r2, [pc, #60]	; (8021ce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021ca4:	490f      	ldr	r1, [pc, #60]	; (8021ce4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021ca6:	4810      	ldr	r0, [pc, #64]	; (8021ce8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021ca8:	f006 fb53 	bl	8028352 <__aeabi_atexit>
 8021cac:	4c0f      	ldr	r4, [pc, #60]	; (8021cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021cae:	7823      	ldrb	r3, [r4, #0]
 8021cb0:	f3bf 8f5b 	dmb	ish
 8021cb4:	07db      	lsls	r3, r3, #31
 8021cb6:	d40b      	bmi.n	8021cd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021cb8:	4620      	mov	r0, r4
 8021cba:	f006 fb54 	bl	8028366 <__cxa_guard_acquire>
 8021cbe:	b138      	cbz	r0, 8021cd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021cc0:	4620      	mov	r0, r4
 8021cc2:	f006 fb5c 	bl	802837e <__cxa_guard_release>
 8021cc6:	4a06      	ldr	r2, [pc, #24]	; (8021ce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021cc8:	4909      	ldr	r1, [pc, #36]	; (8021cf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021cca:	480a      	ldr	r0, [pc, #40]	; (8021cf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021ccc:	f006 fb41 	bl	8028352 <__aeabi_atexit>
 8021cd0:	4b05      	ldr	r3, [pc, #20]	; (8021ce8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021cd2:	652b      	str	r3, [r5, #80]	; 0x50
 8021cd4:	4b07      	ldr	r3, [pc, #28]	; (8021cf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021cd6:	656b      	str	r3, [r5, #84]	; 0x54
 8021cd8:	bd38      	pop	{r3, r4, r5, pc}
 8021cda:	bf00      	nop
 8021cdc:	2000bfc8 	.word	0x2000bfc8
 8021ce0:	20000000 	.word	0x20000000
 8021ce4:	080204ab 	.word	0x080204ab
 8021ce8:	20000094 	.word	0x20000094
 8021cec:	2000bfcc 	.word	0x2000bfcc
 8021cf0:	080204a9 	.word	0x080204a9
 8021cf4:	20000098 	.word	0x20000098

08021cf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021cf8:	b538      	push	{r3, r4, r5, lr}
 8021cfa:	4c15      	ldr	r4, [pc, #84]	; (8021d50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021cfc:	4605      	mov	r5, r0
 8021cfe:	7823      	ldrb	r3, [r4, #0]
 8021d00:	f3bf 8f5b 	dmb	ish
 8021d04:	07da      	lsls	r2, r3, #31
 8021d06:	d40b      	bmi.n	8021d20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021d08:	4620      	mov	r0, r4
 8021d0a:	f006 fb2c 	bl	8028366 <__cxa_guard_acquire>
 8021d0e:	b138      	cbz	r0, 8021d20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021d10:	4620      	mov	r0, r4
 8021d12:	f006 fb34 	bl	802837e <__cxa_guard_release>
 8021d16:	4a0f      	ldr	r2, [pc, #60]	; (8021d54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021d18:	490f      	ldr	r1, [pc, #60]	; (8021d58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021d1a:	4810      	ldr	r0, [pc, #64]	; (8021d5c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021d1c:	f006 fb19 	bl	8028352 <__aeabi_atexit>
 8021d20:	4c0f      	ldr	r4, [pc, #60]	; (8021d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021d22:	7823      	ldrb	r3, [r4, #0]
 8021d24:	f3bf 8f5b 	dmb	ish
 8021d28:	07db      	lsls	r3, r3, #31
 8021d2a:	d40b      	bmi.n	8021d44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021d2c:	4620      	mov	r0, r4
 8021d2e:	f006 fb1a 	bl	8028366 <__cxa_guard_acquire>
 8021d32:	b138      	cbz	r0, 8021d44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021d34:	4620      	mov	r0, r4
 8021d36:	f006 fb22 	bl	802837e <__cxa_guard_release>
 8021d3a:	4a06      	ldr	r2, [pc, #24]	; (8021d54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021d3c:	4909      	ldr	r1, [pc, #36]	; (8021d64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021d3e:	480a      	ldr	r0, [pc, #40]	; (8021d68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021d40:	f006 fb07 	bl	8028352 <__aeabi_atexit>
 8021d44:	4b05      	ldr	r3, [pc, #20]	; (8021d5c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021d46:	64ab      	str	r3, [r5, #72]	; 0x48
 8021d48:	4b07      	ldr	r3, [pc, #28]	; (8021d68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021d4a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021d4c:	bd38      	pop	{r3, r4, r5, pc}
 8021d4e:	bf00      	nop
 8021d50:	2000bfb8 	.word	0x2000bfb8
 8021d54:	20000000 	.word	0x20000000
 8021d58:	080204af 	.word	0x080204af
 8021d5c:	20000084 	.word	0x20000084
 8021d60:	2000bfbc 	.word	0x2000bfbc
 8021d64:	080204ad 	.word	0x080204ad
 8021d68:	20000088 	.word	0x20000088

08021d6c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8021d6c:	b510      	push	{r4, lr}
 8021d6e:	4604      	mov	r4, r0
 8021d70:	f7ff ff88 	bl	8021c84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021d74:	4620      	mov	r0, r4
 8021d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d7a:	f7ff bfbd 	b.w	8021cf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08021d7e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8021d7e:	b510      	push	{r4, lr}
 8021d80:	4604      	mov	r4, r0
 8021d82:	f7ff fff3 	bl	8021d6c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8021d86:	4620      	mov	r0, r4
 8021d88:	f7ff ff72 	bl	8021c70 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8021d8c:	4620      	mov	r0, r4
 8021d8e:	f7ff fe73 	bl	8021a78 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8021d92:	4620      	mov	r0, r4
 8021d94:	f7ff fdf2 	bl	802197c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8021d98:	4620      	mov	r0, r4
 8021d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d9e:	f7ff bee9 	b.w	8021b74 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08021da4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8021da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da8:	b087      	sub	sp, #28
 8021daa:	7888      	ldrb	r0, [r1, #2]
 8021dac:	4616      	mov	r6, r2
 8021dae:	9001      	str	r0, [sp, #4]
 8021db0:	7848      	ldrb	r0, [r1, #1]
 8021db2:	9100      	str	r1, [sp, #0]
 8021db4:	9002      	str	r0, [sp, #8]
 8021db6:	7808      	ldrb	r0, [r1, #0]
 8021db8:	9901      	ldr	r1, [sp, #4]
 8021dba:	9003      	str	r0, [sp, #12]
 8021dbc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021dc0:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8021dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8021dc8:	9902      	ldr	r1, [sp, #8]
 8021dca:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8021dce:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8021dd2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8021dd6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8021dda:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021dde:	9005      	str	r0, [sp, #20]
 8021de0:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8021de4:	fb05 ca0e 	mla	sl, r5, lr, ip
 8021de8:	2d00      	cmp	r5, #0
 8021dea:	eb06 080a 	add.w	r8, r6, sl
 8021dee:	db4a      	blt.n	8021e86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021df0:	45a9      	cmp	r9, r5
 8021df2:	dd48      	ble.n	8021e86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021df4:	f1bc 0f00 	cmp.w	ip, #0
 8021df8:	db43      	blt.n	8021e82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021dfa:	45e6      	cmp	lr, ip
 8021dfc:	dd41      	ble.n	8021e82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021dfe:	f816 600a 	ldrb.w	r6, [r6, sl]
 8021e02:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021e06:	441e      	add	r6, r3
 8021e08:	f11c 0001 	adds.w	r0, ip, #1
 8021e0c:	d43e      	bmi.n	8021e8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021e0e:	4586      	cmp	lr, r0
 8021e10:	dd3c      	ble.n	8021e8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021e12:	2a00      	cmp	r2, #0
 8021e14:	d03a      	beq.n	8021e8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021e16:	f898 0001 	ldrb.w	r0, [r8, #1]
 8021e1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021e1e:	4418      	add	r0, r3
 8021e20:	3501      	adds	r5, #1
 8021e22:	d437      	bmi.n	8021e94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021e24:	45a9      	cmp	r9, r5
 8021e26:	dd35      	ble.n	8021e94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021e28:	b3a4      	cbz	r4, 8021e94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021e2a:	f1bc 0f00 	cmp.w	ip, #0
 8021e2e:	db2f      	blt.n	8021e90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8021e30:	45e6      	cmp	lr, ip
 8021e32:	dd2d      	ble.n	8021e90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8021e34:	f818 500e 	ldrb.w	r5, [r8, lr]
 8021e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e3c:	441d      	add	r5, r3
 8021e3e:	f11c 0c01 	adds.w	ip, ip, #1
 8021e42:	d42a      	bmi.n	8021e9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021e44:	45e6      	cmp	lr, ip
 8021e46:	dd28      	ble.n	8021e9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021e48:	b33a      	cbz	r2, 8021e9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021e4a:	44c6      	add	lr, r8
 8021e4c:	f89e c001 	ldrb.w	ip, [lr, #1]
 8021e50:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021e54:	4463      	add	r3, ip
 8021e56:	ea6f 0c07 	mvn.w	ip, r7
 8021e5a:	2a0f      	cmp	r2, #15
 8021e5c:	f896 a000 	ldrb.w	sl, [r6]
 8021e60:	fa5f fc8c 	uxtb.w	ip, ip
 8021e64:	f890 b000 	ldrb.w	fp, [r0]
 8021e68:	f895 9000 	ldrb.w	r9, [r5]
 8021e6c:	7819      	ldrb	r1, [r3, #0]
 8021e6e:	d801      	bhi.n	8021e74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8021e70:	2c0f      	cmp	r4, #15
 8021e72:	d914      	bls.n	8021e9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8021e74:	4b40      	ldr	r3, [pc, #256]	; (8021f78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8021e76:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021e7a:	4a40      	ldr	r2, [pc, #256]	; (8021f7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8021e7c:	4840      	ldr	r0, [pc, #256]	; (8021f80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 8021e7e:	f006 fa9b 	bl	80283b8 <__assert_func>
 8021e82:	ae05      	add	r6, sp, #20
 8021e84:	e7c0      	b.n	8021e08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8021e86:	a805      	add	r0, sp, #20
 8021e88:	4606      	mov	r6, r0
 8021e8a:	e7c9      	b.n	8021e20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8021e8c:	a805      	add	r0, sp, #20
 8021e8e:	e7c7      	b.n	8021e20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8021e90:	ad05      	add	r5, sp, #20
 8021e92:	e7d4      	b.n	8021e3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8021e94:	ab05      	add	r3, sp, #20
 8021e96:	461d      	mov	r5, r3
 8021e98:	e7dd      	b.n	8021e56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8021e9a:	ab05      	add	r3, sp, #20
 8021e9c:	e7db      	b.n	8021e56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8021e9e:	b292      	uxth	r2, r2
 8021ea0:	b2a4      	uxth	r4, r4
 8021ea2:	fa1f fc8c 	uxth.w	ip, ip
 8021ea6:	fb02 f804 	mul.w	r8, r2, r4
 8021eaa:	0112      	lsls	r2, r2, #4
 8021eac:	b2bf      	uxth	r7, r7
 8021eae:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8021eb2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8021eb6:	eba2 0208 	sub.w	r2, r2, r8
 8021eba:	b2a4      	uxth	r4, r4
 8021ebc:	b292      	uxth	r2, r2
 8021ebe:	ebae 0e04 	sub.w	lr, lr, r4
 8021ec2:	fb02 fb0b 	mul.w	fp, r2, fp
 8021ec6:	fa1f fe8e 	uxth.w	lr, lr
 8021eca:	fb0e ba0a 	mla	sl, lr, sl, fp
 8021ece:	fb04 aa09 	mla	sl, r4, r9, sl
 8021ed2:	fb08 aa01 	mla	sl, r8, r1, sl
 8021ed6:	9903      	ldr	r1, [sp, #12]
 8021ed8:	fb11 f90c 	smulbb	r9, r1, ip
 8021edc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8021ee0:	9900      	ldr	r1, [sp, #0]
 8021ee2:	fb0a 9a07 	mla	sl, sl, r7, r9
 8021ee6:	fa1f fa8a 	uxth.w	sl, sl
 8021eea:	f10a 0901 	add.w	r9, sl, #1
 8021eee:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8021ef2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021ef6:	f881 a000 	strb.w	sl, [r1]
 8021efa:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021efe:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021f02:	fb02 fa0a 	mul.w	sl, r2, sl
 8021f06:	9902      	ldr	r1, [sp, #8]
 8021f08:	fb0e aa09 	mla	sl, lr, r9, sl
 8021f0c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8021f10:	fb04 aa09 	mla	sl, r4, r9, sl
 8021f14:	f893 9001 	ldrb.w	r9, [r3, #1]
 8021f18:	fb08 a909 	mla	r9, r8, r9, sl
 8021f1c:	fb11 fa0c 	smulbb	sl, r1, ip
 8021f20:	9900      	ldr	r1, [sp, #0]
 8021f22:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021f26:	fb09 a907 	mla	r9, r9, r7, sl
 8021f2a:	fa1f f989 	uxth.w	r9, r9
 8021f2e:	f109 0a01 	add.w	sl, r9, #1
 8021f32:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021f36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f3a:	f881 9001 	strb.w	r9, [r1, #1]
 8021f3e:	7880      	ldrb	r0, [r0, #2]
 8021f40:	78b6      	ldrb	r6, [r6, #2]
 8021f42:	4342      	muls	r2, r0
 8021f44:	78a8      	ldrb	r0, [r5, #2]
 8021f46:	789b      	ldrb	r3, [r3, #2]
 8021f48:	fb0e 2206 	mla	r2, lr, r6, r2
 8021f4c:	fb04 2400 	mla	r4, r4, r0, r2
 8021f50:	fb08 4803 	mla	r8, r8, r3, r4
 8021f54:	9b01      	ldr	r3, [sp, #4]
 8021f56:	fb13 fc0c 	smulbb	ip, r3, ip
 8021f5a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021f5e:	fb08 c707 	mla	r7, r8, r7, ip
 8021f62:	b2bf      	uxth	r7, r7
 8021f64:	f107 0c01 	add.w	ip, r7, #1
 8021f68:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8021f6c:	123f      	asrs	r7, r7, #8
 8021f6e:	708f      	strb	r7, [r1, #2]
 8021f70:	b007      	add	sp, #28
 8021f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f76:	bf00      	nop
 8021f78:	0802d527 	.word	0x0802d527
 8021f7c:	0802da1e 	.word	0x0802da1e
 8021f80:	0802d5f0 	.word	0x0802d5f0

08021f84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f88:	ed2d 8b08 	vpush	{d8-d11}
 8021f8c:	b095      	sub	sp, #84	; 0x54
 8021f8e:	eeb0 aa40 	vmov.f32	s20, s0
 8021f92:	eef0 9a60 	vmov.f32	s19, s1
 8021f96:	930a      	str	r3, [sp, #40]	; 0x28
 8021f98:	eeb0 9a41 	vmov.f32	s18, s2
 8021f9c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8021fa0:	eeb0 8a62 	vmov.f32	s16, s5
 8021fa4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8021fa6:	eef0 8a43 	vmov.f32	s17, s6
 8021faa:	930c      	str	r3, [sp, #48]	; 0x30
 8021fac:	eef0 ba44 	vmov.f32	s23, s8
 8021fb0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8021fb4:	eeb0 ba64 	vmov.f32	s22, s9
 8021fb8:	9013      	str	r0, [sp, #76]	; 0x4c
 8021fba:	eef0 aa45 	vmov.f32	s21, s10
 8021fbe:	9310      	str	r3, [sp, #64]	; 0x40
 8021fc0:	6860      	ldr	r0, [r4, #4]
 8021fc2:	910f      	str	r1, [sp, #60]	; 0x3c
 8021fc4:	9212      	str	r2, [sp, #72]	; 0x48
 8021fc6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021fc8:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8021fcc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021fd0:	fb00 1303 	mla	r3, r0, r3, r1
 8021fd4:	6821      	ldr	r1, [r4, #0]
 8021fd6:	6854      	ldr	r4, [r2, #4]
 8021fd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021fdc:	18cb      	adds	r3, r1, r3
 8021fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8021fe0:	6813      	ldr	r3, [r2, #0]
 8021fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8021fe4:	1d23      	adds	r3, r4, #4
 8021fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8021fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021fea:	43db      	mvns	r3, r3
 8021fec:	b2db      	uxtb	r3, r3
 8021fee:	930d      	str	r3, [sp, #52]	; 0x34
 8021ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021ff2:	2b00      	cmp	r3, #0
 8021ff4:	dc03      	bgt.n	8021ffe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	f340 823c 	ble.w	8022476 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8021ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022000:	2b00      	cmp	r3, #0
 8022002:	f340 8115 	ble.w	8022230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022006:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022008:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802200a:	1412      	asrs	r2, r2, #16
 802200c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022010:	d431      	bmi.n	8022076 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8022012:	1c51      	adds	r1, r2, #1
 8022014:	428d      	cmp	r5, r1
 8022016:	dd31      	ble.n	802207c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022018:	2b00      	cmp	r3, #0
 802201a:	db2f      	blt.n	802207c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802201c:	1c59      	adds	r1, r3, #1
 802201e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022020:	4288      	cmp	r0, r1
 8022022:	dd2b      	ble.n	802207c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022026:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022028:	3b01      	subs	r3, #1
 802202a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802202c:	fb02 1203 	mla	r2, r2, r3, r1
 8022030:	1412      	asrs	r2, r2, #16
 8022032:	d42d      	bmi.n	8022090 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022034:	3201      	adds	r2, #1
 8022036:	4295      	cmp	r5, r2
 8022038:	dd2a      	ble.n	8022090 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802203a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802203c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802203e:	fb02 1303 	mla	r3, r2, r3, r1
 8022042:	141b      	asrs	r3, r3, #16
 8022044:	d424      	bmi.n	8022090 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022046:	3301      	adds	r3, #1
 8022048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802204a:	429a      	cmp	r2, r3
 802204c:	dd20      	ble.n	8022090 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802204e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022050:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8022054:	f103 0c03 	add.w	ip, r3, #3
 8022058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802205a:	9311      	str	r3, [sp, #68]	; 0x44
 802205c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802205e:	2b00      	cmp	r3, #0
 8022060:	f300 814f 	bgt.w	8022302 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8022064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802206c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022070:	441a      	add	r2, r3
 8022072:	920b      	str	r2, [sp, #44]	; 0x2c
 8022074:	e0de      	b.n	8022234 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022076:	1c51      	adds	r1, r2, #1
 8022078:	f040 80cb 	bne.w	8022212 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802207c:	42aa      	cmp	r2, r5
 802207e:	f280 80c8 	bge.w	8022212 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022082:	1c5f      	adds	r7, r3, #1
 8022084:	f2c0 80c5 	blt.w	8022212 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802208a:	4293      	cmp	r3, r2
 802208c:	f280 80c1 	bge.w	8022212 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022092:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022094:	9311      	str	r3, [sp, #68]	; 0x44
 8022096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022098:	2b00      	cmp	r3, #0
 802209a:	dde3      	ble.n	8022064 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802209c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802209e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80220a0:	141a      	asrs	r2, r3, #16
 80220a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80220a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80220a6:	1400      	asrs	r0, r0, #16
 80220a8:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80220ac:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80220b0:	f100 810e 	bmi.w	80222d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80220b4:	1c46      	adds	r6, r0, #1
 80220b6:	42b5      	cmp	r5, r6
 80220b8:	f340 810c 	ble.w	80222d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80220bc:	2a00      	cmp	r2, #0
 80220be:	f2c0 8109 	blt.w	80222d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80220c2:	1c56      	adds	r6, r2, #1
 80220c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80220c6:	42b4      	cmp	r4, r6
 80220c8:	f340 8104 	ble.w	80222d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80220cc:	fb02 0005 	mla	r0, r2, r5, r0
 80220d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80220d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80220d4:	f814 e000 	ldrb.w	lr, [r4, r0]
 80220d8:	4402      	add	r2, r0
 80220da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80220dc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80220e0:	eb00 080e 	add.w	r8, r0, lr
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	f000 80e4 	beq.w	80222b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 80220ea:	f892 c001 	ldrb.w	ip, [r2, #1]
 80220ee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80220f2:	4484      	add	ip, r0
 80220f4:	2900      	cmp	r1, #0
 80220f6:	f000 80e5 	beq.w	80222c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 80220fa:	1950      	adds	r0, r2, r5
 80220fc:	5d52      	ldrb	r2, [r2, r5]
 80220fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022100:	7840      	ldrb	r0, [r0, #1]
 8022102:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022106:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802210a:	4422      	add	r2, r4
 802210c:	4420      	add	r0, r4
 802210e:	b29b      	uxth	r3, r3
 8022110:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022112:	b289      	uxth	r1, r1
 8022114:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8022118:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802211c:	fb03 fa01 	mul.w	sl, r3, r1
 8022120:	011b      	lsls	r3, r3, #4
 8022122:	f89c e000 	ldrb.w	lr, [ip]
 8022126:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802212a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802212e:	eba3 030a 	sub.w	r3, r3, sl
 8022132:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022134:	b289      	uxth	r1, r1
 8022136:	b29b      	uxth	r3, r3
 8022138:	eba9 0901 	sub.w	r9, r9, r1
 802213c:	fb03 fe0e 	mul.w	lr, r3, lr
 8022140:	fa1f f989 	uxth.w	r9, r9
 8022144:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022148:	f892 b000 	ldrb.w	fp, [r2]
 802214c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022150:	f890 b000 	ldrb.w	fp, [r0]
 8022154:	fb0a ee0b 	mla	lr, sl, fp, lr
 8022158:	f897 b000 	ldrb.w	fp, [r7]
 802215c:	fb1b fb04 	smulbb	fp, fp, r4
 8022160:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022164:	fb0e be06 	mla	lr, lr, r6, fp
 8022168:	fa1f fe8e 	uxth.w	lr, lr
 802216c:	f10e 0b01 	add.w	fp, lr, #1
 8022170:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8022174:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022178:	f887 b000 	strb.w	fp, [r7]
 802217c:	f89c e001 	ldrb.w	lr, [ip, #1]
 8022180:	f898 b001 	ldrb.w	fp, [r8, #1]
 8022184:	fb03 fe0e 	mul.w	lr, r3, lr
 8022188:	fb09 ee0b 	mla	lr, r9, fp, lr
 802218c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022190:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022194:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022198:	fb0a ee0b 	mla	lr, sl, fp, lr
 802219c:	f897 b001 	ldrb.w	fp, [r7, #1]
 80221a0:	fb1b fb04 	smulbb	fp, fp, r4
 80221a4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80221a8:	fb0e be06 	mla	lr, lr, r6, fp
 80221ac:	fa1f fe8e 	uxth.w	lr, lr
 80221b0:	f10e 0b01 	add.w	fp, lr, #1
 80221b4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80221b8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80221bc:	f887 e001 	strb.w	lr, [r7, #1]
 80221c0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80221c4:	f898 e002 	ldrb.w	lr, [r8, #2]
 80221c8:	fb03 f30c 	mul.w	r3, r3, ip
 80221cc:	fb09 330e 	mla	r3, r9, lr, r3
 80221d0:	f892 e002 	ldrb.w	lr, [r2, #2]
 80221d4:	7882      	ldrb	r2, [r0, #2]
 80221d6:	fb01 310e 	mla	r1, r1, lr, r3
 80221da:	fb0a 1a02 	mla	sl, sl, r2, r1
 80221de:	78b9      	ldrb	r1, [r7, #2]
 80221e0:	fb11 f104 	smulbb	r1, r1, r4
 80221e4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80221e8:	fb0a 1606 	mla	r6, sl, r6, r1
 80221ec:	b2b6      	uxth	r6, r6
 80221ee:	1c73      	adds	r3, r6, #1
 80221f0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80221f4:	1236      	asrs	r6, r6, #8
 80221f6:	70be      	strb	r6, [r7, #2]
 80221f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80221fa:	3703      	adds	r7, #3
 80221fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80221fe:	4413      	add	r3, r2
 8022200:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022202:	9327      	str	r3, [sp, #156]	; 0x9c
 8022204:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022206:	4413      	add	r3, r2
 8022208:	9328      	str	r3, [sp, #160]	; 0xa0
 802220a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802220c:	3b01      	subs	r3, #1
 802220e:	9311      	str	r3, [sp, #68]	; 0x44
 8022210:	e741      	b.n	8022096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8022212:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022214:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022216:	4413      	add	r3, r2
 8022218:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802221a:	9327      	str	r3, [sp, #156]	; 0x9c
 802221c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802221e:	4413      	add	r3, r2
 8022220:	9328      	str	r3, [sp, #160]	; 0xa0
 8022222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022224:	3b01      	subs	r3, #1
 8022226:	930a      	str	r3, [sp, #40]	; 0x28
 8022228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802222a:	3303      	adds	r3, #3
 802222c:	930b      	str	r3, [sp, #44]	; 0x2c
 802222e:	e6e6      	b.n	8021ffe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022230:	f47f aef8 	bne.w	8022024 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8022234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022236:	2b00      	cmp	r3, #0
 8022238:	f340 811d 	ble.w	8022476 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802223c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022240:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022242:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022246:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802224a:	eef0 6a48 	vmov.f32	s13, s16
 802224e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022252:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022256:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802225a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 802225e:	eef0 6a68 	vmov.f32	s13, s17
 8022262:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022266:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802226a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802226e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022272:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022276:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802227a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802227e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022282:	ee18 2a10 	vmov	r2, s16
 8022286:	eeb0 8a47 	vmov.f32	s16, s14
 802228a:	fb92 f3f3 	sdiv	r3, r2, r3
 802228e:	ee18 2a90 	vmov	r2, s17
 8022292:	9329      	str	r3, [sp, #164]	; 0xa4
 8022294:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022296:	eef0 8a67 	vmov.f32	s17, s15
 802229a:	fb92 f3f3 	sdiv	r3, r2, r3
 802229e:	932a      	str	r3, [sp, #168]	; 0xa8
 80222a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80222a4:	3b01      	subs	r3, #1
 80222a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80222a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80222aa:	bf08      	it	eq
 80222ac:	4613      	moveq	r3, r2
 80222ae:	930a      	str	r3, [sp, #40]	; 0x28
 80222b0:	e69e      	b.n	8021ff0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80222b2:	b151      	cbz	r1, 80222ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80222b4:	5d52      	ldrb	r2, [r2, r5]
 80222b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222bc:	4402      	add	r2, r0
 80222be:	4640      	mov	r0, r8
 80222c0:	46c4      	mov	ip, r8
 80222c2:	e724      	b.n	802210e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80222c4:	4640      	mov	r0, r8
 80222c6:	4642      	mov	r2, r8
 80222c8:	e721      	b.n	802210e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80222ca:	4640      	mov	r0, r8
 80222cc:	4642      	mov	r2, r8
 80222ce:	e7f7      	b.n	80222c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 80222d0:	1c46      	adds	r6, r0, #1
 80222d2:	d191      	bne.n	80221f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80222d4:	4285      	cmp	r5, r0
 80222d6:	dd8f      	ble.n	80221f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80222d8:	1c54      	adds	r4, r2, #1
 80222da:	db8d      	blt.n	80221f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80222dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80222de:	4294      	cmp	r4, r2
 80222e0:	dd8a      	ble.n	80221f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80222e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80222e4:	9002      	str	r0, [sp, #8]
 80222e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80222e8:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80222ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80222f0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80222f4:	e9cd 5300 	strd	r5, r3, [sp]
 80222f8:	4639      	mov	r1, r7
 80222fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222fc:	f7ff fd52 	bl	8021da4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8022300:	e77a      	b.n	80221f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022302:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022304:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022306:	1410      	asrs	r0, r2, #16
 8022308:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802230c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802230e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022310:	1412      	asrs	r2, r2, #16
 8022312:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022316:	fb05 2000 	mla	r0, r5, r0, r2
 802231a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802231c:	f814 8000 	ldrb.w	r8, [r4, r0]
 8022320:	4402      	add	r2, r0
 8022322:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022324:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022328:	eb00 0708 	add.w	r7, r0, r8
 802232c:	2b00      	cmp	r3, #0
 802232e:	f000 8093 	beq.w	8022458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8022332:	7856      	ldrb	r6, [r2, #1]
 8022334:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022338:	4406      	add	r6, r0
 802233a:	2900      	cmp	r1, #0
 802233c:	f000 8095 	beq.w	802246a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8022340:	1950      	adds	r0, r2, r5
 8022342:	5d52      	ldrb	r2, [r2, r5]
 8022344:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022346:	7840      	ldrb	r0, [r0, #1]
 8022348:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802234c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022350:	4422      	add	r2, r4
 8022352:	4420      	add	r0, r4
 8022354:	b29b      	uxth	r3, r3
 8022356:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022358:	b289      	uxth	r1, r1
 802235a:	f10c 0c03 	add.w	ip, ip, #3
 802235e:	f814 b008 	ldrb.w	fp, [r4, r8]
 8022362:	fb03 f901 	mul.w	r9, r3, r1
 8022366:	011b      	lsls	r3, r3, #4
 8022368:	f896 8000 	ldrb.w	r8, [r6]
 802236c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022370:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022374:	eba3 0309 	sub.w	r3, r3, r9
 8022378:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802237a:	b289      	uxth	r1, r1
 802237c:	b29b      	uxth	r3, r3
 802237e:	ebae 0e01 	sub.w	lr, lr, r1
 8022382:	fb03 f808 	mul.w	r8, r3, r8
 8022386:	fa1f fe8e 	uxth.w	lr, lr
 802238a:	fb0e 880b 	mla	r8, lr, fp, r8
 802238e:	f892 b000 	ldrb.w	fp, [r2]
 8022392:	fb01 880b 	mla	r8, r1, fp, r8
 8022396:	f890 b000 	ldrb.w	fp, [r0]
 802239a:	fb09 880b 	mla	r8, r9, fp, r8
 802239e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 80223a2:	fb1b fb04 	smulbb	fp, fp, r4
 80223a6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80223aa:	fb08 b80a 	mla	r8, r8, sl, fp
 80223ae:	fa1f f888 	uxth.w	r8, r8
 80223b2:	f108 0b01 	add.w	fp, r8, #1
 80223b6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80223ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80223be:	f80c 8c06 	strb.w	r8, [ip, #-6]
 80223c2:	f896 8001 	ldrb.w	r8, [r6, #1]
 80223c6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80223ca:	fb03 f808 	mul.w	r8, r3, r8
 80223ce:	fb0e 880b 	mla	r8, lr, fp, r8
 80223d2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80223d6:	fb01 880b 	mla	r8, r1, fp, r8
 80223da:	f890 b001 	ldrb.w	fp, [r0, #1]
 80223de:	fb09 880b 	mla	r8, r9, fp, r8
 80223e2:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 80223e6:	fb1b fb04 	smulbb	fp, fp, r4
 80223ea:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80223ee:	fb08 b80a 	mla	r8, r8, sl, fp
 80223f2:	fa1f f888 	uxth.w	r8, r8
 80223f6:	f108 0b01 	add.w	fp, r8, #1
 80223fa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80223fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022402:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8022406:	78b6      	ldrb	r6, [r6, #2]
 8022408:	78bf      	ldrb	r7, [r7, #2]
 802240a:	4373      	muls	r3, r6
 802240c:	7896      	ldrb	r6, [r2, #2]
 802240e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022410:	fb0e 3307 	mla	r3, lr, r7, r3
 8022414:	fb01 3306 	mla	r3, r1, r6, r3
 8022418:	7886      	ldrb	r6, [r0, #2]
 802241a:	fb09 3906 	mla	r9, r9, r6, r3
 802241e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8022422:	fb13 f304 	smulbb	r3, r3, r4
 8022426:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802242a:	fb09 390a 	mla	r9, r9, sl, r3
 802242e:	fa1f f989 	uxth.w	r9, r9
 8022432:	f109 0301 	add.w	r3, r9, #1
 8022436:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802243a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802243c:	4413      	add	r3, r2
 802243e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022440:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022444:	9327      	str	r3, [sp, #156]	; 0x9c
 8022446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022448:	f80c 9c04 	strb.w	r9, [ip, #-4]
 802244c:	4413      	add	r3, r2
 802244e:	9328      	str	r3, [sp, #160]	; 0xa0
 8022450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022452:	3b01      	subs	r3, #1
 8022454:	9311      	str	r3, [sp, #68]	; 0x44
 8022456:	e601      	b.n	802205c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022458:	b151      	cbz	r1, 8022470 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 802245a:	5d52      	ldrb	r2, [r2, r5]
 802245c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802245e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022462:	4402      	add	r2, r0
 8022464:	4638      	mov	r0, r7
 8022466:	463e      	mov	r6, r7
 8022468:	e774      	b.n	8022354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 802246a:	4638      	mov	r0, r7
 802246c:	463a      	mov	r2, r7
 802246e:	e771      	b.n	8022354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8022470:	4638      	mov	r0, r7
 8022472:	463a      	mov	r2, r7
 8022474:	e7f7      	b.n	8022466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022476:	b015      	add	sp, #84	; 0x54
 8022478:	ecbd 8b08 	vpop	{d8-d11}
 802247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022480 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8022480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022484:	780d      	ldrb	r5, [r1, #0]
 8022486:	f891 9002 	ldrb.w	r9, [r1, #2]
 802248a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 802248e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8022492:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8022496:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 802249a:	f891 9001 	ldrb.w	r9, [r1, #1]
 802249e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80224a2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80224a6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80224aa:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80224ae:	9501      	str	r5, [sp, #4]
 80224b0:	fb06 470c 	mla	r7, r6, ip, r4
 80224b4:	2e00      	cmp	r6, #0
 80224b6:	eb02 0e07 	add.w	lr, r2, r7
 80224ba:	db46      	blt.n	802254a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80224bc:	45b0      	cmp	r8, r6
 80224be:	dd44      	ble.n	802254a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80224c0:	2c00      	cmp	r4, #0
 80224c2:	db40      	blt.n	8022546 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80224c4:	45a4      	cmp	ip, r4
 80224c6:	dd3e      	ble.n	8022546 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80224c8:	5dd7      	ldrb	r7, [r2, r7]
 80224ca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80224ce:	441f      	add	r7, r3
 80224d0:	1c62      	adds	r2, r4, #1
 80224d2:	d43d      	bmi.n	8022550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80224d4:	4594      	cmp	ip, r2
 80224d6:	dd3b      	ble.n	8022550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80224d8:	f1ba 0f00 	cmp.w	sl, #0
 80224dc:	d038      	beq.n	8022550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80224de:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80224e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80224e6:	441d      	add	r5, r3
 80224e8:	3601      	adds	r6, #1
 80224ea:	d435      	bmi.n	8022558 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80224ec:	45b0      	cmp	r8, r6
 80224ee:	dd33      	ble.n	8022558 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80224f0:	b390      	cbz	r0, 8022558 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80224f2:	2c00      	cmp	r4, #0
 80224f4:	db2e      	blt.n	8022554 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80224f6:	45a4      	cmp	ip, r4
 80224f8:	dd2c      	ble.n	8022554 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80224fa:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80224fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022502:	441e      	add	r6, r3
 8022504:	1c62      	adds	r2, r4, #1
 8022506:	d42a      	bmi.n	802255e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8022508:	4594      	cmp	ip, r2
 802250a:	dd28      	ble.n	802255e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802250c:	f1ba 0f00 	cmp.w	sl, #0
 8022510:	d025      	beq.n	802255e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8022512:	44f4      	add	ip, lr
 8022514:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022518:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802251c:	4413      	add	r3, r2
 802251e:	f1ba 0f0f 	cmp.w	sl, #15
 8022522:	f897 8000 	ldrb.w	r8, [r7]
 8022526:	f895 9000 	ldrb.w	r9, [r5]
 802252a:	f896 e000 	ldrb.w	lr, [r6]
 802252e:	f893 c000 	ldrb.w	ip, [r3]
 8022532:	d801      	bhi.n	8022538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8022534:	280f      	cmp	r0, #15
 8022536:	d914      	bls.n	8022562 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8022538:	4b29      	ldr	r3, [pc, #164]	; (80225e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 802253a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802253e:	4a29      	ldr	r2, [pc, #164]	; (80225e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8022540:	4829      	ldr	r0, [pc, #164]	; (80225e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8022542:	f005 ff39 	bl	80283b8 <__assert_func>
 8022546:	af01      	add	r7, sp, #4
 8022548:	e7c2      	b.n	80224d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 802254a:	ad01      	add	r5, sp, #4
 802254c:	462f      	mov	r7, r5
 802254e:	e7cb      	b.n	80224e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022550:	ad01      	add	r5, sp, #4
 8022552:	e7c9      	b.n	80224e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022554:	ae01      	add	r6, sp, #4
 8022556:	e7d5      	b.n	8022504 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8022558:	ab01      	add	r3, sp, #4
 802255a:	461e      	mov	r6, r3
 802255c:	e7df      	b.n	802251e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802255e:	ab01      	add	r3, sp, #4
 8022560:	e7dd      	b.n	802251e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8022562:	fa1f f48a 	uxth.w	r4, sl
 8022566:	b280      	uxth	r0, r0
 8022568:	fb04 fa00 	mul.w	sl, r4, r0
 802256c:	0124      	lsls	r4, r4, #4
 802256e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022572:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8022576:	b282      	uxth	r2, r0
 8022578:	eba4 000a 	sub.w	r0, r4, sl
 802257c:	ebab 0b02 	sub.w	fp, fp, r2
 8022580:	b280      	uxth	r0, r0
 8022582:	fa1f fb8b 	uxth.w	fp, fp
 8022586:	fb00 f909 	mul.w	r9, r0, r9
 802258a:	fb0b 9808 	mla	r8, fp, r8, r9
 802258e:	fb02 8e0e 	mla	lr, r2, lr, r8
 8022592:	fb0a ec0c 	mla	ip, sl, ip, lr
 8022596:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802259a:	f881 c000 	strb.w	ip, [r1]
 802259e:	786c      	ldrb	r4, [r5, #1]
 80225a0:	f897 c001 	ldrb.w	ip, [r7, #1]
 80225a4:	4344      	muls	r4, r0
 80225a6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80225aa:	7874      	ldrb	r4, [r6, #1]
 80225ac:	fb02 cc04 	mla	ip, r2, r4, ip
 80225b0:	785c      	ldrb	r4, [r3, #1]
 80225b2:	fb0a c404 	mla	r4, sl, r4, ip
 80225b6:	1224      	asrs	r4, r4, #8
 80225b8:	704c      	strb	r4, [r1, #1]
 80225ba:	78ad      	ldrb	r5, [r5, #2]
 80225bc:	78bc      	ldrb	r4, [r7, #2]
 80225be:	4368      	muls	r0, r5
 80225c0:	fb0b 0b04 	mla	fp, fp, r4, r0
 80225c4:	78b0      	ldrb	r0, [r6, #2]
 80225c6:	fb02 b000 	mla	r0, r2, r0, fp
 80225ca:	789a      	ldrb	r2, [r3, #2]
 80225cc:	fb0a 0a02 	mla	sl, sl, r2, r0
 80225d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80225d4:	f881 a002 	strb.w	sl, [r1, #2]
 80225d8:	b003      	add	sp, #12
 80225da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225de:	bf00      	nop
 80225e0:	0802d527 	.word	0x0802d527
 80225e4:	0802da1e 	.word	0x0802da1e
 80225e8:	0802d5f0 	.word	0x0802d5f0

080225ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80225ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225f0:	ed2d 8b0a 	vpush	{d8-d12}
 80225f4:	b08f      	sub	sp, #60	; 0x3c
 80225f6:	eeb0 aa40 	vmov.f32	s20, s0
 80225fa:	eef0 9a60 	vmov.f32	s19, s1
 80225fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8022600:	eeb0 9a41 	vmov.f32	s18, s2
 8022604:	9307      	str	r3, [sp, #28]
 8022606:	eeb0 8a62 	vmov.f32	s16, s5
 802260a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 802260e:	eef0 8a43 	vmov.f32	s17, s6
 8022612:	900d      	str	r0, [sp, #52]	; 0x34
 8022614:	eeb0 ca44 	vmov.f32	s24, s8
 8022618:	6860      	ldr	r0, [r4, #4]
 802261a:	eef0 ba64 	vmov.f32	s23, s9
 802261e:	9309      	str	r3, [sp, #36]	; 0x24
 8022620:	eeb0 ba45 	vmov.f32	s22, s10
 8022624:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022628:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 802262c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8022630:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022634:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022636:	fb00 1303 	mla	r3, r0, r3, r1
 802263a:	6821      	ldr	r1, [r4, #0]
 802263c:	6854      	ldr	r4, [r2, #4]
 802263e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022642:	3404      	adds	r4, #4
 8022644:	18cb      	adds	r3, r1, r3
 8022646:	9308      	str	r3, [sp, #32]
 8022648:	6813      	ldr	r3, [r2, #0]
 802264a:	930a      	str	r3, [sp, #40]	; 0x28
 802264c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802264e:	2b00      	cmp	r3, #0
 8022650:	dc03      	bgt.n	802265a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022654:	2b00      	cmp	r3, #0
 8022656:	f340 81d2 	ble.w	80229fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 802265a:	9b07      	ldr	r3, [sp, #28]
 802265c:	2b00      	cmp	r3, #0
 802265e:	f340 80e3 	ble.w	8022828 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8022662:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022664:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022666:	1412      	asrs	r2, r2, #16
 8022668:	ea4f 4323 	mov.w	r3, r3, asr #16
 802266c:	d42f      	bmi.n	80226ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802266e:	1c51      	adds	r1, r2, #1
 8022670:	428d      	cmp	r5, r1
 8022672:	dd2f      	ble.n	80226d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022674:	2b00      	cmp	r3, #0
 8022676:	db2d      	blt.n	80226d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022678:	1c59      	adds	r1, r3, #1
 802267a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802267c:	4288      	cmp	r0, r1
 802267e:	dd29      	ble.n	80226d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022680:	9b07      	ldr	r3, [sp, #28]
 8022682:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022684:	3b01      	subs	r3, #1
 8022686:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8022688:	fb02 1203 	mla	r2, r2, r3, r1
 802268c:	1412      	asrs	r2, r2, #16
 802268e:	d42b      	bmi.n	80226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022690:	3201      	adds	r2, #1
 8022692:	4295      	cmp	r5, r2
 8022694:	dd28      	ble.n	80226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022696:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022698:	9924      	ldr	r1, [sp, #144]	; 0x90
 802269a:	fb02 1303 	mla	r3, r2, r3, r1
 802269e:	141b      	asrs	r3, r3, #16
 80226a0:	d422      	bmi.n	80226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80226a2:	3301      	adds	r3, #1
 80226a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80226a6:	429a      	cmp	r2, r3
 80226a8:	dd1e      	ble.n	80226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80226aa:	9b08      	ldr	r3, [sp, #32]
 80226ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80226b0:	f103 0803 	add.w	r8, r3, #3
 80226b4:	f1ba 0f00 	cmp.w	sl, #0
 80226b8:	f300 8119 	bgt.w	80228ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 80226bc:	9b07      	ldr	r3, [sp, #28]
 80226be:	9a08      	ldr	r2, [sp, #32]
 80226c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80226c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80226c8:	441a      	add	r2, r3
 80226ca:	9208      	str	r2, [sp, #32]
 80226cc:	e0ae      	b.n	802282c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 80226ce:	1c51      	adds	r1, r2, #1
 80226d0:	f040 809b 	bne.w	802280a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80226d4:	42aa      	cmp	r2, r5
 80226d6:	f280 8098 	bge.w	802280a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80226da:	1c5a      	adds	r2, r3, #1
 80226dc:	f2c0 8095 	blt.w	802280a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80226e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80226e2:	4293      	cmp	r3, r2
 80226e4:	f280 8091 	bge.w	802280a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80226e8:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80226ec:	f1bb 0f00 	cmp.w	fp, #0
 80226f0:	dde4      	ble.n	80226bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80226f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80226f6:	141a      	asrs	r2, r3, #16
 80226f8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80226fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80226fc:	1400      	asrs	r0, r0, #16
 80226fe:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8022702:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022706:	f100 80dc 	bmi.w	80228c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 802270a:	1c47      	adds	r7, r0, #1
 802270c:	42bd      	cmp	r5, r7
 802270e:	f340 80da 	ble.w	80228c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022712:	2a00      	cmp	r2, #0
 8022714:	f2c0 80d7 	blt.w	80228c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022718:	f102 0c01 	add.w	ip, r2, #1
 802271c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802271e:	4567      	cmp	r7, ip
 8022720:	f340 80d1 	ble.w	80228c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022724:	fb02 0005 	mla	r0, r2, r5, r0
 8022728:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802272a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802272c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8022730:	4402      	add	r2, r0
 8022732:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022736:	eb04 0c08 	add.w	ip, r4, r8
 802273a:	2b00      	cmp	r3, #0
 802273c:	f000 80b3 	beq.w	80228a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8022740:	7857      	ldrb	r7, [r2, #1]
 8022742:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022746:	4427      	add	r7, r4
 8022748:	2900      	cmp	r1, #0
 802274a:	f000 80b4 	beq.w	80228b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 802274e:	1950      	adds	r0, r2, r5
 8022750:	5d52      	ldrb	r2, [r2, r5]
 8022752:	7840      	ldrb	r0, [r0, #1]
 8022754:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022758:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802275c:	4422      	add	r2, r4
 802275e:	4420      	add	r0, r4
 8022760:	b29b      	uxth	r3, r3
 8022762:	f814 a008 	ldrb.w	sl, [r4, r8]
 8022766:	b289      	uxth	r1, r1
 8022768:	f897 8000 	ldrb.w	r8, [r7]
 802276c:	fb03 f901 	mul.w	r9, r3, r1
 8022770:	011b      	lsls	r3, r3, #4
 8022772:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022776:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802277a:	eba3 0309 	sub.w	r3, r3, r9
 802277e:	b289      	uxth	r1, r1
 8022780:	b29b      	uxth	r3, r3
 8022782:	ebae 0e01 	sub.w	lr, lr, r1
 8022786:	fb03 f808 	mul.w	r8, r3, r8
 802278a:	fa1f fe8e 	uxth.w	lr, lr
 802278e:	fb0e 880a 	mla	r8, lr, sl, r8
 8022792:	f892 a000 	ldrb.w	sl, [r2]
 8022796:	fb01 880a 	mla	r8, r1, sl, r8
 802279a:	f890 a000 	ldrb.w	sl, [r0]
 802279e:	fb09 880a 	mla	r8, r9, sl, r8
 80227a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80227a6:	f886 8000 	strb.w	r8, [r6]
 80227aa:	f897 8001 	ldrb.w	r8, [r7, #1]
 80227ae:	f89c a001 	ldrb.w	sl, [ip, #1]
 80227b2:	fb03 f808 	mul.w	r8, r3, r8
 80227b6:	fb0e 880a 	mla	r8, lr, sl, r8
 80227ba:	f892 a001 	ldrb.w	sl, [r2, #1]
 80227be:	fb01 880a 	mla	r8, r1, sl, r8
 80227c2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80227c6:	fb09 880a 	mla	r8, r9, sl, r8
 80227ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80227ce:	f886 8001 	strb.w	r8, [r6, #1]
 80227d2:	78bf      	ldrb	r7, [r7, #2]
 80227d4:	f89c c002 	ldrb.w	ip, [ip, #2]
 80227d8:	437b      	muls	r3, r7
 80227da:	7892      	ldrb	r2, [r2, #2]
 80227dc:	fb0e 330c 	mla	r3, lr, ip, r3
 80227e0:	fb01 3102 	mla	r1, r1, r2, r3
 80227e4:	7882      	ldrb	r2, [r0, #2]
 80227e6:	fb09 1902 	mla	r9, r9, r2, r1
 80227ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80227ee:	f886 9002 	strb.w	r9, [r6, #2]
 80227f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80227f4:	3603      	adds	r6, #3
 80227f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80227f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80227fc:	4413      	add	r3, r2
 80227fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022800:	9323      	str	r3, [sp, #140]	; 0x8c
 8022802:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022804:	4413      	add	r3, r2
 8022806:	9324      	str	r3, [sp, #144]	; 0x90
 8022808:	e770      	b.n	80226ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802280a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802280c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802280e:	4413      	add	r3, r2
 8022810:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022812:	9323      	str	r3, [sp, #140]	; 0x8c
 8022814:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022816:	4413      	add	r3, r2
 8022818:	9324      	str	r3, [sp, #144]	; 0x90
 802281a:	9b07      	ldr	r3, [sp, #28]
 802281c:	3b01      	subs	r3, #1
 802281e:	9307      	str	r3, [sp, #28]
 8022820:	9b08      	ldr	r3, [sp, #32]
 8022822:	3303      	adds	r3, #3
 8022824:	9308      	str	r3, [sp, #32]
 8022826:	e718      	b.n	802265a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022828:	f47f af2a 	bne.w	8022680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802282c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802282e:	2b00      	cmp	r3, #0
 8022830:	f340 80e5 	ble.w	80229fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8022834:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022838:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802283a:	ee79 9aab 	vadd.f32	s19, s19, s23
 802283e:	eef0 6a48 	vmov.f32	s13, s16
 8022842:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022846:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802284a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802284e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8022852:	eef0 6a68 	vmov.f32	s13, s17
 8022856:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802285a:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 802285e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022862:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022866:	ee37 8a48 	vsub.f32	s16, s14, s16
 802286a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802286e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022872:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022876:	ee18 2a10 	vmov	r2, s16
 802287a:	eeb0 8a47 	vmov.f32	s16, s14
 802287e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022882:	ee18 2a90 	vmov	r2, s17
 8022886:	9325      	str	r3, [sp, #148]	; 0x94
 8022888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802288a:	eef0 8a67 	vmov.f32	s17, s15
 802288e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022892:	9326      	str	r3, [sp, #152]	; 0x98
 8022894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022898:	3b01      	subs	r3, #1
 802289a:	930b      	str	r3, [sp, #44]	; 0x2c
 802289c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802289e:	bf08      	it	eq
 80228a0:	4613      	moveq	r3, r2
 80228a2:	9307      	str	r3, [sp, #28]
 80228a4:	e6d2      	b.n	802264c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80228a6:	b149      	cbz	r1, 80228bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80228a8:	5d52      	ldrb	r2, [r2, r5]
 80228aa:	4660      	mov	r0, ip
 80228ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80228b0:	4422      	add	r2, r4
 80228b2:	4667      	mov	r7, ip
 80228b4:	e754      	b.n	8022760 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80228b6:	4660      	mov	r0, ip
 80228b8:	4662      	mov	r2, ip
 80228ba:	e751      	b.n	8022760 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 80228bc:	4660      	mov	r0, ip
 80228be:	4662      	mov	r2, ip
 80228c0:	e7f7      	b.n	80228b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 80228c2:	1c47      	adds	r7, r0, #1
 80228c4:	d195      	bne.n	80227f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80228c6:	4285      	cmp	r5, r0
 80228c8:	dd93      	ble.n	80227f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80228ca:	1c57      	adds	r7, r2, #1
 80228cc:	db91      	blt.n	80227f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80228ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80228d0:	4297      	cmp	r7, r2
 80228d2:	dd8e      	ble.n	80227f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80228d4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80228d8:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80228dc:	e9cd 5700 	strd	r5, r7, [sp]
 80228e0:	4623      	mov	r3, r4
 80228e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228e4:	4631      	mov	r1, r6
 80228e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80228e8:	f7ff fdca 	bl	8022480 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80228ec:	e781      	b.n	80227f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80228ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80228f0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80228f2:	1410      	asrs	r0, r2, #16
 80228f4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80228f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80228fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80228fc:	1412      	asrs	r2, r2, #16
 80228fe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022902:	fb05 2000 	mla	r0, r5, r0, r2
 8022906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022908:	f816 e000 	ldrb.w	lr, [r6, r0]
 802290c:	4402      	add	r2, r0
 802290e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022912:	eb04 070e 	add.w	r7, r4, lr
 8022916:	2b00      	cmp	r3, #0
 8022918:	d063      	beq.n	80229e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 802291a:	7856      	ldrb	r6, [r2, #1]
 802291c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022920:	4426      	add	r6, r4
 8022922:	2900      	cmp	r1, #0
 8022924:	d065      	beq.n	80229f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022926:	1950      	adds	r0, r2, r5
 8022928:	5d52      	ldrb	r2, [r2, r5]
 802292a:	7840      	ldrb	r0, [r0, #1]
 802292c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022930:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022934:	4422      	add	r2, r4
 8022936:	4420      	add	r0, r4
 8022938:	b29b      	uxth	r3, r3
 802293a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802293e:	b289      	uxth	r1, r1
 8022940:	f896 e000 	ldrb.w	lr, [r6]
 8022944:	f108 0803 	add.w	r8, r8, #3
 8022948:	f10a 3aff 	add.w	sl, sl, #4294967295
 802294c:	fb03 f901 	mul.w	r9, r3, r1
 8022950:	011b      	lsls	r3, r3, #4
 8022952:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022956:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802295a:	eba3 0309 	sub.w	r3, r3, r9
 802295e:	b289      	uxth	r1, r1
 8022960:	b29b      	uxth	r3, r3
 8022962:	ebac 0c01 	sub.w	ip, ip, r1
 8022966:	fb03 fe0e 	mul.w	lr, r3, lr
 802296a:	fa1f fc8c 	uxth.w	ip, ip
 802296e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022972:	f892 b000 	ldrb.w	fp, [r2]
 8022976:	fb01 ee0b 	mla	lr, r1, fp, lr
 802297a:	f890 b000 	ldrb.w	fp, [r0]
 802297e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022982:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022986:	f808 ec06 	strb.w	lr, [r8, #-6]
 802298a:	f896 e001 	ldrb.w	lr, [r6, #1]
 802298e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022992:	fb03 fe0e 	mul.w	lr, r3, lr
 8022996:	fb0c ee0b 	mla	lr, ip, fp, lr
 802299a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802299e:	fb01 ee0b 	mla	lr, r1, fp, lr
 80229a2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80229a6:	fb09 ee0b 	mla	lr, r9, fp, lr
 80229aa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80229ae:	f808 ec05 	strb.w	lr, [r8, #-5]
 80229b2:	78b6      	ldrb	r6, [r6, #2]
 80229b4:	78bf      	ldrb	r7, [r7, #2]
 80229b6:	4373      	muls	r3, r6
 80229b8:	7896      	ldrb	r6, [r2, #2]
 80229ba:	7882      	ldrb	r2, [r0, #2]
 80229bc:	fb0c 3307 	mla	r3, ip, r7, r3
 80229c0:	fb01 3306 	mla	r3, r1, r6, r3
 80229c4:	fb09 3902 	mla	r9, r9, r2, r3
 80229c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80229cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80229d0:	4413      	add	r3, r2
 80229d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80229d4:	f808 9c04 	strb.w	r9, [r8, #-4]
 80229d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80229da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229dc:	4413      	add	r3, r2
 80229de:	9324      	str	r3, [sp, #144]	; 0x90
 80229e0:	e668      	b.n	80226b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 80229e2:	b149      	cbz	r1, 80229f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 80229e4:	5d52      	ldrb	r2, [r2, r5]
 80229e6:	4638      	mov	r0, r7
 80229e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229ec:	4422      	add	r2, r4
 80229ee:	463e      	mov	r6, r7
 80229f0:	e7a2      	b.n	8022938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80229f2:	4638      	mov	r0, r7
 80229f4:	463a      	mov	r2, r7
 80229f6:	e79f      	b.n	8022938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80229f8:	4638      	mov	r0, r7
 80229fa:	463a      	mov	r2, r7
 80229fc:	e7f7      	b.n	80229ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 80229fe:	b00f      	add	sp, #60	; 0x3c
 8022a00:	ecbd 8b0a 	vpop	{d8-d12}
 8022a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8022a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a0c:	b087      	sub	sp, #28
 8022a0e:	7888      	ldrb	r0, [r1, #2]
 8022a10:	9002      	str	r0, [sp, #8]
 8022a12:	7848      	ldrb	r0, [r1, #1]
 8022a14:	9e02      	ldr	r6, [sp, #8]
 8022a16:	9003      	str	r0, [sp, #12]
 8022a18:	7808      	ldrb	r0, [r1, #0]
 8022a1a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8022a1e:	9004      	str	r0, [sp, #16]
 8022a20:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022a24:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8022a28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022a2c:	9e03      	ldr	r6, [sp, #12]
 8022a2e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8022a32:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8022a36:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8022a3a:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8022a3e:	fb04 7508 	mla	r5, r4, r8, r7
 8022a42:	2c00      	cmp	r4, #0
 8022a44:	eb02 0905 	add.w	r9, r2, r5
 8022a48:	db45      	blt.n	8022ad6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022a4a:	45a2      	cmp	sl, r4
 8022a4c:	dd43      	ble.n	8022ad6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022a4e:	2f00      	cmp	r7, #0
 8022a50:	db3f      	blt.n	8022ad2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022a52:	45b8      	cmp	r8, r7
 8022a54:	dd3d      	ble.n	8022ad2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022a56:	5d52      	ldrb	r2, [r2, r5]
 8022a58:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022a5c:	1c7a      	adds	r2, r7, #1
 8022a5e:	d43d      	bmi.n	8022adc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022a60:	4590      	cmp	r8, r2
 8022a62:	dd3b      	ble.n	8022adc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022a64:	f1bc 0f00 	cmp.w	ip, #0
 8022a68:	d038      	beq.n	8022adc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022a6a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022a6e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022a72:	3401      	adds	r4, #1
 8022a74:	d436      	bmi.n	8022ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022a76:	45a2      	cmp	sl, r4
 8022a78:	dd34      	ble.n	8022ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022a7a:	f1be 0f00 	cmp.w	lr, #0
 8022a7e:	d031      	beq.n	8022ae4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022a80:	2f00      	cmp	r7, #0
 8022a82:	db2d      	blt.n	8022ae0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022a84:	45b8      	cmp	r8, r7
 8022a86:	dd2b      	ble.n	8022ae0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022a88:	f819 2008 	ldrb.w	r2, [r9, r8]
 8022a8c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022a90:	3701      	adds	r7, #1
 8022a92:	d409      	bmi.n	8022aa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022a94:	45b8      	cmp	r8, r7
 8022a96:	dd07      	ble.n	8022aa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022a98:	f1bc 0f00 	cmp.w	ip, #0
 8022a9c:	d004      	beq.n	8022aa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022a9e:	44c8      	add	r8, r9
 8022aa0:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022aa4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022aa8:	f1bc 0f0f 	cmp.w	ip, #15
 8022aac:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022ab0:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022ab4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022ab8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022abc:	d802      	bhi.n	8022ac4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8022abe:	f1be 0f0f 	cmp.w	lr, #15
 8022ac2:	d911      	bls.n	8022ae8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8022ac4:	4b77      	ldr	r3, [pc, #476]	; (8022ca4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8022ac6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022aca:	4a77      	ldr	r2, [pc, #476]	; (8022ca8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8022acc:	4877      	ldr	r0, [pc, #476]	; (8022cac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8022ace:	f005 fc73 	bl	80283b8 <__assert_func>
 8022ad2:	4606      	mov	r6, r0
 8022ad4:	e7c2      	b.n	8022a5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8022ad6:	4605      	mov	r5, r0
 8022ad8:	4606      	mov	r6, r0
 8022ada:	e7ca      	b.n	8022a72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022adc:	4605      	mov	r5, r0
 8022ade:	e7c8      	b.n	8022a72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022ae0:	4604      	mov	r4, r0
 8022ae2:	e7d5      	b.n	8022a90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8022ae4:	4604      	mov	r4, r0
 8022ae6:	e7df      	b.n	8022aa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022ae8:	fa1f fc8c 	uxth.w	ip, ip
 8022aec:	fa1f f28e 	uxth.w	r2, lr
 8022af0:	fb02 fe0c 	mul.w	lr, r2, ip
 8022af4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022af8:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8022afc:	ebac 070e 	sub.w	r7, ip, lr
 8022b00:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8022b04:	b292      	uxth	r2, r2
 8022b06:	b2bf      	uxth	r7, r7
 8022b08:	1a9b      	subs	r3, r3, r2
 8022b0a:	fb07 fc0a 	mul.w	ip, r7, sl
 8022b0e:	b29b      	uxth	r3, r3
 8022b10:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022b14:	9301      	str	r3, [sp, #4]
 8022b16:	fb02 cc09 	mla	ip, r2, r9, ip
 8022b1a:	fb0e cc08 	mla	ip, lr, r8, ip
 8022b1e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022b22:	9305      	str	r3, [sp, #20]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	f000 80b9 	beq.w	8022c9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8022b2a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022b2e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b32:	fb0b fc0c 	mul.w	ip, fp, ip
 8022b36:	fb0b f606 	mul.w	r6, fp, r6
 8022b3a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022b3e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022b42:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022b46:	44dc      	add	ip, fp
 8022b48:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022b4c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022b50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b54:	fb0a fb0b 	mul.w	fp, sl, fp
 8022b58:	fb0a fa05 	mul.w	sl, sl, r5
 8022b5c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8022b60:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022b64:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8022b68:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022b6c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022b70:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b74:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8022b78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b7c:	0a36      	lsrs	r6, r6, #8
 8022b7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b82:	44dc      	add	ip, fp
 8022b84:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022b88:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022b8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b90:	fb09 fb0b 	mul.w	fp, r9, fp
 8022b94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b98:	fb09 f904 	mul.w	r9, r9, r4
 8022b9c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022ba0:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8022ba4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ba8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022bac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022bb0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022bb4:	fb0c fc07 	mul.w	ip, ip, r7
 8022bb8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022bbc:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8022bc0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022bc4:	445d      	add	r5, fp
 8022bc6:	fb08 f404 	mul.w	r4, r8, r4
 8022bca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022bce:	fb08 f800 	mul.w	r8, r8, r0
 8022bd2:	0a2d      	lsrs	r5, r5, #8
 8022bd4:	0a20      	lsrs	r0, r4, #8
 8022bd6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022bda:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022bde:	fb07 f70a 	mul.w	r7, r7, sl
 8022be2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022be6:	4404      	add	r4, r0
 8022be8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022bec:	0a24      	lsrs	r4, r4, #8
 8022bee:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8022bf2:	9801      	ldr	r0, [sp, #4]
 8022bf4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022bf8:	fb03 cc00 	mla	ip, r3, r0, ip
 8022bfc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022c00:	fb00 7606 	mla	r6, r0, r6, r7
 8022c04:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8022c08:	fb04 cc0e 	mla	ip, r4, lr, ip
 8022c0c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022c10:	b280      	uxth	r0, r0
 8022c12:	9c04      	ldr	r4, [sp, #16]
 8022c14:	fb05 cc02 	mla	ip, r5, r2, ip
 8022c18:	fb0e 6e08 	mla	lr, lr, r8, r6
 8022c1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c20:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022c24:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8022c28:	fb02 ec0c 	mla	ip, r2, ip, lr
 8022c2c:	9a05      	ldr	r2, [sp, #20]
 8022c2e:	4342      	muls	r2, r0
 8022c30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c34:	1c53      	adds	r3, r2, #1
 8022c36:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022c3a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022c3e:	ea45 0c0c 	orr.w	ip, r5, ip
 8022c42:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022c46:	fa5f f28c 	uxtb.w	r2, ip
 8022c4a:	b2db      	uxtb	r3, r3
 8022c4c:	fb14 f403 	smulbb	r4, r4, r3
 8022c50:	fb02 4200 	mla	r2, r2, r0, r4
 8022c54:	b292      	uxth	r2, r2
 8022c56:	1c54      	adds	r4, r2, #1
 8022c58:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022c5c:	9c03      	ldr	r4, [sp, #12]
 8022c5e:	fb14 f403 	smulbb	r4, r4, r3
 8022c62:	1212      	asrs	r2, r2, #8
 8022c64:	700a      	strb	r2, [r1, #0]
 8022c66:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8022c6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022c6e:	fb02 4200 	mla	r2, r2, r0, r4
 8022c72:	b292      	uxth	r2, r2
 8022c74:	1c54      	adds	r4, r2, #1
 8022c76:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022c7a:	1212      	asrs	r2, r2, #8
 8022c7c:	704a      	strb	r2, [r1, #1]
 8022c7e:	9a02      	ldr	r2, [sp, #8]
 8022c80:	fb12 f303 	smulbb	r3, r2, r3
 8022c84:	fb0c 3c00 	mla	ip, ip, r0, r3
 8022c88:	fa1f fc8c 	uxth.w	ip, ip
 8022c8c:	f10c 0301 	add.w	r3, ip, #1
 8022c90:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022c94:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022c98:	f881 c002 	strb.w	ip, [r1, #2]
 8022c9c:	b007      	add	sp, #28
 8022c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ca2:	bf00      	nop
 8022ca4:	0802d527 	.word	0x0802d527
 8022ca8:	0802da1e 	.word	0x0802da1e
 8022cac:	0802d5f0 	.word	0x0802d5f0

08022cb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cb4:	ed2d 8b08 	vpush	{d8-d11}
 8022cb8:	b09b      	sub	sp, #108	; 0x6c
 8022cba:	eeb0 aa40 	vmov.f32	s20, s0
 8022cbe:	eef0 9a60 	vmov.f32	s19, s1
 8022cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8022cc4:	eeb0 9a41 	vmov.f32	s18, s2
 8022cc8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8022ccc:	eeb0 8a62 	vmov.f32	s16, s5
 8022cd0:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8022cd2:	eef0 8a43 	vmov.f32	s17, s6
 8022cd6:	9312      	str	r3, [sp, #72]	; 0x48
 8022cd8:	eef0 ba44 	vmov.f32	s23, s8
 8022cdc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022ce0:	eeb0 ba64 	vmov.f32	s22, s9
 8022ce4:	9019      	str	r0, [sp, #100]	; 0x64
 8022ce6:	eef0 aa45 	vmov.f32	s21, s10
 8022cea:	9114      	str	r1, [sp, #80]	; 0x50
 8022cec:	9317      	str	r3, [sp, #92]	; 0x5c
 8022cee:	6868      	ldr	r0, [r5, #4]
 8022cf0:	9218      	str	r2, [sp, #96]	; 0x60
 8022cf2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022cf4:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8022cf8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022cfc:	fb00 1303 	mla	r3, r0, r3, r1
 8022d00:	6829      	ldr	r1, [r5, #0]
 8022d02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d06:	18cb      	adds	r3, r1, r3
 8022d08:	930d      	str	r3, [sp, #52]	; 0x34
 8022d0a:	6813      	ldr	r3, [r2, #0]
 8022d0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8022d0e:	6853      	ldr	r3, [r2, #4]
 8022d10:	3304      	adds	r3, #4
 8022d12:	9309      	str	r3, [sp, #36]	; 0x24
 8022d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	dc03      	bgt.n	8022d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022d1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	f340 8352 	ble.w	80233c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8022d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d24:	2b00      	cmp	r3, #0
 8022d26:	f340 81a2 	ble.w	802306e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8022d2a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022d2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022d2e:	1412      	asrs	r2, r2, #16
 8022d30:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022d34:	d431      	bmi.n	8022d9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8022d36:	1c51      	adds	r1, r2, #1
 8022d38:	428c      	cmp	r4, r1
 8022d3a:	dd31      	ble.n	8022da0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	db2f      	blt.n	8022da0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022d40:	1c59      	adds	r1, r3, #1
 8022d42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022d44:	4288      	cmp	r0, r1
 8022d46:	dd2b      	ble.n	8022da0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d4a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022d4c:	3b01      	subs	r3, #1
 8022d4e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8022d50:	fb02 1203 	mla	r2, r2, r3, r1
 8022d54:	1412      	asrs	r2, r2, #16
 8022d56:	d42d      	bmi.n	8022db4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d58:	3201      	adds	r2, #1
 8022d5a:	4294      	cmp	r4, r2
 8022d5c:	dd2a      	ble.n	8022db4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d5e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022d60:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022d62:	fb02 1303 	mla	r3, r2, r3, r1
 8022d66:	141b      	asrs	r3, r3, #16
 8022d68:	d424      	bmi.n	8022db4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d6a:	3301      	adds	r3, #1
 8022d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022d6e:	429a      	cmp	r2, r3
 8022d70:	dd20      	ble.n	8022db4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d74:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8022d78:	f103 0e03 	add.w	lr, r3, #3
 8022d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d7e:	9315      	str	r3, [sp, #84]	; 0x54
 8022d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	f300 81de 	bgt.w	8023144 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8022d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022d8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022d90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d94:	441a      	add	r2, r3
 8022d96:	920d      	str	r2, [sp, #52]	; 0x34
 8022d98:	e16b      	b.n	8023072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8022d9a:	1c51      	adds	r1, r2, #1
 8022d9c:	f040 8158 	bne.w	8023050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022da0:	42a2      	cmp	r2, r4
 8022da2:	f280 8155 	bge.w	8023050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022da6:	1c5a      	adds	r2, r3, #1
 8022da8:	f2c0 8152 	blt.w	8023050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022dae:	4293      	cmp	r3, r2
 8022db0:	f280 814e 	bge.w	8023050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022db6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022db8:	9316      	str	r3, [sp, #88]	; 0x58
 8022dba:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8022dbe:	9315      	str	r3, [sp, #84]	; 0x54
 8022dc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022dc2:	2b00      	cmp	r3, #0
 8022dc4:	dde0      	ble.n	8022d88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022dc6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022dc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022dca:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022dce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022dd0:	141b      	asrs	r3, r3, #16
 8022dd2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022dd6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022dd8:	1412      	asrs	r2, r2, #16
 8022dda:	f100 819a 	bmi.w	8023112 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8022dde:	1c55      	adds	r5, r2, #1
 8022de0:	42ac      	cmp	r4, r5
 8022de2:	f340 8198 	ble.w	8023116 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	f2c0 8195 	blt.w	8023116 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022dec:	1c5d      	adds	r5, r3, #1
 8022dee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022df0:	42af      	cmp	r7, r5
 8022df2:	f340 8190 	ble.w	8023116 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022df6:	fb03 2304 	mla	r3, r3, r4, r2
 8022dfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022dfc:	18d5      	adds	r5, r2, r3
 8022dfe:	5cd3      	ldrb	r3, [r2, r3]
 8022e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022e06:	0e1f      	lsrs	r7, r3, #24
 8022e08:	2800      	cmp	r0, #0
 8022e0a:	f000 8171 	beq.w	80230f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8022e0e:	f895 c001 	ldrb.w	ip, [r5, #1]
 8022e12:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8022e16:	920e      	str	r2, [sp, #56]	; 0x38
 8022e18:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022e1c:	2900      	cmp	r1, #0
 8022e1e:	f000 8172 	beq.w	8023106 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022e22:	eb05 0c04 	add.w	ip, r5, r4
 8022e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e28:	5d2d      	ldrb	r5, [r5, r4]
 8022e2a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8022e2e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022e32:	950b      	str	r5, [sp, #44]	; 0x2c
 8022e34:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022e38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022e3a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022e3e:	0e15      	lsrs	r5, r2, #24
 8022e40:	920f      	str	r2, [sp, #60]	; 0x3c
 8022e42:	b280      	uxth	r0, r0
 8022e44:	b289      	uxth	r1, r1
 8022e46:	fb00 fa01 	mul.w	sl, r0, r1
 8022e4a:	0100      	lsls	r0, r0, #4
 8022e4c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8022e50:	eba0 080a 	sub.w	r8, r0, sl
 8022e54:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022e58:	b289      	uxth	r1, r1
 8022e5a:	fa1f f888 	uxth.w	r8, r8
 8022e5e:	1a52      	subs	r2, r2, r1
 8022e60:	fb08 f00e 	mul.w	r0, r8, lr
 8022e64:	b292      	uxth	r2, r2
 8022e66:	fb02 0007 	mla	r0, r2, r7, r0
 8022e6a:	fb01 0009 	mla	r0, r1, r9, r0
 8022e6e:	fb0a 0005 	mla	r0, sl, r5, r0
 8022e72:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022e76:	2800      	cmp	r0, #0
 8022e78:	f000 80dd 	beq.w	8023036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022e7c:	2fff      	cmp	r7, #255	; 0xff
 8022e7e:	d01a      	beq.n	8022eb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022e80:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022e84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e88:	fb07 fc0c 	mul.w	ip, r7, ip
 8022e8c:	435f      	muls	r7, r3
 8022e8e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022e92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e96:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022e9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e9e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022ea2:	4463      	add	r3, ip
 8022ea4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022ea8:	0a1b      	lsrs	r3, r3, #8
 8022eaa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022eae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022eb2:	ea43 030b 	orr.w	r3, r3, fp
 8022eb6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022eba:	d01e      	beq.n	8022efa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8022ebc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022ebe:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022ec2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ec6:	fb0e fb0b 	mul.w	fp, lr, fp
 8022eca:	fb0e fe07 	mul.w	lr, lr, r7
 8022ece:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022ed2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ed6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022eda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ede:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022ee2:	44dc      	add	ip, fp
 8022ee4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ee8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022eec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ef0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ef4:	ea4c 070e 	orr.w	r7, ip, lr
 8022ef8:	970e      	str	r7, [sp, #56]	; 0x38
 8022efa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022efe:	d01e      	beq.n	8022f3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022f00:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022f02:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022f06:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f0a:	fb09 fe0e 	mul.w	lr, r9, lr
 8022f0e:	fb09 f907 	mul.w	r9, r9, r7
 8022f12:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022f16:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022f1a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022f1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f22:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022f26:	44f4      	add	ip, lr
 8022f28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022f2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f30:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022f34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f38:	ea4c 0709 	orr.w	r7, ip, r9
 8022f3c:	970b      	str	r7, [sp, #44]	; 0x2c
 8022f3e:	2dff      	cmp	r5, #255	; 0xff
 8022f40:	d01c      	beq.n	8022f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8022f42:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f44:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022f48:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f4c:	fb05 fe0e 	mul.w	lr, r5, lr
 8022f50:	437d      	muls	r5, r7
 8022f52:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022f56:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022f5a:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8022f5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f62:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8022f66:	44f4      	add	ip, lr
 8022f68:	0a2d      	lsrs	r5, r5, #8
 8022f6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f6e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022f72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f76:	ea4c 0505 	orr.w	r5, ip, r5
 8022f7a:	950f      	str	r5, [sp, #60]	; 0x3c
 8022f7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022f7e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022f82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f86:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022f8a:	fb08 f505 	mul.w	r5, r8, r5
 8022f8e:	fb02 5507 	mla	r5, r2, r7, r5
 8022f92:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022f94:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f98:	fb01 5507 	mla	r5, r1, r7, r5
 8022f9c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f9e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022fa2:	fb0a 5507 	mla	r5, sl, r7, r5
 8022fa6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022fa8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022fac:	0a2d      	lsrs	r5, r5, #8
 8022fae:	fb08 f807 	mul.w	r8, r8, r7
 8022fb2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022fb6:	fb02 8303 	mla	r3, r2, r3, r8
 8022fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022fbc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022fc2:	fb01 330c 	mla	r3, r1, ip, r3
 8022fc6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022fca:	fb0a 3a01 	mla	sl, sl, r1, r3
 8022fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022fd0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022fd2:	4343      	muls	r3, r0
 8022fd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022fd8:	1c58      	adds	r0, r3, #1
 8022fda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022fde:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022fe2:	ea45 050a 	orr.w	r5, r5, sl
 8022fe6:	7833      	ldrb	r3, [r6, #0]
 8022fe8:	b2ea      	uxtb	r2, r5
 8022fea:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022fee:	fb12 f201 	smulbb	r2, r2, r1
 8022ff2:	b2c0      	uxtb	r0, r0
 8022ff4:	fb03 2300 	mla	r3, r3, r0, r2
 8022ff8:	b29b      	uxth	r3, r3
 8022ffa:	1c5a      	adds	r2, r3, #1
 8022ffc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023000:	7872      	ldrb	r2, [r6, #1]
 8023002:	fb12 f200 	smulbb	r2, r2, r0
 8023006:	121b      	asrs	r3, r3, #8
 8023008:	7033      	strb	r3, [r6, #0]
 802300a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802300e:	0c2d      	lsrs	r5, r5, #16
 8023010:	fb03 2301 	mla	r3, r3, r1, r2
 8023014:	b29b      	uxth	r3, r3
 8023016:	1c5a      	adds	r2, r3, #1
 8023018:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802301c:	121b      	asrs	r3, r3, #8
 802301e:	7073      	strb	r3, [r6, #1]
 8023020:	78b3      	ldrb	r3, [r6, #2]
 8023022:	fb13 f000 	smulbb	r0, r3, r0
 8023026:	fb05 0501 	mla	r5, r5, r1, r0
 802302a:	b2ad      	uxth	r5, r5
 802302c:	1c6b      	adds	r3, r5, #1
 802302e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023032:	122d      	asrs	r5, r5, #8
 8023034:	70b5      	strb	r5, [r6, #2]
 8023036:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023038:	3603      	adds	r6, #3
 802303a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802303c:	4413      	add	r3, r2
 802303e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8023040:	932d      	str	r3, [sp, #180]	; 0xb4
 8023042:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023044:	4413      	add	r3, r2
 8023046:	932e      	str	r3, [sp, #184]	; 0xb8
 8023048:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802304a:	3b01      	subs	r3, #1
 802304c:	9316      	str	r3, [sp, #88]	; 0x58
 802304e:	e6b7      	b.n	8022dc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8023050:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023052:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023054:	4413      	add	r3, r2
 8023056:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8023058:	932d      	str	r3, [sp, #180]	; 0xb4
 802305a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802305c:	4413      	add	r3, r2
 802305e:	932e      	str	r3, [sp, #184]	; 0xb8
 8023060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023062:	3b01      	subs	r3, #1
 8023064:	930a      	str	r3, [sp, #40]	; 0x28
 8023066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023068:	3303      	adds	r3, #3
 802306a:	930d      	str	r3, [sp, #52]	; 0x34
 802306c:	e659      	b.n	8022d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802306e:	f47f ae6b 	bne.w	8022d48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8023072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023074:	2b00      	cmp	r3, #0
 8023076:	f340 81a6 	ble.w	80233c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802307a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802307e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023080:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023084:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023088:	eef0 6a48 	vmov.f32	s13, s16
 802308c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023090:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023094:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023098:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 802309c:	eef0 6a68 	vmov.f32	s13, s17
 80230a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230a4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80230a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80230ac:	ee69 7a27 	vmul.f32	s15, s18, s15
 80230b0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80230b4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80230b8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80230bc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80230c0:	ee18 2a10 	vmov	r2, s16
 80230c4:	eeb0 8a47 	vmov.f32	s16, s14
 80230c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80230cc:	ee18 2a90 	vmov	r2, s17
 80230d0:	932f      	str	r3, [sp, #188]	; 0xbc
 80230d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80230d4:	eef0 8a67 	vmov.f32	s17, s15
 80230d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80230dc:	9330      	str	r3, [sp, #192]	; 0xc0
 80230de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80230e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80230e2:	3b01      	subs	r3, #1
 80230e4:	9314      	str	r3, [sp, #80]	; 0x50
 80230e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80230e8:	bf08      	it	eq
 80230ea:	4613      	moveq	r3, r2
 80230ec:	930a      	str	r3, [sp, #40]	; 0x28
 80230ee:	e611      	b.n	8022d14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80230f0:	b161      	cbz	r1, 802310c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80230f2:	5d2a      	ldrb	r2, [r5, r4]
 80230f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80230f6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80230fa:	25ff      	movs	r5, #255	; 0xff
 80230fc:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8023100:	920b      	str	r2, [sp, #44]	; 0x2c
 8023102:	46ae      	mov	lr, r5
 8023104:	e69d      	b.n	8022e42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8023106:	25ff      	movs	r5, #255	; 0xff
 8023108:	46a9      	mov	r9, r5
 802310a:	e69a      	b.n	8022e42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802310c:	25ff      	movs	r5, #255	; 0xff
 802310e:	46a9      	mov	r9, r5
 8023110:	e7f7      	b.n	8023102 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8023112:	1c57      	adds	r7, r2, #1
 8023114:	d18f      	bne.n	8023036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023116:	4294      	cmp	r4, r2
 8023118:	dd8d      	ble.n	8023036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802311a:	1c5d      	adds	r5, r3, #1
 802311c:	db8b      	blt.n	8023036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802311e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023120:	429d      	cmp	r5, r3
 8023122:	dd88      	ble.n	8023036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023124:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8023126:	9202      	str	r2, [sp, #8]
 8023128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802312a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802312e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023130:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023132:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8023136:	e9cd 4300 	strd	r4, r3, [sp]
 802313a:	4631      	mov	r1, r6
 802313c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802313e:	f7ff fc63 	bl	8022a08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8023142:	e778      	b.n	8023036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023144:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023146:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023148:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802314c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802314e:	1412      	asrs	r2, r2, #16
 8023150:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8023154:	141b      	asrs	r3, r3, #16
 8023156:	fb04 2303 	mla	r3, r4, r3, r2
 802315a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802315c:	18d5      	adds	r5, r2, r3
 802315e:	5cd3      	ldrb	r3, [r2, r3]
 8023160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023166:	0e1e      	lsrs	r6, r3, #24
 8023168:	2900      	cmp	r1, #0
 802316a:	f000 811b 	beq.w	80233a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 802316e:	786a      	ldrb	r2, [r5, #1]
 8023170:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023172:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8023176:	9210      	str	r2, [sp, #64]	; 0x40
 8023178:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802317c:	2800      	cmp	r0, #0
 802317e:	f000 811c 	beq.w	80233ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8023182:	192a      	adds	r2, r5, r4
 8023184:	5d2d      	ldrb	r5, [r5, r4]
 8023186:	7852      	ldrb	r2, [r2, #1]
 8023188:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 802318c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8023190:	950c      	str	r5, [sp, #48]	; 0x30
 8023192:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023196:	0e15      	lsrs	r5, r2, #24
 8023198:	9211      	str	r2, [sp, #68]	; 0x44
 802319a:	b289      	uxth	r1, r1
 802319c:	b280      	uxth	r0, r0
 802319e:	fb01 fa00 	mul.w	sl, r1, r0
 80231a2:	0109      	lsls	r1, r1, #4
 80231a4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80231a8:	eba1 080a 	sub.w	r8, r1, sl
 80231ac:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80231b0:	b280      	uxth	r0, r0
 80231b2:	fa1f f888 	uxth.w	r8, r8
 80231b6:	1a12      	subs	r2, r2, r0
 80231b8:	fb08 f10c 	mul.w	r1, r8, ip
 80231bc:	b292      	uxth	r2, r2
 80231be:	fb02 1106 	mla	r1, r2, r6, r1
 80231c2:	fb00 1109 	mla	r1, r0, r9, r1
 80231c6:	fb0a 1105 	mla	r1, sl, r5, r1
 80231ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80231ce:	2900      	cmp	r1, #0
 80231d0:	f000 80da 	beq.w	8023388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80231d4:	2eff      	cmp	r6, #255	; 0xff
 80231d6:	d016      	beq.n	8023206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80231d8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80231dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231e0:	4377      	muls	r7, r6
 80231e2:	435e      	muls	r6, r3
 80231e4:	0a3b      	lsrs	r3, r7, #8
 80231e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80231ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231ee:	443b      	add	r3, r7
 80231f0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80231f4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80231f8:	0a1b      	lsrs	r3, r3, #8
 80231fa:	0a3f      	lsrs	r7, r7, #8
 80231fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023200:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023204:	433b      	orrs	r3, r7
 8023206:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802320a:	d01d      	beq.n	8023248 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 802320c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802320e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023210:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023214:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023218:	fb0c f606 	mul.w	r6, ip, r6
 802321c:	fb0c fc07 	mul.w	ip, ip, r7
 8023220:	0a37      	lsrs	r7, r6, #8
 8023222:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023226:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802322a:	4437      	add	r7, r6
 802322c:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8023230:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023234:	0a3f      	lsrs	r7, r7, #8
 8023236:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802323a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802323e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023242:	ea47 060c 	orr.w	r6, r7, ip
 8023246:	9610      	str	r6, [sp, #64]	; 0x40
 8023248:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802324c:	d01d      	beq.n	802328a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802324e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023250:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023254:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023258:	fb09 fc0c 	mul.w	ip, r9, ip
 802325c:	fb09 f906 	mul.w	r9, r9, r6
 8023260:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8023264:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023268:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802326c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023270:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8023274:	4467      	add	r7, ip
 8023276:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802327a:	0a3f      	lsrs	r7, r7, #8
 802327c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023280:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023284:	ea47 0609 	orr.w	r6, r7, r9
 8023288:	960c      	str	r6, [sp, #48]	; 0x30
 802328a:	2dff      	cmp	r5, #255	; 0xff
 802328c:	d01a      	beq.n	80232c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 802328e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8023290:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023294:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023298:	fb05 fc0c 	mul.w	ip, r5, ip
 802329c:	4375      	muls	r5, r6
 802329e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80232a2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80232a6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80232aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80232ae:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80232b2:	4467      	add	r7, ip
 80232b4:	0a2d      	lsrs	r5, r5, #8
 80232b6:	0a3f      	lsrs	r7, r7, #8
 80232b8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80232bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80232c0:	433d      	orrs	r5, r7
 80232c2:	9511      	str	r5, [sp, #68]	; 0x44
 80232c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80232c6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80232ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80232d2:	fb08 f505 	mul.w	r5, r8, r5
 80232d6:	fb02 5506 	mla	r5, r2, r6, r5
 80232da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80232dc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80232e0:	fb00 5506 	mla	r5, r0, r6, r5
 80232e4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80232e6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80232ea:	fb0a 5506 	mla	r5, sl, r6, r5
 80232ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80232f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80232f4:	0a2d      	lsrs	r5, r5, #8
 80232f6:	fb08 f806 	mul.w	r8, r8, r6
 80232fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80232fe:	fb02 8303 	mla	r3, r2, r3, r8
 8023302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023304:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023308:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802330a:	fb00 3307 	mla	r3, r0, r7, r3
 802330e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023312:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8023316:	fb01 f30b 	mul.w	r3, r1, fp
 802331a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802331e:	1c59      	adds	r1, r3, #1
 8023320:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023324:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023328:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802332c:	ea45 050c 	orr.w	r5, r5, ip
 8023330:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023334:	b2ea      	uxtb	r2, r5
 8023336:	b2c9      	uxtb	r1, r1
 8023338:	fb12 f20b 	smulbb	r2, r2, fp
 802333c:	fb03 2301 	mla	r3, r3, r1, r2
 8023340:	b29b      	uxth	r3, r3
 8023342:	1c5a      	adds	r2, r3, #1
 8023344:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023348:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802334c:	fb12 f201 	smulbb	r2, r2, r1
 8023350:	121b      	asrs	r3, r3, #8
 8023352:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023356:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802335a:	0c2d      	lsrs	r5, r5, #16
 802335c:	fb03 230b 	mla	r3, r3, fp, r2
 8023360:	b29b      	uxth	r3, r3
 8023362:	1c5a      	adds	r2, r3, #1
 8023364:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023368:	121b      	asrs	r3, r3, #8
 802336a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802336e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8023372:	fb13 f101 	smulbb	r1, r3, r1
 8023376:	fb05 150b 	mla	r5, r5, fp, r1
 802337a:	b2ad      	uxth	r5, r5
 802337c:	1c69      	adds	r1, r5, #1
 802337e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023382:	122d      	asrs	r5, r5, #8
 8023384:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023388:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802338a:	f10e 0e03 	add.w	lr, lr, #3
 802338e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023390:	4413      	add	r3, r2
 8023392:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8023394:	932d      	str	r3, [sp, #180]	; 0xb4
 8023396:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023398:	4413      	add	r3, r2
 802339a:	932e      	str	r3, [sp, #184]	; 0xb8
 802339c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802339e:	3b01      	subs	r3, #1
 80233a0:	9315      	str	r3, [sp, #84]	; 0x54
 80233a2:	e4ed      	b.n	8022d80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80233a4:	b160      	cbz	r0, 80233c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80233a6:	5d2a      	ldrb	r2, [r5, r4]
 80233a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80233aa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80233ae:	25ff      	movs	r5, #255	; 0xff
 80233b0:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80233b4:	920c      	str	r2, [sp, #48]	; 0x30
 80233b6:	46ac      	mov	ip, r5
 80233b8:	e6ef      	b.n	802319a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80233ba:	25ff      	movs	r5, #255	; 0xff
 80233bc:	46a9      	mov	r9, r5
 80233be:	e6ec      	b.n	802319a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80233c0:	25ff      	movs	r5, #255	; 0xff
 80233c2:	46a9      	mov	r9, r5
 80233c4:	e7f7      	b.n	80233b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80233c6:	b01b      	add	sp, #108	; 0x6c
 80233c8:	ecbd 8b08 	vpop	{d8-d11}
 80233cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080233d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80233d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233d4:	b085      	sub	sp, #20
 80233d6:	7888      	ldrb	r0, [r1, #2]
 80233d8:	4692      	mov	sl, r2
 80233da:	4698      	mov	r8, r3
 80233dc:	9000      	str	r0, [sp, #0]
 80233de:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80233e2:	7848      	ldrb	r0, [r1, #1]
 80233e4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80233e8:	9001      	str	r0, [sp, #4]
 80233ea:	7808      	ldrb	r0, [r1, #0]
 80233ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80233f0:	9002      	str	r0, [sp, #8]
 80233f2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80233f6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80233fa:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80233fe:	fb04 560c 	mla	r6, r4, ip, r5
 8023402:	2c00      	cmp	r4, #0
 8023404:	eb02 0e06 	add.w	lr, r2, r6
 8023408:	9a00      	ldr	r2, [sp, #0]
 802340a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802340e:	9a01      	ldr	r2, [sp, #4]
 8023410:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023414:	db3e      	blt.n	8023494 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8023416:	45a1      	cmp	r9, r4
 8023418:	dd3c      	ble.n	8023494 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802341a:	2d00      	cmp	r5, #0
 802341c:	db38      	blt.n	8023490 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802341e:	45ac      	cmp	ip, r5
 8023420:	dd36      	ble.n	8023490 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8023422:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8023426:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802342a:	1c6e      	adds	r6, r5, #1
 802342c:	d435      	bmi.n	802349a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802342e:	45b4      	cmp	ip, r6
 8023430:	dd33      	ble.n	802349a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8023432:	b393      	cbz	r3, 802349a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8023434:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023438:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 802343c:	3401      	adds	r4, #1
 802343e:	d430      	bmi.n	80234a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8023440:	45a1      	cmp	r9, r4
 8023442:	dd2e      	ble.n	80234a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8023444:	b36f      	cbz	r7, 80234a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8023446:	2d00      	cmp	r5, #0
 8023448:	db29      	blt.n	802349e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802344a:	45ac      	cmp	ip, r5
 802344c:	dd27      	ble.n	802349e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802344e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8023452:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8023456:	3501      	adds	r5, #1
 8023458:	d407      	bmi.n	802346a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802345a:	45ac      	cmp	ip, r5
 802345c:	dd05      	ble.n	802346a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802345e:	b123      	cbz	r3, 802346a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8023460:	44f4      	add	ip, lr
 8023462:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023466:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802346a:	2b0f      	cmp	r3, #15
 802346c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023470:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023474:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023478:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802347c:	d801      	bhi.n	8023482 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 802347e:	2f0f      	cmp	r7, #15
 8023480:	d911      	bls.n	80234a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8023482:	4b76      	ldr	r3, [pc, #472]	; (802365c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8023484:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023488:	4a75      	ldr	r2, [pc, #468]	; (8023660 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802348a:	4876      	ldr	r0, [pc, #472]	; (8023664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 802348c:	f004 ff94 	bl	80283b8 <__assert_func>
 8023490:	4602      	mov	r2, r0
 8023492:	e7ca      	b.n	802342a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8023494:	4606      	mov	r6, r0
 8023496:	4602      	mov	r2, r0
 8023498:	e7d0      	b.n	802343c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802349a:	4606      	mov	r6, r0
 802349c:	e7ce      	b.n	802343c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802349e:	4604      	mov	r4, r0
 80234a0:	e7d9      	b.n	8023456 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80234a2:	4604      	mov	r4, r0
 80234a4:	e7e1      	b.n	802346a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80234a6:	b29b      	uxth	r3, r3
 80234a8:	b2bf      	uxth	r7, r7
 80234aa:	fb07 fe03 	mul.w	lr, r7, r3
 80234ae:	011b      	lsls	r3, r3, #4
 80234b0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80234b4:	eba3 0c0e 	sub.w	ip, r3, lr
 80234b8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80234bc:	b2bf      	uxth	r7, r7
 80234be:	fa1f fc8c 	uxth.w	ip, ip
 80234c2:	1bed      	subs	r5, r5, r7
 80234c4:	fb0c f30a 	mul.w	r3, ip, sl
 80234c8:	b2ad      	uxth	r5, r5
 80234ca:	fb05 330b 	mla	r3, r5, fp, r3
 80234ce:	fb07 3309 	mla	r3, r7, r9, r3
 80234d2:	fb0e 3308 	mla	r3, lr, r8, r3
 80234d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80234da:	9303      	str	r3, [sp, #12]
 80234dc:	2b00      	cmp	r3, #0
 80234de:	f000 80b9 	beq.w	8023654 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80234e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80234e6:	d018      	beq.n	802351a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80234e8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80234ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80234f0:	fb0b f303 	mul.w	r3, fp, r3
 80234f4:	fb0b fb02 	mul.w	fp, fp, r2
 80234f8:	0a1a      	lsrs	r2, r3, #8
 80234fa:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80234fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023502:	441a      	add	r2, r3
 8023504:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023508:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802350c:	0a12      	lsrs	r2, r2, #8
 802350e:	0a1b      	lsrs	r3, r3, #8
 8023510:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023514:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023518:	431a      	orrs	r2, r3
 802351a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802351e:	d019      	beq.n	8023554 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8023520:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023524:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023528:	fb0a fb0b 	mul.w	fp, sl, fp
 802352c:	fb0a fa06 	mul.w	sl, sl, r6
 8023530:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023534:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023538:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802353c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023540:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023544:	445e      	add	r6, fp
 8023546:	0a1b      	lsrs	r3, r3, #8
 8023548:	0a36      	lsrs	r6, r6, #8
 802354a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802354e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023552:	431e      	orrs	r6, r3
 8023554:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023558:	d019      	beq.n	802358e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802355a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802355e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023562:	fb09 fa0a 	mul.w	sl, r9, sl
 8023566:	fb09 f904 	mul.w	r9, r9, r4
 802356a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802356e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023572:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8023576:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802357a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802357e:	4454      	add	r4, sl
 8023580:	0a1b      	lsrs	r3, r3, #8
 8023582:	0a24      	lsrs	r4, r4, #8
 8023584:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023588:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802358c:	431c      	orrs	r4, r3
 802358e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023592:	d019      	beq.n	80235c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8023594:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023598:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802359c:	fb08 f909 	mul.w	r9, r8, r9
 80235a0:	fb08 f800 	mul.w	r8, r8, r0
 80235a4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80235a8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80235ac:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80235b0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80235b4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80235b8:	4448      	add	r0, r9
 80235ba:	0a1b      	lsrs	r3, r3, #8
 80235bc:	0a00      	lsrs	r0, r0, #8
 80235be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80235c2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80235c6:	4318      	orrs	r0, r3
 80235c8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80235cc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80235d0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80235d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80235d8:	fb0c f808 	mul.w	r8, ip, r8
 80235dc:	fb0c f606 	mul.w	r6, ip, r6
 80235e0:	fb05 8803 	mla	r8, r5, r3, r8
 80235e4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80235e8:	fb05 6202 	mla	r2, r5, r2, r6
 80235ec:	fb07 8803 	mla	r8, r7, r3, r8
 80235f0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80235f4:	fb0e 8303 	mla	r3, lr, r3, r8
 80235f8:	0a1b      	lsrs	r3, r3, #8
 80235fa:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80235fe:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8023602:	9c02      	ldr	r4, [sp, #8]
 8023604:	fb07 2703 	mla	r7, r7, r3, r2
 8023608:	9a03      	ldr	r2, [sp, #12]
 802360a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802360e:	43d2      	mvns	r2, r2
 8023610:	fb0e 7303 	mla	r3, lr, r3, r7
 8023614:	b2d2      	uxtb	r2, r2
 8023616:	0a1b      	lsrs	r3, r3, #8
 8023618:	4354      	muls	r4, r2
 802361a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802361e:	1c60      	adds	r0, r4, #1
 8023620:	ea48 0303 	orr.w	r3, r8, r3
 8023624:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8023628:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802362c:	7008      	strb	r0, [r1, #0]
 802362e:	9801      	ldr	r0, [sp, #4]
 8023630:	4350      	muls	r0, r2
 8023632:	1c44      	adds	r4, r0, #1
 8023634:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8023638:	0a18      	lsrs	r0, r3, #8
 802363a:	0c1b      	lsrs	r3, r3, #16
 802363c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8023640:	7048      	strb	r0, [r1, #1]
 8023642:	9800      	ldr	r0, [sp, #0]
 8023644:	4350      	muls	r0, r2
 8023646:	4602      	mov	r2, r0
 8023648:	3001      	adds	r0, #1
 802364a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802364e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023652:	708b      	strb	r3, [r1, #2]
 8023654:	b005      	add	sp, #20
 8023656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802365a:	bf00      	nop
 802365c:	0802d527 	.word	0x0802d527
 8023660:	0802da1e 	.word	0x0802da1e
 8023664:	0802d5f0 	.word	0x0802d5f0

08023668 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802366c:	ed2d 8b08 	vpush	{d8-d11}
 8023670:	b097      	sub	sp, #92	; 0x5c
 8023672:	eeb0 aa40 	vmov.f32	s20, s0
 8023676:	eef0 9a60 	vmov.f32	s19, s1
 802367a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 802367c:	eeb0 9a41 	vmov.f32	s18, s2
 8023680:	9308      	str	r3, [sp, #32]
 8023682:	eeb0 8a62 	vmov.f32	s16, s5
 8023686:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802368a:	eef0 8a43 	vmov.f32	s17, s6
 802368e:	9015      	str	r0, [sp, #84]	; 0x54
 8023690:	eef0 ba44 	vmov.f32	s23, s8
 8023694:	6868      	ldr	r0, [r5, #4]
 8023696:	eeb0 ba64 	vmov.f32	s22, s9
 802369a:	9112      	str	r1, [sp, #72]	; 0x48
 802369c:	eef0 aa45 	vmov.f32	s21, s10
 80236a0:	9310      	str	r3, [sp, #64]	; 0x40
 80236a2:	9214      	str	r2, [sp, #80]	; 0x50
 80236a4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80236a6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80236aa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80236ae:	fb00 1303 	mla	r3, r0, r3, r1
 80236b2:	6829      	ldr	r1, [r5, #0]
 80236b4:	6855      	ldr	r5, [r2, #4]
 80236b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80236ba:	3504      	adds	r5, #4
 80236bc:	18cb      	adds	r3, r1, r3
 80236be:	930b      	str	r3, [sp, #44]	; 0x2c
 80236c0:	6813      	ldr	r3, [r2, #0]
 80236c2:	9311      	str	r3, [sp, #68]	; 0x44
 80236c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	dc03      	bgt.n	80236d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80236ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	f340 8333 	ble.w	8023d38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80236d2:	9b08      	ldr	r3, [sp, #32]
 80236d4:	2b00      	cmp	r3, #0
 80236d6:	f340 8190 	ble.w	80239fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80236da:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80236dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80236de:	1412      	asrs	r2, r2, #16
 80236e0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80236e4:	d42f      	bmi.n	8023746 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80236e6:	1c51      	adds	r1, r2, #1
 80236e8:	428c      	cmp	r4, r1
 80236ea:	dd2f      	ble.n	802374c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80236ec:	2b00      	cmp	r3, #0
 80236ee:	db2d      	blt.n	802374c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80236f0:	1c59      	adds	r1, r3, #1
 80236f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80236f4:	4288      	cmp	r0, r1
 80236f6:	dd29      	ble.n	802374c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80236f8:	9b08      	ldr	r3, [sp, #32]
 80236fa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80236fc:	3b01      	subs	r3, #1
 80236fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023700:	fb02 1203 	mla	r2, r2, r3, r1
 8023704:	1412      	asrs	r2, r2, #16
 8023706:	d42b      	bmi.n	8023760 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023708:	3201      	adds	r2, #1
 802370a:	4294      	cmp	r4, r2
 802370c:	dd28      	ble.n	8023760 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802370e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023710:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023712:	fb02 1303 	mla	r3, r2, r3, r1
 8023716:	141b      	asrs	r3, r3, #16
 8023718:	d422      	bmi.n	8023760 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802371a:	3301      	adds	r3, #1
 802371c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802371e:	429a      	cmp	r2, r3
 8023720:	dd1e      	ble.n	8023760 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023724:	f103 0803 	add.w	r8, r3, #3
 8023728:	9b08      	ldr	r3, [sp, #32]
 802372a:	9307      	str	r3, [sp, #28]
 802372c:	9b07      	ldr	r3, [sp, #28]
 802372e:	2b00      	cmp	r3, #0
 8023730:	f300 81ca 	bgt.w	8023ac8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8023734:	9b08      	ldr	r3, [sp, #32]
 8023736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023738:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802373c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023740:	441a      	add	r2, r3
 8023742:	920b      	str	r2, [sp, #44]	; 0x2c
 8023744:	e15b      	b.n	80239fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8023746:	1c51      	adds	r1, r2, #1
 8023748:	f040 8148 	bne.w	80239dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802374c:	42a2      	cmp	r2, r4
 802374e:	f280 8145 	bge.w	80239dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023752:	1c5a      	adds	r2, r3, #1
 8023754:	f2c0 8142 	blt.w	80239dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023758:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802375a:	4293      	cmp	r3, r2
 802375c:	f280 813e 	bge.w	80239dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023760:	9b08      	ldr	r3, [sp, #32]
 8023762:	9313      	str	r3, [sp, #76]	; 0x4c
 8023764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023766:	9307      	str	r3, [sp, #28]
 8023768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802376a:	2b00      	cmp	r3, #0
 802376c:	dde2      	ble.n	8023734 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802376e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023770:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023772:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023776:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023778:	141b      	asrs	r3, r3, #16
 802377a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802377e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023780:	1412      	asrs	r2, r2, #16
 8023782:	f100 818b 	bmi.w	8023a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8023786:	1c56      	adds	r6, r2, #1
 8023788:	42b4      	cmp	r4, r6
 802378a:	f340 8189 	ble.w	8023aa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802378e:	2b00      	cmp	r3, #0
 8023790:	f2c0 8186 	blt.w	8023aa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8023794:	1c5e      	adds	r6, r3, #1
 8023796:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023798:	42b7      	cmp	r7, r6
 802379a:	f340 8181 	ble.w	8023aa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802379e:	fb03 2304 	mla	r3, r3, r4, r2
 80237a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80237a4:	18d6      	adds	r6, r2, r3
 80237a6:	5cd3      	ldrb	r3, [r2, r3]
 80237a8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80237ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80237b0:	2900      	cmp	r1, #0
 80237b2:	f000 8163 	beq.w	8023a7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80237b6:	7872      	ldrb	r2, [r6, #1]
 80237b8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80237bc:	920c      	str	r2, [sp, #48]	; 0x30
 80237be:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80237c2:	2800      	cmp	r0, #0
 80237c4:	f000 8164 	beq.w	8023a90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 80237c8:	1932      	adds	r2, r6, r4
 80237ca:	5d36      	ldrb	r6, [r6, r4]
 80237cc:	7852      	ldrb	r2, [r2, #1]
 80237ce:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80237d2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80237d6:	9609      	str	r6, [sp, #36]	; 0x24
 80237d8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80237dc:	0e16      	lsrs	r6, r2, #24
 80237de:	920d      	str	r2, [sp, #52]	; 0x34
 80237e0:	b289      	uxth	r1, r1
 80237e2:	b280      	uxth	r0, r0
 80237e4:	fb01 fb00 	mul.w	fp, r1, r0
 80237e8:	0109      	lsls	r1, r1, #4
 80237ea:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80237ee:	eba1 090b 	sub.w	r9, r1, fp
 80237f2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80237f6:	b280      	uxth	r0, r0
 80237f8:	fa1f f989 	uxth.w	r9, r9
 80237fc:	1a12      	subs	r2, r2, r0
 80237fe:	fb09 f108 	mul.w	r1, r9, r8
 8023802:	b292      	uxth	r2, r2
 8023804:	fb02 110c 	mla	r1, r2, ip, r1
 8023808:	fb00 110a 	mla	r1, r0, sl, r1
 802380c:	fb0b 1106 	mla	r1, fp, r6, r1
 8023810:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023814:	2900      	cmp	r1, #0
 8023816:	f000 80d2 	beq.w	80239be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802381a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802381e:	d01b      	beq.n	8023858 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8023820:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023828:	fb0c fe0e 	mul.w	lr, ip, lr
 802382c:	fb0c fc03 	mul.w	ip, ip, r3
 8023830:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023834:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023838:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802383c:	4473      	add	r3, lr
 802383e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8023842:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8023846:	0a1b      	lsrs	r3, r3, #8
 8023848:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802384c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023850:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023854:	ea43 030e 	orr.w	r3, r3, lr
 8023858:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802385c:	d01e      	beq.n	802389c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 802385e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023860:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023864:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8023868:	fb08 fc0c 	mul.w	ip, r8, ip
 802386c:	fb08 f80e 	mul.w	r8, r8, lr
 8023870:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023874:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023878:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802387c:	44e6      	add	lr, ip
 802387e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023882:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023886:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802388a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802388e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023892:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023896:	ea4e 0708 	orr.w	r7, lr, r8
 802389a:	970c      	str	r7, [sp, #48]	; 0x30
 802389c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80238a0:	d01e      	beq.n	80238e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80238a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80238a4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80238a8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80238ac:	fb0a f808 	mul.w	r8, sl, r8
 80238b0:	fb0a fa0c 	mul.w	sl, sl, ip
 80238b4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80238b8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80238bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80238c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80238c8:	44c6      	add	lr, r8
 80238ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80238d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238da:	ea4e 070a 	orr.w	r7, lr, sl
 80238de:	9709      	str	r7, [sp, #36]	; 0x24
 80238e0:	2eff      	cmp	r6, #255	; 0xff
 80238e2:	d01d      	beq.n	8023920 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 80238e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80238e6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80238ea:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80238ee:	fb06 f808 	mul.w	r8, r6, r8
 80238f2:	fb06 f60c 	mul.w	r6, r6, ip
 80238f6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80238fa:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80238fe:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8023902:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023906:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802390a:	44c6      	add	lr, r8
 802390c:	0a36      	lsrs	r6, r6, #8
 802390e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023912:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023916:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802391a:	ea4e 0606 	orr.w	r6, lr, r6
 802391e:	960d      	str	r6, [sp, #52]	; 0x34
 8023920:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023922:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023926:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023928:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802392c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023930:	43c9      	mvns	r1, r1
 8023932:	fb09 f606 	mul.w	r6, r9, r6
 8023936:	b2c9      	uxtb	r1, r1
 8023938:	fb02 660c 	mla	r6, r2, ip, r6
 802393c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023940:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023942:	fb00 660c 	mla	r6, r0, ip, r6
 8023946:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802394a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802394c:	fb0b 660c 	mla	r6, fp, ip, r6
 8023950:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023954:	fb09 f90c 	mul.w	r9, r9, ip
 8023958:	0a36      	lsrs	r6, r6, #8
 802395a:	fb02 9303 	mla	r3, r2, r3, r9
 802395e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023960:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023964:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802396a:	fb00 330e 	mla	r3, r0, lr, r3
 802396e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023972:	fb0b 3b00 	mla	fp, fp, r0, r3
 8023976:	9b07      	ldr	r3, [sp, #28]
 8023978:	781b      	ldrb	r3, [r3, #0]
 802397a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802397e:	fb03 f201 	mul.w	r2, r3, r1
 8023982:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023986:	1c53      	adds	r3, r2, #1
 8023988:	ea46 060b 	orr.w	r6, r6, fp
 802398c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023990:	9a07      	ldr	r2, [sp, #28]
 8023992:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023996:	7013      	strb	r3, [r2, #0]
 8023998:	7853      	ldrb	r3, [r2, #1]
 802399a:	434b      	muls	r3, r1
 802399c:	1c5a      	adds	r2, r3, #1
 802399e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80239a2:	0a33      	lsrs	r3, r6, #8
 80239a4:	0c36      	lsrs	r6, r6, #16
 80239a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80239aa:	9a07      	ldr	r2, [sp, #28]
 80239ac:	7053      	strb	r3, [r2, #1]
 80239ae:	7893      	ldrb	r3, [r2, #2]
 80239b0:	4359      	muls	r1, r3
 80239b2:	1c4b      	adds	r3, r1, #1
 80239b4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80239b8:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80239bc:	7096      	strb	r6, [r2, #2]
 80239be:	9b07      	ldr	r3, [sp, #28]
 80239c0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80239c2:	3303      	adds	r3, #3
 80239c4:	9307      	str	r3, [sp, #28]
 80239c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80239c8:	4413      	add	r3, r2
 80239ca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80239cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80239ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80239d0:	4413      	add	r3, r2
 80239d2:	932a      	str	r3, [sp, #168]	; 0xa8
 80239d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80239d6:	3b01      	subs	r3, #1
 80239d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80239da:	e6c5      	b.n	8023768 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80239dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80239de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80239e0:	4413      	add	r3, r2
 80239e2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80239e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80239e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80239e8:	4413      	add	r3, r2
 80239ea:	932a      	str	r3, [sp, #168]	; 0xa8
 80239ec:	9b08      	ldr	r3, [sp, #32]
 80239ee:	3b01      	subs	r3, #1
 80239f0:	9308      	str	r3, [sp, #32]
 80239f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80239f4:	3303      	adds	r3, #3
 80239f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80239f8:	e66b      	b.n	80236d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80239fa:	f47f ae7d 	bne.w	80236f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 80239fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023a00:	2b00      	cmp	r3, #0
 8023a02:	f340 8199 	ble.w	8023d38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8023a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a0c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a10:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a14:	eef0 6a48 	vmov.f32	s13, s16
 8023a18:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a1c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a24:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023a28:	eef0 6a68 	vmov.f32	s13, s17
 8023a2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a30:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8023a34:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023a38:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023a3c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023a40:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023a44:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023a48:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023a4c:	ee18 2a10 	vmov	r2, s16
 8023a50:	eeb0 8a47 	vmov.f32	s16, s14
 8023a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a58:	ee18 2a90 	vmov	r2, s17
 8023a5c:	932b      	str	r3, [sp, #172]	; 0xac
 8023a5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a60:	eef0 8a67 	vmov.f32	s17, s15
 8023a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a68:	932c      	str	r3, [sp, #176]	; 0xb0
 8023a6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023a6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a6e:	3b01      	subs	r3, #1
 8023a70:	9312      	str	r3, [sp, #72]	; 0x48
 8023a72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a74:	bf08      	it	eq
 8023a76:	4613      	moveq	r3, r2
 8023a78:	9308      	str	r3, [sp, #32]
 8023a7a:	e623      	b.n	80236c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8023a7c:	b158      	cbz	r0, 8023a96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023a7e:	5d32      	ldrb	r2, [r6, r4]
 8023a80:	26ff      	movs	r6, #255	; 0xff
 8023a82:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023a86:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8023a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8023a8c:	46b0      	mov	r8, r6
 8023a8e:	e6a7      	b.n	80237e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023a90:	26ff      	movs	r6, #255	; 0xff
 8023a92:	46b2      	mov	sl, r6
 8023a94:	e6a4      	b.n	80237e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023a96:	26ff      	movs	r6, #255	; 0xff
 8023a98:	46b2      	mov	sl, r6
 8023a9a:	e7f7      	b.n	8023a8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8023a9c:	1c57      	adds	r7, r2, #1
 8023a9e:	d18e      	bne.n	80239be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023aa0:	4294      	cmp	r4, r2
 8023aa2:	dd8c      	ble.n	80239be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023aa4:	1c5e      	adds	r6, r3, #1
 8023aa6:	db8a      	blt.n	80239be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023aa8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023aaa:	429e      	cmp	r6, r3
 8023aac:	dd87      	ble.n	80239be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023aae:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8023ab2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023ab6:	e9cd 4600 	strd	r4, r6, [sp]
 8023aba:	462b      	mov	r3, r5
 8023abc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023abe:	9907      	ldr	r1, [sp, #28]
 8023ac0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023ac2:	f7ff fc85 	bl	80233d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8023ac6:	e77a      	b.n	80239be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023ac8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023aca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023acc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023ad0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ad2:	1409      	asrs	r1, r1, #16
 8023ad4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8023ad8:	141b      	asrs	r3, r3, #16
 8023ada:	fb04 1303 	mla	r3, r4, r3, r1
 8023ade:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023ae0:	18ce      	adds	r6, r1, r3
 8023ae2:	5ccb      	ldrb	r3, [r1, r3]
 8023ae4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023ae8:	0e1f      	lsrs	r7, r3, #24
 8023aea:	2a00      	cmp	r2, #0
 8023aec:	f000 8114 	beq.w	8023d18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8023af0:	7871      	ldrb	r1, [r6, #1]
 8023af2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023af6:	910e      	str	r1, [sp, #56]	; 0x38
 8023af8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023afc:	2800      	cmp	r0, #0
 8023afe:	f000 8115 	beq.w	8023d2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8023b02:	1931      	adds	r1, r6, r4
 8023b04:	5d36      	ldrb	r6, [r6, r4]
 8023b06:	7849      	ldrb	r1, [r1, #1]
 8023b08:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8023b0c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023b10:	960a      	str	r6, [sp, #40]	; 0x28
 8023b12:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023b16:	0e0e      	lsrs	r6, r1, #24
 8023b18:	910f      	str	r1, [sp, #60]	; 0x3c
 8023b1a:	b292      	uxth	r2, r2
 8023b1c:	b280      	uxth	r0, r0
 8023b1e:	fb02 fb00 	mul.w	fp, r2, r0
 8023b22:	0112      	lsls	r2, r2, #4
 8023b24:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023b28:	eba2 090b 	sub.w	r9, r2, fp
 8023b2c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023b30:	b280      	uxth	r0, r0
 8023b32:	fa1f f989 	uxth.w	r9, r9
 8023b36:	1a09      	subs	r1, r1, r0
 8023b38:	fb09 f20e 	mul.w	r2, r9, lr
 8023b3c:	b289      	uxth	r1, r1
 8023b3e:	fb01 2207 	mla	r2, r1, r7, r2
 8023b42:	fb00 220a 	mla	r2, r0, sl, r2
 8023b46:	fb0b 2206 	mla	r2, fp, r6, r2
 8023b4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023b4e:	9213      	str	r2, [sp, #76]	; 0x4c
 8023b50:	2a00      	cmp	r2, #0
 8023b52:	f000 80d4 	beq.w	8023cfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8023b56:	2fff      	cmp	r7, #255	; 0xff
 8023b58:	d01a      	beq.n	8023b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8023b5a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023b5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b62:	fb07 fc0c 	mul.w	ip, r7, ip
 8023b66:	435f      	muls	r7, r3
 8023b68:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023b6c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b74:	4463      	add	r3, ip
 8023b76:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023b7a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023b7e:	0a1b      	lsrs	r3, r3, #8
 8023b80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b88:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023b8c:	ea43 030c 	orr.w	r3, r3, ip
 8023b90:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023b94:	d01f      	beq.n	8023bd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8023b96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023b9a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023b9e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023ba2:	fb0e f707 	mul.w	r7, lr, r7
 8023ba6:	fb0e fe0c 	mul.w	lr, lr, ip
 8023baa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023bae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023bb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bb6:	44bc      	add	ip, r7
 8023bb8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023bbc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023bc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023bc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bcc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023bd0:	ea4c 020e 	orr.w	r2, ip, lr
 8023bd4:	920e      	str	r2, [sp, #56]	; 0x38
 8023bd6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023bda:	d01e      	beq.n	8023c1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8023bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023bde:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023be2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023be6:	fb0a fe0e 	mul.w	lr, sl, lr
 8023bea:	fb0a fa07 	mul.w	sl, sl, r7
 8023bee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023bf2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023bf6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023bfa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023bfe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023c02:	44f4      	add	ip, lr
 8023c04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c14:	ea4c 020a 	orr.w	r2, ip, sl
 8023c18:	920a      	str	r2, [sp, #40]	; 0x28
 8023c1a:	2eff      	cmp	r6, #255	; 0xff
 8023c1c:	d01c      	beq.n	8023c58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8023c1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023c20:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023c24:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023c28:	fb06 fe0e 	mul.w	lr, r6, lr
 8023c2c:	437e      	muls	r6, r7
 8023c2e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023c32:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023c36:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023c3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c3e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023c42:	44f4      	add	ip, lr
 8023c44:	0a36      	lsrs	r6, r6, #8
 8023c46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c4a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023c4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c52:	ea4c 0206 	orr.w	r2, ip, r6
 8023c56:	920f      	str	r2, [sp, #60]	; 0x3c
 8023c58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023c5a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023c5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c62:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8023c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c68:	fb09 f606 	mul.w	r6, r9, r6
 8023c6c:	fb01 6607 	mla	r6, r1, r7, r6
 8023c70:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023c76:	fb00 6607 	mla	r6, r0, r7, r6
 8023c7a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023c80:	fb0b 6607 	mla	r6, fp, r7, r6
 8023c84:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c8a:	fb09 f907 	mul.w	r9, r9, r7
 8023c8e:	0a36      	lsrs	r6, r6, #8
 8023c90:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023c96:	fb01 9303 	mla	r3, r1, r3, r9
 8023c9a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c9e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023ca2:	fb00 330c 	mla	r3, r0, ip, r3
 8023ca6:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8023caa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023cac:	43da      	mvns	r2, r3
 8023cae:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8023cb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cb6:	b2d2      	uxtb	r2, r2
 8023cb8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023cbc:	fb03 f102 	mul.w	r1, r3, r2
 8023cc0:	ea46 060e 	orr.w	r6, r6, lr
 8023cc4:	1c4b      	adds	r3, r1, #1
 8023cc6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023cca:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023cce:	f808 3c03 	strb.w	r3, [r8, #-3]
 8023cd2:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8023cd6:	4353      	muls	r3, r2
 8023cd8:	1c59      	adds	r1, r3, #1
 8023cda:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023cde:	0a33      	lsrs	r3, r6, #8
 8023ce0:	0c36      	lsrs	r6, r6, #16
 8023ce2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023ce6:	f808 3c02 	strb.w	r3, [r8, #-2]
 8023cea:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023cee:	435a      	muls	r2, r3
 8023cf0:	1c53      	adds	r3, r2, #1
 8023cf2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023cf6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023cfa:	f808 6c01 	strb.w	r6, [r8, #-1]
 8023cfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d00:	f108 0803 	add.w	r8, r8, #3
 8023d04:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023d06:	4413      	add	r3, r2
 8023d08:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023d0a:	9329      	str	r3, [sp, #164]	; 0xa4
 8023d0c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d0e:	4413      	add	r3, r2
 8023d10:	932a      	str	r3, [sp, #168]	; 0xa8
 8023d12:	9b07      	ldr	r3, [sp, #28]
 8023d14:	3b01      	subs	r3, #1
 8023d16:	e508      	b.n	802372a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8023d18:	b158      	cbz	r0, 8023d32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8023d1a:	5d31      	ldrb	r1, [r6, r4]
 8023d1c:	26ff      	movs	r6, #255	; 0xff
 8023d1e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023d22:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023d26:	910a      	str	r1, [sp, #40]	; 0x28
 8023d28:	46b6      	mov	lr, r6
 8023d2a:	e6f6      	b.n	8023b1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023d2c:	26ff      	movs	r6, #255	; 0xff
 8023d2e:	46b2      	mov	sl, r6
 8023d30:	e6f3      	b.n	8023b1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023d32:	26ff      	movs	r6, #255	; 0xff
 8023d34:	46b2      	mov	sl, r6
 8023d36:	e7f7      	b.n	8023d28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8023d38:	b017      	add	sp, #92	; 0x5c
 8023d3a:	ecbd 8b08 	vpop	{d8-d11}
 8023d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023d44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8023d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d48:	b08d      	sub	sp, #52	; 0x34
 8023d4a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8023d4e:	9103      	str	r1, [sp, #12]
 8023d50:	fb07 5803 	mla	r8, r7, r3, r5
 8023d54:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8023d58:	9803      	ldr	r0, [sp, #12]
 8023d5a:	2f00      	cmp	r7, #0
 8023d5c:	910b      	str	r1, [sp, #44]	; 0x2c
 8023d5e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023d62:	9903      	ldr	r1, [sp, #12]
 8023d64:	9c03      	ldr	r4, [sp, #12]
 8023d66:	eb02 0608 	add.w	r6, r2, r8
 8023d6a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8023d6e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8023d72:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8023d76:	7809      	ldrb	r1, [r1, #0]
 8023d78:	7840      	ldrb	r0, [r0, #1]
 8023d7a:	78a4      	ldrb	r4, [r4, #2]
 8023d7c:	db51      	blt.n	8023e22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023d7e:	45be      	cmp	lr, r7
 8023d80:	dd4f      	ble.n	8023e22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023d82:	2d00      	cmp	r5, #0
 8023d84:	db49      	blt.n	8023e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023d86:	42ab      	cmp	r3, r5
 8023d88:	dd47      	ble.n	8023e1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023d8a:	f812 2008 	ldrb.w	r2, [r2, r8]
 8023d8e:	9204      	str	r2, [sp, #16]
 8023d90:	7872      	ldrb	r2, [r6, #1]
 8023d92:	9205      	str	r2, [sp, #20]
 8023d94:	78b2      	ldrb	r2, [r6, #2]
 8023d96:	9206      	str	r2, [sp, #24]
 8023d98:	1c6a      	adds	r2, r5, #1
 8023d9a:	d449      	bmi.n	8023e30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023d9c:	4293      	cmp	r3, r2
 8023d9e:	dd47      	ble.n	8023e30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023da0:	f1bc 0f00 	cmp.w	ip, #0
 8023da4:	d044      	beq.n	8023e30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023da6:	7972      	ldrb	r2, [r6, #5]
 8023da8:	f896 b003 	ldrb.w	fp, [r6, #3]
 8023dac:	f896 a004 	ldrb.w	sl, [r6, #4]
 8023db0:	9201      	str	r2, [sp, #4]
 8023db2:	3701      	adds	r7, #1
 8023db4:	d444      	bmi.n	8023e40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023db6:	45be      	cmp	lr, r7
 8023db8:	dd42      	ble.n	8023e40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023dba:	f1b9 0f00 	cmp.w	r9, #0
 8023dbe:	f000 80c1 	beq.w	8023f44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8023dc2:	2d00      	cmp	r5, #0
 8023dc4:	db38      	blt.n	8023e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023dc6:	42ab      	cmp	r3, r5
 8023dc8:	dd36      	ble.n	8023e38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023dca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023dce:	f816 8002 	ldrb.w	r8, [r6, r2]
 8023dd2:	2203      	movs	r2, #3
 8023dd4:	fb03 6702 	mla	r7, r3, r2, r6
 8023dd8:	fb03 6202 	mla	r2, r3, r2, r6
 8023ddc:	787f      	ldrb	r7, [r7, #1]
 8023dde:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023de2:	9702      	str	r7, [sp, #8]
 8023de4:	3501      	adds	r5, #1
 8023de6:	d432      	bmi.n	8023e4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023de8:	42ab      	cmp	r3, r5
 8023dea:	dd30      	ble.n	8023e4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023dec:	f1bc 0f00 	cmp.w	ip, #0
 8023df0:	d031      	beq.n	8023e56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8023df2:	2703      	movs	r7, #3
 8023df4:	fb13 7207 	smlabb	r2, r3, r7, r7
 8023df8:	5cb5      	ldrb	r5, [r6, r2]
 8023dfa:	fb03 6207 	mla	r2, r3, r7, r6
 8023dfe:	fb03 6307 	mla	r3, r3, r7, r6
 8023e02:	7912      	ldrb	r2, [r2, #4]
 8023e04:	795e      	ldrb	r6, [r3, #5]
 8023e06:	f1bc 0f0f 	cmp.w	ip, #15
 8023e0a:	d927      	bls.n	8023e5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8023e0c:	4b53      	ldr	r3, [pc, #332]	; (8023f5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8023e0e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023e12:	4a53      	ldr	r2, [pc, #332]	; (8023f60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8023e14:	4853      	ldr	r0, [pc, #332]	; (8023f64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8023e16:	f004 facf 	bl	80283b8 <__assert_func>
 8023e1a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8023e1e:	9104      	str	r1, [sp, #16]
 8023e20:	e7ba      	b.n	8023d98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8023e22:	9401      	str	r4, [sp, #4]
 8023e24:	4682      	mov	sl, r0
 8023e26:	468b      	mov	fp, r1
 8023e28:	9104      	str	r1, [sp, #16]
 8023e2a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8023e2e:	e7c0      	b.n	8023db2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023e30:	9401      	str	r4, [sp, #4]
 8023e32:	4682      	mov	sl, r0
 8023e34:	468b      	mov	fp, r1
 8023e36:	e7bc      	b.n	8023db2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023e38:	46a6      	mov	lr, r4
 8023e3a:	9002      	str	r0, [sp, #8]
 8023e3c:	4688      	mov	r8, r1
 8023e3e:	e7d1      	b.n	8023de4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8023e40:	4626      	mov	r6, r4
 8023e42:	4602      	mov	r2, r0
 8023e44:	460d      	mov	r5, r1
 8023e46:	46a6      	mov	lr, r4
 8023e48:	9002      	str	r0, [sp, #8]
 8023e4a:	4688      	mov	r8, r1
 8023e4c:	e7db      	b.n	8023e06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8023e4e:	4626      	mov	r6, r4
 8023e50:	4602      	mov	r2, r0
 8023e52:	460d      	mov	r5, r1
 8023e54:	e7d7      	b.n	8023e06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8023e56:	4626      	mov	r6, r4
 8023e58:	4602      	mov	r2, r0
 8023e5a:	460d      	mov	r5, r1
 8023e5c:	f1b9 0f0f 	cmp.w	r9, #15
 8023e60:	d8d4      	bhi.n	8023e0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8023e62:	fa1f f38c 	uxth.w	r3, ip
 8023e66:	fa1f fc89 	uxth.w	ip, r9
 8023e6a:	fb03 f70c 	mul.w	r7, r3, ip
 8023e6e:	011b      	lsls	r3, r3, #4
 8023e70:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8023e74:	9707      	str	r7, [sp, #28]
 8023e76:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023e7a:	fa1f fc8c 	uxth.w	ip, ip
 8023e7e:	eba7 070c 	sub.w	r7, r7, ip
 8023e82:	b2bf      	uxth	r7, r7
 8023e84:	9709      	str	r7, [sp, #36]	; 0x24
 8023e86:	9f07      	ldr	r7, [sp, #28]
 8023e88:	1bdb      	subs	r3, r3, r7
 8023e8a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8023e8e:	b29b      	uxth	r3, r3
 8023e90:	9708      	str	r7, [sp, #32]
 8023e92:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023e94:	930a      	str	r3, [sp, #40]	; 0x28
 8023e96:	ea6f 0907 	mvn.w	r9, r7
 8023e9a:	fb03 fb0b 	mul.w	fp, r3, fp
 8023e9e:	9f04      	ldr	r7, [sp, #16]
 8023ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ea2:	fa5f f989 	uxtb.w	r9, r9
 8023ea6:	fb03 bb07 	mla	fp, r3, r7, fp
 8023eaa:	9f07      	ldr	r7, [sp, #28]
 8023eac:	fb11 f109 	smulbb	r1, r1, r9
 8023eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023eb2:	fb0c b808 	mla	r8, ip, r8, fp
 8023eb6:	fb10 f009 	smulbb	r0, r0, r9
 8023eba:	fb14 f409 	smulbb	r4, r4, r9
 8023ebe:	fb07 8805 	mla	r8, r7, r5, r8
 8023ec2:	9d08      	ldr	r5, [sp, #32]
 8023ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023ec6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023eca:	fb08 1805 	mla	r8, r8, r5, r1
 8023ece:	9d05      	ldr	r5, [sp, #20]
 8023ed0:	fa1f f888 	uxth.w	r8, r8
 8023ed4:	f108 0101 	add.w	r1, r8, #1
 8023ed8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023edc:	9903      	ldr	r1, [sp, #12]
 8023ede:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023ee2:	f881 8000 	strb.w	r8, [r1]
 8023ee6:	fb03 f10a 	mul.w	r1, r3, sl
 8023eea:	fb07 1105 	mla	r1, r7, r5, r1
 8023eee:	9d02      	ldr	r5, [sp, #8]
 8023ef0:	fb0c 1105 	mla	r1, ip, r5, r1
 8023ef4:	9d07      	ldr	r5, [sp, #28]
 8023ef6:	fb05 1102 	mla	r1, r5, r2, r1
 8023efa:	9a08      	ldr	r2, [sp, #32]
 8023efc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023f00:	fb01 0102 	mla	r1, r1, r2, r0
 8023f04:	9a03      	ldr	r2, [sp, #12]
 8023f06:	b289      	uxth	r1, r1
 8023f08:	1c48      	adds	r0, r1, #1
 8023f0a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023f0e:	1209      	asrs	r1, r1, #8
 8023f10:	7051      	strb	r1, [r2, #1]
 8023f12:	9a01      	ldr	r2, [sp, #4]
 8023f14:	4353      	muls	r3, r2
 8023f16:	9a06      	ldr	r2, [sp, #24]
 8023f18:	fb07 3702 	mla	r7, r7, r2, r3
 8023f1c:	9b08      	ldr	r3, [sp, #32]
 8023f1e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8023f22:	fb05 c606 	mla	r6, r5, r6, ip
 8023f26:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023f2a:	fb06 4603 	mla	r6, r6, r3, r4
 8023f2e:	9b03      	ldr	r3, [sp, #12]
 8023f30:	b2b6      	uxth	r6, r6
 8023f32:	f106 0e01 	add.w	lr, r6, #1
 8023f36:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023f3a:	1236      	asrs	r6, r6, #8
 8023f3c:	709e      	strb	r6, [r3, #2]
 8023f3e:	b00d      	add	sp, #52	; 0x34
 8023f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f44:	f1bc 0f0f 	cmp.w	ip, #15
 8023f48:	f63f af60 	bhi.w	8023e0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8023f4c:	4626      	mov	r6, r4
 8023f4e:	4602      	mov	r2, r0
 8023f50:	460d      	mov	r5, r1
 8023f52:	46a6      	mov	lr, r4
 8023f54:	9002      	str	r0, [sp, #8]
 8023f56:	4688      	mov	r8, r1
 8023f58:	e783      	b.n	8023e62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8023f5a:	bf00      	nop
 8023f5c:	0802d527 	.word	0x0802d527
 8023f60:	0802da1e 	.word	0x0802da1e
 8023f64:	0802d5f0 	.word	0x0802d5f0

08023f68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f6c:	ed2d 8b08 	vpush	{d8-d11}
 8023f70:	b0a1      	sub	sp, #132	; 0x84
 8023f72:	eeb0 aa40 	vmov.f32	s20, s0
 8023f76:	eef0 9a60 	vmov.f32	s19, s1
 8023f7a:	9307      	str	r3, [sp, #28]
 8023f7c:	eeb0 9a41 	vmov.f32	s18, s2
 8023f80:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8023f84:	eeb0 8a62 	vmov.f32	s16, s5
 8023f88:	9210      	str	r2, [sp, #64]	; 0x40
 8023f8a:	eef0 8a43 	vmov.f32	s17, s6
 8023f8e:	9308      	str	r3, [sp, #32]
 8023f90:	eef0 ba44 	vmov.f32	s23, s8
 8023f94:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8023f98:	eeb0 ba64 	vmov.f32	s22, s9
 8023f9c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8023f9e:	eef0 aa45 	vmov.f32	s21, s10
 8023fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8023fa4:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8023fa8:	901f      	str	r0, [sp, #124]	; 0x7c
 8023faa:	930f      	str	r3, [sp, #60]	; 0x3c
 8023fac:	6850      	ldr	r0, [r2, #4]
 8023fae:	910e      	str	r1, [sp, #56]	; 0x38
 8023fb0:	6812      	ldr	r2, [r2, #0]
 8023fb2:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8023fb6:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8023fba:	fb00 1303 	mla	r3, r0, r3, r1
 8023fbe:	9908      	ldr	r1, [sp, #32]
 8023fc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023fc4:	18d3      	adds	r3, r2, r3
 8023fc6:	2203      	movs	r2, #3
 8023fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8023fca:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8023fcc:	681b      	ldr	r3, [r3, #0]
 8023fce:	930c      	str	r3, [sp, #48]	; 0x30
 8023fd0:	f06f 0304 	mvn.w	r3, #4
 8023fd4:	fb11 3302 	smlabb	r3, r1, r2, r3
 8023fd8:	930d      	str	r3, [sp, #52]	; 0x34
 8023fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023fdc:	43db      	mvns	r3, r3
 8023fde:	b2db      	uxtb	r3, r3
 8023fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8023fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023fe4:	2b00      	cmp	r3, #0
 8023fe6:	dc03      	bgt.n	8023ff0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8023fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	f340 81df 	ble.w	80243ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023ff0:	9b07      	ldr	r3, [sp, #28]
 8023ff2:	2b00      	cmp	r3, #0
 8023ff4:	f340 80f2 	ble.w	80241dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8023ff8:	ea5f 4228 	movs.w	r2, r8, asr #16
 8023ffc:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024000:	d430      	bmi.n	8024064 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024002:	1c51      	adds	r1, r2, #1
 8024004:	9808      	ldr	r0, [sp, #32]
 8024006:	4281      	cmp	r1, r0
 8024008:	da2f      	bge.n	802406a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802400a:	2b00      	cmp	r3, #0
 802400c:	db2d      	blt.n	802406a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802400e:	1c59      	adds	r1, r3, #1
 8024010:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024012:	4288      	cmp	r0, r1
 8024014:	dd29      	ble.n	802406a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8024016:	9b07      	ldr	r3, [sp, #28]
 8024018:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802401a:	3b01      	subs	r3, #1
 802401c:	fb02 8203 	mla	r2, r2, r3, r8
 8024020:	1412      	asrs	r2, r2, #16
 8024022:	d42d      	bmi.n	8024080 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024024:	3201      	adds	r2, #1
 8024026:	9908      	ldr	r1, [sp, #32]
 8024028:	4291      	cmp	r1, r2
 802402a:	dd29      	ble.n	8024080 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802402c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802402e:	fb02 b303 	mla	r3, r2, r3, fp
 8024032:	141b      	asrs	r3, r3, #16
 8024034:	d424      	bmi.n	8024080 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024036:	3301      	adds	r3, #1
 8024038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802403a:	429a      	cmp	r2, r3
 802403c:	dd20      	ble.n	8024080 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802403e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024040:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024044:	1cde      	adds	r6, r3, #3
 8024046:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802404a:	f1bc 0f00 	cmp.w	ip, #0
 802404e:	f300 811f 	bgt.w	8024290 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8024052:	9b07      	ldr	r3, [sp, #28]
 8024054:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802405a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802405e:	4423      	add	r3, r4
 8024060:	9309      	str	r3, [sp, #36]	; 0x24
 8024062:	e0bd      	b.n	80241e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8024064:	1c57      	adds	r7, r2, #1
 8024066:	f040 80ae 	bne.w	80241c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802406a:	9908      	ldr	r1, [sp, #32]
 802406c:	428a      	cmp	r2, r1
 802406e:	f280 80aa 	bge.w	80241c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024072:	1c5e      	adds	r6, r3, #1
 8024074:	f2c0 80a7 	blt.w	80241c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802407a:	4293      	cmp	r3, r2
 802407c:	f280 80a3 	bge.w	80241c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024080:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8024084:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024086:	f1ba 0f00 	cmp.w	sl, #0
 802408a:	dde2      	ble.n	8024052 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802408c:	ea5f 4028 	movs.w	r0, r8, asr #16
 8024090:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8024094:	ea4f 412b 	mov.w	r1, fp, asr #16
 8024098:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802409c:	f100 80df 	bmi.w	802425e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80240a0:	1c45      	adds	r5, r0, #1
 80240a2:	9f08      	ldr	r7, [sp, #32]
 80240a4:	42af      	cmp	r7, r5
 80240a6:	f340 80dc 	ble.w	8024262 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80240aa:	2900      	cmp	r1, #0
 80240ac:	f2c0 80d9 	blt.w	8024262 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80240b0:	1c4d      	adds	r5, r1, #1
 80240b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80240b4:	42af      	cmp	r7, r5
 80240b6:	f340 80d4 	ble.w	8024262 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80240ba:	9d08      	ldr	r5, [sp, #32]
 80240bc:	fb05 0101 	mla	r1, r5, r1, r0
 80240c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80240c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80240c6:	1845      	adds	r5, r0, r1
 80240c8:	5c40      	ldrb	r0, [r0, r1]
 80240ca:	792f      	ldrb	r7, [r5, #4]
 80240cc:	7869      	ldrb	r1, [r5, #1]
 80240ce:	9711      	str	r7, [sp, #68]	; 0x44
 80240d0:	796f      	ldrb	r7, [r5, #5]
 80240d2:	f895 e002 	ldrb.w	lr, [r5, #2]
 80240d6:	f895 9003 	ldrb.w	r9, [r5, #3]
 80240da:	9712      	str	r7, [sp, #72]	; 0x48
 80240dc:	b17a      	cbz	r2, 80240fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80240de:	3505      	adds	r5, #5
 80240e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80240e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80240e4:	19ef      	adds	r7, r5, r7
 80240e6:	5d2d      	ldrb	r5, [r5, r4]
 80240e8:	787c      	ldrb	r4, [r7, #1]
 80240ea:	9513      	str	r5, [sp, #76]	; 0x4c
 80240ec:	9415      	str	r4, [sp, #84]	; 0x54
 80240ee:	78bc      	ldrb	r4, [r7, #2]
 80240f0:	9417      	str	r4, [sp, #92]	; 0x5c
 80240f2:	78fc      	ldrb	r4, [r7, #3]
 80240f4:	9414      	str	r4, [sp, #80]	; 0x50
 80240f6:	793c      	ldrb	r4, [r7, #4]
 80240f8:	9416      	str	r4, [sp, #88]	; 0x58
 80240fa:	797c      	ldrb	r4, [r7, #5]
 80240fc:	9418      	str	r4, [sp, #96]	; 0x60
 80240fe:	b29b      	uxth	r3, r3
 8024100:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024102:	b292      	uxth	r2, r2
 8024104:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8024108:	fb03 f702 	mul.w	r7, r3, r2
 802410c:	011b      	lsls	r3, r3, #4
 802410e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8024112:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8024116:	1bdb      	subs	r3, r3, r7
 8024118:	b292      	uxth	r2, r2
 802411a:	b29b      	uxth	r3, r3
 802411c:	ebac 0c02 	sub.w	ip, ip, r2
 8024120:	fb03 f909 	mul.w	r9, r3, r9
 8024124:	fa1f fc8c 	uxth.w	ip, ip
 8024128:	fb0c 9000 	mla	r0, ip, r0, r9
 802412c:	f896 9000 	ldrb.w	r9, [r6]
 8024130:	fb02 0004 	mla	r0, r2, r4, r0
 8024134:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024136:	fb07 0004 	mla	r0, r7, r4, r0
 802413a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802413c:	fb19 f904 	smulbb	r9, r9, r4
 8024140:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024144:	fb00 9005 	mla	r0, r0, r5, r9
 8024148:	b280      	uxth	r0, r0
 802414a:	f100 0901 	add.w	r9, r0, #1
 802414e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8024152:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024154:	4358      	muls	r0, r3
 8024156:	ea4f 2929 	mov.w	r9, r9, asr #8
 802415a:	fb0c 0101 	mla	r1, ip, r1, r0
 802415e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024160:	f886 9000 	strb.w	r9, [r6]
 8024164:	fb02 1100 	mla	r1, r2, r0, r1
 8024168:	9816      	ldr	r0, [sp, #88]	; 0x58
 802416a:	fb07 1100 	mla	r1, r7, r0, r1
 802416e:	7870      	ldrb	r0, [r6, #1]
 8024170:	fb10 f004 	smulbb	r0, r0, r4
 8024174:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024178:	fb01 0105 	mla	r1, r1, r5, r0
 802417c:	b289      	uxth	r1, r1
 802417e:	1c48      	adds	r0, r1, #1
 8024180:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024184:	1209      	asrs	r1, r1, #8
 8024186:	7071      	strb	r1, [r6, #1]
 8024188:	9912      	ldr	r1, [sp, #72]	; 0x48
 802418a:	434b      	muls	r3, r1
 802418c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802418e:	fb0c 330e 	mla	r3, ip, lr, r3
 8024192:	fb02 3201 	mla	r2, r2, r1, r3
 8024196:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024198:	fb07 2703 	mla	r7, r7, r3, r2
 802419c:	78b2      	ldrb	r2, [r6, #2]
 802419e:	fb12 f204 	smulbb	r2, r2, r4
 80241a2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80241a6:	fb07 2505 	mla	r5, r7, r5, r2
 80241aa:	b2ad      	uxth	r5, r5
 80241ac:	1c6f      	adds	r7, r5, #1
 80241ae:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80241b2:	122d      	asrs	r5, r5, #8
 80241b4:	70b5      	strb	r5, [r6, #2]
 80241b6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80241b8:	3603      	adds	r6, #3
 80241ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80241be:	4498      	add	r8, r3
 80241c0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80241c2:	449b      	add	fp, r3
 80241c4:	e75f      	b.n	8024086 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80241c6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80241c8:	4498      	add	r8, r3
 80241ca:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80241cc:	449b      	add	fp, r3
 80241ce:	9b07      	ldr	r3, [sp, #28]
 80241d0:	3b01      	subs	r3, #1
 80241d2:	9307      	str	r3, [sp, #28]
 80241d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241d6:	3303      	adds	r3, #3
 80241d8:	9309      	str	r3, [sp, #36]	; 0x24
 80241da:	e709      	b.n	8023ff0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80241dc:	f47f af1b 	bne.w	8024016 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80241e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	f340 80e3 	ble.w	80243ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80241e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80241ec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80241ee:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80241f2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80241f6:	eef0 6a48 	vmov.f32	s13, s16
 80241fa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80241fe:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024202:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024206:	ee16 8a90 	vmov	r8, s13
 802420a:	eef0 6a68 	vmov.f32	s13, s17
 802420e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024212:	ee16 ba90 	vmov	fp, s13
 8024216:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802421a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802421e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024222:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024226:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802422a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802422e:	ee18 2a10 	vmov	r2, s16
 8024232:	eeb0 8a47 	vmov.f32	s16, s14
 8024236:	fb92 f3f3 	sdiv	r3, r2, r3
 802423a:	ee18 2a90 	vmov	r2, s17
 802423e:	9335      	str	r3, [sp, #212]	; 0xd4
 8024240:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024242:	eef0 8a67 	vmov.f32	s17, s15
 8024246:	fb92 f3f3 	sdiv	r3, r2, r3
 802424a:	9336      	str	r3, [sp, #216]	; 0xd8
 802424c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802424e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024250:	3b01      	subs	r3, #1
 8024252:	930e      	str	r3, [sp, #56]	; 0x38
 8024254:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024256:	bf08      	it	eq
 8024258:	4613      	moveq	r3, r2
 802425a:	9307      	str	r3, [sp, #28]
 802425c:	e6c1      	b.n	8023fe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802425e:	1c45      	adds	r5, r0, #1
 8024260:	d1a9      	bne.n	80241b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024262:	9c08      	ldr	r4, [sp, #32]
 8024264:	42a0      	cmp	r0, r4
 8024266:	daa6      	bge.n	80241b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024268:	1c4c      	adds	r4, r1, #1
 802426a:	dba4      	blt.n	80241b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802426c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802426e:	428c      	cmp	r4, r1
 8024270:	dda1      	ble.n	80241b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024272:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024274:	9001      	str	r0, [sp, #4]
 8024276:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024278:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802427c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802427e:	4631      	mov	r1, r6
 8024280:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8024284:	9300      	str	r3, [sp, #0]
 8024286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024288:	9b08      	ldr	r3, [sp, #32]
 802428a:	f7ff fd5b 	bl	8023d44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802428e:	e792      	b.n	80241b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024290:	ea4f 4228 	mov.w	r2, r8, asr #16
 8024294:	9c08      	ldr	r4, [sp, #32]
 8024296:	ea4f 402b 	mov.w	r0, fp, asr #16
 802429a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 802429e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80242a2:	fb04 2000 	mla	r0, r4, r0, r2
 80242a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80242a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80242aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80242ae:	4402      	add	r2, r0
 80242b0:	5c25      	ldrb	r5, [r4, r0]
 80242b2:	7894      	ldrb	r4, [r2, #2]
 80242b4:	7850      	ldrb	r0, [r2, #1]
 80242b6:	9411      	str	r4, [sp, #68]	; 0x44
 80242b8:	7954      	ldrb	r4, [r2, #5]
 80242ba:	f892 a003 	ldrb.w	sl, [r2, #3]
 80242be:	f892 9004 	ldrb.w	r9, [r2, #4]
 80242c2:	9412      	str	r4, [sp, #72]	; 0x48
 80242c4:	b171      	cbz	r1, 80242e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80242c6:	3205      	adds	r2, #5
 80242c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80242ca:	1917      	adds	r7, r2, r4
 80242cc:	5d12      	ldrb	r2, [r2, r4]
 80242ce:	9219      	str	r2, [sp, #100]	; 0x64
 80242d0:	787a      	ldrb	r2, [r7, #1]
 80242d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80242d4:	78ba      	ldrb	r2, [r7, #2]
 80242d6:	921d      	str	r2, [sp, #116]	; 0x74
 80242d8:	78fa      	ldrb	r2, [r7, #3]
 80242da:	921a      	str	r2, [sp, #104]	; 0x68
 80242dc:	793a      	ldrb	r2, [r7, #4]
 80242de:	921c      	str	r2, [sp, #112]	; 0x70
 80242e0:	797a      	ldrb	r2, [r7, #5]
 80242e2:	921e      	str	r2, [sp, #120]	; 0x78
 80242e4:	b29b      	uxth	r3, r3
 80242e6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80242e8:	b289      	uxth	r1, r1
 80242ea:	3603      	adds	r6, #3
 80242ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80242f0:	fb03 f201 	mul.w	r2, r3, r1
 80242f4:	011b      	lsls	r3, r3, #4
 80242f6:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80242fa:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80242fe:	1a9b      	subs	r3, r3, r2
 8024300:	b289      	uxth	r1, r1
 8024302:	b29b      	uxth	r3, r3
 8024304:	1a7f      	subs	r7, r7, r1
 8024306:	fb03 fa0a 	mul.w	sl, r3, sl
 802430a:	b2bf      	uxth	r7, r7
 802430c:	fb03 f909 	mul.w	r9, r3, r9
 8024310:	fb07 a505 	mla	r5, r7, r5, sl
 8024314:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8024318:	fb07 9000 	mla	r0, r7, r0, r9
 802431c:	fb01 5504 	mla	r5, r1, r4, r5
 8024320:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8024322:	fb02 5504 	mla	r5, r2, r4, r5
 8024326:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024328:	fb1a fa04 	smulbb	sl, sl, r4
 802432c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024330:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8024332:	fb05 a50e 	mla	r5, r5, lr, sl
 8024336:	fb01 0004 	mla	r0, r1, r4, r0
 802433a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802433c:	b2ad      	uxth	r5, r5
 802433e:	fb02 0004 	mla	r0, r2, r4, r0
 8024342:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024344:	f105 0a01 	add.w	sl, r5, #1
 8024348:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802434c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024350:	122d      	asrs	r5, r5, #8
 8024352:	f806 5c06 	strb.w	r5, [r6, #-6]
 8024356:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802435a:	fb15 f504 	smulbb	r5, r5, r4
 802435e:	fb00 500e 	mla	r0, r0, lr, r5
 8024362:	b280      	uxth	r0, r0
 8024364:	1c45      	adds	r5, r0, #1
 8024366:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802436a:	1200      	asrs	r0, r0, #8
 802436c:	f806 0c05 	strb.w	r0, [r6, #-5]
 8024370:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024372:	4343      	muls	r3, r0
 8024374:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024376:	fb07 3300 	mla	r3, r7, r0, r3
 802437a:	981d      	ldr	r0, [sp, #116]	; 0x74
 802437c:	fb01 3100 	mla	r1, r1, r0, r3
 8024380:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024382:	fb02 1203 	mla	r2, r2, r3, r1
 8024386:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 802438a:	fb11 f104 	smulbb	r1, r1, r4
 802438e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024392:	fb02 120e 	mla	r2, r2, lr, r1
 8024396:	b292      	uxth	r2, r2
 8024398:	1c53      	adds	r3, r2, #1
 802439a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802439e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80243a0:	1212      	asrs	r2, r2, #8
 80243a2:	4498      	add	r8, r3
 80243a4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80243a6:	f806 2c04 	strb.w	r2, [r6, #-4]
 80243aa:	449b      	add	fp, r3
 80243ac:	e64d      	b.n	802404a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80243ae:	b021      	add	sp, #132	; 0x84
 80243b0:	ecbd 8b08 	vpop	{d8-d11}
 80243b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080243b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80243b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243bc:	b085      	sub	sp, #20
 80243be:	784d      	ldrb	r5, [r1, #1]
 80243c0:	788e      	ldrb	r6, [r1, #2]
 80243c2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80243c6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80243ca:	9403      	str	r4, [sp, #12]
 80243cc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80243d0:	780c      	ldrb	r4, [r1, #0]
 80243d2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80243d6:	fb07 ce03 	mla	lr, r7, r3, ip
 80243da:	2f00      	cmp	r7, #0
 80243dc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80243e0:	eb02 0b0e 	add.w	fp, r2, lr
 80243e4:	db56      	blt.n	8024494 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80243e6:	45b9      	cmp	r9, r7
 80243e8:	dd54      	ble.n	8024494 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80243ea:	f1bc 0f00 	cmp.w	ip, #0
 80243ee:	db4d      	blt.n	802448c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80243f0:	4563      	cmp	r3, ip
 80243f2:	dd4b      	ble.n	802448c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80243f4:	f812 200e 	ldrb.w	r2, [r2, lr]
 80243f8:	9200      	str	r2, [sp, #0]
 80243fa:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80243fe:	9201      	str	r2, [sp, #4]
 8024400:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8024404:	9202      	str	r2, [sp, #8]
 8024406:	f11c 0201 	adds.w	r2, ip, #1
 802440a:	d44a      	bmi.n	80244a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802440c:	4293      	cmp	r3, r2
 802440e:	dd48      	ble.n	80244a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8024410:	2800      	cmp	r0, #0
 8024412:	d046      	beq.n	80244a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8024414:	f89b e003 	ldrb.w	lr, [fp, #3]
 8024418:	f89b 8004 	ldrb.w	r8, [fp, #4]
 802441c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8024420:	3701      	adds	r7, #1
 8024422:	d446      	bmi.n	80244b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8024424:	45b9      	cmp	r9, r7
 8024426:	dd44      	ble.n	80244b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8024428:	9a03      	ldr	r2, [sp, #12]
 802442a:	2a00      	cmp	r2, #0
 802442c:	d045      	beq.n	80244ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802442e:	f1bc 0f00 	cmp.w	ip, #0
 8024432:	db3a      	blt.n	80244aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8024434:	4563      	cmp	r3, ip
 8024436:	dd38      	ble.n	80244aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8024438:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802443c:	f04f 0903 	mov.w	r9, #3
 8024440:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8024444:	fb03 b209 	mla	r2, r3, r9, fp
 8024448:	fb03 b909 	mla	r9, r3, r9, fp
 802444c:	7852      	ldrb	r2, [r2, #1]
 802444e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8024452:	f11c 0c01 	adds.w	ip, ip, #1
 8024456:	d40d      	bmi.n	8024474 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8024458:	4563      	cmp	r3, ip
 802445a:	dd0b      	ble.n	8024474 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802445c:	b160      	cbz	r0, 8024478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802445e:	2603      	movs	r6, #3
 8024460:	fb13 6406 	smlabb	r4, r3, r6, r6
 8024464:	fb03 b506 	mla	r5, r3, r6, fp
 8024468:	fb03 b306 	mla	r3, r3, r6, fp
 802446c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8024470:	792d      	ldrb	r5, [r5, #4]
 8024472:	795e      	ldrb	r6, [r3, #5]
 8024474:	280f      	cmp	r0, #15
 8024476:	d802      	bhi.n	802447e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8024478:	9b03      	ldr	r3, [sp, #12]
 802447a:	2b0f      	cmp	r3, #15
 802447c:	d922      	bls.n	80244c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802447e:	4b2f      	ldr	r3, [pc, #188]	; (802453c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8024480:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024484:	4a2e      	ldr	r2, [pc, #184]	; (8024540 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8024486:	482f      	ldr	r0, [pc, #188]	; (8024544 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8024488:	f003 ff96 	bl	80283b8 <__assert_func>
 802448c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024490:	9400      	str	r4, [sp, #0]
 8024492:	e7b8      	b.n	8024406 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8024494:	46b2      	mov	sl, r6
 8024496:	46a8      	mov	r8, r5
 8024498:	46a6      	mov	lr, r4
 802449a:	9400      	str	r4, [sp, #0]
 802449c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80244a0:	e7be      	b.n	8024420 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80244a2:	46b2      	mov	sl, r6
 80244a4:	46a8      	mov	r8, r5
 80244a6:	46a6      	mov	lr, r4
 80244a8:	e7ba      	b.n	8024420 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80244aa:	46b1      	mov	r9, r6
 80244ac:	462a      	mov	r2, r5
 80244ae:	4627      	mov	r7, r4
 80244b0:	e7cf      	b.n	8024452 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80244b2:	46b1      	mov	r9, r6
 80244b4:	462a      	mov	r2, r5
 80244b6:	4627      	mov	r7, r4
 80244b8:	e7dc      	b.n	8024474 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80244ba:	280f      	cmp	r0, #15
 80244bc:	d8df      	bhi.n	802447e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80244be:	46b1      	mov	r9, r6
 80244c0:	462a      	mov	r2, r5
 80244c2:	4627      	mov	r7, r4
 80244c4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80244c8:	b280      	uxth	r0, r0
 80244ca:	fb00 f30b 	mul.w	r3, r0, fp
 80244ce:	0100      	lsls	r0, r0, #4
 80244d0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80244d4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80244d8:	1ac0      	subs	r0, r0, r3
 80244da:	fa1f fb8b 	uxth.w	fp, fp
 80244de:	b280      	uxth	r0, r0
 80244e0:	ebac 0c0b 	sub.w	ip, ip, fp
 80244e4:	9003      	str	r0, [sp, #12]
 80244e6:	fa1f fc8c 	uxth.w	ip, ip
 80244ea:	fb00 fe0e 	mul.w	lr, r0, lr
 80244ee:	9800      	ldr	r0, [sp, #0]
 80244f0:	fb0c ee00 	mla	lr, ip, r0, lr
 80244f4:	9803      	ldr	r0, [sp, #12]
 80244f6:	fb00 f808 	mul.w	r8, r0, r8
 80244fa:	9801      	ldr	r0, [sp, #4]
 80244fc:	fb0b ee07 	mla	lr, fp, r7, lr
 8024500:	fb0c 8800 	mla	r8, ip, r0, r8
 8024504:	fb03 ee04 	mla	lr, r3, r4, lr
 8024508:	fb0b 8202 	mla	r2, fp, r2, r8
 802450c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024510:	fb03 2505 	mla	r5, r3, r5, r2
 8024514:	9a03      	ldr	r2, [sp, #12]
 8024516:	f881 e000 	strb.w	lr, [r1]
 802451a:	fb02 f00a 	mul.w	r0, r2, sl
 802451e:	9a02      	ldr	r2, [sp, #8]
 8024520:	122d      	asrs	r5, r5, #8
 8024522:	fb0c 0c02 	mla	ip, ip, r2, r0
 8024526:	704d      	strb	r5, [r1, #1]
 8024528:	fb0b c909 	mla	r9, fp, r9, ip
 802452c:	fb03 9606 	mla	r6, r3, r6, r9
 8024530:	1236      	asrs	r6, r6, #8
 8024532:	708e      	strb	r6, [r1, #2]
 8024534:	b005      	add	sp, #20
 8024536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802453a:	bf00      	nop
 802453c:	0802d527 	.word	0x0802d527
 8024540:	0802da1e 	.word	0x0802da1e
 8024544:	0802d5f0 	.word	0x0802d5f0

08024548 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802454c:	ed2d 8b0a 	vpush	{d8-d12}
 8024550:	b09d      	sub	sp, #116	; 0x74
 8024552:	eeb0 aa40 	vmov.f32	s20, s0
 8024556:	eef0 9a60 	vmov.f32	s19, s1
 802455a:	9306      	str	r3, [sp, #24]
 802455c:	eeb0 9a41 	vmov.f32	s18, s2
 8024560:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8024564:	eeb0 8a62 	vmov.f32	s16, s5
 8024568:	901b      	str	r0, [sp, #108]	; 0x6c
 802456a:	eef0 8a43 	vmov.f32	s17, s6
 802456e:	9307      	str	r3, [sp, #28]
 8024570:	eeb0 ca44 	vmov.f32	s24, s8
 8024574:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8024578:	eef0 ba64 	vmov.f32	s23, s9
 802457c:	eeb0 ba45 	vmov.f32	s22, s10
 8024580:	9309      	str	r3, [sp, #36]	; 0x24
 8024582:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024586:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802458a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802458c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024590:	6850      	ldr	r0, [r2, #4]
 8024592:	6812      	ldr	r2, [r2, #0]
 8024594:	fb00 1303 	mla	r3, r0, r3, r1
 8024598:	9907      	ldr	r1, [sp, #28]
 802459a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802459e:	18d3      	adds	r3, r2, r3
 80245a0:	2203      	movs	r2, #3
 80245a2:	9308      	str	r3, [sp, #32]
 80245a4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	930a      	str	r3, [sp, #40]	; 0x28
 80245aa:	f06f 0304 	mvn.w	r3, #4
 80245ae:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80245b2:	fb11 3302 	smlabb	r3, r1, r2, r3
 80245b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80245b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80245ba:	2b00      	cmp	r3, #0
 80245bc:	dc03      	bgt.n	80245c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80245be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80245c0:	2b00      	cmp	r3, #0
 80245c2:	f340 8193 	ble.w	80248ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80245c6:	9b06      	ldr	r3, [sp, #24]
 80245c8:	2b00      	cmp	r3, #0
 80245ca:	f340 80d0 	ble.w	802476e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80245ce:	1432      	asrs	r2, r6, #16
 80245d0:	ea4f 4325 	mov.w	r3, r5, asr #16
 80245d4:	d42f      	bmi.n	8024636 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80245d6:	1c51      	adds	r1, r2, #1
 80245d8:	9807      	ldr	r0, [sp, #28]
 80245da:	4281      	cmp	r1, r0
 80245dc:	da2e      	bge.n	802463c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80245de:	2b00      	cmp	r3, #0
 80245e0:	db2c      	blt.n	802463c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80245e2:	1c59      	adds	r1, r3, #1
 80245e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80245e6:	4288      	cmp	r0, r1
 80245e8:	dd28      	ble.n	802463c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80245ea:	9b06      	ldr	r3, [sp, #24]
 80245ec:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80245ee:	3b01      	subs	r3, #1
 80245f0:	fb02 6203 	mla	r2, r2, r3, r6
 80245f4:	1412      	asrs	r2, r2, #16
 80245f6:	d42c      	bmi.n	8024652 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80245f8:	3201      	adds	r2, #1
 80245fa:	9907      	ldr	r1, [sp, #28]
 80245fc:	4291      	cmp	r1, r2
 80245fe:	dd28      	ble.n	8024652 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8024600:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8024602:	fb02 5303 	mla	r3, r2, r3, r5
 8024606:	141b      	asrs	r3, r3, #16
 8024608:	d423      	bmi.n	8024652 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802460a:	3301      	adds	r3, #1
 802460c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802460e:	429a      	cmp	r2, r3
 8024610:	dd1f      	ble.n	8024652 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8024612:	9b08      	ldr	r3, [sp, #32]
 8024614:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024618:	f103 0c03 	add.w	ip, r3, #3
 802461c:	f1be 0f00 	cmp.w	lr, #0
 8024620:	f300 80fa 	bgt.w	8024818 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8024624:	9b06      	ldr	r3, [sp, #24]
 8024626:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802462a:	9b08      	ldr	r3, [sp, #32]
 802462c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024630:	4423      	add	r3, r4
 8024632:	9308      	str	r3, [sp, #32]
 8024634:	e09d      	b.n	8024772 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8024636:	1c51      	adds	r1, r2, #1
 8024638:	f040 808e 	bne.w	8024758 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802463c:	9907      	ldr	r1, [sp, #28]
 802463e:	428a      	cmp	r2, r1
 8024640:	f280 808a 	bge.w	8024758 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024644:	1c5f      	adds	r7, r3, #1
 8024646:	f2c0 8087 	blt.w	8024758 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802464a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802464c:	4293      	cmp	r3, r2
 802464e:	f280 8083 	bge.w	8024758 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024652:	9f06      	ldr	r7, [sp, #24]
 8024654:	f8dd a020 	ldr.w	sl, [sp, #32]
 8024658:	2f00      	cmp	r7, #0
 802465a:	dde3      	ble.n	8024624 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 802465c:	1432      	asrs	r2, r6, #16
 802465e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024662:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024666:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802466a:	f100 80bf 	bmi.w	80247ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 802466e:	1c50      	adds	r0, r2, #1
 8024670:	9c07      	ldr	r4, [sp, #28]
 8024672:	4284      	cmp	r4, r0
 8024674:	f340 80bc 	ble.w	80247f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024678:	2b00      	cmp	r3, #0
 802467a:	f2c0 80b9 	blt.w	80247f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802467e:	1c58      	adds	r0, r3, #1
 8024680:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024682:	4284      	cmp	r4, r0
 8024684:	f340 80b4 	ble.w	80247f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024688:	9807      	ldr	r0, [sp, #28]
 802468a:	fb00 2303 	mla	r3, r0, r3, r2
 802468e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024690:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024692:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024696:	441a      	add	r2, r3
 8024698:	f810 c003 	ldrb.w	ip, [r0, r3]
 802469c:	7953      	ldrb	r3, [r2, #5]
 802469e:	7850      	ldrb	r0, [r2, #1]
 80246a0:	f892 e002 	ldrb.w	lr, [r2, #2]
 80246a4:	f892 9003 	ldrb.w	r9, [r2, #3]
 80246a8:	f892 8004 	ldrb.w	r8, [r2, #4]
 80246ac:	930e      	str	r3, [sp, #56]	; 0x38
 80246ae:	f1bb 0f00 	cmp.w	fp, #0
 80246b2:	d00f      	beq.n	80246d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80246b4:	3205      	adds	r2, #5
 80246b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80246b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80246ba:	18d3      	adds	r3, r2, r3
 80246bc:	5d12      	ldrb	r2, [r2, r4]
 80246be:	920f      	str	r2, [sp, #60]	; 0x3c
 80246c0:	785a      	ldrb	r2, [r3, #1]
 80246c2:	9211      	str	r2, [sp, #68]	; 0x44
 80246c4:	789a      	ldrb	r2, [r3, #2]
 80246c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80246c8:	78da      	ldrb	r2, [r3, #3]
 80246ca:	9210      	str	r2, [sp, #64]	; 0x40
 80246cc:	791a      	ldrb	r2, [r3, #4]
 80246ce:	795b      	ldrb	r3, [r3, #5]
 80246d0:	9212      	str	r2, [sp, #72]	; 0x48
 80246d2:	9314      	str	r3, [sp, #80]	; 0x50
 80246d4:	b28b      	uxth	r3, r1
 80246d6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80246d8:	fa1f f28b 	uxth.w	r2, fp
 80246dc:	fb03 fb02 	mul.w	fp, r3, r2
 80246e0:	011b      	lsls	r3, r3, #4
 80246e2:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80246e6:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80246ea:	eba3 030b 	sub.w	r3, r3, fp
 80246ee:	b292      	uxth	r2, r2
 80246f0:	b29b      	uxth	r3, r3
 80246f2:	1a89      	subs	r1, r1, r2
 80246f4:	fb03 f808 	mul.w	r8, r3, r8
 80246f8:	b289      	uxth	r1, r1
 80246fa:	fb03 f909 	mul.w	r9, r3, r9
 80246fe:	fb01 8800 	mla	r8, r1, r0, r8
 8024702:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024704:	fb01 990c 	mla	r9, r1, ip, r9
 8024708:	fb02 8800 	mla	r8, r2, r0, r8
 802470c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802470e:	fb02 9904 	mla	r9, r2, r4, r9
 8024712:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024714:	fb0b 8800 	mla	r8, fp, r0, r8
 8024718:	980e      	ldr	r0, [sp, #56]	; 0x38
 802471a:	fb0b 9904 	mla	r9, fp, r4, r9
 802471e:	4343      	muls	r3, r0
 8024720:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024724:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024728:	fb01 330e 	mla	r3, r1, lr, r3
 802472c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802472e:	f88a 9000 	strb.w	r9, [sl]
 8024732:	fb02 3201 	mla	r2, r2, r1, r3
 8024736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024738:	f88a 8001 	strb.w	r8, [sl, #1]
 802473c:	fb0b 2b03 	mla	fp, fp, r3, r2
 8024740:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8024744:	f88a b002 	strb.w	fp, [sl, #2]
 8024748:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802474a:	f10a 0a03 	add.w	sl, sl, #3
 802474e:	3f01      	subs	r7, #1
 8024750:	441e      	add	r6, r3
 8024752:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024754:	441d      	add	r5, r3
 8024756:	e77f      	b.n	8024658 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8024758:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802475a:	441e      	add	r6, r3
 802475c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802475e:	441d      	add	r5, r3
 8024760:	9b06      	ldr	r3, [sp, #24]
 8024762:	3b01      	subs	r3, #1
 8024764:	9306      	str	r3, [sp, #24]
 8024766:	9b08      	ldr	r3, [sp, #32]
 8024768:	3303      	adds	r3, #3
 802476a:	9308      	str	r3, [sp, #32]
 802476c:	e72b      	b.n	80245c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802476e:	f47f af3c 	bne.w	80245ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8024772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024774:	2b00      	cmp	r3, #0
 8024776:	f340 80b9 	ble.w	80248ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802477a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802477e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024780:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024784:	eef0 6a48 	vmov.f32	s13, s16
 8024788:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802478c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024790:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024794:	ee16 6a90 	vmov	r6, s13
 8024798:	eef0 6a68 	vmov.f32	s13, s17
 802479c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247a0:	ee16 5a90 	vmov	r5, s13
 80247a4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80247a8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80247ac:	ee37 8a48 	vsub.f32	s16, s14, s16
 80247b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80247b4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80247b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80247bc:	ee18 2a10 	vmov	r2, s16
 80247c0:	eeb0 8a47 	vmov.f32	s16, s14
 80247c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80247c8:	ee18 2a90 	vmov	r2, s17
 80247cc:	9333      	str	r3, [sp, #204]	; 0xcc
 80247ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80247d0:	eef0 8a67 	vmov.f32	s17, s15
 80247d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80247d8:	9334      	str	r3, [sp, #208]	; 0xd0
 80247da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80247de:	3b01      	subs	r3, #1
 80247e0:	930c      	str	r3, [sp, #48]	; 0x30
 80247e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80247e4:	bf08      	it	eq
 80247e6:	4613      	moveq	r3, r2
 80247e8:	9306      	str	r3, [sp, #24]
 80247ea:	e6e5      	b.n	80245b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80247ec:	1c54      	adds	r4, r2, #1
 80247ee:	d1ab      	bne.n	8024748 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80247f0:	9807      	ldr	r0, [sp, #28]
 80247f2:	4282      	cmp	r2, r0
 80247f4:	daa8      	bge.n	8024748 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80247f6:	1c58      	adds	r0, r3, #1
 80247f8:	dba6      	blt.n	8024748 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80247fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80247fc:	4298      	cmp	r0, r3
 80247fe:	dda3      	ble.n	8024748 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024800:	9000      	str	r0, [sp, #0]
 8024802:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024804:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8024808:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 802480c:	9b07      	ldr	r3, [sp, #28]
 802480e:	4651      	mov	r1, sl
 8024810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024812:	f7ff fdd1 	bl	80243b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8024816:	e797      	b.n	8024748 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024818:	1431      	asrs	r1, r6, #16
 802481a:	9c07      	ldr	r4, [sp, #28]
 802481c:	1428      	asrs	r0, r5, #16
 802481e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024822:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8024826:	fb04 1000 	mla	r0, r4, r0, r1
 802482a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802482c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802482e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024832:	4401      	add	r1, r0
 8024834:	5c20      	ldrb	r0, [r4, r0]
 8024836:	f891 8002 	ldrb.w	r8, [r1, #2]
 802483a:	900e      	str	r0, [sp, #56]	; 0x38
 802483c:	f891 a003 	ldrb.w	sl, [r1, #3]
 8024840:	7848      	ldrb	r0, [r1, #1]
 8024842:	f891 9004 	ldrb.w	r9, [r1, #4]
 8024846:	f891 b005 	ldrb.w	fp, [r1, #5]
 802484a:	b172      	cbz	r2, 802486a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 802484c:	3105      	adds	r1, #5
 802484e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024850:	190f      	adds	r7, r1, r4
 8024852:	5d09      	ldrb	r1, [r1, r4]
 8024854:	9115      	str	r1, [sp, #84]	; 0x54
 8024856:	7879      	ldrb	r1, [r7, #1]
 8024858:	9117      	str	r1, [sp, #92]	; 0x5c
 802485a:	78b9      	ldrb	r1, [r7, #2]
 802485c:	9119      	str	r1, [sp, #100]	; 0x64
 802485e:	78f9      	ldrb	r1, [r7, #3]
 8024860:	9116      	str	r1, [sp, #88]	; 0x58
 8024862:	7939      	ldrb	r1, [r7, #4]
 8024864:	9118      	str	r1, [sp, #96]	; 0x60
 8024866:	7979      	ldrb	r1, [r7, #5]
 8024868:	911a      	str	r1, [sp, #104]	; 0x68
 802486a:	b29b      	uxth	r3, r3
 802486c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802486e:	b292      	uxth	r2, r2
 8024870:	f10c 0c03 	add.w	ip, ip, #3
 8024874:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024878:	fb03 f102 	mul.w	r1, r3, r2
 802487c:	011b      	lsls	r3, r3, #4
 802487e:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8024882:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8024886:	1a5b      	subs	r3, r3, r1
 8024888:	b292      	uxth	r2, r2
 802488a:	b29b      	uxth	r3, r3
 802488c:	1abf      	subs	r7, r7, r2
 802488e:	fb03 f909 	mul.w	r9, r3, r9
 8024892:	b2bf      	uxth	r7, r7
 8024894:	fb03 fa0a 	mul.w	sl, r3, sl
 8024898:	fb03 f30b 	mul.w	r3, r3, fp
 802489c:	fb07 9900 	mla	r9, r7, r0, r9
 80248a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80248a2:	fb07 aa04 	mla	sl, r7, r4, sl
 80248a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80248a8:	fb02 9900 	mla	r9, r2, r0, r9
 80248ac:	9818      	ldr	r0, [sp, #96]	; 0x60
 80248ae:	fb07 3308 	mla	r3, r7, r8, r3
 80248b2:	fb01 9900 	mla	r9, r1, r0, r9
 80248b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80248b8:	fb02 aa04 	mla	sl, r2, r4, sl
 80248bc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80248be:	fb02 3200 	mla	r2, r2, r0, r3
 80248c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80248c4:	fb01 aa04 	mla	sl, r1, r4, sl
 80248c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80248cc:	fb01 2103 	mla	r1, r1, r3, r2
 80248d0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80248d2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80248d6:	f80c 9c05 	strb.w	r9, [ip, #-5]
 80248da:	1209      	asrs	r1, r1, #8
 80248dc:	441e      	add	r6, r3
 80248de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80248e0:	f80c ac06 	strb.w	sl, [ip, #-6]
 80248e4:	f80c 1c04 	strb.w	r1, [ip, #-4]
 80248e8:	441d      	add	r5, r3
 80248ea:	e697      	b.n	802461c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80248ec:	b01d      	add	sp, #116	; 0x74
 80248ee:	ecbd 8b0a 	vpop	{d8-d12}
 80248f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080248f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80248f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248fc:	b085      	sub	sp, #20
 80248fe:	7888      	ldrb	r0, [r1, #2]
 8024900:	4691      	mov	r9, r2
 8024902:	9000      	str	r0, [sp, #0]
 8024904:	7848      	ldrb	r0, [r1, #1]
 8024906:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802490a:	9001      	str	r0, [sp, #4]
 802490c:	7808      	ldrb	r0, [r1, #0]
 802490e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024912:	9002      	str	r0, [sp, #8]
 8024914:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024918:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802491c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8024920:	fb04 c603 	mla	r6, r4, r3, ip
 8024924:	2c00      	cmp	r4, #0
 8024926:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802492a:	9a00      	ldr	r2, [sp, #0]
 802492c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024930:	9a01      	ldr	r2, [sp, #4]
 8024932:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8024936:	db3a      	blt.n	80249ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8024938:	45a0      	cmp	r8, r4
 802493a:	dd38      	ble.n	80249ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 802493c:	f1bc 0f00 	cmp.w	ip, #0
 8024940:	db33      	blt.n	80249aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8024942:	4563      	cmp	r3, ip
 8024944:	dd31      	ble.n	80249aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8024946:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802494a:	f11c 0601 	adds.w	r6, ip, #1
 802494e:	d431      	bmi.n	80249b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024950:	42b3      	cmp	r3, r6
 8024952:	dd2f      	ble.n	80249b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024954:	b375      	cbz	r5, 80249b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024956:	f8de 6004 	ldr.w	r6, [lr, #4]
 802495a:	3401      	adds	r4, #1
 802495c:	d42e      	bmi.n	80249bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802495e:	45a0      	cmp	r8, r4
 8024960:	dd2c      	ble.n	80249bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024962:	b35f      	cbz	r7, 80249bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024964:	f1bc 0f00 	cmp.w	ip, #0
 8024968:	db26      	blt.n	80249b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802496a:	4563      	cmp	r3, ip
 802496c:	dd24      	ble.n	80249b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802496e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8024972:	f11c 0c01 	adds.w	ip, ip, #1
 8024976:	d405      	bmi.n	8024984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024978:	4563      	cmp	r3, ip
 802497a:	dd03      	ble.n	8024984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802497c:	b115      	cbz	r5, 8024984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802497e:	3301      	adds	r3, #1
 8024980:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024984:	2d0f      	cmp	r5, #15
 8024986:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802498a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802498e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024992:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024996:	d801      	bhi.n	802499c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8024998:	2f0f      	cmp	r7, #15
 802499a:	d911      	bls.n	80249c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 802499c:	4b80      	ldr	r3, [pc, #512]	; (8024ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802499e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80249a2:	4a80      	ldr	r2, [pc, #512]	; (8024ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80249a4:	4880      	ldr	r0, [pc, #512]	; (8024ba8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80249a6:	f003 fd07 	bl	80283b8 <__assert_func>
 80249aa:	4602      	mov	r2, r0
 80249ac:	e7cd      	b.n	802494a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80249ae:	4606      	mov	r6, r0
 80249b0:	4602      	mov	r2, r0
 80249b2:	e7d2      	b.n	802495a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80249b4:	4606      	mov	r6, r0
 80249b6:	e7d0      	b.n	802495a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80249b8:	4604      	mov	r4, r0
 80249ba:	e7da      	b.n	8024972 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 80249bc:	4604      	mov	r4, r0
 80249be:	e7e1      	b.n	8024984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80249c0:	b2ab      	uxth	r3, r5
 80249c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80249c6:	b2bf      	uxth	r7, r7
 80249c8:	fb03 fe07 	mul.w	lr, r3, r7
 80249cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80249d0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80249d4:	eba3 0c0e 	sub.w	ip, r3, lr
 80249d8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80249dc:	b2bf      	uxth	r7, r7
 80249de:	fa1f fc8c 	uxth.w	ip, ip
 80249e2:	eba5 0507 	sub.w	r5, r5, r7
 80249e6:	fb0c f30a 	mul.w	r3, ip, sl
 80249ea:	b2ad      	uxth	r5, r5
 80249ec:	fb05 330b 	mla	r3, r5, fp, r3
 80249f0:	fb07 3309 	mla	r3, r7, r9, r3
 80249f4:	fb0e 3308 	mla	r3, lr, r8, r3
 80249f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80249fc:	9303      	str	r3, [sp, #12]
 80249fe:	d018      	beq.n	8024a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8024a00:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024a04:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024a08:	fb0b f303 	mul.w	r3, fp, r3
 8024a0c:	fb0b fb02 	mul.w	fp, fp, r2
 8024a10:	0a1a      	lsrs	r2, r3, #8
 8024a12:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024a16:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024a1a:	441a      	add	r2, r3
 8024a1c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8024a20:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8024a24:	0a12      	lsrs	r2, r2, #8
 8024a26:	0a1b      	lsrs	r3, r3, #8
 8024a28:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024a2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a30:	431a      	orrs	r2, r3
 8024a32:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024a36:	d019      	beq.n	8024a6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8024a38:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024a3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024a40:	fb0a fb0b 	mul.w	fp, sl, fp
 8024a44:	fb0a fa06 	mul.w	sl, sl, r6
 8024a48:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024a4c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024a50:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8024a54:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024a58:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024a5c:	445e      	add	r6, fp
 8024a5e:	0a1b      	lsrs	r3, r3, #8
 8024a60:	0a36      	lsrs	r6, r6, #8
 8024a62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024a6a:	431e      	orrs	r6, r3
 8024a6c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024a70:	d019      	beq.n	8024aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8024a72:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024a76:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024a7a:	fb09 fa0a 	mul.w	sl, r9, sl
 8024a7e:	fb09 f904 	mul.w	r9, r9, r4
 8024a82:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024a86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024a8a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8024a8e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024a92:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024a96:	4454      	add	r4, sl
 8024a98:	0a1b      	lsrs	r3, r3, #8
 8024a9a:	0a24      	lsrs	r4, r4, #8
 8024a9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024aa0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024aa4:	431c      	orrs	r4, r3
 8024aa6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024aaa:	d019      	beq.n	8024ae0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8024aac:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8024ab0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024ab4:	fb08 f909 	mul.w	r9, r8, r9
 8024ab8:	fb08 f800 	mul.w	r8, r8, r0
 8024abc:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8024ac0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024ac4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024ac8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024acc:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8024ad0:	4448      	add	r0, r9
 8024ad2:	0a1b      	lsrs	r3, r3, #8
 8024ad4:	0a00      	lsrs	r0, r0, #8
 8024ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ada:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024ade:	4318      	orrs	r0, r3
 8024ae0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024ae4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024ae8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024aec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024af0:	fb0c f808 	mul.w	r8, ip, r8
 8024af4:	fb0c f606 	mul.w	r6, ip, r6
 8024af8:	fb05 8803 	mla	r8, r5, r3, r8
 8024afc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024b00:	fb05 6202 	mla	r2, r5, r2, r6
 8024b04:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024b08:	fb07 8803 	mla	r8, r7, r3, r8
 8024b0c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8024b10:	fb07 2704 	mla	r7, r7, r4, r2
 8024b14:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024b18:	fb0e 8303 	mla	r3, lr, r3, r8
 8024b1c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8024b20:	fb0e 7e00 	mla	lr, lr, r0, r7
 8024b24:	9803      	ldr	r0, [sp, #12]
 8024b26:	b292      	uxth	r2, r2
 8024b28:	9c02      	ldr	r4, [sp, #8]
 8024b2a:	0a1b      	lsrs	r3, r3, #8
 8024b2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024b30:	4350      	muls	r0, r2
 8024b32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b36:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024b3a:	ea43 0e0e 	orr.w	lr, r3, lr
 8024b3e:	1c43      	adds	r3, r0, #1
 8024b40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024b44:	fa5f f08e 	uxtb.w	r0, lr
 8024b48:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024b4c:	b2db      	uxtb	r3, r3
 8024b4e:	fb14 f403 	smulbb	r4, r4, r3
 8024b52:	fb00 4002 	mla	r0, r0, r2, r4
 8024b56:	b280      	uxth	r0, r0
 8024b58:	1c44      	adds	r4, r0, #1
 8024b5a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024b5e:	9c01      	ldr	r4, [sp, #4]
 8024b60:	fb14 f403 	smulbb	r4, r4, r3
 8024b64:	1200      	asrs	r0, r0, #8
 8024b66:	7008      	strb	r0, [r1, #0]
 8024b68:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8024b6c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024b70:	fb00 4002 	mla	r0, r0, r2, r4
 8024b74:	b280      	uxth	r0, r0
 8024b76:	1c44      	adds	r4, r0, #1
 8024b78:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024b7c:	1200      	asrs	r0, r0, #8
 8024b7e:	7048      	strb	r0, [r1, #1]
 8024b80:	9800      	ldr	r0, [sp, #0]
 8024b82:	fb10 f303 	smulbb	r3, r0, r3
 8024b86:	fb0e 3202 	mla	r2, lr, r2, r3
 8024b8a:	b292      	uxth	r2, r2
 8024b8c:	f102 0e01 	add.w	lr, r2, #1
 8024b90:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024b94:	1212      	asrs	r2, r2, #8
 8024b96:	708a      	strb	r2, [r1, #2]
 8024b98:	b005      	add	sp, #20
 8024b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b9e:	bf00      	nop
 8024ba0:	0802d527 	.word	0x0802d527
 8024ba4:	0802da1e 	.word	0x0802da1e
 8024ba8:	0802d5f0 	.word	0x0802d5f0

08024bac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bb0:	ed2d 8b08 	vpush	{d8-d11}
 8024bb4:	b099      	sub	sp, #100	; 0x64
 8024bb6:	eeb0 aa40 	vmov.f32	s20, s0
 8024bba:	eef0 9a60 	vmov.f32	s19, s1
 8024bbe:	9306      	str	r3, [sp, #24]
 8024bc0:	eeb0 9a41 	vmov.f32	s18, s2
 8024bc4:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8024bc8:	eeb0 8a62 	vmov.f32	s16, s5
 8024bcc:	9216      	str	r2, [sp, #88]	; 0x58
 8024bce:	eef0 8a43 	vmov.f32	s17, s6
 8024bd2:	9307      	str	r3, [sp, #28]
 8024bd4:	eef0 ba44 	vmov.f32	s23, s8
 8024bd8:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8024bdc:	eeb0 ba64 	vmov.f32	s22, s9
 8024be0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024be2:	eef0 aa45 	vmov.f32	s21, s10
 8024be6:	9310      	str	r3, [sp, #64]	; 0x40
 8024be8:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8024bec:	9017      	str	r0, [sp, #92]	; 0x5c
 8024bee:	9112      	str	r1, [sp, #72]	; 0x48
 8024bf0:	6850      	ldr	r0, [r2, #4]
 8024bf2:	9315      	str	r3, [sp, #84]	; 0x54
 8024bf4:	6812      	ldr	r2, [r2, #0]
 8024bf6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8024bf8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024bfc:	fb00 1303 	mla	r3, r0, r3, r1
 8024c00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c04:	18d3      	adds	r3, r2, r3
 8024c06:	930a      	str	r3, [sp, #40]	; 0x28
 8024c08:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024c0a:	681b      	ldr	r3, [r3, #0]
 8024c0c:	9311      	str	r3, [sp, #68]	; 0x44
 8024c0e:	9b07      	ldr	r3, [sp, #28]
 8024c10:	009b      	lsls	r3, r3, #2
 8024c12:	930e      	str	r3, [sp, #56]	; 0x38
 8024c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024c16:	2b00      	cmp	r3, #0
 8024c18:	dc03      	bgt.n	8024c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024c1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024c1c:	2b00      	cmp	r3, #0
 8024c1e:	f340 833b 	ble.w	8025298 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8024c22:	9b06      	ldr	r3, [sp, #24]
 8024c24:	2b00      	cmp	r3, #0
 8024c26:	f340 8197 	ble.w	8024f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8024c2a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024c2c:	1423      	asrs	r3, r4, #16
 8024c2e:	1412      	asrs	r2, r2, #16
 8024c30:	d432      	bmi.n	8024c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8024c32:	1c51      	adds	r1, r2, #1
 8024c34:	9807      	ldr	r0, [sp, #28]
 8024c36:	4288      	cmp	r0, r1
 8024c38:	dd31      	ble.n	8024c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024c3a:	2b00      	cmp	r3, #0
 8024c3c:	db2f      	blt.n	8024c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024c3e:	1c59      	adds	r1, r3, #1
 8024c40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c42:	4288      	cmp	r0, r1
 8024c44:	dd2b      	ble.n	8024c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024c46:	9b06      	ldr	r3, [sp, #24]
 8024c48:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024c4a:	3b01      	subs	r3, #1
 8024c4c:	992b      	ldr	r1, [sp, #172]	; 0xac
 8024c4e:	fb02 1203 	mla	r2, r2, r3, r1
 8024c52:	1412      	asrs	r2, r2, #16
 8024c54:	d42e      	bmi.n	8024cb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024c56:	3201      	adds	r2, #1
 8024c58:	9907      	ldr	r1, [sp, #28]
 8024c5a:	4291      	cmp	r1, r2
 8024c5c:	dd2a      	ble.n	8024cb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024c5e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024c60:	fb02 4303 	mla	r3, r2, r3, r4
 8024c64:	141b      	asrs	r3, r3, #16
 8024c66:	d425      	bmi.n	8024cb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024c68:	3301      	adds	r3, #1
 8024c6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024c6c:	429a      	cmp	r2, r3
 8024c6e:	dd21      	ble.n	8024cb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c72:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8024c76:	f103 0e03 	add.w	lr, r3, #3
 8024c7a:	9b06      	ldr	r3, [sp, #24]
 8024c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8024c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024c80:	2b00      	cmp	r3, #0
 8024c82:	f300 81d2 	bgt.w	802502a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8024c86:	9b06      	ldr	r3, [sp, #24]
 8024c88:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024c92:	4423      	add	r3, r4
 8024c94:	930a      	str	r3, [sp, #40]	; 0x28
 8024c96:	e161      	b.n	8024f5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8024c98:	1c51      	adds	r1, r2, #1
 8024c9a:	f040 8150 	bne.w	8024f3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024c9e:	9907      	ldr	r1, [sp, #28]
 8024ca0:	428a      	cmp	r2, r1
 8024ca2:	f280 814c 	bge.w	8024f3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024ca6:	1c5a      	adds	r2, r3, #1
 8024ca8:	f2c0 8149 	blt.w	8024f3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024cae:	4293      	cmp	r3, r2
 8024cb0:	f280 8145 	bge.w	8024f3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024cb4:	9b06      	ldr	r3, [sp, #24]
 8024cb6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024cb8:	9314      	str	r3, [sp, #80]	; 0x50
 8024cba:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8024cbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8024cc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024cc2:	2b00      	cmp	r3, #0
 8024cc4:	dddf      	ble.n	8024c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8024cc6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024cc8:	1423      	asrs	r3, r4, #16
 8024cca:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024cce:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8024cd2:	1412      	asrs	r2, r2, #16
 8024cd4:	f100 8190 	bmi.w	8024ff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8024cd8:	1c55      	adds	r5, r2, #1
 8024cda:	9f07      	ldr	r7, [sp, #28]
 8024cdc:	42af      	cmp	r7, r5
 8024cde:	f340 818d 	ble.w	8024ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024ce2:	2b00      	cmp	r3, #0
 8024ce4:	f2c0 818a 	blt.w	8024ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024ce8:	1c5d      	adds	r5, r3, #1
 8024cea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024cec:	42af      	cmp	r7, r5
 8024cee:	f340 8185 	ble.w	8024ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024cf2:	9d07      	ldr	r5, [sp, #28]
 8024cf4:	fb03 2305 	mla	r3, r3, r5, r2
 8024cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024cfa:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8024cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024d02:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024d06:	2800      	cmp	r0, #0
 8024d08:	f000 8167 	beq.w	8024fda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024d0c:	686a      	ldr	r2, [r5, #4]
 8024d0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8024d10:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024d14:	2900      	cmp	r1, #0
 8024d16:	f000 8169 	beq.w	8024fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8024d1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024d1c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024d1e:	18aa      	adds	r2, r5, r2
 8024d20:	59ed      	ldr	r5, [r5, r7]
 8024d22:	6852      	ldr	r2, [r2, #4]
 8024d24:	9508      	str	r5, [sp, #32]
 8024d26:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8024d2a:	0e15      	lsrs	r5, r2, #24
 8024d2c:	920c      	str	r2, [sp, #48]	; 0x30
 8024d2e:	b280      	uxth	r0, r0
 8024d30:	b289      	uxth	r1, r1
 8024d32:	fb00 fb01 	mul.w	fp, r0, r1
 8024d36:	0100      	lsls	r0, r0, #4
 8024d38:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8024d3c:	eba0 090b 	sub.w	r9, r0, fp
 8024d40:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8024d44:	b289      	uxth	r1, r1
 8024d46:	fa1f f989 	uxth.w	r9, r9
 8024d4a:	1a52      	subs	r2, r2, r1
 8024d4c:	fb09 f008 	mul.w	r0, r9, r8
 8024d50:	b292      	uxth	r2, r2
 8024d52:	fb02 000c 	mla	r0, r2, ip, r0
 8024d56:	fb01 000a 	mla	r0, r1, sl, r0
 8024d5a:	fb0b 0005 	mla	r0, fp, r5, r0
 8024d5e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024d62:	2800      	cmp	r0, #0
 8024d64:	f000 80e0 	beq.w	8024f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024d68:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024d6c:	d01b      	beq.n	8024da6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8024d6e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024d72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d76:	fb0c fe0e 	mul.w	lr, ip, lr
 8024d7a:	fb0c fc03 	mul.w	ip, ip, r3
 8024d7e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024d82:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024d86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d8a:	4473      	add	r3, lr
 8024d8c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8024d90:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8024d94:	0a1b      	lsrs	r3, r3, #8
 8024d96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d9e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024da2:	ea43 030e 	orr.w	r3, r3, lr
 8024da6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024daa:	d01e      	beq.n	8024dea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8024dac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024dae:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024db2:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8024db6:	fb08 fc0c 	mul.w	ip, r8, ip
 8024dba:	fb08 f80e 	mul.w	r8, r8, lr
 8024dbe:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024dc2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024dc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024dca:	44e6      	add	lr, ip
 8024dcc:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8024dd0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8024dd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024dd8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024ddc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024de0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024de4:	ea4e 0708 	orr.w	r7, lr, r8
 8024de8:	970b      	str	r7, [sp, #44]	; 0x2c
 8024dea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024dee:	d01e      	beq.n	8024e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024df0:	9f08      	ldr	r7, [sp, #32]
 8024df2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024df6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024dfa:	fb0a f808 	mul.w	r8, sl, r8
 8024dfe:	fb0a fa0c 	mul.w	sl, sl, ip
 8024e02:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024e06:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024e0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024e0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e16:	44c6      	add	lr, r8
 8024e18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024e24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e28:	ea4e 070a 	orr.w	r7, lr, sl
 8024e2c:	9708      	str	r7, [sp, #32]
 8024e2e:	2dff      	cmp	r5, #255	; 0xff
 8024e30:	d01d      	beq.n	8024e6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8024e32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024e34:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024e38:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024e3c:	fb05 f808 	mul.w	r8, r5, r8
 8024e40:	fb05 f50c 	mul.w	r5, r5, ip
 8024e44:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024e48:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024e4c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024e50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e54:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024e58:	44c6      	add	lr, r8
 8024e5a:	0a2d      	lsrs	r5, r5, #8
 8024e5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e60:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024e64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e68:	ea4e 0505 	orr.w	r5, lr, r5
 8024e6c:	950c      	str	r5, [sp, #48]	; 0x30
 8024e6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024e70:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024e74:	9f08      	ldr	r7, [sp, #32]
 8024e76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e7a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024e7e:	fb09 f505 	mul.w	r5, r9, r5
 8024e82:	fb02 550c 	mla	r5, r2, ip, r5
 8024e86:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024e8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024e8c:	fb01 550c 	mla	r5, r1, ip, r5
 8024e90:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024e94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024e96:	fb0b 550c 	mla	r5, fp, ip, r5
 8024e9a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024e9e:	fb09 f90c 	mul.w	r9, r9, ip
 8024ea2:	0a2d      	lsrs	r5, r5, #8
 8024ea4:	fb02 9303 	mla	r3, r2, r3, r9
 8024ea8:	9a08      	ldr	r2, [sp, #32]
 8024eaa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024eae:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8024eb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024eb4:	fb01 330e 	mla	r3, r1, lr, r3
 8024eb8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024ebc:	fb0b 3b01 	mla	fp, fp, r1, r3
 8024ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024ec2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8024ec4:	4343      	muls	r3, r0
 8024ec6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024eca:	1c58      	adds	r0, r3, #1
 8024ecc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024ed0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024ed4:	ea45 050b 	orr.w	r5, r5, fp
 8024ed8:	7833      	ldrb	r3, [r6, #0]
 8024eda:	b2ea      	uxtb	r2, r5
 8024edc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024ee0:	fb12 f201 	smulbb	r2, r2, r1
 8024ee4:	b2c0      	uxtb	r0, r0
 8024ee6:	fb03 2300 	mla	r3, r3, r0, r2
 8024eea:	b29b      	uxth	r3, r3
 8024eec:	1c5a      	adds	r2, r3, #1
 8024eee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024ef2:	7872      	ldrb	r2, [r6, #1]
 8024ef4:	fb12 f200 	smulbb	r2, r2, r0
 8024ef8:	121b      	asrs	r3, r3, #8
 8024efa:	7033      	strb	r3, [r6, #0]
 8024efc:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024f00:	0c2d      	lsrs	r5, r5, #16
 8024f02:	fb03 2301 	mla	r3, r3, r1, r2
 8024f06:	b29b      	uxth	r3, r3
 8024f08:	1c5a      	adds	r2, r3, #1
 8024f0a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f0e:	121b      	asrs	r3, r3, #8
 8024f10:	7073      	strb	r3, [r6, #1]
 8024f12:	78b3      	ldrb	r3, [r6, #2]
 8024f14:	fb13 f000 	smulbb	r0, r3, r0
 8024f18:	fb05 0501 	mla	r5, r5, r1, r0
 8024f1c:	b2ad      	uxth	r5, r5
 8024f1e:	1c6b      	adds	r3, r5, #1
 8024f20:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024f24:	122d      	asrs	r5, r5, #8
 8024f26:	70b5      	strb	r5, [r6, #2]
 8024f28:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024f2a:	3603      	adds	r6, #3
 8024f2c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024f2e:	4413      	add	r3, r2
 8024f30:	932b      	str	r3, [sp, #172]	; 0xac
 8024f32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f34:	441c      	add	r4, r3
 8024f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024f38:	3b01      	subs	r3, #1
 8024f3a:	9314      	str	r3, [sp, #80]	; 0x50
 8024f3c:	e6c0      	b.n	8024cc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8024f3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024f40:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024f42:	4413      	add	r3, r2
 8024f44:	932b      	str	r3, [sp, #172]	; 0xac
 8024f46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f48:	441c      	add	r4, r3
 8024f4a:	9b06      	ldr	r3, [sp, #24]
 8024f4c:	3b01      	subs	r3, #1
 8024f4e:	9306      	str	r3, [sp, #24]
 8024f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f52:	3303      	adds	r3, #3
 8024f54:	930a      	str	r3, [sp, #40]	; 0x28
 8024f56:	e664      	b.n	8024c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024f58:	f47f ae75 	bne.w	8024c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8024f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024f5e:	2b00      	cmp	r3, #0
 8024f60:	f340 819a 	ble.w	8025298 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8024f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024f68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024f6a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024f6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024f72:	eef0 6a48 	vmov.f32	s13, s16
 8024f76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024f7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024f7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f82:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8024f86:	eef0 6a68 	vmov.f32	s13, s17
 8024f8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f8e:	ee16 4a90 	vmov	r4, s13
 8024f92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024f96:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024f9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024f9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024fa2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024fa6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024faa:	ee18 2a10 	vmov	r2, s16
 8024fae:	eeb0 8a47 	vmov.f32	s16, s14
 8024fb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fb6:	ee18 2a90 	vmov	r2, s17
 8024fba:	932d      	str	r3, [sp, #180]	; 0xb4
 8024fbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fbe:	eef0 8a67 	vmov.f32	s17, s15
 8024fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fc6:	932e      	str	r3, [sp, #184]	; 0xb8
 8024fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024fca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024fcc:	3b01      	subs	r3, #1
 8024fce:	9312      	str	r3, [sp, #72]	; 0x48
 8024fd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fd2:	bf08      	it	eq
 8024fd4:	4613      	moveq	r3, r2
 8024fd6:	9306      	str	r3, [sp, #24]
 8024fd8:	e61c      	b.n	8024c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024fda:	b151      	cbz	r1, 8024ff2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8024fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024fde:	58aa      	ldr	r2, [r5, r2]
 8024fe0:	25ff      	movs	r5, #255	; 0xff
 8024fe2:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8024fe6:	9208      	str	r2, [sp, #32]
 8024fe8:	46a8      	mov	r8, r5
 8024fea:	e6a0      	b.n	8024d2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8024fec:	25ff      	movs	r5, #255	; 0xff
 8024fee:	46aa      	mov	sl, r5
 8024ff0:	e69d      	b.n	8024d2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8024ff2:	25ff      	movs	r5, #255	; 0xff
 8024ff4:	46aa      	mov	sl, r5
 8024ff6:	e7f7      	b.n	8024fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8024ff8:	1c57      	adds	r7, r2, #1
 8024ffa:	d195      	bne.n	8024f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024ffc:	9d07      	ldr	r5, [sp, #28]
 8024ffe:	4295      	cmp	r5, r2
 8025000:	dd92      	ble.n	8024f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8025002:	1c5d      	adds	r5, r3, #1
 8025004:	db90      	blt.n	8024f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8025006:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025008:	429d      	cmp	r5, r3
 802500a:	dd8d      	ble.n	8024f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802500c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802500e:	9201      	str	r2, [sp, #4]
 8025010:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025012:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8025016:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025018:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802501a:	9300      	str	r3, [sp, #0]
 802501c:	9b07      	ldr	r3, [sp, #28]
 802501e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8025022:	4631      	mov	r1, r6
 8025024:	f7ff fc68 	bl	80248f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8025028:	e77e      	b.n	8024f28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802502a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802502c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025030:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025032:	9d07      	ldr	r5, [sp, #28]
 8025034:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025038:	1412      	asrs	r2, r2, #16
 802503a:	1423      	asrs	r3, r4, #16
 802503c:	fb05 2303 	mla	r3, r5, r3, r2
 8025040:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025042:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8025046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802504a:	0e1e      	lsrs	r6, r3, #24
 802504c:	2900      	cmp	r1, #0
 802504e:	f000 8114 	beq.w	802527a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8025052:	686a      	ldr	r2, [r5, #4]
 8025054:	920d      	str	r2, [sp, #52]	; 0x34
 8025056:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802505a:	2800      	cmp	r0, #0
 802505c:	f000 8116 	beq.w	802528c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8025060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025062:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025064:	18aa      	adds	r2, r5, r2
 8025066:	59ed      	ldr	r5, [r5, r7]
 8025068:	6852      	ldr	r2, [r2, #4]
 802506a:	9509      	str	r5, [sp, #36]	; 0x24
 802506c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025070:	0e15      	lsrs	r5, r2, #24
 8025072:	920f      	str	r2, [sp, #60]	; 0x3c
 8025074:	b289      	uxth	r1, r1
 8025076:	b280      	uxth	r0, r0
 8025078:	fb01 fa00 	mul.w	sl, r1, r0
 802507c:	0109      	lsls	r1, r1, #4
 802507e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025082:	eba1 080a 	sub.w	r8, r1, sl
 8025086:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802508a:	b280      	uxth	r0, r0
 802508c:	fa1f f888 	uxth.w	r8, r8
 8025090:	1a12      	subs	r2, r2, r0
 8025092:	fb08 f10c 	mul.w	r1, r8, ip
 8025096:	b292      	uxth	r2, r2
 8025098:	fb02 1106 	mla	r1, r2, r6, r1
 802509c:	fb00 1109 	mla	r1, r0, r9, r1
 80250a0:	fb0a 1105 	mla	r1, sl, r5, r1
 80250a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80250a8:	2900      	cmp	r1, #0
 80250aa:	f000 80da 	beq.w	8025262 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80250ae:	2eff      	cmp	r6, #255	; 0xff
 80250b0:	d016      	beq.n	80250e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80250b2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80250b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250ba:	4377      	muls	r7, r6
 80250bc:	435e      	muls	r6, r3
 80250be:	0a3b      	lsrs	r3, r7, #8
 80250c0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80250c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80250c8:	443b      	add	r3, r7
 80250ca:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80250ce:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80250d2:	0a1b      	lsrs	r3, r3, #8
 80250d4:	0a3f      	lsrs	r7, r7, #8
 80250d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80250da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80250de:	433b      	orrs	r3, r7
 80250e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80250e4:	d01d      	beq.n	8025122 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80250e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80250e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80250ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80250ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80250f2:	fb0c f606 	mul.w	r6, ip, r6
 80250f6:	fb0c fc07 	mul.w	ip, ip, r7
 80250fa:	0a37      	lsrs	r7, r6, #8
 80250fc:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025100:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025104:	4437      	add	r7, r6
 8025106:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802510a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802510e:	0a3f      	lsrs	r7, r7, #8
 8025110:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025114:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025118:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802511c:	ea47 060c 	orr.w	r6, r7, ip
 8025120:	960d      	str	r6, [sp, #52]	; 0x34
 8025122:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025126:	d01d      	beq.n	8025164 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8025128:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802512a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802512e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025132:	fb09 fc0c 	mul.w	ip, r9, ip
 8025136:	fb09 f906 	mul.w	r9, r9, r6
 802513a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802513e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025142:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8025146:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802514a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802514e:	4467      	add	r7, ip
 8025150:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025154:	0a3f      	lsrs	r7, r7, #8
 8025156:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802515a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802515e:	ea47 0609 	orr.w	r6, r7, r9
 8025162:	9609      	str	r6, [sp, #36]	; 0x24
 8025164:	2dff      	cmp	r5, #255	; 0xff
 8025166:	d01a      	beq.n	802519e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8025168:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802516a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802516e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025172:	fb05 fc0c 	mul.w	ip, r5, ip
 8025176:	4375      	muls	r5, r6
 8025178:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802517c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025180:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8025184:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025188:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802518c:	4467      	add	r7, ip
 802518e:	0a2d      	lsrs	r5, r5, #8
 8025190:	0a3f      	lsrs	r7, r7, #8
 8025192:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025196:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802519a:	433d      	orrs	r5, r7
 802519c:	950f      	str	r5, [sp, #60]	; 0x3c
 802519e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80251a0:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80251a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80251a8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80251ac:	fb08 f505 	mul.w	r5, r8, r5
 80251b0:	fb02 5506 	mla	r5, r2, r6, r5
 80251b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80251b6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80251ba:	fb00 5506 	mla	r5, r0, r6, r5
 80251be:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80251c0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80251c4:	fb0a 5506 	mla	r5, sl, r6, r5
 80251c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80251ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80251ce:	0a2d      	lsrs	r5, r5, #8
 80251d0:	fb08 f806 	mul.w	r8, r8, r6
 80251d4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80251d8:	fb02 8303 	mla	r3, r2, r3, r8
 80251dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80251de:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80251e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80251e4:	fb00 3307 	mla	r3, r0, r7, r3
 80251e8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80251ec:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80251f0:	fb01 f30b 	mul.w	r3, r1, fp
 80251f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251f8:	1c59      	adds	r1, r3, #1
 80251fa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80251fe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025202:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025206:	ea45 050c 	orr.w	r5, r5, ip
 802520a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802520e:	b2ea      	uxtb	r2, r5
 8025210:	b2c9      	uxtb	r1, r1
 8025212:	fb12 f20b 	smulbb	r2, r2, fp
 8025216:	fb03 2301 	mla	r3, r3, r1, r2
 802521a:	b29b      	uxth	r3, r3
 802521c:	1c5a      	adds	r2, r3, #1
 802521e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025222:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025226:	fb12 f201 	smulbb	r2, r2, r1
 802522a:	121b      	asrs	r3, r3, #8
 802522c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025230:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8025234:	0c2d      	lsrs	r5, r5, #16
 8025236:	fb03 230b 	mla	r3, r3, fp, r2
 802523a:	b29b      	uxth	r3, r3
 802523c:	1c5a      	adds	r2, r3, #1
 802523e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025242:	121b      	asrs	r3, r3, #8
 8025244:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025248:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802524c:	fb13 f101 	smulbb	r1, r3, r1
 8025250:	fb05 150b 	mla	r5, r5, fp, r1
 8025254:	b2ad      	uxth	r5, r5
 8025256:	1c69      	adds	r1, r5, #1
 8025258:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802525c:	122d      	asrs	r5, r5, #8
 802525e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025262:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025264:	f10e 0e03 	add.w	lr, lr, #3
 8025268:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802526a:	4413      	add	r3, r2
 802526c:	932b      	str	r3, [sp, #172]	; 0xac
 802526e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025270:	441c      	add	r4, r3
 8025272:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025274:	3b01      	subs	r3, #1
 8025276:	9313      	str	r3, [sp, #76]	; 0x4c
 8025278:	e501      	b.n	8024c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802527a:	b150      	cbz	r0, 8025292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 802527c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802527e:	58aa      	ldr	r2, [r5, r2]
 8025280:	25ff      	movs	r5, #255	; 0xff
 8025282:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8025286:	9209      	str	r2, [sp, #36]	; 0x24
 8025288:	46ac      	mov	ip, r5
 802528a:	e6f3      	b.n	8025074 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802528c:	25ff      	movs	r5, #255	; 0xff
 802528e:	46a9      	mov	r9, r5
 8025290:	e6f0      	b.n	8025074 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8025292:	25ff      	movs	r5, #255	; 0xff
 8025294:	46a9      	mov	r9, r5
 8025296:	e7f7      	b.n	8025288 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8025298:	b019      	add	sp, #100	; 0x64
 802529a:	ecbd 8b08 	vpop	{d8-d11}
 802529e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080252a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80252a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252a8:	b085      	sub	sp, #20
 80252aa:	7888      	ldrb	r0, [r1, #2]
 80252ac:	4691      	mov	r9, r2
 80252ae:	9000      	str	r0, [sp, #0]
 80252b0:	7848      	ldrb	r0, [r1, #1]
 80252b2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80252b6:	9001      	str	r0, [sp, #4]
 80252b8:	7808      	ldrb	r0, [r1, #0]
 80252ba:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80252be:	9002      	str	r0, [sp, #8]
 80252c0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80252c4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80252c8:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80252cc:	fb04 c603 	mla	r6, r4, r3, ip
 80252d0:	2c00      	cmp	r4, #0
 80252d2:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80252d6:	9a00      	ldr	r2, [sp, #0]
 80252d8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80252dc:	9a01      	ldr	r2, [sp, #4]
 80252de:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80252e2:	db3a      	blt.n	802535a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80252e4:	45a0      	cmp	r8, r4
 80252e6:	dd38      	ble.n	802535a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80252e8:	f1bc 0f00 	cmp.w	ip, #0
 80252ec:	db33      	blt.n	8025356 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80252ee:	4563      	cmp	r3, ip
 80252f0:	dd31      	ble.n	8025356 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80252f2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80252f6:	f11c 0601 	adds.w	r6, ip, #1
 80252fa:	d431      	bmi.n	8025360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80252fc:	42b3      	cmp	r3, r6
 80252fe:	dd2f      	ble.n	8025360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8025300:	b375      	cbz	r5, 8025360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8025302:	f8de 6004 	ldr.w	r6, [lr, #4]
 8025306:	3401      	adds	r4, #1
 8025308:	d42e      	bmi.n	8025368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802530a:	45a0      	cmp	r8, r4
 802530c:	dd2c      	ble.n	8025368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802530e:	b35f      	cbz	r7, 8025368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8025310:	f1bc 0f00 	cmp.w	ip, #0
 8025314:	db26      	blt.n	8025364 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8025316:	4563      	cmp	r3, ip
 8025318:	dd24      	ble.n	8025364 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802531a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802531e:	f11c 0c01 	adds.w	ip, ip, #1
 8025322:	d405      	bmi.n	8025330 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025324:	4563      	cmp	r3, ip
 8025326:	dd03      	ble.n	8025330 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025328:	b115      	cbz	r5, 8025330 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802532a:	3301      	adds	r3, #1
 802532c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8025330:	2d0f      	cmp	r5, #15
 8025332:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025336:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802533a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802533e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8025342:	d801      	bhi.n	8025348 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8025344:	2f0f      	cmp	r7, #15
 8025346:	d911      	bls.n	802536c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8025348:	4b77      	ldr	r3, [pc, #476]	; (8025528 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802534a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802534e:	4a77      	ldr	r2, [pc, #476]	; (802552c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8025350:	4877      	ldr	r0, [pc, #476]	; (8025530 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8025352:	f003 f831 	bl	80283b8 <__assert_func>
 8025356:	4602      	mov	r2, r0
 8025358:	e7cd      	b.n	80252f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802535a:	4606      	mov	r6, r0
 802535c:	4602      	mov	r2, r0
 802535e:	e7d2      	b.n	8025306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8025360:	4606      	mov	r6, r0
 8025362:	e7d0      	b.n	8025306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8025364:	4604      	mov	r4, r0
 8025366:	e7da      	b.n	802531e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8025368:	4604      	mov	r4, r0
 802536a:	e7e1      	b.n	8025330 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802536c:	b2ab      	uxth	r3, r5
 802536e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025372:	b2bf      	uxth	r7, r7
 8025374:	fb03 fe07 	mul.w	lr, r3, r7
 8025378:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802537c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025380:	eba3 0c0e 	sub.w	ip, r3, lr
 8025384:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8025388:	b2bf      	uxth	r7, r7
 802538a:	fa1f fc8c 	uxth.w	ip, ip
 802538e:	eba5 0507 	sub.w	r5, r5, r7
 8025392:	fb0c f30a 	mul.w	r3, ip, sl
 8025396:	b2ad      	uxth	r5, r5
 8025398:	fb05 330b 	mla	r3, r5, fp, r3
 802539c:	fb07 3309 	mla	r3, r7, r9, r3
 80253a0:	fb0e 3308 	mla	r3, lr, r8, r3
 80253a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80253a8:	9303      	str	r3, [sp, #12]
 80253aa:	d018      	beq.n	80253de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80253ac:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80253b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80253b4:	fb0b f303 	mul.w	r3, fp, r3
 80253b8:	fb0b fb02 	mul.w	fp, fp, r2
 80253bc:	0a1a      	lsrs	r2, r3, #8
 80253be:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80253c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80253c6:	441a      	add	r2, r3
 80253c8:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80253cc:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80253d0:	0a12      	lsrs	r2, r2, #8
 80253d2:	0a1b      	lsrs	r3, r3, #8
 80253d4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80253d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80253dc:	431a      	orrs	r2, r3
 80253de:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80253e2:	d019      	beq.n	8025418 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80253e4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80253e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80253ec:	fb0a fb0b 	mul.w	fp, sl, fp
 80253f0:	fb0a fa06 	mul.w	sl, sl, r6
 80253f4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80253f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80253fc:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8025400:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025404:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025408:	445e      	add	r6, fp
 802540a:	0a1b      	lsrs	r3, r3, #8
 802540c:	0a36      	lsrs	r6, r6, #8
 802540e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025412:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025416:	431e      	orrs	r6, r3
 8025418:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802541c:	d019      	beq.n	8025452 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 802541e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025422:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025426:	fb09 fa0a 	mul.w	sl, r9, sl
 802542a:	fb09 f904 	mul.w	r9, r9, r4
 802542e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025432:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025436:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802543a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802543e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8025442:	4454      	add	r4, sl
 8025444:	0a1b      	lsrs	r3, r3, #8
 8025446:	0a24      	lsrs	r4, r4, #8
 8025448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802544c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025450:	431c      	orrs	r4, r3
 8025452:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025456:	d019      	beq.n	802548c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8025458:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802545c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025460:	fb08 f909 	mul.w	r9, r8, r9
 8025464:	fb08 f800 	mul.w	r8, r8, r0
 8025468:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802546c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025470:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8025474:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025478:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802547c:	4448      	add	r0, r9
 802547e:	0a1b      	lsrs	r3, r3, #8
 8025480:	0a00      	lsrs	r0, r0, #8
 8025482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025486:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802548a:	4318      	orrs	r0, r3
 802548c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025490:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025494:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025498:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802549c:	fb0c f808 	mul.w	r8, ip, r8
 80254a0:	fb0c f606 	mul.w	r6, ip, r6
 80254a4:	fb05 8803 	mla	r8, r5, r3, r8
 80254a8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80254ac:	fb05 6202 	mla	r2, r5, r2, r6
 80254b0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80254b4:	fb07 8803 	mla	r8, r7, r3, r8
 80254b8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80254bc:	fb07 2704 	mla	r7, r7, r4, r2
 80254c0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80254c4:	fb0e 8303 	mla	r3, lr, r3, r8
 80254c8:	fb0e 7e00 	mla	lr, lr, r0, r7
 80254cc:	9802      	ldr	r0, [sp, #8]
 80254ce:	0a1b      	lsrs	r3, r3, #8
 80254d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80254d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80254d8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80254dc:	ea43 0e0e 	orr.w	lr, r3, lr
 80254e0:	9b03      	ldr	r3, [sp, #12]
 80254e2:	43db      	mvns	r3, r3
 80254e4:	b2db      	uxtb	r3, r3
 80254e6:	4358      	muls	r0, r3
 80254e8:	1c42      	adds	r2, r0, #1
 80254ea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80254ee:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80254f2:	700a      	strb	r2, [r1, #0]
 80254f4:	9a01      	ldr	r2, [sp, #4]
 80254f6:	435a      	muls	r2, r3
 80254f8:	1c50      	adds	r0, r2, #1
 80254fa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80254fe:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8025502:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025506:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802550a:	704a      	strb	r2, [r1, #1]
 802550c:	9a00      	ldr	r2, [sp, #0]
 802550e:	435a      	muls	r2, r3
 8025510:	4613      	mov	r3, r2
 8025512:	3201      	adds	r2, #1
 8025514:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025518:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802551c:	f881 e002 	strb.w	lr, [r1, #2]
 8025520:	b005      	add	sp, #20
 8025522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025526:	bf00      	nop
 8025528:	0802d527 	.word	0x0802d527
 802552c:	0802da1e 	.word	0x0802da1e
 8025530:	0802d5f0 	.word	0x0802d5f0

08025534 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025538:	ed2d 8b08 	vpush	{d8-d11}
 802553c:	b097      	sub	sp, #92	; 0x5c
 802553e:	eeb0 aa40 	vmov.f32	s20, s0
 8025542:	eef0 9a60 	vmov.f32	s19, s1
 8025546:	9306      	str	r3, [sp, #24]
 8025548:	eeb0 9a41 	vmov.f32	s18, s2
 802554c:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8025550:	eeb0 8a62 	vmov.f32	s16, s5
 8025554:	9214      	str	r2, [sp, #80]	; 0x50
 8025556:	eef0 8a43 	vmov.f32	s17, s6
 802555a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802555c:	eef0 ba44 	vmov.f32	s23, s8
 8025560:	9307      	str	r3, [sp, #28]
 8025562:	eeb0 ba64 	vmov.f32	s22, s9
 8025566:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802556a:	eef0 aa45 	vmov.f32	s21, s10
 802556e:	9015      	str	r0, [sp, #84]	; 0x54
 8025570:	9112      	str	r1, [sp, #72]	; 0x48
 8025572:	6850      	ldr	r0, [r2, #4]
 8025574:	9310      	str	r3, [sp, #64]	; 0x40
 8025576:	6812      	ldr	r2, [r2, #0]
 8025578:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802557a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802557e:	fb00 1303 	mla	r3, r0, r3, r1
 8025582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025586:	18d3      	adds	r3, r2, r3
 8025588:	930a      	str	r3, [sp, #40]	; 0x28
 802558a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802558c:	681b      	ldr	r3, [r3, #0]
 802558e:	9311      	str	r3, [sp, #68]	; 0x44
 8025590:	9b07      	ldr	r3, [sp, #28]
 8025592:	009b      	lsls	r3, r3, #2
 8025594:	930e      	str	r3, [sp, #56]	; 0x38
 8025596:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025598:	2b00      	cmp	r3, #0
 802559a:	dc03      	bgt.n	80255a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802559c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802559e:	2b00      	cmp	r3, #0
 80255a0:	f340 832e 	ble.w	8025c00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80255a4:	9b06      	ldr	r3, [sp, #24]
 80255a6:	2b00      	cmp	r3, #0
 80255a8:	f340 8186 	ble.w	80258b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80255ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80255ae:	1423      	asrs	r3, r4, #16
 80255b0:	1412      	asrs	r2, r2, #16
 80255b2:	d42f      	bmi.n	8025614 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80255b4:	1c51      	adds	r1, r2, #1
 80255b6:	9807      	ldr	r0, [sp, #28]
 80255b8:	4288      	cmp	r0, r1
 80255ba:	dd2e      	ble.n	802561a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80255bc:	2b00      	cmp	r3, #0
 80255be:	db2c      	blt.n	802561a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80255c0:	1c59      	adds	r1, r3, #1
 80255c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80255c4:	4288      	cmp	r0, r1
 80255c6:	dd28      	ble.n	802561a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80255c8:	9b06      	ldr	r3, [sp, #24]
 80255ca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80255cc:	3b01      	subs	r3, #1
 80255ce:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80255d0:	fb02 1203 	mla	r2, r2, r3, r1
 80255d4:	1412      	asrs	r2, r2, #16
 80255d6:	d42b      	bmi.n	8025630 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80255d8:	3201      	adds	r2, #1
 80255da:	9907      	ldr	r1, [sp, #28]
 80255dc:	4291      	cmp	r1, r2
 80255de:	dd27      	ble.n	8025630 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80255e0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80255e2:	fb02 4303 	mla	r3, r2, r3, r4
 80255e6:	141b      	asrs	r3, r3, #16
 80255e8:	d422      	bmi.n	8025630 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80255ea:	3301      	adds	r3, #1
 80255ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80255ee:	429a      	cmp	r2, r3
 80255f0:	dd1e      	ble.n	8025630 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80255f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255f4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80255f8:	1cdd      	adds	r5, r3, #3
 80255fa:	f1bb 0f00 	cmp.w	fp, #0
 80255fe:	f300 81c4 	bgt.w	802598a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8025602:	9b06      	ldr	r3, [sp, #24]
 8025604:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802560a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802560e:	4423      	add	r3, r4
 8025610:	930a      	str	r3, [sp, #40]	; 0x28
 8025612:	e153      	b.n	80258bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8025614:	1c51      	adds	r1, r2, #1
 8025616:	f040 8142 	bne.w	802589e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802561a:	9907      	ldr	r1, [sp, #28]
 802561c:	428a      	cmp	r2, r1
 802561e:	f280 813e 	bge.w	802589e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8025622:	1c5a      	adds	r2, r3, #1
 8025624:	f2c0 813b 	blt.w	802589e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8025628:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802562a:	4293      	cmp	r3, r2
 802562c:	f280 8137 	bge.w	802589e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8025630:	9b06      	ldr	r3, [sp, #24]
 8025632:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025634:	9313      	str	r3, [sp, #76]	; 0x4c
 8025636:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025638:	2b00      	cmp	r3, #0
 802563a:	dde2      	ble.n	8025602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 802563c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802563e:	1423      	asrs	r3, r4, #16
 8025640:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025642:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025646:	1409      	asrs	r1, r1, #16
 8025648:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802564c:	f100 8187 	bmi.w	802595e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8025650:	1c4e      	adds	r6, r1, #1
 8025652:	9f07      	ldr	r7, [sp, #28]
 8025654:	42b7      	cmp	r7, r6
 8025656:	f340 8184 	ble.w	8025962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802565a:	2b00      	cmp	r3, #0
 802565c:	f2c0 8181 	blt.w	8025962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8025660:	1c5e      	adds	r6, r3, #1
 8025662:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8025664:	42b7      	cmp	r7, r6
 8025666:	f340 817c 	ble.w	8025962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802566a:	9e07      	ldr	r6, [sp, #28]
 802566c:	fb03 1306 	mla	r3, r3, r6, r1
 8025670:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025672:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8025676:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802567a:	0e1f      	lsrs	r7, r3, #24
 802567c:	2a00      	cmp	r2, #0
 802567e:	f000 815c 	beq.w	802593a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8025682:	6871      	ldr	r1, [r6, #4]
 8025684:	910b      	str	r1, [sp, #44]	; 0x2c
 8025686:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802568a:	2800      	cmp	r0, #0
 802568c:	f000 815e 	beq.w	802594c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8025690:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025692:	eb06 0c01 	add.w	ip, r6, r1
 8025696:	5876      	ldr	r6, [r6, r1]
 8025698:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802569c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80256a0:	9608      	str	r6, [sp, #32]
 80256a2:	0e0e      	lsrs	r6, r1, #24
 80256a4:	910c      	str	r1, [sp, #48]	; 0x30
 80256a6:	b292      	uxth	r2, r2
 80256a8:	b280      	uxth	r0, r0
 80256aa:	fb02 fa00 	mul.w	sl, r2, r0
 80256ae:	0112      	lsls	r2, r2, #4
 80256b0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80256b4:	eba2 080a 	sub.w	r8, r2, sl
 80256b8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80256bc:	b280      	uxth	r0, r0
 80256be:	fa1f f888 	uxth.w	r8, r8
 80256c2:	1a09      	subs	r1, r1, r0
 80256c4:	fb08 f20e 	mul.w	r2, r8, lr
 80256c8:	b289      	uxth	r1, r1
 80256ca:	fb01 2207 	mla	r2, r1, r7, r2
 80256ce:	fb00 2209 	mla	r2, r0, r9, r2
 80256d2:	fb0a 2206 	mla	r2, sl, r6, r2
 80256d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80256da:	2a00      	cmp	r2, #0
 80256dc:	f000 80d4 	beq.w	8025888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80256e0:	2fff      	cmp	r7, #255	; 0xff
 80256e2:	d01a      	beq.n	802571a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80256e4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80256e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256ec:	fb07 fc0c 	mul.w	ip, r7, ip
 80256f0:	435f      	muls	r7, r3
 80256f2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80256f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80256fa:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80256fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025702:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8025706:	4463      	add	r3, ip
 8025708:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802570c:	0a1b      	lsrs	r3, r3, #8
 802570e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025712:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025716:	ea43 030b 	orr.w	r3, r3, fp
 802571a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802571e:	d01e      	beq.n	802575e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8025720:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025722:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8025726:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802572a:	fb0e fb0b 	mul.w	fp, lr, fp
 802572e:	fb0e fe07 	mul.w	lr, lr, r7
 8025732:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025736:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802573a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802573e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025742:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025746:	44dc      	add	ip, fp
 8025748:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802574c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025750:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025754:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025758:	ea4c 070e 	orr.w	r7, ip, lr
 802575c:	970b      	str	r7, [sp, #44]	; 0x2c
 802575e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025762:	d01e      	beq.n	80257a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025764:	9f08      	ldr	r7, [sp, #32]
 8025766:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802576a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802576e:	fb09 fe0e 	mul.w	lr, r9, lr
 8025772:	fb09 f907 	mul.w	r9, r9, r7
 8025776:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802577a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802577e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025782:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025786:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802578a:	44f4      	add	ip, lr
 802578c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025790:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025794:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025798:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802579c:	ea4c 0709 	orr.w	r7, ip, r9
 80257a0:	9708      	str	r7, [sp, #32]
 80257a2:	2eff      	cmp	r6, #255	; 0xff
 80257a4:	d01c      	beq.n	80257e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80257a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80257a8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80257ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80257b0:	fb06 fe0e 	mul.w	lr, r6, lr
 80257b4:	437e      	muls	r6, r7
 80257b6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80257ba:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80257be:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80257c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80257c6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80257ca:	44f4      	add	ip, lr
 80257cc:	0a36      	lsrs	r6, r6, #8
 80257ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257d2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80257d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80257da:	ea4c 0606 	orr.w	r6, ip, r6
 80257de:	960c      	str	r6, [sp, #48]	; 0x30
 80257e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80257e2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80257e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257ea:	2aff      	cmp	r2, #255	; 0xff
 80257ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80257f0:	fb08 f606 	mul.w	r6, r8, r6
 80257f4:	fb01 6607 	mla	r6, r1, r7, r6
 80257f8:	9f08      	ldr	r7, [sp, #32]
 80257fa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80257fe:	fb00 6607 	mla	r6, r0, r7, r6
 8025802:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025804:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025808:	fb0a 6607 	mla	r6, sl, r7, r6
 802580c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802580e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025812:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025816:	fb08 f807 	mul.w	r8, r8, r7
 802581a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802581e:	fb01 8303 	mla	r3, r1, r3, r8
 8025822:	9908      	ldr	r1, [sp, #32]
 8025824:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025828:	990c      	ldr	r1, [sp, #48]	; 0x30
 802582a:	fb00 330c 	mla	r3, r0, ip, r3
 802582e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8025832:	fb0a 3a00 	mla	sl, sl, r0, r3
 8025836:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802583a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802583e:	ea46 060a 	orr.w	r6, r6, sl
 8025842:	b2f0      	uxtb	r0, r6
 8025844:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025848:	ea4f 4616 	mov.w	r6, r6, lsr #16
 802584c:	f000 8084 	beq.w	8025958 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8025850:	43d2      	mvns	r2, r2
 8025852:	782b      	ldrb	r3, [r5, #0]
 8025854:	b2d2      	uxtb	r2, r2
 8025856:	fb03 f702 	mul.w	r7, r3, r2
 802585a:	1c7b      	adds	r3, r7, #1
 802585c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025860:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025864:	702b      	strb	r3, [r5, #0]
 8025866:	786b      	ldrb	r3, [r5, #1]
 8025868:	fb03 f002 	mul.w	r0, r3, r2
 802586c:	1c43      	adds	r3, r0, #1
 802586e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025872:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025876:	706b      	strb	r3, [r5, #1]
 8025878:	78ab      	ldrb	r3, [r5, #2]
 802587a:	4353      	muls	r3, r2
 802587c:	1c5a      	adds	r2, r3, #1
 802587e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025882:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025886:	70ae      	strb	r6, [r5, #2]
 8025888:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802588a:	3503      	adds	r5, #3
 802588c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802588e:	4413      	add	r3, r2
 8025890:	9329      	str	r3, [sp, #164]	; 0xa4
 8025892:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025894:	441c      	add	r4, r3
 8025896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025898:	3b01      	subs	r3, #1
 802589a:	9313      	str	r3, [sp, #76]	; 0x4c
 802589c:	e6cb      	b.n	8025636 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802589e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80258a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80258a2:	4413      	add	r3, r2
 80258a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80258a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258a8:	441c      	add	r4, r3
 80258aa:	9b06      	ldr	r3, [sp, #24]
 80258ac:	3b01      	subs	r3, #1
 80258ae:	9306      	str	r3, [sp, #24]
 80258b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80258b2:	3303      	adds	r3, #3
 80258b4:	930a      	str	r3, [sp, #40]	; 0x28
 80258b6:	e675      	b.n	80255a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80258b8:	f47f ae86 	bne.w	80255c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80258bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80258be:	2b00      	cmp	r3, #0
 80258c0:	f340 819e 	ble.w	8025c00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80258c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80258c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258ca:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80258ce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80258d2:	eef0 6a48 	vmov.f32	s13, s16
 80258d6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80258da:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80258de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258e2:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80258e6:	eef0 6a68 	vmov.f32	s13, s17
 80258ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258ee:	ee16 4a90 	vmov	r4, s13
 80258f2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80258f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80258fa:	ee37 8a48 	vsub.f32	s16, s14, s16
 80258fe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025902:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025906:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802590a:	ee18 2a10 	vmov	r2, s16
 802590e:	eeb0 8a47 	vmov.f32	s16, s14
 8025912:	fb92 f3f3 	sdiv	r3, r2, r3
 8025916:	ee18 2a90 	vmov	r2, s17
 802591a:	932b      	str	r3, [sp, #172]	; 0xac
 802591c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802591e:	eef0 8a67 	vmov.f32	s17, s15
 8025922:	fb92 f3f3 	sdiv	r3, r2, r3
 8025926:	932c      	str	r3, [sp, #176]	; 0xb0
 8025928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802592a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802592c:	3b01      	subs	r3, #1
 802592e:	9312      	str	r3, [sp, #72]	; 0x48
 8025930:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025932:	bf08      	it	eq
 8025934:	4613      	moveq	r3, r2
 8025936:	9306      	str	r3, [sp, #24]
 8025938:	e62d      	b.n	8025596 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 802593a:	b150      	cbz	r0, 8025952 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 802593c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802593e:	5871      	ldr	r1, [r6, r1]
 8025940:	26ff      	movs	r6, #255	; 0xff
 8025942:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025946:	9108      	str	r1, [sp, #32]
 8025948:	46b6      	mov	lr, r6
 802594a:	e6ac      	b.n	80256a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802594c:	26ff      	movs	r6, #255	; 0xff
 802594e:	46b1      	mov	r9, r6
 8025950:	e6a9      	b.n	80256a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8025952:	26ff      	movs	r6, #255	; 0xff
 8025954:	46b1      	mov	r9, r6
 8025956:	e7f7      	b.n	8025948 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8025958:	7028      	strb	r0, [r5, #0]
 802595a:	7069      	strb	r1, [r5, #1]
 802595c:	e793      	b.n	8025886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802595e:	1c4f      	adds	r7, r1, #1
 8025960:	d192      	bne.n	8025888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025962:	9e07      	ldr	r6, [sp, #28]
 8025964:	428e      	cmp	r6, r1
 8025966:	dd8f      	ble.n	8025888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025968:	1c5e      	adds	r6, r3, #1
 802596a:	db8d      	blt.n	8025888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802596c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802596e:	429e      	cmp	r6, r3
 8025970:	dd8a      	ble.n	8025888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025972:	9600      	str	r6, [sp, #0]
 8025974:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8025978:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802597c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802597e:	4629      	mov	r1, r5
 8025980:	9b07      	ldr	r3, [sp, #28]
 8025982:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025984:	f7ff fc8e 	bl	80252a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025988:	e77e      	b.n	8025888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802598a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802598c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025990:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025992:	9e07      	ldr	r6, [sp, #28]
 8025994:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025998:	1409      	asrs	r1, r1, #16
 802599a:	1423      	asrs	r3, r4, #16
 802599c:	fb06 1303 	mla	r3, r6, r3, r1
 80259a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80259a2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80259a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80259aa:	0e1f      	lsrs	r7, r3, #24
 80259ac:	2a00      	cmp	r2, #0
 80259ae:	f000 8113 	beq.w	8025bd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80259b2:	6871      	ldr	r1, [r6, #4]
 80259b4:	910d      	str	r1, [sp, #52]	; 0x34
 80259b6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80259ba:	2800      	cmp	r0, #0
 80259bc:	f000 8115 	beq.w	8025bea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80259c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80259c2:	eb06 0c01 	add.w	ip, r6, r1
 80259c6:	5876      	ldr	r6, [r6, r1]
 80259c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80259cc:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80259d0:	9609      	str	r6, [sp, #36]	; 0x24
 80259d2:	0e0e      	lsrs	r6, r1, #24
 80259d4:	910f      	str	r1, [sp, #60]	; 0x3c
 80259d6:	b292      	uxth	r2, r2
 80259d8:	b280      	uxth	r0, r0
 80259da:	fb02 fa00 	mul.w	sl, r2, r0
 80259de:	0112      	lsls	r2, r2, #4
 80259e0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80259e4:	eba2 080a 	sub.w	r8, r2, sl
 80259e8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80259ec:	b280      	uxth	r0, r0
 80259ee:	fa1f f888 	uxth.w	r8, r8
 80259f2:	1a09      	subs	r1, r1, r0
 80259f4:	fb08 f20e 	mul.w	r2, r8, lr
 80259f8:	b289      	uxth	r1, r1
 80259fa:	fb01 2207 	mla	r2, r1, r7, r2
 80259fe:	fb00 2209 	mla	r2, r0, r9, r2
 8025a02:	fb0a 2206 	mla	r2, sl, r6, r2
 8025a06:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025a0a:	2a00      	cmp	r2, #0
 8025a0c:	f000 80da 	beq.w	8025bc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8025a10:	2fff      	cmp	r7, #255	; 0xff
 8025a12:	d01a      	beq.n	8025a4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8025a14:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025a18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a1c:	fb07 fc0c 	mul.w	ip, r7, ip
 8025a20:	435f      	muls	r7, r3
 8025a22:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025a26:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025a2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a2e:	4463      	add	r3, ip
 8025a30:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8025a34:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8025a38:	0a1b      	lsrs	r3, r3, #8
 8025a3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025a46:	ea43 030c 	orr.w	r3, r3, ip
 8025a4a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025a4e:	d021      	beq.n	8025a94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8025a50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025a52:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025a56:	fb0e f707 	mul.w	r7, lr, r7
 8025a5a:	9713      	str	r7, [sp, #76]	; 0x4c
 8025a5c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025a5e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025a62:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8025a64:	fb0e fe0c 	mul.w	lr, lr, ip
 8025a68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a6c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025a70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a74:	44bc      	add	ip, r7
 8025a76:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8025a7a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025a7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025a8e:	ea4c 070e 	orr.w	r7, ip, lr
 8025a92:	970d      	str	r7, [sp, #52]	; 0x34
 8025a94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025a98:	d01e      	beq.n	8025ad8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8025a9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025a9c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025aa0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025aa4:	fb09 fe0e 	mul.w	lr, r9, lr
 8025aa8:	fb09 f907 	mul.w	r9, r9, r7
 8025aac:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025ab0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025ab4:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025ab8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025abc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025ac0:	44f4      	add	ip, lr
 8025ac2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ac6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025aca:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025ace:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ad2:	ea4c 0709 	orr.w	r7, ip, r9
 8025ad6:	9709      	str	r7, [sp, #36]	; 0x24
 8025ad8:	2eff      	cmp	r6, #255	; 0xff
 8025ada:	d01c      	beq.n	8025b16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8025adc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025ade:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025ae2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025ae6:	fb06 fe0e 	mul.w	lr, r6, lr
 8025aea:	437e      	muls	r6, r7
 8025aec:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025af0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025af4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025af8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025afc:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025b00:	44f4      	add	ip, lr
 8025b02:	0a36      	lsrs	r6, r6, #8
 8025b04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b08:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025b0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b10:	ea4c 0606 	orr.w	r6, ip, r6
 8025b14:	960f      	str	r6, [sp, #60]	; 0x3c
 8025b16:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025b18:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025b1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b20:	2aff      	cmp	r2, #255	; 0xff
 8025b22:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025b26:	fb08 f606 	mul.w	r6, r8, r6
 8025b2a:	fb01 6607 	mla	r6, r1, r7, r6
 8025b2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025b30:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025b34:	fb00 6607 	mla	r6, r0, r7, r6
 8025b38:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025b3a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025b3e:	fb0a 6607 	mla	r6, sl, r7, r6
 8025b42:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025b44:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025b48:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025b4c:	fb08 f807 	mul.w	r8, r8, r7
 8025b50:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025b54:	fb01 8303 	mla	r3, r1, r3, r8
 8025b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025b5a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025b5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025b60:	fb00 330c 	mla	r3, r0, ip, r3
 8025b64:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8025b68:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8025b6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b70:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025b74:	ea46 060e 	orr.w	r6, r6, lr
 8025b78:	b2f0      	uxtb	r0, r6
 8025b7a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025b7e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025b82:	d038      	beq.n	8025bf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8025b84:	43d2      	mvns	r2, r2
 8025b86:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8025b8a:	b2d2      	uxtb	r2, r2
 8025b8c:	4357      	muls	r7, r2
 8025b8e:	1c7b      	adds	r3, r7, #1
 8025b90:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025b94:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025b98:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8025b9c:	4350      	muls	r0, r2
 8025b9e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8025ba2:	1c43      	adds	r3, r0, #1
 8025ba4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025ba8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025bac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025bb0:	4353      	muls	r3, r2
 8025bb2:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025bb6:	1c5a      	adds	r2, r3, #1
 8025bb8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025bbc:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025bc0:	f805 6c01 	strb.w	r6, [r5, #-1]
 8025bc4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025bc6:	3503      	adds	r5, #3
 8025bc8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025bca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025bce:	4413      	add	r3, r2
 8025bd0:	9329      	str	r3, [sp, #164]	; 0xa4
 8025bd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025bd4:	441c      	add	r4, r3
 8025bd6:	e510      	b.n	80255fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8025bd8:	b150      	cbz	r0, 8025bf0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8025bda:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025bdc:	5871      	ldr	r1, [r6, r1]
 8025bde:	26ff      	movs	r6, #255	; 0xff
 8025be0:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025be4:	9109      	str	r1, [sp, #36]	; 0x24
 8025be6:	46b6      	mov	lr, r6
 8025be8:	e6f5      	b.n	80259d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025bea:	26ff      	movs	r6, #255	; 0xff
 8025bec:	46b1      	mov	r9, r6
 8025bee:	e6f2      	b.n	80259d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025bf0:	26ff      	movs	r6, #255	; 0xff
 8025bf2:	46b1      	mov	r9, r6
 8025bf4:	e7f7      	b.n	8025be6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8025bf6:	f805 0c03 	strb.w	r0, [r5, #-3]
 8025bfa:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025bfe:	e7df      	b.n	8025bc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8025c00:	b017      	add	sp, #92	; 0x5c
 8025c02:	ecbd 8b08 	vpop	{d8-d11}
 8025c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025c0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8025c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c10:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8025c14:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025c18:	2800      	cmp	r0, #0
 8025c1a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8025c1e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8025c22:	fb0c 0e03 	mla	lr, ip, r3, r0
 8025c26:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8025c2a:	db6b      	blt.n	8025d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025c2c:	4580      	cmp	r8, r0
 8025c2e:	dd69      	ble.n	8025d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025c30:	f1bc 0f00 	cmp.w	ip, #0
 8025c34:	db66      	blt.n	8025d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025c36:	45e1      	cmp	r9, ip
 8025c38:	dd64      	ble.n	8025d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025c3a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025c3e:	f01e 0f01 	tst.w	lr, #1
 8025c42:	5d16      	ldrb	r6, [r2, r4]
 8025c44:	bf0c      	ite	eq
 8025c46:	f006 060f 	andeq.w	r6, r6, #15
 8025c4a:	1136      	asrne	r6, r6, #4
 8025c4c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025c50:	b2f6      	uxtb	r6, r6
 8025c52:	f110 0a01 	adds.w	sl, r0, #1
 8025c56:	d457      	bmi.n	8025d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025c58:	45d0      	cmp	r8, sl
 8025c5a:	dd55      	ble.n	8025d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025c5c:	f1bc 0f00 	cmp.w	ip, #0
 8025c60:	db52      	blt.n	8025d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025c62:	45e1      	cmp	r9, ip
 8025c64:	dd50      	ble.n	8025d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025c66:	2f00      	cmp	r7, #0
 8025c68:	f000 80ac 	beq.w	8025dc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8025c6c:	f10e 0b01 	add.w	fp, lr, #1
 8025c70:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025c74:	f01b 0f01 	tst.w	fp, #1
 8025c78:	5d14      	ldrb	r4, [r2, r4]
 8025c7a:	bf0c      	ite	eq
 8025c7c:	f004 040f 	andeq.w	r4, r4, #15
 8025c80:	1124      	asrne	r4, r4, #4
 8025c82:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025c86:	b2e4      	uxtb	r4, r4
 8025c88:	2d00      	cmp	r5, #0
 8025c8a:	f000 8096 	beq.w	8025dba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8025c8e:	2800      	cmp	r0, #0
 8025c90:	f10c 0c01 	add.w	ip, ip, #1
 8025c94:	db3c      	blt.n	8025d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025c96:	4580      	cmp	r8, r0
 8025c98:	dd3a      	ble.n	8025d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025c9a:	f1bc 0f00 	cmp.w	ip, #0
 8025c9e:	db37      	blt.n	8025d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025ca0:	45e1      	cmp	r9, ip
 8025ca2:	dd35      	ble.n	8025d10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025ca4:	eb03 0b0e 	add.w	fp, r3, lr
 8025ca8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025cac:	f01b 0f01 	tst.w	fp, #1
 8025cb0:	5c10      	ldrb	r0, [r2, r0]
 8025cb2:	bf0c      	ite	eq
 8025cb4:	f000 000f 	andeq.w	r0, r0, #15
 8025cb8:	1100      	asrne	r0, r0, #4
 8025cba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025cbe:	b2c0      	uxtb	r0, r0
 8025cc0:	f1ba 0f00 	cmp.w	sl, #0
 8025cc4:	db26      	blt.n	8025d14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025cc6:	45d0      	cmp	r8, sl
 8025cc8:	dd24      	ble.n	8025d14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025cca:	f1bc 0f00 	cmp.w	ip, #0
 8025cce:	db21      	blt.n	8025d14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025cd0:	45e1      	cmp	r9, ip
 8025cd2:	dd1f      	ble.n	8025d14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025cd4:	b307      	cbz	r7, 8025d18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8025cd6:	3301      	adds	r3, #1
 8025cd8:	449e      	add	lr, r3
 8025cda:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025cde:	f01e 0f01 	tst.w	lr, #1
 8025ce2:	5cd3      	ldrb	r3, [r2, r3]
 8025ce4:	bf0c      	ite	eq
 8025ce6:	f003 030f 	andeq.w	r3, r3, #15
 8025cea:	111b      	asrne	r3, r3, #4
 8025cec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025cf0:	b2db      	uxtb	r3, r3
 8025cf2:	2f0f      	cmp	r7, #15
 8025cf4:	d911      	bls.n	8025d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8025cf6:	4b35      	ldr	r3, [pc, #212]	; (8025dcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8025cf8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025cfc:	4a34      	ldr	r2, [pc, #208]	; (8025dd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8025cfe:	4835      	ldr	r0, [pc, #212]	; (8025dd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8025d00:	f002 fb5a 	bl	80283b8 <__assert_func>
 8025d04:	2600      	movs	r6, #0
 8025d06:	e7a4      	b.n	8025c52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8025d08:	2400      	movs	r4, #0
 8025d0a:	e7bd      	b.n	8025c88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8025d0c:	463c      	mov	r4, r7
 8025d0e:	e7be      	b.n	8025c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8025d10:	2000      	movs	r0, #0
 8025d12:	e7d5      	b.n	8025cc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8025d14:	2300      	movs	r3, #0
 8025d16:	e7ec      	b.n	8025cf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8025d18:	463b      	mov	r3, r7
 8025d1a:	2d0f      	cmp	r5, #15
 8025d1c:	d8eb      	bhi.n	8025cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025d1e:	b2bf      	uxth	r7, r7
 8025d20:	b2ad      	uxth	r5, r5
 8025d22:	fb07 f205 	mul.w	r2, r7, r5
 8025d26:	013f      	lsls	r7, r7, #4
 8025d28:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025d2c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025d30:	1abf      	subs	r7, r7, r2
 8025d32:	b2ad      	uxth	r5, r5
 8025d34:	b2bf      	uxth	r7, r7
 8025d36:	ebac 0c05 	sub.w	ip, ip, r5
 8025d3a:	437c      	muls	r4, r7
 8025d3c:	fa1f fc8c 	uxth.w	ip, ip
 8025d40:	fb06 440c 	mla	r4, r6, ip, r4
 8025d44:	fb05 4400 	mla	r4, r5, r0, r4
 8025d48:	fb02 4203 	mla	r2, r2, r3, r4
 8025d4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025d50:	b38a      	cbz	r2, 8025db6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8025d52:	4b21      	ldr	r3, [pc, #132]	; (8025dd8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8025d54:	681c      	ldr	r4, [r3, #0]
 8025d56:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8025d5a:	b2e5      	uxtb	r5, r4
 8025d5c:	4353      	muls	r3, r2
 8025d5e:	1c5a      	adds	r2, r3, #1
 8025d60:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025d64:	1212      	asrs	r2, r2, #8
 8025d66:	b290      	uxth	r0, r2
 8025d68:	43d2      	mvns	r2, r2
 8025d6a:	fb15 f500 	smulbb	r5, r5, r0
 8025d6e:	b2d3      	uxtb	r3, r2
 8025d70:	780a      	ldrb	r2, [r1, #0]
 8025d72:	fb02 5203 	mla	r2, r2, r3, r5
 8025d76:	b292      	uxth	r2, r2
 8025d78:	1c55      	adds	r5, r2, #1
 8025d7a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025d7e:	784d      	ldrb	r5, [r1, #1]
 8025d80:	fb15 f503 	smulbb	r5, r5, r3
 8025d84:	1212      	asrs	r2, r2, #8
 8025d86:	700a      	strb	r2, [r1, #0]
 8025d88:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025d8c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025d90:	fb02 5200 	mla	r2, r2, r0, r5
 8025d94:	b292      	uxth	r2, r2
 8025d96:	1c55      	adds	r5, r2, #1
 8025d98:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025d9c:	1212      	asrs	r2, r2, #8
 8025d9e:	704a      	strb	r2, [r1, #1]
 8025da0:	788a      	ldrb	r2, [r1, #2]
 8025da2:	fb12 f303 	smulbb	r3, r2, r3
 8025da6:	fb04 3300 	mla	r3, r4, r0, r3
 8025daa:	b29b      	uxth	r3, r3
 8025dac:	1c5a      	adds	r2, r3, #1
 8025dae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025db2:	121b      	asrs	r3, r3, #8
 8025db4:	708b      	strb	r3, [r1, #2]
 8025db6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dba:	2f0f      	cmp	r7, #15
 8025dbc:	d89b      	bhi.n	8025cf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025dbe:	462b      	mov	r3, r5
 8025dc0:	4628      	mov	r0, r5
 8025dc2:	e7ac      	b.n	8025d1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8025dc4:	2d00      	cmp	r5, #0
 8025dc6:	d1a1      	bne.n	8025d0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8025dc8:	462c      	mov	r4, r5
 8025dca:	e7f8      	b.n	8025dbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8025dcc:	0802d527 	.word	0x0802d527
 8025dd0:	0802da1e 	.word	0x0802da1e
 8025dd4:	0802d5f0 	.word	0x0802d5f0
 8025dd8:	2000bf14 	.word	0x2000bf14

08025ddc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025de0:	ed2d 8b08 	vpush	{d8-d11}
 8025de4:	b097      	sub	sp, #92	; 0x5c
 8025de6:	eeb0 aa40 	vmov.f32	s20, s0
 8025dea:	eef0 9a60 	vmov.f32	s19, s1
 8025dee:	9308      	str	r3, [sp, #32]
 8025df0:	eeb0 9a41 	vmov.f32	s18, s2
 8025df4:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025df8:	eeb0 8a62 	vmov.f32	s16, s5
 8025dfc:	9214      	str	r2, [sp, #80]	; 0x50
 8025dfe:	eef0 8a43 	vmov.f32	s17, s6
 8025e02:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025e04:	eef0 ba44 	vmov.f32	s23, s8
 8025e08:	9309      	str	r3, [sp, #36]	; 0x24
 8025e0a:	eeb0 ba64 	vmov.f32	s22, s9
 8025e0e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8025e12:	eef0 aa45 	vmov.f32	s21, s10
 8025e16:	9015      	str	r0, [sp, #84]	; 0x54
 8025e18:	910c      	str	r1, [sp, #48]	; 0x30
 8025e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8025e1c:	6850      	ldr	r0, [r2, #4]
 8025e1e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8025e22:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025e26:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8025e2a:	fb00 1803 	mla	r8, r0, r3, r1
 8025e2e:	6813      	ldr	r3, [r2, #0]
 8025e30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025e34:	4498      	add	r8, r3
 8025e36:	f10b 0301 	add.w	r3, fp, #1
 8025e3a:	f023 0301 	bic.w	r3, r3, #1
 8025e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e40:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025e42:	681f      	ldr	r7, [r3, #0]
 8025e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e46:	2b00      	cmp	r3, #0
 8025e48:	dc03      	bgt.n	8025e52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8025e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025e4c:	2b00      	cmp	r3, #0
 8025e4e:	f340 8238 	ble.w	80262c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8025e52:	9b08      	ldr	r3, [sp, #32]
 8025e54:	2b00      	cmp	r3, #0
 8025e56:	f340 810c 	ble.w	8026072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8025e5a:	142a      	asrs	r2, r5, #16
 8025e5c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025e60:	d42c      	bmi.n	8025ebc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8025e62:	1c51      	adds	r1, r2, #1
 8025e64:	458b      	cmp	fp, r1
 8025e66:	dd2c      	ble.n	8025ec2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025e68:	2b00      	cmp	r3, #0
 8025e6a:	db2a      	blt.n	8025ec2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025e6c:	1c59      	adds	r1, r3, #1
 8025e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025e70:	4288      	cmp	r0, r1
 8025e72:	dd26      	ble.n	8025ec2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025e74:	9b08      	ldr	r3, [sp, #32]
 8025e76:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025e78:	3b01      	subs	r3, #1
 8025e7a:	fb02 5203 	mla	r2, r2, r3, r5
 8025e7e:	1412      	asrs	r2, r2, #16
 8025e80:	d429      	bmi.n	8025ed6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025e82:	3201      	adds	r2, #1
 8025e84:	4593      	cmp	fp, r2
 8025e86:	dd26      	ble.n	8025ed6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025e88:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025e8a:	fb02 6303 	mla	r3, r2, r3, r6
 8025e8e:	141b      	asrs	r3, r3, #16
 8025e90:	d421      	bmi.n	8025ed6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025e92:	3301      	adds	r3, #1
 8025e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025e96:	429a      	cmp	r2, r3
 8025e98:	dd1d      	ble.n	8025ed6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025e9a:	f108 0e03 	add.w	lr, r8, #3
 8025e9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025ea2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025ea6:	f1b9 0f00 	cmp.w	r9, #0
 8025eaa:	f300 814f 	bgt.w	802614c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8025eae:	9b08      	ldr	r3, [sp, #32]
 8025eb0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025eb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025eb8:	44a0      	add	r8, r4
 8025eba:	e0dc      	b.n	8026076 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8025ebc:	1c51      	adds	r1, r2, #1
 8025ebe:	f040 80ce 	bne.w	802605e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025ec2:	4593      	cmp	fp, r2
 8025ec4:	f340 80cb 	ble.w	802605e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025ec8:	1c5a      	adds	r2, r3, #1
 8025eca:	f2c0 80c8 	blt.w	802605e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025ed0:	4293      	cmp	r3, r2
 8025ed2:	f280 80c4 	bge.w	802605e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025ed6:	9b08      	ldr	r3, [sp, #32]
 8025ed8:	46c1      	mov	r9, r8
 8025eda:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025ede:	930d      	str	r3, [sp, #52]	; 0x34
 8025ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025ee2:	2b00      	cmp	r3, #0
 8025ee4:	dde3      	ble.n	8025eae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8025ee6:	1428      	asrs	r0, r5, #16
 8025ee8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025eec:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025ef0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025ef4:	f100 8111 	bmi.w	802611a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8025ef8:	f100 0c01 	add.w	ip, r0, #1
 8025efc:	45e3      	cmp	fp, ip
 8025efe:	f340 810e 	ble.w	802611e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025f02:	2b00      	cmp	r3, #0
 8025f04:	f2c0 810b 	blt.w	802611e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025f08:	f103 0c01 	add.w	ip, r3, #1
 8025f0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025f0e:	4564      	cmp	r4, ip
 8025f10:	f340 8105 	ble.w	802611e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025f14:	fb03 030a 	mla	r3, r3, sl, r0
 8025f18:	0858      	lsrs	r0, r3, #1
 8025f1a:	07dc      	lsls	r4, r3, #31
 8025f1c:	5c38      	ldrb	r0, [r7, r0]
 8025f1e:	bf54      	ite	pl
 8025f20:	f000 000f 	andpl.w	r0, r0, #15
 8025f24:	1100      	asrmi	r0, r0, #4
 8025f26:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025f2a:	b2c0      	uxtb	r0, r0
 8025f2c:	2a00      	cmp	r2, #0
 8025f2e:	f000 80e1 	beq.w	80260f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8025f32:	f103 0e01 	add.w	lr, r3, #1
 8025f36:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025f3a:	f01e 0f01 	tst.w	lr, #1
 8025f3e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025f42:	bf0c      	ite	eq
 8025f44:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025f48:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025f4c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025f50:	fa5f f48c 	uxtb.w	r4, ip
 8025f54:	9410      	str	r4, [sp, #64]	; 0x40
 8025f56:	b1f9      	cbz	r1, 8025f98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8025f58:	4453      	add	r3, sl
 8025f5a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025f5e:	07dc      	lsls	r4, r3, #31
 8025f60:	f103 0301 	add.w	r3, r3, #1
 8025f64:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025f68:	bf54      	ite	pl
 8025f6a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025f6e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025f72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025f76:	fa5f f48c 	uxtb.w	r4, ip
 8025f7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025f7e:	940a      	str	r4, [sp, #40]	; 0x28
 8025f80:	07dc      	lsls	r4, r3, #31
 8025f82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025f86:	bf54      	ite	pl
 8025f88:	f00c 030f 	andpl.w	r3, ip, #15
 8025f8c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8025f90:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025f94:	b2db      	uxtb	r3, r3
 8025f96:	9311      	str	r3, [sp, #68]	; 0x44
 8025f98:	b292      	uxth	r2, r2
 8025f9a:	b289      	uxth	r1, r1
 8025f9c:	0113      	lsls	r3, r2, #4
 8025f9e:	fb02 fc01 	mul.w	ip, r2, r1
 8025fa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025fa4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025fa8:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8025fac:	eba3 030c 	sub.w	r3, r3, ip
 8025fb0:	b289      	uxth	r1, r1
 8025fb2:	b29b      	uxth	r3, r3
 8025fb4:	ebae 0e01 	sub.w	lr, lr, r1
 8025fb8:	4353      	muls	r3, r2
 8025fba:	fa1f fe8e 	uxth.w	lr, lr
 8025fbe:	fb00 320e 	mla	r2, r0, lr, r3
 8025fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025fc4:	fb01 2203 	mla	r2, r1, r3, r2
 8025fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025fca:	fb0c 2203 	mla	r2, ip, r3, r2
 8025fce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025fd2:	2a00      	cmp	r2, #0
 8025fd4:	d039      	beq.n	802604a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025fd6:	4bbd      	ldr	r3, [pc, #756]	; (80262cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8025fd8:	6819      	ldr	r1, [r3, #0]
 8025fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025fdc:	fa5f fc81 	uxtb.w	ip, r1
 8025fe0:	435a      	muls	r2, r3
 8025fe2:	1c53      	adds	r3, r2, #1
 8025fe4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025fe8:	1212      	asrs	r2, r2, #8
 8025fea:	b290      	uxth	r0, r2
 8025fec:	43d2      	mvns	r2, r2
 8025fee:	fb1c fc00 	smulbb	ip, ip, r0
 8025ff2:	b2d3      	uxtb	r3, r2
 8025ff4:	f899 2000 	ldrb.w	r2, [r9]
 8025ff8:	fb02 c203 	mla	r2, r2, r3, ip
 8025ffc:	b292      	uxth	r2, r2
 8025ffe:	f102 0c01 	add.w	ip, r2, #1
 8026002:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026006:	f899 c001 	ldrb.w	ip, [r9, #1]
 802600a:	fb1c fc03 	smulbb	ip, ip, r3
 802600e:	1212      	asrs	r2, r2, #8
 8026010:	f889 2000 	strb.w	r2, [r9]
 8026014:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8026018:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802601c:	fb02 c200 	mla	r2, r2, r0, ip
 8026020:	b292      	uxth	r2, r2
 8026022:	f102 0c01 	add.w	ip, r2, #1
 8026026:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802602a:	1212      	asrs	r2, r2, #8
 802602c:	f889 2001 	strb.w	r2, [r9, #1]
 8026030:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026034:	fb12 f303 	smulbb	r3, r2, r3
 8026038:	fb01 3300 	mla	r3, r1, r0, r3
 802603c:	b29b      	uxth	r3, r3
 802603e:	1c5a      	adds	r2, r3, #1
 8026040:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026044:	121b      	asrs	r3, r3, #8
 8026046:	f889 3002 	strb.w	r3, [r9, #2]
 802604a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802604c:	f109 0903 	add.w	r9, r9, #3
 8026050:	441d      	add	r5, r3
 8026052:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026054:	441e      	add	r6, r3
 8026056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026058:	3b01      	subs	r3, #1
 802605a:	930d      	str	r3, [sp, #52]	; 0x34
 802605c:	e740      	b.n	8025ee0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802605e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026060:	f108 0803 	add.w	r8, r8, #3
 8026064:	441d      	add	r5, r3
 8026066:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026068:	441e      	add	r6, r3
 802606a:	9b08      	ldr	r3, [sp, #32]
 802606c:	3b01      	subs	r3, #1
 802606e:	9308      	str	r3, [sp, #32]
 8026070:	e6ef      	b.n	8025e52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8026072:	f47f aeff 	bne.w	8025e74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8026076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026078:	2b00      	cmp	r3, #0
 802607a:	f340 8122 	ble.w	80262c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802607e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026082:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026084:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026088:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802608c:	eef0 6a48 	vmov.f32	s13, s16
 8026090:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026094:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026098:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802609c:	ee16 5a90 	vmov	r5, s13
 80260a0:	eef0 6a68 	vmov.f32	s13, s17
 80260a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260a8:	ee16 6a90 	vmov	r6, s13
 80260ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80260b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80260b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80260b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80260bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80260c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80260c4:	ee18 2a10 	vmov	r2, s16
 80260c8:	eeb0 8a47 	vmov.f32	s16, s14
 80260cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80260d0:	ee18 2a90 	vmov	r2, s17
 80260d4:	932b      	str	r3, [sp, #172]	; 0xac
 80260d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80260d8:	eef0 8a67 	vmov.f32	s17, s15
 80260dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80260e0:	932c      	str	r3, [sp, #176]	; 0xb0
 80260e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80260e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80260e6:	3b01      	subs	r3, #1
 80260e8:	930c      	str	r3, [sp, #48]	; 0x30
 80260ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80260ec:	bf08      	it	eq
 80260ee:	4613      	moveq	r3, r2
 80260f0:	9308      	str	r3, [sp, #32]
 80260f2:	e6a7      	b.n	8025e44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80260f4:	2900      	cmp	r1, #0
 80260f6:	f43f af4f 	beq.w	8025f98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80260fa:	4453      	add	r3, sl
 80260fc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026100:	07db      	lsls	r3, r3, #31
 8026102:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026106:	bf54      	ite	pl
 8026108:	f00c 030f 	andpl.w	r3, ip, #15
 802610c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8026110:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026114:	b2db      	uxtb	r3, r3
 8026116:	930a      	str	r3, [sp, #40]	; 0x28
 8026118:	e73e      	b.n	8025f98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802611a:	1c44      	adds	r4, r0, #1
 802611c:	d195      	bne.n	802604a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802611e:	4583      	cmp	fp, r0
 8026120:	dd93      	ble.n	802604a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026122:	1c5c      	adds	r4, r3, #1
 8026124:	db91      	blt.n	802604a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026126:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026128:	429c      	cmp	r4, r3
 802612a:	dd8e      	ble.n	802604a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802612c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802612e:	9002      	str	r0, [sp, #8]
 8026130:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026132:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8026136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026138:	463a      	mov	r2, r7
 802613a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802613e:	e9cd b300 	strd	fp, r3, [sp]
 8026142:	4649      	mov	r1, r9
 8026144:	4653      	mov	r3, sl
 8026146:	f7ff fd61 	bl	8025c0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802614a:	e77e      	b.n	802604a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802614c:	142a      	asrs	r2, r5, #16
 802614e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026152:	1433      	asrs	r3, r6, #16
 8026154:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026158:	fb0a 2303 	mla	r3, sl, r3, r2
 802615c:	085a      	lsrs	r2, r3, #1
 802615e:	07dc      	lsls	r4, r3, #31
 8026160:	5cba      	ldrb	r2, [r7, r2]
 8026162:	bf54      	ite	pl
 8026164:	f002 020f 	andpl.w	r2, r2, #15
 8026168:	1112      	asrmi	r2, r2, #4
 802616a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802616e:	b2d2      	uxtb	r2, r2
 8026170:	2900      	cmp	r1, #0
 8026172:	f000 8093 	beq.w	802629c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8026176:	1c5c      	adds	r4, r3, #1
 8026178:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 802617c:	07e4      	lsls	r4, r4, #31
 802617e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026182:	bf54      	ite	pl
 8026184:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026188:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802618c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026190:	fa5f f48c 	uxtb.w	r4, ip
 8026194:	9412      	str	r4, [sp, #72]	; 0x48
 8026196:	b300      	cbz	r0, 80261da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8026198:	4453      	add	r3, sl
 802619a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802619e:	07dc      	lsls	r4, r3, #31
 80261a0:	f103 0301 	add.w	r3, r3, #1
 80261a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80261a8:	bf54      	ite	pl
 80261aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80261ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80261b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80261b6:	fa5f f48c 	uxtb.w	r4, ip
 80261ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80261be:	940b      	str	r4, [sp, #44]	; 0x2c
 80261c0:	07dc      	lsls	r4, r3, #31
 80261c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80261c6:	bf54      	ite	pl
 80261c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80261cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80261d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80261d4:	fa5f f38c 	uxtb.w	r3, ip
 80261d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80261da:	b289      	uxth	r1, r1
 80261dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80261de:	b280      	uxth	r0, r0
 80261e0:	fb01 f300 	mul.w	r3, r1, r0
 80261e4:	0109      	lsls	r1, r1, #4
 80261e6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80261ea:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80261ee:	1ac9      	subs	r1, r1, r3
 80261f0:	b280      	uxth	r0, r0
 80261f2:	b289      	uxth	r1, r1
 80261f4:	ebac 0c00 	sub.w	ip, ip, r0
 80261f8:	4361      	muls	r1, r4
 80261fa:	fa1f fc8c 	uxth.w	ip, ip
 80261fe:	fb02 120c 	mla	r2, r2, ip, r1
 8026202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026204:	fb00 2001 	mla	r0, r0, r1, r2
 8026208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802620a:	fb03 0302 	mla	r3, r3, r2, r0
 802620e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026212:	2b00      	cmp	r3, #0
 8026214:	d039      	beq.n	802628a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8026216:	4a2d      	ldr	r2, [pc, #180]	; (80262cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8026218:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802621c:	6810      	ldr	r0, [r2, #0]
 802621e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026220:	fa5f fc80 	uxtb.w	ip, r0
 8026224:	4353      	muls	r3, r2
 8026226:	1c5a      	adds	r2, r3, #1
 8026228:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802622c:	121b      	asrs	r3, r3, #8
 802622e:	b29a      	uxth	r2, r3
 8026230:	43db      	mvns	r3, r3
 8026232:	fb1c fc02 	smulbb	ip, ip, r2
 8026236:	b2db      	uxtb	r3, r3
 8026238:	fb01 c103 	mla	r1, r1, r3, ip
 802623c:	b289      	uxth	r1, r1
 802623e:	f101 0c01 	add.w	ip, r1, #1
 8026242:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026246:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802624a:	fb1c fc03 	smulbb	ip, ip, r3
 802624e:	1209      	asrs	r1, r1, #8
 8026250:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026254:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026258:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802625c:	fb01 c102 	mla	r1, r1, r2, ip
 8026260:	b289      	uxth	r1, r1
 8026262:	f101 0c01 	add.w	ip, r1, #1
 8026266:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802626a:	1209      	asrs	r1, r1, #8
 802626c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8026270:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8026274:	fb11 f303 	smulbb	r3, r1, r3
 8026278:	fb00 3002 	mla	r0, r0, r2, r3
 802627c:	b280      	uxth	r0, r0
 802627e:	1c42      	adds	r2, r0, #1
 8026280:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026284:	1200      	asrs	r0, r0, #8
 8026286:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802628a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802628c:	f10e 0e03 	add.w	lr, lr, #3
 8026290:	f109 39ff 	add.w	r9, r9, #4294967295
 8026294:	441d      	add	r5, r3
 8026296:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026298:	441e      	add	r6, r3
 802629a:	e604      	b.n	8025ea6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 802629c:	2800      	cmp	r0, #0
 802629e:	d09c      	beq.n	80261da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80262a0:	4453      	add	r3, sl
 80262a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80262a6:	07db      	lsls	r3, r3, #31
 80262a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80262ac:	bf54      	ite	pl
 80262ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80262b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80262b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80262ba:	fa5f f38c 	uxtb.w	r3, ip
 80262be:	930b      	str	r3, [sp, #44]	; 0x2c
 80262c0:	e78b      	b.n	80261da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80262c2:	b017      	add	sp, #92	; 0x5c
 80262c4:	ecbd 8b08 	vpop	{d8-d11}
 80262c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262cc:	2000bf14 	.word	0x2000bf14

080262d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80262d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262d4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80262d8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80262dc:	2800      	cmp	r0, #0
 80262de:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80262e2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80262e6:	fb0c 0e03 	mla	lr, ip, r3, r0
 80262ea:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80262ee:	db6b      	blt.n	80263c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80262f0:	4580      	cmp	r8, r0
 80262f2:	dd69      	ble.n	80263c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80262f4:	f1bc 0f00 	cmp.w	ip, #0
 80262f8:	db66      	blt.n	80263c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80262fa:	45e1      	cmp	r9, ip
 80262fc:	dd64      	ble.n	80263c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80262fe:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8026302:	f01e 0f01 	tst.w	lr, #1
 8026306:	5d16      	ldrb	r6, [r2, r4]
 8026308:	bf0c      	ite	eq
 802630a:	f006 060f 	andeq.w	r6, r6, #15
 802630e:	1136      	asrne	r6, r6, #4
 8026310:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026314:	b2f6      	uxtb	r6, r6
 8026316:	f110 0a01 	adds.w	sl, r0, #1
 802631a:	d457      	bmi.n	80263cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802631c:	45d0      	cmp	r8, sl
 802631e:	dd55      	ble.n	80263cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026320:	f1bc 0f00 	cmp.w	ip, #0
 8026324:	db52      	blt.n	80263cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026326:	45e1      	cmp	r9, ip
 8026328:	dd50      	ble.n	80263cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802632a:	2f00      	cmp	r7, #0
 802632c:	f000 80a5 	beq.w	802647a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8026330:	f10e 0b01 	add.w	fp, lr, #1
 8026334:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8026338:	f01b 0f01 	tst.w	fp, #1
 802633c:	5d14      	ldrb	r4, [r2, r4]
 802633e:	bf0c      	ite	eq
 8026340:	f004 040f 	andeq.w	r4, r4, #15
 8026344:	1124      	asrne	r4, r4, #4
 8026346:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802634a:	b2e4      	uxtb	r4, r4
 802634c:	2d00      	cmp	r5, #0
 802634e:	f000 808f 	beq.w	8026470 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8026352:	2800      	cmp	r0, #0
 8026354:	f10c 0c01 	add.w	ip, ip, #1
 8026358:	db3c      	blt.n	80263d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802635a:	4580      	cmp	r8, r0
 802635c:	dd3a      	ble.n	80263d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802635e:	f1bc 0f00 	cmp.w	ip, #0
 8026362:	db37      	blt.n	80263d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026364:	45e1      	cmp	r9, ip
 8026366:	dd35      	ble.n	80263d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026368:	eb03 0b0e 	add.w	fp, r3, lr
 802636c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8026370:	f01b 0f01 	tst.w	fp, #1
 8026374:	5c10      	ldrb	r0, [r2, r0]
 8026376:	bf0c      	ite	eq
 8026378:	f000 000f 	andeq.w	r0, r0, #15
 802637c:	1100      	asrne	r0, r0, #4
 802637e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026382:	b2c0      	uxtb	r0, r0
 8026384:	f1ba 0f00 	cmp.w	sl, #0
 8026388:	db26      	blt.n	80263d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802638a:	45d0      	cmp	r8, sl
 802638c:	dd24      	ble.n	80263d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802638e:	f1bc 0f00 	cmp.w	ip, #0
 8026392:	db21      	blt.n	80263d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026394:	45e1      	cmp	r9, ip
 8026396:	dd1f      	ble.n	80263d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026398:	b307      	cbz	r7, 80263dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 802639a:	3301      	adds	r3, #1
 802639c:	449e      	add	lr, r3
 802639e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80263a2:	f01e 0f01 	tst.w	lr, #1
 80263a6:	5cd3      	ldrb	r3, [r2, r3]
 80263a8:	bf0c      	ite	eq
 80263aa:	f003 030f 	andeq.w	r3, r3, #15
 80263ae:	111b      	asrne	r3, r3, #4
 80263b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80263b4:	b2db      	uxtb	r3, r3
 80263b6:	2f0f      	cmp	r7, #15
 80263b8:	d911      	bls.n	80263de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80263ba:	4b32      	ldr	r3, [pc, #200]	; (8026484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80263bc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80263c0:	4a31      	ldr	r2, [pc, #196]	; (8026488 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80263c2:	4832      	ldr	r0, [pc, #200]	; (802648c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80263c4:	f001 fff8 	bl	80283b8 <__assert_func>
 80263c8:	2600      	movs	r6, #0
 80263ca:	e7a4      	b.n	8026316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80263cc:	2400      	movs	r4, #0
 80263ce:	e7bd      	b.n	802634c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80263d0:	463c      	mov	r4, r7
 80263d2:	e7be      	b.n	8026352 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80263d4:	2000      	movs	r0, #0
 80263d6:	e7d5      	b.n	8026384 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80263d8:	2300      	movs	r3, #0
 80263da:	e7ec      	b.n	80263b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80263dc:	463b      	mov	r3, r7
 80263de:	2d0f      	cmp	r5, #15
 80263e0:	d8eb      	bhi.n	80263ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80263e2:	b2bf      	uxth	r7, r7
 80263e4:	b2ad      	uxth	r5, r5
 80263e6:	fb07 f205 	mul.w	r2, r7, r5
 80263ea:	013f      	lsls	r7, r7, #4
 80263ec:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80263f0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80263f4:	1abf      	subs	r7, r7, r2
 80263f6:	b2ad      	uxth	r5, r5
 80263f8:	b2bf      	uxth	r7, r7
 80263fa:	ebac 0c05 	sub.w	ip, ip, r5
 80263fe:	437c      	muls	r4, r7
 8026400:	fa1f fc8c 	uxth.w	ip, ip
 8026404:	fb06 440c 	mla	r4, r6, ip, r4
 8026408:	fb05 4400 	mla	r4, r5, r0, r4
 802640c:	fb02 4303 	mla	r3, r2, r3, r4
 8026410:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026414:	b353      	cbz	r3, 802646c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8026416:	4a1e      	ldr	r2, [pc, #120]	; (8026490 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8026418:	7808      	ldrb	r0, [r1, #0]
 802641a:	6814      	ldr	r4, [r2, #0]
 802641c:	b29a      	uxth	r2, r3
 802641e:	43db      	mvns	r3, r3
 8026420:	b2e5      	uxtb	r5, r4
 8026422:	b2db      	uxtb	r3, r3
 8026424:	fb15 f502 	smulbb	r5, r5, r2
 8026428:	fb00 5003 	mla	r0, r0, r3, r5
 802642c:	b280      	uxth	r0, r0
 802642e:	1c45      	adds	r5, r0, #1
 8026430:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026434:	784d      	ldrb	r5, [r1, #1]
 8026436:	fb15 f503 	smulbb	r5, r5, r3
 802643a:	1200      	asrs	r0, r0, #8
 802643c:	7008      	strb	r0, [r1, #0]
 802643e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8026442:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026446:	fb00 5002 	mla	r0, r0, r2, r5
 802644a:	b280      	uxth	r0, r0
 802644c:	1c45      	adds	r5, r0, #1
 802644e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026452:	1200      	asrs	r0, r0, #8
 8026454:	7048      	strb	r0, [r1, #1]
 8026456:	7888      	ldrb	r0, [r1, #2]
 8026458:	fb10 f303 	smulbb	r3, r0, r3
 802645c:	fb04 3202 	mla	r2, r4, r2, r3
 8026460:	b292      	uxth	r2, r2
 8026462:	1c53      	adds	r3, r2, #1
 8026464:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026468:	1212      	asrs	r2, r2, #8
 802646a:	708a      	strb	r2, [r1, #2]
 802646c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026470:	2f0f      	cmp	r7, #15
 8026472:	d8a2      	bhi.n	80263ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8026474:	462b      	mov	r3, r5
 8026476:	4628      	mov	r0, r5
 8026478:	e7b3      	b.n	80263e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802647a:	2d00      	cmp	r5, #0
 802647c:	d1a8      	bne.n	80263d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802647e:	462c      	mov	r4, r5
 8026480:	e7f8      	b.n	8026474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8026482:	bf00      	nop
 8026484:	0802d527 	.word	0x0802d527
 8026488:	0802da1e 	.word	0x0802da1e
 802648c:	0802d5f0 	.word	0x0802d5f0
 8026490:	2000bf14 	.word	0x2000bf14

08026494 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026498:	ed2d 8b08 	vpush	{d8-d11}
 802649c:	b095      	sub	sp, #84	; 0x54
 802649e:	461c      	mov	r4, r3
 80264a0:	eeb0 aa40 	vmov.f32	s20, s0
 80264a4:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80264a8:	eef0 9a60 	vmov.f32	s19, s1
 80264ac:	920e      	str	r2, [sp, #56]	; 0x38
 80264ae:	eeb0 9a41 	vmov.f32	s18, s2
 80264b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80264b4:	eeb0 8a62 	vmov.f32	s16, s5
 80264b8:	9307      	str	r3, [sp, #28]
 80264ba:	eef0 8a43 	vmov.f32	s17, s6
 80264be:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80264c2:	eef0 ba44 	vmov.f32	s23, s8
 80264c6:	9013      	str	r0, [sp, #76]	; 0x4c
 80264c8:	eeb0 ba64 	vmov.f32	s22, s9
 80264cc:	9109      	str	r1, [sp, #36]	; 0x24
 80264ce:	eef0 aa45 	vmov.f32	s21, s10
 80264d2:	9308      	str	r3, [sp, #32]
 80264d4:	6850      	ldr	r0, [r2, #4]
 80264d6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80264da:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80264de:	fb00 1803 	mla	r8, r0, r3, r1
 80264e2:	6813      	ldr	r3, [r2, #0]
 80264e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80264e8:	4498      	add	r8, r3
 80264ea:	9b07      	ldr	r3, [sp, #28]
 80264ec:	3301      	adds	r3, #1
 80264ee:	f023 0301 	bic.w	r3, r3, #1
 80264f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80264f4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264f6:	681f      	ldr	r7, [r3, #0]
 80264f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264fa:	2b00      	cmp	r3, #0
 80264fc:	dc03      	bgt.n	8026506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80264fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026500:	2b00      	cmp	r3, #0
 8026502:	f340 8238 	ble.w	8026976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8026506:	2c00      	cmp	r4, #0
 8026508:	f340 8109 	ble.w	802671e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802650c:	142a      	asrs	r2, r5, #16
 802650e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026512:	d42b      	bmi.n	802656c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8026514:	1c51      	adds	r1, r2, #1
 8026516:	9807      	ldr	r0, [sp, #28]
 8026518:	4288      	cmp	r0, r1
 802651a:	dd2a      	ble.n	8026572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802651c:	2b00      	cmp	r3, #0
 802651e:	db28      	blt.n	8026572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026520:	1c59      	adds	r1, r3, #1
 8026522:	9808      	ldr	r0, [sp, #32]
 8026524:	4288      	cmp	r0, r1
 8026526:	dd24      	ble.n	8026572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026528:	1e63      	subs	r3, r4, #1
 802652a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802652c:	fb02 5203 	mla	r2, r2, r3, r5
 8026530:	1412      	asrs	r2, r2, #16
 8026532:	d429      	bmi.n	8026588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026534:	3201      	adds	r2, #1
 8026536:	9907      	ldr	r1, [sp, #28]
 8026538:	4291      	cmp	r1, r2
 802653a:	dd25      	ble.n	8026588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802653c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802653e:	fb02 6303 	mla	r3, r2, r3, r6
 8026542:	141b      	asrs	r3, r3, #16
 8026544:	d420      	bmi.n	8026588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026546:	3301      	adds	r3, #1
 8026548:	9a08      	ldr	r2, [sp, #32]
 802654a:	429a      	cmp	r2, r3
 802654c:	dd1c      	ble.n	8026588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802654e:	f108 0e03 	add.w	lr, r8, #3
 8026552:	46a1      	mov	r9, r4
 8026554:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8026558:	f1b9 0f00 	cmp.w	r9, #0
 802655c:	f300 8155 	bgt.w	802680a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8026560:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8026564:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026568:	44a0      	add	r8, r4
 802656a:	e0da      	b.n	8026722 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802656c:	1c50      	adds	r0, r2, #1
 802656e:	f040 80ce 	bne.w	802670e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026572:	9907      	ldr	r1, [sp, #28]
 8026574:	4291      	cmp	r1, r2
 8026576:	f340 80ca 	ble.w	802670e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802657a:	1c59      	adds	r1, r3, #1
 802657c:	f2c0 80c7 	blt.w	802670e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026580:	9a08      	ldr	r2, [sp, #32]
 8026582:	4293      	cmp	r3, r2
 8026584:	f280 80c3 	bge.w	802670e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026588:	46a3      	mov	fp, r4
 802658a:	46c1      	mov	r9, r8
 802658c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8026590:	f1bb 0f00 	cmp.w	fp, #0
 8026594:	dde4      	ble.n	8026560 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8026596:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802659a:	1428      	asrs	r0, r5, #16
 802659c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80265a0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80265a4:	920a      	str	r2, [sp, #40]	; 0x28
 80265a6:	f100 8116 	bmi.w	80267d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80265aa:	f100 0c01 	add.w	ip, r0, #1
 80265ae:	9a07      	ldr	r2, [sp, #28]
 80265b0:	4562      	cmp	r2, ip
 80265b2:	f340 8112 	ble.w	80267da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80265b6:	2b00      	cmp	r3, #0
 80265b8:	f2c0 810f 	blt.w	80267da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80265bc:	f103 0c01 	add.w	ip, r3, #1
 80265c0:	9a08      	ldr	r2, [sp, #32]
 80265c2:	4562      	cmp	r2, ip
 80265c4:	f340 8109 	ble.w	80267da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80265c8:	fb03 030a 	mla	r3, r3, sl, r0
 80265cc:	0858      	lsrs	r0, r3, #1
 80265ce:	07da      	lsls	r2, r3, #31
 80265d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80265d2:	5c38      	ldrb	r0, [r7, r0]
 80265d4:	bf54      	ite	pl
 80265d6:	f000 000f 	andpl.w	r0, r0, #15
 80265da:	1100      	asrmi	r0, r0, #4
 80265dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80265e0:	b2c0      	uxtb	r0, r0
 80265e2:	2a00      	cmp	r2, #0
 80265e4:	f000 80dd 	beq.w	80267a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80265e8:	f103 0e01 	add.w	lr, r3, #1
 80265ec:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80265f0:	f01e 0f01 	tst.w	lr, #1
 80265f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80265f8:	bf0c      	ite	eq
 80265fa:	f00c 0c0f 	andeq.w	ip, ip, #15
 80265fe:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026602:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026606:	fa5f fc8c 	uxtb.w	ip, ip
 802660a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802660e:	b301      	cbz	r1, 8026652 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026610:	4453      	add	r3, sl
 8026612:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026616:	07da      	lsls	r2, r3, #31
 8026618:	f103 0301 	add.w	r3, r3, #1
 802661c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026620:	bf54      	ite	pl
 8026622:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026626:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802662a:	07da      	lsls	r2, r3, #31
 802662c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026630:	fa5f fc8c 	uxtb.w	ip, ip
 8026634:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026638:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802663c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026640:	bf54      	ite	pl
 8026642:	f00c 030f 	andpl.w	r3, ip, #15
 8026646:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802664a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802664e:	b2db      	uxtb	r3, r3
 8026650:	9310      	str	r3, [sp, #64]	; 0x40
 8026652:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8026656:	b289      	uxth	r1, r1
 8026658:	fb02 f301 	mul.w	r3, r2, r1
 802665c:	0112      	lsls	r2, r2, #4
 802665e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026662:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8026666:	1ad2      	subs	r2, r2, r3
 8026668:	fa1f fe81 	uxth.w	lr, r1
 802666c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802666e:	b292      	uxth	r2, r2
 8026670:	ebac 0c0e 	sub.w	ip, ip, lr
 8026674:	434a      	muls	r2, r1
 8026676:	fa1f fc8c 	uxth.w	ip, ip
 802667a:	fb00 200c 	mla	r0, r0, ip, r2
 802667e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026680:	fb0e 0002 	mla	r0, lr, r2, r0
 8026684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026686:	fb03 0002 	mla	r0, r3, r2, r0
 802668a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802668e:	b3a8      	cbz	r0, 80266fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026690:	4bbb      	ldr	r3, [pc, #748]	; (8026980 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8026692:	28ff      	cmp	r0, #255	; 0xff
 8026694:	681b      	ldr	r3, [r3, #0]
 8026696:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802669a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802669e:	b2db      	uxtb	r3, r3
 80266a0:	f000 8092 	beq.w	80267c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80266a4:	b282      	uxth	r2, r0
 80266a6:	43c0      	mvns	r0, r0
 80266a8:	f899 e000 	ldrb.w	lr, [r9]
 80266ac:	fb13 f302 	smulbb	r3, r3, r2
 80266b0:	b2c0      	uxtb	r0, r0
 80266b2:	fb11 f102 	smulbb	r1, r1, r2
 80266b6:	fb0e 3300 	mla	r3, lr, r0, r3
 80266ba:	fb1c f202 	smulbb	r2, ip, r2
 80266be:	b29b      	uxth	r3, r3
 80266c0:	f103 0e01 	add.w	lr, r3, #1
 80266c4:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80266c8:	121b      	asrs	r3, r3, #8
 80266ca:	f889 3000 	strb.w	r3, [r9]
 80266ce:	f899 3001 	ldrb.w	r3, [r9, #1]
 80266d2:	fb03 1100 	mla	r1, r3, r0, r1
 80266d6:	b289      	uxth	r1, r1
 80266d8:	1c4b      	adds	r3, r1, #1
 80266da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80266de:	f899 3002 	ldrb.w	r3, [r9, #2]
 80266e2:	fb03 2000 	mla	r0, r3, r0, r2
 80266e6:	1209      	asrs	r1, r1, #8
 80266e8:	b280      	uxth	r0, r0
 80266ea:	f889 1001 	strb.w	r1, [r9, #1]
 80266ee:	f100 0c01 	add.w	ip, r0, #1
 80266f2:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80266f6:	1200      	asrs	r0, r0, #8
 80266f8:	f889 0002 	strb.w	r0, [r9, #2]
 80266fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80266fe:	f109 0903 	add.w	r9, r9, #3
 8026702:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026706:	441d      	add	r5, r3
 8026708:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802670a:	441e      	add	r6, r3
 802670c:	e740      	b.n	8026590 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802670e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026710:	3c01      	subs	r4, #1
 8026712:	f108 0803 	add.w	r8, r8, #3
 8026716:	441d      	add	r5, r3
 8026718:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802671a:	441e      	add	r6, r3
 802671c:	e6f3      	b.n	8026506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802671e:	f47f af03 	bne.w	8026528 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8026722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026724:	2b00      	cmp	r3, #0
 8026726:	f340 8126 	ble.w	8026976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802672a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802672e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026730:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026734:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026738:	eef0 6a48 	vmov.f32	s13, s16
 802673c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026740:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026744:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026748:	ee16 5a90 	vmov	r5, s13
 802674c:	eef0 6a68 	vmov.f32	s13, s17
 8026750:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026754:	ee16 6a90 	vmov	r6, s13
 8026758:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802675c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026760:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026764:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026768:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802676c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026770:	ee18 2a10 	vmov	r2, s16
 8026774:	eeb0 8a47 	vmov.f32	s16, s14
 8026778:	fb92 f3f3 	sdiv	r3, r2, r3
 802677c:	ee18 2a90 	vmov	r2, s17
 8026780:	9329      	str	r3, [sp, #164]	; 0xa4
 8026782:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026784:	eef0 8a67 	vmov.f32	s17, s15
 8026788:	fb92 f3f3 	sdiv	r3, r2, r3
 802678c:	932a      	str	r3, [sp, #168]	; 0xa8
 802678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026792:	3b01      	subs	r3, #1
 8026794:	9309      	str	r3, [sp, #36]	; 0x24
 8026796:	bf08      	it	eq
 8026798:	4614      	moveq	r4, r2
 802679a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802679c:	bf18      	it	ne
 802679e:	461c      	movne	r4, r3
 80267a0:	e6aa      	b.n	80264f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80267a2:	2900      	cmp	r1, #0
 80267a4:	f43f af55 	beq.w	8026652 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80267a8:	4453      	add	r3, sl
 80267aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80267ae:	07db      	lsls	r3, r3, #31
 80267b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80267b4:	bf54      	ite	pl
 80267b6:	f00c 030f 	andpl.w	r3, ip, #15
 80267ba:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80267be:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80267c2:	b2db      	uxtb	r3, r3
 80267c4:	930c      	str	r3, [sp, #48]	; 0x30
 80267c6:	e744      	b.n	8026652 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80267c8:	f889 3000 	strb.w	r3, [r9]
 80267cc:	f889 1001 	strb.w	r1, [r9, #1]
 80267d0:	f889 c002 	strb.w	ip, [r9, #2]
 80267d4:	e792      	b.n	80266fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80267d6:	1c42      	adds	r2, r0, #1
 80267d8:	d190      	bne.n	80266fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80267da:	9a07      	ldr	r2, [sp, #28]
 80267dc:	4282      	cmp	r2, r0
 80267de:	dd8d      	ble.n	80266fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80267e0:	1c5a      	adds	r2, r3, #1
 80267e2:	db8b      	blt.n	80266fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80267e4:	9a08      	ldr	r2, [sp, #32]
 80267e6:	429a      	cmp	r2, r3
 80267e8:	dd88      	ble.n	80266fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80267ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80267ec:	9105      	str	r1, [sp, #20]
 80267ee:	4649      	mov	r1, r9
 80267f0:	9002      	str	r0, [sp, #8]
 80267f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80267f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80267f8:	9b08      	ldr	r3, [sp, #32]
 80267fa:	463a      	mov	r2, r7
 80267fc:	9301      	str	r3, [sp, #4]
 80267fe:	9b07      	ldr	r3, [sp, #28]
 8026800:	9300      	str	r3, [sp, #0]
 8026802:	4653      	mov	r3, sl
 8026804:	f7ff fd64 	bl	80262d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8026808:	e778      	b.n	80266fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802680a:	142a      	asrs	r2, r5, #16
 802680c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026810:	1433      	asrs	r3, r6, #16
 8026812:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026816:	fb0a 2303 	mla	r3, sl, r3, r2
 802681a:	085a      	lsrs	r2, r3, #1
 802681c:	07d9      	lsls	r1, r3, #31
 802681e:	5cba      	ldrb	r2, [r7, r2]
 8026820:	bf54      	ite	pl
 8026822:	f002 020f 	andpl.w	r2, r2, #15
 8026826:	1112      	asrmi	r2, r2, #4
 8026828:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802682c:	b2d2      	uxtb	r2, r2
 802682e:	2800      	cmp	r0, #0
 8026830:	f000 808a 	beq.w	8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8026834:	f103 0b01 	add.w	fp, r3, #1
 8026838:	ea4f 015b 	mov.w	r1, fp, lsr #1
 802683c:	f01b 0f01 	tst.w	fp, #1
 8026840:	5c79      	ldrb	r1, [r7, r1]
 8026842:	bf0c      	ite	eq
 8026844:	f001 010f 	andeq.w	r1, r1, #15
 8026848:	1109      	asrne	r1, r1, #4
 802684a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802684e:	b2c9      	uxtb	r1, r1
 8026850:	9111      	str	r1, [sp, #68]	; 0x44
 8026852:	f1bc 0f00 	cmp.w	ip, #0
 8026856:	d019      	beq.n	802688c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026858:	4453      	add	r3, sl
 802685a:	0859      	lsrs	r1, r3, #1
 802685c:	f013 0f01 	tst.w	r3, #1
 8026860:	f103 0301 	add.w	r3, r3, #1
 8026864:	5c79      	ldrb	r1, [r7, r1]
 8026866:	bf0c      	ite	eq
 8026868:	f001 010f 	andeq.w	r1, r1, #15
 802686c:	1109      	asrne	r1, r1, #4
 802686e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026872:	b2c9      	uxtb	r1, r1
 8026874:	910d      	str	r1, [sp, #52]	; 0x34
 8026876:	0859      	lsrs	r1, r3, #1
 8026878:	07db      	lsls	r3, r3, #31
 802687a:	5c79      	ldrb	r1, [r7, r1]
 802687c:	bf54      	ite	pl
 802687e:	f001 010f 	andpl.w	r1, r1, #15
 8026882:	1109      	asrmi	r1, r1, #4
 8026884:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026888:	b2c9      	uxtb	r1, r1
 802688a:	9112      	str	r1, [sp, #72]	; 0x48
 802688c:	b280      	uxth	r0, r0
 802688e:	fa1f fc8c 	uxth.w	ip, ip
 8026892:	fb00 f30c 	mul.w	r3, r0, ip
 8026896:	0100      	lsls	r0, r0, #4
 8026898:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802689c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80268a0:	1ac0      	subs	r0, r0, r3
 80268a2:	fa1f fc8c 	uxth.w	ip, ip
 80268a6:	b280      	uxth	r0, r0
 80268a8:	eba1 010c 	sub.w	r1, r1, ip
 80268ac:	fa1f fb81 	uxth.w	fp, r1
 80268b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80268b2:	4348      	muls	r0, r1
 80268b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80268b6:	fb02 020b 	mla	r2, r2, fp, r0
 80268ba:	fb0c 2c01 	mla	ip, ip, r1, r2
 80268be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80268c0:	fb03 c302 	mla	r3, r3, r2, ip
 80268c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80268c8:	b3ab      	cbz	r3, 8026936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80268ca:	4a2d      	ldr	r2, [pc, #180]	; (8026980 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80268cc:	2bff      	cmp	r3, #255	; 0xff
 80268ce:	6811      	ldr	r1, [r2, #0]
 80268d0:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80268d4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80268d8:	b2c9      	uxtb	r1, r1
 80268da:	d045      	beq.n	8026968 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80268dc:	b298      	uxth	r0, r3
 80268de:	43db      	mvns	r3, r3
 80268e0:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 80268e4:	fb11 f100 	smulbb	r1, r1, r0
 80268e8:	b2db      	uxtb	r3, r3
 80268ea:	fb1c fc00 	smulbb	ip, ip, r0
 80268ee:	fb02 1103 	mla	r1, r2, r3, r1
 80268f2:	fb1b f000 	smulbb	r0, fp, r0
 80268f6:	b289      	uxth	r1, r1
 80268f8:	1c4a      	adds	r2, r1, #1
 80268fa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80268fe:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026902:	fb02 cc03 	mla	ip, r2, r3, ip
 8026906:	1209      	asrs	r1, r1, #8
 8026908:	fa1f fc8c 	uxth.w	ip, ip
 802690c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026910:	f10c 0201 	add.w	r2, ip, #1
 8026914:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8026918:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 802691c:	fb02 0303 	mla	r3, r2, r3, r0
 8026920:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026924:	b29b      	uxth	r3, r3
 8026926:	f80e cc02 	strb.w	ip, [lr, #-2]
 802692a:	1c5a      	adds	r2, r3, #1
 802692c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026930:	121b      	asrs	r3, r3, #8
 8026932:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8026936:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026938:	f10e 0e03 	add.w	lr, lr, #3
 802693c:	f109 39ff 	add.w	r9, r9, #4294967295
 8026940:	441d      	add	r5, r3
 8026942:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026944:	441e      	add	r6, r3
 8026946:	e607      	b.n	8026558 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8026948:	f1bc 0f00 	cmp.w	ip, #0
 802694c:	d09e      	beq.n	802688c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802694e:	4453      	add	r3, sl
 8026950:	0859      	lsrs	r1, r3, #1
 8026952:	07db      	lsls	r3, r3, #31
 8026954:	5c79      	ldrb	r1, [r7, r1]
 8026956:	bf54      	ite	pl
 8026958:	f001 010f 	andpl.w	r1, r1, #15
 802695c:	1109      	asrmi	r1, r1, #4
 802695e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026962:	b2c9      	uxtb	r1, r1
 8026964:	910d      	str	r1, [sp, #52]	; 0x34
 8026966:	e791      	b.n	802688c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026968:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802696c:	f80e cc02 	strb.w	ip, [lr, #-2]
 8026970:	f80e bc01 	strb.w	fp, [lr, #-1]
 8026974:	e7df      	b.n	8026936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026976:	b015      	add	sp, #84	; 0x54
 8026978:	ecbd 8b08 	vpop	{d8-d11}
 802697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026980:	2000bf14 	.word	0x2000bf14

08026984 <CRC_Lock>:
 8026984:	4a1d      	ldr	r2, [pc, #116]	; (80269fc <CRC_Lock+0x78>)
 8026986:	b530      	push	{r4, r5, lr}
 8026988:	6813      	ldr	r3, [r2, #0]
 802698a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802698e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026992:	f023 0301 	bic.w	r3, r3, #1
 8026996:	6013      	str	r3, [r2, #0]
 8026998:	4b19      	ldr	r3, [pc, #100]	; (8026a00 <CRC_Lock+0x7c>)
 802699a:	681a      	ldr	r2, [r3, #0]
 802699c:	4022      	ands	r2, r4
 802699e:	42aa      	cmp	r2, r5
 80269a0:	d005      	beq.n	80269ae <CRC_Lock+0x2a>
 80269a2:	681b      	ldr	r3, [r3, #0]
 80269a4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80269a8:	4023      	ands	r3, r4
 80269aa:	4293      	cmp	r3, r2
 80269ac:	d11d      	bne.n	80269ea <CRC_Lock+0x66>
 80269ae:	4b15      	ldr	r3, [pc, #84]	; (8026a04 <CRC_Lock+0x80>)
 80269b0:	681b      	ldr	r3, [r3, #0]
 80269b2:	b9d3      	cbnz	r3, 80269ea <CRC_Lock+0x66>
 80269b4:	4a14      	ldr	r2, [pc, #80]	; (8026a08 <CRC_Lock+0x84>)
 80269b6:	6813      	ldr	r3, [r2, #0]
 80269b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80269bc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80269c0:	d006      	beq.n	80269d0 <CRC_Lock+0x4c>
 80269c2:	6813      	ldr	r3, [r2, #0]
 80269c4:	f240 4283 	movw	r2, #1155	; 0x483
 80269c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80269cc:	4293      	cmp	r3, r2
 80269ce:	d10c      	bne.n	80269ea <CRC_Lock+0x66>
 80269d0:	4b0e      	ldr	r3, [pc, #56]	; (8026a0c <CRC_Lock+0x88>)
 80269d2:	2201      	movs	r2, #1
 80269d4:	601a      	str	r2, [r3, #0]
 80269d6:	681a      	ldr	r2, [r3, #0]
 80269d8:	2a00      	cmp	r2, #0
 80269da:	d1fc      	bne.n	80269d6 <CRC_Lock+0x52>
 80269dc:	4b0c      	ldr	r3, [pc, #48]	; (8026a10 <CRC_Lock+0x8c>)
 80269de:	6018      	str	r0, [r3, #0]
 80269e0:	6818      	ldr	r0, [r3, #0]
 80269e2:	1a43      	subs	r3, r0, r1
 80269e4:	4258      	negs	r0, r3
 80269e6:	4158      	adcs	r0, r3
 80269e8:	bd30      	pop	{r4, r5, pc}
 80269ea:	4b0a      	ldr	r3, [pc, #40]	; (8026a14 <CRC_Lock+0x90>)
 80269ec:	2201      	movs	r2, #1
 80269ee:	601a      	str	r2, [r3, #0]
 80269f0:	681a      	ldr	r2, [r3, #0]
 80269f2:	2a00      	cmp	r2, #0
 80269f4:	d1fc      	bne.n	80269f0 <CRC_Lock+0x6c>
 80269f6:	4b08      	ldr	r3, [pc, #32]	; (8026a18 <CRC_Lock+0x94>)
 80269f8:	e7f1      	b.n	80269de <CRC_Lock+0x5a>
 80269fa:	bf00      	nop
 80269fc:	e0002000 	.word	0xe0002000
 8026a00:	e000ed00 	.word	0xe000ed00
 8026a04:	e0042000 	.word	0xe0042000
 8026a08:	5c001000 	.word	0x5c001000
 8026a0c:	58024c08 	.word	0x58024c08
 8026a10:	58024c00 	.word	0x58024c00
 8026a14:	40023008 	.word	0x40023008
 8026a18:	40023000 	.word	0x40023000

08026a1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026a1c:	6101      	str	r1, [r0, #16]
 8026a1e:	4770      	bx	lr

08026a20 <_ZN8touchgfx8Gestures4tickEv>:
 8026a20:	7b83      	ldrb	r3, [r0, #14]
 8026a22:	b14b      	cbz	r3, 8026a38 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026a24:	8903      	ldrh	r3, [r0, #8]
 8026a26:	3301      	adds	r3, #1
 8026a28:	b29b      	uxth	r3, r3
 8026a2a:	2b07      	cmp	r3, #7
 8026a2c:	8103      	strh	r3, [r0, #8]
 8026a2e:	bf81      	itttt	hi
 8026a30:	2300      	movhi	r3, #0
 8026a32:	8143      	strhhi	r3, [r0, #10]
 8026a34:	8183      	strhhi	r3, [r0, #12]
 8026a36:	7383      	strbhi	r3, [r0, #14]
 8026a38:	4770      	bx	lr
	...

08026a3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026a3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026a40:	4604      	mov	r4, r0
 8026a42:	4698      	mov	r8, r3
 8026a44:	8880      	ldrh	r0, [r0, #4]
 8026a46:	4617      	mov	r7, r2
 8026a48:	4b1d      	ldr	r3, [pc, #116]	; (8026ac0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8026a4a:	460e      	mov	r6, r1
 8026a4c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8026a50:	eba8 0000 	sub.w	r0, r8, r0
 8026a54:	9300      	str	r3, [sp, #0]
 8026a56:	2300      	movs	r3, #0
 8026a58:	b280      	uxth	r0, r0
 8026a5a:	8aa2      	ldrh	r2, [r4, #20]
 8026a5c:	f88d 3004 	strb.w	r3, [sp, #4]
 8026a60:	b203      	sxth	r3, r0
 8026a62:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026a66:	88e1      	ldrh	r1, [r4, #6]
 8026a68:	2b00      	cmp	r3, #0
 8026a6a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026a6e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8026a72:	bfb8      	it	lt
 8026a74:	4240      	neglt	r0, r0
 8026a76:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026a7a:	bfb8      	it	lt
 8026a7c:	b203      	sxthlt	r3, r0
 8026a7e:	4293      	cmp	r3, r2
 8026a80:	dc08      	bgt.n	8026a94 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8026a82:	1a69      	subs	r1, r5, r1
 8026a84:	b289      	uxth	r1, r1
 8026a86:	b20b      	sxth	r3, r1
 8026a88:	2b00      	cmp	r3, #0
 8026a8a:	bfbc      	itt	lt
 8026a8c:	4249      	neglt	r1, r1
 8026a8e:	b20b      	sxthlt	r3, r1
 8026a90:	429a      	cmp	r2, r3
 8026a92:	da13      	bge.n	8026abc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8026a94:	6920      	ldr	r0, [r4, #16]
 8026a96:	4669      	mov	r1, sp
 8026a98:	eba8 0606 	sub.w	r6, r8, r6
 8026a9c:	1bef      	subs	r7, r5, r7
 8026a9e:	6803      	ldr	r3, [r0, #0]
 8026aa0:	685b      	ldr	r3, [r3, #4]
 8026aa2:	4798      	blx	r3
 8026aa4:	2300      	movs	r3, #0
 8026aa6:	2001      	movs	r0, #1
 8026aa8:	8166      	strh	r6, [r4, #10]
 8026aaa:	8123      	strh	r3, [r4, #8]
 8026aac:	81a7      	strh	r7, [r4, #12]
 8026aae:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026ab2:	80e5      	strh	r5, [r4, #6]
 8026ab4:	73a0      	strb	r0, [r4, #14]
 8026ab6:	b004      	add	sp, #16
 8026ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026abc:	2000      	movs	r0, #0
 8026abe:	e7fa      	b.n	8026ab6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8026ac0:	0802c6c4 	.word	0x0802c6c4

08026ac4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026ac6:	461e      	mov	r6, r3
 8026ac8:	1e4b      	subs	r3, r1, #1
 8026aca:	b085      	sub	sp, #20
 8026acc:	4604      	mov	r4, r0
 8026ace:	2b01      	cmp	r3, #1
 8026ad0:	460d      	mov	r5, r1
 8026ad2:	4617      	mov	r7, r2
 8026ad4:	d84b      	bhi.n	8026b6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026ad6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8026ada:	1cd3      	adds	r3, r2, #3
 8026adc:	b29b      	uxth	r3, r3
 8026ade:	2b06      	cmp	r3, #6
 8026ae0:	d916      	bls.n	8026b10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026ae2:	f8df c098 	ldr.w	ip, [pc, #152]	; 8026b7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026ae6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026aea:	f8cd c004 	str.w	ip, [sp, #4]
 8026aee:	f04f 0c00 	mov.w	ip, #0
 8026af2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026af6:	6900      	ldr	r0, [r0, #16]
 8026af8:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026afc:	a901      	add	r1, sp, #4
 8026afe:	f88d c008 	strb.w	ip, [sp, #8]
 8026b02:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026b06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026b0a:	6803      	ldr	r3, [r0, #0]
 8026b0c:	689b      	ldr	r3, [r3, #8]
 8026b0e:	4798      	blx	r3
 8026b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026b14:	1cd3      	adds	r3, r2, #3
 8026b16:	b29b      	uxth	r3, r3
 8026b18:	2b06      	cmp	r3, #6
 8026b1a:	d916      	bls.n	8026b4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026b1c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8026b7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026b20:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026b24:	f8cd c004 	str.w	ip, [sp, #4]
 8026b28:	f04f 0c01 	mov.w	ip, #1
 8026b2c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026b30:	6920      	ldr	r0, [r4, #16]
 8026b32:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026b36:	a901      	add	r1, sp, #4
 8026b38:	f88d c008 	strb.w	ip, [sp, #8]
 8026b3c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026b40:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026b44:	6803      	ldr	r3, [r0, #0]
 8026b46:	689b      	ldr	r3, [r3, #8]
 8026b48:	4798      	blx	r3
 8026b4a:	4b0b      	ldr	r3, [pc, #44]	; (8026b78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8026b4c:	a901      	add	r1, sp, #4
 8026b4e:	6920      	ldr	r0, [r4, #16]
 8026b50:	9301      	str	r3, [sp, #4]
 8026b52:	2300      	movs	r3, #0
 8026b54:	f88d 5008 	strb.w	r5, [sp, #8]
 8026b58:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026b5c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026b60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026b64:	6803      	ldr	r3, [r0, #0]
 8026b66:	681b      	ldr	r3, [r3, #0]
 8026b68:	4798      	blx	r3
 8026b6a:	b005      	add	sp, #20
 8026b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026b6e:	2900      	cmp	r1, #0
 8026b70:	d1eb      	bne.n	8026b4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026b72:	80a2      	strh	r2, [r4, #4]
 8026b74:	80c6      	strh	r6, [r0, #6]
 8026b76:	e7e8      	b.n	8026b4a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026b78:	0802c6b0 	.word	0x0802c6b0
 8026b7c:	0802c6d8 	.word	0x0802c6d8

08026b80 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8026b80:	10c9      	asrs	r1, r1, #3
 8026b82:	2900      	cmp	r1, #0
 8026b84:	bfb8      	it	lt
 8026b86:	4249      	neglt	r1, r1
 8026b88:	2801      	cmp	r0, #1
 8026b8a:	d108      	bne.n	8026b9e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8026b8c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8026b90:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8026b94:	4601      	mov	r1, r0
 8026b96:	dd02      	ble.n	8026b9e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8026b98:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8026b9c:	4770      	bx	lr
 8026b9e:	29ff      	cmp	r1, #255	; 0xff
 8026ba0:	bfa8      	it	ge
 8026ba2:	21ff      	movge	r1, #255	; 0xff
 8026ba4:	4608      	mov	r0, r1
 8026ba6:	4770      	bx	lr

08026ba8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8026ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bac:	688c      	ldr	r4, [r1, #8]
 8026bae:	b087      	sub	sp, #28
 8026bb0:	4607      	mov	r7, r0
 8026bb2:	2c00      	cmp	r4, #0
 8026bb4:	db2b      	blt.n	8026c0e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026bb6:	6803      	ldr	r3, [r0, #0]
 8026bb8:	68da      	ldr	r2, [r3, #12]
 8026bba:	42a2      	cmp	r2, r4
 8026bbc:	dd27      	ble.n	8026c0e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026bbe:	681a      	ldr	r2, [r3, #0]
 8026bc0:	691e      	ldr	r6, [r3, #16]
 8026bc2:	68cd      	ldr	r5, [r1, #12]
 8026bc4:	fb06 2604 	mla	r6, r6, r4, r2
 8026bc8:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8026bcc:	698a      	ldr	r2, [r1, #24]
 8026bce:	f893 a004 	ldrb.w	sl, [r3, #4]
 8026bd2:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8026bd6:	9205      	str	r2, [sp, #20]
 8026bd8:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8026bdc:	9b05      	ldr	r3, [sp, #20]
 8026bde:	6839      	ldr	r1, [r7, #0]
 8026be0:	eb03 0c02 	add.w	ip, r3, r2
 8026be4:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8026be8:	6889      	ldr	r1, [r1, #8]
 8026bea:	1898      	adds	r0, r3, r2
 8026bec:	4288      	cmp	r0, r1
 8026bee:	db02      	blt.n	8026bf6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8026bf0:	1a8b      	subs	r3, r1, r2
 8026bf2:	2b00      	cmp	r3, #0
 8026bf4:	dd09      	ble.n	8026c0a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8026bf6:	6878      	ldr	r0, [r7, #4]
 8026bf8:	6801      	ldr	r1, [r0, #0]
 8026bfa:	9400      	str	r4, [sp, #0]
 8026bfc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8026c00:	4653      	mov	r3, sl
 8026c02:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8026c06:	4631      	mov	r1, r6
 8026c08:	47d8      	blx	fp
 8026c0a:	3d01      	subs	r5, #1
 8026c0c:	d1e4      	bne.n	8026bd8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8026c0e:	b007      	add	sp, #28
 8026c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026c14 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8026c14:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8026c18:	b90b      	cbnz	r3, 8026c1e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8026c1a:	f001 b974 	b.w	8027f06 <_ZN8touchgfx7Outline6lineToEii>
 8026c1e:	4770      	bx	lr

08026c20 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8026c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c24:	4604      	mov	r4, r0
 8026c26:	2600      	movs	r6, #0
 8026c28:	4b8e      	ldr	r3, [pc, #568]	; (8026e64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8026c2a:	f100 0518 	add.w	r5, r0, #24
 8026c2e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8026c32:	b086      	sub	sp, #24
 8026c34:	4690      	mov	r8, r2
 8026c36:	e9c0 3100 	strd	r3, r1, [r0]
 8026c3a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8026c3e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8026c42:	4628      	mov	r0, r5
 8026c44:	f001 fb75 	bl	8028332 <_ZN8touchgfx15RenderingBufferC1Ev>
 8026c48:	4638      	mov	r0, r7
 8026c4a:	f000 fb45 	bl	80272d8 <_ZN8touchgfx7OutlineC1Ev>
 8026c4e:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8026c52:	f001 fb23 	bl	802829c <_ZN8touchgfx8ScanlineC1Ev>
 8026c56:	2301      	movs	r3, #1
 8026c58:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8026c5c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8026c60:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026c64:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8026c68:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8026c6c:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8026c70:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8026c74:	f7f4 fbac 	bl	801b3d0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8026c78:	b928      	cbnz	r0, 8026c86 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8026c7a:	4b7b      	ldr	r3, [pc, #492]	; (8026e68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8026c7c:	2118      	movs	r1, #24
 8026c7e:	4a7b      	ldr	r2, [pc, #492]	; (8026e6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026c80:	487b      	ldr	r0, [pc, #492]	; (8026e70 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8026c82:	f001 fb99 	bl	80283b8 <__assert_func>
 8026c86:	f9b8 2000 	ldrsh.w	r2, [r8]
 8026c8a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8026c8e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8026c92:	4410      	add	r0, r2
 8026c94:	9602      	str	r6, [sp, #8]
 8026c96:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8026c9a:	b280      	uxth	r0, r0
 8026c9c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8026ca0:	fa0f fa80 	sxth.w	sl, r0
 8026ca4:	f1ba 0f00 	cmp.w	sl, #0
 8026ca8:	dd70      	ble.n	8026d8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026caa:	4591      	cmp	r9, r2
 8026cac:	dd6e      	ble.n	8026d8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026cae:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8026cb2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8026cb6:	440b      	add	r3, r1
 8026cb8:	b29b      	uxth	r3, r3
 8026cba:	b21e      	sxth	r6, r3
 8026cbc:	2e00      	cmp	r6, #0
 8026cbe:	dd65      	ble.n	8026d8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026cc0:	458e      	cmp	lr, r1
 8026cc2:	dd63      	ble.n	8026d8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026cc4:	45d1      	cmp	r9, sl
 8026cc6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8026cca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026cce:	bfb8      	it	lt
 8026cd0:	fa1f f089 	uxthlt.w	r0, r9
 8026cd4:	45b6      	cmp	lr, r6
 8026cd6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8026cda:	bfb8      	it	lt
 8026cdc:	fa1f f38e 	uxthlt.w	r3, lr
 8026ce0:	1a80      	subs	r0, r0, r2
 8026ce2:	f8ad 100a 	strh.w	r1, [sp, #10]
 8026ce6:	1a5b      	subs	r3, r3, r1
 8026ce8:	f8ad 000c 	strh.w	r0, [sp, #12]
 8026cec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026cf0:	f10d 0808 	add.w	r8, sp, #8
 8026cf4:	ae04      	add	r6, sp, #16
 8026cf6:	e898 0003 	ldmia.w	r8, {r0, r1}
 8026cfa:	e886 0003 	stmia.w	r6, {r0, r1}
 8026cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8026d02:	4660      	mov	r0, ip
 8026d04:	4631      	mov	r1, r6
 8026d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d08:	4798      	blx	r3
 8026d0a:	6861      	ldr	r1, [r4, #4]
 8026d0c:	4640      	mov	r0, r8
 8026d0e:	3104      	adds	r1, #4
 8026d10:	f7f5 f9cc 	bl	801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026d14:	4630      	mov	r0, r6
 8026d16:	f7f5 f9e1 	bl	801c0dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026d1a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8026d1e:	f7f4 fae7 	bl	801b2f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8026d22:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8026d26:	4638      	mov	r0, r7
 8026d28:	f000 fab2 	bl	8027290 <_ZN8touchgfx7Outline5resetEv>
 8026d2c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8026d30:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8026d34:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8026d38:	015b      	lsls	r3, r3, #5
 8026d3a:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8026d3e:	0152      	lsls	r2, r2, #5
 8026d40:	60e3      	str	r3, [r4, #12]
 8026d42:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8026d46:	60a2      	str	r2, [r4, #8]
 8026d48:	015b      	lsls	r3, r3, #5
 8026d4a:	6123      	str	r3, [r4, #16]
 8026d4c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8026d50:	015b      	lsls	r3, r3, #5
 8026d52:	6163      	str	r3, [r4, #20]
 8026d54:	4b47      	ldr	r3, [pc, #284]	; (8026e74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8026d56:	6818      	ldr	r0, [r3, #0]
 8026d58:	6803      	ldr	r3, [r0, #0]
 8026d5a:	6a1b      	ldr	r3, [r3, #32]
 8026d5c:	4798      	blx	r3
 8026d5e:	4606      	mov	r6, r0
 8026d60:	f7e9 fee6 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8026d64:	6803      	ldr	r3, [r0, #0]
 8026d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d68:	4798      	blx	r3
 8026d6a:	4607      	mov	r7, r0
 8026d6c:	f7e9 fee0 	bl	8010b30 <_ZN8touchgfx3HAL3lcdEv>
 8026d70:	6803      	ldr	r3, [r0, #0]
 8026d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d74:	4798      	blx	r3
 8026d76:	280c      	cmp	r0, #12
 8026d78:	d854      	bhi.n	8026e24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8026d7a:	e8df f000 	tbb	[pc, r0]
 8026d7e:	554b      	.short	0x554b
 8026d80:	2b6e0a66 	.word	0x2b6e0a66
 8026d84:	5f5f5f3b 	.word	0x5f5f5f3b
 8026d88:	5f5f      	.short	0x5f5f
 8026d8a:	6e          	.byte	0x6e
 8026d8b:	00          	.byte	0x00
 8026d8c:	2300      	movs	r3, #0
 8026d8e:	9303      	str	r3, [sp, #12]
 8026d90:	e7ae      	b.n	8026cf0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8026d92:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026d96:	2108      	movs	r1, #8
 8026d98:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026d9c:	fb92 f1f1 	sdiv	r1, r2, r1
 8026da0:	fb07 1303 	mla	r3, r7, r3, r1
 8026da4:	441e      	add	r6, r3
 8026da6:	4253      	negs	r3, r2
 8026da8:	f002 0207 	and.w	r2, r2, #7
 8026dac:	f003 0307 	and.w	r3, r3, #7
 8026db0:	bf58      	it	pl
 8026db2:	425a      	negpl	r2, r3
 8026db4:	b2d2      	uxtb	r2, r2
 8026db6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8026dba:	4628      	mov	r0, r5
 8026dbc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8026dc0:	66e1      	str	r1, [r4, #108]	; 0x6c
 8026dc2:	e9cd 1700 	strd	r1, r7, [sp]
 8026dc6:	4631      	mov	r1, r6
 8026dc8:	f001 fabb 	bl	8028342 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8026dcc:	4620      	mov	r0, r4
 8026dce:	b006      	add	sp, #24
 8026dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026dd4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026dd8:	2104      	movs	r1, #4
 8026dda:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026dde:	fb92 f1f1 	sdiv	r1, r2, r1
 8026de2:	fb07 1303 	mla	r3, r7, r3, r1
 8026de6:	441e      	add	r6, r3
 8026de8:	4253      	negs	r3, r2
 8026dea:	f002 0203 	and.w	r2, r2, #3
 8026dee:	f003 0303 	and.w	r3, r3, #3
 8026df2:	e7dd      	b.n	8026db0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8026df4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026df8:	2102      	movs	r1, #2
 8026dfa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026dfe:	2a00      	cmp	r2, #0
 8026e00:	fb92 f1f1 	sdiv	r1, r2, r1
 8026e04:	f002 0201 	and.w	r2, r2, #1
 8026e08:	fb07 1303 	mla	r3, r7, r3, r1
 8026e0c:	bfb8      	it	lt
 8026e0e:	4252      	neglt	r2, r2
 8026e10:	441e      	add	r6, r3
 8026e12:	e7cf      	b.n	8026db4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8026e14:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026e18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026e1c:	437b      	muls	r3, r7
 8026e1e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8026e22:	441e      	add	r6, r3
 8026e24:	2200      	movs	r2, #0
 8026e26:	e7c6      	b.n	8026db6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8026e28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026e2c:	2103      	movs	r1, #3
 8026e2e:	fb07 f203 	mul.w	r2, r7, r3
 8026e32:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8026e36:	fb13 2301 	smlabb	r3, r3, r1, r2
 8026e3a:	e7f2      	b.n	8026e22 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026e3c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026e40:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026e44:	fb07 2303 	mla	r3, r7, r3, r2
 8026e48:	e7eb      	b.n	8026e22 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026e4a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026e4e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026e52:	437b      	muls	r3, r7
 8026e54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026e58:	e7e3      	b.n	8026e22 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026e5a:	4b07      	ldr	r3, [pc, #28]	; (8026e78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8026e5c:	2156      	movs	r1, #86	; 0x56
 8026e5e:	4a03      	ldr	r2, [pc, #12]	; (8026e6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026e60:	e70e      	b.n	8026c80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8026e62:	bf00      	nop
 8026e64:	0802dd44 	.word	0x0802dd44
 8026e68:	0802dc8e 	.word	0x0802dc8e
 8026e6c:	0802dd4c 	.word	0x0802dd4c
 8026e70:	0802dcea 	.word	0x0802dcea
 8026e74:	2000beec 	.word	0x2000beec
 8026e78:	0802dd1e 	.word	0x0802dd1e

08026e7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8026e7c:	6812      	ldr	r2, [r2, #0]
 8026e7e:	2a00      	cmp	r2, #0
 8026e80:	db0b      	blt.n	8026e9a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8026e82:	9800      	ldr	r0, [sp, #0]
 8026e84:	6800      	ldr	r0, [r0, #0]
 8026e86:	4290      	cmp	r0, r2
 8026e88:	bfd4      	ite	le
 8026e8a:	2002      	movle	r0, #2
 8026e8c:	2000      	movgt	r0, #0
 8026e8e:	680a      	ldr	r2, [r1, #0]
 8026e90:	2a00      	cmp	r2, #0
 8026e92:	da04      	bge.n	8026e9e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8026e94:	f040 0004 	orr.w	r0, r0, #4
 8026e98:	4770      	bx	lr
 8026e9a:	2001      	movs	r0, #1
 8026e9c:	e7f7      	b.n	8026e8e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8026e9e:	681b      	ldr	r3, [r3, #0]
 8026ea0:	4293      	cmp	r3, r2
 8026ea2:	bfd8      	it	le
 8026ea4:	f040 0008 	orrle.w	r0, r0, #8
 8026ea8:	4770      	bx	lr
	...

08026eac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8026eac:	4b07      	ldr	r3, [pc, #28]	; (8026ecc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8026eae:	b510      	push	{r4, lr}
 8026eb0:	781b      	ldrb	r3, [r3, #0]
 8026eb2:	2b01      	cmp	r3, #1
 8026eb4:	d108      	bne.n	8026ec8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8026eb6:	6843      	ldr	r3, [r0, #4]
 8026eb8:	6814      	ldr	r4, [r2, #0]
 8026eba:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026ebe:	680b      	ldr	r3, [r1, #0]
 8026ec0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8026ec4:	6013      	str	r3, [r2, #0]
 8026ec6:	600c      	str	r4, [r1, #0]
 8026ec8:	bd10      	pop	{r4, pc}
 8026eca:	bf00      	nop
 8026ecc:	2000bee2 	.word	0x2000bee2

08026ed0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8026ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026ed2:	b085      	sub	sp, #20
 8026ed4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8026ed8:	4604      	mov	r4, r0
 8026eda:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026ede:	b33b      	cbz	r3, 8026f30 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8026ee0:	aa02      	add	r2, sp, #8
 8026ee2:	a903      	add	r1, sp, #12
 8026ee4:	f7ff ffe2 	bl	8026eac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026ee8:	68a3      	ldr	r3, [r4, #8]
 8026eea:	9e03      	ldr	r6, [sp, #12]
 8026eec:	aa02      	add	r2, sp, #8
 8026eee:	9f02      	ldr	r7, [sp, #8]
 8026ef0:	a903      	add	r1, sp, #12
 8026ef2:	1af6      	subs	r6, r6, r3
 8026ef4:	68e3      	ldr	r3, [r4, #12]
 8026ef6:	4620      	mov	r0, r4
 8026ef8:	1aff      	subs	r7, r7, r3
 8026efa:	f104 0314 	add.w	r3, r4, #20
 8026efe:	9603      	str	r6, [sp, #12]
 8026f00:	9300      	str	r3, [sp, #0]
 8026f02:	f104 0310 	add.w	r3, r4, #16
 8026f06:	9702      	str	r7, [sp, #8]
 8026f08:	f7ff ffb8 	bl	8026e7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8026f0c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8026f10:	4605      	mov	r5, r0
 8026f12:	b97b      	cbnz	r3, 8026f34 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8026f14:	463a      	mov	r2, r7
 8026f16:	4631      	mov	r1, r6
 8026f18:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8026f1c:	f7ff fe7a 	bl	8026c14 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026f20:	9b03      	ldr	r3, [sp, #12]
 8026f22:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8026f26:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8026f2a:	9b02      	ldr	r3, [sp, #8]
 8026f2c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8026f30:	b005      	add	sp, #20
 8026f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f34:	b110      	cbz	r0, 8026f3c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8026f36:	ea13 0200 	ands.w	r2, r3, r0
 8026f3a:	d11c      	bne.n	8026f76 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8026f3c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8026f40:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8026f44:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8026f48:	b188      	cbz	r0, 8026f6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8026f4a:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8026f4e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8026f52:	b913      	cbnz	r3, 8026f5a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8026f54:	4630      	mov	r0, r6
 8026f56:	f001 f806 	bl	8027f66 <_ZN8touchgfx7Outline6moveToEii>
 8026f5a:	2300      	movs	r3, #0
 8026f5c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026f60:	2301      	movs	r3, #1
 8026f62:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8026f66:	4630      	mov	r0, r6
 8026f68:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8026f6c:	e7d6      	b.n	8026f1c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8026f6e:	4630      	mov	r0, r6
 8026f70:	f7ff fe50 	bl	8026c14 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026f74:	e7f7      	b.n	8026f66 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8026f76:	4615      	mov	r5, r2
 8026f78:	e7d2      	b.n	8026f20 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08026f7a <_ZN8touchgfx6Canvas5closeEv>:
 8026f7a:	b538      	push	{r3, r4, r5, lr}
 8026f7c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8026f80:	4604      	mov	r4, r0
 8026f82:	b993      	cbnz	r3, 8026faa <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026f84:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8026f88:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8026f8c:	4213      	tst	r3, r2
 8026f8e:	d10c      	bne.n	8026faa <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026f90:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8026f94:	b123      	cbz	r3, 8026fa0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8026f96:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8026f9a:	4628      	mov	r0, r5
 8026f9c:	f7ff fe3a 	bl	8026c14 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026fa0:	4628      	mov	r0, r5
 8026fa2:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8026fa6:	f7ff fe35 	bl	8026c14 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026faa:	2300      	movs	r3, #0
 8026fac:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026fb0:	bd38      	pop	{r3, r4, r5, pc}

08026fb2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026fb4:	b085      	sub	sp, #20
 8026fb6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8026fba:	4604      	mov	r4, r0
 8026fbc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026fc0:	b353      	cbz	r3, 8027018 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8026fc2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8026fc6:	b90b      	cbnz	r3, 8026fcc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8026fc8:	f7ff ffd7 	bl	8026f7a <_ZN8touchgfx6Canvas5closeEv>
 8026fcc:	aa02      	add	r2, sp, #8
 8026fce:	a903      	add	r1, sp, #12
 8026fd0:	4620      	mov	r0, r4
 8026fd2:	f7ff ff6b 	bl	8026eac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026fd6:	68a3      	ldr	r3, [r4, #8]
 8026fd8:	9d03      	ldr	r5, [sp, #12]
 8026fda:	aa02      	add	r2, sp, #8
 8026fdc:	9e02      	ldr	r6, [sp, #8]
 8026fde:	a903      	add	r1, sp, #12
 8026fe0:	1aed      	subs	r5, r5, r3
 8026fe2:	68e3      	ldr	r3, [r4, #12]
 8026fe4:	4620      	mov	r0, r4
 8026fe6:	1af6      	subs	r6, r6, r3
 8026fe8:	f104 0314 	add.w	r3, r4, #20
 8026fec:	9503      	str	r5, [sp, #12]
 8026fee:	9300      	str	r3, [sp, #0]
 8026ff0:	f104 0310 	add.w	r3, r4, #16
 8026ff4:	9602      	str	r6, [sp, #8]
 8026ff6:	f7ff ff41 	bl	8026e7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8026ffa:	4607      	mov	r7, r0
 8026ffc:	b170      	cbz	r0, 802701c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8026ffe:	2301      	movs	r3, #1
 8027000:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8027004:	9a03      	ldr	r2, [sp, #12]
 8027006:	9b02      	ldr	r3, [sp, #8]
 8027008:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 802700c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8027010:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8027014:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8027018:	b005      	add	sp, #20
 802701a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802701c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8027020:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8027024:	b92b      	cbnz	r3, 8027032 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8027026:	4632      	mov	r2, r6
 8027028:	4629      	mov	r1, r5
 802702a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802702e:	f000 ff9a 	bl	8027f66 <_ZN8touchgfx7Outline6moveToEii>
 8027032:	2300      	movs	r3, #0
 8027034:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8027038:	2301      	movs	r3, #1
 802703a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802703e:	e7e1      	b.n	8027004 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08027040 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8027040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027044:	4604      	mov	r4, r0
 8027046:	b087      	sub	sp, #28
 8027048:	9105      	str	r1, [sp, #20]
 802704a:	f001 f8d0 	bl	80281ee <_ZN8touchgfx7Outline8getCellsEv>
 802704e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8027052:	4605      	mov	r5, r0
 8027054:	f1b9 0f00 	cmp.w	r9, #0
 8027058:	d103      	bne.n	8027062 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802705a:	2001      	movs	r0, #1
 802705c:	b007      	add	sp, #28
 802705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027062:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8027066:	2e00      	cmp	r6, #0
 8027068:	d139      	bne.n	80270de <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802706a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802706e:	f105 0708 	add.w	r7, r5, #8
 8027072:	4640      	mov	r0, r8
 8027074:	f001 f8fd 	bl	8028272 <_ZN8touchgfx8Scanline5resetEv>
 8027078:	f109 33ff 	add.w	r3, r9, #4294967295
 802707c:	9303      	str	r3, [sp, #12]
 802707e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8027082:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8027086:	46da      	mov	sl, fp
 8027088:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802708c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8027090:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8027094:	9b03      	ldr	r3, [sp, #12]
 8027096:	4416      	add	r6, r2
 8027098:	9504      	str	r5, [sp, #16]
 802709a:	463d      	mov	r5, r7
 802709c:	3b01      	subs	r3, #1
 802709e:	9303      	str	r3, [sp, #12]
 80270a0:	3301      	adds	r3, #1
 80270a2:	d01e      	beq.n	80270e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80270a4:	3708      	adds	r7, #8
 80270a6:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80270aa:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80270ae:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80270b2:	4290      	cmp	r0, r2
 80270b4:	d11e      	bne.n	80270f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80270b6:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80270ba:	4411      	add	r1, r2
 80270bc:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80270c0:	e7e8      	b.n	8027094 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80270c2:	1c91      	adds	r1, r2, #2
 80270c4:	f04f 0301 	mov.w	r3, #1
 80270c8:	65e1      	str	r1, [r4, #92]	; 0x5c
 80270ca:	8053      	strh	r3, [r2, #2]
 80270cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80270ce:	1c91      	adds	r1, r2, #2
 80270d0:	65a1      	str	r1, [r4, #88]	; 0x58
 80270d2:	f8a2 b002 	strh.w	fp, [r2, #2]
 80270d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80270d8:	3201      	adds	r2, #1
 80270da:	6562      	str	r2, [r4, #84]	; 0x54
 80270dc:	e03a      	b.n	8027154 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80270de:	2000      	movs	r0, #0
 80270e0:	e7bc      	b.n	802705c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80270e2:	b951      	cbnz	r1, 80270fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80270e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80270e6:	2b00      	cmp	r3, #0
 80270e8:	d0b7      	beq.n	802705a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80270ea:	4641      	mov	r1, r8
 80270ec:	9805      	ldr	r0, [sp, #20]
 80270ee:	f7ff fd5b 	bl	8026ba8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80270f2:	e7b2      	b.n	802705a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80270f4:	2900      	cmp	r1, #0
 80270f6:	d035      	beq.n	8027164 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80270f8:	9504      	str	r5, [sp, #16]
 80270fa:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80270fe:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8027102:	f7ff fd3d 	bl	8026b80 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8027106:	4605      	mov	r5, r0
 8027108:	b330      	cbz	r0, 8027158 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802710a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802710c:	b182      	cbz	r2, 8027130 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802710e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8027110:	454a      	cmp	r2, r9
 8027112:	d00d      	beq.n	8027130 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8027114:	4641      	mov	r1, r8
 8027116:	9805      	ldr	r0, [sp, #20]
 8027118:	f7ff fd46 	bl	8026ba8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802711c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027120:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8027122:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8027126:	65e2      	str	r2, [r4, #92]	; 0x5c
 8027128:	2300      	movs	r3, #0
 802712a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802712c:	6563      	str	r3, [r4, #84]	; 0x54
 802712e:	65a2      	str	r2, [r4, #88]	; 0x58
 8027130:	f1bb 0f00 	cmp.w	fp, #0
 8027134:	db10      	blt.n	8027158 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8027136:	f7f4 f959 	bl	801b3ec <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802713a:	4583      	cmp	fp, r0
 802713c:	d20c      	bcs.n	8027158 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802713e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8027140:	f802 500b 	strb.w	r5, [r2, fp]
 8027144:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8027146:	3201      	adds	r2, #1
 8027148:	455a      	cmp	r2, fp
 802714a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802714c:	d1b9      	bne.n	80270c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802714e:	8811      	ldrh	r1, [r2, #0]
 8027150:	3101      	adds	r1, #1
 8027152:	8011      	strh	r1, [r2, #0]
 8027154:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8027158:	9b03      	ldr	r3, [sp, #12]
 802715a:	3301      	adds	r3, #1
 802715c:	d0c2      	beq.n	80270e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802715e:	f10b 0a01 	add.w	sl, fp, #1
 8027162:	9d04      	ldr	r5, [sp, #16]
 8027164:	f9b5 3000 	ldrsh.w	r3, [r5]
 8027168:	4553      	cmp	r3, sl
 802716a:	dd88      	ble.n	802707e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802716c:	01b1      	lsls	r1, r6, #6
 802716e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8027172:	f7ff fd05 	bl	8026b80 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8027176:	4683      	mov	fp, r0
 8027178:	2800      	cmp	r0, #0
 802717a:	d080      	beq.n	802707e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802717c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802717e:	b183      	cbz	r3, 80271a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8027180:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8027182:	454b      	cmp	r3, r9
 8027184:	d00d      	beq.n	80271a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8027186:	4641      	mov	r1, r8
 8027188:	9805      	ldr	r0, [sp, #20]
 802718a:	f7ff fd0d 	bl	8026ba8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802718e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027192:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8027196:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8027198:	65e3      	str	r3, [r4, #92]	; 0x5c
 802719a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802719c:	65a3      	str	r3, [r4, #88]	; 0x58
 802719e:	2300      	movs	r3, #0
 80271a0:	6563      	str	r3, [r4, #84]	; 0x54
 80271a2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80271a6:	464a      	mov	r2, r9
 80271a8:	f8cd b000 	str.w	fp, [sp]
 80271ac:	4651      	mov	r1, sl
 80271ae:	eba3 030a 	sub.w	r3, r3, sl
 80271b2:	4640      	mov	r0, r8
 80271b4:	f001 f884 	bl	80282c0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80271b8:	e761      	b.n	802707e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080271ba <_ZN8touchgfx6Canvas6renderEv>:
 80271ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80271bc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80271c0:	4604      	mov	r4, r0
 80271c2:	b913      	cbnz	r3, 80271ca <_ZN8touchgfx6Canvas6renderEv+0x10>
 80271c4:	2001      	movs	r0, #1
 80271c6:	b003      	add	sp, #12
 80271c8:	bd30      	pop	{r4, r5, pc}
 80271ca:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80271ce:	2b00      	cmp	r3, #0
 80271d0:	d131      	bne.n	8027236 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80271d2:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80271d6:	2b00      	cmp	r3, #0
 80271d8:	d0f4      	beq.n	80271c4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80271da:	6840      	ldr	r0, [r0, #4]
 80271dc:	6803      	ldr	r3, [r0, #0]
 80271de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80271e0:	4798      	blx	r3
 80271e2:	2800      	cmp	r0, #0
 80271e4:	d0ee      	beq.n	80271c4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80271e6:	4620      	mov	r0, r4
 80271e8:	f7ff fec7 	bl	8026f7a <_ZN8touchgfx6Canvas5closeEv>
 80271ec:	6860      	ldr	r0, [r4, #4]
 80271ee:	6803      	ldr	r3, [r0, #0]
 80271f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80271f2:	4798      	blx	r3
 80271f4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80271f8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80271fc:	f7f2 ff61 	bl	801a0c2 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8027200:	6860      	ldr	r0, [r4, #4]
 8027202:	6803      	ldr	r3, [r0, #0]
 8027204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8027206:	4798      	blx	r3
 8027208:	4605      	mov	r5, r0
 802720a:	6860      	ldr	r0, [r4, #4]
 802720c:	6803      	ldr	r3, [r0, #0]
 802720e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027210:	4798      	blx	r3
 8027212:	4601      	mov	r1, r0
 8027214:	4628      	mov	r0, r5
 8027216:	f7f2 ff57 	bl	801a0c8 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802721a:	6860      	ldr	r0, [r4, #4]
 802721c:	6803      	ldr	r3, [r0, #0]
 802721e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8027220:	4798      	blx	r3
 8027222:	f104 0318 	add.w	r3, r4, #24
 8027226:	4669      	mov	r1, sp
 8027228:	e9cd 3000 	strd	r3, r0, [sp]
 802722c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8027230:	f7ff ff06 	bl	8027040 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8027234:	e7c7      	b.n	80271c6 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8027236:	2000      	movs	r0, #0
 8027238:	e7c5      	b.n	80271c6 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

0802723c <_ZN8touchgfx6CanvasD1Ev>:
 802723c:	b538      	push	{r3, r4, r5, lr}
 802723e:	4605      	mov	r5, r0
 8027240:	4b08      	ldr	r3, [pc, #32]	; (8027264 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8027242:	4604      	mov	r4, r0
 8027244:	f845 3b2c 	str.w	r3, [r5], #44
 8027248:	4b07      	ldr	r3, [pc, #28]	; (8027268 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802724a:	6818      	ldr	r0, [r3, #0]
 802724c:	6803      	ldr	r3, [r0, #0]
 802724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027250:	4798      	blx	r3
 8027252:	4628      	mov	r0, r5
 8027254:	f000 f814 	bl	8027280 <_ZN8touchgfx7OutlineD1Ev>
 8027258:	f104 0018 	add.w	r0, r4, #24
 802725c:	f001 f870 	bl	8028340 <_ZN8touchgfx15RenderingBufferD1Ev>
 8027260:	4620      	mov	r0, r4
 8027262:	bd38      	pop	{r3, r4, r5, pc}
 8027264:	0802dd44 	.word	0x0802dd44
 8027268:	2000beec 	.word	0x2000beec

0802726c <_ZN8touchgfx6CanvasD0Ev>:
 802726c:	b510      	push	{r4, lr}
 802726e:	4604      	mov	r4, r0
 8027270:	f7ff ffe4 	bl	802723c <_ZN8touchgfx6CanvasD1Ev>
 8027274:	21b8      	movs	r1, #184	; 0xb8
 8027276:	4620      	mov	r0, r4
 8027278:	f001 f873 	bl	8028362 <_ZdlPvj>
 802727c:	4620      	mov	r0, r4
 802727e:	bd10      	pop	{r4, pc}

08027280 <_ZN8touchgfx7OutlineD1Ev>:
 8027280:	4770      	bx	lr

08027282 <_ZN8touchgfx7OutlineD0Ev>:
 8027282:	b510      	push	{r4, lr}
 8027284:	4604      	mov	r4, r0
 8027286:	2148      	movs	r1, #72	; 0x48
 8027288:	f001 f86b 	bl	8028362 <_ZdlPvj>
 802728c:	4620      	mov	r0, r4
 802728e:	bd10      	pop	{r4, pc}

08027290 <_ZN8touchgfx7Outline5resetEv>:
 8027290:	b510      	push	{r4, lr}
 8027292:	4604      	mov	r4, r0
 8027294:	f7f4 f8c2 	bl	801b41c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8027298:	60e0      	str	r0, [r4, #12]
 802729a:	f7f4 f8c5 	bl	801b428 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802729e:	68e3      	ldr	r3, [r4, #12]
 80272a0:	2200      	movs	r2, #0
 80272a2:	08c0      	lsrs	r0, r0, #3
 80272a4:	6123      	str	r3, [r4, #16]
 80272a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80272aa:	6060      	str	r0, [r4, #4]
 80272ac:	82a3      	strh	r3, [r4, #20]
 80272ae:	82e3      	strh	r3, [r4, #22]
 80272b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80272b2:	60a2      	str	r2, [r4, #8]
 80272b4:	f023 0301 	bic.w	r3, r3, #1
 80272b8:	8322      	strh	r2, [r4, #24]
 80272ba:	8362      	strh	r2, [r4, #26]
 80272bc:	f043 0302 	orr.w	r3, r3, #2
 80272c0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80272c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80272c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80272ca:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80272ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80272d2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80272d6:	bd10      	pop	{r4, pc}

080272d8 <_ZN8touchgfx7OutlineC1Ev>:
 80272d8:	4b0f      	ldr	r3, [pc, #60]	; (8027318 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80272da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80272de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80272e2:	b510      	push	{r4, lr}
 80272e4:	6003      	str	r3, [r0, #0]
 80272e6:	2300      	movs	r3, #0
 80272e8:	4604      	mov	r4, r0
 80272ea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80272ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80272f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80272f6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80272fa:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80272fe:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8027302:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8027306:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802730a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802730e:	f7ff ffbf 	bl	8027290 <_ZN8touchgfx7Outline5resetEv>
 8027312:	4620      	mov	r0, r4
 8027314:	bd10      	pop	{r4, pc}
 8027316:	bf00      	nop
 8027318:	0802dda4 	.word	0x0802dda4

0802731c <_ZN8touchgfx7Outline10renderLineEiiii>:
 802731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027320:	b093      	sub	sp, #76	; 0x4c
 8027322:	4604      	mov	r4, r0
 8027324:	1156      	asrs	r6, r2, #5
 8027326:	f002 0e1f 	and.w	lr, r2, #31
 802732a:	981c      	ldr	r0, [sp, #112]	; 0x70
 802732c:	9305      	str	r3, [sp, #20]
 802732e:	1143      	asrs	r3, r0, #5
 8027330:	1145      	asrs	r5, r0, #5
 8027332:	930c      	str	r3, [sp, #48]	; 0x30
 8027334:	f000 031f 	and.w	r3, r0, #31
 8027338:	9303      	str	r3, [sp, #12]
 802733a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802733c:	42b3      	cmp	r3, r6
 802733e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8027340:	bfc8      	it	gt
 8027342:	6326      	strgt	r6, [r4, #48]	; 0x30
 8027344:	42b3      	cmp	r3, r6
 8027346:	bfdc      	itt	le
 8027348:	1c73      	addle	r3, r6, #1
 802734a:	63a3      	strle	r3, [r4, #56]	; 0x38
 802734c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802734e:	42ab      	cmp	r3, r5
 8027350:	bfc8      	it	gt
 8027352:	462b      	movgt	r3, r5
 8027354:	ea4f 1560 	mov.w	r5, r0, asr #5
 8027358:	bfc8      	it	gt
 802735a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802735c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802735e:	42ab      	cmp	r3, r5
 8027360:	bfd8      	it	le
 8027362:	462b      	movle	r3, r5
 8027364:	ea4f 1561 	mov.w	r5, r1, asr #5
 8027368:	bfdc      	itt	le
 802736a:	3301      	addle	r3, #1
 802736c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802736e:	9b05      	ldr	r3, [sp, #20]
 8027370:	eba3 0a01 	sub.w	sl, r3, r1
 8027374:	1143      	asrs	r3, r0, #5
 8027376:	429e      	cmp	r6, r3
 8027378:	f040 8119 	bne.w	80275ae <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 802737c:	9b05      	ldr	r3, [sp, #20]
 802737e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8027382:	9b03      	ldr	r3, [sp, #12]
 8027384:	459e      	cmp	lr, r3
 8027386:	d12c      	bne.n	80273e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8027388:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802738c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8027390:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8027394:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8027398:	4291      	cmp	r1, r2
 802739a:	d037      	beq.n	802740c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802739c:	8b61      	ldrh	r1, [r4, #26]
 802739e:	8b22      	ldrh	r2, [r4, #24]
 80273a0:	430a      	orrs	r2, r1
 80273a2:	d00b      	beq.n	80273bc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80273a4:	2b00      	cmp	r3, #0
 80273a6:	db09      	blt.n	80273bc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80273a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80273aa:	429a      	cmp	r2, r3
 80273ac:	dd06      	ble.n	80273bc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80273ae:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80273b2:	429a      	cmp	r2, r3
 80273b4:	d308      	bcc.n	80273c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80273b6:	2301      	movs	r3, #1
 80273b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80273bc:	f8a4 c014 	strh.w	ip, [r4, #20]
 80273c0:	82e6      	strh	r6, [r4, #22]
 80273c2:	2300      	movs	r3, #0
 80273c4:	8323      	strh	r3, [r4, #24]
 80273c6:	e0c6      	b.n	8027556 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80273c8:	f104 0314 	add.w	r3, r4, #20
 80273cc:	6922      	ldr	r2, [r4, #16]
 80273ce:	cb03      	ldmia	r3!, {r0, r1}
 80273d0:	6010      	str	r0, [r2, #0]
 80273d2:	6051      	str	r1, [r2, #4]
 80273d4:	6923      	ldr	r3, [r4, #16]
 80273d6:	3308      	adds	r3, #8
 80273d8:	6123      	str	r3, [r4, #16]
 80273da:	68a3      	ldr	r3, [r4, #8]
 80273dc:	3301      	adds	r3, #1
 80273de:	60a3      	str	r3, [r4, #8]
 80273e0:	e7ec      	b.n	80273bc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80273e2:	9b05      	ldr	r3, [sp, #20]
 80273e4:	45ac      	cmp	ip, r5
 80273e6:	f001 011f 	and.w	r1, r1, #31
 80273ea:	8b20      	ldrh	r0, [r4, #24]
 80273ec:	f003 031f 	and.w	r3, r3, #31
 80273f0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80273f4:	9304      	str	r3, [sp, #16]
 80273f6:	9b03      	ldr	r3, [sp, #12]
 80273f8:	eba3 020e 	sub.w	r2, r3, lr
 80273fc:	d109      	bne.n	8027412 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80273fe:	9b04      	ldr	r3, [sp, #16]
 8027400:	4410      	add	r0, r2
 8027402:	4419      	add	r1, r3
 8027404:	8320      	strh	r0, [r4, #24]
 8027406:	fb02 8201 	mla	r2, r2, r1, r8
 802740a:	8362      	strh	r2, [r4, #26]
 802740c:	b013      	add	sp, #76	; 0x4c
 802740e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027412:	f1ba 0f00 	cmp.w	sl, #0
 8027416:	f2c0 80a0 	blt.w	802755a <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802741a:	f1c1 0320 	rsb	r3, r1, #32
 802741e:	f04f 0b20 	mov.w	fp, #32
 8027422:	435a      	muls	r2, r3
 8027424:	2301      	movs	r3, #1
 8027426:	9302      	str	r3, [sp, #8]
 8027428:	4459      	add	r1, fp
 802742a:	fb92 f7fa 	sdiv	r7, r2, sl
 802742e:	fb0a 2217 	mls	r2, sl, r7, r2
 8027432:	2a00      	cmp	r2, #0
 8027434:	bfbc      	itt	lt
 8027436:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802743a:	4452      	addlt	r2, sl
 802743c:	fb07 8101 	mla	r1, r7, r1, r8
 8027440:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8027444:	4438      	add	r0, r7
 8027446:	b20b      	sxth	r3, r1
 8027448:	9902      	ldr	r1, [sp, #8]
 802744a:	b200      	sxth	r0, r0
 802744c:	9301      	str	r3, [sp, #4]
 802744e:	8363      	strh	r3, [r4, #26]
 8027450:	186b      	adds	r3, r5, r1
 8027452:	0435      	lsls	r5, r6, #16
 8027454:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8027458:	8320      	strh	r0, [r4, #24]
 802745a:	eb03 0905 	add.w	r9, r3, r5
 802745e:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8027462:	9300      	str	r3, [sp, #0]
 8027464:	45c1      	cmp	r9, r8
 8027466:	9505      	str	r5, [sp, #20]
 8027468:	d014      	beq.n	8027494 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802746a:	9b01      	ldr	r3, [sp, #4]
 802746c:	4303      	orrs	r3, r0
 802746e:	d00b      	beq.n	8027488 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8027470:	2900      	cmp	r1, #0
 8027472:	db09      	blt.n	8027488 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8027474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027476:	428b      	cmp	r3, r1
 8027478:	dd06      	ble.n	8027488 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802747a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802747e:	4299      	cmp	r1, r3
 8027480:	d374      	bcc.n	802756c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8027482:	2301      	movs	r3, #1
 8027484:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027488:	9b00      	ldr	r3, [sp, #0]
 802748a:	82e6      	strh	r6, [r4, #22]
 802748c:	82a3      	strh	r3, [r4, #20]
 802748e:	2300      	movs	r3, #0
 8027490:	8323      	strh	r3, [r4, #24]
 8027492:	8363      	strh	r3, [r4, #26]
 8027494:	9900      	ldr	r1, [sp, #0]
 8027496:	eb0e 0307 	add.w	r3, lr, r7
 802749a:	458c      	cmp	ip, r1
 802749c:	d04e      	beq.n	802753c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802749e:	9903      	ldr	r1, [sp, #12]
 80274a0:	eba2 020a 	sub.w	r2, r2, sl
 80274a4:	1ac9      	subs	r1, r1, r3
 80274a6:	9201      	str	r2, [sp, #4]
 80274a8:	440f      	add	r7, r1
 80274aa:	017f      	lsls	r7, r7, #5
 80274ac:	fb97 fefa 	sdiv	lr, r7, sl
 80274b0:	fb0a 771e 	mls	r7, sl, lr, r7
 80274b4:	2f00      	cmp	r7, #0
 80274b6:	bfbc      	itt	lt
 80274b8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80274bc:	4457      	addlt	r7, sl
 80274be:	f10e 0101 	add.w	r1, lr, #1
 80274c2:	9106      	str	r1, [sp, #24]
 80274c4:	9a01      	ldr	r2, [sp, #4]
 80274c6:	8b20      	ldrh	r0, [r4, #24]
 80274c8:	19d2      	adds	r2, r2, r7
 80274ca:	8b61      	ldrh	r1, [r4, #26]
 80274cc:	9d02      	ldr	r5, [sp, #8]
 80274ce:	9201      	str	r2, [sp, #4]
 80274d0:	bf5b      	ittet	pl
 80274d2:	eba2 020a 	subpl.w	r2, r2, sl
 80274d6:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80274da:	46f0      	movmi	r8, lr
 80274dc:	9201      	strpl	r2, [sp, #4]
 80274de:	9a00      	ldr	r2, [sp, #0]
 80274e0:	4440      	add	r0, r8
 80274e2:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80274e6:	4443      	add	r3, r8
 80274e8:	442a      	add	r2, r5
 80274ea:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80274ee:	9d05      	ldr	r5, [sp, #20]
 80274f0:	b200      	sxth	r0, r0
 80274f2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80274f6:	b209      	sxth	r1, r1
 80274f8:	4415      	add	r5, r2
 80274fa:	8320      	strh	r0, [r4, #24]
 80274fc:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027500:	8361      	strh	r1, [r4, #26]
 8027502:	9200      	str	r2, [sp, #0]
 8027504:	454d      	cmp	r5, r9
 8027506:	d016      	beq.n	8027536 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8027508:	4301      	orrs	r1, r0
 802750a:	d00d      	beq.n	8027528 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802750c:	f1b8 0f00 	cmp.w	r8, #0
 8027510:	db0a      	blt.n	8027528 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8027512:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027514:	4541      	cmp	r1, r8
 8027516:	dd07      	ble.n	8027528 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8027518:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802751c:	4288      	cmp	r0, r1
 802751e:	d335      	bcc.n	802758c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8027520:	f04f 0101 	mov.w	r1, #1
 8027524:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8027528:	9900      	ldr	r1, [sp, #0]
 802752a:	82e6      	strh	r6, [r4, #22]
 802752c:	82a1      	strh	r1, [r4, #20]
 802752e:	f04f 0100 	mov.w	r1, #0
 8027532:	8321      	strh	r1, [r4, #24]
 8027534:	8361      	strh	r1, [r4, #26]
 8027536:	9a00      	ldr	r2, [sp, #0]
 8027538:	4594      	cmp	ip, r2
 802753a:	d1c3      	bne.n	80274c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 802753c:	9a03      	ldr	r2, [sp, #12]
 802753e:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8027542:	1ad3      	subs	r3, r2, r3
 8027544:	8b22      	ldrh	r2, [r4, #24]
 8027546:	441a      	add	r2, r3
 8027548:	8322      	strh	r2, [r4, #24]
 802754a:	9a04      	ldr	r2, [sp, #16]
 802754c:	3220      	adds	r2, #32
 802754e:	eba2 020b 	sub.w	r2, r2, fp
 8027552:	fb03 c302 	mla	r3, r3, r2, ip
 8027556:	8363      	strh	r3, [r4, #26]
 8027558:	e758      	b.n	802740c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802755a:	f04f 33ff 	mov.w	r3, #4294967295
 802755e:	434a      	muls	r2, r1
 8027560:	f1ca 0a00 	rsb	sl, sl, #0
 8027564:	f04f 0b00 	mov.w	fp, #0
 8027568:	9302      	str	r3, [sp, #8]
 802756a:	e75d      	b.n	8027428 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 802756c:	f104 0314 	add.w	r3, r4, #20
 8027570:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027574:	cb03      	ldmia	r3!, {r0, r1}
 8027576:	f8c8 0000 	str.w	r0, [r8]
 802757a:	f8c8 1004 	str.w	r1, [r8, #4]
 802757e:	6923      	ldr	r3, [r4, #16]
 8027580:	3308      	adds	r3, #8
 8027582:	6123      	str	r3, [r4, #16]
 8027584:	68a3      	ldr	r3, [r4, #8]
 8027586:	3301      	adds	r3, #1
 8027588:	60a3      	str	r3, [r4, #8]
 802758a:	e77d      	b.n	8027488 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802758c:	f104 0814 	add.w	r8, r4, #20
 8027590:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027594:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027598:	f8c9 0000 	str.w	r0, [r9]
 802759c:	f8c9 1004 	str.w	r1, [r9, #4]
 80275a0:	6921      	ldr	r1, [r4, #16]
 80275a2:	3108      	adds	r1, #8
 80275a4:	6121      	str	r1, [r4, #16]
 80275a6:	68a1      	ldr	r1, [r4, #8]
 80275a8:	3101      	adds	r1, #1
 80275aa:	60a1      	str	r1, [r4, #8]
 80275ac:	e7bc      	b.n	8027528 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80275ae:	1a83      	subs	r3, r0, r2
 80275b0:	9301      	str	r3, [sp, #4]
 80275b2:	f1ba 0f00 	cmp.w	sl, #0
 80275b6:	f040 8094 	bne.w	80276e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80275ba:	9a01      	ldr	r2, [sp, #4]
 80275bc:	0049      	lsls	r1, r1, #1
 80275be:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80275c2:	2a00      	cmp	r2, #0
 80275c4:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80275c8:	8b62      	ldrh	r2, [r4, #26]
 80275ca:	bfaa      	itet	ge
 80275cc:	f04f 0a20 	movge.w	sl, #32
 80275d0:	f04f 38ff 	movlt.w	r8, #4294967295
 80275d4:	f04f 0801 	movge.w	r8, #1
 80275d8:	8b21      	ldrh	r1, [r4, #24]
 80275da:	ebaa 0e0e 	sub.w	lr, sl, lr
 80275de:	4471      	add	r1, lr
 80275e0:	fb0e 2e03 	mla	lr, lr, r3, r2
 80275e4:	eb08 0206 	add.w	r2, r8, r6
 80275e8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80275ec:	b209      	sxth	r1, r1
 80275ee:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80275f2:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80275f6:	8321      	strh	r1, [r4, #24]
 80275f8:	fa0f fe8e 	sxth.w	lr, lr
 80275fc:	42b7      	cmp	r7, r6
 80275fe:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8027602:	d013      	beq.n	802762c <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8027604:	ea51 010e 	orrs.w	r1, r1, lr
 8027608:	d00b      	beq.n	8027622 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802760a:	2800      	cmp	r0, #0
 802760c:	db09      	blt.n	8027622 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802760e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027610:	4281      	cmp	r1, r0
 8027612:	dd06      	ble.n	8027622 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8027614:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027618:	4288      	cmp	r0, r1
 802761a:	d339      	bcc.n	8027690 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 802761c:	2101      	movs	r1, #1
 802761e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8027622:	2100      	movs	r1, #0
 8027624:	82a5      	strh	r5, [r4, #20]
 8027626:	82e2      	strh	r2, [r4, #22]
 8027628:	8321      	strh	r1, [r4, #24]
 802762a:	8361      	strh	r1, [r4, #26]
 802762c:	f1aa 0610 	sub.w	r6, sl, #16
 8027630:	f04f 0e00 	mov.w	lr, #0
 8027634:	f04f 0b01 	mov.w	fp, #1
 8027638:	0076      	lsls	r6, r6, #1
 802763a:	fb06 f703 	mul.w	r7, r6, r3
 802763e:	b236      	sxth	r6, r6
 8027640:	b23f      	sxth	r7, r7
 8027642:	ea46 0107 	orr.w	r1, r6, r7
 8027646:	9100      	str	r1, [sp, #0]
 8027648:	990c      	ldr	r1, [sp, #48]	; 0x30
 802764a:	428a      	cmp	r2, r1
 802764c:	d03e      	beq.n	80276cc <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802764e:	4442      	add	r2, r8
 8027650:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8027654:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8027658:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 802765c:	8326      	strh	r6, [r4, #24]
 802765e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8027662:	8367      	strh	r7, [r4, #26]
 8027664:	4584      	cmp	ip, r0
 8027666:	d0ef      	beq.n	8027648 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8027668:	9800      	ldr	r0, [sp, #0]
 802766a:	b150      	cbz	r0, 8027682 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802766c:	2900      	cmp	r1, #0
 802766e:	db08      	blt.n	8027682 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8027670:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8027672:	4288      	cmp	r0, r1
 8027674:	dd05      	ble.n	8027682 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8027676:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802767a:	4288      	cmp	r0, r1
 802767c:	d315      	bcc.n	80276aa <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802767e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8027682:	82a5      	strh	r5, [r4, #20]
 8027684:	82e2      	strh	r2, [r4, #22]
 8027686:	f8a4 e018 	strh.w	lr, [r4, #24]
 802768a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802768e:	e7db      	b.n	8027648 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8027690:	f104 0614 	add.w	r6, r4, #20
 8027694:	6927      	ldr	r7, [r4, #16]
 8027696:	ce03      	ldmia	r6!, {r0, r1}
 8027698:	6038      	str	r0, [r7, #0]
 802769a:	6079      	str	r1, [r7, #4]
 802769c:	6921      	ldr	r1, [r4, #16]
 802769e:	3108      	adds	r1, #8
 80276a0:	6121      	str	r1, [r4, #16]
 80276a2:	68a1      	ldr	r1, [r4, #8]
 80276a4:	3101      	adds	r1, #1
 80276a6:	60a1      	str	r1, [r4, #8]
 80276a8:	e7bb      	b.n	8027622 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80276aa:	f104 0c14 	add.w	ip, r4, #20
 80276ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80276b2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80276b6:	f8c9 0000 	str.w	r0, [r9]
 80276ba:	f8c9 1004 	str.w	r1, [r9, #4]
 80276be:	6921      	ldr	r1, [r4, #16]
 80276c0:	3108      	adds	r1, #8
 80276c2:	6121      	str	r1, [r4, #16]
 80276c4:	68a1      	ldr	r1, [r4, #8]
 80276c6:	3101      	adds	r1, #1
 80276c8:	60a1      	str	r1, [r4, #8]
 80276ca:	e7da      	b.n	8027682 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80276cc:	9a03      	ldr	r2, [sp, #12]
 80276ce:	8b61      	ldrh	r1, [r4, #26]
 80276d0:	f1a2 0c20 	sub.w	ip, r2, #32
 80276d4:	8b22      	ldrh	r2, [r4, #24]
 80276d6:	44d4      	add	ip, sl
 80276d8:	4462      	add	r2, ip
 80276da:	fb0c 1303 	mla	r3, ip, r3, r1
 80276de:	8322      	strh	r2, [r4, #24]
 80276e0:	e739      	b.n	8027556 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80276e2:	9b01      	ldr	r3, [sp, #4]
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	db3f      	blt.n	8027768 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 80276e8:	2201      	movs	r2, #1
 80276ea:	f1ce 0320 	rsb	r3, lr, #32
 80276ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80276f0:	2220      	movs	r2, #32
 80276f2:	fb0a f303 	mul.w	r3, sl, r3
 80276f6:	9202      	str	r2, [sp, #8]
 80276f8:	9a01      	ldr	r2, [sp, #4]
 80276fa:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80276fe:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027702:	fb93 f7f2 	sdiv	r7, r3, r2
 8027706:	fb02 3317 	mls	r3, r2, r7, r3
 802770a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802770e:	2b00      	cmp	r3, #0
 8027710:	9308      	str	r3, [sp, #32]
 8027712:	bfbc      	itt	lt
 8027714:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8027718:	189b      	addlt	r3, r3, r2
 802771a:	eb07 0b01 	add.w	fp, r7, r1
 802771e:	bfb8      	it	lt
 8027720:	9308      	strlt	r3, [sp, #32]
 8027722:	ea4f 136b 	mov.w	r3, fp, asr #5
 8027726:	9304      	str	r3, [sp, #16]
 8027728:	9b02      	ldr	r3, [sp, #8]
 802772a:	4573      	cmp	r3, lr
 802772c:	d133      	bne.n	8027796 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802772e:	9b04      	ldr	r3, [sp, #16]
 8027730:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8027734:	454b      	cmp	r3, r9
 8027736:	d045      	beq.n	80277c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8027738:	8b62      	ldrh	r2, [r4, #26]
 802773a:	8b23      	ldrh	r3, [r4, #24]
 802773c:	4313      	orrs	r3, r2
 802773e:	d00c      	beq.n	802775a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027740:	f1b8 0f00 	cmp.w	r8, #0
 8027744:	db09      	blt.n	802775a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027748:	4543      	cmp	r3, r8
 802774a:	dd06      	ble.n	802775a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802774c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8027750:	429a      	cmp	r2, r3
 8027752:	d313      	bcc.n	802777c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8027754:	2301      	movs	r3, #1
 8027756:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802775a:	9b04      	ldr	r3, [sp, #16]
 802775c:	82e6      	strh	r6, [r4, #22]
 802775e:	82a3      	strh	r3, [r4, #20]
 8027760:	2300      	movs	r3, #0
 8027762:	8323      	strh	r3, [r4, #24]
 8027764:	8363      	strh	r3, [r4, #26]
 8027766:	e02d      	b.n	80277c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8027768:	9a01      	ldr	r2, [sp, #4]
 802776a:	fb0a f30e 	mul.w	r3, sl, lr
 802776e:	4252      	negs	r2, r2
 8027770:	9201      	str	r2, [sp, #4]
 8027772:	f04f 32ff 	mov.w	r2, #4294967295
 8027776:	920b      	str	r2, [sp, #44]	; 0x2c
 8027778:	2200      	movs	r2, #0
 802777a:	e7bc      	b.n	80276f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 802777c:	f104 0314 	add.w	r3, r4, #20
 8027780:	6922      	ldr	r2, [r4, #16]
 8027782:	cb03      	ldmia	r3!, {r0, r1}
 8027784:	6010      	str	r0, [r2, #0]
 8027786:	6051      	str	r1, [r2, #4]
 8027788:	6923      	ldr	r3, [r4, #16]
 802778a:	3308      	adds	r3, #8
 802778c:	6123      	str	r3, [r4, #16]
 802778e:	68a3      	ldr	r3, [r4, #8]
 8027790:	3301      	adds	r3, #1
 8027792:	60a3      	str	r3, [r4, #8]
 8027794:	e7e1      	b.n	802775a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027796:	f00b 031f 	and.w	r3, fp, #31
 802779a:	f001 011f 	and.w	r1, r1, #31
 802779e:	8b20      	ldrh	r0, [r4, #24]
 80277a0:	9309      	str	r3, [sp, #36]	; 0x24
 80277a2:	9b02      	ldr	r3, [sp, #8]
 80277a4:	eba3 020e 	sub.w	r2, r3, lr
 80277a8:	8b63      	ldrh	r3, [r4, #26]
 80277aa:	9300      	str	r3, [sp, #0]
 80277ac:	9b04      	ldr	r3, [sp, #16]
 80277ae:	42ab      	cmp	r3, r5
 80277b0:	f040 80ef 	bne.w	8027992 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80277b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277b6:	4410      	add	r0, r2
 80277b8:	4419      	add	r1, r3
 80277ba:	9b00      	ldr	r3, [sp, #0]
 80277bc:	8320      	strh	r0, [r4, #24]
 80277be:	fb02 3101 	mla	r1, r2, r1, r3
 80277c2:	8361      	strh	r1, [r4, #26]
 80277c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80277c6:	9904      	ldr	r1, [sp, #16]
 80277c8:	4433      	add	r3, r6
 80277ca:	9300      	str	r3, [sp, #0]
 80277cc:	9a00      	ldr	r2, [sp, #0]
 80277ce:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80277d2:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 80277d6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80277da:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80277de:	4288      	cmp	r0, r1
 80277e0:	d018      	beq.n	8027814 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 80277e2:	8b60      	ldrh	r0, [r4, #26]
 80277e4:	8b21      	ldrh	r1, [r4, #24]
 80277e6:	ea50 0201 	orrs.w	r2, r0, r1
 80277ea:	d00c      	beq.n	8027806 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80277ec:	2b00      	cmp	r3, #0
 80277ee:	db0a      	blt.n	8027806 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80277f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80277f2:	4299      	cmp	r1, r3
 80277f4:	dd07      	ble.n	8027806 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80277f6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80277fa:	4299      	cmp	r1, r3
 80277fc:	f0c0 818b 	bcc.w	8027b16 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8027800:	2301      	movs	r3, #1
 8027802:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027806:	9b04      	ldr	r3, [sp, #16]
 8027808:	82a3      	strh	r3, [r4, #20]
 802780a:	9b00      	ldr	r3, [sp, #0]
 802780c:	82e3      	strh	r3, [r4, #22]
 802780e:	2300      	movs	r3, #0
 8027810:	8323      	strh	r3, [r4, #24]
 8027812:	8363      	strh	r3, [r4, #26]
 8027814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027816:	9a00      	ldr	r2, [sp, #0]
 8027818:	4293      	cmp	r3, r2
 802781a:	f000 808d 	beq.w	8027938 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802781e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8027822:	9901      	ldr	r1, [sp, #4]
 8027824:	9801      	ldr	r0, [sp, #4]
 8027826:	fb93 f1f1 	sdiv	r1, r3, r1
 802782a:	fb00 3311 	mls	r3, r0, r1, r3
 802782e:	9106      	str	r1, [sp, #24]
 8027830:	2b00      	cmp	r3, #0
 8027832:	9307      	str	r3, [sp, #28]
 8027834:	da04      	bge.n	8027840 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8027836:	1e4b      	subs	r3, r1, #1
 8027838:	9306      	str	r3, [sp, #24]
 802783a:	9b07      	ldr	r3, [sp, #28]
 802783c:	4403      	add	r3, r0
 802783e:	9307      	str	r3, [sp, #28]
 8027840:	9b08      	ldr	r3, [sp, #32]
 8027842:	f04f 0c00 	mov.w	ip, #0
 8027846:	9901      	ldr	r1, [sp, #4]
 8027848:	1a5b      	subs	r3, r3, r1
 802784a:	4659      	mov	r1, fp
 802784c:	9308      	str	r3, [sp, #32]
 802784e:	9b02      	ldr	r3, [sp, #8]
 8027850:	f1c3 0320 	rsb	r3, r3, #32
 8027854:	930a      	str	r3, [sp, #40]	; 0x28
 8027856:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027858:	9b02      	ldr	r3, [sp, #8]
 802785a:	1a1b      	subs	r3, r3, r0
 802785c:	9309      	str	r3, [sp, #36]	; 0x24
 802785e:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8027862:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8027866:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802786a:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802786e:	181b      	adds	r3, r3, r0
 8027870:	bf58      	it	pl
 8027872:	9801      	ldrpl	r0, [sp, #4]
 8027874:	9308      	str	r3, [sp, #32]
 8027876:	bf54      	ite	pl
 8027878:	1a1b      	subpl	r3, r3, r0
 802787a:	9d06      	ldrmi	r5, [sp, #24]
 802787c:	9802      	ldr	r0, [sp, #8]
 802787e:	bf5e      	ittt	pl
 8027880:	9308      	strpl	r3, [sp, #32]
 8027882:	9b06      	ldrpl	r3, [sp, #24]
 8027884:	1c5d      	addpl	r5, r3, #1
 8027886:	44ab      	add	fp, r5
 8027888:	ea4f 136b 	mov.w	r3, fp, asr #5
 802788c:	9304      	str	r3, [sp, #16]
 802788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027890:	4283      	cmp	r3, r0
 8027892:	f040 815a 	bne.w	8027b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8027896:	9b04      	ldr	r3, [sp, #16]
 8027898:	9a00      	ldr	r2, [sp, #0]
 802789a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802789e:	4543      	cmp	r3, r8
 80278a0:	d01a      	beq.n	80278d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80278a2:	8b61      	ldrh	r1, [r4, #26]
 80278a4:	8b23      	ldrh	r3, [r4, #24]
 80278a6:	430b      	orrs	r3, r1
 80278a8:	d00e      	beq.n	80278c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80278aa:	f1be 0f00 	cmp.w	lr, #0
 80278ae:	db0b      	blt.n	80278c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80278b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80278b2:	4573      	cmp	r3, lr
 80278b4:	dd08      	ble.n	80278c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80278b6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80278ba:	4299      	cmp	r1, r3
 80278bc:	f0c0 8138 	bcc.w	8027b30 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 80278c0:	f04f 0301 	mov.w	r3, #1
 80278c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80278c8:	9b04      	ldr	r3, [sp, #16]
 80278ca:	f8a4 c018 	strh.w	ip, [r4, #24]
 80278ce:	82a3      	strh	r3, [r4, #20]
 80278d0:	9b00      	ldr	r3, [sp, #0]
 80278d2:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80278d6:	82e3      	strh	r3, [r4, #22]
 80278d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80278da:	9a00      	ldr	r2, [sp, #0]
 80278dc:	441a      	add	r2, r3
 80278de:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80278e2:	9200      	str	r2, [sp, #0]
 80278e4:	9900      	ldr	r1, [sp, #0]
 80278e6:	9a04      	ldr	r2, [sp, #16]
 80278e8:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 80278ec:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80278f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80278f4:	4288      	cmp	r0, r1
 80278f6:	d01a      	beq.n	802792e <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 80278f8:	8b60      	ldrh	r0, [r4, #26]
 80278fa:	8b21      	ldrh	r1, [r4, #24]
 80278fc:	ea50 0201 	orrs.w	r2, r0, r1
 8027900:	d00d      	beq.n	802791e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027902:	2b00      	cmp	r3, #0
 8027904:	db0b      	blt.n	802791e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027906:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027908:	4299      	cmp	r1, r3
 802790a:	dd08      	ble.n	802791e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802790c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027910:	4299      	cmp	r1, r3
 8027912:	f0c0 81f9 	bcc.w	8027d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8027916:	f04f 0301 	mov.w	r3, #1
 802791a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802791e:	9b04      	ldr	r3, [sp, #16]
 8027920:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027924:	82a3      	strh	r3, [r4, #20]
 8027926:	9b00      	ldr	r3, [sp, #0]
 8027928:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802792c:	82e3      	strh	r3, [r4, #22]
 802792e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027930:	4659      	mov	r1, fp
 8027932:	9a00      	ldr	r2, [sp, #0]
 8027934:	4293      	cmp	r3, r2
 8027936:	d192      	bne.n	802785e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8027938:	9b02      	ldr	r3, [sp, #8]
 802793a:	f1c3 0c20 	rsb	ip, r3, #32
 802793e:	9b05      	ldr	r3, [sp, #20]
 8027940:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8027944:	9b03      	ldr	r3, [sp, #12]
 8027946:	459c      	cmp	ip, r3
 8027948:	f040 81f8 	bne.w	8027d3c <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 802794c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027950:	9a00      	ldr	r2, [sp, #0]
 8027952:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027956:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 802795a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802795e:	4288      	cmp	r0, r1
 8027960:	f43f ad54 	beq.w	802740c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027964:	8b60      	ldrh	r0, [r4, #26]
 8027966:	8b21      	ldrh	r1, [r4, #24]
 8027968:	ea50 0201 	orrs.w	r2, r0, r1
 802796c:	d00c      	beq.n	8027988 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802796e:	2b00      	cmp	r3, #0
 8027970:	db0a      	blt.n	8027988 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027972:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027974:	4299      	cmp	r1, r3
 8027976:	dd07      	ble.n	8027988 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027978:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802797c:	4299      	cmp	r1, r3
 802797e:	f0c0 81d0 	bcc.w	8027d22 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8027982:	2301      	movs	r3, #1
 8027984:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027988:	9b00      	ldr	r3, [sp, #0]
 802798a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802798e:	82e3      	strh	r3, [r4, #22]
 8027990:	e517      	b.n	80273c2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8027992:	2f00      	cmp	r7, #0
 8027994:	f2c0 8097 	blt.w	8027ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8027998:	2301      	movs	r3, #1
 802799a:	f1c1 0c20 	rsb	ip, r1, #32
 802799e:	9307      	str	r3, [sp, #28]
 80279a0:	2320      	movs	r3, #32
 80279a2:	fb02 f20c 	mul.w	r2, r2, ip
 80279a6:	9306      	str	r3, [sp, #24]
 80279a8:	9b06      	ldr	r3, [sp, #24]
 80279aa:	fb92 fcf7 	sdiv	ip, r2, r7
 80279ae:	fb07 221c 	mls	r2, r7, ip, r2
 80279b2:	4419      	add	r1, r3
 80279b4:	9b00      	ldr	r3, [sp, #0]
 80279b6:	2a00      	cmp	r2, #0
 80279b8:	bfbc      	itt	lt
 80279ba:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80279be:	19d2      	addlt	r2, r2, r7
 80279c0:	fb0c 3101 	mla	r1, ip, r1, r3
 80279c4:	9b07      	ldr	r3, [sp, #28]
 80279c6:	4460      	add	r0, ip
 80279c8:	441d      	add	r5, r3
 80279ca:	0433      	lsls	r3, r6, #16
 80279cc:	b200      	sxth	r0, r0
 80279ce:	930a      	str	r3, [sp, #40]	; 0x28
 80279d0:	18eb      	adds	r3, r5, r3
 80279d2:	b209      	sxth	r1, r1
 80279d4:	8320      	strh	r0, [r4, #24]
 80279d6:	454b      	cmp	r3, r9
 80279d8:	8361      	strh	r1, [r4, #26]
 80279da:	d014      	beq.n	8027a06 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 80279dc:	ea50 0301 	orrs.w	r3, r0, r1
 80279e0:	d00c      	beq.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80279e2:	f1b8 0f00 	cmp.w	r8, #0
 80279e6:	db09      	blt.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80279e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80279ea:	4543      	cmp	r3, r8
 80279ec:	dd06      	ble.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80279ee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80279f2:	4299      	cmp	r1, r3
 80279f4:	d36e      	bcc.n	8027ad4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80279f6:	2301      	movs	r3, #1
 80279f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80279fc:	2300      	movs	r3, #0
 80279fe:	82a5      	strh	r5, [r4, #20]
 8027a00:	82e6      	strh	r6, [r4, #22]
 8027a02:	8323      	strh	r3, [r4, #24]
 8027a04:	8363      	strh	r3, [r4, #26]
 8027a06:	9904      	ldr	r1, [sp, #16]
 8027a08:	eb0e 030c 	add.w	r3, lr, ip
 8027a0c:	42a9      	cmp	r1, r5
 8027a0e:	d04d      	beq.n	8027aac <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8027a10:	9902      	ldr	r1, [sp, #8]
 8027a12:	1bd2      	subs	r2, r2, r7
 8027a14:	1ac9      	subs	r1, r1, r3
 8027a16:	9200      	str	r2, [sp, #0]
 8027a18:	448c      	add	ip, r1
 8027a1a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8027a1e:	fb9c fef7 	sdiv	lr, ip, r7
 8027a22:	fb07 cc1e 	mls	ip, r7, lr, ip
 8027a26:	f1bc 0f00 	cmp.w	ip, #0
 8027a2a:	bfbc      	itt	lt
 8027a2c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8027a30:	44bc      	addlt	ip, r7
 8027a32:	f10e 0101 	add.w	r1, lr, #1
 8027a36:	910d      	str	r1, [sp, #52]	; 0x34
 8027a38:	9a00      	ldr	r2, [sp, #0]
 8027a3a:	8b20      	ldrh	r0, [r4, #24]
 8027a3c:	eb12 020c 	adds.w	r2, r2, ip
 8027a40:	8b61      	ldrh	r1, [r4, #26]
 8027a42:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027a46:	9200      	str	r2, [sp, #0]
 8027a48:	bf5b      	ittet	pl
 8027a4a:	1bd2      	subpl	r2, r2, r7
 8027a4c:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8027a50:	46f0      	movmi	r8, lr
 8027a52:	9200      	strpl	r2, [sp, #0]
 8027a54:	9a07      	ldr	r2, [sp, #28]
 8027a56:	4440      	add	r0, r8
 8027a58:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027a5c:	4443      	add	r3, r8
 8027a5e:	4415      	add	r5, r2
 8027a60:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027a66:	b200      	sxth	r0, r0
 8027a68:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027a6c:	442a      	add	r2, r5
 8027a6e:	b209      	sxth	r1, r1
 8027a70:	8320      	strh	r0, [r4, #24]
 8027a72:	454a      	cmp	r2, r9
 8027a74:	8361      	strh	r1, [r4, #26]
 8027a76:	d016      	beq.n	8027aa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8027a78:	ea50 0201 	orrs.w	r2, r0, r1
 8027a7c:	d00d      	beq.n	8027a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027a7e:	f1b8 0f00 	cmp.w	r8, #0
 8027a82:	db0a      	blt.n	8027a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027a84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027a86:	4541      	cmp	r1, r8
 8027a88:	dd07      	ble.n	8027a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027a8a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027a8e:	4288      	cmp	r0, r1
 8027a90:	d330      	bcc.n	8027af4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8027a92:	f04f 0201 	mov.w	r2, #1
 8027a96:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027a9a:	f04f 0200 	mov.w	r2, #0
 8027a9e:	82a5      	strh	r5, [r4, #20]
 8027aa0:	82e6      	strh	r6, [r4, #22]
 8027aa2:	8322      	strh	r2, [r4, #24]
 8027aa4:	8362      	strh	r2, [r4, #26]
 8027aa6:	9904      	ldr	r1, [sp, #16]
 8027aa8:	42a9      	cmp	r1, r5
 8027aaa:	d1c5      	bne.n	8027a38 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8027aac:	9a02      	ldr	r2, [sp, #8]
 8027aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027ab0:	1ad3      	subs	r3, r2, r3
 8027ab2:	8b22      	ldrh	r2, [r4, #24]
 8027ab4:	3120      	adds	r1, #32
 8027ab6:	441a      	add	r2, r3
 8027ab8:	8322      	strh	r2, [r4, #24]
 8027aba:	9a06      	ldr	r2, [sp, #24]
 8027abc:	1a89      	subs	r1, r1, r2
 8027abe:	8b62      	ldrh	r2, [r4, #26]
 8027ac0:	fb03 2301 	mla	r3, r3, r1, r2
 8027ac4:	e64e      	b.n	8027764 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8027ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8027aca:	434a      	muls	r2, r1
 8027acc:	427f      	negs	r7, r7
 8027ace:	9307      	str	r3, [sp, #28]
 8027ad0:	2300      	movs	r3, #0
 8027ad2:	e768      	b.n	80279a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8027ad4:	f104 0314 	add.w	r3, r4, #20
 8027ad8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027adc:	cb03      	ldmia	r3!, {r0, r1}
 8027ade:	f8c8 0000 	str.w	r0, [r8]
 8027ae2:	f8c8 1004 	str.w	r1, [r8, #4]
 8027ae6:	6923      	ldr	r3, [r4, #16]
 8027ae8:	3308      	adds	r3, #8
 8027aea:	6123      	str	r3, [r4, #16]
 8027aec:	68a3      	ldr	r3, [r4, #8]
 8027aee:	3301      	adds	r3, #1
 8027af0:	60a3      	str	r3, [r4, #8]
 8027af2:	e783      	b.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027af4:	f104 0814 	add.w	r8, r4, #20
 8027af8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027afc:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027b00:	f8c9 0000 	str.w	r0, [r9]
 8027b04:	f8c9 1004 	str.w	r1, [r9, #4]
 8027b08:	6921      	ldr	r1, [r4, #16]
 8027b0a:	3108      	adds	r1, #8
 8027b0c:	6121      	str	r1, [r4, #16]
 8027b0e:	68a1      	ldr	r1, [r4, #8]
 8027b10:	3101      	adds	r1, #1
 8027b12:	60a1      	str	r1, [r4, #8]
 8027b14:	e7c1      	b.n	8027a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027b16:	f104 0314 	add.w	r3, r4, #20
 8027b1a:	6925      	ldr	r5, [r4, #16]
 8027b1c:	cb03      	ldmia	r3!, {r0, r1}
 8027b1e:	6028      	str	r0, [r5, #0]
 8027b20:	6069      	str	r1, [r5, #4]
 8027b22:	6923      	ldr	r3, [r4, #16]
 8027b24:	3308      	adds	r3, #8
 8027b26:	6123      	str	r3, [r4, #16]
 8027b28:	68a3      	ldr	r3, [r4, #8]
 8027b2a:	3301      	adds	r3, #1
 8027b2c:	60a3      	str	r3, [r4, #8]
 8027b2e:	e66a      	b.n	8027806 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027b30:	f104 0314 	add.w	r3, r4, #20
 8027b34:	6925      	ldr	r5, [r4, #16]
 8027b36:	cb03      	ldmia	r3!, {r0, r1}
 8027b38:	6028      	str	r0, [r5, #0]
 8027b3a:	6069      	str	r1, [r5, #4]
 8027b3c:	6923      	ldr	r3, [r4, #16]
 8027b3e:	3308      	adds	r3, #8
 8027b40:	6123      	str	r3, [r4, #16]
 8027b42:	68a3      	ldr	r3, [r4, #8]
 8027b44:	3301      	adds	r3, #1
 8027b46:	60a3      	str	r3, [r4, #8]
 8027b48:	e6be      	b.n	80278c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027b4a:	f00b 031f 	and.w	r3, fp, #31
 8027b4e:	114f      	asrs	r7, r1, #5
 8027b50:	8b20      	ldrh	r0, [r4, #24]
 8027b52:	f001 011f 	and.w	r1, r1, #31
 8027b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8027b58:	9b04      	ldr	r3, [sp, #16]
 8027b5a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027b5e:	429f      	cmp	r7, r3
 8027b60:	d10a      	bne.n	8027b78 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8027b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b64:	4418      	add	r0, r3
 8027b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027b68:	4419      	add	r1, r3
 8027b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b6c:	8320      	strh	r0, [r4, #24]
 8027b6e:	fb03 9901 	mla	r9, r3, r1, r9
 8027b72:	f8a4 901a 	strh.w	r9, [r4, #26]
 8027b76:	e6af      	b.n	80278d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027b78:	2d00      	cmp	r5, #0
 8027b7a:	f2c0 809b 	blt.w	8027cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8027b7e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027b80:	f1c1 0320 	rsb	r3, r1, #32
 8027b84:	4373      	muls	r3, r6
 8027b86:	2601      	movs	r6, #1
 8027b88:	960e      	str	r6, [sp, #56]	; 0x38
 8027b8a:	2620      	movs	r6, #32
 8027b8c:	960d      	str	r6, [sp, #52]	; 0x34
 8027b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027b90:	fb93 f6f5 	sdiv	r6, r3, r5
 8027b94:	4411      	add	r1, r2
 8027b96:	fb05 3316 	mls	r3, r5, r6, r3
 8027b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027b9c:	2b00      	cmp	r3, #0
 8027b9e:	4417      	add	r7, r2
 8027ba0:	9a00      	ldr	r2, [sp, #0]
 8027ba2:	bfbc      	itt	lt
 8027ba4:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027ba8:	195b      	addlt	r3, r3, r5
 8027baa:	0412      	lsls	r2, r2, #16
 8027bac:	fb06 9101 	mla	r1, r6, r1, r9
 8027bb0:	4430      	add	r0, r6
 8027bb2:	eb07 0902 	add.w	r9, r7, r2
 8027bb6:	9210      	str	r2, [sp, #64]	; 0x40
 8027bb8:	b200      	sxth	r0, r0
 8027bba:	b209      	sxth	r1, r1
 8027bbc:	45c1      	cmp	r9, r8
 8027bbe:	8320      	strh	r0, [r4, #24]
 8027bc0:	8361      	strh	r1, [r4, #26]
 8027bc2:	d017      	beq.n	8027bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8027bc4:	ea50 0201 	orrs.w	r2, r0, r1
 8027bc8:	d00d      	beq.n	8027be6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027bca:	f1be 0f00 	cmp.w	lr, #0
 8027bce:	db0a      	blt.n	8027be6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027bd0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027bd2:	4571      	cmp	r1, lr
 8027bd4:	dd07      	ble.n	8027be6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027bd6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027bda:	4288      	cmp	r0, r1
 8027bdc:	d372      	bcc.n	8027cc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8027bde:	f04f 0201 	mov.w	r2, #1
 8027be2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027be6:	9a00      	ldr	r2, [sp, #0]
 8027be8:	82a7      	strh	r7, [r4, #20]
 8027bea:	82e2      	strh	r2, [r4, #22]
 8027bec:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027bf0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027bf6:	eb02 0e06 	add.w	lr, r2, r6
 8027bfa:	9a04      	ldr	r2, [sp, #16]
 8027bfc:	42ba      	cmp	r2, r7
 8027bfe:	d049      	beq.n	8027c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8027c00:	9a02      	ldr	r2, [sp, #8]
 8027c02:	1b5b      	subs	r3, r3, r5
 8027c04:	eba2 010e 	sub.w	r1, r2, lr
 8027c08:	440e      	add	r6, r1
 8027c0a:	0176      	lsls	r6, r6, #5
 8027c0c:	fb96 f8f5 	sdiv	r8, r6, r5
 8027c10:	fb05 6618 	mls	r6, r5, r8, r6
 8027c14:	2e00      	cmp	r6, #0
 8027c16:	bfbc      	itt	lt
 8027c18:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027c1c:	1976      	addlt	r6, r6, r5
 8027c1e:	f108 0201 	add.w	r2, r8, #1
 8027c22:	9211      	str	r2, [sp, #68]	; 0x44
 8027c24:	199b      	adds	r3, r3, r6
 8027c26:	8b20      	ldrh	r0, [r4, #24]
 8027c28:	8b61      	ldrh	r1, [r4, #26]
 8027c2a:	bf54      	ite	pl
 8027c2c:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8027c30:	46c1      	movmi	r9, r8
 8027c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027c34:	bf58      	it	pl
 8027c36:	1b5b      	subpl	r3, r3, r5
 8027c38:	4448      	add	r0, r9
 8027c3a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027c3e:	4417      	add	r7, r2
 8027c40:	44ce      	add	lr, r9
 8027c42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027c44:	b200      	sxth	r0, r0
 8027c46:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027c4a:	b209      	sxth	r1, r1
 8027c4c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027c50:	443a      	add	r2, r7
 8027c52:	8320      	strh	r0, [r4, #24]
 8027c54:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027c58:	8361      	strh	r1, [r4, #26]
 8027c5a:	4552      	cmp	r2, sl
 8027c5c:	d017      	beq.n	8027c8e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8027c5e:	ea50 0201 	orrs.w	r2, r0, r1
 8027c62:	d00d      	beq.n	8027c80 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027c64:	f1b9 0f00 	cmp.w	r9, #0
 8027c68:	db0a      	blt.n	8027c80 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027c6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027c6c:	4549      	cmp	r1, r9
 8027c6e:	dd07      	ble.n	8027c80 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027c70:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027c74:	4288      	cmp	r0, r1
 8027c76:	d336      	bcc.n	8027ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8027c78:	f04f 0201 	mov.w	r2, #1
 8027c7c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027c80:	9a00      	ldr	r2, [sp, #0]
 8027c82:	82a7      	strh	r7, [r4, #20]
 8027c84:	82e2      	strh	r2, [r4, #22]
 8027c86:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027c8a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027c8e:	9a04      	ldr	r2, [sp, #16]
 8027c90:	42ba      	cmp	r2, r7
 8027c92:	d1c7      	bne.n	8027c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8027c94:	9b02      	ldr	r3, [sp, #8]
 8027c96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027c98:	eba3 0e0e 	sub.w	lr, r3, lr
 8027c9c:	8b23      	ldrh	r3, [r4, #24]
 8027c9e:	3120      	adds	r1, #32
 8027ca0:	4473      	add	r3, lr
 8027ca2:	8323      	strh	r3, [r4, #24]
 8027ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027ca6:	1ac9      	subs	r1, r1, r3
 8027ca8:	8b63      	ldrh	r3, [r4, #26]
 8027caa:	fb0e 3e01 	mla	lr, lr, r1, r3
 8027cae:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8027cb2:	e611      	b.n	80278d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027cb4:	f04f 36ff 	mov.w	r6, #4294967295
 8027cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027cba:	426d      	negs	r5, r5
 8027cbc:	960e      	str	r6, [sp, #56]	; 0x38
 8027cbe:	2600      	movs	r6, #0
 8027cc0:	434b      	muls	r3, r1
 8027cc2:	e763      	b.n	8027b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8027cc4:	f104 0e14 	add.w	lr, r4, #20
 8027cc8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027ccc:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8027cd0:	f8c8 0000 	str.w	r0, [r8]
 8027cd4:	f8c8 1004 	str.w	r1, [r8, #4]
 8027cd8:	6921      	ldr	r1, [r4, #16]
 8027cda:	3108      	adds	r1, #8
 8027cdc:	6121      	str	r1, [r4, #16]
 8027cde:	68a1      	ldr	r1, [r4, #8]
 8027ce0:	3101      	adds	r1, #1
 8027ce2:	60a1      	str	r1, [r4, #8]
 8027ce4:	e77f      	b.n	8027be6 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027ce6:	f104 0914 	add.w	r9, r4, #20
 8027cea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027cee:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027cf2:	f8ca 0000 	str.w	r0, [sl]
 8027cf6:	f8ca 1004 	str.w	r1, [sl, #4]
 8027cfa:	6921      	ldr	r1, [r4, #16]
 8027cfc:	3108      	adds	r1, #8
 8027cfe:	6121      	str	r1, [r4, #16]
 8027d00:	68a1      	ldr	r1, [r4, #8]
 8027d02:	3101      	adds	r1, #1
 8027d04:	60a1      	str	r1, [r4, #8]
 8027d06:	e7bb      	b.n	8027c80 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027d08:	f104 0314 	add.w	r3, r4, #20
 8027d0c:	6925      	ldr	r5, [r4, #16]
 8027d0e:	cb03      	ldmia	r3!, {r0, r1}
 8027d10:	6028      	str	r0, [r5, #0]
 8027d12:	6069      	str	r1, [r5, #4]
 8027d14:	6923      	ldr	r3, [r4, #16]
 8027d16:	3308      	adds	r3, #8
 8027d18:	6123      	str	r3, [r4, #16]
 8027d1a:	68a3      	ldr	r3, [r4, #8]
 8027d1c:	3301      	adds	r3, #1
 8027d1e:	60a3      	str	r3, [r4, #8]
 8027d20:	e5fd      	b.n	802791e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027d22:	f104 0314 	add.w	r3, r4, #20
 8027d26:	6925      	ldr	r5, [r4, #16]
 8027d28:	cb03      	ldmia	r3!, {r0, r1}
 8027d2a:	6028      	str	r0, [r5, #0]
 8027d2c:	6069      	str	r1, [r5, #4]
 8027d2e:	6923      	ldr	r3, [r4, #16]
 8027d30:	3308      	adds	r3, #8
 8027d32:	6123      	str	r3, [r4, #16]
 8027d34:	68a3      	ldr	r3, [r4, #8]
 8027d36:	3301      	adds	r3, #1
 8027d38:	60a3      	str	r3, [r4, #8]
 8027d3a:	e625      	b.n	8027988 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027d3c:	9b05      	ldr	r3, [sp, #20]
 8027d3e:	ea4f 176b 	mov.w	r7, fp, asr #5
 8027d42:	f00b 081f 	and.w	r8, fp, #31
 8027d46:	8b20      	ldrh	r0, [r4, #24]
 8027d48:	f003 031f 	and.w	r3, r3, #31
 8027d4c:	4577      	cmp	r7, lr
 8027d4e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027d52:	9302      	str	r3, [sp, #8]
 8027d54:	9b03      	ldr	r3, [sp, #12]
 8027d56:	eba3 050c 	sub.w	r5, r3, ip
 8027d5a:	d108      	bne.n	8027d6e <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8027d5c:	9b02      	ldr	r3, [sp, #8]
 8027d5e:	4428      	add	r0, r5
 8027d60:	4498      	add	r8, r3
 8027d62:	8320      	strh	r0, [r4, #24]
 8027d64:	fb05 9508 	mla	r5, r5, r8, r9
 8027d68:	8365      	strh	r5, [r4, #26]
 8027d6a:	f7ff bb4f 	b.w	802740c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027d6e:	9b05      	ldr	r3, [sp, #20]
 8027d70:	ebb3 030b 	subs.w	r3, r3, fp
 8027d74:	f100 809c 	bmi.w	8027eb0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8027d78:	f1c8 0120 	rsb	r1, r8, #32
 8027d7c:	2201      	movs	r2, #1
 8027d7e:	f04f 0b20 	mov.w	fp, #32
 8027d82:	434d      	muls	r5, r1
 8027d84:	9201      	str	r2, [sp, #4]
 8027d86:	9a01      	ldr	r2, [sp, #4]
 8027d88:	44d8      	add	r8, fp
 8027d8a:	fb95 f6f3 	sdiv	r6, r5, r3
 8027d8e:	fb03 5516 	mls	r5, r3, r6, r5
 8027d92:	4417      	add	r7, r2
 8027d94:	9a00      	ldr	r2, [sp, #0]
 8027d96:	2d00      	cmp	r5, #0
 8027d98:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8027d9c:	bfbc      	itt	lt
 8027d9e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027da2:	18ed      	addlt	r5, r5, r3
 8027da4:	eb07 0a02 	add.w	sl, r7, r2
 8027da8:	9204      	str	r2, [sp, #16]
 8027daa:	fb06 9808 	mla	r8, r6, r8, r9
 8027dae:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027db2:	4430      	add	r0, r6
 8027db4:	fa0f f188 	sxth.w	r1, r8
 8027db8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027dbc:	b200      	sxth	r0, r0
 8027dbe:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027dc2:	8361      	strh	r1, [r4, #26]
 8027dc4:	8320      	strh	r0, [r4, #24]
 8027dc6:	45ca      	cmp	sl, r9
 8027dc8:	d015      	beq.n	8027df6 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8027dca:	ea50 0201 	orrs.w	r2, r0, r1
 8027dce:	d00c      	beq.n	8027dea <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027dd0:	f1b8 0f00 	cmp.w	r8, #0
 8027dd4:	db09      	blt.n	8027dea <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027dd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027dd8:	4541      	cmp	r1, r8
 8027dda:	dd06      	ble.n	8027dea <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027ddc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027de0:	4288      	cmp	r0, r1
 8027de2:	d36e      	bcc.n	8027ec2 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8027de4:	2101      	movs	r1, #1
 8027de6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8027dea:	2100      	movs	r1, #0
 8027dec:	9a00      	ldr	r2, [sp, #0]
 8027dee:	82a7      	strh	r7, [r4, #20]
 8027df0:	82e2      	strh	r2, [r4, #22]
 8027df2:	8321      	strh	r1, [r4, #24]
 8027df4:	8361      	strh	r1, [r4, #26]
 8027df6:	45be      	cmp	lr, r7
 8027df8:	44b4      	add	ip, r6
 8027dfa:	d048      	beq.n	8027e8e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8027dfc:	9a03      	ldr	r2, [sp, #12]
 8027dfe:	1aed      	subs	r5, r5, r3
 8027e00:	eba2 010c 	sub.w	r1, r2, ip
 8027e04:	440e      	add	r6, r1
 8027e06:	0176      	lsls	r6, r6, #5
 8027e08:	fb96 f8f3 	sdiv	r8, r6, r3
 8027e0c:	fb03 6618 	mls	r6, r3, r8, r6
 8027e10:	2e00      	cmp	r6, #0
 8027e12:	bfbc      	itt	lt
 8027e14:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027e18:	18f6      	addlt	r6, r6, r3
 8027e1a:	f108 0201 	add.w	r2, r8, #1
 8027e1e:	9205      	str	r2, [sp, #20]
 8027e20:	19ad      	adds	r5, r5, r6
 8027e22:	8b20      	ldrh	r0, [r4, #24]
 8027e24:	8b61      	ldrh	r1, [r4, #26]
 8027e26:	bf54      	ite	pl
 8027e28:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8027e2c:	46c1      	movmi	r9, r8
 8027e2e:	9a01      	ldr	r2, [sp, #4]
 8027e30:	bf58      	it	pl
 8027e32:	1aed      	subpl	r5, r5, r3
 8027e34:	4448      	add	r0, r9
 8027e36:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027e3a:	4417      	add	r7, r2
 8027e3c:	44cc      	add	ip, r9
 8027e3e:	9a04      	ldr	r2, [sp, #16]
 8027e40:	b200      	sxth	r0, r0
 8027e42:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027e46:	b209      	sxth	r1, r1
 8027e48:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027e4c:	443a      	add	r2, r7
 8027e4e:	8320      	strh	r0, [r4, #24]
 8027e50:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027e54:	8361      	strh	r1, [r4, #26]
 8027e56:	4552      	cmp	r2, sl
 8027e58:	d017      	beq.n	8027e8a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8027e5a:	ea50 0201 	orrs.w	r2, r0, r1
 8027e5e:	d00d      	beq.n	8027e7c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027e60:	f1b9 0f00 	cmp.w	r9, #0
 8027e64:	db0a      	blt.n	8027e7c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027e66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027e68:	4549      	cmp	r1, r9
 8027e6a:	dd07      	ble.n	8027e7c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027e6c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027e70:	4288      	cmp	r0, r1
 8027e72:	d337      	bcc.n	8027ee4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8027e74:	f04f 0201 	mov.w	r2, #1
 8027e78:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027e7c:	9a00      	ldr	r2, [sp, #0]
 8027e7e:	82a7      	strh	r7, [r4, #20]
 8027e80:	82e2      	strh	r2, [r4, #22]
 8027e82:	f04f 0200 	mov.w	r2, #0
 8027e86:	8322      	strh	r2, [r4, #24]
 8027e88:	8362      	strh	r2, [r4, #26]
 8027e8a:	45be      	cmp	lr, r7
 8027e8c:	d1c8      	bne.n	8027e20 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8027e8e:	9b03      	ldr	r3, [sp, #12]
 8027e90:	8b62      	ldrh	r2, [r4, #26]
 8027e92:	eba3 0c0c 	sub.w	ip, r3, ip
 8027e96:	8b23      	ldrh	r3, [r4, #24]
 8027e98:	4463      	add	r3, ip
 8027e9a:	8323      	strh	r3, [r4, #24]
 8027e9c:	9b02      	ldr	r3, [sp, #8]
 8027e9e:	3320      	adds	r3, #32
 8027ea0:	eba3 030b 	sub.w	r3, r3, fp
 8027ea4:	fb0c 2c03 	mla	ip, ip, r3, r2
 8027ea8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027eac:	f7ff baae 	b.w	802740c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8027eb4:	fb05 f508 	mul.w	r5, r5, r8
 8027eb8:	425b      	negs	r3, r3
 8027eba:	f04f 0b00 	mov.w	fp, #0
 8027ebe:	9201      	str	r2, [sp, #4]
 8027ec0:	e761      	b.n	8027d86 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8027ec2:	f104 0814 	add.w	r8, r4, #20
 8027ec6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027eca:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027ece:	f8c9 0000 	str.w	r0, [r9]
 8027ed2:	f8c9 1004 	str.w	r1, [r9, #4]
 8027ed6:	6921      	ldr	r1, [r4, #16]
 8027ed8:	3108      	adds	r1, #8
 8027eda:	6121      	str	r1, [r4, #16]
 8027edc:	68a1      	ldr	r1, [r4, #8]
 8027ede:	3101      	adds	r1, #1
 8027ee0:	60a1      	str	r1, [r4, #8]
 8027ee2:	e782      	b.n	8027dea <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027ee4:	f104 0914 	add.w	r9, r4, #20
 8027ee8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027eec:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027ef0:	f8ca 0000 	str.w	r0, [sl]
 8027ef4:	f8ca 1004 	str.w	r1, [sl, #4]
 8027ef8:	6921      	ldr	r1, [r4, #16]
 8027efa:	3108      	adds	r1, #8
 8027efc:	6121      	str	r1, [r4, #16]
 8027efe:	68a1      	ldr	r1, [r4, #8]
 8027f00:	3101      	adds	r1, #1
 8027f02:	60a1      	str	r1, [r4, #8]
 8027f04:	e7ba      	b.n	8027e7c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08027f06 <_ZN8touchgfx7Outline6lineToEii>:
 8027f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027f08:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027f0a:	4604      	mov	r4, r0
 8027f0c:	460d      	mov	r5, r1
 8027f0e:	4616      	mov	r6, r2
 8027f10:	079b      	lsls	r3, r3, #30
 8027f12:	d526      	bpl.n	8027f62 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027f14:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8027f18:	ea85 0001 	eor.w	r0, r5, r1
 8027f1c:	ea86 0302 	eor.w	r3, r6, r2
 8027f20:	4303      	orrs	r3, r0
 8027f22:	d01e      	beq.n	8027f62 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027f24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027f26:	114b      	asrs	r3, r1, #5
 8027f28:	9600      	str	r6, [sp, #0]
 8027f2a:	4283      	cmp	r3, r0
 8027f2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027f2e:	bfb8      	it	lt
 8027f30:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027f32:	3301      	adds	r3, #1
 8027f34:	4283      	cmp	r3, r0
 8027f36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027f38:	bfc8      	it	gt
 8027f3a:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027f3c:	116b      	asrs	r3, r5, #5
 8027f3e:	4283      	cmp	r3, r0
 8027f40:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027f42:	bfb8      	it	lt
 8027f44:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027f46:	3301      	adds	r3, #1
 8027f48:	4283      	cmp	r3, r0
 8027f4a:	4620      	mov	r0, r4
 8027f4c:	bfc8      	it	gt
 8027f4e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027f50:	462b      	mov	r3, r5
 8027f52:	f7ff f9e3 	bl	802731c <_ZN8touchgfx7Outline10renderLineEiiii>
 8027f56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027f58:	f043 0301 	orr.w	r3, r3, #1
 8027f5c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8027f60:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027f62:	b002      	add	sp, #8
 8027f64:	bd70      	pop	{r4, r5, r6, pc}

08027f66 <_ZN8touchgfx7Outline6moveToEii>:
 8027f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f68:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027f6a:	4615      	mov	r5, r2
 8027f6c:	4604      	mov	r4, r0
 8027f6e:	460e      	mov	r6, r1
 8027f70:	079a      	lsls	r2, r3, #30
 8027f72:	d401      	bmi.n	8027f78 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8027f74:	f7ff f98c 	bl	8027290 <_ZN8touchgfx7Outline5resetEv>
 8027f78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027f7a:	07db      	lsls	r3, r3, #31
 8027f7c:	d504      	bpl.n	8027f88 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8027f7e:	4620      	mov	r0, r4
 8027f80:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8027f84:	f7ff ffbf 	bl	8027f06 <_ZN8touchgfx7Outline6lineToEii>
 8027f88:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8027f8c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027f90:	116f      	asrs	r7, r5, #5
 8027f92:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8027f96:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8027f9a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8027f9e:	4291      	cmp	r1, r2
 8027fa0:	d015      	beq.n	8027fce <_ZN8touchgfx7Outline6moveToEii+0x68>
 8027fa2:	8b61      	ldrh	r1, [r4, #26]
 8027fa4:	8b22      	ldrh	r2, [r4, #24]
 8027fa6:	430a      	orrs	r2, r1
 8027fa8:	d00b      	beq.n	8027fc2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027faa:	2b00      	cmp	r3, #0
 8027fac:	db09      	blt.n	8027fc2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027fae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8027fb0:	429a      	cmp	r2, r3
 8027fb2:	dd06      	ble.n	8027fc2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027fb4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8027fb8:	429a      	cmp	r2, r3
 8027fba:	d30d      	bcc.n	8027fd8 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8027fbc:	2301      	movs	r3, #1
 8027fbe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027fc2:	2300      	movs	r3, #0
 8027fc4:	f8a4 c014 	strh.w	ip, [r4, #20]
 8027fc8:	82e7      	strh	r7, [r4, #22]
 8027fca:	8323      	strh	r3, [r4, #24]
 8027fcc:	8363      	strh	r3, [r4, #26]
 8027fce:	61e6      	str	r6, [r4, #28]
 8027fd0:	62a5      	str	r5, [r4, #40]	; 0x28
 8027fd2:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8027fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027fd8:	f104 0314 	add.w	r3, r4, #20
 8027fdc:	6922      	ldr	r2, [r4, #16]
 8027fde:	cb03      	ldmia	r3!, {r0, r1}
 8027fe0:	6010      	str	r0, [r2, #0]
 8027fe2:	6051      	str	r1, [r2, #4]
 8027fe4:	6923      	ldr	r3, [r4, #16]
 8027fe6:	3308      	adds	r3, #8
 8027fe8:	6123      	str	r3, [r4, #16]
 8027fea:	68a3      	ldr	r3, [r4, #8]
 8027fec:	3301      	adds	r3, #1
 8027fee:	60a3      	str	r3, [r4, #8]
 8027ff0:	e7e7      	b.n	8027fc2 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08027ff2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8027ff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ff6:	b0d1      	sub	sp, #324	; 0x144
 8027ff8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8027ffc:	466c      	mov	r4, sp
 8027ffe:	1a0d      	subs	r5, r1, r0
 8028000:	f100 0208 	add.w	r2, r0, #8
 8028004:	2d48      	cmp	r5, #72	; 0x48
 8028006:	f340 80ba 	ble.w	802817e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802800a:	112d      	asrs	r5, r5, #4
 802800c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8028010:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8028014:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8028018:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802801c:	f9b0 8000 	ldrsh.w	r8, [r0]
 8028020:	681e      	ldr	r6, [r3, #0]
 8028022:	6006      	str	r6, [r0, #0]
 8028024:	685e      	ldr	r6, [r3, #4]
 8028026:	6046      	str	r6, [r0, #4]
 8028028:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802802c:	f8a3 c004 	strh.w	ip, [r3, #4]
 8028030:	f8a3 e002 	strh.w	lr, [r3, #2]
 8028034:	80df      	strh	r7, [r3, #6]
 8028036:	f1a1 0308 	sub.w	r3, r1, #8
 802803a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802803e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8028042:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8028046:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802804a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802804e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8028052:	45ac      	cmp	ip, r5
 8028054:	dd0f      	ble.n	8028076 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8028056:	681d      	ldr	r5, [r3, #0]
 8028058:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802805c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8028060:	6015      	str	r5, [r2, #0]
 8028062:	685d      	ldr	r5, [r3, #4]
 8028064:	6055      	str	r5, [r2, #4]
 8028066:	f821 7c08 	strh.w	r7, [r1, #-8]
 802806a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802806e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8028072:	f821 cc02 	strh.w	ip, [r1, #-2]
 8028076:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802807a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802807e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8028082:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8028086:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802808a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802808e:	4565      	cmp	r5, ip
 8028090:	dd0d      	ble.n	80280ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8028092:	6815      	ldr	r5, [r2, #0]
 8028094:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8028098:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802809c:	6005      	str	r5, [r0, #0]
 802809e:	6855      	ldr	r5, [r2, #4]
 80280a0:	8107      	strh	r7, [r0, #8]
 80280a2:	6045      	str	r5, [r0, #4]
 80280a4:	8146      	strh	r6, [r0, #10]
 80280a6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80280aa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80280ae:	f9b0 7000 	ldrsh.w	r7, [r0]
 80280b2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80280b6:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80280ba:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80280be:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80280c2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80280c6:	45ac      	cmp	ip, r5
 80280c8:	dd0f      	ble.n	80280ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80280ca:	681d      	ldr	r5, [r3, #0]
 80280cc:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80280d0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80280d4:	6005      	str	r5, [r0, #0]
 80280d6:	685d      	ldr	r5, [r3, #4]
 80280d8:	6045      	str	r5, [r0, #4]
 80280da:	f821 7c08 	strh.w	r7, [r1, #-8]
 80280de:	f821 6c06 	strh.w	r6, [r1, #-6]
 80280e2:	f821 ec04 	strh.w	lr, [r1, #-4]
 80280e6:	f821 cc02 	strh.w	ip, [r1, #-2]
 80280ea:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80280ee:	f102 0508 	add.w	r5, r2, #8
 80280f2:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80280f6:	f9b0 e000 	ldrsh.w	lr, [r0]
 80280fa:	462f      	mov	r7, r5
 80280fc:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8028100:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8028104:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8028108:	45b2      	cmp	sl, r6
 802810a:	dc18      	bgt.n	802813e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802810c:	3b08      	subs	r3, #8
 802810e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8028112:	f9b3 6000 	ldrsh.w	r6, [r3]
 8028116:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802811a:	45b2      	cmp	sl, r6
 802811c:	dbf6      	blt.n	802810c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802811e:	42ab      	cmp	r3, r5
 8028120:	681e      	ldr	r6, [r3, #0]
 8028122:	d30e      	bcc.n	8028142 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8028124:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8028128:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802812c:	602e      	str	r6, [r5, #0]
 802812e:	685e      	ldr	r6, [r3, #4]
 8028130:	606e      	str	r6, [r5, #4]
 8028132:	f8a3 9000 	strh.w	r9, [r3]
 8028136:	f8a3 8002 	strh.w	r8, [r3, #2]
 802813a:	809f      	strh	r7, [r3, #4]
 802813c:	80da      	strh	r2, [r3, #6]
 802813e:	462a      	mov	r2, r5
 8028140:	e7d3      	b.n	80280ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8028142:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8028146:	6006      	str	r6, [r0, #0]
 8028148:	685e      	ldr	r6, [r3, #4]
 802814a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802814e:	6046      	str	r6, [r0, #4]
 8028150:	1a1e      	subs	r6, r3, r0
 8028152:	80da      	strh	r2, [r3, #6]
 8028154:	1b4a      	subs	r2, r1, r5
 8028156:	f8a3 e000 	strh.w	lr, [r3]
 802815a:	10d2      	asrs	r2, r2, #3
 802815c:	f8a3 c002 	strh.w	ip, [r3, #2]
 8028160:	f8a3 8004 	strh.w	r8, [r3, #4]
 8028164:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8028168:	bfb5      	itete	lt
 802816a:	e9c4 0300 	strdlt	r0, r3, [r4]
 802816e:	4607      	movge	r7, r0
 8028170:	460b      	movlt	r3, r1
 8028172:	e9c4 5100 	strdge	r5, r1, [r4]
 8028176:	4638      	mov	r0, r7
 8028178:	3408      	adds	r4, #8
 802817a:	4619      	mov	r1, r3
 802817c:	e73f      	b.n	8027ffe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802817e:	4291      	cmp	r1, r2
 8028180:	d925      	bls.n	80281ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8028182:	f1a2 0310 	sub.w	r3, r2, #16
 8028186:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802818a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802818e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8028192:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8028196:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802819a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802819e:	42b5      	cmp	r5, r6
 80281a0:	dd13      	ble.n	80281ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80281a2:	461d      	mov	r5, r3
 80281a4:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80281a8:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80281ac:	3b08      	subs	r3, #8
 80281ae:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80281b2:	619e      	str	r6, [r3, #24]
 80281b4:	42a8      	cmp	r0, r5
 80281b6:	686e      	ldr	r6, [r5, #4]
 80281b8:	f8a3 c010 	strh.w	ip, [r3, #16]
 80281bc:	61de      	str	r6, [r3, #28]
 80281be:	825f      	strh	r7, [r3, #18]
 80281c0:	f8a3 8014 	strh.w	r8, [r3, #20]
 80281c4:	f8a3 e016 	strh.w	lr, [r3, #22]
 80281c8:	d1dd      	bne.n	8028186 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80281ca:	3208      	adds	r2, #8
 80281cc:	e7d7      	b.n	802817e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80281ce:	466b      	mov	r3, sp
 80281d0:	429c      	cmp	r4, r3
 80281d2:	d903      	bls.n	80281dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80281d4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80281d8:	3c08      	subs	r4, #8
 80281da:	e710      	b.n	8027ffe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80281dc:	b051      	add	sp, #324	; 0x144
 80281de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080281e2 <_ZN8touchgfx7Outline9sortCellsEv>:
 80281e2:	6881      	ldr	r1, [r0, #8]
 80281e4:	b111      	cbz	r1, 80281ec <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80281e6:	68c0      	ldr	r0, [r0, #12]
 80281e8:	f7ff bf03 	b.w	8027ff2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80281ec:	4770      	bx	lr

080281ee <_ZN8touchgfx7Outline8getCellsEv>:
 80281ee:	b510      	push	{r4, lr}
 80281f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80281f2:	4604      	mov	r4, r0
 80281f4:	07da      	lsls	r2, r3, #31
 80281f6:	d507      	bpl.n	8028208 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80281f8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80281fc:	f7ff fe83 	bl	8027f06 <_ZN8touchgfx7Outline6lineToEii>
 8028200:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028202:	f023 0301 	bic.w	r3, r3, #1
 8028206:	63e3      	str	r3, [r4, #60]	; 0x3c
 8028208:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802820a:	079b      	lsls	r3, r3, #30
 802820c:	d51a      	bpl.n	8028244 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802820e:	8b62      	ldrh	r2, [r4, #26]
 8028210:	8b23      	ldrh	r3, [r4, #24]
 8028212:	4313      	orrs	r3, r2
 8028214:	d00d      	beq.n	8028232 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8028216:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802821a:	2b00      	cmp	r3, #0
 802821c:	db09      	blt.n	8028232 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802821e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8028220:	4293      	cmp	r3, r2
 8028222:	da06      	bge.n	8028232 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8028224:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8028228:	429a      	cmp	r2, r3
 802822a:	d80d      	bhi.n	8028248 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802822c:	2301      	movs	r3, #1
 802822e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028232:	68a0      	ldr	r0, [r4, #8]
 8028234:	b138      	cbz	r0, 8028246 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8028236:	4620      	mov	r0, r4
 8028238:	f7ff ffd3 	bl	80281e2 <_ZN8touchgfx7Outline9sortCellsEv>
 802823c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802823e:	f023 0302 	bic.w	r3, r3, #2
 8028242:	63e3      	str	r3, [r4, #60]	; 0x3c
 8028244:	68e0      	ldr	r0, [r4, #12]
 8028246:	bd10      	pop	{r4, pc}
 8028248:	f104 0314 	add.w	r3, r4, #20
 802824c:	6922      	ldr	r2, [r4, #16]
 802824e:	cb03      	ldmia	r3!, {r0, r1}
 8028250:	6010      	str	r0, [r2, #0]
 8028252:	6051      	str	r1, [r2, #4]
 8028254:	6923      	ldr	r3, [r4, #16]
 8028256:	3308      	adds	r3, #8
 8028258:	6123      	str	r3, [r4, #16]
 802825a:	68a3      	ldr	r3, [r4, #8]
 802825c:	3301      	adds	r3, #1
 802825e:	60a3      	str	r3, [r4, #8]
 8028260:	e7e7      	b.n	8028232 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08028262 <_ZN8touchgfx8ScanlineD1Ev>:
 8028262:	4770      	bx	lr

08028264 <_ZN8touchgfx8ScanlineD0Ev>:
 8028264:	b510      	push	{r4, lr}
 8028266:	4604      	mov	r4, r0
 8028268:	2124      	movs	r1, #36	; 0x24
 802826a:	f000 f87a 	bl	8028362 <_ZdlPvj>
 802826e:	4620      	mov	r0, r4
 8028270:	bd10      	pop	{r4, pc}

08028272 <_ZN8touchgfx8Scanline5resetEv>:
 8028272:	b510      	push	{r4, lr}
 8028274:	4604      	mov	r4, r0
 8028276:	f7f3 f8bf 	bl	801b3f8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802827a:	61a0      	str	r0, [r4, #24]
 802827c:	f7f3 f8c2 	bl	801b404 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8028280:	61e0      	str	r0, [r4, #28]
 8028282:	f7f3 f8c5 	bl	801b410 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8028286:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802828a:	6220      	str	r0, [r4, #32]
 802828c:	6160      	str	r0, [r4, #20]
 802828e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8028292:	69e3      	ldr	r3, [r4, #28]
 8028294:	6123      	str	r3, [r4, #16]
 8028296:	2300      	movs	r3, #0
 8028298:	60e3      	str	r3, [r4, #12]
 802829a:	bd10      	pop	{r4, pc}

0802829c <_ZN8touchgfx8ScanlineC1Ev>:
 802829c:	4b07      	ldr	r3, [pc, #28]	; (80282bc <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802829e:	b510      	push	{r4, lr}
 80282a0:	6003      	str	r3, [r0, #0]
 80282a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80282a6:	4604      	mov	r4, r0
 80282a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80282ac:	2300      	movs	r3, #0
 80282ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80282b2:	6143      	str	r3, [r0, #20]
 80282b4:	f7ff ffdd 	bl	8028272 <_ZN8touchgfx8Scanline5resetEv>
 80282b8:	4620      	mov	r0, r4
 80282ba:	bd10      	pop	{r4, pc}
 80282bc:	0802ddb4 	.word	0x0802ddb4

080282c0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80282c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80282c4:	1e0c      	subs	r4, r1, #0
 80282c6:	4605      	mov	r5, r0
 80282c8:	4617      	mov	r7, r2
 80282ca:	461e      	mov	r6, r3
 80282cc:	da03      	bge.n	80282d6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80282ce:	4426      	add	r6, r4
 80282d0:	2e01      	cmp	r6, #1
 80282d2:	d421      	bmi.n	8028318 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80282d4:	2400      	movs	r4, #0
 80282d6:	f7f3 f889 	bl	801b3ec <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80282da:	42a0      	cmp	r0, r4
 80282dc:	d91c      	bls.n	8028318 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80282de:	eb04 0806 	add.w	r8, r4, r6
 80282e2:	f7f3 f883 	bl	801b3ec <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80282e6:	4580      	cmp	r8, r0
 80282e8:	d902      	bls.n	80282f0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80282ea:	f7f3 f87f 	bl	801b3ec <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80282ee:	1b06      	subs	r6, r0, r4
 80282f0:	69a8      	ldr	r0, [r5, #24]
 80282f2:	4632      	mov	r2, r6
 80282f4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80282f8:	4420      	add	r0, r4
 80282fa:	f7f4 fd76 	bl	801cdea <_ZN8touchgfx6memsetEPvhm>
 80282fe:	686b      	ldr	r3, [r5, #4]
 8028300:	b2b2      	uxth	r2, r6
 8028302:	3301      	adds	r3, #1
 8028304:	42a3      	cmp	r3, r4
 8028306:	696b      	ldr	r3, [r5, #20]
 8028308:	d108      	bne.n	802831c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802830a:	8819      	ldrh	r1, [r3, #0]
 802830c:	440a      	add	r2, r1
 802830e:	801a      	strh	r2, [r3, #0]
 8028310:	3c01      	subs	r4, #1
 8028312:	4434      	add	r4, r6
 8028314:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8028318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802831c:	1c99      	adds	r1, r3, #2
 802831e:	6169      	str	r1, [r5, #20]
 8028320:	805a      	strh	r2, [r3, #2]
 8028322:	692b      	ldr	r3, [r5, #16]
 8028324:	1c9a      	adds	r2, r3, #2
 8028326:	612a      	str	r2, [r5, #16]
 8028328:	805c      	strh	r4, [r3, #2]
 802832a:	68eb      	ldr	r3, [r5, #12]
 802832c:	3301      	adds	r3, #1
 802832e:	60eb      	str	r3, [r5, #12]
 8028330:	e7ee      	b.n	8028310 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08028332 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8028332:	2200      	movs	r2, #0
 8028334:	6002      	str	r2, [r0, #0]
 8028336:	7102      	strb	r2, [r0, #4]
 8028338:	6102      	str	r2, [r0, #16]
 802833a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802833e:	4770      	bx	lr

08028340 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8028340:	4770      	bx	lr

08028342 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8028342:	6083      	str	r3, [r0, #8]
 8028344:	9b00      	ldr	r3, [sp, #0]
 8028346:	6001      	str	r1, [r0, #0]
 8028348:	60c3      	str	r3, [r0, #12]
 802834a:	9b01      	ldr	r3, [sp, #4]
 802834c:	7102      	strb	r2, [r0, #4]
 802834e:	6103      	str	r3, [r0, #16]
 8028350:	4770      	bx	lr

08028352 <__aeabi_atexit>:
 8028352:	460b      	mov	r3, r1
 8028354:	4601      	mov	r1, r0
 8028356:	4618      	mov	r0, r3
 8028358:	f000 b852 	b.w	8028400 <__cxa_atexit>

0802835c <__cxa_pure_virtual>:
 802835c:	b508      	push	{r3, lr}
 802835e:	f000 f81f 	bl	80283a0 <_ZSt9terminatev>

08028362 <_ZdlPvj>:
 8028362:	f000 b80f 	b.w	8028384 <_ZdlPv>

08028366 <__cxa_guard_acquire>:
 8028366:	6803      	ldr	r3, [r0, #0]
 8028368:	07db      	lsls	r3, r3, #31
 802836a:	d406      	bmi.n	802837a <__cxa_guard_acquire+0x14>
 802836c:	7843      	ldrb	r3, [r0, #1]
 802836e:	b103      	cbz	r3, 8028372 <__cxa_guard_acquire+0xc>
 8028370:	deff      	udf	#255	; 0xff
 8028372:	2301      	movs	r3, #1
 8028374:	7043      	strb	r3, [r0, #1]
 8028376:	4618      	mov	r0, r3
 8028378:	4770      	bx	lr
 802837a:	2000      	movs	r0, #0
 802837c:	4770      	bx	lr

0802837e <__cxa_guard_release>:
 802837e:	2301      	movs	r3, #1
 8028380:	6003      	str	r3, [r0, #0]
 8028382:	4770      	bx	lr

08028384 <_ZdlPv>:
 8028384:	f000 b88e 	b.w	80284a4 <free>

08028388 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028388:	b508      	push	{r3, lr}
 802838a:	4780      	blx	r0
 802838c:	f000 f80d 	bl	80283aa <abort>

08028390 <_ZSt13get_terminatev>:
 8028390:	4b02      	ldr	r3, [pc, #8]	; (802839c <_ZSt13get_terminatev+0xc>)
 8028392:	6818      	ldr	r0, [r3, #0]
 8028394:	f3bf 8f5b 	dmb	ish
 8028398:	4770      	bx	lr
 802839a:	bf00      	nop
 802839c:	200000d4 	.word	0x200000d4

080283a0 <_ZSt9terminatev>:
 80283a0:	b508      	push	{r3, lr}
 80283a2:	f7ff fff5 	bl	8028390 <_ZSt13get_terminatev>
 80283a6:	f7ff ffef 	bl	8028388 <_ZN10__cxxabiv111__terminateEPFvvE>

080283aa <abort>:
 80283aa:	b508      	push	{r3, lr}
 80283ac:	2006      	movs	r0, #6
 80283ae:	f000 fc3d 	bl	8028c2c <raise>
 80283b2:	2001      	movs	r0, #1
 80283b4:	f7db f984 	bl	80036c0 <_exit>

080283b8 <__assert_func>:
 80283b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80283ba:	461c      	mov	r4, r3
 80283bc:	4b09      	ldr	r3, [pc, #36]	; (80283e4 <__assert_func+0x2c>)
 80283be:	681b      	ldr	r3, [r3, #0]
 80283c0:	4605      	mov	r5, r0
 80283c2:	68d8      	ldr	r0, [r3, #12]
 80283c4:	b152      	cbz	r2, 80283dc <__assert_func+0x24>
 80283c6:	4b08      	ldr	r3, [pc, #32]	; (80283e8 <__assert_func+0x30>)
 80283c8:	9100      	str	r1, [sp, #0]
 80283ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80283ce:	4907      	ldr	r1, [pc, #28]	; (80283ec <__assert_func+0x34>)
 80283d0:	462b      	mov	r3, r5
 80283d2:	4622      	mov	r2, r4
 80283d4:	f000 f828 	bl	8028428 <fiprintf>
 80283d8:	f7ff ffe7 	bl	80283aa <abort>
 80283dc:	4b04      	ldr	r3, [pc, #16]	; (80283f0 <__assert_func+0x38>)
 80283de:	461a      	mov	r2, r3
 80283e0:	e7f2      	b.n	80283c8 <__assert_func+0x10>
 80283e2:	bf00      	nop
 80283e4:	200000d8 	.word	0x200000d8
 80283e8:	0802ddbc 	.word	0x0802ddbc
 80283ec:	0802ddc9 	.word	0x0802ddc9
 80283f0:	0802ddf7 	.word	0x0802ddf7

080283f4 <atexit>:
 80283f4:	2300      	movs	r3, #0
 80283f6:	4601      	mov	r1, r0
 80283f8:	461a      	mov	r2, r3
 80283fa:	4618      	mov	r0, r3
 80283fc:	f000 bcf2 	b.w	8028de4 <__register_exitproc>

08028400 <__cxa_atexit>:
 8028400:	b510      	push	{r4, lr}
 8028402:	4c05      	ldr	r4, [pc, #20]	; (8028418 <__cxa_atexit+0x18>)
 8028404:	4613      	mov	r3, r2
 8028406:	b12c      	cbz	r4, 8028414 <__cxa_atexit+0x14>
 8028408:	460a      	mov	r2, r1
 802840a:	4601      	mov	r1, r0
 802840c:	2002      	movs	r0, #2
 802840e:	f000 fce9 	bl	8028de4 <__register_exitproc>
 8028412:	bd10      	pop	{r4, pc}
 8028414:	4620      	mov	r0, r4
 8028416:	e7fc      	b.n	8028412 <__cxa_atexit+0x12>
 8028418:	08028de5 	.word	0x08028de5

0802841c <__errno>:
 802841c:	4b01      	ldr	r3, [pc, #4]	; (8028424 <__errno+0x8>)
 802841e:	6818      	ldr	r0, [r3, #0]
 8028420:	4770      	bx	lr
 8028422:	bf00      	nop
 8028424:	200000d8 	.word	0x200000d8

08028428 <fiprintf>:
 8028428:	b40e      	push	{r1, r2, r3}
 802842a:	b503      	push	{r0, r1, lr}
 802842c:	4601      	mov	r1, r0
 802842e:	ab03      	add	r3, sp, #12
 8028430:	4805      	ldr	r0, [pc, #20]	; (8028448 <fiprintf+0x20>)
 8028432:	f853 2b04 	ldr.w	r2, [r3], #4
 8028436:	6800      	ldr	r0, [r0, #0]
 8028438:	9301      	str	r3, [sp, #4]
 802843a:	f000 f921 	bl	8028680 <_vfiprintf_r>
 802843e:	b002      	add	sp, #8
 8028440:	f85d eb04 	ldr.w	lr, [sp], #4
 8028444:	b003      	add	sp, #12
 8028446:	4770      	bx	lr
 8028448:	200000d8 	.word	0x200000d8

0802844c <__libc_init_array>:
 802844c:	b570      	push	{r4, r5, r6, lr}
 802844e:	4e0d      	ldr	r6, [pc, #52]	; (8028484 <__libc_init_array+0x38>)
 8028450:	4c0d      	ldr	r4, [pc, #52]	; (8028488 <__libc_init_array+0x3c>)
 8028452:	1ba4      	subs	r4, r4, r6
 8028454:	10a4      	asrs	r4, r4, #2
 8028456:	2500      	movs	r5, #0
 8028458:	42a5      	cmp	r5, r4
 802845a:	d109      	bne.n	8028470 <__libc_init_array+0x24>
 802845c:	4e0b      	ldr	r6, [pc, #44]	; (802848c <__libc_init_array+0x40>)
 802845e:	4c0c      	ldr	r4, [pc, #48]	; (8028490 <__libc_init_array+0x44>)
 8028460:	f000 ffb0 	bl	80293c4 <_init>
 8028464:	1ba4      	subs	r4, r4, r6
 8028466:	10a4      	asrs	r4, r4, #2
 8028468:	2500      	movs	r5, #0
 802846a:	42a5      	cmp	r5, r4
 802846c:	d105      	bne.n	802847a <__libc_init_array+0x2e>
 802846e:	bd70      	pop	{r4, r5, r6, pc}
 8028470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028474:	4798      	blx	r3
 8028476:	3501      	adds	r5, #1
 8028478:	e7ee      	b.n	8028458 <__libc_init_array+0xc>
 802847a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802847e:	4798      	blx	r3
 8028480:	3501      	adds	r5, #1
 8028482:	e7f2      	b.n	802846a <__libc_init_array+0x1e>
 8028484:	080654f0 	.word	0x080654f0
 8028488:	080654f0 	.word	0x080654f0
 802848c:	080654f0 	.word	0x080654f0
 8028490:	08065504 	.word	0x08065504

08028494 <malloc>:
 8028494:	4b02      	ldr	r3, [pc, #8]	; (80284a0 <malloc+0xc>)
 8028496:	4601      	mov	r1, r0
 8028498:	6818      	ldr	r0, [r3, #0]
 802849a:	f000 b86d 	b.w	8028578 <_malloc_r>
 802849e:	bf00      	nop
 80284a0:	200000d8 	.word	0x200000d8

080284a4 <free>:
 80284a4:	4b02      	ldr	r3, [pc, #8]	; (80284b0 <free+0xc>)
 80284a6:	4601      	mov	r1, r0
 80284a8:	6818      	ldr	r0, [r3, #0]
 80284aa:	f000 b817 	b.w	80284dc <_free_r>
 80284ae:	bf00      	nop
 80284b0:	200000d8 	.word	0x200000d8

080284b4 <memcpy>:
 80284b4:	b510      	push	{r4, lr}
 80284b6:	1e43      	subs	r3, r0, #1
 80284b8:	440a      	add	r2, r1
 80284ba:	4291      	cmp	r1, r2
 80284bc:	d100      	bne.n	80284c0 <memcpy+0xc>
 80284be:	bd10      	pop	{r4, pc}
 80284c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80284c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80284c8:	e7f7      	b.n	80284ba <memcpy+0x6>

080284ca <memset>:
 80284ca:	4402      	add	r2, r0
 80284cc:	4603      	mov	r3, r0
 80284ce:	4293      	cmp	r3, r2
 80284d0:	d100      	bne.n	80284d4 <memset+0xa>
 80284d2:	4770      	bx	lr
 80284d4:	f803 1b01 	strb.w	r1, [r3], #1
 80284d8:	e7f9      	b.n	80284ce <memset+0x4>
	...

080284dc <_free_r>:
 80284dc:	b538      	push	{r3, r4, r5, lr}
 80284de:	4605      	mov	r5, r0
 80284e0:	2900      	cmp	r1, #0
 80284e2:	d045      	beq.n	8028570 <_free_r+0x94>
 80284e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80284e8:	1f0c      	subs	r4, r1, #4
 80284ea:	2b00      	cmp	r3, #0
 80284ec:	bfb8      	it	lt
 80284ee:	18e4      	addlt	r4, r4, r3
 80284f0:	f000 feba 	bl	8029268 <__malloc_lock>
 80284f4:	4a1f      	ldr	r2, [pc, #124]	; (8028574 <_free_r+0x98>)
 80284f6:	6813      	ldr	r3, [r2, #0]
 80284f8:	4610      	mov	r0, r2
 80284fa:	b933      	cbnz	r3, 802850a <_free_r+0x2e>
 80284fc:	6063      	str	r3, [r4, #4]
 80284fe:	6014      	str	r4, [r2, #0]
 8028500:	4628      	mov	r0, r5
 8028502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028506:	f000 beb0 	b.w	802926a <__malloc_unlock>
 802850a:	42a3      	cmp	r3, r4
 802850c:	d90c      	bls.n	8028528 <_free_r+0x4c>
 802850e:	6821      	ldr	r1, [r4, #0]
 8028510:	1862      	adds	r2, r4, r1
 8028512:	4293      	cmp	r3, r2
 8028514:	bf04      	itt	eq
 8028516:	681a      	ldreq	r2, [r3, #0]
 8028518:	685b      	ldreq	r3, [r3, #4]
 802851a:	6063      	str	r3, [r4, #4]
 802851c:	bf04      	itt	eq
 802851e:	1852      	addeq	r2, r2, r1
 8028520:	6022      	streq	r2, [r4, #0]
 8028522:	6004      	str	r4, [r0, #0]
 8028524:	e7ec      	b.n	8028500 <_free_r+0x24>
 8028526:	4613      	mov	r3, r2
 8028528:	685a      	ldr	r2, [r3, #4]
 802852a:	b10a      	cbz	r2, 8028530 <_free_r+0x54>
 802852c:	42a2      	cmp	r2, r4
 802852e:	d9fa      	bls.n	8028526 <_free_r+0x4a>
 8028530:	6819      	ldr	r1, [r3, #0]
 8028532:	1858      	adds	r0, r3, r1
 8028534:	42a0      	cmp	r0, r4
 8028536:	d10b      	bne.n	8028550 <_free_r+0x74>
 8028538:	6820      	ldr	r0, [r4, #0]
 802853a:	4401      	add	r1, r0
 802853c:	1858      	adds	r0, r3, r1
 802853e:	4282      	cmp	r2, r0
 8028540:	6019      	str	r1, [r3, #0]
 8028542:	d1dd      	bne.n	8028500 <_free_r+0x24>
 8028544:	6810      	ldr	r0, [r2, #0]
 8028546:	6852      	ldr	r2, [r2, #4]
 8028548:	605a      	str	r2, [r3, #4]
 802854a:	4401      	add	r1, r0
 802854c:	6019      	str	r1, [r3, #0]
 802854e:	e7d7      	b.n	8028500 <_free_r+0x24>
 8028550:	d902      	bls.n	8028558 <_free_r+0x7c>
 8028552:	230c      	movs	r3, #12
 8028554:	602b      	str	r3, [r5, #0]
 8028556:	e7d3      	b.n	8028500 <_free_r+0x24>
 8028558:	6820      	ldr	r0, [r4, #0]
 802855a:	1821      	adds	r1, r4, r0
 802855c:	428a      	cmp	r2, r1
 802855e:	bf04      	itt	eq
 8028560:	6811      	ldreq	r1, [r2, #0]
 8028562:	6852      	ldreq	r2, [r2, #4]
 8028564:	6062      	str	r2, [r4, #4]
 8028566:	bf04      	itt	eq
 8028568:	1809      	addeq	r1, r1, r0
 802856a:	6021      	streq	r1, [r4, #0]
 802856c:	605c      	str	r4, [r3, #4]
 802856e:	e7c7      	b.n	8028500 <_free_r+0x24>
 8028570:	bd38      	pop	{r3, r4, r5, pc}
 8028572:	bf00      	nop
 8028574:	2000c008 	.word	0x2000c008

08028578 <_malloc_r>:
 8028578:	b570      	push	{r4, r5, r6, lr}
 802857a:	1ccd      	adds	r5, r1, #3
 802857c:	f025 0503 	bic.w	r5, r5, #3
 8028580:	3508      	adds	r5, #8
 8028582:	2d0c      	cmp	r5, #12
 8028584:	bf38      	it	cc
 8028586:	250c      	movcc	r5, #12
 8028588:	2d00      	cmp	r5, #0
 802858a:	4606      	mov	r6, r0
 802858c:	db01      	blt.n	8028592 <_malloc_r+0x1a>
 802858e:	42a9      	cmp	r1, r5
 8028590:	d903      	bls.n	802859a <_malloc_r+0x22>
 8028592:	230c      	movs	r3, #12
 8028594:	6033      	str	r3, [r6, #0]
 8028596:	2000      	movs	r0, #0
 8028598:	bd70      	pop	{r4, r5, r6, pc}
 802859a:	f000 fe65 	bl	8029268 <__malloc_lock>
 802859e:	4a21      	ldr	r2, [pc, #132]	; (8028624 <_malloc_r+0xac>)
 80285a0:	6814      	ldr	r4, [r2, #0]
 80285a2:	4621      	mov	r1, r4
 80285a4:	b991      	cbnz	r1, 80285cc <_malloc_r+0x54>
 80285a6:	4c20      	ldr	r4, [pc, #128]	; (8028628 <_malloc_r+0xb0>)
 80285a8:	6823      	ldr	r3, [r4, #0]
 80285aa:	b91b      	cbnz	r3, 80285b4 <_malloc_r+0x3c>
 80285ac:	4630      	mov	r0, r6
 80285ae:	f000 fb05 	bl	8028bbc <_sbrk_r>
 80285b2:	6020      	str	r0, [r4, #0]
 80285b4:	4629      	mov	r1, r5
 80285b6:	4630      	mov	r0, r6
 80285b8:	f000 fb00 	bl	8028bbc <_sbrk_r>
 80285bc:	1c43      	adds	r3, r0, #1
 80285be:	d124      	bne.n	802860a <_malloc_r+0x92>
 80285c0:	230c      	movs	r3, #12
 80285c2:	6033      	str	r3, [r6, #0]
 80285c4:	4630      	mov	r0, r6
 80285c6:	f000 fe50 	bl	802926a <__malloc_unlock>
 80285ca:	e7e4      	b.n	8028596 <_malloc_r+0x1e>
 80285cc:	680b      	ldr	r3, [r1, #0]
 80285ce:	1b5b      	subs	r3, r3, r5
 80285d0:	d418      	bmi.n	8028604 <_malloc_r+0x8c>
 80285d2:	2b0b      	cmp	r3, #11
 80285d4:	d90f      	bls.n	80285f6 <_malloc_r+0x7e>
 80285d6:	600b      	str	r3, [r1, #0]
 80285d8:	50cd      	str	r5, [r1, r3]
 80285da:	18cc      	adds	r4, r1, r3
 80285dc:	4630      	mov	r0, r6
 80285de:	f000 fe44 	bl	802926a <__malloc_unlock>
 80285e2:	f104 000b 	add.w	r0, r4, #11
 80285e6:	1d23      	adds	r3, r4, #4
 80285e8:	f020 0007 	bic.w	r0, r0, #7
 80285ec:	1ac3      	subs	r3, r0, r3
 80285ee:	d0d3      	beq.n	8028598 <_malloc_r+0x20>
 80285f0:	425a      	negs	r2, r3
 80285f2:	50e2      	str	r2, [r4, r3]
 80285f4:	e7d0      	b.n	8028598 <_malloc_r+0x20>
 80285f6:	428c      	cmp	r4, r1
 80285f8:	684b      	ldr	r3, [r1, #4]
 80285fa:	bf16      	itet	ne
 80285fc:	6063      	strne	r3, [r4, #4]
 80285fe:	6013      	streq	r3, [r2, #0]
 8028600:	460c      	movne	r4, r1
 8028602:	e7eb      	b.n	80285dc <_malloc_r+0x64>
 8028604:	460c      	mov	r4, r1
 8028606:	6849      	ldr	r1, [r1, #4]
 8028608:	e7cc      	b.n	80285a4 <_malloc_r+0x2c>
 802860a:	1cc4      	adds	r4, r0, #3
 802860c:	f024 0403 	bic.w	r4, r4, #3
 8028610:	42a0      	cmp	r0, r4
 8028612:	d005      	beq.n	8028620 <_malloc_r+0xa8>
 8028614:	1a21      	subs	r1, r4, r0
 8028616:	4630      	mov	r0, r6
 8028618:	f000 fad0 	bl	8028bbc <_sbrk_r>
 802861c:	3001      	adds	r0, #1
 802861e:	d0cf      	beq.n	80285c0 <_malloc_r+0x48>
 8028620:	6025      	str	r5, [r4, #0]
 8028622:	e7db      	b.n	80285dc <_malloc_r+0x64>
 8028624:	2000c008 	.word	0x2000c008
 8028628:	2000c00c 	.word	0x2000c00c

0802862c <__sfputc_r>:
 802862c:	6893      	ldr	r3, [r2, #8]
 802862e:	3b01      	subs	r3, #1
 8028630:	2b00      	cmp	r3, #0
 8028632:	b410      	push	{r4}
 8028634:	6093      	str	r3, [r2, #8]
 8028636:	da08      	bge.n	802864a <__sfputc_r+0x1e>
 8028638:	6994      	ldr	r4, [r2, #24]
 802863a:	42a3      	cmp	r3, r4
 802863c:	db01      	blt.n	8028642 <__sfputc_r+0x16>
 802863e:	290a      	cmp	r1, #10
 8028640:	d103      	bne.n	802864a <__sfputc_r+0x1e>
 8028642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028646:	f000 bb0d 	b.w	8028c64 <__swbuf_r>
 802864a:	6813      	ldr	r3, [r2, #0]
 802864c:	1c58      	adds	r0, r3, #1
 802864e:	6010      	str	r0, [r2, #0]
 8028650:	7019      	strb	r1, [r3, #0]
 8028652:	4608      	mov	r0, r1
 8028654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028658:	4770      	bx	lr

0802865a <__sfputs_r>:
 802865a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802865c:	4606      	mov	r6, r0
 802865e:	460f      	mov	r7, r1
 8028660:	4614      	mov	r4, r2
 8028662:	18d5      	adds	r5, r2, r3
 8028664:	42ac      	cmp	r4, r5
 8028666:	d101      	bne.n	802866c <__sfputs_r+0x12>
 8028668:	2000      	movs	r0, #0
 802866a:	e007      	b.n	802867c <__sfputs_r+0x22>
 802866c:	463a      	mov	r2, r7
 802866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028672:	4630      	mov	r0, r6
 8028674:	f7ff ffda 	bl	802862c <__sfputc_r>
 8028678:	1c43      	adds	r3, r0, #1
 802867a:	d1f3      	bne.n	8028664 <__sfputs_r+0xa>
 802867c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028680 <_vfiprintf_r>:
 8028680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028684:	460c      	mov	r4, r1
 8028686:	b09d      	sub	sp, #116	; 0x74
 8028688:	4617      	mov	r7, r2
 802868a:	461d      	mov	r5, r3
 802868c:	4606      	mov	r6, r0
 802868e:	b118      	cbz	r0, 8028698 <_vfiprintf_r+0x18>
 8028690:	6983      	ldr	r3, [r0, #24]
 8028692:	b90b      	cbnz	r3, 8028698 <_vfiprintf_r+0x18>
 8028694:	f000 fcfa 	bl	802908c <__sinit>
 8028698:	4b7c      	ldr	r3, [pc, #496]	; (802888c <_vfiprintf_r+0x20c>)
 802869a:	429c      	cmp	r4, r3
 802869c:	d158      	bne.n	8028750 <_vfiprintf_r+0xd0>
 802869e:	6874      	ldr	r4, [r6, #4]
 80286a0:	89a3      	ldrh	r3, [r4, #12]
 80286a2:	0718      	lsls	r0, r3, #28
 80286a4:	d55e      	bpl.n	8028764 <_vfiprintf_r+0xe4>
 80286a6:	6923      	ldr	r3, [r4, #16]
 80286a8:	2b00      	cmp	r3, #0
 80286aa:	d05b      	beq.n	8028764 <_vfiprintf_r+0xe4>
 80286ac:	2300      	movs	r3, #0
 80286ae:	9309      	str	r3, [sp, #36]	; 0x24
 80286b0:	2320      	movs	r3, #32
 80286b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80286b6:	2330      	movs	r3, #48	; 0x30
 80286b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80286bc:	9503      	str	r5, [sp, #12]
 80286be:	f04f 0b01 	mov.w	fp, #1
 80286c2:	46b8      	mov	r8, r7
 80286c4:	4645      	mov	r5, r8
 80286c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80286ca:	b10b      	cbz	r3, 80286d0 <_vfiprintf_r+0x50>
 80286cc:	2b25      	cmp	r3, #37	; 0x25
 80286ce:	d154      	bne.n	802877a <_vfiprintf_r+0xfa>
 80286d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80286d4:	d00b      	beq.n	80286ee <_vfiprintf_r+0x6e>
 80286d6:	4653      	mov	r3, sl
 80286d8:	463a      	mov	r2, r7
 80286da:	4621      	mov	r1, r4
 80286dc:	4630      	mov	r0, r6
 80286de:	f7ff ffbc 	bl	802865a <__sfputs_r>
 80286e2:	3001      	adds	r0, #1
 80286e4:	f000 80c2 	beq.w	802886c <_vfiprintf_r+0x1ec>
 80286e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286ea:	4453      	add	r3, sl
 80286ec:	9309      	str	r3, [sp, #36]	; 0x24
 80286ee:	f898 3000 	ldrb.w	r3, [r8]
 80286f2:	2b00      	cmp	r3, #0
 80286f4:	f000 80ba 	beq.w	802886c <_vfiprintf_r+0x1ec>
 80286f8:	2300      	movs	r3, #0
 80286fa:	f04f 32ff 	mov.w	r2, #4294967295
 80286fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028702:	9304      	str	r3, [sp, #16]
 8028704:	9307      	str	r3, [sp, #28]
 8028706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802870a:	931a      	str	r3, [sp, #104]	; 0x68
 802870c:	46a8      	mov	r8, r5
 802870e:	2205      	movs	r2, #5
 8028710:	f818 1b01 	ldrb.w	r1, [r8], #1
 8028714:	485e      	ldr	r0, [pc, #376]	; (8028890 <_vfiprintf_r+0x210>)
 8028716:	f7d7 fd7b 	bl	8000210 <memchr>
 802871a:	9b04      	ldr	r3, [sp, #16]
 802871c:	bb78      	cbnz	r0, 802877e <_vfiprintf_r+0xfe>
 802871e:	06d9      	lsls	r1, r3, #27
 8028720:	bf44      	itt	mi
 8028722:	2220      	movmi	r2, #32
 8028724:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8028728:	071a      	lsls	r2, r3, #28
 802872a:	bf44      	itt	mi
 802872c:	222b      	movmi	r2, #43	; 0x2b
 802872e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8028732:	782a      	ldrb	r2, [r5, #0]
 8028734:	2a2a      	cmp	r2, #42	; 0x2a
 8028736:	d02a      	beq.n	802878e <_vfiprintf_r+0x10e>
 8028738:	9a07      	ldr	r2, [sp, #28]
 802873a:	46a8      	mov	r8, r5
 802873c:	2000      	movs	r0, #0
 802873e:	250a      	movs	r5, #10
 8028740:	4641      	mov	r1, r8
 8028742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028746:	3b30      	subs	r3, #48	; 0x30
 8028748:	2b09      	cmp	r3, #9
 802874a:	d969      	bls.n	8028820 <_vfiprintf_r+0x1a0>
 802874c:	b360      	cbz	r0, 80287a8 <_vfiprintf_r+0x128>
 802874e:	e024      	b.n	802879a <_vfiprintf_r+0x11a>
 8028750:	4b50      	ldr	r3, [pc, #320]	; (8028894 <_vfiprintf_r+0x214>)
 8028752:	429c      	cmp	r4, r3
 8028754:	d101      	bne.n	802875a <_vfiprintf_r+0xda>
 8028756:	68b4      	ldr	r4, [r6, #8]
 8028758:	e7a2      	b.n	80286a0 <_vfiprintf_r+0x20>
 802875a:	4b4f      	ldr	r3, [pc, #316]	; (8028898 <_vfiprintf_r+0x218>)
 802875c:	429c      	cmp	r4, r3
 802875e:	bf08      	it	eq
 8028760:	68f4      	ldreq	r4, [r6, #12]
 8028762:	e79d      	b.n	80286a0 <_vfiprintf_r+0x20>
 8028764:	4621      	mov	r1, r4
 8028766:	4630      	mov	r0, r6
 8028768:	f000 face 	bl	8028d08 <__swsetup_r>
 802876c:	2800      	cmp	r0, #0
 802876e:	d09d      	beq.n	80286ac <_vfiprintf_r+0x2c>
 8028770:	f04f 30ff 	mov.w	r0, #4294967295
 8028774:	b01d      	add	sp, #116	; 0x74
 8028776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802877a:	46a8      	mov	r8, r5
 802877c:	e7a2      	b.n	80286c4 <_vfiprintf_r+0x44>
 802877e:	4a44      	ldr	r2, [pc, #272]	; (8028890 <_vfiprintf_r+0x210>)
 8028780:	1a80      	subs	r0, r0, r2
 8028782:	fa0b f000 	lsl.w	r0, fp, r0
 8028786:	4318      	orrs	r0, r3
 8028788:	9004      	str	r0, [sp, #16]
 802878a:	4645      	mov	r5, r8
 802878c:	e7be      	b.n	802870c <_vfiprintf_r+0x8c>
 802878e:	9a03      	ldr	r2, [sp, #12]
 8028790:	1d11      	adds	r1, r2, #4
 8028792:	6812      	ldr	r2, [r2, #0]
 8028794:	9103      	str	r1, [sp, #12]
 8028796:	2a00      	cmp	r2, #0
 8028798:	db01      	blt.n	802879e <_vfiprintf_r+0x11e>
 802879a:	9207      	str	r2, [sp, #28]
 802879c:	e004      	b.n	80287a8 <_vfiprintf_r+0x128>
 802879e:	4252      	negs	r2, r2
 80287a0:	f043 0302 	orr.w	r3, r3, #2
 80287a4:	9207      	str	r2, [sp, #28]
 80287a6:	9304      	str	r3, [sp, #16]
 80287a8:	f898 3000 	ldrb.w	r3, [r8]
 80287ac:	2b2e      	cmp	r3, #46	; 0x2e
 80287ae:	d10e      	bne.n	80287ce <_vfiprintf_r+0x14e>
 80287b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80287b4:	2b2a      	cmp	r3, #42	; 0x2a
 80287b6:	d138      	bne.n	802882a <_vfiprintf_r+0x1aa>
 80287b8:	9b03      	ldr	r3, [sp, #12]
 80287ba:	1d1a      	adds	r2, r3, #4
 80287bc:	681b      	ldr	r3, [r3, #0]
 80287be:	9203      	str	r2, [sp, #12]
 80287c0:	2b00      	cmp	r3, #0
 80287c2:	bfb8      	it	lt
 80287c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80287c8:	f108 0802 	add.w	r8, r8, #2
 80287cc:	9305      	str	r3, [sp, #20]
 80287ce:	4d33      	ldr	r5, [pc, #204]	; (802889c <_vfiprintf_r+0x21c>)
 80287d0:	f898 1000 	ldrb.w	r1, [r8]
 80287d4:	2203      	movs	r2, #3
 80287d6:	4628      	mov	r0, r5
 80287d8:	f7d7 fd1a 	bl	8000210 <memchr>
 80287dc:	b140      	cbz	r0, 80287f0 <_vfiprintf_r+0x170>
 80287de:	2340      	movs	r3, #64	; 0x40
 80287e0:	1b40      	subs	r0, r0, r5
 80287e2:	fa03 f000 	lsl.w	r0, r3, r0
 80287e6:	9b04      	ldr	r3, [sp, #16]
 80287e8:	4303      	orrs	r3, r0
 80287ea:	f108 0801 	add.w	r8, r8, #1
 80287ee:	9304      	str	r3, [sp, #16]
 80287f0:	f898 1000 	ldrb.w	r1, [r8]
 80287f4:	482a      	ldr	r0, [pc, #168]	; (80288a0 <_vfiprintf_r+0x220>)
 80287f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80287fa:	2206      	movs	r2, #6
 80287fc:	f108 0701 	add.w	r7, r8, #1
 8028800:	f7d7 fd06 	bl	8000210 <memchr>
 8028804:	2800      	cmp	r0, #0
 8028806:	d037      	beq.n	8028878 <_vfiprintf_r+0x1f8>
 8028808:	4b26      	ldr	r3, [pc, #152]	; (80288a4 <_vfiprintf_r+0x224>)
 802880a:	bb1b      	cbnz	r3, 8028854 <_vfiprintf_r+0x1d4>
 802880c:	9b03      	ldr	r3, [sp, #12]
 802880e:	3307      	adds	r3, #7
 8028810:	f023 0307 	bic.w	r3, r3, #7
 8028814:	3308      	adds	r3, #8
 8028816:	9303      	str	r3, [sp, #12]
 8028818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802881a:	444b      	add	r3, r9
 802881c:	9309      	str	r3, [sp, #36]	; 0x24
 802881e:	e750      	b.n	80286c2 <_vfiprintf_r+0x42>
 8028820:	fb05 3202 	mla	r2, r5, r2, r3
 8028824:	2001      	movs	r0, #1
 8028826:	4688      	mov	r8, r1
 8028828:	e78a      	b.n	8028740 <_vfiprintf_r+0xc0>
 802882a:	2300      	movs	r3, #0
 802882c:	f108 0801 	add.w	r8, r8, #1
 8028830:	9305      	str	r3, [sp, #20]
 8028832:	4619      	mov	r1, r3
 8028834:	250a      	movs	r5, #10
 8028836:	4640      	mov	r0, r8
 8028838:	f810 2b01 	ldrb.w	r2, [r0], #1
 802883c:	3a30      	subs	r2, #48	; 0x30
 802883e:	2a09      	cmp	r2, #9
 8028840:	d903      	bls.n	802884a <_vfiprintf_r+0x1ca>
 8028842:	2b00      	cmp	r3, #0
 8028844:	d0c3      	beq.n	80287ce <_vfiprintf_r+0x14e>
 8028846:	9105      	str	r1, [sp, #20]
 8028848:	e7c1      	b.n	80287ce <_vfiprintf_r+0x14e>
 802884a:	fb05 2101 	mla	r1, r5, r1, r2
 802884e:	2301      	movs	r3, #1
 8028850:	4680      	mov	r8, r0
 8028852:	e7f0      	b.n	8028836 <_vfiprintf_r+0x1b6>
 8028854:	ab03      	add	r3, sp, #12
 8028856:	9300      	str	r3, [sp, #0]
 8028858:	4622      	mov	r2, r4
 802885a:	4b13      	ldr	r3, [pc, #76]	; (80288a8 <_vfiprintf_r+0x228>)
 802885c:	a904      	add	r1, sp, #16
 802885e:	4630      	mov	r0, r6
 8028860:	f3af 8000 	nop.w
 8028864:	f1b0 3fff 	cmp.w	r0, #4294967295
 8028868:	4681      	mov	r9, r0
 802886a:	d1d5      	bne.n	8028818 <_vfiprintf_r+0x198>
 802886c:	89a3      	ldrh	r3, [r4, #12]
 802886e:	065b      	lsls	r3, r3, #25
 8028870:	f53f af7e 	bmi.w	8028770 <_vfiprintf_r+0xf0>
 8028874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028876:	e77d      	b.n	8028774 <_vfiprintf_r+0xf4>
 8028878:	ab03      	add	r3, sp, #12
 802887a:	9300      	str	r3, [sp, #0]
 802887c:	4622      	mov	r2, r4
 802887e:	4b0a      	ldr	r3, [pc, #40]	; (80288a8 <_vfiprintf_r+0x228>)
 8028880:	a904      	add	r1, sp, #16
 8028882:	4630      	mov	r0, r6
 8028884:	f000 f888 	bl	8028998 <_printf_i>
 8028888:	e7ec      	b.n	8028864 <_vfiprintf_r+0x1e4>
 802888a:	bf00      	nop
 802888c:	0802de54 	.word	0x0802de54
 8028890:	0802ddfc 	.word	0x0802ddfc
 8028894:	0802de74 	.word	0x0802de74
 8028898:	0802de34 	.word	0x0802de34
 802889c:	0802de02 	.word	0x0802de02
 80288a0:	0802de06 	.word	0x0802de06
 80288a4:	00000000 	.word	0x00000000
 80288a8:	0802865b 	.word	0x0802865b

080288ac <_printf_common>:
 80288ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80288b0:	4691      	mov	r9, r2
 80288b2:	461f      	mov	r7, r3
 80288b4:	688a      	ldr	r2, [r1, #8]
 80288b6:	690b      	ldr	r3, [r1, #16]
 80288b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80288bc:	4293      	cmp	r3, r2
 80288be:	bfb8      	it	lt
 80288c0:	4613      	movlt	r3, r2
 80288c2:	f8c9 3000 	str.w	r3, [r9]
 80288c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80288ca:	4606      	mov	r6, r0
 80288cc:	460c      	mov	r4, r1
 80288ce:	b112      	cbz	r2, 80288d6 <_printf_common+0x2a>
 80288d0:	3301      	adds	r3, #1
 80288d2:	f8c9 3000 	str.w	r3, [r9]
 80288d6:	6823      	ldr	r3, [r4, #0]
 80288d8:	0699      	lsls	r1, r3, #26
 80288da:	bf42      	ittt	mi
 80288dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80288e0:	3302      	addmi	r3, #2
 80288e2:	f8c9 3000 	strmi.w	r3, [r9]
 80288e6:	6825      	ldr	r5, [r4, #0]
 80288e8:	f015 0506 	ands.w	r5, r5, #6
 80288ec:	d107      	bne.n	80288fe <_printf_common+0x52>
 80288ee:	f104 0a19 	add.w	sl, r4, #25
 80288f2:	68e3      	ldr	r3, [r4, #12]
 80288f4:	f8d9 2000 	ldr.w	r2, [r9]
 80288f8:	1a9b      	subs	r3, r3, r2
 80288fa:	42ab      	cmp	r3, r5
 80288fc:	dc28      	bgt.n	8028950 <_printf_common+0xa4>
 80288fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8028902:	6822      	ldr	r2, [r4, #0]
 8028904:	3300      	adds	r3, #0
 8028906:	bf18      	it	ne
 8028908:	2301      	movne	r3, #1
 802890a:	0692      	lsls	r2, r2, #26
 802890c:	d42d      	bmi.n	802896a <_printf_common+0xbe>
 802890e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028912:	4639      	mov	r1, r7
 8028914:	4630      	mov	r0, r6
 8028916:	47c0      	blx	r8
 8028918:	3001      	adds	r0, #1
 802891a:	d020      	beq.n	802895e <_printf_common+0xb2>
 802891c:	6823      	ldr	r3, [r4, #0]
 802891e:	68e5      	ldr	r5, [r4, #12]
 8028920:	f8d9 2000 	ldr.w	r2, [r9]
 8028924:	f003 0306 	and.w	r3, r3, #6
 8028928:	2b04      	cmp	r3, #4
 802892a:	bf08      	it	eq
 802892c:	1aad      	subeq	r5, r5, r2
 802892e:	68a3      	ldr	r3, [r4, #8]
 8028930:	6922      	ldr	r2, [r4, #16]
 8028932:	bf0c      	ite	eq
 8028934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028938:	2500      	movne	r5, #0
 802893a:	4293      	cmp	r3, r2
 802893c:	bfc4      	itt	gt
 802893e:	1a9b      	subgt	r3, r3, r2
 8028940:	18ed      	addgt	r5, r5, r3
 8028942:	f04f 0900 	mov.w	r9, #0
 8028946:	341a      	adds	r4, #26
 8028948:	454d      	cmp	r5, r9
 802894a:	d11a      	bne.n	8028982 <_printf_common+0xd6>
 802894c:	2000      	movs	r0, #0
 802894e:	e008      	b.n	8028962 <_printf_common+0xb6>
 8028950:	2301      	movs	r3, #1
 8028952:	4652      	mov	r2, sl
 8028954:	4639      	mov	r1, r7
 8028956:	4630      	mov	r0, r6
 8028958:	47c0      	blx	r8
 802895a:	3001      	adds	r0, #1
 802895c:	d103      	bne.n	8028966 <_printf_common+0xba>
 802895e:	f04f 30ff 	mov.w	r0, #4294967295
 8028962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028966:	3501      	adds	r5, #1
 8028968:	e7c3      	b.n	80288f2 <_printf_common+0x46>
 802896a:	18e1      	adds	r1, r4, r3
 802896c:	1c5a      	adds	r2, r3, #1
 802896e:	2030      	movs	r0, #48	; 0x30
 8028970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028974:	4422      	add	r2, r4
 8028976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802897a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802897e:	3302      	adds	r3, #2
 8028980:	e7c5      	b.n	802890e <_printf_common+0x62>
 8028982:	2301      	movs	r3, #1
 8028984:	4622      	mov	r2, r4
 8028986:	4639      	mov	r1, r7
 8028988:	4630      	mov	r0, r6
 802898a:	47c0      	blx	r8
 802898c:	3001      	adds	r0, #1
 802898e:	d0e6      	beq.n	802895e <_printf_common+0xb2>
 8028990:	f109 0901 	add.w	r9, r9, #1
 8028994:	e7d8      	b.n	8028948 <_printf_common+0x9c>
	...

08028998 <_printf_i>:
 8028998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802899c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80289a0:	460c      	mov	r4, r1
 80289a2:	7e09      	ldrb	r1, [r1, #24]
 80289a4:	b085      	sub	sp, #20
 80289a6:	296e      	cmp	r1, #110	; 0x6e
 80289a8:	4617      	mov	r7, r2
 80289aa:	4606      	mov	r6, r0
 80289ac:	4698      	mov	r8, r3
 80289ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80289b0:	f000 80b3 	beq.w	8028b1a <_printf_i+0x182>
 80289b4:	d822      	bhi.n	80289fc <_printf_i+0x64>
 80289b6:	2963      	cmp	r1, #99	; 0x63
 80289b8:	d036      	beq.n	8028a28 <_printf_i+0x90>
 80289ba:	d80a      	bhi.n	80289d2 <_printf_i+0x3a>
 80289bc:	2900      	cmp	r1, #0
 80289be:	f000 80b9 	beq.w	8028b34 <_printf_i+0x19c>
 80289c2:	2958      	cmp	r1, #88	; 0x58
 80289c4:	f000 8083 	beq.w	8028ace <_printf_i+0x136>
 80289c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80289cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80289d0:	e032      	b.n	8028a38 <_printf_i+0xa0>
 80289d2:	2964      	cmp	r1, #100	; 0x64
 80289d4:	d001      	beq.n	80289da <_printf_i+0x42>
 80289d6:	2969      	cmp	r1, #105	; 0x69
 80289d8:	d1f6      	bne.n	80289c8 <_printf_i+0x30>
 80289da:	6820      	ldr	r0, [r4, #0]
 80289dc:	6813      	ldr	r3, [r2, #0]
 80289de:	0605      	lsls	r5, r0, #24
 80289e0:	f103 0104 	add.w	r1, r3, #4
 80289e4:	d52a      	bpl.n	8028a3c <_printf_i+0xa4>
 80289e6:	681b      	ldr	r3, [r3, #0]
 80289e8:	6011      	str	r1, [r2, #0]
 80289ea:	2b00      	cmp	r3, #0
 80289ec:	da03      	bge.n	80289f6 <_printf_i+0x5e>
 80289ee:	222d      	movs	r2, #45	; 0x2d
 80289f0:	425b      	negs	r3, r3
 80289f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80289f6:	486f      	ldr	r0, [pc, #444]	; (8028bb4 <_printf_i+0x21c>)
 80289f8:	220a      	movs	r2, #10
 80289fa:	e039      	b.n	8028a70 <_printf_i+0xd8>
 80289fc:	2973      	cmp	r1, #115	; 0x73
 80289fe:	f000 809d 	beq.w	8028b3c <_printf_i+0x1a4>
 8028a02:	d808      	bhi.n	8028a16 <_printf_i+0x7e>
 8028a04:	296f      	cmp	r1, #111	; 0x6f
 8028a06:	d020      	beq.n	8028a4a <_printf_i+0xb2>
 8028a08:	2970      	cmp	r1, #112	; 0x70
 8028a0a:	d1dd      	bne.n	80289c8 <_printf_i+0x30>
 8028a0c:	6823      	ldr	r3, [r4, #0]
 8028a0e:	f043 0320 	orr.w	r3, r3, #32
 8028a12:	6023      	str	r3, [r4, #0]
 8028a14:	e003      	b.n	8028a1e <_printf_i+0x86>
 8028a16:	2975      	cmp	r1, #117	; 0x75
 8028a18:	d017      	beq.n	8028a4a <_printf_i+0xb2>
 8028a1a:	2978      	cmp	r1, #120	; 0x78
 8028a1c:	d1d4      	bne.n	80289c8 <_printf_i+0x30>
 8028a1e:	2378      	movs	r3, #120	; 0x78
 8028a20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8028a24:	4864      	ldr	r0, [pc, #400]	; (8028bb8 <_printf_i+0x220>)
 8028a26:	e055      	b.n	8028ad4 <_printf_i+0x13c>
 8028a28:	6813      	ldr	r3, [r2, #0]
 8028a2a:	1d19      	adds	r1, r3, #4
 8028a2c:	681b      	ldr	r3, [r3, #0]
 8028a2e:	6011      	str	r1, [r2, #0]
 8028a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028a38:	2301      	movs	r3, #1
 8028a3a:	e08c      	b.n	8028b56 <_printf_i+0x1be>
 8028a3c:	681b      	ldr	r3, [r3, #0]
 8028a3e:	6011      	str	r1, [r2, #0]
 8028a40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028a44:	bf18      	it	ne
 8028a46:	b21b      	sxthne	r3, r3
 8028a48:	e7cf      	b.n	80289ea <_printf_i+0x52>
 8028a4a:	6813      	ldr	r3, [r2, #0]
 8028a4c:	6825      	ldr	r5, [r4, #0]
 8028a4e:	1d18      	adds	r0, r3, #4
 8028a50:	6010      	str	r0, [r2, #0]
 8028a52:	0628      	lsls	r0, r5, #24
 8028a54:	d501      	bpl.n	8028a5a <_printf_i+0xc2>
 8028a56:	681b      	ldr	r3, [r3, #0]
 8028a58:	e002      	b.n	8028a60 <_printf_i+0xc8>
 8028a5a:	0668      	lsls	r0, r5, #25
 8028a5c:	d5fb      	bpl.n	8028a56 <_printf_i+0xbe>
 8028a5e:	881b      	ldrh	r3, [r3, #0]
 8028a60:	4854      	ldr	r0, [pc, #336]	; (8028bb4 <_printf_i+0x21c>)
 8028a62:	296f      	cmp	r1, #111	; 0x6f
 8028a64:	bf14      	ite	ne
 8028a66:	220a      	movne	r2, #10
 8028a68:	2208      	moveq	r2, #8
 8028a6a:	2100      	movs	r1, #0
 8028a6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028a70:	6865      	ldr	r5, [r4, #4]
 8028a72:	60a5      	str	r5, [r4, #8]
 8028a74:	2d00      	cmp	r5, #0
 8028a76:	f2c0 8095 	blt.w	8028ba4 <_printf_i+0x20c>
 8028a7a:	6821      	ldr	r1, [r4, #0]
 8028a7c:	f021 0104 	bic.w	r1, r1, #4
 8028a80:	6021      	str	r1, [r4, #0]
 8028a82:	2b00      	cmp	r3, #0
 8028a84:	d13d      	bne.n	8028b02 <_printf_i+0x16a>
 8028a86:	2d00      	cmp	r5, #0
 8028a88:	f040 808e 	bne.w	8028ba8 <_printf_i+0x210>
 8028a8c:	4665      	mov	r5, ip
 8028a8e:	2a08      	cmp	r2, #8
 8028a90:	d10b      	bne.n	8028aaa <_printf_i+0x112>
 8028a92:	6823      	ldr	r3, [r4, #0]
 8028a94:	07db      	lsls	r3, r3, #31
 8028a96:	d508      	bpl.n	8028aaa <_printf_i+0x112>
 8028a98:	6923      	ldr	r3, [r4, #16]
 8028a9a:	6862      	ldr	r2, [r4, #4]
 8028a9c:	429a      	cmp	r2, r3
 8028a9e:	bfde      	ittt	le
 8028aa0:	2330      	movle	r3, #48	; 0x30
 8028aa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028aa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8028aaa:	ebac 0305 	sub.w	r3, ip, r5
 8028aae:	6123      	str	r3, [r4, #16]
 8028ab0:	f8cd 8000 	str.w	r8, [sp]
 8028ab4:	463b      	mov	r3, r7
 8028ab6:	aa03      	add	r2, sp, #12
 8028ab8:	4621      	mov	r1, r4
 8028aba:	4630      	mov	r0, r6
 8028abc:	f7ff fef6 	bl	80288ac <_printf_common>
 8028ac0:	3001      	adds	r0, #1
 8028ac2:	d14d      	bne.n	8028b60 <_printf_i+0x1c8>
 8028ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8028ac8:	b005      	add	sp, #20
 8028aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028ace:	4839      	ldr	r0, [pc, #228]	; (8028bb4 <_printf_i+0x21c>)
 8028ad0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8028ad4:	6813      	ldr	r3, [r2, #0]
 8028ad6:	6821      	ldr	r1, [r4, #0]
 8028ad8:	1d1d      	adds	r5, r3, #4
 8028ada:	681b      	ldr	r3, [r3, #0]
 8028adc:	6015      	str	r5, [r2, #0]
 8028ade:	060a      	lsls	r2, r1, #24
 8028ae0:	d50b      	bpl.n	8028afa <_printf_i+0x162>
 8028ae2:	07ca      	lsls	r2, r1, #31
 8028ae4:	bf44      	itt	mi
 8028ae6:	f041 0120 	orrmi.w	r1, r1, #32
 8028aea:	6021      	strmi	r1, [r4, #0]
 8028aec:	b91b      	cbnz	r3, 8028af6 <_printf_i+0x15e>
 8028aee:	6822      	ldr	r2, [r4, #0]
 8028af0:	f022 0220 	bic.w	r2, r2, #32
 8028af4:	6022      	str	r2, [r4, #0]
 8028af6:	2210      	movs	r2, #16
 8028af8:	e7b7      	b.n	8028a6a <_printf_i+0xd2>
 8028afa:	064d      	lsls	r5, r1, #25
 8028afc:	bf48      	it	mi
 8028afe:	b29b      	uxthmi	r3, r3
 8028b00:	e7ef      	b.n	8028ae2 <_printf_i+0x14a>
 8028b02:	4665      	mov	r5, ip
 8028b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8028b08:	fb02 3311 	mls	r3, r2, r1, r3
 8028b0c:	5cc3      	ldrb	r3, [r0, r3]
 8028b0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8028b12:	460b      	mov	r3, r1
 8028b14:	2900      	cmp	r1, #0
 8028b16:	d1f5      	bne.n	8028b04 <_printf_i+0x16c>
 8028b18:	e7b9      	b.n	8028a8e <_printf_i+0xf6>
 8028b1a:	6813      	ldr	r3, [r2, #0]
 8028b1c:	6825      	ldr	r5, [r4, #0]
 8028b1e:	6961      	ldr	r1, [r4, #20]
 8028b20:	1d18      	adds	r0, r3, #4
 8028b22:	6010      	str	r0, [r2, #0]
 8028b24:	0628      	lsls	r0, r5, #24
 8028b26:	681b      	ldr	r3, [r3, #0]
 8028b28:	d501      	bpl.n	8028b2e <_printf_i+0x196>
 8028b2a:	6019      	str	r1, [r3, #0]
 8028b2c:	e002      	b.n	8028b34 <_printf_i+0x19c>
 8028b2e:	066a      	lsls	r2, r5, #25
 8028b30:	d5fb      	bpl.n	8028b2a <_printf_i+0x192>
 8028b32:	8019      	strh	r1, [r3, #0]
 8028b34:	2300      	movs	r3, #0
 8028b36:	6123      	str	r3, [r4, #16]
 8028b38:	4665      	mov	r5, ip
 8028b3a:	e7b9      	b.n	8028ab0 <_printf_i+0x118>
 8028b3c:	6813      	ldr	r3, [r2, #0]
 8028b3e:	1d19      	adds	r1, r3, #4
 8028b40:	6011      	str	r1, [r2, #0]
 8028b42:	681d      	ldr	r5, [r3, #0]
 8028b44:	6862      	ldr	r2, [r4, #4]
 8028b46:	2100      	movs	r1, #0
 8028b48:	4628      	mov	r0, r5
 8028b4a:	f7d7 fb61 	bl	8000210 <memchr>
 8028b4e:	b108      	cbz	r0, 8028b54 <_printf_i+0x1bc>
 8028b50:	1b40      	subs	r0, r0, r5
 8028b52:	6060      	str	r0, [r4, #4]
 8028b54:	6863      	ldr	r3, [r4, #4]
 8028b56:	6123      	str	r3, [r4, #16]
 8028b58:	2300      	movs	r3, #0
 8028b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028b5e:	e7a7      	b.n	8028ab0 <_printf_i+0x118>
 8028b60:	6923      	ldr	r3, [r4, #16]
 8028b62:	462a      	mov	r2, r5
 8028b64:	4639      	mov	r1, r7
 8028b66:	4630      	mov	r0, r6
 8028b68:	47c0      	blx	r8
 8028b6a:	3001      	adds	r0, #1
 8028b6c:	d0aa      	beq.n	8028ac4 <_printf_i+0x12c>
 8028b6e:	6823      	ldr	r3, [r4, #0]
 8028b70:	079b      	lsls	r3, r3, #30
 8028b72:	d413      	bmi.n	8028b9c <_printf_i+0x204>
 8028b74:	68e0      	ldr	r0, [r4, #12]
 8028b76:	9b03      	ldr	r3, [sp, #12]
 8028b78:	4298      	cmp	r0, r3
 8028b7a:	bfb8      	it	lt
 8028b7c:	4618      	movlt	r0, r3
 8028b7e:	e7a3      	b.n	8028ac8 <_printf_i+0x130>
 8028b80:	2301      	movs	r3, #1
 8028b82:	464a      	mov	r2, r9
 8028b84:	4639      	mov	r1, r7
 8028b86:	4630      	mov	r0, r6
 8028b88:	47c0      	blx	r8
 8028b8a:	3001      	adds	r0, #1
 8028b8c:	d09a      	beq.n	8028ac4 <_printf_i+0x12c>
 8028b8e:	3501      	adds	r5, #1
 8028b90:	68e3      	ldr	r3, [r4, #12]
 8028b92:	9a03      	ldr	r2, [sp, #12]
 8028b94:	1a9b      	subs	r3, r3, r2
 8028b96:	42ab      	cmp	r3, r5
 8028b98:	dcf2      	bgt.n	8028b80 <_printf_i+0x1e8>
 8028b9a:	e7eb      	b.n	8028b74 <_printf_i+0x1dc>
 8028b9c:	2500      	movs	r5, #0
 8028b9e:	f104 0919 	add.w	r9, r4, #25
 8028ba2:	e7f5      	b.n	8028b90 <_printf_i+0x1f8>
 8028ba4:	2b00      	cmp	r3, #0
 8028ba6:	d1ac      	bne.n	8028b02 <_printf_i+0x16a>
 8028ba8:	7803      	ldrb	r3, [r0, #0]
 8028baa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028bae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028bb2:	e76c      	b.n	8028a8e <_printf_i+0xf6>
 8028bb4:	0802de0d 	.word	0x0802de0d
 8028bb8:	0802de1e 	.word	0x0802de1e

08028bbc <_sbrk_r>:
 8028bbc:	b538      	push	{r3, r4, r5, lr}
 8028bbe:	4c06      	ldr	r4, [pc, #24]	; (8028bd8 <_sbrk_r+0x1c>)
 8028bc0:	2300      	movs	r3, #0
 8028bc2:	4605      	mov	r5, r0
 8028bc4:	4608      	mov	r0, r1
 8028bc6:	6023      	str	r3, [r4, #0]
 8028bc8:	f7da fdf2 	bl	80037b0 <_sbrk>
 8028bcc:	1c43      	adds	r3, r0, #1
 8028bce:	d102      	bne.n	8028bd6 <_sbrk_r+0x1a>
 8028bd0:	6823      	ldr	r3, [r4, #0]
 8028bd2:	b103      	cbz	r3, 8028bd6 <_sbrk_r+0x1a>
 8028bd4:	602b      	str	r3, [r5, #0]
 8028bd6:	bd38      	pop	{r3, r4, r5, pc}
 8028bd8:	2000cdac 	.word	0x2000cdac

08028bdc <_raise_r>:
 8028bdc:	291f      	cmp	r1, #31
 8028bde:	b538      	push	{r3, r4, r5, lr}
 8028be0:	4604      	mov	r4, r0
 8028be2:	460d      	mov	r5, r1
 8028be4:	d904      	bls.n	8028bf0 <_raise_r+0x14>
 8028be6:	2316      	movs	r3, #22
 8028be8:	6003      	str	r3, [r0, #0]
 8028bea:	f04f 30ff 	mov.w	r0, #4294967295
 8028bee:	bd38      	pop	{r3, r4, r5, pc}
 8028bf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028bf2:	b112      	cbz	r2, 8028bfa <_raise_r+0x1e>
 8028bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028bf8:	b94b      	cbnz	r3, 8028c0e <_raise_r+0x32>
 8028bfa:	4620      	mov	r0, r4
 8028bfc:	f000 f830 	bl	8028c60 <_getpid_r>
 8028c00:	462a      	mov	r2, r5
 8028c02:	4601      	mov	r1, r0
 8028c04:	4620      	mov	r0, r4
 8028c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028c0a:	f000 b817 	b.w	8028c3c <_kill_r>
 8028c0e:	2b01      	cmp	r3, #1
 8028c10:	d00a      	beq.n	8028c28 <_raise_r+0x4c>
 8028c12:	1c59      	adds	r1, r3, #1
 8028c14:	d103      	bne.n	8028c1e <_raise_r+0x42>
 8028c16:	2316      	movs	r3, #22
 8028c18:	6003      	str	r3, [r0, #0]
 8028c1a:	2001      	movs	r0, #1
 8028c1c:	e7e7      	b.n	8028bee <_raise_r+0x12>
 8028c1e:	2400      	movs	r4, #0
 8028c20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028c24:	4628      	mov	r0, r5
 8028c26:	4798      	blx	r3
 8028c28:	2000      	movs	r0, #0
 8028c2a:	e7e0      	b.n	8028bee <_raise_r+0x12>

08028c2c <raise>:
 8028c2c:	4b02      	ldr	r3, [pc, #8]	; (8028c38 <raise+0xc>)
 8028c2e:	4601      	mov	r1, r0
 8028c30:	6818      	ldr	r0, [r3, #0]
 8028c32:	f7ff bfd3 	b.w	8028bdc <_raise_r>
 8028c36:	bf00      	nop
 8028c38:	200000d8 	.word	0x200000d8

08028c3c <_kill_r>:
 8028c3c:	b538      	push	{r3, r4, r5, lr}
 8028c3e:	4c07      	ldr	r4, [pc, #28]	; (8028c5c <_kill_r+0x20>)
 8028c40:	2300      	movs	r3, #0
 8028c42:	4605      	mov	r5, r0
 8028c44:	4608      	mov	r0, r1
 8028c46:	4611      	mov	r1, r2
 8028c48:	6023      	str	r3, [r4, #0]
 8028c4a:	f7da fd29 	bl	80036a0 <_kill>
 8028c4e:	1c43      	adds	r3, r0, #1
 8028c50:	d102      	bne.n	8028c58 <_kill_r+0x1c>
 8028c52:	6823      	ldr	r3, [r4, #0]
 8028c54:	b103      	cbz	r3, 8028c58 <_kill_r+0x1c>
 8028c56:	602b      	str	r3, [r5, #0]
 8028c58:	bd38      	pop	{r3, r4, r5, pc}
 8028c5a:	bf00      	nop
 8028c5c:	2000cdac 	.word	0x2000cdac

08028c60 <_getpid_r>:
 8028c60:	f7da bd16 	b.w	8003690 <_getpid>

08028c64 <__swbuf_r>:
 8028c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c66:	460e      	mov	r6, r1
 8028c68:	4614      	mov	r4, r2
 8028c6a:	4605      	mov	r5, r0
 8028c6c:	b118      	cbz	r0, 8028c76 <__swbuf_r+0x12>
 8028c6e:	6983      	ldr	r3, [r0, #24]
 8028c70:	b90b      	cbnz	r3, 8028c76 <__swbuf_r+0x12>
 8028c72:	f000 fa0b 	bl	802908c <__sinit>
 8028c76:	4b21      	ldr	r3, [pc, #132]	; (8028cfc <__swbuf_r+0x98>)
 8028c78:	429c      	cmp	r4, r3
 8028c7a:	d12a      	bne.n	8028cd2 <__swbuf_r+0x6e>
 8028c7c:	686c      	ldr	r4, [r5, #4]
 8028c7e:	69a3      	ldr	r3, [r4, #24]
 8028c80:	60a3      	str	r3, [r4, #8]
 8028c82:	89a3      	ldrh	r3, [r4, #12]
 8028c84:	071a      	lsls	r2, r3, #28
 8028c86:	d52e      	bpl.n	8028ce6 <__swbuf_r+0x82>
 8028c88:	6923      	ldr	r3, [r4, #16]
 8028c8a:	b363      	cbz	r3, 8028ce6 <__swbuf_r+0x82>
 8028c8c:	6923      	ldr	r3, [r4, #16]
 8028c8e:	6820      	ldr	r0, [r4, #0]
 8028c90:	1ac0      	subs	r0, r0, r3
 8028c92:	6963      	ldr	r3, [r4, #20]
 8028c94:	b2f6      	uxtb	r6, r6
 8028c96:	4283      	cmp	r3, r0
 8028c98:	4637      	mov	r7, r6
 8028c9a:	dc04      	bgt.n	8028ca6 <__swbuf_r+0x42>
 8028c9c:	4621      	mov	r1, r4
 8028c9e:	4628      	mov	r0, r5
 8028ca0:	f000 f98a 	bl	8028fb8 <_fflush_r>
 8028ca4:	bb28      	cbnz	r0, 8028cf2 <__swbuf_r+0x8e>
 8028ca6:	68a3      	ldr	r3, [r4, #8]
 8028ca8:	3b01      	subs	r3, #1
 8028caa:	60a3      	str	r3, [r4, #8]
 8028cac:	6823      	ldr	r3, [r4, #0]
 8028cae:	1c5a      	adds	r2, r3, #1
 8028cb0:	6022      	str	r2, [r4, #0]
 8028cb2:	701e      	strb	r6, [r3, #0]
 8028cb4:	6963      	ldr	r3, [r4, #20]
 8028cb6:	3001      	adds	r0, #1
 8028cb8:	4283      	cmp	r3, r0
 8028cba:	d004      	beq.n	8028cc6 <__swbuf_r+0x62>
 8028cbc:	89a3      	ldrh	r3, [r4, #12]
 8028cbe:	07db      	lsls	r3, r3, #31
 8028cc0:	d519      	bpl.n	8028cf6 <__swbuf_r+0x92>
 8028cc2:	2e0a      	cmp	r6, #10
 8028cc4:	d117      	bne.n	8028cf6 <__swbuf_r+0x92>
 8028cc6:	4621      	mov	r1, r4
 8028cc8:	4628      	mov	r0, r5
 8028cca:	f000 f975 	bl	8028fb8 <_fflush_r>
 8028cce:	b190      	cbz	r0, 8028cf6 <__swbuf_r+0x92>
 8028cd0:	e00f      	b.n	8028cf2 <__swbuf_r+0x8e>
 8028cd2:	4b0b      	ldr	r3, [pc, #44]	; (8028d00 <__swbuf_r+0x9c>)
 8028cd4:	429c      	cmp	r4, r3
 8028cd6:	d101      	bne.n	8028cdc <__swbuf_r+0x78>
 8028cd8:	68ac      	ldr	r4, [r5, #8]
 8028cda:	e7d0      	b.n	8028c7e <__swbuf_r+0x1a>
 8028cdc:	4b09      	ldr	r3, [pc, #36]	; (8028d04 <__swbuf_r+0xa0>)
 8028cde:	429c      	cmp	r4, r3
 8028ce0:	bf08      	it	eq
 8028ce2:	68ec      	ldreq	r4, [r5, #12]
 8028ce4:	e7cb      	b.n	8028c7e <__swbuf_r+0x1a>
 8028ce6:	4621      	mov	r1, r4
 8028ce8:	4628      	mov	r0, r5
 8028cea:	f000 f80d 	bl	8028d08 <__swsetup_r>
 8028cee:	2800      	cmp	r0, #0
 8028cf0:	d0cc      	beq.n	8028c8c <__swbuf_r+0x28>
 8028cf2:	f04f 37ff 	mov.w	r7, #4294967295
 8028cf6:	4638      	mov	r0, r7
 8028cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028cfa:	bf00      	nop
 8028cfc:	0802de54 	.word	0x0802de54
 8028d00:	0802de74 	.word	0x0802de74
 8028d04:	0802de34 	.word	0x0802de34

08028d08 <__swsetup_r>:
 8028d08:	4b32      	ldr	r3, [pc, #200]	; (8028dd4 <__swsetup_r+0xcc>)
 8028d0a:	b570      	push	{r4, r5, r6, lr}
 8028d0c:	681d      	ldr	r5, [r3, #0]
 8028d0e:	4606      	mov	r6, r0
 8028d10:	460c      	mov	r4, r1
 8028d12:	b125      	cbz	r5, 8028d1e <__swsetup_r+0x16>
 8028d14:	69ab      	ldr	r3, [r5, #24]
 8028d16:	b913      	cbnz	r3, 8028d1e <__swsetup_r+0x16>
 8028d18:	4628      	mov	r0, r5
 8028d1a:	f000 f9b7 	bl	802908c <__sinit>
 8028d1e:	4b2e      	ldr	r3, [pc, #184]	; (8028dd8 <__swsetup_r+0xd0>)
 8028d20:	429c      	cmp	r4, r3
 8028d22:	d10f      	bne.n	8028d44 <__swsetup_r+0x3c>
 8028d24:	686c      	ldr	r4, [r5, #4]
 8028d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028d2a:	b29a      	uxth	r2, r3
 8028d2c:	0715      	lsls	r5, r2, #28
 8028d2e:	d42c      	bmi.n	8028d8a <__swsetup_r+0x82>
 8028d30:	06d0      	lsls	r0, r2, #27
 8028d32:	d411      	bmi.n	8028d58 <__swsetup_r+0x50>
 8028d34:	2209      	movs	r2, #9
 8028d36:	6032      	str	r2, [r6, #0]
 8028d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d3c:	81a3      	strh	r3, [r4, #12]
 8028d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8028d42:	e03e      	b.n	8028dc2 <__swsetup_r+0xba>
 8028d44:	4b25      	ldr	r3, [pc, #148]	; (8028ddc <__swsetup_r+0xd4>)
 8028d46:	429c      	cmp	r4, r3
 8028d48:	d101      	bne.n	8028d4e <__swsetup_r+0x46>
 8028d4a:	68ac      	ldr	r4, [r5, #8]
 8028d4c:	e7eb      	b.n	8028d26 <__swsetup_r+0x1e>
 8028d4e:	4b24      	ldr	r3, [pc, #144]	; (8028de0 <__swsetup_r+0xd8>)
 8028d50:	429c      	cmp	r4, r3
 8028d52:	bf08      	it	eq
 8028d54:	68ec      	ldreq	r4, [r5, #12]
 8028d56:	e7e6      	b.n	8028d26 <__swsetup_r+0x1e>
 8028d58:	0751      	lsls	r1, r2, #29
 8028d5a:	d512      	bpl.n	8028d82 <__swsetup_r+0x7a>
 8028d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028d5e:	b141      	cbz	r1, 8028d72 <__swsetup_r+0x6a>
 8028d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028d64:	4299      	cmp	r1, r3
 8028d66:	d002      	beq.n	8028d6e <__swsetup_r+0x66>
 8028d68:	4630      	mov	r0, r6
 8028d6a:	f7ff fbb7 	bl	80284dc <_free_r>
 8028d6e:	2300      	movs	r3, #0
 8028d70:	6363      	str	r3, [r4, #52]	; 0x34
 8028d72:	89a3      	ldrh	r3, [r4, #12]
 8028d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028d78:	81a3      	strh	r3, [r4, #12]
 8028d7a:	2300      	movs	r3, #0
 8028d7c:	6063      	str	r3, [r4, #4]
 8028d7e:	6923      	ldr	r3, [r4, #16]
 8028d80:	6023      	str	r3, [r4, #0]
 8028d82:	89a3      	ldrh	r3, [r4, #12]
 8028d84:	f043 0308 	orr.w	r3, r3, #8
 8028d88:	81a3      	strh	r3, [r4, #12]
 8028d8a:	6923      	ldr	r3, [r4, #16]
 8028d8c:	b94b      	cbnz	r3, 8028da2 <__swsetup_r+0x9a>
 8028d8e:	89a3      	ldrh	r3, [r4, #12]
 8028d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028d98:	d003      	beq.n	8028da2 <__swsetup_r+0x9a>
 8028d9a:	4621      	mov	r1, r4
 8028d9c:	4630      	mov	r0, r6
 8028d9e:	f000 fa23 	bl	80291e8 <__smakebuf_r>
 8028da2:	89a2      	ldrh	r2, [r4, #12]
 8028da4:	f012 0301 	ands.w	r3, r2, #1
 8028da8:	d00c      	beq.n	8028dc4 <__swsetup_r+0xbc>
 8028daa:	2300      	movs	r3, #0
 8028dac:	60a3      	str	r3, [r4, #8]
 8028dae:	6963      	ldr	r3, [r4, #20]
 8028db0:	425b      	negs	r3, r3
 8028db2:	61a3      	str	r3, [r4, #24]
 8028db4:	6923      	ldr	r3, [r4, #16]
 8028db6:	b953      	cbnz	r3, 8028dce <__swsetup_r+0xc6>
 8028db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028dbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8028dc0:	d1ba      	bne.n	8028d38 <__swsetup_r+0x30>
 8028dc2:	bd70      	pop	{r4, r5, r6, pc}
 8028dc4:	0792      	lsls	r2, r2, #30
 8028dc6:	bf58      	it	pl
 8028dc8:	6963      	ldrpl	r3, [r4, #20]
 8028dca:	60a3      	str	r3, [r4, #8]
 8028dcc:	e7f2      	b.n	8028db4 <__swsetup_r+0xac>
 8028dce:	2000      	movs	r0, #0
 8028dd0:	e7f7      	b.n	8028dc2 <__swsetup_r+0xba>
 8028dd2:	bf00      	nop
 8028dd4:	200000d8 	.word	0x200000d8
 8028dd8:	0802de54 	.word	0x0802de54
 8028ddc:	0802de74 	.word	0x0802de74
 8028de0:	0802de34 	.word	0x0802de34

08028de4 <__register_exitproc>:
 8028de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028de8:	4d2c      	ldr	r5, [pc, #176]	; (8028e9c <__register_exitproc+0xb8>)
 8028dea:	682c      	ldr	r4, [r5, #0]
 8028dec:	4607      	mov	r7, r0
 8028dee:	460e      	mov	r6, r1
 8028df0:	4691      	mov	r9, r2
 8028df2:	4698      	mov	r8, r3
 8028df4:	b934      	cbnz	r4, 8028e04 <__register_exitproc+0x20>
 8028df6:	4b2a      	ldr	r3, [pc, #168]	; (8028ea0 <__register_exitproc+0xbc>)
 8028df8:	4c2a      	ldr	r4, [pc, #168]	; (8028ea4 <__register_exitproc+0xc0>)
 8028dfa:	602c      	str	r4, [r5, #0]
 8028dfc:	b113      	cbz	r3, 8028e04 <__register_exitproc+0x20>
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028e04:	6863      	ldr	r3, [r4, #4]
 8028e06:	2b1f      	cmp	r3, #31
 8028e08:	dd3d      	ble.n	8028e86 <__register_exitproc+0xa2>
 8028e0a:	4b27      	ldr	r3, [pc, #156]	; (8028ea8 <__register_exitproc+0xc4>)
 8028e0c:	b91b      	cbnz	r3, 8028e16 <__register_exitproc+0x32>
 8028e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8028e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028e16:	208c      	movs	r0, #140	; 0x8c
 8028e18:	f7ff fb3c 	bl	8028494 <malloc>
 8028e1c:	4604      	mov	r4, r0
 8028e1e:	2800      	cmp	r0, #0
 8028e20:	d0f5      	beq.n	8028e0e <__register_exitproc+0x2a>
 8028e22:	2300      	movs	r3, #0
 8028e24:	682a      	ldr	r2, [r5, #0]
 8028e26:	6002      	str	r2, [r0, #0]
 8028e28:	6043      	str	r3, [r0, #4]
 8028e2a:	6028      	str	r0, [r5, #0]
 8028e2c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8028e30:	b30f      	cbz	r7, 8028e76 <__register_exitproc+0x92>
 8028e32:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028e36:	f7ff fb2d 	bl	8028494 <malloc>
 8028e3a:	2800      	cmp	r0, #0
 8028e3c:	d0e7      	beq.n	8028e0e <__register_exitproc+0x2a>
 8028e3e:	2300      	movs	r3, #0
 8028e40:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028e44:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8028e48:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028e4c:	6862      	ldr	r2, [r4, #4]
 8028e4e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8028e52:	2301      	movs	r3, #1
 8028e54:	4093      	lsls	r3, r2
 8028e56:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8028e5a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8028e5e:	431a      	orrs	r2, r3
 8028e60:	2f02      	cmp	r7, #2
 8028e62:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8028e66:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8028e6a:	bf02      	ittt	eq
 8028e6c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8028e70:	4313      	orreq	r3, r2
 8028e72:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028e76:	6863      	ldr	r3, [r4, #4]
 8028e78:	1c5a      	adds	r2, r3, #1
 8028e7a:	3302      	adds	r3, #2
 8028e7c:	6062      	str	r2, [r4, #4]
 8028e7e:	2000      	movs	r0, #0
 8028e80:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8028e84:	e7c5      	b.n	8028e12 <__register_exitproc+0x2e>
 8028e86:	2f00      	cmp	r7, #0
 8028e88:	d0f5      	beq.n	8028e76 <__register_exitproc+0x92>
 8028e8a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028e8e:	2800      	cmp	r0, #0
 8028e90:	d1dc      	bne.n	8028e4c <__register_exitproc+0x68>
 8028e92:	4b05      	ldr	r3, [pc, #20]	; (8028ea8 <__register_exitproc+0xc4>)
 8028e94:	2b00      	cmp	r3, #0
 8028e96:	d0ba      	beq.n	8028e0e <__register_exitproc+0x2a>
 8028e98:	e7cb      	b.n	8028e32 <__register_exitproc+0x4e>
 8028e9a:	bf00      	nop
 8028e9c:	2000c1a4 	.word	0x2000c1a4
 8028ea0:	0802de30 	.word	0x0802de30
 8028ea4:	2000c118 	.word	0x2000c118
 8028ea8:	08028495 	.word	0x08028495

08028eac <__sflush_r>:
 8028eac:	898a      	ldrh	r2, [r1, #12]
 8028eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028eb2:	4605      	mov	r5, r0
 8028eb4:	0710      	lsls	r0, r2, #28
 8028eb6:	460c      	mov	r4, r1
 8028eb8:	d458      	bmi.n	8028f6c <__sflush_r+0xc0>
 8028eba:	684b      	ldr	r3, [r1, #4]
 8028ebc:	2b00      	cmp	r3, #0
 8028ebe:	dc05      	bgt.n	8028ecc <__sflush_r+0x20>
 8028ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028ec2:	2b00      	cmp	r3, #0
 8028ec4:	dc02      	bgt.n	8028ecc <__sflush_r+0x20>
 8028ec6:	2000      	movs	r0, #0
 8028ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028ece:	2e00      	cmp	r6, #0
 8028ed0:	d0f9      	beq.n	8028ec6 <__sflush_r+0x1a>
 8028ed2:	2300      	movs	r3, #0
 8028ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028ed8:	682f      	ldr	r7, [r5, #0]
 8028eda:	6a21      	ldr	r1, [r4, #32]
 8028edc:	602b      	str	r3, [r5, #0]
 8028ede:	d032      	beq.n	8028f46 <__sflush_r+0x9a>
 8028ee0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028ee2:	89a3      	ldrh	r3, [r4, #12]
 8028ee4:	075a      	lsls	r2, r3, #29
 8028ee6:	d505      	bpl.n	8028ef4 <__sflush_r+0x48>
 8028ee8:	6863      	ldr	r3, [r4, #4]
 8028eea:	1ac0      	subs	r0, r0, r3
 8028eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028eee:	b10b      	cbz	r3, 8028ef4 <__sflush_r+0x48>
 8028ef0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028ef2:	1ac0      	subs	r0, r0, r3
 8028ef4:	2300      	movs	r3, #0
 8028ef6:	4602      	mov	r2, r0
 8028ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028efa:	6a21      	ldr	r1, [r4, #32]
 8028efc:	4628      	mov	r0, r5
 8028efe:	47b0      	blx	r6
 8028f00:	1c43      	adds	r3, r0, #1
 8028f02:	89a3      	ldrh	r3, [r4, #12]
 8028f04:	d106      	bne.n	8028f14 <__sflush_r+0x68>
 8028f06:	6829      	ldr	r1, [r5, #0]
 8028f08:	291d      	cmp	r1, #29
 8028f0a:	d848      	bhi.n	8028f9e <__sflush_r+0xf2>
 8028f0c:	4a29      	ldr	r2, [pc, #164]	; (8028fb4 <__sflush_r+0x108>)
 8028f0e:	40ca      	lsrs	r2, r1
 8028f10:	07d6      	lsls	r6, r2, #31
 8028f12:	d544      	bpl.n	8028f9e <__sflush_r+0xf2>
 8028f14:	2200      	movs	r2, #0
 8028f16:	6062      	str	r2, [r4, #4]
 8028f18:	04d9      	lsls	r1, r3, #19
 8028f1a:	6922      	ldr	r2, [r4, #16]
 8028f1c:	6022      	str	r2, [r4, #0]
 8028f1e:	d504      	bpl.n	8028f2a <__sflush_r+0x7e>
 8028f20:	1c42      	adds	r2, r0, #1
 8028f22:	d101      	bne.n	8028f28 <__sflush_r+0x7c>
 8028f24:	682b      	ldr	r3, [r5, #0]
 8028f26:	b903      	cbnz	r3, 8028f2a <__sflush_r+0x7e>
 8028f28:	6560      	str	r0, [r4, #84]	; 0x54
 8028f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028f2c:	602f      	str	r7, [r5, #0]
 8028f2e:	2900      	cmp	r1, #0
 8028f30:	d0c9      	beq.n	8028ec6 <__sflush_r+0x1a>
 8028f32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028f36:	4299      	cmp	r1, r3
 8028f38:	d002      	beq.n	8028f40 <__sflush_r+0x94>
 8028f3a:	4628      	mov	r0, r5
 8028f3c:	f7ff face 	bl	80284dc <_free_r>
 8028f40:	2000      	movs	r0, #0
 8028f42:	6360      	str	r0, [r4, #52]	; 0x34
 8028f44:	e7c0      	b.n	8028ec8 <__sflush_r+0x1c>
 8028f46:	2301      	movs	r3, #1
 8028f48:	4628      	mov	r0, r5
 8028f4a:	47b0      	blx	r6
 8028f4c:	1c41      	adds	r1, r0, #1
 8028f4e:	d1c8      	bne.n	8028ee2 <__sflush_r+0x36>
 8028f50:	682b      	ldr	r3, [r5, #0]
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	d0c5      	beq.n	8028ee2 <__sflush_r+0x36>
 8028f56:	2b1d      	cmp	r3, #29
 8028f58:	d001      	beq.n	8028f5e <__sflush_r+0xb2>
 8028f5a:	2b16      	cmp	r3, #22
 8028f5c:	d101      	bne.n	8028f62 <__sflush_r+0xb6>
 8028f5e:	602f      	str	r7, [r5, #0]
 8028f60:	e7b1      	b.n	8028ec6 <__sflush_r+0x1a>
 8028f62:	89a3      	ldrh	r3, [r4, #12]
 8028f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028f68:	81a3      	strh	r3, [r4, #12]
 8028f6a:	e7ad      	b.n	8028ec8 <__sflush_r+0x1c>
 8028f6c:	690f      	ldr	r7, [r1, #16]
 8028f6e:	2f00      	cmp	r7, #0
 8028f70:	d0a9      	beq.n	8028ec6 <__sflush_r+0x1a>
 8028f72:	0793      	lsls	r3, r2, #30
 8028f74:	680e      	ldr	r6, [r1, #0]
 8028f76:	bf08      	it	eq
 8028f78:	694b      	ldreq	r3, [r1, #20]
 8028f7a:	600f      	str	r7, [r1, #0]
 8028f7c:	bf18      	it	ne
 8028f7e:	2300      	movne	r3, #0
 8028f80:	eba6 0807 	sub.w	r8, r6, r7
 8028f84:	608b      	str	r3, [r1, #8]
 8028f86:	f1b8 0f00 	cmp.w	r8, #0
 8028f8a:	dd9c      	ble.n	8028ec6 <__sflush_r+0x1a>
 8028f8c:	4643      	mov	r3, r8
 8028f8e:	463a      	mov	r2, r7
 8028f90:	6a21      	ldr	r1, [r4, #32]
 8028f92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028f94:	4628      	mov	r0, r5
 8028f96:	47b0      	blx	r6
 8028f98:	2800      	cmp	r0, #0
 8028f9a:	dc06      	bgt.n	8028faa <__sflush_r+0xfe>
 8028f9c:	89a3      	ldrh	r3, [r4, #12]
 8028f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028fa2:	81a3      	strh	r3, [r4, #12]
 8028fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8028fa8:	e78e      	b.n	8028ec8 <__sflush_r+0x1c>
 8028faa:	4407      	add	r7, r0
 8028fac:	eba8 0800 	sub.w	r8, r8, r0
 8028fb0:	e7e9      	b.n	8028f86 <__sflush_r+0xda>
 8028fb2:	bf00      	nop
 8028fb4:	20400001 	.word	0x20400001

08028fb8 <_fflush_r>:
 8028fb8:	b538      	push	{r3, r4, r5, lr}
 8028fba:	690b      	ldr	r3, [r1, #16]
 8028fbc:	4605      	mov	r5, r0
 8028fbe:	460c      	mov	r4, r1
 8028fc0:	b1db      	cbz	r3, 8028ffa <_fflush_r+0x42>
 8028fc2:	b118      	cbz	r0, 8028fcc <_fflush_r+0x14>
 8028fc4:	6983      	ldr	r3, [r0, #24]
 8028fc6:	b90b      	cbnz	r3, 8028fcc <_fflush_r+0x14>
 8028fc8:	f000 f860 	bl	802908c <__sinit>
 8028fcc:	4b0c      	ldr	r3, [pc, #48]	; (8029000 <_fflush_r+0x48>)
 8028fce:	429c      	cmp	r4, r3
 8028fd0:	d109      	bne.n	8028fe6 <_fflush_r+0x2e>
 8028fd2:	686c      	ldr	r4, [r5, #4]
 8028fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028fd8:	b17b      	cbz	r3, 8028ffa <_fflush_r+0x42>
 8028fda:	4621      	mov	r1, r4
 8028fdc:	4628      	mov	r0, r5
 8028fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028fe2:	f7ff bf63 	b.w	8028eac <__sflush_r>
 8028fe6:	4b07      	ldr	r3, [pc, #28]	; (8029004 <_fflush_r+0x4c>)
 8028fe8:	429c      	cmp	r4, r3
 8028fea:	d101      	bne.n	8028ff0 <_fflush_r+0x38>
 8028fec:	68ac      	ldr	r4, [r5, #8]
 8028fee:	e7f1      	b.n	8028fd4 <_fflush_r+0x1c>
 8028ff0:	4b05      	ldr	r3, [pc, #20]	; (8029008 <_fflush_r+0x50>)
 8028ff2:	429c      	cmp	r4, r3
 8028ff4:	bf08      	it	eq
 8028ff6:	68ec      	ldreq	r4, [r5, #12]
 8028ff8:	e7ec      	b.n	8028fd4 <_fflush_r+0x1c>
 8028ffa:	2000      	movs	r0, #0
 8028ffc:	bd38      	pop	{r3, r4, r5, pc}
 8028ffe:	bf00      	nop
 8029000:	0802de54 	.word	0x0802de54
 8029004:	0802de74 	.word	0x0802de74
 8029008:	0802de34 	.word	0x0802de34

0802900c <std>:
 802900c:	2300      	movs	r3, #0
 802900e:	b510      	push	{r4, lr}
 8029010:	4604      	mov	r4, r0
 8029012:	e9c0 3300 	strd	r3, r3, [r0]
 8029016:	6083      	str	r3, [r0, #8]
 8029018:	8181      	strh	r1, [r0, #12]
 802901a:	6643      	str	r3, [r0, #100]	; 0x64
 802901c:	81c2      	strh	r2, [r0, #14]
 802901e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029022:	6183      	str	r3, [r0, #24]
 8029024:	4619      	mov	r1, r3
 8029026:	2208      	movs	r2, #8
 8029028:	305c      	adds	r0, #92	; 0x5c
 802902a:	f7ff fa4e 	bl	80284ca <memset>
 802902e:	4b05      	ldr	r3, [pc, #20]	; (8029044 <std+0x38>)
 8029030:	6263      	str	r3, [r4, #36]	; 0x24
 8029032:	4b05      	ldr	r3, [pc, #20]	; (8029048 <std+0x3c>)
 8029034:	62a3      	str	r3, [r4, #40]	; 0x28
 8029036:	4b05      	ldr	r3, [pc, #20]	; (802904c <std+0x40>)
 8029038:	62e3      	str	r3, [r4, #44]	; 0x2c
 802903a:	4b05      	ldr	r3, [pc, #20]	; (8029050 <std+0x44>)
 802903c:	6224      	str	r4, [r4, #32]
 802903e:	6323      	str	r3, [r4, #48]	; 0x30
 8029040:	bd10      	pop	{r4, pc}
 8029042:	bf00      	nop
 8029044:	0802926d 	.word	0x0802926d
 8029048:	0802928f 	.word	0x0802928f
 802904c:	080292c7 	.word	0x080292c7
 8029050:	080292eb 	.word	0x080292eb

08029054 <_cleanup_r>:
 8029054:	4901      	ldr	r1, [pc, #4]	; (802905c <_cleanup_r+0x8>)
 8029056:	f000 b885 	b.w	8029164 <_fwalk_reent>
 802905a:	bf00      	nop
 802905c:	08028fb9 	.word	0x08028fb9

08029060 <__sfmoreglue>:
 8029060:	b570      	push	{r4, r5, r6, lr}
 8029062:	1e4a      	subs	r2, r1, #1
 8029064:	2568      	movs	r5, #104	; 0x68
 8029066:	4355      	muls	r5, r2
 8029068:	460e      	mov	r6, r1
 802906a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802906e:	f7ff fa83 	bl	8028578 <_malloc_r>
 8029072:	4604      	mov	r4, r0
 8029074:	b140      	cbz	r0, 8029088 <__sfmoreglue+0x28>
 8029076:	2100      	movs	r1, #0
 8029078:	e9c0 1600 	strd	r1, r6, [r0]
 802907c:	300c      	adds	r0, #12
 802907e:	60a0      	str	r0, [r4, #8]
 8029080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029084:	f7ff fa21 	bl	80284ca <memset>
 8029088:	4620      	mov	r0, r4
 802908a:	bd70      	pop	{r4, r5, r6, pc}

0802908c <__sinit>:
 802908c:	6983      	ldr	r3, [r0, #24]
 802908e:	b510      	push	{r4, lr}
 8029090:	4604      	mov	r4, r0
 8029092:	bb33      	cbnz	r3, 80290e2 <__sinit+0x56>
 8029094:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8029098:	6503      	str	r3, [r0, #80]	; 0x50
 802909a:	4b12      	ldr	r3, [pc, #72]	; (80290e4 <__sinit+0x58>)
 802909c:	4a12      	ldr	r2, [pc, #72]	; (80290e8 <__sinit+0x5c>)
 802909e:	681b      	ldr	r3, [r3, #0]
 80290a0:	6282      	str	r2, [r0, #40]	; 0x28
 80290a2:	4298      	cmp	r0, r3
 80290a4:	bf04      	itt	eq
 80290a6:	2301      	moveq	r3, #1
 80290a8:	6183      	streq	r3, [r0, #24]
 80290aa:	f000 f81f 	bl	80290ec <__sfp>
 80290ae:	6060      	str	r0, [r4, #4]
 80290b0:	4620      	mov	r0, r4
 80290b2:	f000 f81b 	bl	80290ec <__sfp>
 80290b6:	60a0      	str	r0, [r4, #8]
 80290b8:	4620      	mov	r0, r4
 80290ba:	f000 f817 	bl	80290ec <__sfp>
 80290be:	2200      	movs	r2, #0
 80290c0:	60e0      	str	r0, [r4, #12]
 80290c2:	2104      	movs	r1, #4
 80290c4:	6860      	ldr	r0, [r4, #4]
 80290c6:	f7ff ffa1 	bl	802900c <std>
 80290ca:	2201      	movs	r2, #1
 80290cc:	2109      	movs	r1, #9
 80290ce:	68a0      	ldr	r0, [r4, #8]
 80290d0:	f7ff ff9c 	bl	802900c <std>
 80290d4:	2202      	movs	r2, #2
 80290d6:	2112      	movs	r1, #18
 80290d8:	68e0      	ldr	r0, [r4, #12]
 80290da:	f7ff ff97 	bl	802900c <std>
 80290de:	2301      	movs	r3, #1
 80290e0:	61a3      	str	r3, [r4, #24]
 80290e2:	bd10      	pop	{r4, pc}
 80290e4:	0802ddf8 	.word	0x0802ddf8
 80290e8:	08029055 	.word	0x08029055

080290ec <__sfp>:
 80290ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290ee:	4b1b      	ldr	r3, [pc, #108]	; (802915c <__sfp+0x70>)
 80290f0:	681e      	ldr	r6, [r3, #0]
 80290f2:	69b3      	ldr	r3, [r6, #24]
 80290f4:	4607      	mov	r7, r0
 80290f6:	b913      	cbnz	r3, 80290fe <__sfp+0x12>
 80290f8:	4630      	mov	r0, r6
 80290fa:	f7ff ffc7 	bl	802908c <__sinit>
 80290fe:	3648      	adds	r6, #72	; 0x48
 8029100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029104:	3b01      	subs	r3, #1
 8029106:	d503      	bpl.n	8029110 <__sfp+0x24>
 8029108:	6833      	ldr	r3, [r6, #0]
 802910a:	b133      	cbz	r3, 802911a <__sfp+0x2e>
 802910c:	6836      	ldr	r6, [r6, #0]
 802910e:	e7f7      	b.n	8029100 <__sfp+0x14>
 8029110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029114:	b16d      	cbz	r5, 8029132 <__sfp+0x46>
 8029116:	3468      	adds	r4, #104	; 0x68
 8029118:	e7f4      	b.n	8029104 <__sfp+0x18>
 802911a:	2104      	movs	r1, #4
 802911c:	4638      	mov	r0, r7
 802911e:	f7ff ff9f 	bl	8029060 <__sfmoreglue>
 8029122:	6030      	str	r0, [r6, #0]
 8029124:	2800      	cmp	r0, #0
 8029126:	d1f1      	bne.n	802910c <__sfp+0x20>
 8029128:	230c      	movs	r3, #12
 802912a:	603b      	str	r3, [r7, #0]
 802912c:	4604      	mov	r4, r0
 802912e:	4620      	mov	r0, r4
 8029130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029132:	4b0b      	ldr	r3, [pc, #44]	; (8029160 <__sfp+0x74>)
 8029134:	6665      	str	r5, [r4, #100]	; 0x64
 8029136:	e9c4 5500 	strd	r5, r5, [r4]
 802913a:	60a5      	str	r5, [r4, #8]
 802913c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8029140:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8029144:	2208      	movs	r2, #8
 8029146:	4629      	mov	r1, r5
 8029148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802914c:	f7ff f9bd 	bl	80284ca <memset>
 8029150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029158:	e7e9      	b.n	802912e <__sfp+0x42>
 802915a:	bf00      	nop
 802915c:	0802ddf8 	.word	0x0802ddf8
 8029160:	ffff0001 	.word	0xffff0001

08029164 <_fwalk_reent>:
 8029164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029168:	4680      	mov	r8, r0
 802916a:	4689      	mov	r9, r1
 802916c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029170:	2600      	movs	r6, #0
 8029172:	b914      	cbnz	r4, 802917a <_fwalk_reent+0x16>
 8029174:	4630      	mov	r0, r6
 8029176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802917a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802917e:	3f01      	subs	r7, #1
 8029180:	d501      	bpl.n	8029186 <_fwalk_reent+0x22>
 8029182:	6824      	ldr	r4, [r4, #0]
 8029184:	e7f5      	b.n	8029172 <_fwalk_reent+0xe>
 8029186:	89ab      	ldrh	r3, [r5, #12]
 8029188:	2b01      	cmp	r3, #1
 802918a:	d907      	bls.n	802919c <_fwalk_reent+0x38>
 802918c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029190:	3301      	adds	r3, #1
 8029192:	d003      	beq.n	802919c <_fwalk_reent+0x38>
 8029194:	4629      	mov	r1, r5
 8029196:	4640      	mov	r0, r8
 8029198:	47c8      	blx	r9
 802919a:	4306      	orrs	r6, r0
 802919c:	3568      	adds	r5, #104	; 0x68
 802919e:	e7ee      	b.n	802917e <_fwalk_reent+0x1a>

080291a0 <__swhatbuf_r>:
 80291a0:	b570      	push	{r4, r5, r6, lr}
 80291a2:	460e      	mov	r6, r1
 80291a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80291a8:	2900      	cmp	r1, #0
 80291aa:	b096      	sub	sp, #88	; 0x58
 80291ac:	4614      	mov	r4, r2
 80291ae:	461d      	mov	r5, r3
 80291b0:	da07      	bge.n	80291c2 <__swhatbuf_r+0x22>
 80291b2:	2300      	movs	r3, #0
 80291b4:	602b      	str	r3, [r5, #0]
 80291b6:	89b3      	ldrh	r3, [r6, #12]
 80291b8:	061a      	lsls	r2, r3, #24
 80291ba:	d410      	bmi.n	80291de <__swhatbuf_r+0x3e>
 80291bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80291c0:	e00e      	b.n	80291e0 <__swhatbuf_r+0x40>
 80291c2:	466a      	mov	r2, sp
 80291c4:	f000 f8b8 	bl	8029338 <_fstat_r>
 80291c8:	2800      	cmp	r0, #0
 80291ca:	dbf2      	blt.n	80291b2 <__swhatbuf_r+0x12>
 80291cc:	9a01      	ldr	r2, [sp, #4]
 80291ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80291d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80291d6:	425a      	negs	r2, r3
 80291d8:	415a      	adcs	r2, r3
 80291da:	602a      	str	r2, [r5, #0]
 80291dc:	e7ee      	b.n	80291bc <__swhatbuf_r+0x1c>
 80291de:	2340      	movs	r3, #64	; 0x40
 80291e0:	2000      	movs	r0, #0
 80291e2:	6023      	str	r3, [r4, #0]
 80291e4:	b016      	add	sp, #88	; 0x58
 80291e6:	bd70      	pop	{r4, r5, r6, pc}

080291e8 <__smakebuf_r>:
 80291e8:	898b      	ldrh	r3, [r1, #12]
 80291ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80291ec:	079d      	lsls	r5, r3, #30
 80291ee:	4606      	mov	r6, r0
 80291f0:	460c      	mov	r4, r1
 80291f2:	d507      	bpl.n	8029204 <__smakebuf_r+0x1c>
 80291f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80291f8:	6023      	str	r3, [r4, #0]
 80291fa:	6123      	str	r3, [r4, #16]
 80291fc:	2301      	movs	r3, #1
 80291fe:	6163      	str	r3, [r4, #20]
 8029200:	b002      	add	sp, #8
 8029202:	bd70      	pop	{r4, r5, r6, pc}
 8029204:	ab01      	add	r3, sp, #4
 8029206:	466a      	mov	r2, sp
 8029208:	f7ff ffca 	bl	80291a0 <__swhatbuf_r>
 802920c:	9900      	ldr	r1, [sp, #0]
 802920e:	4605      	mov	r5, r0
 8029210:	4630      	mov	r0, r6
 8029212:	f7ff f9b1 	bl	8028578 <_malloc_r>
 8029216:	b948      	cbnz	r0, 802922c <__smakebuf_r+0x44>
 8029218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802921c:	059a      	lsls	r2, r3, #22
 802921e:	d4ef      	bmi.n	8029200 <__smakebuf_r+0x18>
 8029220:	f023 0303 	bic.w	r3, r3, #3
 8029224:	f043 0302 	orr.w	r3, r3, #2
 8029228:	81a3      	strh	r3, [r4, #12]
 802922a:	e7e3      	b.n	80291f4 <__smakebuf_r+0xc>
 802922c:	4b0d      	ldr	r3, [pc, #52]	; (8029264 <__smakebuf_r+0x7c>)
 802922e:	62b3      	str	r3, [r6, #40]	; 0x28
 8029230:	89a3      	ldrh	r3, [r4, #12]
 8029232:	6020      	str	r0, [r4, #0]
 8029234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029238:	81a3      	strh	r3, [r4, #12]
 802923a:	9b00      	ldr	r3, [sp, #0]
 802923c:	6163      	str	r3, [r4, #20]
 802923e:	9b01      	ldr	r3, [sp, #4]
 8029240:	6120      	str	r0, [r4, #16]
 8029242:	b15b      	cbz	r3, 802925c <__smakebuf_r+0x74>
 8029244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029248:	4630      	mov	r0, r6
 802924a:	f000 f887 	bl	802935c <_isatty_r>
 802924e:	b128      	cbz	r0, 802925c <__smakebuf_r+0x74>
 8029250:	89a3      	ldrh	r3, [r4, #12]
 8029252:	f023 0303 	bic.w	r3, r3, #3
 8029256:	f043 0301 	orr.w	r3, r3, #1
 802925a:	81a3      	strh	r3, [r4, #12]
 802925c:	89a3      	ldrh	r3, [r4, #12]
 802925e:	431d      	orrs	r5, r3
 8029260:	81a5      	strh	r5, [r4, #12]
 8029262:	e7cd      	b.n	8029200 <__smakebuf_r+0x18>
 8029264:	08029055 	.word	0x08029055

08029268 <__malloc_lock>:
 8029268:	4770      	bx	lr

0802926a <__malloc_unlock>:
 802926a:	4770      	bx	lr

0802926c <__sread>:
 802926c:	b510      	push	{r4, lr}
 802926e:	460c      	mov	r4, r1
 8029270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029274:	f000 f894 	bl	80293a0 <_read_r>
 8029278:	2800      	cmp	r0, #0
 802927a:	bfab      	itete	ge
 802927c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802927e:	89a3      	ldrhlt	r3, [r4, #12]
 8029280:	181b      	addge	r3, r3, r0
 8029282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029286:	bfac      	ite	ge
 8029288:	6563      	strge	r3, [r4, #84]	; 0x54
 802928a:	81a3      	strhlt	r3, [r4, #12]
 802928c:	bd10      	pop	{r4, pc}

0802928e <__swrite>:
 802928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029292:	461f      	mov	r7, r3
 8029294:	898b      	ldrh	r3, [r1, #12]
 8029296:	05db      	lsls	r3, r3, #23
 8029298:	4605      	mov	r5, r0
 802929a:	460c      	mov	r4, r1
 802929c:	4616      	mov	r6, r2
 802929e:	d505      	bpl.n	80292ac <__swrite+0x1e>
 80292a0:	2302      	movs	r3, #2
 80292a2:	2200      	movs	r2, #0
 80292a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292a8:	f000 f868 	bl	802937c <_lseek_r>
 80292ac:	89a3      	ldrh	r3, [r4, #12]
 80292ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80292b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80292b6:	81a3      	strh	r3, [r4, #12]
 80292b8:	4632      	mov	r2, r6
 80292ba:	463b      	mov	r3, r7
 80292bc:	4628      	mov	r0, r5
 80292be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80292c2:	f000 b817 	b.w	80292f4 <_write_r>

080292c6 <__sseek>:
 80292c6:	b510      	push	{r4, lr}
 80292c8:	460c      	mov	r4, r1
 80292ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292ce:	f000 f855 	bl	802937c <_lseek_r>
 80292d2:	1c43      	adds	r3, r0, #1
 80292d4:	89a3      	ldrh	r3, [r4, #12]
 80292d6:	bf15      	itete	ne
 80292d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80292da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80292de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80292e2:	81a3      	strheq	r3, [r4, #12]
 80292e4:	bf18      	it	ne
 80292e6:	81a3      	strhne	r3, [r4, #12]
 80292e8:	bd10      	pop	{r4, pc}

080292ea <__sclose>:
 80292ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292ee:	f000 b813 	b.w	8029318 <_close_r>
	...

080292f4 <_write_r>:
 80292f4:	b538      	push	{r3, r4, r5, lr}
 80292f6:	4c07      	ldr	r4, [pc, #28]	; (8029314 <_write_r+0x20>)
 80292f8:	4605      	mov	r5, r0
 80292fa:	4608      	mov	r0, r1
 80292fc:	4611      	mov	r1, r2
 80292fe:	2200      	movs	r2, #0
 8029300:	6022      	str	r2, [r4, #0]
 8029302:	461a      	mov	r2, r3
 8029304:	f7da fa03 	bl	800370e <_write>
 8029308:	1c43      	adds	r3, r0, #1
 802930a:	d102      	bne.n	8029312 <_write_r+0x1e>
 802930c:	6823      	ldr	r3, [r4, #0]
 802930e:	b103      	cbz	r3, 8029312 <_write_r+0x1e>
 8029310:	602b      	str	r3, [r5, #0]
 8029312:	bd38      	pop	{r3, r4, r5, pc}
 8029314:	2000cdac 	.word	0x2000cdac

08029318 <_close_r>:
 8029318:	b538      	push	{r3, r4, r5, lr}
 802931a:	4c06      	ldr	r4, [pc, #24]	; (8029334 <_close_r+0x1c>)
 802931c:	2300      	movs	r3, #0
 802931e:	4605      	mov	r5, r0
 8029320:	4608      	mov	r0, r1
 8029322:	6023      	str	r3, [r4, #0]
 8029324:	f7da fa0f 	bl	8003746 <_close>
 8029328:	1c43      	adds	r3, r0, #1
 802932a:	d102      	bne.n	8029332 <_close_r+0x1a>
 802932c:	6823      	ldr	r3, [r4, #0]
 802932e:	b103      	cbz	r3, 8029332 <_close_r+0x1a>
 8029330:	602b      	str	r3, [r5, #0]
 8029332:	bd38      	pop	{r3, r4, r5, pc}
 8029334:	2000cdac 	.word	0x2000cdac

08029338 <_fstat_r>:
 8029338:	b538      	push	{r3, r4, r5, lr}
 802933a:	4c07      	ldr	r4, [pc, #28]	; (8029358 <_fstat_r+0x20>)
 802933c:	2300      	movs	r3, #0
 802933e:	4605      	mov	r5, r0
 8029340:	4608      	mov	r0, r1
 8029342:	4611      	mov	r1, r2
 8029344:	6023      	str	r3, [r4, #0]
 8029346:	f7da fa0a 	bl	800375e <_fstat>
 802934a:	1c43      	adds	r3, r0, #1
 802934c:	d102      	bne.n	8029354 <_fstat_r+0x1c>
 802934e:	6823      	ldr	r3, [r4, #0]
 8029350:	b103      	cbz	r3, 8029354 <_fstat_r+0x1c>
 8029352:	602b      	str	r3, [r5, #0]
 8029354:	bd38      	pop	{r3, r4, r5, pc}
 8029356:	bf00      	nop
 8029358:	2000cdac 	.word	0x2000cdac

0802935c <_isatty_r>:
 802935c:	b538      	push	{r3, r4, r5, lr}
 802935e:	4c06      	ldr	r4, [pc, #24]	; (8029378 <_isatty_r+0x1c>)
 8029360:	2300      	movs	r3, #0
 8029362:	4605      	mov	r5, r0
 8029364:	4608      	mov	r0, r1
 8029366:	6023      	str	r3, [r4, #0]
 8029368:	f7da fa09 	bl	800377e <_isatty>
 802936c:	1c43      	adds	r3, r0, #1
 802936e:	d102      	bne.n	8029376 <_isatty_r+0x1a>
 8029370:	6823      	ldr	r3, [r4, #0]
 8029372:	b103      	cbz	r3, 8029376 <_isatty_r+0x1a>
 8029374:	602b      	str	r3, [r5, #0]
 8029376:	bd38      	pop	{r3, r4, r5, pc}
 8029378:	2000cdac 	.word	0x2000cdac

0802937c <_lseek_r>:
 802937c:	b538      	push	{r3, r4, r5, lr}
 802937e:	4c07      	ldr	r4, [pc, #28]	; (802939c <_lseek_r+0x20>)
 8029380:	4605      	mov	r5, r0
 8029382:	4608      	mov	r0, r1
 8029384:	4611      	mov	r1, r2
 8029386:	2200      	movs	r2, #0
 8029388:	6022      	str	r2, [r4, #0]
 802938a:	461a      	mov	r2, r3
 802938c:	f7da fa02 	bl	8003794 <_lseek>
 8029390:	1c43      	adds	r3, r0, #1
 8029392:	d102      	bne.n	802939a <_lseek_r+0x1e>
 8029394:	6823      	ldr	r3, [r4, #0]
 8029396:	b103      	cbz	r3, 802939a <_lseek_r+0x1e>
 8029398:	602b      	str	r3, [r5, #0]
 802939a:	bd38      	pop	{r3, r4, r5, pc}
 802939c:	2000cdac 	.word	0x2000cdac

080293a0 <_read_r>:
 80293a0:	b538      	push	{r3, r4, r5, lr}
 80293a2:	4c07      	ldr	r4, [pc, #28]	; (80293c0 <_read_r+0x20>)
 80293a4:	4605      	mov	r5, r0
 80293a6:	4608      	mov	r0, r1
 80293a8:	4611      	mov	r1, r2
 80293aa:	2200      	movs	r2, #0
 80293ac:	6022      	str	r2, [r4, #0]
 80293ae:	461a      	mov	r2, r3
 80293b0:	f7da f990 	bl	80036d4 <_read>
 80293b4:	1c43      	adds	r3, r0, #1
 80293b6:	d102      	bne.n	80293be <_read_r+0x1e>
 80293b8:	6823      	ldr	r3, [r4, #0]
 80293ba:	b103      	cbz	r3, 80293be <_read_r+0x1e>
 80293bc:	602b      	str	r3, [r5, #0]
 80293be:	bd38      	pop	{r3, r4, r5, pc}
 80293c0:	2000cdac 	.word	0x2000cdac

080293c4 <_init>:
 80293c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293c6:	bf00      	nop
 80293c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293ca:	bc08      	pop	{r3}
 80293cc:	469e      	mov	lr, r3
 80293ce:	4770      	bx	lr

080293d0 <_fini>:
 80293d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293d2:	bf00      	nop
 80293d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293d6:	bc08      	pop	{r3}
 80293d8:	469e      	mov	lr, r3
 80293da:	4770      	bx	lr
